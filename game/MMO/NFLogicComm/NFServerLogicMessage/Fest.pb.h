// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fest.proto

#ifndef PROTOBUF_Fest_2eproto__INCLUDED
#define PROTOBUF_Fest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Fest_2eproto();
void protobuf_AssignDesc_Fest_2eproto();
void protobuf_ShutdownFile_Fest_2eproto();

class FestSimpleProto;
class FestSimpleListProto;
class FestRedPointProto;
class FestRedPointListProto;
class FestShopProto;
class FestShopDetailProto;
class FestSignDetailProto;
class FestDailyTotalRechargeDetailProto;
class FestGoldStoreProto;
class FestDigEggLogProto;
class FestDigEggTaskProto;
class FestDigEggProto;
class FestCandleProto;
class FestCandRankProto;
class FestRTurnableRechargeProto;
class FestTurnableProto;
class FestDonateProto;
class FestOnlineProto;
class FestCollectWordProto;
class FestBossDetailProto;
class FestMarryDetail;
class FestDayTotalRechargeProto;
class FestLoginProto;
class FestTotalRechargeProto;
class FestContiTotalRewardProto;
class FestContiDayRewardProto;
class FestContiRechargeProto;
class FestLimitShopProto;
class FestLimitSaleProto;
class FestMysteryProto;
class FestShootSunLogProto;
class FestShootSunTaskProto;
class FestShootSunProto;
class FestDetailProto;
class Fest_SimpleListRsp;
class Fest_SimpleInfoNotify;
class Fest_DetailReq;
class Fest_DetailRsp;
class Fest_DetailUpdateRsp;
class Fest_RedPointInfoRsp;
class Fest_RedPointInfoNotify;
class Fest_ShopBuyReq;
class Fest_ShopBuyRsp;
class Fest_GetDailyRechargeRewardReq;
class Fest_DailyRechargeStatusNotify;
class FestRTurnableRechargeTurnableReq;
class FestRTurnableRechargeTurnableRsp;
class Fest_SignReq;
class Fest_SignRsp;
class Fest_GoldStoreUpateBuyRsp;
class Fest_DigEggReq;
class Fest_DigEggRsp;
class Fest_DigEggRestReq;
class Fest_DigEggRestRsp;
class Fest_DigEggLogReq;
class Fest_DigEggLogRsp;
class Fest_DigEggTaskFetchReq;
class Fest_DigEggTaskFetchRsp;
class Fest_DigEggTaskUpdateRsp;
class Fest_RTuranbleLogReq;
class Fest_RTuranbleLogRsp;
class TurntableTurnTableReq;
class TurntableTurnTableRsp;
class TurntableRewardReq;
class TurntableRewardRsp;
class TurntableStatusChange;
class FestDonateGetServerNumReq;
class FestDonateGetServerNumRsp;
class FestDonateDonateReq;
class FestDonateDonateRsp;
class FestDonateGetSingleRewardReq;
class FestDonateGetSingleRewardRsp;
class FestDonateGetServerRewardReq;
class FestDonateGetServerRewardRsp;
class FestDonateGetTaskRewardReq;
class FestDonateGetTaskRewardRsp;
class FestDonateTaskTtatusChange;
class FestOnlineGetRewardReq;
class FestOnlineGetRewardRsp;
class FestCollectWorldExchargeReq;
class FestCollectWorldExchargeRsp;
class FestDrawPizeChouJiangReq;
class FestDrawPizeChouJiangRsp;
class FestDrawPizeGetRewardReq;
class FestDrawPizeGetRewardRsp;
class FestDrawPizeLogReq;
class FestDrawPizeLogRsp;
class FestDrawPizeGetServerNumReq;
class FestDrawPizeGetServerNumRsp;
class FestServerRankGetRewardReq;
class FestServerRankGetRewardRsp;
class FestServerRankRewardStatusChange;
class FestServerRankGetMyRankReq;
class FestServerRankGetMyRankRsp;
class FestServerRankGetAllRankReq;
class FestServerRankGetAllRankRsp;
class FestServerRankBuyGiftReq;
class FestServerRankBuyGiftRsp;
class FestServerRankGetRedPointRewardReq;
class FestServerRankGetRedPointRewardRsp;
class FestServerRankStatusChange;
class FestCandleFetchReq;
class FestCandleFetchRsp;
class FestCandleFetchLstRsp;
class FestCandleRankReq;
class FestCandleRankRsp;
class Fest_L2C_DigEgg_OpRsp;
class Fest_L2C_LogReq;
class Fest_L2C_RTurnable_OpRsp;
class Fest_L2C_RTurnable_LogReq;
class Fest_L2C_DonateOperate_Notify;
class Fest_C2L_DonateGetServerRewardReq;
class Fest_L2C_DrawPizeLogReq;
class Fest_L2C_DrawPizeChouJiangGetServerNumReq;
class Fest_C2L_DrawPizeChouJiangGetServerNumRsp;
class Fest_C2L_ServerRankSyncReq;
class Fest_C2L_ServerRankSyncRsp;
class Fest_S2C_CandleRankReward;
class Fest_L2S_CandleAddHarm;
class Fest_S2L_CandleTotalHarmRsp;
class Fest_L2S_CandleRankReq;
class Fest_BossFirstOptReq;
class Fest_BossFirstOptRsp;
class Fest_BossInfoReq;
class FestBossInfo;
class Fest_BossInfoRsp;
class Fest_BFGlobalDBKill;
class Fest_BFGlobalDBEntry;
class Fest_BFGlobalDB;
class L2CFest_BossKFSimpleReq;
class C2LFest_BossKFNotify;
class C2LFest_BossInfoReq;
class C2LFest_BossFirstOptReq;
class C2LFest_HuiMengXiYou_GetRewardReq;
class L2CFest_HuiMengXiYou_GetRewardRsp;
class NotifyFest_HuiMengXiYouRewardStatusChange;
class XiYouGameInfo;
class NotiftFest_HuiMengXiYouStart;
class NotiftFest_LogicHuiMengXiYouStart;
class NotifyFest_HuiMengXiYouSceneChange;
class NotiftFest_HuiMengXiYouGameStart;
class NotiftFest_HuiMengXiYouEnd;
class NotiftFest_HuiMengXiYouGameInfo;
class NotifyFest_HuiMengXiYouGameEnd;
class NotifyFest_HuiMengXiYouEnterReq;
class NotifyFest_HuiMengXiYouEnterRsp;
class NotifyFest_HuiMengXiYouEnterGameReq;
class NotifyFest_HuiMengXiYouEnterGameRsp;
class C2LFest_HuiMengXiYouGiveCaiJiReq;
class L2CFest_HuiMengXiYouGiveCaiJiRsp;
class XiYouCaiJiCollectInfo;
class NotifyFest_HuiMengXiYouCollect;
class XiYouCaiJiCollectMonsterInfo;
class NotifyFest_HuiMengXiYouCollectSuccess;
class NotifyFest_HuiMengXiYou_RoubaoziNotify;
class FMarryRankInfo;
class FMarryExpressRankInfo;
class FMarryRankReq;
class FMarryRankRsp;
class FMarryExpressReq;
class FMarryExpressRsp;
class FMarryRoleReq;
class FMarryRoleRsp;
class FMarryRoleRecvReq;
class FMarryRoleRecvRsp;
class FMarryRecord;
class FMarryExpress;
class FMarryDBEntry;
class FMarryDB;
class Fest_XiYouGlobalDBInfo;
class C2LFMarrySynScoreReq;
class L2CFMarrySynScoreRsp;
class Fest_XiYouGlobalDBEntry;
class Fest_XiYouGlobalDB;
class Fest_XiYouSyncNotify;
class Fest_XiYouSyncLogic;
class Fest_XiYouSyncFinish;
class Fest_XiYouSyncForceClose;
class Fest_DayTotalRechargeFetchReq;
class Fest_DayTotalRechargeFetchRsp;
class Fest_DayTotalRechargeNotify;
class Fest_LoginRewardFetchReq;
class Fest_LoginRewardFetchRsp;
class Fest_LoginRewardNotify;
class Fest_TotalRechargeFetchReq;
class Fest_TotalRechargeFetchRsp;
class Fest_TotalRechargeNotify;
class Fest_ContiRechargeTotalFetchReq;
class Fest_ContiRechargeTotalFetchRsp;
class Fest_ContiRechargeDayFetchReq;
class Fest_ContiRechargeDayFetchRsp;
class Fest_ContiRechargeSuppleReq;
class Fest_ContiRechargeSuppleRsp;
class Fest_ContiRechargeUpdateRsp;
class Fest_LimitSaleBuyReq;
class Fest_LimitSaleBuyRsp;
class Fest_LimitSaleFetchReq;
class Fest_LimitSaleFetchRsp;
class Fest_LimitSaleUpdateRsp;
class Fest_MysteryBuyReq;
class Fest_MysteryBuyRsp;
class Fest_MysteryUpdateRsp;
class Fest_ShootSunReq;
class Fest_ShootSunRsp;
class Fest_ShootSunRestReq;
class Fest_ShootSunRestRsp;
class Fest_ShootSunLogReq;
class Fest_ShootSunLogRsp;
class Fest_ShootSunTaskFetchReq;
class Fest_ShootSunTaskFetchRsp;
class Fest_ShootSunTaskUpdateRsp;
class FestRechargePrizeChouJiangReq;
class FestRechargePrizeChouJiangRsp;
class FestRechargePrizeChouJiangRecordReq;
class FestRechargePrizeChouJiangRecordRsp;
class FestRechargePrizeGetTaskRewardReq;
class FestRechargePrizeGetTaskRewardRsp;
class FestRechargePrizeGetFreeRewardReq;
class FestRechargePrizeGetFreeRewardRsp;
class FestRechargePrizeTaskStatusNotify;

// ===================================================================

class FestSimpleProto : public ::google::protobuf::Message {
 public:
  FestSimpleProto();
  virtual ~FestSimpleProto();

  FestSimpleProto(const FestSimpleProto& from);

  inline FestSimpleProto& operator=(const FestSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestSimpleProto& default_instance();

  void Swap(FestSimpleProto* other);

  // implements Message ----------------------------------------------

  FestSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestSimpleProto& from);
  void MergeFrom(const FestSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 period = 3;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 3;
  inline ::google::protobuf::int32 period() const;
  inline void set_period(::google::protobuf::int32 value);

  // optional int32 redpoint = 4;
  inline bool has_redpoint() const;
  inline void clear_redpoint();
  static const int kRedpointFieldNumber = 4;
  inline ::google::protobuf::int32 redpoint() const;
  inline void set_redpoint(::google::protobuf::int32 value);

  // optional uint64 endtime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 5;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 begintime = 6;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 6;
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestSimpleProto)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_redpoint();
  inline void clear_has_redpoint();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 period_;
  ::google::protobuf::int32 redpoint_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint64 begintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class FestSimpleListProto : public ::google::protobuf::Message {
 public:
  FestSimpleListProto();
  virtual ~FestSimpleListProto();

  FestSimpleListProto(const FestSimpleListProto& from);

  inline FestSimpleListProto& operator=(const FestSimpleListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestSimpleListProto& default_instance();

  void Swap(FestSimpleListProto* other);

  // implements Message ----------------------------------------------

  FestSimpleListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestSimpleListProto& from);
  void MergeFrom(const FestSimpleListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestSimpleProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestSimpleProto& info(int index) const;
  inline ::proto_ff::FestSimpleProto* mutable_info(int index);
  inline ::proto_ff::FestSimpleProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestSimpleProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestSimpleProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestSimpleListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestSimpleProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestSimpleListProto* default_instance_;
};
// -------------------------------------------------------------------

class FestRedPointProto : public ::google::protobuf::Message {
 public:
  FestRedPointProto();
  virtual ~FestRedPointProto();

  FestRedPointProto(const FestRedPointProto& from);

  inline FestRedPointProto& operator=(const FestRedPointProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRedPointProto& default_instance();

  void Swap(FestRedPointProto* other);

  // implements Message ----------------------------------------------

  FestRedPointProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRedPointProto& from);
  void MergeFrom(const FestRedPointProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 redpoint = 2;
  inline bool has_redpoint() const;
  inline void clear_redpoint();
  static const int kRedpointFieldNumber = 2;
  inline ::google::protobuf::int32 redpoint() const;
  inline void set_redpoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRedPointProto)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_redpoint();
  inline void clear_has_redpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 redpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRedPointProto* default_instance_;
};
// -------------------------------------------------------------------

class FestRedPointListProto : public ::google::protobuf::Message {
 public:
  FestRedPointListProto();
  virtual ~FestRedPointListProto();

  FestRedPointListProto(const FestRedPointListProto& from);

  inline FestRedPointListProto& operator=(const FestRedPointListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRedPointListProto& default_instance();

  void Swap(FestRedPointListProto* other);

  // implements Message ----------------------------------------------

  FestRedPointListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRedPointListProto& from);
  void MergeFrom(const FestRedPointListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestRedPointProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestRedPointProto& info(int index) const;
  inline ::proto_ff::FestRedPointProto* mutable_info(int index);
  inline ::proto_ff::FestRedPointProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRedPointProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRedPointProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestRedPointListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRedPointProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRedPointListProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShopProto : public ::google::protobuf::Message {
 public:
  FestShopProto();
  virtual ~FestShopProto();

  FestShopProto(const FestShopProto& from);

  inline FestShopProto& operator=(const FestShopProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShopProto& default_instance();

  void Swap(FestShopProto* other);

  // implements Message ----------------------------------------------

  FestShopProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShopProto& from);
  void MergeFrom(const FestShopProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestShopProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestShopProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShopDetailProto : public ::google::protobuf::Message {
 public:
  FestShopDetailProto();
  virtual ~FestShopDetailProto();

  FestShopDetailProto(const FestShopDetailProto& from);

  inline FestShopDetailProto& operator=(const FestShopDetailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShopDetailProto& default_instance();

  void Swap(FestShopDetailProto* other);

  // implements Message ----------------------------------------------

  FestShopDetailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShopDetailProto& from);
  void MergeFrom(const FestShopDetailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestShopProto buy = 1;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 1;
  inline const ::proto_ff::FestShopProto& buy(int index) const;
  inline ::proto_ff::FestShopProto* mutable_buy(int index);
  inline ::proto_ff::FestShopProto* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShopProto >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShopProto >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.FestShopDetailProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShopProto > buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestShopDetailProto* default_instance_;
};
// -------------------------------------------------------------------

class FestSignDetailProto : public ::google::protobuf::Message {
 public:
  FestSignDetailProto();
  virtual ~FestSignDetailProto();

  FestSignDetailProto(const FestSignDetailProto& from);

  inline FestSignDetailProto& operator=(const FestSignDetailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestSignDetailProto& default_instance();

  void Swap(FestSignDetailProto* other);

  // implements Message ----------------------------------------------

  FestSignDetailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestSignDetailProto& from);
  void MergeFrom(const FestSignDetailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 is_sign = 1;
  inline bool has_is_sign() const;
  inline void clear_is_sign();
  static const int kIsSignFieldNumber = 1;
  inline ::google::protobuf::int32 is_sign() const;
  inline void set_is_sign(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestSignDetailProto)
 private:
  inline void set_has_is_sign();
  inline void clear_has_is_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 is_sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestSignDetailProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDailyTotalRechargeDetailProto : public ::google::protobuf::Message {
 public:
  FestDailyTotalRechargeDetailProto();
  virtual ~FestDailyTotalRechargeDetailProto();

  FestDailyTotalRechargeDetailProto(const FestDailyTotalRechargeDetailProto& from);

  inline FestDailyTotalRechargeDetailProto& operator=(const FestDailyTotalRechargeDetailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDailyTotalRechargeDetailProto& default_instance();

  void Swap(FestDailyTotalRechargeDetailProto* other);

  // implements Message ----------------------------------------------

  FestDailyTotalRechargeDetailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDailyTotalRechargeDetailProto& from);
  void MergeFrom(const FestDailyTotalRechargeDetailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FestDailyTotalRechargeOneProto& data(int index) const;
  inline ::proto_ff::FestDailyTotalRechargeOneProto* mutable_data(int index);
  inline ::proto_ff::FestDailyTotalRechargeOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >*
      mutable_data();

  // optional uint32 total_recharge = 2;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDailyTotalRechargeDetailProto)
 private:
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto > data_;
  ::google::protobuf::uint32 total_recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDailyTotalRechargeDetailProto* default_instance_;
};
// -------------------------------------------------------------------

class FestGoldStoreProto : public ::google::protobuf::Message {
 public:
  FestGoldStoreProto();
  virtual ~FestGoldStoreProto();

  FestGoldStoreProto(const FestGoldStoreProto& from);

  inline FestGoldStoreProto& operator=(const FestGoldStoreProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestGoldStoreProto& default_instance();

  void Swap(FestGoldStoreProto* other);

  // implements Message ----------------------------------------------

  FestGoldStoreProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestGoldStoreProto& from);
  void MergeFrom(const FestGoldStoreProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair& info(int index) const;
  inline ::proto_ff::ComPair* mutable_info(int index);
  inline ::proto_ff::ComPair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestGoldStoreProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestGoldStoreProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggLogProto : public ::google::protobuf::Message {
 public:
  FestDigEggLogProto();
  virtual ~FestDigEggLogProto();

  FestDigEggLogProto(const FestDigEggLogProto& from);

  inline FestDigEggLogProto& operator=(const FestDigEggLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggLogProto& default_instance();

  void Swap(FestDigEggLogProto* other);

  // implements Message ----------------------------------------------

  FestDigEggLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggLogProto& from);
  void MergeFrom(const FestDigEggLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggLogProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggLogProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggTaskProto : public ::google::protobuf::Message {
 public:
  FestDigEggTaskProto();
  virtual ~FestDigEggTaskProto();

  FestDigEggTaskProto(const FestDigEggTaskProto& from);

  inline FestDigEggTaskProto& operator=(const FestDigEggTaskProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggTaskProto& default_instance();

  void Swap(FestDigEggTaskProto* other);

  // implements Message ----------------------------------------------

  FestDigEggTaskProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggTaskProto& from);
  void MergeFrom(const FestDigEggTaskProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggTaskProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggTaskProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggProto : public ::google::protobuf::Message {
 public:
  FestDigEggProto();
  virtual ~FestDigEggProto();

  FestDigEggProto(const FestDigEggProto& from);

  inline FestDigEggProto& operator=(const FestDigEggProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggProto& default_instance();

  void Swap(FestDigEggProto* other);

  // implements Message ----------------------------------------------

  FestDigEggProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggProto& from);
  void MergeFrom(const FestDigEggProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair& info(int index) const;
  inline ::proto_ff::ComPair* mutable_info(int index);
  inline ::proto_ff::ComPair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_info();

  // optional int32 free = 2;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 2;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // repeated .proto_ff.FestDigEggTaskProto task = 3;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 3;
  inline const ::proto_ff::FestDigEggTaskProto& task(int index) const;
  inline ::proto_ff::FestDigEggTaskProto* mutable_task(int index);
  inline ::proto_ff::FestDigEggTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggProto)
 private:
  inline void set_has_free();
  inline void clear_has_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > info_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto > task_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggProto* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleProto : public ::google::protobuf::Message {
 public:
  FestCandleProto();
  virtual ~FestCandleProto();

  FestCandleProto(const FestCandleProto& from);

  inline FestCandleProto& operator=(const FestCandleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleProto& default_instance();

  void Swap(FestCandleProto* other);

  // implements Message ----------------------------------------------

  FestCandleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleProto& from);
  void MergeFrom(const FestCandleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id_lst = 1;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 1;
  inline ::google::protobuf::int32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::int32 value);
  inline void add_id_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandleProto* default_instance_;
};
// -------------------------------------------------------------------

class FestCandRankProto : public ::google::protobuf::Message {
 public:
  FestCandRankProto();
  virtual ~FestCandRankProto();

  FestCandRankProto(const FestCandRankProto& from);

  inline FestCandRankProto& operator=(const FestCandRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandRankProto& default_instance();

  void Swap(FestCandRankProto* other);

  // implements Message ----------------------------------------------

  FestCandRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandRankProto& from);
  void MergeFrom(const FestCandRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandRankProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FestRTurnableRechargeProto : public ::google::protobuf::Message {
 public:
  FestRTurnableRechargeProto();
  virtual ~FestRTurnableRechargeProto();

  FestRTurnableRechargeProto(const FestRTurnableRechargeProto& from);

  inline FestRTurnableRechargeProto& operator=(const FestRTurnableRechargeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRTurnableRechargeProto& default_instance();

  void Swap(FestRTurnableRechargeProto* other);

  // implements Message ----------------------------------------------

  FestRTurnableRechargeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRTurnableRechargeProto& from);
  void MergeFrom(const FestRTurnableRechargeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestRTurnableRechargeOneProto& info(int index) const;
  inline ::proto_ff::FestRTurnableRechargeOneProto* mutable_info(int index);
  inline ::proto_ff::FestRTurnableRechargeOneProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestRTurnableRechargeProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRTurnableRechargeProto* default_instance_;
};
// -------------------------------------------------------------------

class FestTurnableProto : public ::google::protobuf::Message {
 public:
  FestTurnableProto();
  virtual ~FestTurnableProto();

  FestTurnableProto(const FestTurnableProto& from);

  inline FestTurnableProto& operator=(const FestTurnableProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestTurnableProto& default_instance();

  void Swap(FestTurnableProto* other);

  // implements Message ----------------------------------------------

  FestTurnableProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestTurnableProto& from);
  void MergeFrom(const FestTurnableProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::proto_ff::FestTurnableTaskProto& task(int index) const;
  inline ::proto_ff::FestTurnableTaskProto* mutable_task(int index);
  inline ::proto_ff::FestTurnableTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >*
      mutable_task();

  // optional uint32 left_num = 2;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 2;
  inline ::google::protobuf::uint32 left_num() const;
  inline void set_left_num(::google::protobuf::uint32 value);

  // repeated int32 chou_jiang_ids = 5;
  inline int chou_jiang_ids_size() const;
  inline void clear_chou_jiang_ids();
  static const int kChouJiangIdsFieldNumber = 5;
  inline ::google::protobuf::int32 chou_jiang_ids(int index) const;
  inline void set_chou_jiang_ids(int index, ::google::protobuf::int32 value);
  inline void add_chou_jiang_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chou_jiang_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chou_jiang_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.FestTurnableProto)
 private:
  inline void set_has_left_num();
  inline void clear_has_left_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto > task_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chou_jiang_ids_;
  ::google::protobuf::uint32 left_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestTurnableProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateProto : public ::google::protobuf::Message {
 public:
  FestDonateProto();
  virtual ~FestDonateProto();

  FestDonateProto(const FestDonateProto& from);

  inline FestDonateProto& operator=(const FestDonateProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateProto& default_instance();

  void Swap(FestDonateProto* other);

  // implements Message ----------------------------------------------

  FestDonateProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateProto& from);
  void MergeFrom(const FestDonateProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDonateSingleProto single = 1;
  inline int single_size() const;
  inline void clear_single();
  static const int kSingleFieldNumber = 1;
  inline const ::proto_ff::FestDonateSingleProto& single(int index) const;
  inline ::proto_ff::FestDonateSingleProto* mutable_single(int index);
  inline ::proto_ff::FestDonateSingleProto* add_single();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >&
      single() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >*
      mutable_single();

  // repeated .proto_ff.FestDonateServerProto server = 2;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline const ::proto_ff::FestDonateServerProto& server(int index) const;
  inline ::proto_ff::FestDonateServerProto* mutable_server(int index);
  inline ::proto_ff::FestDonateServerProto* add_server();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >&
      server() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >*
      mutable_server();

  // optional uint32 single_num = 3;
  inline bool has_single_num() const;
  inline void clear_single_num();
  static const int kSingleNumFieldNumber = 3;
  inline ::google::protobuf::uint32 single_num() const;
  inline void set_single_num(::google::protobuf::uint32 value);

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 4;
  inline const ::proto_ff::FestDonateTaskProto& task(int index) const;
  inline ::proto_ff::FestDonateTaskProto* mutable_task(int index);
  inline ::proto_ff::FestDonateTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateProto)
 private:
  inline void set_has_single_num();
  inline void clear_has_single_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto > single_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto > server_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto > task_;
  ::google::protobuf::uint32 single_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateProto* default_instance_;
};
// -------------------------------------------------------------------

class FestOnlineProto : public ::google::protobuf::Message {
 public:
  FestOnlineProto();
  virtual ~FestOnlineProto();

  FestOnlineProto(const FestOnlineProto& from);

  inline FestOnlineProto& operator=(const FestOnlineProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestOnlineProto& default_instance();

  void Swap(FestOnlineProto* other);

  // implements Message ----------------------------------------------

  FestOnlineProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestOnlineProto& from);
  void MergeFrom(const FestOnlineProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestOnlineOneProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FestOnlineOneProto& data(int index) const;
  inline ::proto_ff::FestOnlineOneProto* mutable_data(int index);
  inline ::proto_ff::FestOnlineOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FestOnlineProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestOnlineProto* default_instance_;
};
// -------------------------------------------------------------------

class FestCollectWordProto : public ::google::protobuf::Message {
 public:
  FestCollectWordProto();
  virtual ~FestCollectWordProto();

  FestCollectWordProto(const FestCollectWordProto& from);

  inline FestCollectWordProto& operator=(const FestCollectWordProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCollectWordProto& default_instance();

  void Swap(FestCollectWordProto* other);

  // implements Message ----------------------------------------------

  FestCollectWordProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCollectWordProto& from);
  void MergeFrom(const FestCollectWordProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FestCollectWordOneProto& data(int index) const;
  inline ::proto_ff::FestCollectWordOneProto* mutable_data(int index);
  inline ::proto_ff::FestCollectWordOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FestCollectWordProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCollectWordProto* default_instance_;
};
// -------------------------------------------------------------------

class FestBossDetailProto : public ::google::protobuf::Message {
 public:
  FestBossDetailProto();
  virtual ~FestBossDetailProto();

  FestBossDetailProto(const FestBossDetailProto& from);

  inline FestBossDetailProto& operator=(const FestBossDetailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestBossDetailProto& default_instance();

  void Swap(FestBossDetailProto* other);

  // implements Message ----------------------------------------------

  FestBossDetailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestBossDetailProto& from);
  void MergeFrom(const FestBossDetailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 recv_kill_ids = 1;
  inline int recv_kill_ids_size() const;
  inline void clear_recv_kill_ids();
  static const int kRecvKillIdsFieldNumber = 1;
  inline ::google::protobuf::int32 recv_kill_ids(int index) const;
  inline void set_recv_kill_ids(int index, ::google::protobuf::int32 value);
  inline void add_recv_kill_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_kill_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_kill_ids();

  // repeated int32 recv_red_ids = 2;
  inline int recv_red_ids_size() const;
  inline void clear_recv_red_ids();
  static const int kRecvRedIdsFieldNumber = 2;
  inline ::google::protobuf::int32 recv_red_ids(int index) const;
  inline void set_recv_red_ids(int index, ::google::protobuf::int32 value);
  inline void add_recv_red_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_red_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_red_ids();

  // repeated int32 my_kills_ids = 3;
  inline int my_kills_ids_size() const;
  inline void clear_my_kills_ids();
  static const int kMyKillsIdsFieldNumber = 3;
  inline ::google::protobuf::int32 my_kills_ids(int index) const;
  inline void set_my_kills_ids(int index, ::google::protobuf::int32 value);
  inline void add_my_kills_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_kills_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_kills_ids();

  // repeated int32 kill_ids = 4;
  inline int kill_ids_size() const;
  inline void clear_kill_ids();
  static const int kKillIdsFieldNumber = 4;
  inline ::google::protobuf::int32 kill_ids(int index) const;
  inline void set_kill_ids(int index, ::google::protobuf::int32 value);
  inline void add_kill_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kill_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kill_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.FestBossDetailProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_kill_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_red_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_kills_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kill_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestBossDetailProto* default_instance_;
};
// -------------------------------------------------------------------

class FestMarryDetail : public ::google::protobuf::Message {
 public:
  FestMarryDetail();
  virtual ~FestMarryDetail();

  FestMarryDetail(const FestMarryDetail& from);

  inline FestMarryDetail& operator=(const FestMarryDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestMarryDetail& default_instance();

  void Swap(FestMarryDetail* other);

  // implements Message ----------------------------------------------

  FestMarryDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestMarryDetail& from);
  void MergeFrom(const FestMarryDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FMarryTask tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::proto_ff::FMarryTask& tasks(int index) const;
  inline ::proto_ff::FMarryTask* mutable_tasks(int index);
  inline ::proto_ff::FMarryTask* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >*
      mutable_tasks();

  // repeated int32 process_ids = 2;
  inline int process_ids_size() const;
  inline void clear_process_ids();
  static const int kProcessIdsFieldNumber = 2;
  inline ::google::protobuf::int32 process_ids(int index) const;
  inline void set_process_ids(int index, ::google::protobuf::int32 value);
  inline void add_process_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      process_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_process_ids();

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestMarryDetail)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask > tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > process_ids_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestMarryDetail* default_instance_;
};
// -------------------------------------------------------------------

class FestDayTotalRechargeProto : public ::google::protobuf::Message {
 public:
  FestDayTotalRechargeProto();
  virtual ~FestDayTotalRechargeProto();

  FestDayTotalRechargeProto(const FestDayTotalRechargeProto& from);

  inline FestDayTotalRechargeProto& operator=(const FestDayTotalRechargeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDayTotalRechargeProto& default_instance();

  void Swap(FestDayTotalRechargeProto* other);

  // implements Message ----------------------------------------------

  FestDayTotalRechargeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDayTotalRechargeProto& from);
  void MergeFrom(const FestDayTotalRechargeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fetch_lst = 1;
  inline int fetch_lst_size() const;
  inline void clear_fetch_lst();
  static const int kFetchLstFieldNumber = 1;
  inline ::google::protobuf::int32 fetch_lst(int index) const;
  inline void set_fetch_lst(int index, ::google::protobuf::int32 value);
  inline void add_fetch_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_lst();

  // optional uint32 recharge = 2;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 recharge() const;
  inline void set_recharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDayTotalRechargeProto)
 private:
  inline void set_has_recharge();
  inline void clear_has_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_lst_;
  ::google::protobuf::uint32 recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDayTotalRechargeProto* default_instance_;
};
// -------------------------------------------------------------------

class FestLoginProto : public ::google::protobuf::Message {
 public:
  FestLoginProto();
  virtual ~FestLoginProto();

  FestLoginProto(const FestLoginProto& from);

  inline FestLoginProto& operator=(const FestLoginProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestLoginProto& default_instance();

  void Swap(FestLoginProto* other);

  // implements Message ----------------------------------------------

  FestLoginProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestLoginProto& from);
  void MergeFrom(const FestLoginProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair fetch = 1;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 1;
  inline const ::proto_ff::ComPair& fetch(int index) const;
  inline ::proto_ff::ComPair* mutable_fetch(int index);
  inline ::proto_ff::ComPair* add_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.FestLoginProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestLoginProto* default_instance_;
};
// -------------------------------------------------------------------

class FestTotalRechargeProto : public ::google::protobuf::Message {
 public:
  FestTotalRechargeProto();
  virtual ~FestTotalRechargeProto();

  FestTotalRechargeProto(const FestTotalRechargeProto& from);

  inline FestTotalRechargeProto& operator=(const FestTotalRechargeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestTotalRechargeProto& default_instance();

  void Swap(FestTotalRechargeProto* other);

  // implements Message ----------------------------------------------

  FestTotalRechargeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestTotalRechargeProto& from);
  void MergeFrom(const FestTotalRechargeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fetch_lst = 1;
  inline int fetch_lst_size() const;
  inline void clear_fetch_lst();
  static const int kFetchLstFieldNumber = 1;
  inline ::google::protobuf::int32 fetch_lst(int index) const;
  inline void set_fetch_lst(int index, ::google::protobuf::int32 value);
  inline void add_fetch_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_lst();

  // optional uint32 total_recharge = 2;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestTotalRechargeProto)
 private:
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_lst_;
  ::google::protobuf::uint32 total_recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestTotalRechargeProto* default_instance_;
};
// -------------------------------------------------------------------

class FestContiTotalRewardProto : public ::google::protobuf::Message {
 public:
  FestContiTotalRewardProto();
  virtual ~FestContiTotalRewardProto();

  FestContiTotalRewardProto(const FestContiTotalRewardProto& from);

  inline FestContiTotalRewardProto& operator=(const FestContiTotalRewardProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestContiTotalRewardProto& default_instance();

  void Swap(FestContiTotalRewardProto* other);

  // implements Message ----------------------------------------------

  FestContiTotalRewardProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestContiTotalRewardProto& from);
  void MergeFrom(const FestContiTotalRewardProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gear = 1;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 1;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // repeated int32 fetch_day = 2;
  inline int fetch_day_size() const;
  inline void clear_fetch_day();
  static const int kFetchDayFieldNumber = 2;
  inline ::google::protobuf::int32 fetch_day(int index) const;
  inline void set_fetch_day(int index, ::google::protobuf::int32 value);
  inline void add_fetch_day(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_day() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_day();

  // @@protoc_insertion_point(class_scope:proto_ff.FestContiTotalRewardProto)
 private:
  inline void set_has_gear();
  inline void clear_has_gear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_day_;
  ::google::protobuf::int32 gear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestContiTotalRewardProto* default_instance_;
};
// -------------------------------------------------------------------

class FestContiDayRewardProto : public ::google::protobuf::Message {
 public:
  FestContiDayRewardProto();
  virtual ~FestContiDayRewardProto();

  FestContiDayRewardProto(const FestContiDayRewardProto& from);

  inline FestContiDayRewardProto& operator=(const FestContiDayRewardProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestContiDayRewardProto& default_instance();

  void Swap(FestContiDayRewardProto* other);

  // implements Message ----------------------------------------------

  FestContiDayRewardProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestContiDayRewardProto& from);
  void MergeFrom(const FestContiDayRewardProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // repeated int32 fetch_gear = 2;
  inline int fetch_gear_size() const;
  inline void clear_fetch_gear();
  static const int kFetchGearFieldNumber = 2;
  inline ::google::protobuf::int32 fetch_gear(int index) const;
  inline void set_fetch_gear(int index, ::google::protobuf::int32 value);
  inline void add_fetch_gear(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_gear() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_gear();

  // @@protoc_insertion_point(class_scope:proto_ff.FestContiDayRewardProto)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_gear_;
  ::google::protobuf::int32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestContiDayRewardProto* default_instance_;
};
// -------------------------------------------------------------------

class FestContiRechargeProto : public ::google::protobuf::Message {
 public:
  FestContiRechargeProto();
  virtual ~FestContiRechargeProto();

  FestContiRechargeProto(const FestContiRechargeProto& from);

  inline FestContiRechargeProto& operator=(const FestContiRechargeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestContiRechargeProto& default_instance();

  void Swap(FestContiRechargeProto* other);

  // implements Message ----------------------------------------------

  FestContiRechargeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestContiRechargeProto& from);
  void MergeFrom(const FestContiRechargeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_recharge = 1;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 1;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // optional int32 supplement = 2;
  inline bool has_supplement() const;
  inline void clear_supplement();
  static const int kSupplementFieldNumber = 2;
  inline ::google::protobuf::int32 supplement() const;
  inline void set_supplement(::google::protobuf::int32 value);

  // repeated .proto_ff.FestContiDayRewardProto day = 3;
  inline int day_size() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline const ::proto_ff::FestContiDayRewardProto& day(int index) const;
  inline ::proto_ff::FestContiDayRewardProto* mutable_day(int index);
  inline ::proto_ff::FestContiDayRewardProto* add_day();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >&
      day() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >*
      mutable_day();

  // repeated .proto_ff.FestContiTotalRewardProto total = 4;
  inline int total_size() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline const ::proto_ff::FestContiTotalRewardProto& total(int index) const;
  inline ::proto_ff::FestContiTotalRewardProto* mutable_total(int index);
  inline ::proto_ff::FestContiTotalRewardProto* add_total();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >&
      total() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >*
      mutable_total();

  // @@protoc_insertion_point(class_scope:proto_ff.FestContiRechargeProto)
 private:
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_supplement();
  inline void clear_has_supplement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_recharge_;
  ::google::protobuf::int32 supplement_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto > day_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto > total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestContiRechargeProto* default_instance_;
};
// -------------------------------------------------------------------

class FestLimitShopProto : public ::google::protobuf::Message {
 public:
  FestLimitShopProto();
  virtual ~FestLimitShopProto();

  FestLimitShopProto(const FestLimitShopProto& from);

  inline FestLimitShopProto& operator=(const FestLimitShopProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestLimitShopProto& default_instance();

  void Swap(FestLimitShopProto* other);

  // implements Message ----------------------------------------------

  FestLimitShopProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestLimitShopProto& from);
  void MergeFrom(const FestLimitShopProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // repeated int32 fetch_total = 3;
  inline int fetch_total_size() const;
  inline void clear_fetch_total();
  static const int kFetchTotalFieldNumber = 3;
  inline ::google::protobuf::int32 fetch_total(int index) const;
  inline void set_fetch_total(int index, ::google::protobuf::int32 value);
  inline void add_fetch_total(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_total() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_total();

  // repeated .proto_ff.ComPair buy = 4;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 4;
  inline const ::proto_ff::ComPair& buy(int index) const;
  inline ::proto_ff::ComPair* mutable_buy(int index);
  inline ::proto_ff::ComPair* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.FestLimitShopProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_total_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestLimitShopProto* default_instance_;
};
// -------------------------------------------------------------------

class FestLimitSaleProto : public ::google::protobuf::Message {
 public:
  FestLimitSaleProto();
  virtual ~FestLimitSaleProto();

  FestLimitSaleProto(const FestLimitSaleProto& from);

  inline FestLimitSaleProto& operator=(const FestLimitSaleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestLimitSaleProto& default_instance();

  void Swap(FestLimitSaleProto* other);

  // implements Message ----------------------------------------------

  FestLimitSaleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestLimitSaleProto& from);
  void MergeFrom(const FestLimitSaleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestLimitShopProto sale = 1;
  inline int sale_size() const;
  inline void clear_sale();
  static const int kSaleFieldNumber = 1;
  inline const ::proto_ff::FestLimitShopProto& sale(int index) const;
  inline ::proto_ff::FestLimitShopProto* mutable_sale(int index);
  inline ::proto_ff::FestLimitShopProto* add_sale();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestLimitShopProto >&
      sale() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestLimitShopProto >*
      mutable_sale();

  // @@protoc_insertion_point(class_scope:proto_ff.FestLimitSaleProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestLimitShopProto > sale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestLimitSaleProto* default_instance_;
};
// -------------------------------------------------------------------

class FestMysteryProto : public ::google::protobuf::Message {
 public:
  FestMysteryProto();
  virtual ~FestMysteryProto();

  FestMysteryProto(const FestMysteryProto& from);

  inline FestMysteryProto& operator=(const FestMysteryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestMysteryProto& default_instance();

  void Swap(FestMysteryProto* other);

  // implements Message ----------------------------------------------

  FestMysteryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestMysteryProto& from);
  void MergeFrom(const FestMysteryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 open_id = 1;
  inline bool has_open_id() const;
  inline void clear_open_id();
  static const int kOpenIdFieldNumber = 1;
  inline ::google::protobuf::int32 open_id() const;
  inline void set_open_id(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair buy = 2;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 2;
  inline const ::proto_ff::ComPair& buy(int index) const;
  inline ::proto_ff::ComPair* mutable_buy(int index);
  inline ::proto_ff::ComPair* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.FestMysteryProto)
 private:
  inline void set_has_open_id();
  inline void clear_has_open_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > buy_;
  ::google::protobuf::int32 open_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestMysteryProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShootSunLogProto : public ::google::protobuf::Message {
 public:
  FestShootSunLogProto();
  virtual ~FestShootSunLogProto();

  FestShootSunLogProto(const FestShootSunLogProto& from);

  inline FestShootSunLogProto& operator=(const FestShootSunLogProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShootSunLogProto& default_instance();

  void Swap(FestShootSunLogProto* other);

  // implements Message ----------------------------------------------

  FestShootSunLogProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShootSunLogProto& from);
  void MergeFrom(const FestShootSunLogProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestShootSunLogProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestShootSunLogProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShootSunTaskProto : public ::google::protobuf::Message {
 public:
  FestShootSunTaskProto();
  virtual ~FestShootSunTaskProto();

  FestShootSunTaskProto(const FestShootSunTaskProto& from);

  inline FestShootSunTaskProto& operator=(const FestShootSunTaskProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShootSunTaskProto& default_instance();

  void Swap(FestShootSunTaskProto* other);

  // implements Message ----------------------------------------------

  FestShootSunTaskProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShootSunTaskProto& from);
  void MergeFrom(const FestShootSunTaskProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestShootSunTaskProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestShootSunTaskProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShootSunProto : public ::google::protobuf::Message {
 public:
  FestShootSunProto();
  virtual ~FestShootSunProto();

  FestShootSunProto(const FestShootSunProto& from);

  inline FestShootSunProto& operator=(const FestShootSunProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShootSunProto& default_instance();

  void Swap(FestShootSunProto* other);

  // implements Message ----------------------------------------------

  FestShootSunProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShootSunProto& from);
  void MergeFrom(const FestShootSunProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair& info(int index) const;
  inline ::proto_ff::ComPair* mutable_info(int index);
  inline ::proto_ff::ComPair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_info();

  // optional int32 free = 2;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 2;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // repeated .proto_ff.FestShootSunTaskProto task = 3;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 3;
  inline const ::proto_ff::FestShootSunTaskProto& task(int index) const;
  inline ::proto_ff::FestShootSunTaskProto* mutable_task(int index);
  inline ::proto_ff::FestShootSunTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:proto_ff.FestShootSunProto)
 private:
  inline void set_has_free();
  inline void clear_has_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > info_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto > task_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestShootSunProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDetailProto : public ::google::protobuf::Message {
 public:
  FestDetailProto();
  virtual ~FestDetailProto();

  FestDetailProto(const FestDetailProto& from);

  inline FestDetailProto& operator=(const FestDetailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDetailProto& default_instance();

  void Swap(FestDetailProto* other);

  // implements Message ----------------------------------------------

  FestDetailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDetailProto& from);
  void MergeFrom(const FestDetailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestShopDetailProto shop = 2;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 2;
  inline const ::proto_ff::FestShopDetailProto& shop() const;
  inline ::proto_ff::FestShopDetailProto* mutable_shop();
  inline ::proto_ff::FestShopDetailProto* release_shop();
  inline void set_allocated_shop(::proto_ff::FestShopDetailProto* shop);

  // optional .proto_ff.FestDailyTotalRechargeDetailProto daily_total_recharge = 3;
  inline bool has_daily_total_recharge() const;
  inline void clear_daily_total_recharge();
  static const int kDailyTotalRechargeFieldNumber = 3;
  inline const ::proto_ff::FestDailyTotalRechargeDetailProto& daily_total_recharge() const;
  inline ::proto_ff::FestDailyTotalRechargeDetailProto* mutable_daily_total_recharge();
  inline ::proto_ff::FestDailyTotalRechargeDetailProto* release_daily_total_recharge();
  inline void set_allocated_daily_total_recharge(::proto_ff::FestDailyTotalRechargeDetailProto* daily_total_recharge);

  // optional .proto_ff.FestSignDetailProto sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::proto_ff::FestSignDetailProto& sign() const;
  inline ::proto_ff::FestSignDetailProto* mutable_sign();
  inline ::proto_ff::FestSignDetailProto* release_sign();
  inline void set_allocated_sign(::proto_ff::FestSignDetailProto* sign);

  // optional .proto_ff.FestGoldStoreProto gold_store = 5;
  inline bool has_gold_store() const;
  inline void clear_gold_store();
  static const int kGoldStoreFieldNumber = 5;
  inline const ::proto_ff::FestGoldStoreProto& gold_store() const;
  inline ::proto_ff::FestGoldStoreProto* mutable_gold_store();
  inline ::proto_ff::FestGoldStoreProto* release_gold_store();
  inline void set_allocated_gold_store(::proto_ff::FestGoldStoreProto* gold_store);

  // optional .proto_ff.FestDigEggProto dig_egg = 6;
  inline bool has_dig_egg() const;
  inline void clear_dig_egg();
  static const int kDigEggFieldNumber = 6;
  inline const ::proto_ff::FestDigEggProto& dig_egg() const;
  inline ::proto_ff::FestDigEggProto* mutable_dig_egg();
  inline ::proto_ff::FestDigEggProto* release_dig_egg();
  inline void set_allocated_dig_egg(::proto_ff::FestDigEggProto* dig_egg);

  // optional .proto_ff.FestRTurnableRechargeProto rturnable_recharge = 7;
  inline bool has_rturnable_recharge() const;
  inline void clear_rturnable_recharge();
  static const int kRturnableRechargeFieldNumber = 7;
  inline const ::proto_ff::FestRTurnableRechargeProto& rturnable_recharge() const;
  inline ::proto_ff::FestRTurnableRechargeProto* mutable_rturnable_recharge();
  inline ::proto_ff::FestRTurnableRechargeProto* release_rturnable_recharge();
  inline void set_allocated_rturnable_recharge(::proto_ff::FestRTurnableRechargeProto* rturnable_recharge);

  // optional .proto_ff.FestTurnableProto turntable = 8;
  inline bool has_turntable() const;
  inline void clear_turntable();
  static const int kTurntableFieldNumber = 8;
  inline const ::proto_ff::FestTurnableProto& turntable() const;
  inline ::proto_ff::FestTurnableProto* mutable_turntable();
  inline ::proto_ff::FestTurnableProto* release_turntable();
  inline void set_allocated_turntable(::proto_ff::FestTurnableProto* turntable);

  // optional .proto_ff.FestDonateProto donate = 9;
  inline bool has_donate() const;
  inline void clear_donate();
  static const int kDonateFieldNumber = 9;
  inline const ::proto_ff::FestDonateProto& donate() const;
  inline ::proto_ff::FestDonateProto* mutable_donate();
  inline ::proto_ff::FestDonateProto* release_donate();
  inline void set_allocated_donate(::proto_ff::FestDonateProto* donate);

  // optional .proto_ff.FestOnlineProto online = 10;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 10;
  inline const ::proto_ff::FestOnlineProto& online() const;
  inline ::proto_ff::FestOnlineProto* mutable_online();
  inline ::proto_ff::FestOnlineProto* release_online();
  inline void set_allocated_online(::proto_ff::FestOnlineProto* online);

  // optional .proto_ff.FestCollectWordProto collect_word = 11;
  inline bool has_collect_word() const;
  inline void clear_collect_word();
  static const int kCollectWordFieldNumber = 11;
  inline const ::proto_ff::FestCollectWordProto& collect_word() const;
  inline ::proto_ff::FestCollectWordProto* mutable_collect_word();
  inline ::proto_ff::FestCollectWordProto* release_collect_word();
  inline void set_allocated_collect_word(::proto_ff::FestCollectWordProto* collect_word);

  // optional .proto_ff.DrawPizeProto draw_pize = 12;
  inline bool has_draw_pize() const;
  inline void clear_draw_pize();
  static const int kDrawPizeFieldNumber = 12;
  inline const ::proto_ff::DrawPizeProto& draw_pize() const;
  inline ::proto_ff::DrawPizeProto* mutable_draw_pize();
  inline ::proto_ff::DrawPizeProto* release_draw_pize();
  inline void set_allocated_draw_pize(::proto_ff::DrawPizeProto* draw_pize);

  // optional .proto_ff.FestBossDetailProto boss = 13;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 13;
  inline const ::proto_ff::FestBossDetailProto& boss() const;
  inline ::proto_ff::FestBossDetailProto* mutable_boss();
  inline ::proto_ff::FestBossDetailProto* release_boss();
  inline void set_allocated_boss(::proto_ff::FestBossDetailProto* boss);

  // optional .proto_ff.FestRankDBData server_rank = 14;
  inline bool has_server_rank() const;
  inline void clear_server_rank();
  static const int kServerRankFieldNumber = 14;
  inline const ::proto_ff::FestRankDBData& server_rank() const;
  inline ::proto_ff::FestRankDBData* mutable_server_rank();
  inline ::proto_ff::FestRankDBData* release_server_rank();
  inline void set_allocated_server_rank(::proto_ff::FestRankDBData* server_rank);

  // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 15;
  inline bool has_hui_meng_xi_you() const;
  inline void clear_hui_meng_xi_you();
  static const int kHuiMengXiYouFieldNumber = 15;
  inline const ::proto_ff::FestHuiMengXiYouData& hui_meng_xi_you() const;
  inline ::proto_ff::FestHuiMengXiYouData* mutable_hui_meng_xi_you();
  inline ::proto_ff::FestHuiMengXiYouData* release_hui_meng_xi_you();
  inline void set_allocated_hui_meng_xi_you(::proto_ff::FestHuiMengXiYouData* hui_meng_xi_you);

  // optional .proto_ff.FestMarryDetail marry = 16;
  inline bool has_marry() const;
  inline void clear_marry();
  static const int kMarryFieldNumber = 16;
  inline const ::proto_ff::FestMarryDetail& marry() const;
  inline ::proto_ff::FestMarryDetail* mutable_marry();
  inline ::proto_ff::FestMarryDetail* release_marry();
  inline void set_allocated_marry(::proto_ff::FestMarryDetail* marry);

  // optional .proto_ff.FestCandleProto candle = 17;
  inline bool has_candle() const;
  inline void clear_candle();
  static const int kCandleFieldNumber = 17;
  inline const ::proto_ff::FestCandleProto& candle() const;
  inline ::proto_ff::FestCandleProto* mutable_candle();
  inline ::proto_ff::FestCandleProto* release_candle();
  inline void set_allocated_candle(::proto_ff::FestCandleProto* candle);

  // optional .proto_ff.FestDayTotalRechargeProto day_total_recharge = 18;
  inline bool has_day_total_recharge() const;
  inline void clear_day_total_recharge();
  static const int kDayTotalRechargeFieldNumber = 18;
  inline const ::proto_ff::FestDayTotalRechargeProto& day_total_recharge() const;
  inline ::proto_ff::FestDayTotalRechargeProto* mutable_day_total_recharge();
  inline ::proto_ff::FestDayTotalRechargeProto* release_day_total_recharge();
  inline void set_allocated_day_total_recharge(::proto_ff::FestDayTotalRechargeProto* day_total_recharge);

  // optional .proto_ff.FestTotalRechargeProto total_recharge = 19;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 19;
  inline const ::proto_ff::FestTotalRechargeProto& total_recharge() const;
  inline ::proto_ff::FestTotalRechargeProto* mutable_total_recharge();
  inline ::proto_ff::FestTotalRechargeProto* release_total_recharge();
  inline void set_allocated_total_recharge(::proto_ff::FestTotalRechargeProto* total_recharge);

  // optional .proto_ff.FestLoginProto login = 20;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 20;
  inline const ::proto_ff::FestLoginProto& login() const;
  inline ::proto_ff::FestLoginProto* mutable_login();
  inline ::proto_ff::FestLoginProto* release_login();
  inline void set_allocated_login(::proto_ff::FestLoginProto* login);

  // optional .proto_ff.FestLimitSaleProto limit_sale = 21;
  inline bool has_limit_sale() const;
  inline void clear_limit_sale();
  static const int kLimitSaleFieldNumber = 21;
  inline const ::proto_ff::FestLimitSaleProto& limit_sale() const;
  inline ::proto_ff::FestLimitSaleProto* mutable_limit_sale();
  inline ::proto_ff::FestLimitSaleProto* release_limit_sale();
  inline void set_allocated_limit_sale(::proto_ff::FestLimitSaleProto* limit_sale);

  // optional .proto_ff.FestContiRechargeProto conti_recharge = 22;
  inline bool has_conti_recharge() const;
  inline void clear_conti_recharge();
  static const int kContiRechargeFieldNumber = 22;
  inline const ::proto_ff::FestContiRechargeProto& conti_recharge() const;
  inline ::proto_ff::FestContiRechargeProto* mutable_conti_recharge();
  inline ::proto_ff::FestContiRechargeProto* release_conti_recharge();
  inline void set_allocated_conti_recharge(::proto_ff::FestContiRechargeProto* conti_recharge);

  // optional .proto_ff.FestMysteryProto mystery = 23;
  inline bool has_mystery() const;
  inline void clear_mystery();
  static const int kMysteryFieldNumber = 23;
  inline const ::proto_ff::FestMysteryProto& mystery() const;
  inline ::proto_ff::FestMysteryProto* mutable_mystery();
  inline ::proto_ff::FestMysteryProto* release_mystery();
  inline void set_allocated_mystery(::proto_ff::FestMysteryProto* mystery);

  // optional .proto_ff.FestShootSunProto shoot_sun = 24;
  inline bool has_shoot_sun() const;
  inline void clear_shoot_sun();
  static const int kShootSunFieldNumber = 24;
  inline const ::proto_ff::FestShootSunProto& shoot_sun() const;
  inline ::proto_ff::FestShootSunProto* mutable_shoot_sun();
  inline ::proto_ff::FestShootSunProto* release_shoot_sun();
  inline void set_allocated_shoot_sun(::proto_ff::FestShootSunProto* shoot_sun);

  // optional .proto_ff.FestRechargePrizeData recharge_prize = 25;
  inline bool has_recharge_prize() const;
  inline void clear_recharge_prize();
  static const int kRechargePrizeFieldNumber = 25;
  inline const ::proto_ff::FestRechargePrizeData& recharge_prize() const;
  inline ::proto_ff::FestRechargePrizeData* mutable_recharge_prize();
  inline ::proto_ff::FestRechargePrizeData* release_recharge_prize();
  inline void set_allocated_recharge_prize(::proto_ff::FestRechargePrizeData* recharge_prize);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDetailProto)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_shop();
  inline void clear_has_shop();
  inline void set_has_daily_total_recharge();
  inline void clear_has_daily_total_recharge();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_gold_store();
  inline void clear_has_gold_store();
  inline void set_has_dig_egg();
  inline void clear_has_dig_egg();
  inline void set_has_rturnable_recharge();
  inline void clear_has_rturnable_recharge();
  inline void set_has_turntable();
  inline void clear_has_turntable();
  inline void set_has_donate();
  inline void clear_has_donate();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_collect_word();
  inline void clear_has_collect_word();
  inline void set_has_draw_pize();
  inline void clear_has_draw_pize();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_server_rank();
  inline void clear_has_server_rank();
  inline void set_has_hui_meng_xi_you();
  inline void clear_has_hui_meng_xi_you();
  inline void set_has_marry();
  inline void clear_has_marry();
  inline void set_has_candle();
  inline void clear_has_candle();
  inline void set_has_day_total_recharge();
  inline void clear_has_day_total_recharge();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_limit_sale();
  inline void clear_has_limit_sale();
  inline void set_has_conti_recharge();
  inline void clear_has_conti_recharge();
  inline void set_has_mystery();
  inline void clear_has_mystery();
  inline void set_has_shoot_sun();
  inline void clear_has_shoot_sun();
  inline void set_has_recharge_prize();
  inline void clear_has_recharge_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestShopDetailProto* shop_;
  ::proto_ff::FestDailyTotalRechargeDetailProto* daily_total_recharge_;
  ::proto_ff::FestSignDetailProto* sign_;
  ::proto_ff::FestGoldStoreProto* gold_store_;
  ::proto_ff::FestDigEggProto* dig_egg_;
  ::proto_ff::FestRTurnableRechargeProto* rturnable_recharge_;
  ::proto_ff::FestTurnableProto* turntable_;
  ::proto_ff::FestDonateProto* donate_;
  ::proto_ff::FestOnlineProto* online_;
  ::proto_ff::FestCollectWordProto* collect_word_;
  ::proto_ff::DrawPizeProto* draw_pize_;
  ::proto_ff::FestBossDetailProto* boss_;
  ::proto_ff::FestRankDBData* server_rank_;
  ::proto_ff::FestHuiMengXiYouData* hui_meng_xi_you_;
  ::proto_ff::FestMarryDetail* marry_;
  ::proto_ff::FestCandleProto* candle_;
  ::proto_ff::FestDayTotalRechargeProto* day_total_recharge_;
  ::proto_ff::FestTotalRechargeProto* total_recharge_;
  ::proto_ff::FestLoginProto* login_;
  ::proto_ff::FestLimitSaleProto* limit_sale_;
  ::proto_ff::FestContiRechargeProto* conti_recharge_;
  ::proto_ff::FestMysteryProto* mystery_;
  ::proto_ff::FestShootSunProto* shoot_sun_;
  ::proto_ff::FestRechargePrizeData* recharge_prize_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDetailProto* default_instance_;
};
// -------------------------------------------------------------------

class Fest_SimpleListRsp : public ::google::protobuf::Message {
 public:
  Fest_SimpleListRsp();
  virtual ~Fest_SimpleListRsp();

  Fest_SimpleListRsp(const Fest_SimpleListRsp& from);

  inline Fest_SimpleListRsp& operator=(const Fest_SimpleListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_SimpleListRsp& default_instance();

  void Swap(Fest_SimpleListRsp* other);

  // implements Message ----------------------------------------------

  Fest_SimpleListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_SimpleListRsp& from);
  void MergeFrom(const Fest_SimpleListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FestSimpleListProto simple = 1;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 1;
  inline const ::proto_ff::FestSimpleListProto& simple() const;
  inline ::proto_ff::FestSimpleListProto* mutable_simple();
  inline ::proto_ff::FestSimpleListProto* release_simple();
  inline void set_allocated_simple(::proto_ff::FestSimpleListProto* simple);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_SimpleListRsp)
 private:
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestSimpleListProto* simple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_SimpleListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_SimpleInfoNotify : public ::google::protobuf::Message {
 public:
  Fest_SimpleInfoNotify();
  virtual ~Fest_SimpleInfoNotify();

  Fest_SimpleInfoNotify(const Fest_SimpleInfoNotify& from);

  inline Fest_SimpleInfoNotify& operator=(const Fest_SimpleInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_SimpleInfoNotify& default_instance();

  void Swap(Fest_SimpleInfoNotify* other);

  // implements Message ----------------------------------------------

  Fest_SimpleInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_SimpleInfoNotify& from);
  void MergeFrom(const Fest_SimpleInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FestSimpleListProto simple = 1;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 1;
  inline const ::proto_ff::FestSimpleListProto& simple() const;
  inline ::proto_ff::FestSimpleListProto* mutable_simple();
  inline ::proto_ff::FestSimpleListProto* release_simple();
  inline void set_allocated_simple(::proto_ff::FestSimpleListProto* simple);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_SimpleInfoNotify)
 private:
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestSimpleListProto* simple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_SimpleInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DetailReq : public ::google::protobuf::Message {
 public:
  Fest_DetailReq();
  virtual ~Fest_DetailReq();

  Fest_DetailReq(const Fest_DetailReq& from);

  inline Fest_DetailReq& operator=(const Fest_DetailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DetailReq& default_instance();

  void Swap(Fest_DetailReq* other);

  // implements Message ----------------------------------------------

  Fest_DetailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DetailReq& from);
  void MergeFrom(const Fest_DetailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fest_id = 1;
  inline bool has_fest_id() const;
  inline void clear_fest_id();
  static const int kFestIdFieldNumber = 1;
  inline ::google::protobuf::int32 fest_id() const;
  inline void set_fest_id(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DetailReq)
 private:
  inline void set_has_fest_id();
  inline void clear_has_fest_id();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fest_id_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DetailReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DetailRsp : public ::google::protobuf::Message {
 public:
  Fest_DetailRsp();
  virtual ~Fest_DetailRsp();

  Fest_DetailRsp(const Fest_DetailRsp& from);

  inline Fest_DetailRsp& operator=(const Fest_DetailRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DetailRsp& default_instance();

  void Swap(Fest_DetailRsp* other);

  // implements Message ----------------------------------------------

  Fest_DetailRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DetailRsp& from);
  void MergeFrom(const Fest_DetailRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDetailProto detail = 1;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 1;
  inline const ::proto_ff::FestDetailProto& detail(int index) const;
  inline ::proto_ff::FestDetailProto* mutable_detail(int index);
  inline ::proto_ff::FestDetailProto* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DetailRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto > detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DetailRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DetailUpdateRsp : public ::google::protobuf::Message {
 public:
  Fest_DetailUpdateRsp();
  virtual ~Fest_DetailUpdateRsp();

  Fest_DetailUpdateRsp(const Fest_DetailUpdateRsp& from);

  inline Fest_DetailUpdateRsp& operator=(const Fest_DetailUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DetailUpdateRsp& default_instance();

  void Swap(Fest_DetailUpdateRsp* other);

  // implements Message ----------------------------------------------

  Fest_DetailUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DetailUpdateRsp& from);
  void MergeFrom(const Fest_DetailUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDetailProto detail = 1;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 1;
  inline const ::proto_ff::FestDetailProto& detail(int index) const;
  inline ::proto_ff::FestDetailProto* mutable_detail(int index);
  inline ::proto_ff::FestDetailProto* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DetailUpdateRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto > detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DetailUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_RedPointInfoRsp : public ::google::protobuf::Message {
 public:
  Fest_RedPointInfoRsp();
  virtual ~Fest_RedPointInfoRsp();

  Fest_RedPointInfoRsp(const Fest_RedPointInfoRsp& from);

  inline Fest_RedPointInfoRsp& operator=(const Fest_RedPointInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_RedPointInfoRsp& default_instance();

  void Swap(Fest_RedPointInfoRsp* other);

  // implements Message ----------------------------------------------

  Fest_RedPointInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_RedPointInfoRsp& from);
  void MergeFrom(const Fest_RedPointInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FestRedPointListProto redpoint = 1;
  inline bool has_redpoint() const;
  inline void clear_redpoint();
  static const int kRedpointFieldNumber = 1;
  inline const ::proto_ff::FestRedPointListProto& redpoint() const;
  inline ::proto_ff::FestRedPointListProto* mutable_redpoint();
  inline ::proto_ff::FestRedPointListProto* release_redpoint();
  inline void set_allocated_redpoint(::proto_ff::FestRedPointListProto* redpoint);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_RedPointInfoRsp)
 private:
  inline void set_has_redpoint();
  inline void clear_has_redpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestRedPointListProto* redpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_RedPointInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_RedPointInfoNotify : public ::google::protobuf::Message {
 public:
  Fest_RedPointInfoNotify();
  virtual ~Fest_RedPointInfoNotify();

  Fest_RedPointInfoNotify(const Fest_RedPointInfoNotify& from);

  inline Fest_RedPointInfoNotify& operator=(const Fest_RedPointInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_RedPointInfoNotify& default_instance();

  void Swap(Fest_RedPointInfoNotify* other);

  // implements Message ----------------------------------------------

  Fest_RedPointInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_RedPointInfoNotify& from);
  void MergeFrom(const Fest_RedPointInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FestRedPointListProto redpoint = 1;
  inline bool has_redpoint() const;
  inline void clear_redpoint();
  static const int kRedpointFieldNumber = 1;
  inline const ::proto_ff::FestRedPointListProto& redpoint() const;
  inline ::proto_ff::FestRedPointListProto* mutable_redpoint();
  inline ::proto_ff::FestRedPointListProto* release_redpoint();
  inline void set_allocated_redpoint(::proto_ff::FestRedPointListProto* redpoint);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_RedPointInfoNotify)
 private:
  inline void set_has_redpoint();
  inline void clear_has_redpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestRedPointListProto* redpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_RedPointInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShopBuyReq : public ::google::protobuf::Message {
 public:
  Fest_ShopBuyReq();
  virtual ~Fest_ShopBuyReq();

  Fest_ShopBuyReq(const Fest_ShopBuyReq& from);

  inline Fest_ShopBuyReq& operator=(const Fest_ShopBuyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShopBuyReq& default_instance();

  void Swap(Fest_ShopBuyReq* other);

  // implements Message ----------------------------------------------

  Fest_ShopBuyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShopBuyReq& from);
  void MergeFrom(const Fest_ShopBuyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShopBuyReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShopBuyReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShopBuyRsp : public ::google::protobuf::Message {
 public:
  Fest_ShopBuyRsp();
  virtual ~Fest_ShopBuyRsp();

  Fest_ShopBuyRsp(const Fest_ShopBuyRsp& from);

  inline Fest_ShopBuyRsp& operator=(const Fest_ShopBuyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShopBuyRsp& default_instance();

  void Swap(Fest_ShopBuyRsp* other);

  // implements Message ----------------------------------------------

  Fest_ShopBuyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShopBuyRsp& from);
  void MergeFrom(const Fest_ShopBuyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShopBuyRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShopBuyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_GetDailyRechargeRewardReq : public ::google::protobuf::Message {
 public:
  Fest_GetDailyRechargeRewardReq();
  virtual ~Fest_GetDailyRechargeRewardReq();

  Fest_GetDailyRechargeRewardReq(const Fest_GetDailyRechargeRewardReq& from);

  inline Fest_GetDailyRechargeRewardReq& operator=(const Fest_GetDailyRechargeRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_GetDailyRechargeRewardReq& default_instance();

  void Swap(Fest_GetDailyRechargeRewardReq* other);

  // implements Message ----------------------------------------------

  Fest_GetDailyRechargeRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_GetDailyRechargeRewardReq& from);
  void MergeFrom(const Fest_GetDailyRechargeRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_GetDailyRechargeRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_GetDailyRechargeRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DailyRechargeStatusNotify : public ::google::protobuf::Message {
 public:
  Fest_DailyRechargeStatusNotify();
  virtual ~Fest_DailyRechargeStatusNotify();

  Fest_DailyRechargeStatusNotify(const Fest_DailyRechargeStatusNotify& from);

  inline Fest_DailyRechargeStatusNotify& operator=(const Fest_DailyRechargeStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DailyRechargeStatusNotify& default_instance();

  void Swap(Fest_DailyRechargeStatusNotify* other);

  // implements Message ----------------------------------------------

  Fest_DailyRechargeStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DailyRechargeStatusNotify& from);
  void MergeFrom(const Fest_DailyRechargeStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 total_recharge = 3;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 3;
  inline ::google::protobuf::int32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::int32 value);

  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::proto_ff::FestDailyTotalRechargeOneProto& data(int index) const;
  inline ::proto_ff::FestDailyTotalRechargeOneProto* mutable_data(int index);
  inline ::proto_ff::FestDailyTotalRechargeOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DailyRechargeStatusNotify)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto > data_;
  ::google::protobuf::int32 total_recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DailyRechargeStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class FestRTurnableRechargeTurnableReq : public ::google::protobuf::Message {
 public:
  FestRTurnableRechargeTurnableReq();
  virtual ~FestRTurnableRechargeTurnableReq();

  FestRTurnableRechargeTurnableReq(const FestRTurnableRechargeTurnableReq& from);

  inline FestRTurnableRechargeTurnableReq& operator=(const FestRTurnableRechargeTurnableReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRTurnableRechargeTurnableReq& default_instance();

  void Swap(FestRTurnableRechargeTurnableReq* other);

  // implements Message ----------------------------------------------

  FestRTurnableRechargeTurnableReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRTurnableRechargeTurnableReq& from);
  void MergeFrom(const FestRTurnableRechargeTurnableReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRTurnableRechargeTurnableReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRTurnableRechargeTurnableReq* default_instance_;
};
// -------------------------------------------------------------------

class FestRTurnableRechargeTurnableRsp : public ::google::protobuf::Message {
 public:
  FestRTurnableRechargeTurnableRsp();
  virtual ~FestRTurnableRechargeTurnableRsp();

  FestRTurnableRechargeTurnableRsp(const FestRTurnableRechargeTurnableRsp& from);

  inline FestRTurnableRechargeTurnableRsp& operator=(const FestRTurnableRechargeTurnableRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRTurnableRechargeTurnableRsp& default_instance();

  void Swap(FestRTurnableRechargeTurnableRsp* other);

  // implements Message ----------------------------------------------

  FestRTurnableRechargeTurnableRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRTurnableRechargeTurnableRsp& from);
  void MergeFrom(const FestRTurnableRechargeTurnableRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 turnable_id = 3;
  inline bool has_turnable_id() const;
  inline void clear_turnable_id();
  static const int kTurnableIdFieldNumber = 3;
  inline ::google::protobuf::int32 turnable_id() const;
  inline void set_turnable_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestRTurnableRechargeOneProto data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::proto_ff::FestRTurnableRechargeOneProto& data(int index) const;
  inline ::proto_ff::FestRTurnableRechargeOneProto* mutable_data(int index);
  inline ::proto_ff::FestRTurnableRechargeOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FestRTurnableRechargeTurnableRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_turnable_id();
  inline void clear_has_turnable_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto > data_;
  ::google::protobuf::int32 turnable_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRTurnableRechargeTurnableRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_SignReq : public ::google::protobuf::Message {
 public:
  Fest_SignReq();
  virtual ~Fest_SignReq();

  Fest_SignReq(const Fest_SignReq& from);

  inline Fest_SignReq& operator=(const Fest_SignReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_SignReq& default_instance();

  void Swap(Fest_SignReq* other);

  // implements Message ----------------------------------------------

  Fest_SignReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_SignReq& from);
  void MergeFrom(const Fest_SignReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_SignReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_SignReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_SignRsp : public ::google::protobuf::Message {
 public:
  Fest_SignRsp();
  virtual ~Fest_SignRsp();

  Fest_SignRsp(const Fest_SignRsp& from);

  inline Fest_SignRsp& operator=(const Fest_SignRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_SignRsp& default_instance();

  void Swap(Fest_SignRsp* other);

  // implements Message ----------------------------------------------

  Fest_SignRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_SignRsp& from);
  void MergeFrom(const Fest_SignRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_SignRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_SignRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_GoldStoreUpateBuyRsp : public ::google::protobuf::Message {
 public:
  Fest_GoldStoreUpateBuyRsp();
  virtual ~Fest_GoldStoreUpateBuyRsp();

  Fest_GoldStoreUpateBuyRsp(const Fest_GoldStoreUpateBuyRsp& from);

  inline Fest_GoldStoreUpateBuyRsp& operator=(const Fest_GoldStoreUpateBuyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_GoldStoreUpateBuyRsp& default_instance();

  void Swap(Fest_GoldStoreUpateBuyRsp* other);

  // implements Message ----------------------------------------------

  Fest_GoldStoreUpateBuyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_GoldStoreUpateBuyRsp& from);
  void MergeFrom(const Fest_GoldStoreUpateBuyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_GoldStoreUpateBuyRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_GoldStoreUpateBuyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggReq : public ::google::protobuf::Message {
 public:
  Fest_DigEggReq();
  virtual ~Fest_DigEggReq();

  Fest_DigEggReq(const Fest_DigEggReq& from);

  inline Fest_DigEggReq& operator=(const Fest_DigEggReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggReq& default_instance();

  void Swap(Fest_DigEggReq* other);

  // implements Message ----------------------------------------------

  Fest_DigEggReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggReq& from);
  void MergeFrom(const Fest_DigEggReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggRsp : public ::google::protobuf::Message {
 public:
  Fest_DigEggRsp();
  virtual ~Fest_DigEggRsp();

  Fest_DigEggRsp(const Fest_DigEggRsp& from);

  inline Fest_DigEggRsp& operator=(const Fest_DigEggRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggRsp& default_instance();

  void Swap(Fest_DigEggRsp* other);

  // implements Message ----------------------------------------------

  Fest_DigEggRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggRsp& from);
  void MergeFrom(const Fest_DigEggRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggRestReq : public ::google::protobuf::Message {
 public:
  Fest_DigEggRestReq();
  virtual ~Fest_DigEggRestReq();

  Fest_DigEggRestReq(const Fest_DigEggRestReq& from);

  inline Fest_DigEggRestReq& operator=(const Fest_DigEggRestReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggRestReq& default_instance();

  void Swap(Fest_DigEggRestReq* other);

  // implements Message ----------------------------------------------

  Fest_DigEggRestReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggRestReq& from);
  void MergeFrom(const Fest_DigEggRestReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggRestReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggRestReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggRestRsp : public ::google::protobuf::Message {
 public:
  Fest_DigEggRestRsp();
  virtual ~Fest_DigEggRestRsp();

  Fest_DigEggRestRsp(const Fest_DigEggRestRsp& from);

  inline Fest_DigEggRestRsp& operator=(const Fest_DigEggRestRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggRestRsp& default_instance();

  void Swap(Fest_DigEggRestRsp* other);

  // implements Message ----------------------------------------------

  Fest_DigEggRestRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggRestRsp& from);
  void MergeFrom(const Fest_DigEggRestRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 free = 3;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 3;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggRestRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_free();
  inline void clear_has_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggRestRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggLogReq : public ::google::protobuf::Message {
 public:
  Fest_DigEggLogReq();
  virtual ~Fest_DigEggLogReq();

  Fest_DigEggLogReq(const Fest_DigEggLogReq& from);

  inline Fest_DigEggLogReq& operator=(const Fest_DigEggLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggLogReq& default_instance();

  void Swap(Fest_DigEggLogReq* other);

  // implements Message ----------------------------------------------

  Fest_DigEggLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggLogReq& from);
  void MergeFrom(const Fest_DigEggLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggLogReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggLogReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggLogRsp : public ::google::protobuf::Message {
 public:
  Fest_DigEggLogRsp();
  virtual ~Fest_DigEggLogRsp();

  Fest_DigEggLogRsp(const Fest_DigEggLogRsp& from);

  inline Fest_DigEggLogRsp& operator=(const Fest_DigEggLogRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggLogRsp& default_instance();

  void Swap(Fest_DigEggLogRsp* other);

  // implements Message ----------------------------------------------

  Fest_DigEggLogRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggLogRsp& from);
  void MergeFrom(const Fest_DigEggLogRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestDigEggLogProto log = 3;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::proto_ff::FestDigEggLogProto& log(int index) const;
  inline ::proto_ff::FestDigEggLogProto* mutable_log(int index);
  inline ::proto_ff::FestDigEggLogProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggLogRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggLogRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggTaskFetchReq : public ::google::protobuf::Message {
 public:
  Fest_DigEggTaskFetchReq();
  virtual ~Fest_DigEggTaskFetchReq();

  Fest_DigEggTaskFetchReq(const Fest_DigEggTaskFetchReq& from);

  inline Fest_DigEggTaskFetchReq& operator=(const Fest_DigEggTaskFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggTaskFetchReq& default_instance();

  void Swap(Fest_DigEggTaskFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_DigEggTaskFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggTaskFetchReq& from);
  void MergeFrom(const Fest_DigEggTaskFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggTaskFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggTaskFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggTaskFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_DigEggTaskFetchRsp();
  virtual ~Fest_DigEggTaskFetchRsp();

  Fest_DigEggTaskFetchRsp(const Fest_DigEggTaskFetchRsp& from);

  inline Fest_DigEggTaskFetchRsp& operator=(const Fest_DigEggTaskFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggTaskFetchRsp& default_instance();

  void Swap(Fest_DigEggTaskFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_DigEggTaskFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggTaskFetchRsp& from);
  void MergeFrom(const Fest_DigEggTaskFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggTaskFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggTaskFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DigEggTaskUpdateRsp : public ::google::protobuf::Message {
 public:
  Fest_DigEggTaskUpdateRsp();
  virtual ~Fest_DigEggTaskUpdateRsp();

  Fest_DigEggTaskUpdateRsp(const Fest_DigEggTaskUpdateRsp& from);

  inline Fest_DigEggTaskUpdateRsp& operator=(const Fest_DigEggTaskUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DigEggTaskUpdateRsp& default_instance();

  void Swap(Fest_DigEggTaskUpdateRsp* other);

  // implements Message ----------------------------------------------

  Fest_DigEggTaskUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DigEggTaskUpdateRsp& from);
  void MergeFrom(const Fest_DigEggTaskUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDigEggTaskProto task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::proto_ff::FestDigEggTaskProto& task(int index) const;
  inline ::proto_ff::FestDigEggTaskProto* mutable_task(int index);
  inline ::proto_ff::FestDigEggTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DigEggTaskUpdateRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto > task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DigEggTaskUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_RTuranbleLogReq : public ::google::protobuf::Message {
 public:
  Fest_RTuranbleLogReq();
  virtual ~Fest_RTuranbleLogReq();

  Fest_RTuranbleLogReq(const Fest_RTuranbleLogReq& from);

  inline Fest_RTuranbleLogReq& operator=(const Fest_RTuranbleLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_RTuranbleLogReq& default_instance();

  void Swap(Fest_RTuranbleLogReq* other);

  // implements Message ----------------------------------------------

  Fest_RTuranbleLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_RTuranbleLogReq& from);
  void MergeFrom(const Fest_RTuranbleLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_RTuranbleLogReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_RTuranbleLogReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_RTuranbleLogRsp : public ::google::protobuf::Message {
 public:
  Fest_RTuranbleLogRsp();
  virtual ~Fest_RTuranbleLogRsp();

  Fest_RTuranbleLogRsp(const Fest_RTuranbleLogRsp& from);

  inline Fest_RTuranbleLogRsp& operator=(const Fest_RTuranbleLogRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_RTuranbleLogRsp& default_instance();

  void Swap(Fest_RTuranbleLogRsp* other);

  // implements Message ----------------------------------------------

  Fest_RTuranbleLogRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_RTuranbleLogRsp& from);
  void MergeFrom(const Fest_RTuranbleLogRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.RTurnableLogDBProto log = 3;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::proto_ff::RTurnableLogDBProto& log(int index) const;
  inline ::proto_ff::RTurnableLogDBProto* mutable_log(int index);
  inline ::proto_ff::RTurnableLogDBProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RTurnableLogDBProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RTurnableLogDBProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_RTuranbleLogRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RTurnableLogDBProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_RTuranbleLogRsp* default_instance_;
};
// -------------------------------------------------------------------

class TurntableTurnTableReq : public ::google::protobuf::Message {
 public:
  TurntableTurnTableReq();
  virtual ~TurntableTurnTableReq();

  TurntableTurnTableReq(const TurntableTurnTableReq& from);

  inline TurntableTurnTableReq& operator=(const TurntableTurnTableReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableTurnTableReq& default_instance();

  void Swap(TurntableTurnTableReq* other);

  // implements Message ----------------------------------------------

  TurntableTurnTableReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableTurnTableReq& from);
  void MergeFrom(const TurntableTurnTableReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.TurntableTurnTableReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static TurntableTurnTableReq* default_instance_;
};
// -------------------------------------------------------------------

class TurntableTurnTableRsp : public ::google::protobuf::Message {
 public:
  TurntableTurnTableRsp();
  virtual ~TurntableTurnTableRsp();

  TurntableTurnTableRsp(const TurntableTurnTableRsp& from);

  inline TurntableTurnTableRsp& operator=(const TurntableTurnTableRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableTurnTableRsp& default_instance();

  void Swap(TurntableTurnTableRsp* other);

  // implements Message ----------------------------------------------

  TurntableTurnTableRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableTurnTableRsp& from);
  void MergeFrom(const TurntableTurnTableRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 left_num = 3;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 3;
  inline ::google::protobuf::int32 left_num() const;
  inline void set_left_num(::google::protobuf::int32 value);

  // optional int32 turntable_id = 4;
  inline bool has_turntable_id() const;
  inline void clear_turntable_id();
  static const int kTurntableIdFieldNumber = 4;
  inline ::google::protobuf::int32 turntable_id() const;
  inline void set_turntable_id(::google::protobuf::int32 value);

  // repeated int32 chou_jiang_ids = 5;
  inline int chou_jiang_ids_size() const;
  inline void clear_chou_jiang_ids();
  static const int kChouJiangIdsFieldNumber = 5;
  inline ::google::protobuf::int32 chou_jiang_ids(int index) const;
  inline void set_chou_jiang_ids(int index, ::google::protobuf::int32 value);
  inline void add_chou_jiang_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chou_jiang_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chou_jiang_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.TurntableTurnTableRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_left_num();
  inline void clear_has_left_num();
  inline void set_has_turntable_id();
  inline void clear_has_turntable_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 left_num_;
  ::google::protobuf::int32 turntable_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chou_jiang_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static TurntableTurnTableRsp* default_instance_;
};
// -------------------------------------------------------------------

class TurntableRewardReq : public ::google::protobuf::Message {
 public:
  TurntableRewardReq();
  virtual ~TurntableRewardReq();

  TurntableRewardReq(const TurntableRewardReq& from);

  inline TurntableRewardReq& operator=(const TurntableRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableRewardReq& default_instance();

  void Swap(TurntableRewardReq* other);

  // implements Message ----------------------------------------------

  TurntableRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableRewardReq& from);
  void MergeFrom(const TurntableRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.TurntableRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static TurntableRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class TurntableRewardRsp : public ::google::protobuf::Message {
 public:
  TurntableRewardRsp();
  virtual ~TurntableRewardRsp();

  TurntableRewardRsp(const TurntableRewardRsp& from);

  inline TurntableRewardRsp& operator=(const TurntableRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableRewardRsp& default_instance();

  void Swap(TurntableRewardRsp* other);

  // implements Message ----------------------------------------------

  TurntableRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableRewardRsp& from);
  void MergeFrom(const TurntableRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.TurntableRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static TurntableRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class TurntableStatusChange : public ::google::protobuf::Message {
 public:
  TurntableStatusChange();
  virtual ~TurntableStatusChange();

  TurntableStatusChange(const TurntableStatusChange& from);

  inline TurntableStatusChange& operator=(const TurntableStatusChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableStatusChange& default_instance();

  void Swap(TurntableStatusChange* other);

  // implements Message ----------------------------------------------

  TurntableStatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableStatusChange& from);
  void MergeFrom(const TurntableStatusChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestTurnableTaskProto task = 2;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 2;
  inline const ::proto_ff::FestTurnableTaskProto& task(int index) const;
  inline ::proto_ff::FestTurnableTaskProto* mutable_task(int index);
  inline ::proto_ff::FestTurnableTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >*
      mutable_task();

  // optional uint32 left_num = 3;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 3;
  inline ::google::protobuf::uint32 left_num() const;
  inline void set_left_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.TurntableStatusChange)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_left_num();
  inline void clear_has_left_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto > task_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 left_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static TurntableStatusChange* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetServerNumReq : public ::google::protobuf::Message {
 public:
  FestDonateGetServerNumReq();
  virtual ~FestDonateGetServerNumReq();

  FestDonateGetServerNumReq(const FestDonateGetServerNumReq& from);

  inline FestDonateGetServerNumReq& operator=(const FestDonateGetServerNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetServerNumReq& default_instance();

  void Swap(FestDonateGetServerNumReq* other);

  // implements Message ----------------------------------------------

  FestDonateGetServerNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetServerNumReq& from);
  void MergeFrom(const FestDonateGetServerNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetServerNumReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetServerNumReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetServerNumRsp : public ::google::protobuf::Message {
 public:
  FestDonateGetServerNumRsp();
  virtual ~FestDonateGetServerNumRsp();

  FestDonateGetServerNumRsp(const FestDonateGetServerNumRsp& from);

  inline FestDonateGetServerNumRsp& operator=(const FestDonateGetServerNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetServerNumRsp& default_instance();

  void Swap(FestDonateGetServerNumRsp* other);

  // implements Message ----------------------------------------------

  FestDonateGetServerNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetServerNumRsp& from);
  void MergeFrom(const FestDonateGetServerNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 server_num = 3;
  inline bool has_server_num() const;
  inline void clear_server_num();
  static const int kServerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 server_num() const;
  inline void set_server_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetServerNumRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_server_num();
  inline void clear_has_server_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 server_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetServerNumRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateDonateReq : public ::google::protobuf::Message {
 public:
  FestDonateDonateReq();
  virtual ~FestDonateDonateReq();

  FestDonateDonateReq(const FestDonateDonateReq& from);

  inline FestDonateDonateReq& operator=(const FestDonateDonateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateDonateReq& default_instance();

  void Swap(FestDonateDonateReq* other);

  // implements Message ----------------------------------------------

  FestDonateDonateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateDonateReq& from);
  void MergeFrom(const FestDonateDonateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateDonateReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateDonateReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateDonateRsp : public ::google::protobuf::Message {
 public:
  FestDonateDonateRsp();
  virtual ~FestDonateDonateRsp();

  FestDonateDonateRsp(const FestDonateDonateRsp& from);

  inline FestDonateDonateRsp& operator=(const FestDonateDonateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateDonateRsp& default_instance();

  void Swap(FestDonateDonateRsp* other);

  // implements Message ----------------------------------------------

  FestDonateDonateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateDonateRsp& from);
  void MergeFrom(const FestDonateDonateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 single_num = 3;
  inline bool has_single_num() const;
  inline void clear_single_num();
  static const int kSingleNumFieldNumber = 3;
  inline ::google::protobuf::uint32 single_num() const;
  inline void set_single_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateDonateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_single_num();
  inline void clear_has_single_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 single_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateDonateRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetSingleRewardReq : public ::google::protobuf::Message {
 public:
  FestDonateGetSingleRewardReq();
  virtual ~FestDonateGetSingleRewardReq();

  FestDonateGetSingleRewardReq(const FestDonateGetSingleRewardReq& from);

  inline FestDonateGetSingleRewardReq& operator=(const FestDonateGetSingleRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetSingleRewardReq& default_instance();

  void Swap(FestDonateGetSingleRewardReq* other);

  // implements Message ----------------------------------------------

  FestDonateGetSingleRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetSingleRewardReq& from);
  void MergeFrom(const FestDonateGetSingleRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetSingleRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetSingleRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetSingleRewardRsp : public ::google::protobuf::Message {
 public:
  FestDonateGetSingleRewardRsp();
  virtual ~FestDonateGetSingleRewardRsp();

  FestDonateGetSingleRewardRsp(const FestDonateGetSingleRewardRsp& from);

  inline FestDonateGetSingleRewardRsp& operator=(const FestDonateGetSingleRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetSingleRewardRsp& default_instance();

  void Swap(FestDonateGetSingleRewardRsp* other);

  // implements Message ----------------------------------------------

  FestDonateGetSingleRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetSingleRewardRsp& from);
  void MergeFrom(const FestDonateGetSingleRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestDonateSingleProto data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FestDonateSingleProto& data() const;
  inline ::proto_ff::FestDonateSingleProto* mutable_data();
  inline ::proto_ff::FestDonateSingleProto* release_data();
  inline void set_allocated_data(::proto_ff::FestDonateSingleProto* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetSingleRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestDonateSingleProto* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetSingleRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetServerRewardReq : public ::google::protobuf::Message {
 public:
  FestDonateGetServerRewardReq();
  virtual ~FestDonateGetServerRewardReq();

  FestDonateGetServerRewardReq(const FestDonateGetServerRewardReq& from);

  inline FestDonateGetServerRewardReq& operator=(const FestDonateGetServerRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetServerRewardReq& default_instance();

  void Swap(FestDonateGetServerRewardReq* other);

  // implements Message ----------------------------------------------

  FestDonateGetServerRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetServerRewardReq& from);
  void MergeFrom(const FestDonateGetServerRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetServerRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetServerRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetServerRewardRsp : public ::google::protobuf::Message {
 public:
  FestDonateGetServerRewardRsp();
  virtual ~FestDonateGetServerRewardRsp();

  FestDonateGetServerRewardRsp(const FestDonateGetServerRewardRsp& from);

  inline FestDonateGetServerRewardRsp& operator=(const FestDonateGetServerRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetServerRewardRsp& default_instance();

  void Swap(FestDonateGetServerRewardRsp* other);

  // implements Message ----------------------------------------------

  FestDonateGetServerRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetServerRewardRsp& from);
  void MergeFrom(const FestDonateGetServerRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestDonateServerProto data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FestDonateServerProto& data() const;
  inline ::proto_ff::FestDonateServerProto* mutable_data();
  inline ::proto_ff::FestDonateServerProto* release_data();
  inline void set_allocated_data(::proto_ff::FestDonateServerProto* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetServerRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestDonateServerProto* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetServerRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetTaskRewardReq : public ::google::protobuf::Message {
 public:
  FestDonateGetTaskRewardReq();
  virtual ~FestDonateGetTaskRewardReq();

  FestDonateGetTaskRewardReq(const FestDonateGetTaskRewardReq& from);

  inline FestDonateGetTaskRewardReq& operator=(const FestDonateGetTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetTaskRewardReq& default_instance();

  void Swap(FestDonateGetTaskRewardReq* other);

  // implements Message ----------------------------------------------

  FestDonateGetTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetTaskRewardReq& from);
  void MergeFrom(const FestDonateGetTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetTaskRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateGetTaskRewardRsp : public ::google::protobuf::Message {
 public:
  FestDonateGetTaskRewardRsp();
  virtual ~FestDonateGetTaskRewardRsp();

  FestDonateGetTaskRewardRsp(const FestDonateGetTaskRewardRsp& from);

  inline FestDonateGetTaskRewardRsp& operator=(const FestDonateGetTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateGetTaskRewardRsp& default_instance();

  void Swap(FestDonateGetTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  FestDonateGetTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateGetTaskRewardRsp& from);
  void MergeFrom(const FestDonateGetTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestDonateTaskProto data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FestDonateTaskProto& data() const;
  inline ::proto_ff::FestDonateTaskProto* mutable_data();
  inline ::proto_ff::FestDonateTaskProto* release_data();
  inline void set_allocated_data(::proto_ff::FestDonateTaskProto* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateGetTaskRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestDonateTaskProto* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateGetTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateTaskTtatusChange : public ::google::protobuf::Message {
 public:
  FestDonateTaskTtatusChange();
  virtual ~FestDonateTaskTtatusChange();

  FestDonateTaskTtatusChange(const FestDonateTaskTtatusChange& from);

  inline FestDonateTaskTtatusChange& operator=(const FestDonateTaskTtatusChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateTaskTtatusChange& default_instance();

  void Swap(FestDonateTaskTtatusChange* other);

  // implements Message ----------------------------------------------

  FestDonateTaskTtatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateTaskTtatusChange& from);
  void MergeFrom(const FestDonateTaskTtatusChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestDonateTaskProto data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto_ff::FestDonateTaskProto& data(int index) const;
  inline ::proto_ff::FestDonateTaskProto* mutable_data(int index);
  inline ::proto_ff::FestDonateTaskProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateTaskTtatusChange)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto > data_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDonateTaskTtatusChange* default_instance_;
};
// -------------------------------------------------------------------

class FestOnlineGetRewardReq : public ::google::protobuf::Message {
 public:
  FestOnlineGetRewardReq();
  virtual ~FestOnlineGetRewardReq();

  FestOnlineGetRewardReq(const FestOnlineGetRewardReq& from);

  inline FestOnlineGetRewardReq& operator=(const FestOnlineGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestOnlineGetRewardReq& default_instance();

  void Swap(FestOnlineGetRewardReq* other);

  // implements Message ----------------------------------------------

  FestOnlineGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestOnlineGetRewardReq& from);
  void MergeFrom(const FestOnlineGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestOnlineGetRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestOnlineGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestOnlineGetRewardRsp : public ::google::protobuf::Message {
 public:
  FestOnlineGetRewardRsp();
  virtual ~FestOnlineGetRewardRsp();

  FestOnlineGetRewardRsp(const FestOnlineGetRewardRsp& from);

  inline FestOnlineGetRewardRsp& operator=(const FestOnlineGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestOnlineGetRewardRsp& default_instance();

  void Swap(FestOnlineGetRewardRsp* other);

  // implements Message ----------------------------------------------

  FestOnlineGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestOnlineGetRewardRsp& from);
  void MergeFrom(const FestOnlineGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestOnlineOneProto data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FestOnlineOneProto& data() const;
  inline ::proto_ff::FestOnlineOneProto* mutable_data();
  inline ::proto_ff::FestOnlineOneProto* release_data();
  inline void set_allocated_data(::proto_ff::FestOnlineOneProto* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestOnlineGetRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestOnlineOneProto* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestOnlineGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestCollectWorldExchargeReq : public ::google::protobuf::Message {
 public:
  FestCollectWorldExchargeReq();
  virtual ~FestCollectWorldExchargeReq();

  FestCollectWorldExchargeReq(const FestCollectWorldExchargeReq& from);

  inline FestCollectWorldExchargeReq& operator=(const FestCollectWorldExchargeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCollectWorldExchargeReq& default_instance();

  void Swap(FestCollectWorldExchargeReq* other);

  // implements Message ----------------------------------------------

  FestCollectWorldExchargeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCollectWorldExchargeReq& from);
  void MergeFrom(const FestCollectWorldExchargeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCollectWorldExchargeReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCollectWorldExchargeReq* default_instance_;
};
// -------------------------------------------------------------------

class FestCollectWorldExchargeRsp : public ::google::protobuf::Message {
 public:
  FestCollectWorldExchargeRsp();
  virtual ~FestCollectWorldExchargeRsp();

  FestCollectWorldExchargeRsp(const FestCollectWorldExchargeRsp& from);

  inline FestCollectWorldExchargeRsp& operator=(const FestCollectWorldExchargeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCollectWorldExchargeRsp& default_instance();

  void Swap(FestCollectWorldExchargeRsp* other);

  // implements Message ----------------------------------------------

  FestCollectWorldExchargeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCollectWorldExchargeRsp& from);
  void MergeFrom(const FestCollectWorldExchargeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestCollectWordOneProto data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FestCollectWordOneProto& data() const;
  inline ::proto_ff::FestCollectWordOneProto* mutable_data();
  inline ::proto_ff::FestCollectWordOneProto* release_data();
  inline void set_allocated_data(::proto_ff::FestCollectWordOneProto* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCollectWorldExchargeRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestCollectWordOneProto* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCollectWorldExchargeRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeChouJiangReq : public ::google::protobuf::Message {
 public:
  FestDrawPizeChouJiangReq();
  virtual ~FestDrawPizeChouJiangReq();

  FestDrawPizeChouJiangReq(const FestDrawPizeChouJiangReq& from);

  inline FestDrawPizeChouJiangReq& operator=(const FestDrawPizeChouJiangReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeChouJiangReq& default_instance();

  void Swap(FestDrawPizeChouJiangReq* other);

  // implements Message ----------------------------------------------

  FestDrawPizeChouJiangReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeChouJiangReq& from);
  void MergeFrom(const FestDrawPizeChouJiangReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeChouJiangReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeChouJiangReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeChouJiangRsp : public ::google::protobuf::Message {
 public:
  FestDrawPizeChouJiangRsp();
  virtual ~FestDrawPizeChouJiangRsp();

  FestDrawPizeChouJiangRsp(const FestDrawPizeChouJiangRsp& from);

  inline FestDrawPizeChouJiangRsp& operator=(const FestDrawPizeChouJiangRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeChouJiangRsp& default_instance();

  void Swap(FestDrawPizeChouJiangRsp* other);

  // implements Message ----------------------------------------------

  FestDrawPizeChouJiangRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeChouJiangRsp& from);
  void MergeFrom(const FestDrawPizeChouJiangRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated int32 choujiang_id = 3;
  inline int choujiang_id_size() const;
  inline void clear_choujiang_id();
  static const int kChoujiangIdFieldNumber = 3;
  inline ::google::protobuf::int32 choujiang_id(int index) const;
  inline void set_choujiang_id(int index, ::google::protobuf::int32 value);
  inline void add_choujiang_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      choujiang_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_choujiang_id();

  // optional uint32 choujiang_num = 5;
  inline bool has_choujiang_num() const;
  inline void clear_choujiang_num();
  static const int kChoujiangNumFieldNumber = 5;
  inline ::google::protobuf::uint32 choujiang_num() const;
  inline void set_choujiang_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeChouJiangRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_choujiang_num();
  inline void clear_has_choujiang_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > choujiang_id_;
  ::google::protobuf::uint32 choujiang_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeChouJiangRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeGetRewardReq : public ::google::protobuf::Message {
 public:
  FestDrawPizeGetRewardReq();
  virtual ~FestDrawPizeGetRewardReq();

  FestDrawPizeGetRewardReq(const FestDrawPizeGetRewardReq& from);

  inline FestDrawPizeGetRewardReq& operator=(const FestDrawPizeGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeGetRewardReq& default_instance();

  void Swap(FestDrawPizeGetRewardReq* other);

  // implements Message ----------------------------------------------

  FestDrawPizeGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeGetRewardReq& from);
  void MergeFrom(const FestDrawPizeGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeGetRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeGetRewardRsp : public ::google::protobuf::Message {
 public:
  FestDrawPizeGetRewardRsp();
  virtual ~FestDrawPizeGetRewardRsp();

  FestDrawPizeGetRewardRsp(const FestDrawPizeGetRewardRsp& from);

  inline FestDrawPizeGetRewardRsp& operator=(const FestDrawPizeGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeGetRewardRsp& default_instance();

  void Swap(FestDrawPizeGetRewardRsp* other);

  // implements Message ----------------------------------------------

  FestDrawPizeGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeGetRewardRsp& from);
  void MergeFrom(const FestDrawPizeGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.DrawPizeTaskProto data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::DrawPizeTaskProto& data() const;
  inline ::proto_ff::DrawPizeTaskProto* mutable_data();
  inline ::proto_ff::DrawPizeTaskProto* release_data();
  inline void set_allocated_data(::proto_ff::DrawPizeTaskProto* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeGetRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::DrawPizeTaskProto* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeLogReq : public ::google::protobuf::Message {
 public:
  FestDrawPizeLogReq();
  virtual ~FestDrawPizeLogReq();

  FestDrawPizeLogReq(const FestDrawPizeLogReq& from);

  inline FestDrawPizeLogReq& operator=(const FestDrawPizeLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeLogReq& default_instance();

  void Swap(FestDrawPizeLogReq* other);

  // implements Message ----------------------------------------------

  FestDrawPizeLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeLogReq& from);
  void MergeFrom(const FestDrawPizeLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeLogReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeLogReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeLogRsp : public ::google::protobuf::Message {
 public:
  FestDrawPizeLogRsp();
  virtual ~FestDrawPizeLogRsp();

  FestDrawPizeLogRsp(const FestDrawPizeLogRsp& from);

  inline FestDrawPizeLogRsp& operator=(const FestDrawPizeLogRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeLogRsp& default_instance();

  void Swap(FestDrawPizeLogRsp* other);

  // implements Message ----------------------------------------------

  FestDrawPizeLogRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeLogRsp& from);
  void MergeFrom(const FestDrawPizeLogRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.DrawPizeLogDBProto log = 3;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::proto_ff::DrawPizeLogDBProto& log(int index) const;
  inline ::proto_ff::DrawPizeLogDBProto* mutable_log(int index);
  inline ::proto_ff::DrawPizeLogDBProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeLogRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeLogRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeGetServerNumReq : public ::google::protobuf::Message {
 public:
  FestDrawPizeGetServerNumReq();
  virtual ~FestDrawPizeGetServerNumReq();

  FestDrawPizeGetServerNumReq(const FestDrawPizeGetServerNumReq& from);

  inline FestDrawPizeGetServerNumReq& operator=(const FestDrawPizeGetServerNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeGetServerNumReq& default_instance();

  void Swap(FestDrawPizeGetServerNumReq* other);

  // implements Message ----------------------------------------------

  FestDrawPizeGetServerNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeGetServerNumReq& from);
  void MergeFrom(const FestDrawPizeGetServerNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeGetServerNumReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeGetServerNumReq* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeGetServerNumRsp : public ::google::protobuf::Message {
 public:
  FestDrawPizeGetServerNumRsp();
  virtual ~FestDrawPizeGetServerNumRsp();

  FestDrawPizeGetServerNumRsp(const FestDrawPizeGetServerNumRsp& from);

  inline FestDrawPizeGetServerNumRsp& operator=(const FestDrawPizeGetServerNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeGetServerNumRsp& default_instance();

  void Swap(FestDrawPizeGetServerNumRsp* other);

  // implements Message ----------------------------------------------

  FestDrawPizeGetServerNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeGetServerNumRsp& from);
  void MergeFrom(const FestDrawPizeGetServerNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 server_num = 3;
  inline bool has_server_num() const;
  inline void clear_server_num();
  static const int kServerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 server_num() const;
  inline void set_server_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeGetServerNumRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_server_num();
  inline void clear_has_server_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 server_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeGetServerNumRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetRewardReq : public ::google::protobuf::Message {
 public:
  FestServerRankGetRewardReq();
  virtual ~FestServerRankGetRewardReq();

  FestServerRankGetRewardReq(const FestServerRankGetRewardReq& from);

  inline FestServerRankGetRewardReq& operator=(const FestServerRankGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetRewardReq& default_instance();

  void Swap(FestServerRankGetRewardReq* other);

  // implements Message ----------------------------------------------

  FestServerRankGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetRewardReq& from);
  void MergeFrom(const FestServerRankGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional int32 reward_id = 3;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 3;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::int32 reward_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetRewardRsp : public ::google::protobuf::Message {
 public:
  FestServerRankGetRewardRsp();
  virtual ~FestServerRankGetRewardRsp();

  FestServerRankGetRewardRsp(const FestServerRankGetRewardRsp& from);

  inline FestServerRankGetRewardRsp& operator=(const FestServerRankGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetRewardRsp& default_instance();

  void Swap(FestServerRankGetRewardRsp* other);

  // implements Message ----------------------------------------------

  FestServerRankGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetRewardRsp& from);
  void MergeFrom(const FestServerRankGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestRankRewardData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::proto_ff::FestRankRewardData& data() const;
  inline ::proto_ff::FestRankRewardData* mutable_data();
  inline ::proto_ff::FestRankRewardData* release_data();
  inline void set_allocated_data(::proto_ff::FestRankRewardData* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestRankRewardData* data_;
  ::google::protobuf::int32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankRewardStatusChange : public ::google::protobuf::Message {
 public:
  FestServerRankRewardStatusChange();
  virtual ~FestServerRankRewardStatusChange();

  FestServerRankRewardStatusChange(const FestServerRankRewardStatusChange& from);

  inline FestServerRankRewardStatusChange& operator=(const FestServerRankRewardStatusChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankRewardStatusChange& default_instance();

  void Swap(FestServerRankRewardStatusChange* other);

  // implements Message ----------------------------------------------

  FestServerRankRewardStatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankRewardStatusChange& from);
  void MergeFrom(const FestServerRankRewardStatusChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestRankRewardData data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FestRankRewardData& data(int index) const;
  inline ::proto_ff::FestRankRewardData* mutable_data(int index);
  inline ::proto_ff::FestRankRewardData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankRewardData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankRewardData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankRewardStatusChange)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankRewardData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankRewardStatusChange* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetMyRankReq : public ::google::protobuf::Message {
 public:
  FestServerRankGetMyRankReq();
  virtual ~FestServerRankGetMyRankReq();

  FestServerRankGetMyRankReq(const FestServerRankGetMyRankReq& from);

  inline FestServerRankGetMyRankReq& operator=(const FestServerRankGetMyRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetMyRankReq& default_instance();

  void Swap(FestServerRankGetMyRankReq* other);

  // implements Message ----------------------------------------------

  FestServerRankGetMyRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetMyRankReq& from);
  void MergeFrom(const FestServerRankGetMyRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetMyRankReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetMyRankReq* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetMyRankRsp : public ::google::protobuf::Message {
 public:
  FestServerRankGetMyRankRsp();
  virtual ~FestServerRankGetMyRankRsp();

  FestServerRankGetMyRankRsp(const FestServerRankGetMyRankRsp& from);

  inline FestServerRankGetMyRankRsp& operator=(const FestServerRankGetMyRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetMyRankRsp& default_instance();

  void Swap(FestServerRankGetMyRankRsp* other);

  // implements Message ----------------------------------------------

  FestServerRankGetMyRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetMyRankRsp& from);
  void MergeFrom(const FestServerRankGetMyRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional int32 my_rank = 4;
  inline bool has_my_rank() const;
  inline void clear_my_rank();
  static const int kMyRankFieldNumber = 4;
  inline ::google::protobuf::int32 my_rank() const;
  inline void set_my_rank(::google::protobuf::int32 value);

  // optional uint64 param = 5;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 5;
  inline ::google::protobuf::uint64 param() const;
  inline void set_param(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetMyRankRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_my_rank();
  inline void clear_has_my_rank();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::int32 my_rank_;
  ::google::protobuf::uint64 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetMyRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetAllRankReq : public ::google::protobuf::Message {
 public:
  FestServerRankGetAllRankReq();
  virtual ~FestServerRankGetAllRankReq();

  FestServerRankGetAllRankReq(const FestServerRankGetAllRankReq& from);

  inline FestServerRankGetAllRankReq& operator=(const FestServerRankGetAllRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetAllRankReq& default_instance();

  void Swap(FestServerRankGetAllRankReq* other);

  // implements Message ----------------------------------------------

  FestServerRankGetAllRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetAllRankReq& from);
  void MergeFrom(const FestServerRankGetAllRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional int32 sex_type = 3;
  inline bool has_sex_type() const;
  inline void clear_sex_type();
  static const int kSexTypeFieldNumber = 3;
  inline ::google::protobuf::int32 sex_type() const;
  inline void set_sex_type(::google::protobuf::int32 value);

  // optional uint64 cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 rank_type = 5;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 rank_type() const;
  inline void set_rank_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetAllRankReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_sex_type();
  inline void clear_has_sex_type();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 sex_type_;
  ::google::protobuf::uint32 rank_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetAllRankReq* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetAllRankRsp : public ::google::protobuf::Message {
 public:
  FestServerRankGetAllRankRsp();
  virtual ~FestServerRankGetAllRankRsp();

  FestServerRankGetAllRankRsp(const FestServerRankGetAllRankRsp& from);

  inline FestServerRankGetAllRankRsp& operator=(const FestServerRankGetAllRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetAllRankRsp& default_instance();

  void Swap(FestServerRankGetAllRankRsp* other);

  // implements Message ----------------------------------------------

  FestServerRankGetAllRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetAllRankRsp& from);
  void MergeFrom(const FestServerRankGetAllRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // repeated .proto_ff.RankNodeData rankList = 4;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 4;
  inline const ::proto_ff::RankNodeData& ranklist(int index) const;
  inline ::proto_ff::RankNodeData* mutable_ranklist(int index);
  inline ::proto_ff::RankNodeData* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RankNodeData >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RankNodeData >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetAllRankRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RankNodeData > ranklist_;
  ::google::protobuf::int32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetAllRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankBuyGiftReq : public ::google::protobuf::Message {
 public:
  FestServerRankBuyGiftReq();
  virtual ~FestServerRankBuyGiftReq();

  FestServerRankBuyGiftReq(const FestServerRankBuyGiftReq& from);

  inline FestServerRankBuyGiftReq& operator=(const FestServerRankBuyGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankBuyGiftReq& default_instance();

  void Swap(FestServerRankBuyGiftReq* other);

  // implements Message ----------------------------------------------

  FestServerRankBuyGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankBuyGiftReq& from);
  void MergeFrom(const FestServerRankBuyGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankBuyGiftReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankBuyGiftReq* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankBuyGiftRsp : public ::google::protobuf::Message {
 public:
  FestServerRankBuyGiftRsp();
  virtual ~FestServerRankBuyGiftRsp();

  FestServerRankBuyGiftRsp(const FestServerRankBuyGiftRsp& from);

  inline FestServerRankBuyGiftRsp& operator=(const FestServerRankBuyGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankBuyGiftRsp& default_instance();

  void Swap(FestServerRankBuyGiftRsp* other);

  // implements Message ----------------------------------------------

  FestServerRankBuyGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankBuyGiftRsp& from);
  void MergeFrom(const FestServerRankBuyGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional uint32 gift_status = 4;
  inline bool has_gift_status() const;
  inline void clear_gift_status();
  static const int kGiftStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 gift_status() const;
  inline void set_gift_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankBuyGiftRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_gift_status();
  inline void clear_has_gift_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::uint32 gift_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankBuyGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetRedPointRewardReq : public ::google::protobuf::Message {
 public:
  FestServerRankGetRedPointRewardReq();
  virtual ~FestServerRankGetRedPointRewardReq();

  FestServerRankGetRedPointRewardReq(const FestServerRankGetRedPointRewardReq& from);

  inline FestServerRankGetRedPointRewardReq& operator=(const FestServerRankGetRedPointRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetRedPointRewardReq& default_instance();

  void Swap(FestServerRankGetRedPointRewardReq* other);

  // implements Message ----------------------------------------------

  FestServerRankGetRedPointRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetRedPointRewardReq& from);
  void MergeFrom(const FestServerRankGetRedPointRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetRedPointRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetRedPointRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankGetRedPointRewardRsp : public ::google::protobuf::Message {
 public:
  FestServerRankGetRedPointRewardRsp();
  virtual ~FestServerRankGetRedPointRewardRsp();

  FestServerRankGetRedPointRewardRsp(const FestServerRankGetRedPointRewardRsp& from);

  inline FestServerRankGetRedPointRewardRsp& operator=(const FestServerRankGetRedPointRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankGetRedPointRewardRsp& default_instance();

  void Swap(FestServerRankGetRedPointRewardRsp* other);

  // implements Message ----------------------------------------------

  FestServerRankGetRedPointRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankGetRedPointRewardRsp& from);
  void MergeFrom(const FestServerRankGetRedPointRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional uint32 red_point_status = 4;
  inline bool has_red_point_status() const;
  inline void clear_red_point_status();
  static const int kRedPointStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 red_point_status() const;
  inline void set_red_point_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankGetRedPointRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_red_point_status();
  inline void clear_has_red_point_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::uint32 red_point_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankGetRedPointRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestServerRankStatusChange : public ::google::protobuf::Message {
 public:
  FestServerRankStatusChange();
  virtual ~FestServerRankStatusChange();

  FestServerRankStatusChange(const FestServerRankStatusChange& from);

  inline FestServerRankStatusChange& operator=(const FestServerRankStatusChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestServerRankStatusChange& default_instance();

  void Swap(FestServerRankStatusChange* other);

  // implements Message ----------------------------------------------

  FestServerRankStatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestServerRankStatusChange& from);
  void MergeFrom(const FestServerRankStatusChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestRankData rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::proto_ff::FestRankData& rank(int index) const;
  inline ::proto_ff::FestRankData* mutable_rank(int index);
  inline ::proto_ff::FestRankData* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankData >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankData >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:proto_ff.FestServerRankStatusChange)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankData > rank_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestServerRankStatusChange* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleFetchReq : public ::google::protobuf::Message {
 public:
  FestCandleFetchReq();
  virtual ~FestCandleFetchReq();

  FestCandleFetchReq(const FestCandleFetchReq& from);

  inline FestCandleFetchReq& operator=(const FestCandleFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleFetchReq& default_instance();

  void Swap(FestCandleFetchReq* other);

  // implements Message ----------------------------------------------

  FestCandleFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleFetchReq& from);
  void MergeFrom(const FestCandleFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandleFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleFetchRsp : public ::google::protobuf::Message {
 public:
  FestCandleFetchRsp();
  virtual ~FestCandleFetchRsp();

  FestCandleFetchRsp(const FestCandleFetchRsp& from);

  inline FestCandleFetchRsp& operator=(const FestCandleFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleFetchRsp& default_instance();

  void Swap(FestCandleFetchRsp* other);

  // implements Message ----------------------------------------------

  FestCandleFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleFetchRsp& from);
  void MergeFrom(const FestCandleFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandleFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleFetchLstRsp : public ::google::protobuf::Message {
 public:
  FestCandleFetchLstRsp();
  virtual ~FestCandleFetchLstRsp();

  FestCandleFetchLstRsp(const FestCandleFetchLstRsp& from);

  inline FestCandleFetchLstRsp& operator=(const FestCandleFetchLstRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleFetchLstRsp& default_instance();

  void Swap(FestCandleFetchLstRsp* other);

  // implements Message ----------------------------------------------

  FestCandleFetchLstRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleFetchLstRsp& from);
  void MergeFrom(const FestCandleFetchLstRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated int32 id_lst = 2;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 2;
  inline ::google::protobuf::int32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::int32 value);
  inline void add_id_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleFetchLstRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_lst_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandleFetchLstRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleRankReq : public ::google::protobuf::Message {
 public:
  FestCandleRankReq();
  virtual ~FestCandleRankReq();

  FestCandleRankReq(const FestCandleRankReq& from);

  inline FestCandleRankReq& operator=(const FestCandleRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleRankReq& default_instance();

  void Swap(FestCandleRankReq* other);

  // implements Message ----------------------------------------------

  FestCandleRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleRankReq& from);
  void MergeFrom(const FestCandleRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleRankReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandleRankReq* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleRankRsp : public ::google::protobuf::Message {
 public:
  FestCandleRankRsp();
  virtual ~FestCandleRankRsp();

  FestCandleRankRsp(const FestCandleRankRsp& from);

  inline FestCandleRankRsp& operator=(const FestCandleRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleRankRsp& default_instance();

  void Swap(FestCandleRankRsp* other);

  // implements Message ----------------------------------------------

  FestCandleRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleRankRsp& from);
  void MergeFrom(const FestCandleRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestCandRankProto rank = 3;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline const ::proto_ff::FestCandRankProto& rank(int index) const;
  inline ::proto_ff::FestCandRankProto* mutable_rank(int index);
  inline ::proto_ff::FestCandRankProto* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCandRankProto >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCandRankProto >*
      mutable_rank();

  // optional uint64 harm = 4;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 4;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleRankRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCandRankProto > rank_;
  ::google::protobuf::uint64 harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestCandleRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_DigEgg_OpRsp : public ::google::protobuf::Message {
 public:
  Fest_L2C_DigEgg_OpRsp();
  virtual ~Fest_L2C_DigEgg_OpRsp();

  Fest_L2C_DigEgg_OpRsp(const Fest_L2C_DigEgg_OpRsp& from);

  inline Fest_L2C_DigEgg_OpRsp& operator=(const Fest_L2C_DigEgg_OpRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_DigEgg_OpRsp& default_instance();

  void Swap(Fest_L2C_DigEgg_OpRsp* other);

  // implements Message ----------------------------------------------

  Fest_L2C_DigEgg_OpRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_DigEgg_OpRsp& from);
  void MergeFrom(const Fest_L2C_DigEgg_OpRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint64 cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_DigEgg_OpRsp)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_DigEgg_OpRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_LogReq : public ::google::protobuf::Message {
 public:
  Fest_L2C_LogReq();
  virtual ~Fest_L2C_LogReq();

  Fest_L2C_LogReq(const Fest_L2C_LogReq& from);

  inline Fest_L2C_LogReq& operator=(const Fest_L2C_LogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_LogReq& default_instance();

  void Swap(Fest_L2C_LogReq* other);

  // implements Message ----------------------------------------------

  Fest_L2C_LogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_LogReq& from);
  void MergeFrom(const Fest_L2C_LogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_LogReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_LogReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_RTurnable_OpRsp : public ::google::protobuf::Message {
 public:
  Fest_L2C_RTurnable_OpRsp();
  virtual ~Fest_L2C_RTurnable_OpRsp();

  Fest_L2C_RTurnable_OpRsp(const Fest_L2C_RTurnable_OpRsp& from);

  inline Fest_L2C_RTurnable_OpRsp& operator=(const Fest_L2C_RTurnable_OpRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_RTurnable_OpRsp& default_instance();

  void Swap(Fest_L2C_RTurnable_OpRsp* other);

  // implements Message ----------------------------------------------

  Fest_L2C_RTurnable_OpRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_RTurnable_OpRsp& from);
  void MergeFrom(const Fest_L2C_RTurnable_OpRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.RTurnableLogDBProto log = 2;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 2;
  inline const ::proto_ff::RTurnableLogDBProto& log() const;
  inline ::proto_ff::RTurnableLogDBProto* mutable_log();
  inline ::proto_ff::RTurnableLogDBProto* release_log();
  inline void set_allocated_log(::proto_ff::RTurnableLogDBProto* log);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_RTurnable_OpRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_log();
  inline void clear_has_log();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RTurnableLogDBProto* log_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_RTurnable_OpRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_RTurnable_LogReq : public ::google::protobuf::Message {
 public:
  Fest_L2C_RTurnable_LogReq();
  virtual ~Fest_L2C_RTurnable_LogReq();

  Fest_L2C_RTurnable_LogReq(const Fest_L2C_RTurnable_LogReq& from);

  inline Fest_L2C_RTurnable_LogReq& operator=(const Fest_L2C_RTurnable_LogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_RTurnable_LogReq& default_instance();

  void Swap(Fest_L2C_RTurnable_LogReq* other);

  // implements Message ----------------------------------------------

  Fest_L2C_RTurnable_LogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_RTurnable_LogReq& from);
  void MergeFrom(const Fest_L2C_RTurnable_LogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_RTurnable_LogReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_RTurnable_LogReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_DonateOperate_Notify : public ::google::protobuf::Message {
 public:
  Fest_L2C_DonateOperate_Notify();
  virtual ~Fest_L2C_DonateOperate_Notify();

  Fest_L2C_DonateOperate_Notify(const Fest_L2C_DonateOperate_Notify& from);

  inline Fest_L2C_DonateOperate_Notify& operator=(const Fest_L2C_DonateOperate_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_DonateOperate_Notify& default_instance();

  void Swap(Fest_L2C_DonateOperate_Notify* other);

  // implements Message ----------------------------------------------

  Fest_L2C_DonateOperate_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_DonateOperate_Notify& from);
  void MergeFrom(const Fest_L2C_DonateOperate_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 single_num = 3;
  inline bool has_single_num() const;
  inline void clear_single_num();
  static const int kSingleNumFieldNumber = 3;
  inline ::google::protobuf::uint32 single_num() const;
  inline void set_single_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_DonateOperate_Notify)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_single_num();
  inline void clear_has_single_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 single_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_DonateOperate_Notify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_C2L_DonateGetServerRewardReq : public ::google::protobuf::Message {
 public:
  Fest_C2L_DonateGetServerRewardReq();
  virtual ~Fest_C2L_DonateGetServerRewardReq();

  Fest_C2L_DonateGetServerRewardReq(const Fest_C2L_DonateGetServerRewardReq& from);

  inline Fest_C2L_DonateGetServerRewardReq& operator=(const Fest_C2L_DonateGetServerRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_C2L_DonateGetServerRewardReq& default_instance();

  void Swap(Fest_C2L_DonateGetServerRewardReq* other);

  // implements Message ----------------------------------------------

  Fest_C2L_DonateGetServerRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_C2L_DonateGetServerRewardReq& from);
  void MergeFrom(const Fest_C2L_DonateGetServerRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint32 server_num = 3;
  inline bool has_server_num() const;
  inline void clear_server_num();
  static const int kServerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 server_num() const;
  inline void set_server_num(::google::protobuf::uint32 value);

  // optional uint64 cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_C2L_DonateGetServerRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_server_num();
  inline void clear_has_server_num();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 server_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_C2L_DonateGetServerRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_DrawPizeLogReq : public ::google::protobuf::Message {
 public:
  Fest_L2C_DrawPizeLogReq();
  virtual ~Fest_L2C_DrawPizeLogReq();

  Fest_L2C_DrawPizeLogReq(const Fest_L2C_DrawPizeLogReq& from);

  inline Fest_L2C_DrawPizeLogReq& operator=(const Fest_L2C_DrawPizeLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_DrawPizeLogReq& default_instance();

  void Swap(Fest_L2C_DrawPizeLogReq* other);

  // implements Message ----------------------------------------------

  Fest_L2C_DrawPizeLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_DrawPizeLogReq& from);
  void MergeFrom(const Fest_L2C_DrawPizeLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.DrawPizeLogDBProto log = 2;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 2;
  inline const ::proto_ff::DrawPizeLogDBProto& log(int index) const;
  inline ::proto_ff::DrawPizeLogDBProto* mutable_log(int index);
  inline ::proto_ff::DrawPizeLogDBProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >*
      mutable_log();

  // optional int32 choujiang_num = 3;
  inline bool has_choujiang_num() const;
  inline void clear_choujiang_num();
  static const int kChoujiangNumFieldNumber = 3;
  inline ::google::protobuf::int32 choujiang_num() const;
  inline void set_choujiang_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_DrawPizeLogReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_choujiang_num();
  inline void clear_has_choujiang_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto > log_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 choujiang_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_DrawPizeLogReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2C_DrawPizeChouJiangGetServerNumReq : public ::google::protobuf::Message {
 public:
  Fest_L2C_DrawPizeChouJiangGetServerNumReq();
  virtual ~Fest_L2C_DrawPizeChouJiangGetServerNumReq();

  Fest_L2C_DrawPizeChouJiangGetServerNumReq(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from);

  inline Fest_L2C_DrawPizeChouJiangGetServerNumReq& operator=(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2C_DrawPizeChouJiangGetServerNumReq& default_instance();

  void Swap(Fest_L2C_DrawPizeChouJiangGetServerNumReq* other);

  // implements Message ----------------------------------------------

  Fest_L2C_DrawPizeChouJiangGetServerNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from);
  void MergeFrom(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2C_DrawPizeChouJiangGetServerNumReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2C_DrawPizeChouJiangGetServerNumReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_C2L_DrawPizeChouJiangGetServerNumRsp : public ::google::protobuf::Message {
 public:
  Fest_C2L_DrawPizeChouJiangGetServerNumRsp();
  virtual ~Fest_C2L_DrawPizeChouJiangGetServerNumRsp();

  Fest_C2L_DrawPizeChouJiangGetServerNumRsp(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from);

  inline Fest_C2L_DrawPizeChouJiangGetServerNumRsp& operator=(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& default_instance();

  void Swap(Fest_C2L_DrawPizeChouJiangGetServerNumRsp* other);

  // implements Message ----------------------------------------------

  Fest_C2L_DrawPizeChouJiangGetServerNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from);
  void MergeFrom(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint32 server_num = 3;
  inline bool has_server_num() const;
  inline void clear_server_num();
  static const int kServerNumFieldNumber = 3;
  inline ::google::protobuf::uint32 server_num() const;
  inline void set_server_num(::google::protobuf::uint32 value);

  // optional uint64 cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_C2L_DrawPizeChouJiangGetServerNumRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_server_num();
  inline void clear_has_server_num();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 server_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_C2L_DrawPizeChouJiangGetServerNumRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_C2L_ServerRankSyncReq : public ::google::protobuf::Message {
 public:
  Fest_C2L_ServerRankSyncReq();
  virtual ~Fest_C2L_ServerRankSyncReq();

  Fest_C2L_ServerRankSyncReq(const Fest_C2L_ServerRankSyncReq& from);

  inline Fest_C2L_ServerRankSyncReq& operator=(const Fest_C2L_ServerRankSyncReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_C2L_ServerRankSyncReq& default_instance();

  void Swap(Fest_C2L_ServerRankSyncReq* other);

  // implements Message ----------------------------------------------

  Fest_C2L_ServerRankSyncReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_C2L_ServerRankSyncReq& from);
  void MergeFrom(const Fest_C2L_ServerRankSyncReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional int32 rank_type = 4;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 4;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_C2L_ServerRankSyncReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::int32 rank_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_C2L_ServerRankSyncReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_C2L_ServerRankSyncRsp : public ::google::protobuf::Message {
 public:
  Fest_C2L_ServerRankSyncRsp();
  virtual ~Fest_C2L_ServerRankSyncRsp();

  Fest_C2L_ServerRankSyncRsp(const Fest_C2L_ServerRankSyncRsp& from);

  inline Fest_C2L_ServerRankSyncRsp& operator=(const Fest_C2L_ServerRankSyncRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_C2L_ServerRankSyncRsp& default_instance();

  void Swap(Fest_C2L_ServerRankSyncRsp* other);

  // implements Message ----------------------------------------------

  Fest_C2L_ServerRankSyncRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_C2L_ServerRankSyncRsp& from);
  void MergeFrom(const Fest_C2L_ServerRankSyncRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 rank_id = 3;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 3;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // optional int32 rank_type = 4;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 4;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // optional int32 my_rank = 5;
  inline bool has_my_rank() const;
  inline void clear_my_rank();
  static const int kMyRankFieldNumber = 5;
  inline ::google::protobuf::int32 my_rank() const;
  inline void set_my_rank(::google::protobuf::int32 value);

  // optional uint64 param = 6;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline ::google::protobuf::uint64 param() const;
  inline void set_param(::google::protobuf::uint64 value);

  // optional bool finish = 7;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 7;
  inline bool finish() const;
  inline void set_finish(bool value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_C2L_ServerRankSyncRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_my_rank();
  inline void clear_has_my_rank();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 rank_id_;
  ::google::protobuf::int32 rank_type_;
  ::google::protobuf::int32 my_rank_;
  ::google::protobuf::uint64 param_;
  bool finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_C2L_ServerRankSyncRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_S2C_CandleRankReward : public ::google::protobuf::Message {
 public:
  Fest_S2C_CandleRankReward();
  virtual ~Fest_S2C_CandleRankReward();

  Fest_S2C_CandleRankReward(const Fest_S2C_CandleRankReward& from);

  inline Fest_S2C_CandleRankReward& operator=(const Fest_S2C_CandleRankReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_S2C_CandleRankReward& default_instance();

  void Swap(Fest_S2C_CandleRankReward* other);

  // implements Message ----------------------------------------------

  Fest_S2C_CandleRankReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_S2C_CandleRankReward& from);
  void MergeFrom(const Fest_S2C_CandleRankReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair64 cidrank = 1;
  inline int cidrank_size() const;
  inline void clear_cidrank();
  static const int kCidrankFieldNumber = 1;
  inline const ::proto_ff::ComPair64& cidrank(int index) const;
  inline ::proto_ff::ComPair64* mutable_cidrank(int index);
  inline ::proto_ff::ComPair64* add_cidrank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      cidrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_cidrank();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_S2C_CandleRankReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > cidrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_S2C_CandleRankReward* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2S_CandleAddHarm : public ::google::protobuf::Message {
 public:
  Fest_L2S_CandleAddHarm();
  virtual ~Fest_L2S_CandleAddHarm();

  Fest_L2S_CandleAddHarm(const Fest_L2S_CandleAddHarm& from);

  inline Fest_L2S_CandleAddHarm& operator=(const Fest_L2S_CandleAddHarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2S_CandleAddHarm& default_instance();

  void Swap(Fest_L2S_CandleAddHarm* other);

  // implements Message ----------------------------------------------

  Fest_L2S_CandleAddHarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2S_CandleAddHarm& from);
  void MergeFrom(const Fest_L2S_CandleAddHarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 logicid = 5;
  inline bool has_logicid() const;
  inline void clear_logicid();
  static const int kLogicidFieldNumber = 5;
  inline ::google::protobuf::uint32 logicid() const;
  inline void set_logicid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2S_CandleAddHarm)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_logicid();
  inline void clear_has_logicid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 logicid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2S_CandleAddHarm* default_instance_;
};
// -------------------------------------------------------------------

class Fest_S2L_CandleTotalHarmRsp : public ::google::protobuf::Message {
 public:
  Fest_S2L_CandleTotalHarmRsp();
  virtual ~Fest_S2L_CandleTotalHarmRsp();

  Fest_S2L_CandleTotalHarmRsp(const Fest_S2L_CandleTotalHarmRsp& from);

  inline Fest_S2L_CandleTotalHarmRsp& operator=(const Fest_S2L_CandleTotalHarmRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_S2L_CandleTotalHarmRsp& default_instance();

  void Swap(Fest_S2L_CandleTotalHarmRsp* other);

  // implements Message ----------------------------------------------

  Fest_S2L_CandleTotalHarmRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_S2L_CandleTotalHarmRsp& from);
  void MergeFrom(const Fest_S2L_CandleTotalHarmRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int64 total_harm = 2;
  inline bool has_total_harm() const;
  inline void clear_total_harm();
  static const int kTotalHarmFieldNumber = 2;
  inline ::google::protobuf::int64 total_harm() const;
  inline void set_total_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_S2L_CandleTotalHarmRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_total_harm();
  inline void clear_has_total_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int64 total_harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_S2L_CandleTotalHarmRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_L2S_CandleRankReq : public ::google::protobuf::Message {
 public:
  Fest_L2S_CandleRankReq();
  virtual ~Fest_L2S_CandleRankReq();

  Fest_L2S_CandleRankReq(const Fest_L2S_CandleRankReq& from);

  inline Fest_L2S_CandleRankReq& operator=(const Fest_L2S_CandleRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_L2S_CandleRankReq& default_instance();

  void Swap(Fest_L2S_CandleRankReq* other);

  // implements Message ----------------------------------------------

  Fest_L2S_CandleRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_L2S_CandleRankReq& from);
  void MergeFrom(const Fest_L2S_CandleRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int64 harm = 2;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 2;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_L2S_CandleRankReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_L2S_CandleRankReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BossFirstOptReq : public ::google::protobuf::Message {
 public:
  Fest_BossFirstOptReq();
  virtual ~Fest_BossFirstOptReq();

  Fest_BossFirstOptReq(const Fest_BossFirstOptReq& from);

  inline Fest_BossFirstOptReq& operator=(const Fest_BossFirstOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BossFirstOptReq& default_instance();

  void Swap(Fest_BossFirstOptReq* other);

  // implements Message ----------------------------------------------

  Fest_BossFirstOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BossFirstOptReq& from);
  void MergeFrom(const Fest_BossFirstOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BossFirstOptReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BossFirstOptReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BossFirstOptRsp : public ::google::protobuf::Message {
 public:
  Fest_BossFirstOptRsp();
  virtual ~Fest_BossFirstOptRsp();

  Fest_BossFirstOptRsp(const Fest_BossFirstOptRsp& from);

  inline Fest_BossFirstOptRsp& operator=(const Fest_BossFirstOptRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BossFirstOptRsp& default_instance();

  void Swap(Fest_BossFirstOptRsp* other);

  // implements Message ----------------------------------------------

  Fest_BossFirstOptRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BossFirstOptRsp& from);
  void MergeFrom(const Fest_BossFirstOptRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BossFirstOptRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BossFirstOptRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BossInfoReq : public ::google::protobuf::Message {
 public:
  Fest_BossInfoReq();
  virtual ~Fest_BossInfoReq();

  Fest_BossInfoReq(const Fest_BossInfoReq& from);

  inline Fest_BossInfoReq& operator=(const Fest_BossInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BossInfoReq& default_instance();

  void Swap(Fest_BossInfoReq* other);

  // implements Message ----------------------------------------------

  Fest_BossInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BossInfoReq& from);
  void MergeFrom(const Fest_BossInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BossInfoReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BossInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class FestBossInfo : public ::google::protobuf::Message {
 public:
  FestBossInfo();
  virtual ~FestBossInfo();

  FestBossInfo(const FestBossInfo& from);

  inline FestBossInfo& operator=(const FestBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestBossInfo& default_instance();

  void Swap(FestBossInfo* other);

  // implements Message ----------------------------------------------

  FestBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestBossInfo& from);
  void MergeFrom(const FestBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 refresh_time = 2;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint64 value);

  // optional uint64 kill_cid = 3;
  inline bool has_kill_cid() const;
  inline void clear_kill_cid();
  static const int kKillCidFieldNumber = 3;
  inline ::google::protobuf::uint64 kill_cid() const;
  inline void set_kill_cid(::google::protobuf::uint64 value);

  // optional bytes kill_name = 4;
  inline bool has_kill_name() const;
  inline void clear_kill_name();
  static const int kKillNameFieldNumber = 4;
  inline const ::std::string& kill_name() const;
  inline void set_kill_name(const ::std::string& value);
  inline void set_kill_name(const char* value);
  inline void set_kill_name(const void* value, size_t size);
  inline ::std::string* mutable_kill_name();
  inline ::std::string* release_kill_name();
  inline void set_allocated_kill_name(::std::string* kill_name);

  // optional uint64 kill_time = 5;
  inline bool has_kill_time() const;
  inline void clear_kill_time();
  static const int kKillTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 kill_time() const;
  inline void set_kill_time(::google::protobuf::uint64 value);

  // optional uint32 teamid = 6;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 6;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleHeadPicProto head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline const ::proto_ff::RoleHeadPicProto& head() const;
  inline ::proto_ff::RoleHeadPicProto* mutable_head();
  inline ::proto_ff::RoleHeadPicProto* release_head();
  inline void set_allocated_head(::proto_ff::RoleHeadPicProto* head);

  // @@protoc_insertion_point(class_scope:proto_ff.FestBossInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_kill_cid();
  inline void clear_has_kill_cid();
  inline void set_has_kill_name();
  inline void clear_has_kill_name();
  inline void set_has_kill_time();
  inline void clear_has_kill_time();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 refresh_time_;
  ::google::protobuf::uint64 kill_cid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 teamid_;
  ::std::string* kill_name_;
  ::google::protobuf::uint64 kill_time_;
  ::proto_ff::RoleHeadPicProto* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BossInfoRsp : public ::google::protobuf::Message {
 public:
  Fest_BossInfoRsp();
  virtual ~Fest_BossInfoRsp();

  Fest_BossInfoRsp(const Fest_BossInfoRsp& from);

  inline Fest_BossInfoRsp& operator=(const Fest_BossInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BossInfoRsp& default_instance();

  void Swap(Fest_BossInfoRsp* other);

  // implements Message ----------------------------------------------

  Fest_BossInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BossInfoRsp& from);
  void MergeFrom(const Fest_BossInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestBossInfo infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::proto_ff::FestBossInfo& infos(int index) const;
  inline ::proto_ff::FestBossInfo* mutable_infos(int index);
  inline ::proto_ff::FestBossInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BossInfoRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo > infos_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BossInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BFGlobalDBKill : public ::google::protobuf::Message {
 public:
  Fest_BFGlobalDBKill();
  virtual ~Fest_BFGlobalDBKill();

  Fest_BFGlobalDBKill(const Fest_BFGlobalDBKill& from);

  inline Fest_BFGlobalDBKill& operator=(const Fest_BFGlobalDBKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BFGlobalDBKill& default_instance();

  void Swap(Fest_BFGlobalDBKill* other);

  // implements Message ----------------------------------------------

  Fest_BFGlobalDBKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BFGlobalDBKill& from);
  void MergeFrom(const Fest_BFGlobalDBKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 kill_cid = 2;
  inline bool has_kill_cid() const;
  inline void clear_kill_cid();
  static const int kKillCidFieldNumber = 2;
  inline ::google::protobuf::uint64 kill_cid() const;
  inline void set_kill_cid(::google::protobuf::uint64 value);

  // optional uint64 kill_time = 3;
  inline bool has_kill_time() const;
  inline void clear_kill_time();
  static const int kKillTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 kill_time() const;
  inline void set_kill_time(::google::protobuf::uint64 value);

  // optional uint32 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BFGlobalDBKill)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_kill_cid();
  inline void clear_has_kill_cid();
  inline void set_has_kill_time();
  inline void clear_has_kill_time();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 kill_cid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint64 kill_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BFGlobalDBKill* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BFGlobalDBEntry : public ::google::protobuf::Message {
 public:
  Fest_BFGlobalDBEntry();
  virtual ~Fest_BFGlobalDBEntry();

  Fest_BFGlobalDBEntry(const Fest_BFGlobalDBEntry& from);

  inline Fest_BFGlobalDBEntry& operator=(const Fest_BFGlobalDBEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BFGlobalDBEntry& default_instance();

  void Swap(Fest_BFGlobalDBEntry* other);

  // implements Message ----------------------------------------------

  Fest_BFGlobalDBEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BFGlobalDBEntry& from);
  void MergeFrom(const Fest_BFGlobalDBEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tmpId = 1;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 1;
  inline ::google::protobuf::int32 tmpid() const;
  inline void set_tmpid(::google::protobuf::int32 value);

  // repeated .proto_ff.Fest_BFGlobalDBKill infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::proto_ff::Fest_BFGlobalDBKill& infos(int index) const;
  inline ::proto_ff::Fest_BFGlobalDBKill* mutable_infos(int index);
  inline ::proto_ff::Fest_BFGlobalDBKill* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBKill >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBKill >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BFGlobalDBEntry)
 private:
  inline void set_has_tmpid();
  inline void clear_has_tmpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBKill > infos_;
  ::google::protobuf::int32 tmpid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BFGlobalDBEntry* default_instance_;
};
// -------------------------------------------------------------------

class Fest_BFGlobalDB : public ::google::protobuf::Message {
 public:
  Fest_BFGlobalDB();
  virtual ~Fest_BFGlobalDB();

  Fest_BFGlobalDB(const Fest_BFGlobalDB& from);

  inline Fest_BFGlobalDB& operator=(const Fest_BFGlobalDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_BFGlobalDB& default_instance();

  void Swap(Fest_BFGlobalDB* other);

  // implements Message ----------------------------------------------

  Fest_BFGlobalDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_BFGlobalDB& from);
  void MergeFrom(const Fest_BFGlobalDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Fest_BFGlobalDBEntry entrys = 1;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 1;
  inline const ::proto_ff::Fest_BFGlobalDBEntry& entrys(int index) const;
  inline ::proto_ff::Fest_BFGlobalDBEntry* mutable_entrys(int index);
  inline ::proto_ff::Fest_BFGlobalDBEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBEntry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_BFGlobalDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBEntry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_BFGlobalDB* default_instance_;
};
// -------------------------------------------------------------------

class L2CFest_BossKFSimpleReq : public ::google::protobuf::Message {
 public:
  L2CFest_BossKFSimpleReq();
  virtual ~L2CFest_BossKFSimpleReq();

  L2CFest_BossKFSimpleReq(const L2CFest_BossKFSimpleReq& from);

  inline L2CFest_BossKFSimpleReq& operator=(const L2CFest_BossKFSimpleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2CFest_BossKFSimpleReq& default_instance();

  void Swap(L2CFest_BossKFSimpleReq* other);

  // implements Message ----------------------------------------------

  L2CFest_BossKFSimpleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2CFest_BossKFSimpleReq& from);
  void MergeFrom(const L2CFest_BossKFSimpleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestSimpleProto proto = 3;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 3;
  inline const ::proto_ff::FestSimpleProto& proto() const;
  inline ::proto_ff::FestSimpleProto* mutable_proto();
  inline ::proto_ff::FestSimpleProto* release_proto();
  inline void set_allocated_proto(::proto_ff::FestSimpleProto* proto);

  // repeated int32 recv_red_ids = 4;
  inline int recv_red_ids_size() const;
  inline void clear_recv_red_ids();
  static const int kRecvRedIdsFieldNumber = 4;
  inline ::google::protobuf::int32 recv_red_ids(int index) const;
  inline void set_recv_red_ids(int index, ::google::protobuf::int32 value);
  inline void add_recv_red_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_red_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_red_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.L2CFest_BossKFSimpleReq)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_proto();
  inline void clear_has_proto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::proto_ff::FestSimpleProto* proto_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_red_ids_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static L2CFest_BossKFSimpleReq* default_instance_;
};
// -------------------------------------------------------------------

class C2LFest_BossKFNotify : public ::google::protobuf::Message {
 public:
  C2LFest_BossKFNotify();
  virtual ~C2LFest_BossKFNotify();

  C2LFest_BossKFNotify(const C2LFest_BossKFNotify& from);

  inline C2LFest_BossKFNotify& operator=(const C2LFest_BossKFNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LFest_BossKFNotify& default_instance();

  void Swap(C2LFest_BossKFNotify* other);

  // implements Message ----------------------------------------------

  C2LFest_BossKFNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LFest_BossKFNotify& from);
  void MergeFrom(const C2LFest_BossKFNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // optional int32 zid = 5;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 5;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LFest_BossKFNotify)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static C2LFest_BossKFNotify* default_instance_;
};
// -------------------------------------------------------------------

class C2LFest_BossInfoReq : public ::google::protobuf::Message {
 public:
  C2LFest_BossInfoReq();
  virtual ~C2LFest_BossInfoReq();

  C2LFest_BossInfoReq(const C2LFest_BossInfoReq& from);

  inline C2LFest_BossInfoReq& operator=(const C2LFest_BossInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LFest_BossInfoReq& default_instance();

  void Swap(C2LFest_BossInfoReq* other);

  // implements Message ----------------------------------------------

  C2LFest_BossInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LFest_BossInfoReq& from);
  void MergeFrom(const C2LFest_BossInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestBossInfo infos = 3;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 3;
  inline const ::proto_ff::FestBossInfo& infos(int index) const;
  inline ::proto_ff::FestBossInfo* mutable_infos(int index);
  inline ::proto_ff::FestBossInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:proto_ff.C2LFest_BossInfoReq)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo > infos_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static C2LFest_BossInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class C2LFest_BossFirstOptReq : public ::google::protobuf::Message {
 public:
  C2LFest_BossFirstOptReq();
  virtual ~C2LFest_BossFirstOptReq();

  C2LFest_BossFirstOptReq(const C2LFest_BossFirstOptReq& from);

  inline C2LFest_BossFirstOptReq& operator=(const C2LFest_BossFirstOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LFest_BossFirstOptReq& default_instance();

  void Swap(C2LFest_BossFirstOptReq* other);

  // implements Message ----------------------------------------------

  C2LFest_BossFirstOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LFest_BossFirstOptReq& from);
  void MergeFrom(const C2LFest_BossFirstOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 roleid = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 4;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LFest_BossFirstOptReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static C2LFest_BossFirstOptReq* default_instance_;
};
// -------------------------------------------------------------------

class C2LFest_HuiMengXiYou_GetRewardReq : public ::google::protobuf::Message {
 public:
  C2LFest_HuiMengXiYou_GetRewardReq();
  virtual ~C2LFest_HuiMengXiYou_GetRewardReq();

  C2LFest_HuiMengXiYou_GetRewardReq(const C2LFest_HuiMengXiYou_GetRewardReq& from);

  inline C2LFest_HuiMengXiYou_GetRewardReq& operator=(const C2LFest_HuiMengXiYou_GetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LFest_HuiMengXiYou_GetRewardReq& default_instance();

  void Swap(C2LFest_HuiMengXiYou_GetRewardReq* other);

  // implements Message ----------------------------------------------

  C2LFest_HuiMengXiYou_GetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LFest_HuiMengXiYou_GetRewardReq& from);
  void MergeFrom(const C2LFest_HuiMengXiYou_GetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LFest_HuiMengXiYou_GetRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static C2LFest_HuiMengXiYou_GetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class L2CFest_HuiMengXiYou_GetRewardRsp : public ::google::protobuf::Message {
 public:
  L2CFest_HuiMengXiYou_GetRewardRsp();
  virtual ~L2CFest_HuiMengXiYou_GetRewardRsp();

  L2CFest_HuiMengXiYou_GetRewardRsp(const L2CFest_HuiMengXiYou_GetRewardRsp& from);

  inline L2CFest_HuiMengXiYou_GetRewardRsp& operator=(const L2CFest_HuiMengXiYou_GetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2CFest_HuiMengXiYou_GetRewardRsp& default_instance();

  void Swap(L2CFest_HuiMengXiYou_GetRewardRsp* other);

  // implements Message ----------------------------------------------

  L2CFest_HuiMengXiYou_GetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2CFest_HuiMengXiYou_GetRewardRsp& from);
  void MergeFrom(const L2CFest_HuiMengXiYou_GetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .proto_ff.FestHuiMengXiYouReward reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::proto_ff::FestHuiMengXiYouReward& reward() const;
  inline ::proto_ff::FestHuiMengXiYouReward* mutable_reward();
  inline ::proto_ff::FestHuiMengXiYouReward* release_reward();
  inline void set_allocated_reward(::proto_ff::FestHuiMengXiYouReward* reward);

  // @@protoc_insertion_point(class_scope:proto_ff.L2CFest_HuiMengXiYou_GetRewardRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;
  ::proto_ff::FestHuiMengXiYouReward* reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static L2CFest_HuiMengXiYou_GetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouRewardStatusChange : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouRewardStatusChange();
  virtual ~NotifyFest_HuiMengXiYouRewardStatusChange();

  NotifyFest_HuiMengXiYouRewardStatusChange(const NotifyFest_HuiMengXiYouRewardStatusChange& from);

  inline NotifyFest_HuiMengXiYouRewardStatusChange& operator=(const NotifyFest_HuiMengXiYouRewardStatusChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouRewardStatusChange& default_instance();

  void Swap(NotifyFest_HuiMengXiYouRewardStatusChange* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouRewardStatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouRewardStatusChange& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouRewardStatusChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestHuiMengXiYouReward reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::proto_ff::FestHuiMengXiYouReward& reward(int index) const;
  inline ::proto_ff::FestHuiMengXiYouReward* mutable_reward(int index);
  inline ::proto_ff::FestHuiMengXiYouReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestHuiMengXiYouReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestHuiMengXiYouReward >*
      mutable_reward();

  // optional int32 cur_points = 3;
  inline bool has_cur_points() const;
  inline void clear_cur_points();
  static const int kCurPointsFieldNumber = 3;
  inline ::google::protobuf::int32 cur_points() const;
  inline void set_cur_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouRewardStatusChange)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_cur_points();
  inline void clear_has_cur_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestHuiMengXiYouReward > reward_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 cur_points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouRewardStatusChange* default_instance_;
};
// -------------------------------------------------------------------

class XiYouGameInfo : public ::google::protobuf::Message {
 public:
  XiYouGameInfo();
  virtual ~XiYouGameInfo();

  XiYouGameInfo(const XiYouGameInfo& from);

  inline XiYouGameInfo& operator=(const XiYouGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XiYouGameInfo& default_instance();

  void Swap(XiYouGameInfo* other);

  // implements Message ----------------------------------------------

  XiYouGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XiYouGameInfo& from);
  void MergeFrom(const XiYouGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.XiYouGameInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static XiYouGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class NotiftFest_HuiMengXiYouStart : public ::google::protobuf::Message {
 public:
  NotiftFest_HuiMengXiYouStart();
  virtual ~NotiftFest_HuiMengXiYouStart();

  NotiftFest_HuiMengXiYouStart(const NotiftFest_HuiMengXiYouStart& from);

  inline NotiftFest_HuiMengXiYouStart& operator=(const NotiftFest_HuiMengXiYouStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotiftFest_HuiMengXiYouStart& default_instance();

  void Swap(NotiftFest_HuiMengXiYouStart* other);

  // implements Message ----------------------------------------------

  NotiftFest_HuiMengXiYouStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotiftFest_HuiMengXiYouStart& from);
  void MergeFrom(const NotiftFest_HuiMengXiYouStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_id = 1;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // repeated .proto_ff.XiYouGameInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::XiYouGameInfo& info(int index) const;
  inline ::proto_ff::XiYouGameInfo* mutable_info(int index);
  inline ::proto_ff::XiYouGameInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >*
      mutable_info();

  // optional int32 cur_state = 3;
  inline bool has_cur_state() const;
  inline void clear_cur_state();
  static const int kCurStateFieldNumber = 3;
  inline ::google::protobuf::int32 cur_state() const;
  inline void set_cur_state(::google::protobuf::int32 value);

  // optional int32 left_time = 4;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 4;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotiftFest_HuiMengXiYouStart)
 private:
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_cur_state();
  inline void clear_has_cur_state();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo > info_;
  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 cur_state_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotiftFest_HuiMengXiYouStart* default_instance_;
};
// -------------------------------------------------------------------

class NotiftFest_LogicHuiMengXiYouStart : public ::google::protobuf::Message {
 public:
  NotiftFest_LogicHuiMengXiYouStart();
  virtual ~NotiftFest_LogicHuiMengXiYouStart();

  NotiftFest_LogicHuiMengXiYouStart(const NotiftFest_LogicHuiMengXiYouStart& from);

  inline NotiftFest_LogicHuiMengXiYouStart& operator=(const NotiftFest_LogicHuiMengXiYouStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotiftFest_LogicHuiMengXiYouStart& default_instance();

  void Swap(NotiftFest_LogicHuiMengXiYouStart* other);

  // implements Message ----------------------------------------------

  NotiftFest_LogicHuiMengXiYouStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotiftFest_LogicHuiMengXiYouStart& from);
  void MergeFrom(const NotiftFest_LogicHuiMengXiYouStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cid = 1;
  inline int cid_size() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid(int index) const;
  inline void set_cid(int index, ::google::protobuf::uint64 value);
  inline void add_cid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid();

  // optional .proto_ff.NotiftFest_HuiMengXiYouStart start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline const ::proto_ff::NotiftFest_HuiMengXiYouStart& start() const;
  inline ::proto_ff::NotiftFest_HuiMengXiYouStart* mutable_start();
  inline ::proto_ff::NotiftFest_HuiMengXiYouStart* release_start();
  inline void set_allocated_start(::proto_ff::NotiftFest_HuiMengXiYouStart* start);

  // @@protoc_insertion_point(class_scope:proto_ff.NotiftFest_LogicHuiMengXiYouStart)
 private:
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_;
  ::proto_ff::NotiftFest_HuiMengXiYouStart* start_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotiftFest_LogicHuiMengXiYouStart* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouSceneChange : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouSceneChange();
  virtual ~NotifyFest_HuiMengXiYouSceneChange();

  NotifyFest_HuiMengXiYouSceneChange(const NotifyFest_HuiMengXiYouSceneChange& from);

  inline NotifyFest_HuiMengXiYouSceneChange& operator=(const NotifyFest_HuiMengXiYouSceneChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouSceneChange& default_instance();

  void Swap(NotifyFest_HuiMengXiYouSceneChange* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouSceneChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouSceneChange& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouSceneChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_id = 1;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // repeated .proto_ff.XiYouGameInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::XiYouGameInfo& info(int index) const;
  inline ::proto_ff::XiYouGameInfo* mutable_info(int index);
  inline ::proto_ff::XiYouGameInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >*
      mutable_info();

  // optional int32 cur_state = 3;
  inline bool has_cur_state() const;
  inline void clear_cur_state();
  static const int kCurStateFieldNumber = 3;
  inline ::google::protobuf::int32 cur_state() const;
  inline void set_cur_state(::google::protobuf::int32 value);

  // optional int32 left_time = 4;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 4;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouSceneChange)
 private:
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_cur_state();
  inline void clear_has_cur_state();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo > info_;
  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 cur_state_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouSceneChange* default_instance_;
};
// -------------------------------------------------------------------

class NotiftFest_HuiMengXiYouGameStart : public ::google::protobuf::Message {
 public:
  NotiftFest_HuiMengXiYouGameStart();
  virtual ~NotiftFest_HuiMengXiYouGameStart();

  NotiftFest_HuiMengXiYouGameStart(const NotiftFest_HuiMengXiYouGameStart& from);

  inline NotiftFest_HuiMengXiYouGameStart& operator=(const NotiftFest_HuiMengXiYouGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotiftFest_HuiMengXiYouGameStart& default_instance();

  void Swap(NotiftFest_HuiMengXiYouGameStart* other);

  // implements Message ----------------------------------------------

  NotiftFest_HuiMengXiYouGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotiftFest_HuiMengXiYouGameStart& from);
  void MergeFrom(const NotiftFest_HuiMengXiYouGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_id = 1;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // repeated .proto_ff.XiYouGameInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::XiYouGameInfo& info(int index) const;
  inline ::proto_ff::XiYouGameInfo* mutable_info(int index);
  inline ::proto_ff::XiYouGameInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >*
      mutable_info();

  // optional int32 cur_state = 3;
  inline bool has_cur_state() const;
  inline void clear_cur_state();
  static const int kCurStateFieldNumber = 3;
  inline ::google::protobuf::int32 cur_state() const;
  inline void set_cur_state(::google::protobuf::int32 value);

  // optional int32 left_time = 4;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 4;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotiftFest_HuiMengXiYouGameStart)
 private:
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_cur_state();
  inline void clear_has_cur_state();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo > info_;
  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 cur_state_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotiftFest_HuiMengXiYouGameStart* default_instance_;
};
// -------------------------------------------------------------------

class NotiftFest_HuiMengXiYouEnd : public ::google::protobuf::Message {
 public:
  NotiftFest_HuiMengXiYouEnd();
  virtual ~NotiftFest_HuiMengXiYouEnd();

  NotiftFest_HuiMengXiYouEnd(const NotiftFest_HuiMengXiYouEnd& from);

  inline NotiftFest_HuiMengXiYouEnd& operator=(const NotiftFest_HuiMengXiYouEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotiftFest_HuiMengXiYouEnd& default_instance();

  void Swap(NotiftFest_HuiMengXiYouEnd* other);

  // implements Message ----------------------------------------------

  NotiftFest_HuiMengXiYouEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotiftFest_HuiMengXiYouEnd& from);
  void MergeFrom(const NotiftFest_HuiMengXiYouEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_id = 1;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // optional int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotiftFest_HuiMengXiYouEnd)
 private:
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_points();
  inline void clear_has_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotiftFest_HuiMengXiYouEnd* default_instance_;
};
// -------------------------------------------------------------------

class NotiftFest_HuiMengXiYouGameInfo : public ::google::protobuf::Message {
 public:
  NotiftFest_HuiMengXiYouGameInfo();
  virtual ~NotiftFest_HuiMengXiYouGameInfo();

  NotiftFest_HuiMengXiYouGameInfo(const NotiftFest_HuiMengXiYouGameInfo& from);

  inline NotiftFest_HuiMengXiYouGameInfo& operator=(const NotiftFest_HuiMengXiYouGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotiftFest_HuiMengXiYouGameInfo& default_instance();

  void Swap(NotiftFest_HuiMengXiYouGameInfo* other);

  // implements Message ----------------------------------------------

  NotiftFest_HuiMengXiYouGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotiftFest_HuiMengXiYouGameInfo& from);
  void MergeFrom(const NotiftFest_HuiMengXiYouGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_id = 1;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // optional int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 task_schedule = 3;
  inline bool has_task_schedule() const;
  inline void clear_task_schedule();
  static const int kTaskScheduleFieldNumber = 3;
  inline ::google::protobuf::int32 task_schedule() const;
  inline void set_task_schedule(::google::protobuf::int32 value);

  // optional int32 cur_points = 4;
  inline bool has_cur_points() const;
  inline void clear_cur_points();
  static const int kCurPointsFieldNumber = 4;
  inline ::google::protobuf::int32 cur_points() const;
  inline void set_cur_points(::google::protobuf::int32 value);

  // optional int32 points_level = 5;
  inline bool has_points_level() const;
  inline void clear_points_level();
  static const int kPointsLevelFieldNumber = 5;
  inline ::google::protobuf::int32 points_level() const;
  inline void set_points_level(::google::protobuf::int32 value);

  // optional int32 my_cur_points = 6;
  inline bool has_my_cur_points() const;
  inline void clear_my_cur_points();
  static const int kMyCurPointsFieldNumber = 6;
  inline ::google::protobuf::int32 my_cur_points() const;
  inline void set_my_cur_points(::google::protobuf::int32 value);

  // optional int32 my_all_points = 7;
  inline bool has_my_all_points() const;
  inline void clear_my_all_points();
  static const int kMyAllPointsFieldNumber = 7;
  inline ::google::protobuf::int32 my_all_points() const;
  inline void set_my_all_points(::google::protobuf::int32 value);

  // optional int32 left_time = 8;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 8;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotiftFest_HuiMengXiYouGameInfo)
 private:
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_task_schedule();
  inline void clear_has_task_schedule();
  inline void set_has_cur_points();
  inline void clear_has_cur_points();
  inline void set_has_points_level();
  inline void clear_has_points_level();
  inline void set_has_my_cur_points();
  inline void clear_has_my_cur_points();
  inline void set_has_my_all_points();
  inline void clear_has_my_all_points();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 task_schedule_;
  ::google::protobuf::int32 cur_points_;
  ::google::protobuf::int32 points_level_;
  ::google::protobuf::int32 my_cur_points_;
  ::google::protobuf::int32 my_all_points_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotiftFest_HuiMengXiYouGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouGameEnd : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouGameEnd();
  virtual ~NotifyFest_HuiMengXiYouGameEnd();

  NotifyFest_HuiMengXiYouGameEnd(const NotifyFest_HuiMengXiYouGameEnd& from);

  inline NotifyFest_HuiMengXiYouGameEnd& operator=(const NotifyFest_HuiMengXiYouGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouGameEnd& default_instance();

  void Swap(NotifyFest_HuiMengXiYouGameEnd* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouGameEnd& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_id = 1;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // optional int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 points_level = 5;
  inline bool has_points_level() const;
  inline void clear_points_level();
  static const int kPointsLevelFieldNumber = 5;
  inline ::google::protobuf::int32 points_level() const;
  inline void set_points_level(::google::protobuf::int32 value);

  // optional int32 my_cur_points = 6;
  inline bool has_my_cur_points() const;
  inline void clear_my_cur_points();
  static const int kMyCurPointsFieldNumber = 6;
  inline ::google::protobuf::int32 my_cur_points() const;
  inline void set_my_cur_points(::google::protobuf::int32 value);

  // repeated .proto_ff.ComItem reward = 7;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 7;
  inline const ::proto_ff::ComItem& reward(int index) const;
  inline ::proto_ff::ComItem* mutable_reward(int index);
  inline ::proto_ff::ComItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouGameEnd)
 private:
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_points_level();
  inline void clear_has_points_level();
  inline void set_has_my_cur_points();
  inline void clear_has_my_cur_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 points_level_;
  ::google::protobuf::int32 my_cur_points_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouEnterReq : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouEnterReq();
  virtual ~NotifyFest_HuiMengXiYouEnterReq();

  NotifyFest_HuiMengXiYouEnterReq(const NotifyFest_HuiMengXiYouEnterReq& from);

  inline NotifyFest_HuiMengXiYouEnterReq& operator=(const NotifyFest_HuiMengXiYouEnterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouEnterReq& default_instance();

  void Swap(NotifyFest_HuiMengXiYouEnterReq* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouEnterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouEnterReq& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouEnterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouEnterReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouEnterReq* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouEnterRsp : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouEnterRsp();
  virtual ~NotifyFest_HuiMengXiYouEnterRsp();

  NotifyFest_HuiMengXiYouEnterRsp(const NotifyFest_HuiMengXiYouEnterRsp& from);

  inline NotifyFest_HuiMengXiYouEnterRsp& operator=(const NotifyFest_HuiMengXiYouEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouEnterRsp& default_instance();

  void Swap(NotifyFest_HuiMengXiYouEnterRsp* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouEnterRsp& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouEnterRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouEnterGameReq : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouEnterGameReq();
  virtual ~NotifyFest_HuiMengXiYouEnterGameReq();

  NotifyFest_HuiMengXiYouEnterGameReq(const NotifyFest_HuiMengXiYouEnterGameReq& from);

  inline NotifyFest_HuiMengXiYouEnterGameReq& operator=(const NotifyFest_HuiMengXiYouEnterGameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouEnterGameReq& default_instance();

  void Swap(NotifyFest_HuiMengXiYouEnterGameReq* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouEnterGameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouEnterGameReq& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouEnterGameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouEnterGameReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouEnterGameReq* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouEnterGameRsp : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouEnterGameRsp();
  virtual ~NotifyFest_HuiMengXiYouEnterGameRsp();

  NotifyFest_HuiMengXiYouEnterGameRsp(const NotifyFest_HuiMengXiYouEnterGameRsp& from);

  inline NotifyFest_HuiMengXiYouEnterGameRsp& operator=(const NotifyFest_HuiMengXiYouEnterGameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouEnterGameRsp& default_instance();

  void Swap(NotifyFest_HuiMengXiYouEnterGameRsp* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouEnterGameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouEnterGameRsp& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouEnterGameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouEnterGameRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouEnterGameRsp* default_instance_;
};
// -------------------------------------------------------------------

class C2LFest_HuiMengXiYouGiveCaiJiReq : public ::google::protobuf::Message {
 public:
  C2LFest_HuiMengXiYouGiveCaiJiReq();
  virtual ~C2LFest_HuiMengXiYouGiveCaiJiReq();

  C2LFest_HuiMengXiYouGiveCaiJiReq(const C2LFest_HuiMengXiYouGiveCaiJiReq& from);

  inline C2LFest_HuiMengXiYouGiveCaiJiReq& operator=(const C2LFest_HuiMengXiYouGiveCaiJiReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LFest_HuiMengXiYouGiveCaiJiReq& default_instance();

  void Swap(C2LFest_HuiMengXiYouGiveCaiJiReq* other);

  // implements Message ----------------------------------------------

  C2LFest_HuiMengXiYouGiveCaiJiReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LFest_HuiMengXiYouGiveCaiJiReq& from);
  void MergeFrom(const C2LFest_HuiMengXiYouGiveCaiJiReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LFest_HuiMengXiYouGiveCaiJiReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static C2LFest_HuiMengXiYouGiveCaiJiReq* default_instance_;
};
// -------------------------------------------------------------------

class L2CFest_HuiMengXiYouGiveCaiJiRsp : public ::google::protobuf::Message {
 public:
  L2CFest_HuiMengXiYouGiveCaiJiRsp();
  virtual ~L2CFest_HuiMengXiYouGiveCaiJiRsp();

  L2CFest_HuiMengXiYouGiveCaiJiRsp(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from);

  inline L2CFest_HuiMengXiYouGiveCaiJiRsp& operator=(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2CFest_HuiMengXiYouGiveCaiJiRsp& default_instance();

  void Swap(L2CFest_HuiMengXiYouGiveCaiJiRsp* other);

  // implements Message ----------------------------------------------

  L2CFest_HuiMengXiYouGiveCaiJiRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from);
  void MergeFrom(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.L2CFest_HuiMengXiYouGiveCaiJiRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static L2CFest_HuiMengXiYouGiveCaiJiRsp* default_instance_;
};
// -------------------------------------------------------------------

class XiYouCaiJiCollectInfo : public ::google::protobuf::Message {
 public:
  XiYouCaiJiCollectInfo();
  virtual ~XiYouCaiJiCollectInfo();

  XiYouCaiJiCollectInfo(const XiYouCaiJiCollectInfo& from);

  inline XiYouCaiJiCollectInfo& operator=(const XiYouCaiJiCollectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XiYouCaiJiCollectInfo& default_instance();

  void Swap(XiYouCaiJiCollectInfo* other);

  // implements Message ----------------------------------------------

  XiYouCaiJiCollectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XiYouCaiJiCollectInfo& from);
  void MergeFrom(const XiYouCaiJiCollectInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional .proto_ff.Vector3PB pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // @@protoc_insertion_point(class_scope:proto_ff.XiYouCaiJiCollectInfo)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::proto_ff::Vector3PB* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static XiYouCaiJiCollectInfo* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouCollect : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouCollect();
  virtual ~NotifyFest_HuiMengXiYouCollect();

  NotifyFest_HuiMengXiYouCollect(const NotifyFest_HuiMengXiYouCollect& from);

  inline NotifyFest_HuiMengXiYouCollect& operator=(const NotifyFest_HuiMengXiYouCollect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouCollect& default_instance();

  void Swap(NotifyFest_HuiMengXiYouCollect* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouCollect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouCollect& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouCollect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.XiYouCaiJiCollectInfo collects = 1;
  inline int collects_size() const;
  inline void clear_collects();
  static const int kCollectsFieldNumber = 1;
  inline const ::proto_ff::XiYouCaiJiCollectInfo& collects(int index) const;
  inline ::proto_ff::XiYouCaiJiCollectInfo* mutable_collects(int index);
  inline ::proto_ff::XiYouCaiJiCollectInfo* add_collects();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectInfo >&
      collects() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectInfo >*
      mutable_collects();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouCollect)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectInfo > collects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouCollect* default_instance_;
};
// -------------------------------------------------------------------

class XiYouCaiJiCollectMonsterInfo : public ::google::protobuf::Message {
 public:
  XiYouCaiJiCollectMonsterInfo();
  virtual ~XiYouCaiJiCollectMonsterInfo();

  XiYouCaiJiCollectMonsterInfo(const XiYouCaiJiCollectMonsterInfo& from);

  inline XiYouCaiJiCollectMonsterInfo& operator=(const XiYouCaiJiCollectMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XiYouCaiJiCollectMonsterInfo& default_instance();

  void Swap(XiYouCaiJiCollectMonsterInfo* other);

  // implements Message ----------------------------------------------

  XiYouCaiJiCollectMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XiYouCaiJiCollectMonsterInfo& from);
  void MergeFrom(const XiYouCaiJiCollectMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 monster_id = 1;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 monster_id() const;
  inline void set_monster_id(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.XiYouCaiJiCollectMonsterInfo)
 private:
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static XiYouCaiJiCollectMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYouCollectSuccess : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYouCollectSuccess();
  virtual ~NotifyFest_HuiMengXiYouCollectSuccess();

  NotifyFest_HuiMengXiYouCollectSuccess(const NotifyFest_HuiMengXiYouCollectSuccess& from);

  inline NotifyFest_HuiMengXiYouCollectSuccess& operator=(const NotifyFest_HuiMengXiYouCollectSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYouCollectSuccess& default_instance();

  void Swap(NotifyFest_HuiMengXiYouCollectSuccess* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYouCollectSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYouCollectSuccess& from);
  void MergeFrom(const NotifyFest_HuiMengXiYouCollectSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.XiYouCaiJiCollectMonsterInfo monster_info = 1;
  inline int monster_info_size() const;
  inline void clear_monster_info();
  static const int kMonsterInfoFieldNumber = 1;
  inline const ::proto_ff::XiYouCaiJiCollectMonsterInfo& monster_info(int index) const;
  inline ::proto_ff::XiYouCaiJiCollectMonsterInfo* mutable_monster_info(int index);
  inline ::proto_ff::XiYouCaiJiCollectMonsterInfo* add_monster_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectMonsterInfo >&
      monster_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectMonsterInfo >*
      mutable_monster_info();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYouCollectSuccess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectMonsterInfo > monster_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYouCollectSuccess* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFest_HuiMengXiYou_RoubaoziNotify : public ::google::protobuf::Message {
 public:
  NotifyFest_HuiMengXiYou_RoubaoziNotify();
  virtual ~NotifyFest_HuiMengXiYou_RoubaoziNotify();

  NotifyFest_HuiMengXiYou_RoubaoziNotify(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from);

  inline NotifyFest_HuiMengXiYou_RoubaoziNotify& operator=(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFest_HuiMengXiYou_RoubaoziNotify& default_instance();

  void Swap(NotifyFest_HuiMengXiYou_RoubaoziNotify* other);

  // implements Message ----------------------------------------------

  NotifyFest_HuiMengXiYou_RoubaoziNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from);
  void MergeFrom(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_fresh_wave = 1;
  inline bool has_cur_fresh_wave() const;
  inline void clear_cur_fresh_wave();
  static const int kCurFreshWaveFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_fresh_wave() const;
  inline void set_cur_fresh_wave(::google::protobuf::uint32 value);

  // optional uint32 all_fresh_wave = 2;
  inline bool has_all_fresh_wave() const;
  inline void clear_all_fresh_wave();
  static const int kAllFreshWaveFieldNumber = 2;
  inline ::google::protobuf::uint32 all_fresh_wave() const;
  inline void set_all_fresh_wave(::google::protobuf::uint32 value);

  // optional uint64 npc_cid = 3;
  inline bool has_npc_cid() const;
  inline void clear_npc_cid();
  static const int kNpcCidFieldNumber = 3;
  inline ::google::protobuf::uint64 npc_cid() const;
  inline void set_npc_cid(::google::protobuf::uint64 value);

  // optional .proto_ff.Vector3PB npc_pos = 4;
  inline bool has_npc_pos() const;
  inline void clear_npc_pos();
  static const int kNpcPosFieldNumber = 4;
  inline const ::proto_ff::Vector3PB& npc_pos() const;
  inline ::proto_ff::Vector3PB* mutable_npc_pos();
  inline ::proto_ff::Vector3PB* release_npc_pos();
  inline void set_allocated_npc_pos(::proto_ff::Vector3PB* npc_pos);

  // optional uint32 npc_status = 5;
  inline bool has_npc_status() const;
  inline void clear_npc_status();
  static const int kNpcStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 npc_status() const;
  inline void set_npc_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFest_HuiMengXiYou_RoubaoziNotify)
 private:
  inline void set_has_cur_fresh_wave();
  inline void clear_has_cur_fresh_wave();
  inline void set_has_all_fresh_wave();
  inline void clear_has_all_fresh_wave();
  inline void set_has_npc_cid();
  inline void clear_has_npc_cid();
  inline void set_has_npc_pos();
  inline void clear_has_npc_pos();
  inline void set_has_npc_status();
  inline void clear_has_npc_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_fresh_wave_;
  ::google::protobuf::uint32 all_fresh_wave_;
  ::google::protobuf::uint64 npc_cid_;
  ::proto_ff::Vector3PB* npc_pos_;
  ::google::protobuf::uint32 npc_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static NotifyFest_HuiMengXiYou_RoubaoziNotify* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRankInfo : public ::google::protobuf::Message {
 public:
  FMarryRankInfo();
  virtual ~FMarryRankInfo();

  FMarryRankInfo(const FMarryRankInfo& from);

  inline FMarryRankInfo& operator=(const FMarryRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRankInfo& default_instance();

  void Swap(FMarryRankInfo* other);

  // implements Message ----------------------------------------------

  FMarryRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRankInfo& from);
  void MergeFrom(const FMarryRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated .proto_ff.RolePlayerMiniInfo roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::proto_ff::RolePlayerMiniInfo& roles(int index) const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_roles(int index);
  inline ::proto_ff::RolePlayerMiniInfo* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
      mutable_roles();

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo > roles_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class FMarryExpressRankInfo : public ::google::protobuf::Message {
 public:
  FMarryExpressRankInfo();
  virtual ~FMarryExpressRankInfo();

  FMarryExpressRankInfo(const FMarryExpressRankInfo& from);

  inline FMarryExpressRankInfo& operator=(const FMarryExpressRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryExpressRankInfo& default_instance();

  void Swap(FMarryExpressRankInfo* other);

  // implements Message ----------------------------------------------

  FMarryExpressRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryExpressRankInfo& from);
  void MergeFrom(const FMarryExpressRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryExpressRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryExpressRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRankReq : public ::google::protobuf::Message {
 public:
  FMarryRankReq();
  virtual ~FMarryRankReq();

  FMarryRankReq(const FMarryRankReq& from);

  inline FMarryRankReq& operator=(const FMarryRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRankReq& default_instance();

  void Swap(FMarryRankReq* other);

  // implements Message ----------------------------------------------

  FMarryRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRankReq& from);
  void MergeFrom(const FMarryRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRankReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRankReq* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRankRsp : public ::google::protobuf::Message {
 public:
  FMarryRankRsp();
  virtual ~FMarryRankRsp();

  FMarryRankRsp(const FMarryRankRsp& from);

  inline FMarryRankRsp& operator=(const FMarryRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRankRsp& default_instance();

  void Swap(FMarryRankRsp* other);

  // implements Message ----------------------------------------------

  FMarryRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRankRsp& from);
  void MergeFrom(const FMarryRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FMarryRankInfo entrys = 2;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 2;
  inline const ::proto_ff::FMarryRankInfo& entrys(int index) const;
  inline ::proto_ff::FMarryRankInfo* mutable_entrys(int index);
  inline ::proto_ff::FMarryRankInfo* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRankInfo >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRankInfo >*
      mutable_entrys();

  // optional .proto_ff.FMarryRankInfo my = 3;
  inline bool has_my() const;
  inline void clear_my();
  static const int kMyFieldNumber = 3;
  inline const ::proto_ff::FMarryRankInfo& my() const;
  inline ::proto_ff::FMarryRankInfo* mutable_my();
  inline ::proto_ff::FMarryRankInfo* release_my();
  inline void set_allocated_my(::proto_ff::FMarryRankInfo* my);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRankRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_my();
  inline void clear_has_my();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRankInfo > entrys_;
  ::proto_ff::FMarryRankInfo* my_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class FMarryExpressReq : public ::google::protobuf::Message {
 public:
  FMarryExpressReq();
  virtual ~FMarryExpressReq();

  FMarryExpressReq(const FMarryExpressReq& from);

  inline FMarryExpressReq& operator=(const FMarryExpressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryExpressReq& default_instance();

  void Swap(FMarryExpressReq* other);

  // implements Message ----------------------------------------------

  FMarryExpressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryExpressReq& from);
  void MergeFrom(const FMarryExpressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryExpressReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryExpressReq* default_instance_;
};
// -------------------------------------------------------------------

class FMarryExpressRsp : public ::google::protobuf::Message {
 public:
  FMarryExpressRsp();
  virtual ~FMarryExpressRsp();

  FMarryExpressRsp(const FMarryExpressRsp& from);

  inline FMarryExpressRsp& operator=(const FMarryExpressRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryExpressRsp& default_instance();

  void Swap(FMarryExpressRsp* other);

  // implements Message ----------------------------------------------

  FMarryExpressRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryExpressRsp& from);
  void MergeFrom(const FMarryExpressRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FMarryExpressRankInfo sends = 2;
  inline int sends_size() const;
  inline void clear_sends();
  static const int kSendsFieldNumber = 2;
  inline const ::proto_ff::FMarryExpressRankInfo& sends(int index) const;
  inline ::proto_ff::FMarryExpressRankInfo* mutable_sends(int index);
  inline ::proto_ff::FMarryExpressRankInfo* add_sends();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >&
      sends() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >*
      mutable_sends();

  // repeated .proto_ff.FMarryExpressRankInfo recvs = 3;
  inline int recvs_size() const;
  inline void clear_recvs();
  static const int kRecvsFieldNumber = 3;
  inline const ::proto_ff::FMarryExpressRankInfo& recvs(int index) const;
  inline ::proto_ff::FMarryExpressRankInfo* mutable_recvs(int index);
  inline ::proto_ff::FMarryExpressRankInfo* add_recvs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >&
      recvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >*
      mutable_recvs();

  // repeated .proto_ff.ExpressLog logs = 4;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 4;
  inline const ::proto_ff::ExpressLog& logs(int index) const;
  inline ::proto_ff::ExpressLog* mutable_logs(int index);
  inline ::proto_ff::ExpressLog* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ExpressLog >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ExpressLog >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryExpressRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo > sends_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo > recvs_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ExpressLog > logs_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryExpressRsp* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRoleReq : public ::google::protobuf::Message {
 public:
  FMarryRoleReq();
  virtual ~FMarryRoleReq();

  FMarryRoleReq(const FMarryRoleReq& from);

  inline FMarryRoleReq& operator=(const FMarryRoleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRoleReq& default_instance();

  void Swap(FMarryRoleReq* other);

  // implements Message ----------------------------------------------

  FMarryRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRoleReq& from);
  void MergeFrom(const FMarryRoleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRoleReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRoleRsp : public ::google::protobuf::Message {
 public:
  FMarryRoleRsp();
  virtual ~FMarryRoleRsp();

  FMarryRoleRsp(const FMarryRoleRsp& from);

  inline FMarryRoleRsp& operator=(const FMarryRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRoleRsp& default_instance();

  void Swap(FMarryRoleRsp* other);

  // implements Message ----------------------------------------------

  FMarryRoleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRoleRsp& from);
  void MergeFrom(const FMarryRoleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FMarryTask tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::proto_ff::FMarryTask& tasks(int index) const;
  inline ::proto_ff::FMarryTask* mutable_tasks(int index);
  inline ::proto_ff::FMarryTask* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >*
      mutable_tasks();

  // repeated int32 process_ids = 3;
  inline int process_ids_size() const;
  inline void clear_process_ids();
  static const int kProcessIdsFieldNumber = 3;
  inline ::google::protobuf::int32 process_ids(int index) const;
  inline void set_process_ids(int index, ::google::protobuf::int32 value);
  inline void add_process_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      process_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_process_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRoleRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask > tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > process_ids_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRoleRsp* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRoleRecvReq : public ::google::protobuf::Message {
 public:
  FMarryRoleRecvReq();
  virtual ~FMarryRoleRecvReq();

  FMarryRoleRecvReq(const FMarryRoleRecvReq& from);

  inline FMarryRoleRecvReq& operator=(const FMarryRoleRecvReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRoleRecvReq& default_instance();

  void Swap(FMarryRoleRecvReq* other);

  // implements Message ----------------------------------------------

  FMarryRoleRecvReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRoleRecvReq& from);
  void MergeFrom(const FMarryRoleRecvReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRoleRecvReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRoleRecvReq* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRoleRecvRsp : public ::google::protobuf::Message {
 public:
  FMarryRoleRecvRsp();
  virtual ~FMarryRoleRecvRsp();

  FMarryRoleRecvRsp(const FMarryRoleRecvRsp& from);

  inline FMarryRoleRecvRsp& operator=(const FMarryRoleRecvRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRoleRecvRsp& default_instance();

  void Swap(FMarryRoleRecvRsp* other);

  // implements Message ----------------------------------------------

  FMarryRoleRecvRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRoleRecvRsp& from);
  void MergeFrom(const FMarryRoleRecvRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRoleRecvRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRoleRecvRsp* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRecord : public ::google::protobuf::Message {
 public:
  FMarryRecord();
  virtual ~FMarryRecord();

  FMarryRecord(const FMarryRecord& from);

  inline FMarryRecord& operator=(const FMarryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRecord& default_instance();

  void Swap(FMarryRecord* other);

  // implements Message ----------------------------------------------

  FMarryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRecord& from);
  void MergeFrom(const FMarryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 marry_id = 1;
  inline bool has_marry_id() const;
  inline void clear_marry_id();
  static const int kMarryIdFieldNumber = 1;
  inline ::google::protobuf::int32 marry_id() const;
  inline void set_marry_id(::google::protobuf::int32 value);

  // optional int32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRecord)
 private:
  inline void set_has_marry_id();
  inline void clear_has_marry_id();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 marry_id_;
  ::google::protobuf::int32 val_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryRecord* default_instance_;
};
// -------------------------------------------------------------------

class FMarryExpress : public ::google::protobuf::Message {
 public:
  FMarryExpress();
  virtual ~FMarryExpress();

  FMarryExpress(const FMarryExpress& from);

  inline FMarryExpress& operator=(const FMarryExpress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryExpress& default_instance();

  void Swap(FMarryExpress* other);

  // implements Message ----------------------------------------------

  FMarryExpress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryExpress& from);
  void MergeFrom(const FMarryExpress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryExpress)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryExpress* default_instance_;
};
// -------------------------------------------------------------------

class FMarryDBEntry : public ::google::protobuf::Message {
 public:
  FMarryDBEntry();
  virtual ~FMarryDBEntry();

  FMarryDBEntry(const FMarryDBEntry& from);

  inline FMarryDBEntry& operator=(const FMarryDBEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryDBEntry& default_instance();

  void Swap(FMarryDBEntry* other);

  // implements Message ----------------------------------------------

  FMarryDBEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryDBEntry& from);
  void MergeFrom(const FMarryDBEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tmpId = 1;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 1;
  inline ::google::protobuf::int32 tmpid() const;
  inline void set_tmpid(::google::protobuf::int32 value);

  // optional int32 groupId = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // repeated .proto_ff.FMarryRecord records = 3;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 3;
  inline const ::proto_ff::FMarryRecord& records(int index) const;
  inline ::proto_ff::FMarryRecord* mutable_records(int index);
  inline ::proto_ff::FMarryRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRecord >*
      mutable_records();

  // repeated .proto_ff.FMarryExpress sends = 4;
  inline int sends_size() const;
  inline void clear_sends();
  static const int kSendsFieldNumber = 4;
  inline const ::proto_ff::FMarryExpress& sends(int index) const;
  inline ::proto_ff::FMarryExpress* mutable_sends(int index);
  inline ::proto_ff::FMarryExpress* add_sends();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >&
      sends() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >*
      mutable_sends();

  // repeated .proto_ff.FMarryExpress recvs = 5;
  inline int recvs_size() const;
  inline void clear_recvs();
  static const int kRecvsFieldNumber = 5;
  inline const ::proto_ff::FMarryExpress& recvs(int index) const;
  inline ::proto_ff::FMarryExpress* mutable_recvs(int index);
  inline ::proto_ff::FMarryExpress* add_recvs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >&
      recvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >*
      mutable_recvs();

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryDBEntry)
 private:
  inline void set_has_tmpid();
  inline void clear_has_tmpid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tmpid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRecord > records_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress > sends_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress > recvs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryDBEntry* default_instance_;
};
// -------------------------------------------------------------------

class FMarryDB : public ::google::protobuf::Message {
 public:
  FMarryDB();
  virtual ~FMarryDB();

  FMarryDB(const FMarryDB& from);

  inline FMarryDB& operator=(const FMarryDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryDB& default_instance();

  void Swap(FMarryDB* other);

  // implements Message ----------------------------------------------

  FMarryDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryDB& from);
  void MergeFrom(const FMarryDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FMarryDBEntry entrys = 1;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 1;
  inline const ::proto_ff::FMarryDBEntry& entrys(int index) const;
  inline ::proto_ff::FMarryDBEntry* mutable_entrys(int index);
  inline ::proto_ff::FMarryDBEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryDBEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryDBEntry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryDBEntry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FMarryDB* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouGlobalDBInfo : public ::google::protobuf::Message {
 public:
  Fest_XiYouGlobalDBInfo();
  virtual ~Fest_XiYouGlobalDBInfo();

  Fest_XiYouGlobalDBInfo(const Fest_XiYouGlobalDBInfo& from);

  inline Fest_XiYouGlobalDBInfo& operator=(const Fest_XiYouGlobalDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouGlobalDBInfo& default_instance();

  void Swap(Fest_XiYouGlobalDBInfo* other);

  // implements Message ----------------------------------------------

  Fest_XiYouGlobalDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouGlobalDBInfo& from);
  void MergeFrom(const Fest_XiYouGlobalDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouGlobalDBInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouGlobalDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2LFMarrySynScoreReq : public ::google::protobuf::Message {
 public:
  C2LFMarrySynScoreReq();
  virtual ~C2LFMarrySynScoreReq();

  C2LFMarrySynScoreReq(const C2LFMarrySynScoreReq& from);

  inline C2LFMarrySynScoreReq& operator=(const C2LFMarrySynScoreReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LFMarrySynScoreReq& default_instance();

  void Swap(C2LFMarrySynScoreReq* other);

  // implements Message ----------------------------------------------

  C2LFMarrySynScoreReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LFMarrySynScoreReq& from);
  void MergeFrom(const C2LFMarrySynScoreReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tmpId = 1;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 1;
  inline ::google::protobuf::int32 tmpid() const;
  inline void set_tmpid(::google::protobuf::int32 value);

  // optional int32 marry_id = 2;
  inline bool has_marry_id() const;
  inline void clear_marry_id();
  static const int kMarryIdFieldNumber = 2;
  inline ::google::protobuf::int32 marry_id() const;
  inline void set_marry_id(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LFMarrySynScoreReq)
 private:
  inline void set_has_tmpid();
  inline void clear_has_tmpid();
  inline void set_has_marry_id();
  inline void clear_has_marry_id();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tmpid_;
  ::google::protobuf::int32 marry_id_;
  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static C2LFMarrySynScoreReq* default_instance_;
};
// -------------------------------------------------------------------

class L2CFMarrySynScoreRsp : public ::google::protobuf::Message {
 public:
  L2CFMarrySynScoreRsp();
  virtual ~L2CFMarrySynScoreRsp();

  L2CFMarrySynScoreRsp(const L2CFMarrySynScoreRsp& from);

  inline L2CFMarrySynScoreRsp& operator=(const L2CFMarrySynScoreRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2CFMarrySynScoreRsp& default_instance();

  void Swap(L2CFMarrySynScoreRsp* other);

  // implements Message ----------------------------------------------

  L2CFMarrySynScoreRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2CFMarrySynScoreRsp& from);
  void MergeFrom(const L2CFMarrySynScoreRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tmpId = 1;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 1;
  inline ::google::protobuf::int32 tmpid() const;
  inline void set_tmpid(::google::protobuf::int32 value);

  // optional int32 marry_id = 2;
  inline bool has_marry_id() const;
  inline void clear_marry_id();
  static const int kMarryIdFieldNumber = 2;
  inline ::google::protobuf::int32 marry_id() const;
  inline void set_marry_id(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.L2CFMarrySynScoreRsp)
 private:
  inline void set_has_tmpid();
  inline void clear_has_tmpid();
  inline void set_has_marry_id();
  inline void clear_has_marry_id();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tmpid_;
  ::google::protobuf::int32 marry_id_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static L2CFMarrySynScoreRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouGlobalDBEntry : public ::google::protobuf::Message {
 public:
  Fest_XiYouGlobalDBEntry();
  virtual ~Fest_XiYouGlobalDBEntry();

  Fest_XiYouGlobalDBEntry(const Fest_XiYouGlobalDBEntry& from);

  inline Fest_XiYouGlobalDBEntry& operator=(const Fest_XiYouGlobalDBEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouGlobalDBEntry& default_instance();

  void Swap(Fest_XiYouGlobalDBEntry* other);

  // implements Message ----------------------------------------------

  Fest_XiYouGlobalDBEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouGlobalDBEntry& from);
  void MergeFrom(const Fest_XiYouGlobalDBEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tmpId = 1;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 1;
  inline ::google::protobuf::int32 tmpid() const;
  inline void set_tmpid(::google::protobuf::int32 value);

  // repeated .proto_ff.Fest_XiYouGlobalDBInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::Fest_XiYouGlobalDBInfo& info(int index) const;
  inline ::proto_ff::Fest_XiYouGlobalDBInfo* mutable_info(int index);
  inline ::proto_ff::Fest_XiYouGlobalDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBInfo >*
      mutable_info();

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional bool open = 4;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 4;
  inline bool open() const;
  inline void set_open(bool value);

  // optional int32 readyId = 5;
  inline bool has_readyid() const;
  inline void clear_readyid();
  static const int kReadyIdFieldNumber = 5;
  inline ::google::protobuf::int32 readyid() const;
  inline void set_readyid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouGlobalDBEntry)
 private:
  inline void set_has_tmpid();
  inline void clear_has_tmpid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_readyid();
  inline void clear_has_readyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBInfo > info_;
  ::google::protobuf::int32 tmpid_;
  ::google::protobuf::int32 state_;
  bool open_;
  ::google::protobuf::int32 readyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouGlobalDBEntry* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouGlobalDB : public ::google::protobuf::Message {
 public:
  Fest_XiYouGlobalDB();
  virtual ~Fest_XiYouGlobalDB();

  Fest_XiYouGlobalDB(const Fest_XiYouGlobalDB& from);

  inline Fest_XiYouGlobalDB& operator=(const Fest_XiYouGlobalDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouGlobalDB& default_instance();

  void Swap(Fest_XiYouGlobalDB* other);

  // implements Message ----------------------------------------------

  Fest_XiYouGlobalDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouGlobalDB& from);
  void MergeFrom(const Fest_XiYouGlobalDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Fest_XiYouGlobalDBEntry entrys = 1;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 1;
  inline const ::proto_ff::Fest_XiYouGlobalDBEntry& entrys(int index) const;
  inline ::proto_ff::Fest_XiYouGlobalDBEntry* mutable_entrys(int index);
  inline ::proto_ff::Fest_XiYouGlobalDBEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBEntry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouGlobalDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBEntry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouGlobalDB* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouSyncNotify : public ::google::protobuf::Message {
 public:
  Fest_XiYouSyncNotify();
  virtual ~Fest_XiYouSyncNotify();

  Fest_XiYouSyncNotify(const Fest_XiYouSyncNotify& from);

  inline Fest_XiYouSyncNotify& operator=(const Fest_XiYouSyncNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouSyncNotify& default_instance();

  void Swap(Fest_XiYouSyncNotify* other);

  // implements Message ----------------------------------------------

  Fest_XiYouSyncNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouSyncNotify& from);
  void MergeFrom(const Fest_XiYouSyncNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 cur_state_id = 2;
  inline bool has_cur_state_id() const;
  inline void clear_cur_state_id();
  static const int kCurStateIdFieldNumber = 2;
  inline ::google::protobuf::int32 cur_state_id() const;
  inline void set_cur_state_id(::google::protobuf::int32 value);

  // optional int32 cur_state_status = 3;
  inline bool has_cur_state_status() const;
  inline void clear_cur_state_status();
  static const int kCurStateStatusFieldNumber = 3;
  inline ::google::protobuf::int32 cur_state_status() const;
  inline void set_cur_state_status(::google::protobuf::int32 value);

  // optional int32 cur_state_time = 4;
  inline bool has_cur_state_time() const;
  inline void clear_cur_state_time();
  static const int kCurStateTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cur_state_time() const;
  inline void set_cur_state_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouSyncNotify)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_cur_state_id();
  inline void clear_has_cur_state_id();
  inline void set_has_cur_state_status();
  inline void clear_has_cur_state_status();
  inline void set_has_cur_state_time();
  inline void clear_has_cur_state_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 cur_state_id_;
  ::google::protobuf::int32 cur_state_status_;
  ::google::protobuf::int32 cur_state_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouSyncNotify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouSyncLogic : public ::google::protobuf::Message {
 public:
  Fest_XiYouSyncLogic();
  virtual ~Fest_XiYouSyncLogic();

  Fest_XiYouSyncLogic(const Fest_XiYouSyncLogic& from);

  inline Fest_XiYouSyncLogic& operator=(const Fest_XiYouSyncLogic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouSyncLogic& default_instance();

  void Swap(Fest_XiYouSyncLogic* other);

  // implements Message ----------------------------------------------

  Fest_XiYouSyncLogic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouSyncLogic& from);
  void MergeFrom(const Fest_XiYouSyncLogic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cur_state = 1;
  inline bool has_cur_state() const;
  inline void clear_cur_state();
  static const int kCurStateFieldNumber = 1;
  inline ::google::protobuf::int32 cur_state() const;
  inline void set_cur_state(::google::protobuf::int32 value);

  // optional int32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional int32 logic_id = 3;
  inline bool has_logic_id() const;
  inline void clear_logic_id();
  static const int kLogicIdFieldNumber = 3;
  inline ::google::protobuf::int32 logic_id() const;
  inline void set_logic_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouSyncLogic)
 private:
  inline void set_has_cur_state();
  inline void clear_has_cur_state();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_logic_id();
  inline void clear_has_logic_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cur_state_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::int32 logic_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouSyncLogic* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouSyncFinish : public ::google::protobuf::Message {
 public:
  Fest_XiYouSyncFinish();
  virtual ~Fest_XiYouSyncFinish();

  Fest_XiYouSyncFinish(const Fest_XiYouSyncFinish& from);

  inline Fest_XiYouSyncFinish& operator=(const Fest_XiYouSyncFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouSyncFinish& default_instance();

  void Swap(Fest_XiYouSyncFinish* other);

  // implements Message ----------------------------------------------

  Fest_XiYouSyncFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouSyncFinish& from);
  void MergeFrom(const Fest_XiYouSyncFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // optional int32 ready_id = 2;
  inline bool has_ready_id() const;
  inline void clear_ready_id();
  static const int kReadyIdFieldNumber = 2;
  inline ::google::protobuf::int32 ready_id() const;
  inline void set_ready_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouSyncFinish)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_ready_id();
  inline void clear_has_ready_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 ready_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouSyncFinish* default_instance_;
};
// -------------------------------------------------------------------

class Fest_XiYouSyncForceClose : public ::google::protobuf::Message {
 public:
  Fest_XiYouSyncForceClose();
  virtual ~Fest_XiYouSyncForceClose();

  Fest_XiYouSyncForceClose(const Fest_XiYouSyncForceClose& from);

  inline Fest_XiYouSyncForceClose& operator=(const Fest_XiYouSyncForceClose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_XiYouSyncForceClose& default_instance();

  void Swap(Fest_XiYouSyncForceClose* other);

  // implements Message ----------------------------------------------

  Fest_XiYouSyncForceClose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_XiYouSyncForceClose& from);
  void MergeFrom(const Fest_XiYouSyncForceClose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ready_id = 1;
  inline bool has_ready_id() const;
  inline void clear_ready_id();
  static const int kReadyIdFieldNumber = 1;
  inline ::google::protobuf::int32 ready_id() const;
  inline void set_ready_id(::google::protobuf::int32 value);

  // optional int32 cur_state = 2;
  inline bool has_cur_state() const;
  inline void clear_cur_state();
  static const int kCurStateFieldNumber = 2;
  inline ::google::protobuf::int32 cur_state() const;
  inline void set_cur_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_XiYouSyncForceClose)
 private:
  inline void set_has_ready_id();
  inline void clear_has_ready_id();
  inline void set_has_cur_state();
  inline void clear_has_cur_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ready_id_;
  ::google::protobuf::int32 cur_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_XiYouSyncForceClose* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DayTotalRechargeFetchReq : public ::google::protobuf::Message {
 public:
  Fest_DayTotalRechargeFetchReq();
  virtual ~Fest_DayTotalRechargeFetchReq();

  Fest_DayTotalRechargeFetchReq(const Fest_DayTotalRechargeFetchReq& from);

  inline Fest_DayTotalRechargeFetchReq& operator=(const Fest_DayTotalRechargeFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DayTotalRechargeFetchReq& default_instance();

  void Swap(Fest_DayTotalRechargeFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_DayTotalRechargeFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DayTotalRechargeFetchReq& from);
  void MergeFrom(const Fest_DayTotalRechargeFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DayTotalRechargeFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DayTotalRechargeFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DayTotalRechargeFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_DayTotalRechargeFetchRsp();
  virtual ~Fest_DayTotalRechargeFetchRsp();

  Fest_DayTotalRechargeFetchRsp(const Fest_DayTotalRechargeFetchRsp& from);

  inline Fest_DayTotalRechargeFetchRsp& operator=(const Fest_DayTotalRechargeFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DayTotalRechargeFetchRsp& default_instance();

  void Swap(Fest_DayTotalRechargeFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_DayTotalRechargeFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DayTotalRechargeFetchRsp& from);
  void MergeFrom(const Fest_DayTotalRechargeFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DayTotalRechargeFetchRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DayTotalRechargeFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_DayTotalRechargeNotify : public ::google::protobuf::Message {
 public:
  Fest_DayTotalRechargeNotify();
  virtual ~Fest_DayTotalRechargeNotify();

  Fest_DayTotalRechargeNotify(const Fest_DayTotalRechargeNotify& from);

  inline Fest_DayTotalRechargeNotify& operator=(const Fest_DayTotalRechargeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_DayTotalRechargeNotify& default_instance();

  void Swap(Fest_DayTotalRechargeNotify* other);

  // implements Message ----------------------------------------------

  Fest_DayTotalRechargeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_DayTotalRechargeNotify& from);
  void MergeFrom(const Fest_DayTotalRechargeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 recharge = 2;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 recharge() const;
  inline void set_recharge(::google::protobuf::uint32 value);

  // repeated int32 fetch_lst = 3;
  inline int fetch_lst_size() const;
  inline void clear_fetch_lst();
  static const int kFetchLstFieldNumber = 3;
  inline ::google::protobuf::int32 fetch_lst(int index) const;
  inline void set_fetch_lst(int index, ::google::protobuf::int32 value);
  inline void add_fetch_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_DayTotalRechargeNotify)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_recharge();
  inline void clear_has_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 recharge_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_DayTotalRechargeNotify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LoginRewardFetchReq : public ::google::protobuf::Message {
 public:
  Fest_LoginRewardFetchReq();
  virtual ~Fest_LoginRewardFetchReq();

  Fest_LoginRewardFetchReq(const Fest_LoginRewardFetchReq& from);

  inline Fest_LoginRewardFetchReq& operator=(const Fest_LoginRewardFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LoginRewardFetchReq& default_instance();

  void Swap(Fest_LoginRewardFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_LoginRewardFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LoginRewardFetchReq& from);
  void MergeFrom(const Fest_LoginRewardFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LoginRewardFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LoginRewardFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LoginRewardFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_LoginRewardFetchRsp();
  virtual ~Fest_LoginRewardFetchRsp();

  Fest_LoginRewardFetchRsp(const Fest_LoginRewardFetchRsp& from);

  inline Fest_LoginRewardFetchRsp& operator=(const Fest_LoginRewardFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LoginRewardFetchRsp& default_instance();

  void Swap(Fest_LoginRewardFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_LoginRewardFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LoginRewardFetchRsp& from);
  void MergeFrom(const Fest_LoginRewardFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LoginRewardFetchRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LoginRewardFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LoginRewardNotify : public ::google::protobuf::Message {
 public:
  Fest_LoginRewardNotify();
  virtual ~Fest_LoginRewardNotify();

  Fest_LoginRewardNotify(const Fest_LoginRewardNotify& from);

  inline Fest_LoginRewardNotify& operator=(const Fest_LoginRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LoginRewardNotify& default_instance();

  void Swap(Fest_LoginRewardNotify* other);

  // implements Message ----------------------------------------------

  Fest_LoginRewardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LoginRewardNotify& from);
  void MergeFrom(const Fest_LoginRewardNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair fetch = 2;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 2;
  inline const ::proto_ff::ComPair& fetch(int index) const;
  inline ::proto_ff::ComPair* mutable_fetch(int index);
  inline ::proto_ff::ComPair* add_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LoginRewardNotify)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > fetch_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LoginRewardNotify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_TotalRechargeFetchReq : public ::google::protobuf::Message {
 public:
  Fest_TotalRechargeFetchReq();
  virtual ~Fest_TotalRechargeFetchReq();

  Fest_TotalRechargeFetchReq(const Fest_TotalRechargeFetchReq& from);

  inline Fest_TotalRechargeFetchReq& operator=(const Fest_TotalRechargeFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_TotalRechargeFetchReq& default_instance();

  void Swap(Fest_TotalRechargeFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_TotalRechargeFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_TotalRechargeFetchReq& from);
  void MergeFrom(const Fest_TotalRechargeFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_TotalRechargeFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_TotalRechargeFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_TotalRechargeFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_TotalRechargeFetchRsp();
  virtual ~Fest_TotalRechargeFetchRsp();

  Fest_TotalRechargeFetchRsp(const Fest_TotalRechargeFetchRsp& from);

  inline Fest_TotalRechargeFetchRsp& operator=(const Fest_TotalRechargeFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_TotalRechargeFetchRsp& default_instance();

  void Swap(Fest_TotalRechargeFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_TotalRechargeFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_TotalRechargeFetchRsp& from);
  void MergeFrom(const Fest_TotalRechargeFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_TotalRechargeFetchRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_TotalRechargeFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_TotalRechargeNotify : public ::google::protobuf::Message {
 public:
  Fest_TotalRechargeNotify();
  virtual ~Fest_TotalRechargeNotify();

  Fest_TotalRechargeNotify(const Fest_TotalRechargeNotify& from);

  inline Fest_TotalRechargeNotify& operator=(const Fest_TotalRechargeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_TotalRechargeNotify& default_instance();

  void Swap(Fest_TotalRechargeNotify* other);

  // implements Message ----------------------------------------------

  Fest_TotalRechargeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_TotalRechargeNotify& from);
  void MergeFrom(const Fest_TotalRechargeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated int32 fetch_lst = 2;
  inline int fetch_lst_size() const;
  inline void clear_fetch_lst();
  static const int kFetchLstFieldNumber = 2;
  inline ::google::protobuf::int32 fetch_lst(int index) const;
  inline void set_fetch_lst(int index, ::google::protobuf::int32 value);
  inline void add_fetch_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_lst();

  // optional uint32 total_recharge = 3;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 3;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_TotalRechargeNotify)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_lst_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 total_recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_TotalRechargeNotify* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeTotalFetchReq : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeTotalFetchReq();
  virtual ~Fest_ContiRechargeTotalFetchReq();

  Fest_ContiRechargeTotalFetchReq(const Fest_ContiRechargeTotalFetchReq& from);

  inline Fest_ContiRechargeTotalFetchReq& operator=(const Fest_ContiRechargeTotalFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeTotalFetchReq& default_instance();

  void Swap(Fest_ContiRechargeTotalFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeTotalFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeTotalFetchReq& from);
  void MergeFrom(const Fest_ContiRechargeTotalFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 gear = 2;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 2;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // optional int32 total_day = 3;
  inline bool has_total_day() const;
  inline void clear_total_day();
  static const int kTotalDayFieldNumber = 3;
  inline ::google::protobuf::int32 total_day() const;
  inline void set_total_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeTotalFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_total_day();
  inline void clear_has_total_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 gear_;
  ::google::protobuf::int32 total_day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeTotalFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeTotalFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeTotalFetchRsp();
  virtual ~Fest_ContiRechargeTotalFetchRsp();

  Fest_ContiRechargeTotalFetchRsp(const Fest_ContiRechargeTotalFetchRsp& from);

  inline Fest_ContiRechargeTotalFetchRsp& operator=(const Fest_ContiRechargeTotalFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeTotalFetchRsp& default_instance();

  void Swap(Fest_ContiRechargeTotalFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeTotalFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeTotalFetchRsp& from);
  void MergeFrom(const Fest_ContiRechargeTotalFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeTotalFetchRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeTotalFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeDayFetchReq : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeDayFetchReq();
  virtual ~Fest_ContiRechargeDayFetchReq();

  Fest_ContiRechargeDayFetchReq(const Fest_ContiRechargeDayFetchReq& from);

  inline Fest_ContiRechargeDayFetchReq& operator=(const Fest_ContiRechargeDayFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeDayFetchReq& default_instance();

  void Swap(Fest_ContiRechargeDayFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeDayFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeDayFetchReq& from);
  void MergeFrom(const Fest_ContiRechargeDayFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // optional int32 gear = 3;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 3;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeDayFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_gear();
  inline void clear_has_gear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 gear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeDayFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeDayFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeDayFetchRsp();
  virtual ~Fest_ContiRechargeDayFetchRsp();

  Fest_ContiRechargeDayFetchRsp(const Fest_ContiRechargeDayFetchRsp& from);

  inline Fest_ContiRechargeDayFetchRsp& operator=(const Fest_ContiRechargeDayFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeDayFetchRsp& default_instance();

  void Swap(Fest_ContiRechargeDayFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeDayFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeDayFetchRsp& from);
  void MergeFrom(const Fest_ContiRechargeDayFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeDayFetchRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeDayFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeSuppleReq : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeSuppleReq();
  virtual ~Fest_ContiRechargeSuppleReq();

  Fest_ContiRechargeSuppleReq(const Fest_ContiRechargeSuppleReq& from);

  inline Fest_ContiRechargeSuppleReq& operator=(const Fest_ContiRechargeSuppleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeSuppleReq& default_instance();

  void Swap(Fest_ContiRechargeSuppleReq* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeSuppleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeSuppleReq& from);
  void MergeFrom(const Fest_ContiRechargeSuppleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 supplement = 2;
  inline bool has_supplement() const;
  inline void clear_supplement();
  static const int kSupplementFieldNumber = 2;
  inline ::google::protobuf::int32 supplement() const;
  inline void set_supplement(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeSuppleReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_supplement();
  inline void clear_has_supplement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 supplement_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeSuppleReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeSuppleRsp : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeSuppleRsp();
  virtual ~Fest_ContiRechargeSuppleRsp();

  Fest_ContiRechargeSuppleRsp(const Fest_ContiRechargeSuppleRsp& from);

  inline Fest_ContiRechargeSuppleRsp& operator=(const Fest_ContiRechargeSuppleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeSuppleRsp& default_instance();

  void Swap(Fest_ContiRechargeSuppleRsp* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeSuppleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeSuppleRsp& from);
  void MergeFrom(const Fest_ContiRechargeSuppleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeSuppleRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeSuppleRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ContiRechargeUpdateRsp : public ::google::protobuf::Message {
 public:
  Fest_ContiRechargeUpdateRsp();
  virtual ~Fest_ContiRechargeUpdateRsp();

  Fest_ContiRechargeUpdateRsp(const Fest_ContiRechargeUpdateRsp& from);

  inline Fest_ContiRechargeUpdateRsp& operator=(const Fest_ContiRechargeUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ContiRechargeUpdateRsp& default_instance();

  void Swap(Fest_ContiRechargeUpdateRsp* other);

  // implements Message ----------------------------------------------

  Fest_ContiRechargeUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ContiRechargeUpdateRsp& from);
  void MergeFrom(const Fest_ContiRechargeUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 total_recharge = 2;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // optional int32 supplement = 3;
  inline bool has_supplement() const;
  inline void clear_supplement();
  static const int kSupplementFieldNumber = 3;
  inline ::google::protobuf::int32 supplement() const;
  inline void set_supplement(::google::protobuf::int32 value);

  // repeated .proto_ff.FestContiDayRewardProto day = 4;
  inline int day_size() const;
  inline void clear_day();
  static const int kDayFieldNumber = 4;
  inline const ::proto_ff::FestContiDayRewardProto& day(int index) const;
  inline ::proto_ff::FestContiDayRewardProto* mutable_day(int index);
  inline ::proto_ff::FestContiDayRewardProto* add_day();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >&
      day() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >*
      mutable_day();

  // repeated .proto_ff.FestContiTotalRewardProto total = 5;
  inline int total_size() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 5;
  inline const ::proto_ff::FestContiTotalRewardProto& total(int index) const;
  inline ::proto_ff::FestContiTotalRewardProto* mutable_total(int index);
  inline ::proto_ff::FestContiTotalRewardProto* add_total();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >&
      total() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >*
      mutable_total();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ContiRechargeUpdateRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_supplement();
  inline void clear_has_supplement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 total_recharge_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto > day_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto > total_;
  ::google::protobuf::int32 supplement_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ContiRechargeUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LimitSaleBuyReq : public ::google::protobuf::Message {
 public:
  Fest_LimitSaleBuyReq();
  virtual ~Fest_LimitSaleBuyReq();

  Fest_LimitSaleBuyReq(const Fest_LimitSaleBuyReq& from);

  inline Fest_LimitSaleBuyReq& operator=(const Fest_LimitSaleBuyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LimitSaleBuyReq& default_instance();

  void Swap(Fest_LimitSaleBuyReq* other);

  // implements Message ----------------------------------------------

  Fest_LimitSaleBuyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LimitSaleBuyReq& from);
  void MergeFrom(const Fest_LimitSaleBuyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LimitSaleBuyReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LimitSaleBuyReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LimitSaleBuyRsp : public ::google::protobuf::Message {
 public:
  Fest_LimitSaleBuyRsp();
  virtual ~Fest_LimitSaleBuyRsp();

  Fest_LimitSaleBuyRsp(const Fest_LimitSaleBuyRsp& from);

  inline Fest_LimitSaleBuyRsp& operator=(const Fest_LimitSaleBuyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LimitSaleBuyRsp& default_instance();

  void Swap(Fest_LimitSaleBuyRsp* other);

  // implements Message ----------------------------------------------

  Fest_LimitSaleBuyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LimitSaleBuyRsp& from);
  void MergeFrom(const Fest_LimitSaleBuyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LimitSaleBuyRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LimitSaleBuyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LimitSaleFetchReq : public ::google::protobuf::Message {
 public:
  Fest_LimitSaleFetchReq();
  virtual ~Fest_LimitSaleFetchReq();

  Fest_LimitSaleFetchReq(const Fest_LimitSaleFetchReq& from);

  inline Fest_LimitSaleFetchReq& operator=(const Fest_LimitSaleFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LimitSaleFetchReq& default_instance();

  void Swap(Fest_LimitSaleFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_LimitSaleFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LimitSaleFetchReq& from);
  void MergeFrom(const Fest_LimitSaleFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LimitSaleFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LimitSaleFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LimitSaleFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_LimitSaleFetchRsp();
  virtual ~Fest_LimitSaleFetchRsp();

  Fest_LimitSaleFetchRsp(const Fest_LimitSaleFetchRsp& from);

  inline Fest_LimitSaleFetchRsp& operator=(const Fest_LimitSaleFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LimitSaleFetchRsp& default_instance();

  void Swap(Fest_LimitSaleFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_LimitSaleFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LimitSaleFetchRsp& from);
  void MergeFrom(const Fest_LimitSaleFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LimitSaleFetchRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LimitSaleFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_LimitSaleUpdateRsp : public ::google::protobuf::Message {
 public:
  Fest_LimitSaleUpdateRsp();
  virtual ~Fest_LimitSaleUpdateRsp();

  Fest_LimitSaleUpdateRsp(const Fest_LimitSaleUpdateRsp& from);

  inline Fest_LimitSaleUpdateRsp& operator=(const Fest_LimitSaleUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_LimitSaleUpdateRsp& default_instance();

  void Swap(Fest_LimitSaleUpdateRsp* other);

  // implements Message ----------------------------------------------

  Fest_LimitSaleUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_LimitSaleUpdateRsp& from);
  void MergeFrom(const Fest_LimitSaleUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint32 total = 3;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 3;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // repeated int32 fetch_total = 4;
  inline int fetch_total_size() const;
  inline void clear_fetch_total();
  static const int kFetchTotalFieldNumber = 4;
  inline ::google::protobuf::int32 fetch_total(int index) const;
  inline void set_fetch_total(int index, ::google::protobuf::int32 value);
  inline void add_fetch_total(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_total() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_total();

  // repeated .proto_ff.ComPair buy = 5;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 5;
  inline const ::proto_ff::ComPair& buy(int index) const;
  inline ::proto_ff::ComPair* mutable_buy(int index);
  inline ::proto_ff::ComPair* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_LimitSaleUpdateRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_total_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > buy_;
  ::google::protobuf::uint32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_LimitSaleUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_MysteryBuyReq : public ::google::protobuf::Message {
 public:
  Fest_MysteryBuyReq();
  virtual ~Fest_MysteryBuyReq();

  Fest_MysteryBuyReq(const Fest_MysteryBuyReq& from);

  inline Fest_MysteryBuyReq& operator=(const Fest_MysteryBuyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_MysteryBuyReq& default_instance();

  void Swap(Fest_MysteryBuyReq* other);

  // implements Message ----------------------------------------------

  Fest_MysteryBuyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_MysteryBuyReq& from);
  void MergeFrom(const Fest_MysteryBuyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_MysteryBuyReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_MysteryBuyReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_MysteryBuyRsp : public ::google::protobuf::Message {
 public:
  Fest_MysteryBuyRsp();
  virtual ~Fest_MysteryBuyRsp();

  Fest_MysteryBuyRsp(const Fest_MysteryBuyRsp& from);

  inline Fest_MysteryBuyRsp& operator=(const Fest_MysteryBuyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_MysteryBuyRsp& default_instance();

  void Swap(Fest_MysteryBuyRsp* other);

  // implements Message ----------------------------------------------

  Fest_MysteryBuyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_MysteryBuyRsp& from);
  void MergeFrom(const Fest_MysteryBuyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_MysteryBuyRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_MysteryBuyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_MysteryUpdateRsp : public ::google::protobuf::Message {
 public:
  Fest_MysteryUpdateRsp();
  virtual ~Fest_MysteryUpdateRsp();

  Fest_MysteryUpdateRsp(const Fest_MysteryUpdateRsp& from);

  inline Fest_MysteryUpdateRsp& operator=(const Fest_MysteryUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_MysteryUpdateRsp& default_instance();

  void Swap(Fest_MysteryUpdateRsp* other);

  // implements Message ----------------------------------------------

  Fest_MysteryUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_MysteryUpdateRsp& from);
  void MergeFrom(const Fest_MysteryUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 open_id = 2;
  inline bool has_open_id() const;
  inline void clear_open_id();
  static const int kOpenIdFieldNumber = 2;
  inline ::google::protobuf::int32 open_id() const;
  inline void set_open_id(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair buy = 3;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 3;
  inline const ::proto_ff::ComPair& buy(int index) const;
  inline ::proto_ff::ComPair* mutable_buy(int index);
  inline ::proto_ff::ComPair* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_MysteryUpdateRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_open_id();
  inline void clear_has_open_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 open_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_MysteryUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunReq : public ::google::protobuf::Message {
 public:
  Fest_ShootSunReq();
  virtual ~Fest_ShootSunReq();

  Fest_ShootSunReq(const Fest_ShootSunReq& from);

  inline Fest_ShootSunReq& operator=(const Fest_ShootSunReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunReq& default_instance();

  void Swap(Fest_ShootSunReq* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunReq& from);
  void MergeFrom(const Fest_ShootSunReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunRsp : public ::google::protobuf::Message {
 public:
  Fest_ShootSunRsp();
  virtual ~Fest_ShootSunRsp();

  Fest_ShootSunRsp(const Fest_ShootSunRsp& from);

  inline Fest_ShootSunRsp& operator=(const Fest_ShootSunRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunRsp& default_instance();

  void Swap(Fest_ShootSunRsp* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunRsp& from);
  void MergeFrom(const Fest_ShootSunRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunRestReq : public ::google::protobuf::Message {
 public:
  Fest_ShootSunRestReq();
  virtual ~Fest_ShootSunRestReq();

  Fest_ShootSunRestReq(const Fest_ShootSunRestReq& from);

  inline Fest_ShootSunRestReq& operator=(const Fest_ShootSunRestReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunRestReq& default_instance();

  void Swap(Fest_ShootSunRestReq* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunRestReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunRestReq& from);
  void MergeFrom(const Fest_ShootSunRestReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunRestReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunRestReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunRestRsp : public ::google::protobuf::Message {
 public:
  Fest_ShootSunRestRsp();
  virtual ~Fest_ShootSunRestRsp();

  Fest_ShootSunRestRsp(const Fest_ShootSunRestRsp& from);

  inline Fest_ShootSunRestRsp& operator=(const Fest_ShootSunRestRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunRestRsp& default_instance();

  void Swap(Fest_ShootSunRestRsp* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunRestRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunRestRsp& from);
  void MergeFrom(const Fest_ShootSunRestRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 free = 3;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 3;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunRestRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_free();
  inline void clear_has_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunRestRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunLogReq : public ::google::protobuf::Message {
 public:
  Fest_ShootSunLogReq();
  virtual ~Fest_ShootSunLogReq();

  Fest_ShootSunLogReq(const Fest_ShootSunLogReq& from);

  inline Fest_ShootSunLogReq& operator=(const Fest_ShootSunLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunLogReq& default_instance();

  void Swap(Fest_ShootSunLogReq* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunLogReq& from);
  void MergeFrom(const Fest_ShootSunLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunLogReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunLogReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunLogRsp : public ::google::protobuf::Message {
 public:
  Fest_ShootSunLogRsp();
  virtual ~Fest_ShootSunLogRsp();

  Fest_ShootSunLogRsp(const Fest_ShootSunLogRsp& from);

  inline Fest_ShootSunLogRsp& operator=(const Fest_ShootSunLogRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunLogRsp& default_instance();

  void Swap(Fest_ShootSunLogRsp* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunLogRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunLogRsp& from);
  void MergeFrom(const Fest_ShootSunLogRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestShootSunLogProto log = 3;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::proto_ff::FestShootSunLogProto& log(int index) const;
  inline ::proto_ff::FestShootSunLogProto* mutable_log(int index);
  inline ::proto_ff::FestShootSunLogProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunLogProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunLogProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunLogRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunLogProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunLogRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunTaskFetchReq : public ::google::protobuf::Message {
 public:
  Fest_ShootSunTaskFetchReq();
  virtual ~Fest_ShootSunTaskFetchReq();

  Fest_ShootSunTaskFetchReq(const Fest_ShootSunTaskFetchReq& from);

  inline Fest_ShootSunTaskFetchReq& operator=(const Fest_ShootSunTaskFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunTaskFetchReq& default_instance();

  void Swap(Fest_ShootSunTaskFetchReq* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunTaskFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunTaskFetchReq& from);
  void MergeFrom(const Fest_ShootSunTaskFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunTaskFetchReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunTaskFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunTaskFetchRsp : public ::google::protobuf::Message {
 public:
  Fest_ShootSunTaskFetchRsp();
  virtual ~Fest_ShootSunTaskFetchRsp();

  Fest_ShootSunTaskFetchRsp(const Fest_ShootSunTaskFetchRsp& from);

  inline Fest_ShootSunTaskFetchRsp& operator=(const Fest_ShootSunTaskFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunTaskFetchRsp& default_instance();

  void Swap(Fest_ShootSunTaskFetchRsp* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunTaskFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunTaskFetchRsp& from);
  void MergeFrom(const Fest_ShootSunTaskFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunTaskFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunTaskFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Fest_ShootSunTaskUpdateRsp : public ::google::protobuf::Message {
 public:
  Fest_ShootSunTaskUpdateRsp();
  virtual ~Fest_ShootSunTaskUpdateRsp();

  Fest_ShootSunTaskUpdateRsp(const Fest_ShootSunTaskUpdateRsp& from);

  inline Fest_ShootSunTaskUpdateRsp& operator=(const Fest_ShootSunTaskUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fest_ShootSunTaskUpdateRsp& default_instance();

  void Swap(Fest_ShootSunTaskUpdateRsp* other);

  // implements Message ----------------------------------------------

  Fest_ShootSunTaskUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fest_ShootSunTaskUpdateRsp& from);
  void MergeFrom(const Fest_ShootSunTaskUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.FestShootSunTaskProto task = 2;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 2;
  inline const ::proto_ff::FestShootSunTaskProto& task(int index) const;
  inline ::proto_ff::FestShootSunTaskProto* mutable_task(int index);
  inline ::proto_ff::FestShootSunTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:proto_ff.Fest_ShootSunTaskUpdateRsp)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto > task_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static Fest_ShootSunTaskUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeChouJiangReq : public ::google::protobuf::Message {
 public:
  FestRechargePrizeChouJiangReq();
  virtual ~FestRechargePrizeChouJiangReq();

  FestRechargePrizeChouJiangReq(const FestRechargePrizeChouJiangReq& from);

  inline FestRechargePrizeChouJiangReq& operator=(const FestRechargePrizeChouJiangReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeChouJiangReq& default_instance();

  void Swap(FestRechargePrizeChouJiangReq* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeChouJiangReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeChouJiangReq& from);
  void MergeFrom(const FestRechargePrizeChouJiangReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeChouJiangReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeChouJiangReq* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeChouJiangRsp : public ::google::protobuf::Message {
 public:
  FestRechargePrizeChouJiangRsp();
  virtual ~FestRechargePrizeChouJiangRsp();

  FestRechargePrizeChouJiangRsp(const FestRechargePrizeChouJiangRsp& from);

  inline FestRechargePrizeChouJiangRsp& operator=(const FestRechargePrizeChouJiangRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeChouJiangRsp& default_instance();

  void Swap(FestRechargePrizeChouJiangRsp* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeChouJiangRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeChouJiangRsp& from);
  void MergeFrom(const FestRechargePrizeChouJiangRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional .proto_ff.FestRechargePrizeData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto_ff::FestRechargePrizeData& data() const;
  inline ::proto_ff::FestRechargePrizeData* mutable_data();
  inline ::proto_ff::FestRechargePrizeData* release_data();
  inline void set_allocated_data(::proto_ff::FestRechargePrizeData* data);

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeChouJiangRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestRechargePrizeData* data_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeChouJiangRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeChouJiangRecordReq : public ::google::protobuf::Message {
 public:
  FestRechargePrizeChouJiangRecordReq();
  virtual ~FestRechargePrizeChouJiangRecordReq();

  FestRechargePrizeChouJiangRecordReq(const FestRechargePrizeChouJiangRecordReq& from);

  inline FestRechargePrizeChouJiangRecordReq& operator=(const FestRechargePrizeChouJiangRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeChouJiangRecordReq& default_instance();

  void Swap(FestRechargePrizeChouJiangRecordReq* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeChouJiangRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeChouJiangRecordReq& from);
  void MergeFrom(const FestRechargePrizeChouJiangRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeChouJiangRecordReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeChouJiangRecordReq* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeChouJiangRecordRsp : public ::google::protobuf::Message {
 public:
  FestRechargePrizeChouJiangRecordRsp();
  virtual ~FestRechargePrizeChouJiangRecordRsp();

  FestRechargePrizeChouJiangRecordRsp(const FestRechargePrizeChouJiangRecordRsp& from);

  inline FestRechargePrizeChouJiangRecordRsp& operator=(const FestRechargePrizeChouJiangRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeChouJiangRecordRsp& default_instance();

  void Swap(FestRechargePrizeChouJiangRecordRsp* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeChouJiangRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeChouJiangRecordRsp& from);
  void MergeFrom(const FestRechargePrizeChouJiangRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // repeated .proto_ff.FestRechargePrizeRecord record = 2;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::proto_ff::FestRechargePrizeRecord& record(int index) const;
  inline ::proto_ff::FestRechargePrizeRecord* mutable_record(int index);
  inline ::proto_ff::FestRechargePrizeRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeRecord >*
      mutable_record();

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeChouJiangRecordRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeRecord > record_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeChouJiangRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeGetTaskRewardReq : public ::google::protobuf::Message {
 public:
  FestRechargePrizeGetTaskRewardReq();
  virtual ~FestRechargePrizeGetTaskRewardReq();

  FestRechargePrizeGetTaskRewardReq(const FestRechargePrizeGetTaskRewardReq& from);

  inline FestRechargePrizeGetTaskRewardReq& operator=(const FestRechargePrizeGetTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeGetTaskRewardReq& default_instance();

  void Swap(FestRechargePrizeGetTaskRewardReq* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeGetTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeGetTaskRewardReq& from);
  void MergeFrom(const FestRechargePrizeGetTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeGetTaskRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeGetTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeGetTaskRewardRsp : public ::google::protobuf::Message {
 public:
  FestRechargePrizeGetTaskRewardRsp();
  virtual ~FestRechargePrizeGetTaskRewardRsp();

  FestRechargePrizeGetTaskRewardRsp(const FestRechargePrizeGetTaskRewardRsp& from);

  inline FestRechargePrizeGetTaskRewardRsp& operator=(const FestRechargePrizeGetTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeGetTaskRewardRsp& default_instance();

  void Swap(FestRechargePrizeGetTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeGetTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeGetTaskRewardRsp& from);
  void MergeFrom(const FestRechargePrizeGetTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional .proto_ff.FestRechargePrizeTaskData task = 2;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 2;
  inline const ::proto_ff::FestRechargePrizeTaskData& task() const;
  inline ::proto_ff::FestRechargePrizeTaskData* mutable_task();
  inline ::proto_ff::FestRechargePrizeTaskData* release_task();
  inline void set_allocated_task(::proto_ff::FestRechargePrizeTaskData* task);

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeGetTaskRewardRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FestRechargePrizeTaskData* task_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeGetTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeGetFreeRewardReq : public ::google::protobuf::Message {
 public:
  FestRechargePrizeGetFreeRewardReq();
  virtual ~FestRechargePrizeGetFreeRewardReq();

  FestRechargePrizeGetFreeRewardReq(const FestRechargePrizeGetFreeRewardReq& from);

  inline FestRechargePrizeGetFreeRewardReq& operator=(const FestRechargePrizeGetFreeRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeGetFreeRewardReq& default_instance();

  void Swap(FestRechargePrizeGetFreeRewardReq* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeGetFreeRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeGetFreeRewardReq& from);
  void MergeFrom(const FestRechargePrizeGetFreeRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeGetFreeRewardReq)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeGetFreeRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeGetFreeRewardRsp : public ::google::protobuf::Message {
 public:
  FestRechargePrizeGetFreeRewardRsp();
  virtual ~FestRechargePrizeGetFreeRewardRsp();

  FestRechargePrizeGetFreeRewardRsp(const FestRechargePrizeGetFreeRewardRsp& from);

  inline FestRechargePrizeGetFreeRewardRsp& operator=(const FestRechargePrizeGetFreeRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeGetFreeRewardRsp& default_instance();

  void Swap(FestRechargePrizeGetFreeRewardRsp* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeGetFreeRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeGetFreeRewardRsp& from);
  void MergeFrom(const FestRechargePrizeGetFreeRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional uint32 free_status = 2;
  inline bool has_free_status() const;
  inline void clear_free_status();
  static const int kFreeStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 free_status() const;
  inline void set_free_status(::google::protobuf::uint32 value);

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeGetFreeRewardRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_free_status();
  inline void clear_has_free_status();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::uint32 free_status_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeGetFreeRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FestRechargePrizeTaskStatusNotify : public ::google::protobuf::Message {
 public:
  FestRechargePrizeTaskStatusNotify();
  virtual ~FestRechargePrizeTaskStatusNotify();

  FestRechargePrizeTaskStatusNotify(const FestRechargePrizeTaskStatusNotify& from);

  inline FestRechargePrizeTaskStatusNotify& operator=(const FestRechargePrizeTaskStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRechargePrizeTaskStatusNotify& default_instance();

  void Swap(FestRechargePrizeTaskStatusNotify* other);

  // implements Message ----------------------------------------------

  FestRechargePrizeTaskStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRechargePrizeTaskStatusNotify& from);
  void MergeFrom(const FestRechargePrizeTaskStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestRechargePrizeTaskData task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::proto_ff::FestRechargePrizeTaskData& task(int index) const;
  inline ::proto_ff::FestRechargePrizeTaskData* mutable_task(int index);
  inline ::proto_ff::FestRechargePrizeTaskData* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeTaskData >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeTaskData >*
      mutable_task();

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestRechargePrizeTaskStatusNotify)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeTaskData > task_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fest_2eproto();
  friend void protobuf_AssignDesc_Fest_2eproto();
  friend void protobuf_ShutdownFile_Fest_2eproto();

  void InitAsDefaultInstance();
  static FestRechargePrizeTaskStatusNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// FestSimpleProto

// optional int32 template_id = 1;
inline bool FestSimpleProto::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestSimpleProto::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestSimpleProto::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestSimpleProto::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestSimpleProto::template_id() const {
  return template_id_;
}
inline void FestSimpleProto::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 state = 2;
inline bool FestSimpleProto::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestSimpleProto::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestSimpleProto::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestSimpleProto::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FestSimpleProto::state() const {
  return state_;
}
inline void FestSimpleProto::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 period = 3;
inline bool FestSimpleProto::has_period() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestSimpleProto::set_has_period() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestSimpleProto::clear_has_period() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestSimpleProto::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 FestSimpleProto::period() const {
  return period_;
}
inline void FestSimpleProto::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
}

// optional int32 redpoint = 4;
inline bool FestSimpleProto::has_redpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestSimpleProto::set_has_redpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestSimpleProto::clear_has_redpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestSimpleProto::clear_redpoint() {
  redpoint_ = 0;
  clear_has_redpoint();
}
inline ::google::protobuf::int32 FestSimpleProto::redpoint() const {
  return redpoint_;
}
inline void FestSimpleProto::set_redpoint(::google::protobuf::int32 value) {
  set_has_redpoint();
  redpoint_ = value;
}

// optional uint64 endtime = 5;
inline bool FestSimpleProto::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestSimpleProto::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestSimpleProto::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestSimpleProto::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 FestSimpleProto::endtime() const {
  return endtime_;
}
inline void FestSimpleProto::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional uint64 begintime = 6;
inline bool FestSimpleProto::has_begintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FestSimpleProto::set_has_begintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FestSimpleProto::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FestSimpleProto::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 FestSimpleProto::begintime() const {
  return begintime_;
}
inline void FestSimpleProto::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
}

// -------------------------------------------------------------------

// FestSimpleListProto

// repeated .proto_ff.FestSimpleProto info = 1;
inline int FestSimpleListProto::info_size() const {
  return info_.size();
}
inline void FestSimpleListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestSimpleProto& FestSimpleListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestSimpleProto* FestSimpleListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestSimpleProto* FestSimpleListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestSimpleProto >&
FestSimpleListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestSimpleProto >*
FestSimpleListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestRedPointProto

// optional int32 template_id = 1;
inline bool FestRedPointProto::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRedPointProto::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRedPointProto::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRedPointProto::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRedPointProto::template_id() const {
  return template_id_;
}
inline void FestRedPointProto::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 redpoint = 2;
inline bool FestRedPointProto::has_redpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRedPointProto::set_has_redpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRedPointProto::clear_has_redpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRedPointProto::clear_redpoint() {
  redpoint_ = 0;
  clear_has_redpoint();
}
inline ::google::protobuf::int32 FestRedPointProto::redpoint() const {
  return redpoint_;
}
inline void FestRedPointProto::set_redpoint(::google::protobuf::int32 value) {
  set_has_redpoint();
  redpoint_ = value;
}

// -------------------------------------------------------------------

// FestRedPointListProto

// repeated .proto_ff.FestRedPointProto info = 1;
inline int FestRedPointListProto::info_size() const {
  return info_.size();
}
inline void FestRedPointListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestRedPointProto& FestRedPointListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestRedPointProto* FestRedPointListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestRedPointProto* FestRedPointListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRedPointProto >&
FestRedPointListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRedPointProto >*
FestRedPointListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestShopProto

// optional int32 id = 1;
inline bool FestShopProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestShopProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestShopProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestShopProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestShopProto::id() const {
  return id_;
}
inline void FestShopProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool FestShopProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestShopProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestShopProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestShopProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 FestShopProto::num() const {
  return num_;
}
inline void FestShopProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// FestShopDetailProto

// repeated .proto_ff.FestShopProto buy = 1;
inline int FestShopDetailProto::buy_size() const {
  return buy_.size();
}
inline void FestShopDetailProto::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::FestShopProto& FestShopDetailProto::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::FestShopProto* FestShopDetailProto::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::FestShopProto* FestShopDetailProto::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShopProto >&
FestShopDetailProto::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShopProto >*
FestShopDetailProto::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// FestSignDetailProto

// optional int32 is_sign = 1;
inline bool FestSignDetailProto::has_is_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestSignDetailProto::set_has_is_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestSignDetailProto::clear_has_is_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestSignDetailProto::clear_is_sign() {
  is_sign_ = 0;
  clear_has_is_sign();
}
inline ::google::protobuf::int32 FestSignDetailProto::is_sign() const {
  return is_sign_;
}
inline void FestSignDetailProto::set_is_sign(::google::protobuf::int32 value) {
  set_has_is_sign();
  is_sign_ = value;
}

// -------------------------------------------------------------------

// FestDailyTotalRechargeDetailProto

// repeated .proto_ff.FestDailyTotalRechargeOneProto data = 1;
inline int FestDailyTotalRechargeDetailProto::data_size() const {
  return data_.size();
}
inline void FestDailyTotalRechargeDetailProto::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestDailyTotalRechargeOneProto& FestDailyTotalRechargeDetailProto::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestDailyTotalRechargeOneProto* FestDailyTotalRechargeDetailProto::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestDailyTotalRechargeOneProto* FestDailyTotalRechargeDetailProto::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >&
FestDailyTotalRechargeDetailProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >*
FestDailyTotalRechargeDetailProto::mutable_data() {
  return &data_;
}

// optional uint32 total_recharge = 2;
inline bool FestDailyTotalRechargeDetailProto::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDailyTotalRechargeDetailProto::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDailyTotalRechargeDetailProto::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDailyTotalRechargeDetailProto::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 FestDailyTotalRechargeDetailProto::total_recharge() const {
  return total_recharge_;
}
inline void FestDailyTotalRechargeDetailProto::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// -------------------------------------------------------------------

// FestGoldStoreProto

// repeated .proto_ff.ComPair info = 1;
inline int FestGoldStoreProto::info_size() const {
  return info_.size();
}
inline void FestGoldStoreProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair& FestGoldStoreProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair* FestGoldStoreProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair* FestGoldStoreProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestGoldStoreProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestGoldStoreProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestDigEggLogProto

// optional bytes name = 1;
inline bool FestDigEggLogProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDigEggLogProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDigEggLogProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDigEggLogProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FestDigEggLogProto::name() const {
  return *name_;
}
inline void FestDigEggLogProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FestDigEggLogProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FestDigEggLogProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FestDigEggLogProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FestDigEggLogProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FestDigEggLogProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool FestDigEggLogProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDigEggLogProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDigEggLogProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDigEggLogProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDigEggLogProto::id() const {
  return id_;
}
inline void FestDigEggLogProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 cid = 3;
inline bool FestDigEggLogProto::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDigEggLogProto::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDigEggLogProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDigEggLogProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FestDigEggLogProto::cid() const {
  return cid_;
}
inline void FestDigEggLogProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// FestDigEggTaskProto

// optional int32 id = 1;
inline bool FestDigEggTaskProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDigEggTaskProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDigEggTaskProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDigEggTaskProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDigEggTaskProto::id() const {
  return id_;
}
inline void FestDigEggTaskProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cur = 2;
inline bool FestDigEggTaskProto::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDigEggTaskProto::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDigEggTaskProto::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDigEggTaskProto::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 FestDigEggTaskProto::cur() const {
  return cur_;
}
inline void FestDigEggTaskProto::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional int32 fetch = 3;
inline bool FestDigEggTaskProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDigEggTaskProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDigEggTaskProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDigEggTaskProto::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 FestDigEggTaskProto::fetch() const {
  return fetch_;
}
inline void FestDigEggTaskProto::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// FestDigEggProto

// repeated .proto_ff.ComPair info = 1;
inline int FestDigEggProto::info_size() const {
  return info_.size();
}
inline void FestDigEggProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair& FestDigEggProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair* FestDigEggProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair* FestDigEggProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestDigEggProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestDigEggProto::mutable_info() {
  return &info_;
}

// optional int32 free = 2;
inline bool FestDigEggProto::has_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDigEggProto::set_has_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDigEggProto::clear_has_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDigEggProto::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 FestDigEggProto::free() const {
  return free_;
}
inline void FestDigEggProto::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// repeated .proto_ff.FestDigEggTaskProto task = 3;
inline int FestDigEggProto::task_size() const {
  return task_.size();
}
inline void FestDigEggProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestDigEggTaskProto& FestDigEggProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestDigEggTaskProto* FestDigEggProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestDigEggTaskProto* FestDigEggProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >&
FestDigEggProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >*
FestDigEggProto::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// FestCandleProto

// repeated int32 id_lst = 1;
inline int FestCandleProto::id_lst_size() const {
  return id_lst_.size();
}
inline void FestCandleProto::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::int32 FestCandleProto::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void FestCandleProto::set_id_lst(int index, ::google::protobuf::int32 value) {
  id_lst_.Set(index, value);
}
inline void FestCandleProto::add_id_lst(::google::protobuf::int32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestCandleProto::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestCandleProto::mutable_id_lst() {
  return &id_lst_;
}

// -------------------------------------------------------------------

// FestCandRankProto

// optional uint64 cid = 1;
inline bool FestCandRankProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCandRankProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCandRankProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCandRankProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FestCandRankProto::cid() const {
  return cid_;
}
inline void FestCandRankProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FestCandRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCandRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCandRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCandRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FestCandRankProto::name() const {
  return *name_;
}
inline void FestCandRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FestCandRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FestCandRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FestCandRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FestCandRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FestCandRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 harm = 3;
inline bool FestCandRankProto::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestCandRankProto::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestCandRankProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestCandRankProto::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 FestCandRankProto::harm() const {
  return harm_;
}
inline void FestCandRankProto::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint32 zid = 4;
inline bool FestCandRankProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestCandRankProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestCandRankProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestCandRankProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FestCandRankProto::zid() const {
  return zid_;
}
inline void FestCandRankProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 rank = 5;
inline bool FestCandRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestCandRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestCandRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestCandRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FestCandRankProto::rank() const {
  return rank_;
}
inline void FestCandRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// FestRTurnableRechargeProto

// repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
inline int FestRTurnableRechargeProto::info_size() const {
  return info_.size();
}
inline void FestRTurnableRechargeProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestRTurnableRechargeOneProto& FestRTurnableRechargeProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestRTurnableRechargeOneProto* FestRTurnableRechargeProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestRTurnableRechargeOneProto* FestRTurnableRechargeProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >&
FestRTurnableRechargeProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >*
FestRTurnableRechargeProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestTurnableProto

// repeated .proto_ff.FestTurnableTaskProto task = 1;
inline int FestTurnableProto::task_size() const {
  return task_.size();
}
inline void FestTurnableProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestTurnableTaskProto& FestTurnableProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestTurnableTaskProto* FestTurnableProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestTurnableTaskProto* FestTurnableProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >&
FestTurnableProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >*
FestTurnableProto::mutable_task() {
  return &task_;
}

// optional uint32 left_num = 2;
inline bool FestTurnableProto::has_left_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestTurnableProto::set_has_left_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestTurnableProto::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestTurnableProto::clear_left_num() {
  left_num_ = 0u;
  clear_has_left_num();
}
inline ::google::protobuf::uint32 FestTurnableProto::left_num() const {
  return left_num_;
}
inline void FestTurnableProto::set_left_num(::google::protobuf::uint32 value) {
  set_has_left_num();
  left_num_ = value;
}

// repeated int32 chou_jiang_ids = 5;
inline int FestTurnableProto::chou_jiang_ids_size() const {
  return chou_jiang_ids_.size();
}
inline void FestTurnableProto::clear_chou_jiang_ids() {
  chou_jiang_ids_.Clear();
}
inline ::google::protobuf::int32 FestTurnableProto::chou_jiang_ids(int index) const {
  return chou_jiang_ids_.Get(index);
}
inline void FestTurnableProto::set_chou_jiang_ids(int index, ::google::protobuf::int32 value) {
  chou_jiang_ids_.Set(index, value);
}
inline void FestTurnableProto::add_chou_jiang_ids(::google::protobuf::int32 value) {
  chou_jiang_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestTurnableProto::chou_jiang_ids() const {
  return chou_jiang_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestTurnableProto::mutable_chou_jiang_ids() {
  return &chou_jiang_ids_;
}

// -------------------------------------------------------------------

// FestDonateProto

// repeated .proto_ff.FestDonateSingleProto single = 1;
inline int FestDonateProto::single_size() const {
  return single_.size();
}
inline void FestDonateProto::clear_single() {
  single_.Clear();
}
inline const ::proto_ff::FestDonateSingleProto& FestDonateProto::single(int index) const {
  return single_.Get(index);
}
inline ::proto_ff::FestDonateSingleProto* FestDonateProto::mutable_single(int index) {
  return single_.Mutable(index);
}
inline ::proto_ff::FestDonateSingleProto* FestDonateProto::add_single() {
  return single_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >&
FestDonateProto::single() const {
  return single_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >*
FestDonateProto::mutable_single() {
  return &single_;
}

// repeated .proto_ff.FestDonateServerProto server = 2;
inline int FestDonateProto::server_size() const {
  return server_.size();
}
inline void FestDonateProto::clear_server() {
  server_.Clear();
}
inline const ::proto_ff::FestDonateServerProto& FestDonateProto::server(int index) const {
  return server_.Get(index);
}
inline ::proto_ff::FestDonateServerProto* FestDonateProto::mutable_server(int index) {
  return server_.Mutable(index);
}
inline ::proto_ff::FestDonateServerProto* FestDonateProto::add_server() {
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >&
FestDonateProto::server() const {
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >*
FestDonateProto::mutable_server() {
  return &server_;
}

// optional uint32 single_num = 3;
inline bool FestDonateProto::has_single_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateProto::set_has_single_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateProto::clear_has_single_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateProto::clear_single_num() {
  single_num_ = 0u;
  clear_has_single_num();
}
inline ::google::protobuf::uint32 FestDonateProto::single_num() const {
  return single_num_;
}
inline void FestDonateProto::set_single_num(::google::protobuf::uint32 value) {
  set_has_single_num();
  single_num_ = value;
}

// repeated .proto_ff.FestDonateTaskProto task = 4;
inline int FestDonateProto::task_size() const {
  return task_.size();
}
inline void FestDonateProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestDonateTaskProto& FestDonateProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestDonateTaskProto* FestDonateProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestDonateTaskProto* FestDonateProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >&
FestDonateProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >*
FestDonateProto::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// FestOnlineProto

// repeated .proto_ff.FestOnlineOneProto data = 1;
inline int FestOnlineProto::data_size() const {
  return data_.size();
}
inline void FestOnlineProto::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestOnlineOneProto& FestOnlineProto::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestOnlineOneProto* FestOnlineProto::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestOnlineOneProto* FestOnlineProto::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >&
FestOnlineProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >*
FestOnlineProto::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FestCollectWordProto

// repeated .proto_ff.FestCollectWordOneProto data = 1;
inline int FestCollectWordProto::data_size() const {
  return data_.size();
}
inline void FestCollectWordProto::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestCollectWordOneProto& FestCollectWordProto::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestCollectWordOneProto* FestCollectWordProto::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestCollectWordOneProto* FestCollectWordProto::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >&
FestCollectWordProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >*
FestCollectWordProto::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FestBossDetailProto

// repeated int32 recv_kill_ids = 1;
inline int FestBossDetailProto::recv_kill_ids_size() const {
  return recv_kill_ids_.size();
}
inline void FestBossDetailProto::clear_recv_kill_ids() {
  recv_kill_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossDetailProto::recv_kill_ids(int index) const {
  return recv_kill_ids_.Get(index);
}
inline void FestBossDetailProto::set_recv_kill_ids(int index, ::google::protobuf::int32 value) {
  recv_kill_ids_.Set(index, value);
}
inline void FestBossDetailProto::add_recv_kill_ids(::google::protobuf::int32 value) {
  recv_kill_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossDetailProto::recv_kill_ids() const {
  return recv_kill_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossDetailProto::mutable_recv_kill_ids() {
  return &recv_kill_ids_;
}

// repeated int32 recv_red_ids = 2;
inline int FestBossDetailProto::recv_red_ids_size() const {
  return recv_red_ids_.size();
}
inline void FestBossDetailProto::clear_recv_red_ids() {
  recv_red_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossDetailProto::recv_red_ids(int index) const {
  return recv_red_ids_.Get(index);
}
inline void FestBossDetailProto::set_recv_red_ids(int index, ::google::protobuf::int32 value) {
  recv_red_ids_.Set(index, value);
}
inline void FestBossDetailProto::add_recv_red_ids(::google::protobuf::int32 value) {
  recv_red_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossDetailProto::recv_red_ids() const {
  return recv_red_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossDetailProto::mutable_recv_red_ids() {
  return &recv_red_ids_;
}

// repeated int32 my_kills_ids = 3;
inline int FestBossDetailProto::my_kills_ids_size() const {
  return my_kills_ids_.size();
}
inline void FestBossDetailProto::clear_my_kills_ids() {
  my_kills_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossDetailProto::my_kills_ids(int index) const {
  return my_kills_ids_.Get(index);
}
inline void FestBossDetailProto::set_my_kills_ids(int index, ::google::protobuf::int32 value) {
  my_kills_ids_.Set(index, value);
}
inline void FestBossDetailProto::add_my_kills_ids(::google::protobuf::int32 value) {
  my_kills_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossDetailProto::my_kills_ids() const {
  return my_kills_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossDetailProto::mutable_my_kills_ids() {
  return &my_kills_ids_;
}

// repeated int32 kill_ids = 4;
inline int FestBossDetailProto::kill_ids_size() const {
  return kill_ids_.size();
}
inline void FestBossDetailProto::clear_kill_ids() {
  kill_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossDetailProto::kill_ids(int index) const {
  return kill_ids_.Get(index);
}
inline void FestBossDetailProto::set_kill_ids(int index, ::google::protobuf::int32 value) {
  kill_ids_.Set(index, value);
}
inline void FestBossDetailProto::add_kill_ids(::google::protobuf::int32 value) {
  kill_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossDetailProto::kill_ids() const {
  return kill_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossDetailProto::mutable_kill_ids() {
  return &kill_ids_;
}

// -------------------------------------------------------------------

// FestMarryDetail

// repeated .proto_ff.FMarryTask tasks = 1;
inline int FestMarryDetail::tasks_size() const {
  return tasks_.size();
}
inline void FestMarryDetail::clear_tasks() {
  tasks_.Clear();
}
inline const ::proto_ff::FMarryTask& FestMarryDetail::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::proto_ff::FMarryTask* FestMarryDetail::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::proto_ff::FMarryTask* FestMarryDetail::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >&
FestMarryDetail::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >*
FestMarryDetail::mutable_tasks() {
  return &tasks_;
}

// repeated int32 process_ids = 2;
inline int FestMarryDetail::process_ids_size() const {
  return process_ids_.size();
}
inline void FestMarryDetail::clear_process_ids() {
  process_ids_.Clear();
}
inline ::google::protobuf::int32 FestMarryDetail::process_ids(int index) const {
  return process_ids_.Get(index);
}
inline void FestMarryDetail::set_process_ids(int index, ::google::protobuf::int32 value) {
  process_ids_.Set(index, value);
}
inline void FestMarryDetail::add_process_ids(::google::protobuf::int32 value) {
  process_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestMarryDetail::process_ids() const {
  return process_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestMarryDetail::mutable_process_ids() {
  return &process_ids_;
}

// optional int32 score = 3;
inline bool FestMarryDetail::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestMarryDetail::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestMarryDetail::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestMarryDetail::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FestMarryDetail::score() const {
  return score_;
}
inline void FestMarryDetail::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// FestDayTotalRechargeProto

// repeated int32 fetch_lst = 1;
inline int FestDayTotalRechargeProto::fetch_lst_size() const {
  return fetch_lst_.size();
}
inline void FestDayTotalRechargeProto::clear_fetch_lst() {
  fetch_lst_.Clear();
}
inline ::google::protobuf::int32 FestDayTotalRechargeProto::fetch_lst(int index) const {
  return fetch_lst_.Get(index);
}
inline void FestDayTotalRechargeProto::set_fetch_lst(int index, ::google::protobuf::int32 value) {
  fetch_lst_.Set(index, value);
}
inline void FestDayTotalRechargeProto::add_fetch_lst(::google::protobuf::int32 value) {
  fetch_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestDayTotalRechargeProto::fetch_lst() const {
  return fetch_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestDayTotalRechargeProto::mutable_fetch_lst() {
  return &fetch_lst_;
}

// optional uint32 recharge = 2;
inline bool FestDayTotalRechargeProto::has_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDayTotalRechargeProto::set_has_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDayTotalRechargeProto::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDayTotalRechargeProto::clear_recharge() {
  recharge_ = 0u;
  clear_has_recharge();
}
inline ::google::protobuf::uint32 FestDayTotalRechargeProto::recharge() const {
  return recharge_;
}
inline void FestDayTotalRechargeProto::set_recharge(::google::protobuf::uint32 value) {
  set_has_recharge();
  recharge_ = value;
}

// -------------------------------------------------------------------

// FestLoginProto

// repeated .proto_ff.ComPair fetch = 1;
inline int FestLoginProto::fetch_size() const {
  return fetch_.size();
}
inline void FestLoginProto::clear_fetch() {
  fetch_.Clear();
}
inline const ::proto_ff::ComPair& FestLoginProto::fetch(int index) const {
  return fetch_.Get(index);
}
inline ::proto_ff::ComPair* FestLoginProto::mutable_fetch(int index) {
  return fetch_.Mutable(index);
}
inline ::proto_ff::ComPair* FestLoginProto::add_fetch() {
  return fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestLoginProto::fetch() const {
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestLoginProto::mutable_fetch() {
  return &fetch_;
}

// -------------------------------------------------------------------

// FestTotalRechargeProto

// repeated int32 fetch_lst = 1;
inline int FestTotalRechargeProto::fetch_lst_size() const {
  return fetch_lst_.size();
}
inline void FestTotalRechargeProto::clear_fetch_lst() {
  fetch_lst_.Clear();
}
inline ::google::protobuf::int32 FestTotalRechargeProto::fetch_lst(int index) const {
  return fetch_lst_.Get(index);
}
inline void FestTotalRechargeProto::set_fetch_lst(int index, ::google::protobuf::int32 value) {
  fetch_lst_.Set(index, value);
}
inline void FestTotalRechargeProto::add_fetch_lst(::google::protobuf::int32 value) {
  fetch_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestTotalRechargeProto::fetch_lst() const {
  return fetch_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestTotalRechargeProto::mutable_fetch_lst() {
  return &fetch_lst_;
}

// optional uint32 total_recharge = 2;
inline bool FestTotalRechargeProto::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestTotalRechargeProto::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestTotalRechargeProto::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestTotalRechargeProto::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 FestTotalRechargeProto::total_recharge() const {
  return total_recharge_;
}
inline void FestTotalRechargeProto::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// -------------------------------------------------------------------

// FestContiTotalRewardProto

// optional int32 gear = 1;
inline bool FestContiTotalRewardProto::has_gear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestContiTotalRewardProto::set_has_gear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestContiTotalRewardProto::clear_has_gear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestContiTotalRewardProto::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 FestContiTotalRewardProto::gear() const {
  return gear_;
}
inline void FestContiTotalRewardProto::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// repeated int32 fetch_day = 2;
inline int FestContiTotalRewardProto::fetch_day_size() const {
  return fetch_day_.size();
}
inline void FestContiTotalRewardProto::clear_fetch_day() {
  fetch_day_.Clear();
}
inline ::google::protobuf::int32 FestContiTotalRewardProto::fetch_day(int index) const {
  return fetch_day_.Get(index);
}
inline void FestContiTotalRewardProto::set_fetch_day(int index, ::google::protobuf::int32 value) {
  fetch_day_.Set(index, value);
}
inline void FestContiTotalRewardProto::add_fetch_day(::google::protobuf::int32 value) {
  fetch_day_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestContiTotalRewardProto::fetch_day() const {
  return fetch_day_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestContiTotalRewardProto::mutable_fetch_day() {
  return &fetch_day_;
}

// -------------------------------------------------------------------

// FestContiDayRewardProto

// optional int32 day = 1;
inline bool FestContiDayRewardProto::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestContiDayRewardProto::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestContiDayRewardProto::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestContiDayRewardProto::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 FestContiDayRewardProto::day() const {
  return day_;
}
inline void FestContiDayRewardProto::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// repeated int32 fetch_gear = 2;
inline int FestContiDayRewardProto::fetch_gear_size() const {
  return fetch_gear_.size();
}
inline void FestContiDayRewardProto::clear_fetch_gear() {
  fetch_gear_.Clear();
}
inline ::google::protobuf::int32 FestContiDayRewardProto::fetch_gear(int index) const {
  return fetch_gear_.Get(index);
}
inline void FestContiDayRewardProto::set_fetch_gear(int index, ::google::protobuf::int32 value) {
  fetch_gear_.Set(index, value);
}
inline void FestContiDayRewardProto::add_fetch_gear(::google::protobuf::int32 value) {
  fetch_gear_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestContiDayRewardProto::fetch_gear() const {
  return fetch_gear_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestContiDayRewardProto::mutable_fetch_gear() {
  return &fetch_gear_;
}

// -------------------------------------------------------------------

// FestContiRechargeProto

// optional uint32 total_recharge = 1;
inline bool FestContiRechargeProto::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestContiRechargeProto::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestContiRechargeProto::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestContiRechargeProto::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 FestContiRechargeProto::total_recharge() const {
  return total_recharge_;
}
inline void FestContiRechargeProto::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// optional int32 supplement = 2;
inline bool FestContiRechargeProto::has_supplement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestContiRechargeProto::set_has_supplement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestContiRechargeProto::clear_has_supplement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestContiRechargeProto::clear_supplement() {
  supplement_ = 0;
  clear_has_supplement();
}
inline ::google::protobuf::int32 FestContiRechargeProto::supplement() const {
  return supplement_;
}
inline void FestContiRechargeProto::set_supplement(::google::protobuf::int32 value) {
  set_has_supplement();
  supplement_ = value;
}

// repeated .proto_ff.FestContiDayRewardProto day = 3;
inline int FestContiRechargeProto::day_size() const {
  return day_.size();
}
inline void FestContiRechargeProto::clear_day() {
  day_.Clear();
}
inline const ::proto_ff::FestContiDayRewardProto& FestContiRechargeProto::day(int index) const {
  return day_.Get(index);
}
inline ::proto_ff::FestContiDayRewardProto* FestContiRechargeProto::mutable_day(int index) {
  return day_.Mutable(index);
}
inline ::proto_ff::FestContiDayRewardProto* FestContiRechargeProto::add_day() {
  return day_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >&
FestContiRechargeProto::day() const {
  return day_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >*
FestContiRechargeProto::mutable_day() {
  return &day_;
}

// repeated .proto_ff.FestContiTotalRewardProto total = 4;
inline int FestContiRechargeProto::total_size() const {
  return total_.size();
}
inline void FestContiRechargeProto::clear_total() {
  total_.Clear();
}
inline const ::proto_ff::FestContiTotalRewardProto& FestContiRechargeProto::total(int index) const {
  return total_.Get(index);
}
inline ::proto_ff::FestContiTotalRewardProto* FestContiRechargeProto::mutable_total(int index) {
  return total_.Mutable(index);
}
inline ::proto_ff::FestContiTotalRewardProto* FestContiRechargeProto::add_total() {
  return total_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >&
FestContiRechargeProto::total() const {
  return total_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >*
FestContiRechargeProto::mutable_total() {
  return &total_;
}

// -------------------------------------------------------------------

// FestLimitShopProto

// optional int32 type = 1;
inline bool FestLimitShopProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestLimitShopProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestLimitShopProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestLimitShopProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FestLimitShopProto::type() const {
  return type_;
}
inline void FestLimitShopProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 total = 2;
inline bool FestLimitShopProto::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestLimitShopProto::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestLimitShopProto::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestLimitShopProto::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 FestLimitShopProto::total() const {
  return total_;
}
inline void FestLimitShopProto::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// repeated int32 fetch_total = 3;
inline int FestLimitShopProto::fetch_total_size() const {
  return fetch_total_.size();
}
inline void FestLimitShopProto::clear_fetch_total() {
  fetch_total_.Clear();
}
inline ::google::protobuf::int32 FestLimitShopProto::fetch_total(int index) const {
  return fetch_total_.Get(index);
}
inline void FestLimitShopProto::set_fetch_total(int index, ::google::protobuf::int32 value) {
  fetch_total_.Set(index, value);
}
inline void FestLimitShopProto::add_fetch_total(::google::protobuf::int32 value) {
  fetch_total_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestLimitShopProto::fetch_total() const {
  return fetch_total_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestLimitShopProto::mutable_fetch_total() {
  return &fetch_total_;
}

// repeated .proto_ff.ComPair buy = 4;
inline int FestLimitShopProto::buy_size() const {
  return buy_.size();
}
inline void FestLimitShopProto::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::ComPair& FestLimitShopProto::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::ComPair* FestLimitShopProto::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::ComPair* FestLimitShopProto::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestLimitShopProto::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestLimitShopProto::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// FestLimitSaleProto

// repeated .proto_ff.FestLimitShopProto sale = 1;
inline int FestLimitSaleProto::sale_size() const {
  return sale_.size();
}
inline void FestLimitSaleProto::clear_sale() {
  sale_.Clear();
}
inline const ::proto_ff::FestLimitShopProto& FestLimitSaleProto::sale(int index) const {
  return sale_.Get(index);
}
inline ::proto_ff::FestLimitShopProto* FestLimitSaleProto::mutable_sale(int index) {
  return sale_.Mutable(index);
}
inline ::proto_ff::FestLimitShopProto* FestLimitSaleProto::add_sale() {
  return sale_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestLimitShopProto >&
FestLimitSaleProto::sale() const {
  return sale_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestLimitShopProto >*
FestLimitSaleProto::mutable_sale() {
  return &sale_;
}

// -------------------------------------------------------------------

// FestMysteryProto

// optional int32 open_id = 1;
inline bool FestMysteryProto::has_open_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestMysteryProto::set_has_open_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestMysteryProto::clear_has_open_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestMysteryProto::clear_open_id() {
  open_id_ = 0;
  clear_has_open_id();
}
inline ::google::protobuf::int32 FestMysteryProto::open_id() const {
  return open_id_;
}
inline void FestMysteryProto::set_open_id(::google::protobuf::int32 value) {
  set_has_open_id();
  open_id_ = value;
}

// repeated .proto_ff.ComPair buy = 2;
inline int FestMysteryProto::buy_size() const {
  return buy_.size();
}
inline void FestMysteryProto::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::ComPair& FestMysteryProto::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::ComPair* FestMysteryProto::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::ComPair* FestMysteryProto::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestMysteryProto::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestMysteryProto::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// FestShootSunLogProto

// optional bytes name = 1;
inline bool FestShootSunLogProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestShootSunLogProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestShootSunLogProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestShootSunLogProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FestShootSunLogProto::name() const {
  return *name_;
}
inline void FestShootSunLogProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FestShootSunLogProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FestShootSunLogProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FestShootSunLogProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FestShootSunLogProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FestShootSunLogProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool FestShootSunLogProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestShootSunLogProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestShootSunLogProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestShootSunLogProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestShootSunLogProto::id() const {
  return id_;
}
inline void FestShootSunLogProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 cid = 3;
inline bool FestShootSunLogProto::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestShootSunLogProto::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestShootSunLogProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestShootSunLogProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FestShootSunLogProto::cid() const {
  return cid_;
}
inline void FestShootSunLogProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// FestShootSunTaskProto

// optional int32 id = 1;
inline bool FestShootSunTaskProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestShootSunTaskProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestShootSunTaskProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestShootSunTaskProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestShootSunTaskProto::id() const {
  return id_;
}
inline void FestShootSunTaskProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cur = 2;
inline bool FestShootSunTaskProto::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestShootSunTaskProto::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestShootSunTaskProto::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestShootSunTaskProto::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 FestShootSunTaskProto::cur() const {
  return cur_;
}
inline void FestShootSunTaskProto::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional int32 fetch = 3;
inline bool FestShootSunTaskProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestShootSunTaskProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestShootSunTaskProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestShootSunTaskProto::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 FestShootSunTaskProto::fetch() const {
  return fetch_;
}
inline void FestShootSunTaskProto::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// FestShootSunProto

// repeated .proto_ff.ComPair info = 1;
inline int FestShootSunProto::info_size() const {
  return info_.size();
}
inline void FestShootSunProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair& FestShootSunProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair* FestShootSunProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair* FestShootSunProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestShootSunProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestShootSunProto::mutable_info() {
  return &info_;
}

// optional int32 free = 2;
inline bool FestShootSunProto::has_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestShootSunProto::set_has_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestShootSunProto::clear_has_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestShootSunProto::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 FestShootSunProto::free() const {
  return free_;
}
inline void FestShootSunProto::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// repeated .proto_ff.FestShootSunTaskProto task = 3;
inline int FestShootSunProto::task_size() const {
  return task_.size();
}
inline void FestShootSunProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestShootSunTaskProto& FestShootSunProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestShootSunTaskProto* FestShootSunProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestShootSunTaskProto* FestShootSunProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >&
FestShootSunProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >*
FestShootSunProto::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// FestDetailProto

// optional int32 template_id = 1;
inline bool FestDetailProto::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDetailProto::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDetailProto::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDetailProto::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDetailProto::template_id() const {
  return template_id_;
}
inline void FestDetailProto::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestShopDetailProto shop = 2;
inline bool FestDetailProto::has_shop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDetailProto::set_has_shop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDetailProto::clear_has_shop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDetailProto::clear_shop() {
  if (shop_ != NULL) shop_->::proto_ff::FestShopDetailProto::Clear();
  clear_has_shop();
}
inline const ::proto_ff::FestShopDetailProto& FestDetailProto::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::proto_ff::FestShopDetailProto* FestDetailProto::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::proto_ff::FestShopDetailProto;
  return shop_;
}
inline ::proto_ff::FestShopDetailProto* FestDetailProto::release_shop() {
  clear_has_shop();
  ::proto_ff::FestShopDetailProto* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_shop(::proto_ff::FestShopDetailProto* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
}

// optional .proto_ff.FestDailyTotalRechargeDetailProto daily_total_recharge = 3;
inline bool FestDetailProto::has_daily_total_recharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDetailProto::set_has_daily_total_recharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDetailProto::clear_has_daily_total_recharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDetailProto::clear_daily_total_recharge() {
  if (daily_total_recharge_ != NULL) daily_total_recharge_->::proto_ff::FestDailyTotalRechargeDetailProto::Clear();
  clear_has_daily_total_recharge();
}
inline const ::proto_ff::FestDailyTotalRechargeDetailProto& FestDetailProto::daily_total_recharge() const {
  return daily_total_recharge_ != NULL ? *daily_total_recharge_ : *default_instance_->daily_total_recharge_;
}
inline ::proto_ff::FestDailyTotalRechargeDetailProto* FestDetailProto::mutable_daily_total_recharge() {
  set_has_daily_total_recharge();
  if (daily_total_recharge_ == NULL) daily_total_recharge_ = new ::proto_ff::FestDailyTotalRechargeDetailProto;
  return daily_total_recharge_;
}
inline ::proto_ff::FestDailyTotalRechargeDetailProto* FestDetailProto::release_daily_total_recharge() {
  clear_has_daily_total_recharge();
  ::proto_ff::FestDailyTotalRechargeDetailProto* temp = daily_total_recharge_;
  daily_total_recharge_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_daily_total_recharge(::proto_ff::FestDailyTotalRechargeDetailProto* daily_total_recharge) {
  delete daily_total_recharge_;
  daily_total_recharge_ = daily_total_recharge;
  if (daily_total_recharge) {
    set_has_daily_total_recharge();
  } else {
    clear_has_daily_total_recharge();
  }
}

// optional .proto_ff.FestSignDetailProto sign = 4;
inline bool FestDetailProto::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestDetailProto::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestDetailProto::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestDetailProto::clear_sign() {
  if (sign_ != NULL) sign_->::proto_ff::FestSignDetailProto::Clear();
  clear_has_sign();
}
inline const ::proto_ff::FestSignDetailProto& FestDetailProto::sign() const {
  return sign_ != NULL ? *sign_ : *default_instance_->sign_;
}
inline ::proto_ff::FestSignDetailProto* FestDetailProto::mutable_sign() {
  set_has_sign();
  if (sign_ == NULL) sign_ = new ::proto_ff::FestSignDetailProto;
  return sign_;
}
inline ::proto_ff::FestSignDetailProto* FestDetailProto::release_sign() {
  clear_has_sign();
  ::proto_ff::FestSignDetailProto* temp = sign_;
  sign_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_sign(::proto_ff::FestSignDetailProto* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
}

// optional .proto_ff.FestGoldStoreProto gold_store = 5;
inline bool FestDetailProto::has_gold_store() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestDetailProto::set_has_gold_store() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestDetailProto::clear_has_gold_store() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestDetailProto::clear_gold_store() {
  if (gold_store_ != NULL) gold_store_->::proto_ff::FestGoldStoreProto::Clear();
  clear_has_gold_store();
}
inline const ::proto_ff::FestGoldStoreProto& FestDetailProto::gold_store() const {
  return gold_store_ != NULL ? *gold_store_ : *default_instance_->gold_store_;
}
inline ::proto_ff::FestGoldStoreProto* FestDetailProto::mutable_gold_store() {
  set_has_gold_store();
  if (gold_store_ == NULL) gold_store_ = new ::proto_ff::FestGoldStoreProto;
  return gold_store_;
}
inline ::proto_ff::FestGoldStoreProto* FestDetailProto::release_gold_store() {
  clear_has_gold_store();
  ::proto_ff::FestGoldStoreProto* temp = gold_store_;
  gold_store_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_gold_store(::proto_ff::FestGoldStoreProto* gold_store) {
  delete gold_store_;
  gold_store_ = gold_store;
  if (gold_store) {
    set_has_gold_store();
  } else {
    clear_has_gold_store();
  }
}

// optional .proto_ff.FestDigEggProto dig_egg = 6;
inline bool FestDetailProto::has_dig_egg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FestDetailProto::set_has_dig_egg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FestDetailProto::clear_has_dig_egg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FestDetailProto::clear_dig_egg() {
  if (dig_egg_ != NULL) dig_egg_->::proto_ff::FestDigEggProto::Clear();
  clear_has_dig_egg();
}
inline const ::proto_ff::FestDigEggProto& FestDetailProto::dig_egg() const {
  return dig_egg_ != NULL ? *dig_egg_ : *default_instance_->dig_egg_;
}
inline ::proto_ff::FestDigEggProto* FestDetailProto::mutable_dig_egg() {
  set_has_dig_egg();
  if (dig_egg_ == NULL) dig_egg_ = new ::proto_ff::FestDigEggProto;
  return dig_egg_;
}
inline ::proto_ff::FestDigEggProto* FestDetailProto::release_dig_egg() {
  clear_has_dig_egg();
  ::proto_ff::FestDigEggProto* temp = dig_egg_;
  dig_egg_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_dig_egg(::proto_ff::FestDigEggProto* dig_egg) {
  delete dig_egg_;
  dig_egg_ = dig_egg;
  if (dig_egg) {
    set_has_dig_egg();
  } else {
    clear_has_dig_egg();
  }
}

// optional .proto_ff.FestRTurnableRechargeProto rturnable_recharge = 7;
inline bool FestDetailProto::has_rturnable_recharge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FestDetailProto::set_has_rturnable_recharge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FestDetailProto::clear_has_rturnable_recharge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FestDetailProto::clear_rturnable_recharge() {
  if (rturnable_recharge_ != NULL) rturnable_recharge_->::proto_ff::FestRTurnableRechargeProto::Clear();
  clear_has_rturnable_recharge();
}
inline const ::proto_ff::FestRTurnableRechargeProto& FestDetailProto::rturnable_recharge() const {
  return rturnable_recharge_ != NULL ? *rturnable_recharge_ : *default_instance_->rturnable_recharge_;
}
inline ::proto_ff::FestRTurnableRechargeProto* FestDetailProto::mutable_rturnable_recharge() {
  set_has_rturnable_recharge();
  if (rturnable_recharge_ == NULL) rturnable_recharge_ = new ::proto_ff::FestRTurnableRechargeProto;
  return rturnable_recharge_;
}
inline ::proto_ff::FestRTurnableRechargeProto* FestDetailProto::release_rturnable_recharge() {
  clear_has_rturnable_recharge();
  ::proto_ff::FestRTurnableRechargeProto* temp = rturnable_recharge_;
  rturnable_recharge_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_rturnable_recharge(::proto_ff::FestRTurnableRechargeProto* rturnable_recharge) {
  delete rturnable_recharge_;
  rturnable_recharge_ = rturnable_recharge;
  if (rturnable_recharge) {
    set_has_rturnable_recharge();
  } else {
    clear_has_rturnable_recharge();
  }
}

// optional .proto_ff.FestTurnableProto turntable = 8;
inline bool FestDetailProto::has_turntable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FestDetailProto::set_has_turntable() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FestDetailProto::clear_has_turntable() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FestDetailProto::clear_turntable() {
  if (turntable_ != NULL) turntable_->::proto_ff::FestTurnableProto::Clear();
  clear_has_turntable();
}
inline const ::proto_ff::FestTurnableProto& FestDetailProto::turntable() const {
  return turntable_ != NULL ? *turntable_ : *default_instance_->turntable_;
}
inline ::proto_ff::FestTurnableProto* FestDetailProto::mutable_turntable() {
  set_has_turntable();
  if (turntable_ == NULL) turntable_ = new ::proto_ff::FestTurnableProto;
  return turntable_;
}
inline ::proto_ff::FestTurnableProto* FestDetailProto::release_turntable() {
  clear_has_turntable();
  ::proto_ff::FestTurnableProto* temp = turntable_;
  turntable_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_turntable(::proto_ff::FestTurnableProto* turntable) {
  delete turntable_;
  turntable_ = turntable;
  if (turntable) {
    set_has_turntable();
  } else {
    clear_has_turntable();
  }
}

// optional .proto_ff.FestDonateProto donate = 9;
inline bool FestDetailProto::has_donate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FestDetailProto::set_has_donate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FestDetailProto::clear_has_donate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FestDetailProto::clear_donate() {
  if (donate_ != NULL) donate_->::proto_ff::FestDonateProto::Clear();
  clear_has_donate();
}
inline const ::proto_ff::FestDonateProto& FestDetailProto::donate() const {
  return donate_ != NULL ? *donate_ : *default_instance_->donate_;
}
inline ::proto_ff::FestDonateProto* FestDetailProto::mutable_donate() {
  set_has_donate();
  if (donate_ == NULL) donate_ = new ::proto_ff::FestDonateProto;
  return donate_;
}
inline ::proto_ff::FestDonateProto* FestDetailProto::release_donate() {
  clear_has_donate();
  ::proto_ff::FestDonateProto* temp = donate_;
  donate_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_donate(::proto_ff::FestDonateProto* donate) {
  delete donate_;
  donate_ = donate;
  if (donate) {
    set_has_donate();
  } else {
    clear_has_donate();
  }
}

// optional .proto_ff.FestOnlineProto online = 10;
inline bool FestDetailProto::has_online() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FestDetailProto::set_has_online() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FestDetailProto::clear_has_online() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FestDetailProto::clear_online() {
  if (online_ != NULL) online_->::proto_ff::FestOnlineProto::Clear();
  clear_has_online();
}
inline const ::proto_ff::FestOnlineProto& FestDetailProto::online() const {
  return online_ != NULL ? *online_ : *default_instance_->online_;
}
inline ::proto_ff::FestOnlineProto* FestDetailProto::mutable_online() {
  set_has_online();
  if (online_ == NULL) online_ = new ::proto_ff::FestOnlineProto;
  return online_;
}
inline ::proto_ff::FestOnlineProto* FestDetailProto::release_online() {
  clear_has_online();
  ::proto_ff::FestOnlineProto* temp = online_;
  online_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_online(::proto_ff::FestOnlineProto* online) {
  delete online_;
  online_ = online;
  if (online) {
    set_has_online();
  } else {
    clear_has_online();
  }
}

// optional .proto_ff.FestCollectWordProto collect_word = 11;
inline bool FestDetailProto::has_collect_word() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FestDetailProto::set_has_collect_word() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FestDetailProto::clear_has_collect_word() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FestDetailProto::clear_collect_word() {
  if (collect_word_ != NULL) collect_word_->::proto_ff::FestCollectWordProto::Clear();
  clear_has_collect_word();
}
inline const ::proto_ff::FestCollectWordProto& FestDetailProto::collect_word() const {
  return collect_word_ != NULL ? *collect_word_ : *default_instance_->collect_word_;
}
inline ::proto_ff::FestCollectWordProto* FestDetailProto::mutable_collect_word() {
  set_has_collect_word();
  if (collect_word_ == NULL) collect_word_ = new ::proto_ff::FestCollectWordProto;
  return collect_word_;
}
inline ::proto_ff::FestCollectWordProto* FestDetailProto::release_collect_word() {
  clear_has_collect_word();
  ::proto_ff::FestCollectWordProto* temp = collect_word_;
  collect_word_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_collect_word(::proto_ff::FestCollectWordProto* collect_word) {
  delete collect_word_;
  collect_word_ = collect_word;
  if (collect_word) {
    set_has_collect_word();
  } else {
    clear_has_collect_word();
  }
}

// optional .proto_ff.DrawPizeProto draw_pize = 12;
inline bool FestDetailProto::has_draw_pize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FestDetailProto::set_has_draw_pize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FestDetailProto::clear_has_draw_pize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FestDetailProto::clear_draw_pize() {
  if (draw_pize_ != NULL) draw_pize_->::proto_ff::DrawPizeProto::Clear();
  clear_has_draw_pize();
}
inline const ::proto_ff::DrawPizeProto& FestDetailProto::draw_pize() const {
  return draw_pize_ != NULL ? *draw_pize_ : *default_instance_->draw_pize_;
}
inline ::proto_ff::DrawPizeProto* FestDetailProto::mutable_draw_pize() {
  set_has_draw_pize();
  if (draw_pize_ == NULL) draw_pize_ = new ::proto_ff::DrawPizeProto;
  return draw_pize_;
}
inline ::proto_ff::DrawPizeProto* FestDetailProto::release_draw_pize() {
  clear_has_draw_pize();
  ::proto_ff::DrawPizeProto* temp = draw_pize_;
  draw_pize_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_draw_pize(::proto_ff::DrawPizeProto* draw_pize) {
  delete draw_pize_;
  draw_pize_ = draw_pize;
  if (draw_pize) {
    set_has_draw_pize();
  } else {
    clear_has_draw_pize();
  }
}

// optional .proto_ff.FestBossDetailProto boss = 13;
inline bool FestDetailProto::has_boss() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FestDetailProto::set_has_boss() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FestDetailProto::clear_has_boss() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FestDetailProto::clear_boss() {
  if (boss_ != NULL) boss_->::proto_ff::FestBossDetailProto::Clear();
  clear_has_boss();
}
inline const ::proto_ff::FestBossDetailProto& FestDetailProto::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::proto_ff::FestBossDetailProto* FestDetailProto::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::proto_ff::FestBossDetailProto;
  return boss_;
}
inline ::proto_ff::FestBossDetailProto* FestDetailProto::release_boss() {
  clear_has_boss();
  ::proto_ff::FestBossDetailProto* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_boss(::proto_ff::FestBossDetailProto* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
}

// optional .proto_ff.FestRankDBData server_rank = 14;
inline bool FestDetailProto::has_server_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FestDetailProto::set_has_server_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FestDetailProto::clear_has_server_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FestDetailProto::clear_server_rank() {
  if (server_rank_ != NULL) server_rank_->::proto_ff::FestRankDBData::Clear();
  clear_has_server_rank();
}
inline const ::proto_ff::FestRankDBData& FestDetailProto::server_rank() const {
  return server_rank_ != NULL ? *server_rank_ : *default_instance_->server_rank_;
}
inline ::proto_ff::FestRankDBData* FestDetailProto::mutable_server_rank() {
  set_has_server_rank();
  if (server_rank_ == NULL) server_rank_ = new ::proto_ff::FestRankDBData;
  return server_rank_;
}
inline ::proto_ff::FestRankDBData* FestDetailProto::release_server_rank() {
  clear_has_server_rank();
  ::proto_ff::FestRankDBData* temp = server_rank_;
  server_rank_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_server_rank(::proto_ff::FestRankDBData* server_rank) {
  delete server_rank_;
  server_rank_ = server_rank;
  if (server_rank) {
    set_has_server_rank();
  } else {
    clear_has_server_rank();
  }
}

// optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 15;
inline bool FestDetailProto::has_hui_meng_xi_you() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FestDetailProto::set_has_hui_meng_xi_you() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FestDetailProto::clear_has_hui_meng_xi_you() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FestDetailProto::clear_hui_meng_xi_you() {
  if (hui_meng_xi_you_ != NULL) hui_meng_xi_you_->::proto_ff::FestHuiMengXiYouData::Clear();
  clear_has_hui_meng_xi_you();
}
inline const ::proto_ff::FestHuiMengXiYouData& FestDetailProto::hui_meng_xi_you() const {
  return hui_meng_xi_you_ != NULL ? *hui_meng_xi_you_ : *default_instance_->hui_meng_xi_you_;
}
inline ::proto_ff::FestHuiMengXiYouData* FestDetailProto::mutable_hui_meng_xi_you() {
  set_has_hui_meng_xi_you();
  if (hui_meng_xi_you_ == NULL) hui_meng_xi_you_ = new ::proto_ff::FestHuiMengXiYouData;
  return hui_meng_xi_you_;
}
inline ::proto_ff::FestHuiMengXiYouData* FestDetailProto::release_hui_meng_xi_you() {
  clear_has_hui_meng_xi_you();
  ::proto_ff::FestHuiMengXiYouData* temp = hui_meng_xi_you_;
  hui_meng_xi_you_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_hui_meng_xi_you(::proto_ff::FestHuiMengXiYouData* hui_meng_xi_you) {
  delete hui_meng_xi_you_;
  hui_meng_xi_you_ = hui_meng_xi_you;
  if (hui_meng_xi_you) {
    set_has_hui_meng_xi_you();
  } else {
    clear_has_hui_meng_xi_you();
  }
}

// optional .proto_ff.FestMarryDetail marry = 16;
inline bool FestDetailProto::has_marry() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FestDetailProto::set_has_marry() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FestDetailProto::clear_has_marry() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FestDetailProto::clear_marry() {
  if (marry_ != NULL) marry_->::proto_ff::FestMarryDetail::Clear();
  clear_has_marry();
}
inline const ::proto_ff::FestMarryDetail& FestDetailProto::marry() const {
  return marry_ != NULL ? *marry_ : *default_instance_->marry_;
}
inline ::proto_ff::FestMarryDetail* FestDetailProto::mutable_marry() {
  set_has_marry();
  if (marry_ == NULL) marry_ = new ::proto_ff::FestMarryDetail;
  return marry_;
}
inline ::proto_ff::FestMarryDetail* FestDetailProto::release_marry() {
  clear_has_marry();
  ::proto_ff::FestMarryDetail* temp = marry_;
  marry_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_marry(::proto_ff::FestMarryDetail* marry) {
  delete marry_;
  marry_ = marry;
  if (marry) {
    set_has_marry();
  } else {
    clear_has_marry();
  }
}

// optional .proto_ff.FestCandleProto candle = 17;
inline bool FestDetailProto::has_candle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FestDetailProto::set_has_candle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FestDetailProto::clear_has_candle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FestDetailProto::clear_candle() {
  if (candle_ != NULL) candle_->::proto_ff::FestCandleProto::Clear();
  clear_has_candle();
}
inline const ::proto_ff::FestCandleProto& FestDetailProto::candle() const {
  return candle_ != NULL ? *candle_ : *default_instance_->candle_;
}
inline ::proto_ff::FestCandleProto* FestDetailProto::mutable_candle() {
  set_has_candle();
  if (candle_ == NULL) candle_ = new ::proto_ff::FestCandleProto;
  return candle_;
}
inline ::proto_ff::FestCandleProto* FestDetailProto::release_candle() {
  clear_has_candle();
  ::proto_ff::FestCandleProto* temp = candle_;
  candle_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_candle(::proto_ff::FestCandleProto* candle) {
  delete candle_;
  candle_ = candle;
  if (candle) {
    set_has_candle();
  } else {
    clear_has_candle();
  }
}

// optional .proto_ff.FestDayTotalRechargeProto day_total_recharge = 18;
inline bool FestDetailProto::has_day_total_recharge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FestDetailProto::set_has_day_total_recharge() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FestDetailProto::clear_has_day_total_recharge() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FestDetailProto::clear_day_total_recharge() {
  if (day_total_recharge_ != NULL) day_total_recharge_->::proto_ff::FestDayTotalRechargeProto::Clear();
  clear_has_day_total_recharge();
}
inline const ::proto_ff::FestDayTotalRechargeProto& FestDetailProto::day_total_recharge() const {
  return day_total_recharge_ != NULL ? *day_total_recharge_ : *default_instance_->day_total_recharge_;
}
inline ::proto_ff::FestDayTotalRechargeProto* FestDetailProto::mutable_day_total_recharge() {
  set_has_day_total_recharge();
  if (day_total_recharge_ == NULL) day_total_recharge_ = new ::proto_ff::FestDayTotalRechargeProto;
  return day_total_recharge_;
}
inline ::proto_ff::FestDayTotalRechargeProto* FestDetailProto::release_day_total_recharge() {
  clear_has_day_total_recharge();
  ::proto_ff::FestDayTotalRechargeProto* temp = day_total_recharge_;
  day_total_recharge_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_day_total_recharge(::proto_ff::FestDayTotalRechargeProto* day_total_recharge) {
  delete day_total_recharge_;
  day_total_recharge_ = day_total_recharge;
  if (day_total_recharge) {
    set_has_day_total_recharge();
  } else {
    clear_has_day_total_recharge();
  }
}

// optional .proto_ff.FestTotalRechargeProto total_recharge = 19;
inline bool FestDetailProto::has_total_recharge() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FestDetailProto::set_has_total_recharge() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FestDetailProto::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FestDetailProto::clear_total_recharge() {
  if (total_recharge_ != NULL) total_recharge_->::proto_ff::FestTotalRechargeProto::Clear();
  clear_has_total_recharge();
}
inline const ::proto_ff::FestTotalRechargeProto& FestDetailProto::total_recharge() const {
  return total_recharge_ != NULL ? *total_recharge_ : *default_instance_->total_recharge_;
}
inline ::proto_ff::FestTotalRechargeProto* FestDetailProto::mutable_total_recharge() {
  set_has_total_recharge();
  if (total_recharge_ == NULL) total_recharge_ = new ::proto_ff::FestTotalRechargeProto;
  return total_recharge_;
}
inline ::proto_ff::FestTotalRechargeProto* FestDetailProto::release_total_recharge() {
  clear_has_total_recharge();
  ::proto_ff::FestTotalRechargeProto* temp = total_recharge_;
  total_recharge_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_total_recharge(::proto_ff::FestTotalRechargeProto* total_recharge) {
  delete total_recharge_;
  total_recharge_ = total_recharge;
  if (total_recharge) {
    set_has_total_recharge();
  } else {
    clear_has_total_recharge();
  }
}

// optional .proto_ff.FestLoginProto login = 20;
inline bool FestDetailProto::has_login() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FestDetailProto::set_has_login() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FestDetailProto::clear_has_login() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FestDetailProto::clear_login() {
  if (login_ != NULL) login_->::proto_ff::FestLoginProto::Clear();
  clear_has_login();
}
inline const ::proto_ff::FestLoginProto& FestDetailProto::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::proto_ff::FestLoginProto* FestDetailProto::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::proto_ff::FestLoginProto;
  return login_;
}
inline ::proto_ff::FestLoginProto* FestDetailProto::release_login() {
  clear_has_login();
  ::proto_ff::FestLoginProto* temp = login_;
  login_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_login(::proto_ff::FestLoginProto* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// optional .proto_ff.FestLimitSaleProto limit_sale = 21;
inline bool FestDetailProto::has_limit_sale() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FestDetailProto::set_has_limit_sale() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FestDetailProto::clear_has_limit_sale() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FestDetailProto::clear_limit_sale() {
  if (limit_sale_ != NULL) limit_sale_->::proto_ff::FestLimitSaleProto::Clear();
  clear_has_limit_sale();
}
inline const ::proto_ff::FestLimitSaleProto& FestDetailProto::limit_sale() const {
  return limit_sale_ != NULL ? *limit_sale_ : *default_instance_->limit_sale_;
}
inline ::proto_ff::FestLimitSaleProto* FestDetailProto::mutable_limit_sale() {
  set_has_limit_sale();
  if (limit_sale_ == NULL) limit_sale_ = new ::proto_ff::FestLimitSaleProto;
  return limit_sale_;
}
inline ::proto_ff::FestLimitSaleProto* FestDetailProto::release_limit_sale() {
  clear_has_limit_sale();
  ::proto_ff::FestLimitSaleProto* temp = limit_sale_;
  limit_sale_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_limit_sale(::proto_ff::FestLimitSaleProto* limit_sale) {
  delete limit_sale_;
  limit_sale_ = limit_sale;
  if (limit_sale) {
    set_has_limit_sale();
  } else {
    clear_has_limit_sale();
  }
}

// optional .proto_ff.FestContiRechargeProto conti_recharge = 22;
inline bool FestDetailProto::has_conti_recharge() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FestDetailProto::set_has_conti_recharge() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FestDetailProto::clear_has_conti_recharge() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FestDetailProto::clear_conti_recharge() {
  if (conti_recharge_ != NULL) conti_recharge_->::proto_ff::FestContiRechargeProto::Clear();
  clear_has_conti_recharge();
}
inline const ::proto_ff::FestContiRechargeProto& FestDetailProto::conti_recharge() const {
  return conti_recharge_ != NULL ? *conti_recharge_ : *default_instance_->conti_recharge_;
}
inline ::proto_ff::FestContiRechargeProto* FestDetailProto::mutable_conti_recharge() {
  set_has_conti_recharge();
  if (conti_recharge_ == NULL) conti_recharge_ = new ::proto_ff::FestContiRechargeProto;
  return conti_recharge_;
}
inline ::proto_ff::FestContiRechargeProto* FestDetailProto::release_conti_recharge() {
  clear_has_conti_recharge();
  ::proto_ff::FestContiRechargeProto* temp = conti_recharge_;
  conti_recharge_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_conti_recharge(::proto_ff::FestContiRechargeProto* conti_recharge) {
  delete conti_recharge_;
  conti_recharge_ = conti_recharge;
  if (conti_recharge) {
    set_has_conti_recharge();
  } else {
    clear_has_conti_recharge();
  }
}

// optional .proto_ff.FestMysteryProto mystery = 23;
inline bool FestDetailProto::has_mystery() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FestDetailProto::set_has_mystery() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FestDetailProto::clear_has_mystery() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FestDetailProto::clear_mystery() {
  if (mystery_ != NULL) mystery_->::proto_ff::FestMysteryProto::Clear();
  clear_has_mystery();
}
inline const ::proto_ff::FestMysteryProto& FestDetailProto::mystery() const {
  return mystery_ != NULL ? *mystery_ : *default_instance_->mystery_;
}
inline ::proto_ff::FestMysteryProto* FestDetailProto::mutable_mystery() {
  set_has_mystery();
  if (mystery_ == NULL) mystery_ = new ::proto_ff::FestMysteryProto;
  return mystery_;
}
inline ::proto_ff::FestMysteryProto* FestDetailProto::release_mystery() {
  clear_has_mystery();
  ::proto_ff::FestMysteryProto* temp = mystery_;
  mystery_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_mystery(::proto_ff::FestMysteryProto* mystery) {
  delete mystery_;
  mystery_ = mystery;
  if (mystery) {
    set_has_mystery();
  } else {
    clear_has_mystery();
  }
}

// optional .proto_ff.FestShootSunProto shoot_sun = 24;
inline bool FestDetailProto::has_shoot_sun() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FestDetailProto::set_has_shoot_sun() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FestDetailProto::clear_has_shoot_sun() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FestDetailProto::clear_shoot_sun() {
  if (shoot_sun_ != NULL) shoot_sun_->::proto_ff::FestShootSunProto::Clear();
  clear_has_shoot_sun();
}
inline const ::proto_ff::FestShootSunProto& FestDetailProto::shoot_sun() const {
  return shoot_sun_ != NULL ? *shoot_sun_ : *default_instance_->shoot_sun_;
}
inline ::proto_ff::FestShootSunProto* FestDetailProto::mutable_shoot_sun() {
  set_has_shoot_sun();
  if (shoot_sun_ == NULL) shoot_sun_ = new ::proto_ff::FestShootSunProto;
  return shoot_sun_;
}
inline ::proto_ff::FestShootSunProto* FestDetailProto::release_shoot_sun() {
  clear_has_shoot_sun();
  ::proto_ff::FestShootSunProto* temp = shoot_sun_;
  shoot_sun_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_shoot_sun(::proto_ff::FestShootSunProto* shoot_sun) {
  delete shoot_sun_;
  shoot_sun_ = shoot_sun;
  if (shoot_sun) {
    set_has_shoot_sun();
  } else {
    clear_has_shoot_sun();
  }
}

// optional .proto_ff.FestRechargePrizeData recharge_prize = 25;
inline bool FestDetailProto::has_recharge_prize() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FestDetailProto::set_has_recharge_prize() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FestDetailProto::clear_has_recharge_prize() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FestDetailProto::clear_recharge_prize() {
  if (recharge_prize_ != NULL) recharge_prize_->::proto_ff::FestRechargePrizeData::Clear();
  clear_has_recharge_prize();
}
inline const ::proto_ff::FestRechargePrizeData& FestDetailProto::recharge_prize() const {
  return recharge_prize_ != NULL ? *recharge_prize_ : *default_instance_->recharge_prize_;
}
inline ::proto_ff::FestRechargePrizeData* FestDetailProto::mutable_recharge_prize() {
  set_has_recharge_prize();
  if (recharge_prize_ == NULL) recharge_prize_ = new ::proto_ff::FestRechargePrizeData;
  return recharge_prize_;
}
inline ::proto_ff::FestRechargePrizeData* FestDetailProto::release_recharge_prize() {
  clear_has_recharge_prize();
  ::proto_ff::FestRechargePrizeData* temp = recharge_prize_;
  recharge_prize_ = NULL;
  return temp;
}
inline void FestDetailProto::set_allocated_recharge_prize(::proto_ff::FestRechargePrizeData* recharge_prize) {
  delete recharge_prize_;
  recharge_prize_ = recharge_prize;
  if (recharge_prize) {
    set_has_recharge_prize();
  } else {
    clear_has_recharge_prize();
  }
}

// -------------------------------------------------------------------

// Fest_SimpleListRsp

// optional .proto_ff.FestSimpleListProto simple = 1;
inline bool Fest_SimpleListRsp::has_simple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_SimpleListRsp::set_has_simple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_SimpleListRsp::clear_has_simple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_SimpleListRsp::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::FestSimpleListProto::Clear();
  clear_has_simple();
}
inline const ::proto_ff::FestSimpleListProto& Fest_SimpleListRsp::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::FestSimpleListProto* Fest_SimpleListRsp::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::FestSimpleListProto;
  return simple_;
}
inline ::proto_ff::FestSimpleListProto* Fest_SimpleListRsp::release_simple() {
  clear_has_simple();
  ::proto_ff::FestSimpleListProto* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void Fest_SimpleListRsp::set_allocated_simple(::proto_ff::FestSimpleListProto* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// -------------------------------------------------------------------

// Fest_SimpleInfoNotify

// optional .proto_ff.FestSimpleListProto simple = 1;
inline bool Fest_SimpleInfoNotify::has_simple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_SimpleInfoNotify::set_has_simple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_SimpleInfoNotify::clear_has_simple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_SimpleInfoNotify::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::FestSimpleListProto::Clear();
  clear_has_simple();
}
inline const ::proto_ff::FestSimpleListProto& Fest_SimpleInfoNotify::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::FestSimpleListProto* Fest_SimpleInfoNotify::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::FestSimpleListProto;
  return simple_;
}
inline ::proto_ff::FestSimpleListProto* Fest_SimpleInfoNotify::release_simple() {
  clear_has_simple();
  ::proto_ff::FestSimpleListProto* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void Fest_SimpleInfoNotify::set_allocated_simple(::proto_ff::FestSimpleListProto* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// -------------------------------------------------------------------

// Fest_DetailReq

// optional int32 fest_id = 1;
inline bool Fest_DetailReq::has_fest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DetailReq::set_has_fest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DetailReq::clear_has_fest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DetailReq::clear_fest_id() {
  fest_id_ = 0;
  clear_has_fest_id();
}
inline ::google::protobuf::int32 Fest_DetailReq::fest_id() const {
  return fest_id_;
}
inline void Fest_DetailReq::set_fest_id(::google::protobuf::int32 value) {
  set_has_fest_id();
  fest_id_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_DetailReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DetailReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DetailReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DetailReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DetailReq::template_id() const {
  return template_id_;
}
inline void Fest_DetailReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_DetailRsp

// repeated .proto_ff.FestDetailProto detail = 1;
inline int Fest_DetailRsp::detail_size() const {
  return detail_.size();
}
inline void Fest_DetailRsp::clear_detail() {
  detail_.Clear();
}
inline const ::proto_ff::FestDetailProto& Fest_DetailRsp::detail(int index) const {
  return detail_.Get(index);
}
inline ::proto_ff::FestDetailProto* Fest_DetailRsp::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::proto_ff::FestDetailProto* Fest_DetailRsp::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >&
Fest_DetailRsp::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >*
Fest_DetailRsp::mutable_detail() {
  return &detail_;
}

// -------------------------------------------------------------------

// Fest_DetailUpdateRsp

// repeated .proto_ff.FestDetailProto detail = 1;
inline int Fest_DetailUpdateRsp::detail_size() const {
  return detail_.size();
}
inline void Fest_DetailUpdateRsp::clear_detail() {
  detail_.Clear();
}
inline const ::proto_ff::FestDetailProto& Fest_DetailUpdateRsp::detail(int index) const {
  return detail_.Get(index);
}
inline ::proto_ff::FestDetailProto* Fest_DetailUpdateRsp::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::proto_ff::FestDetailProto* Fest_DetailUpdateRsp::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >&
Fest_DetailUpdateRsp::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailProto >*
Fest_DetailUpdateRsp::mutable_detail() {
  return &detail_;
}

// -------------------------------------------------------------------

// Fest_RedPointInfoRsp

// optional .proto_ff.FestRedPointListProto redpoint = 1;
inline bool Fest_RedPointInfoRsp::has_redpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_RedPointInfoRsp::set_has_redpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_RedPointInfoRsp::clear_has_redpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_RedPointInfoRsp::clear_redpoint() {
  if (redpoint_ != NULL) redpoint_->::proto_ff::FestRedPointListProto::Clear();
  clear_has_redpoint();
}
inline const ::proto_ff::FestRedPointListProto& Fest_RedPointInfoRsp::redpoint() const {
  return redpoint_ != NULL ? *redpoint_ : *default_instance_->redpoint_;
}
inline ::proto_ff::FestRedPointListProto* Fest_RedPointInfoRsp::mutable_redpoint() {
  set_has_redpoint();
  if (redpoint_ == NULL) redpoint_ = new ::proto_ff::FestRedPointListProto;
  return redpoint_;
}
inline ::proto_ff::FestRedPointListProto* Fest_RedPointInfoRsp::release_redpoint() {
  clear_has_redpoint();
  ::proto_ff::FestRedPointListProto* temp = redpoint_;
  redpoint_ = NULL;
  return temp;
}
inline void Fest_RedPointInfoRsp::set_allocated_redpoint(::proto_ff::FestRedPointListProto* redpoint) {
  delete redpoint_;
  redpoint_ = redpoint;
  if (redpoint) {
    set_has_redpoint();
  } else {
    clear_has_redpoint();
  }
}

// -------------------------------------------------------------------

// Fest_RedPointInfoNotify

// optional .proto_ff.FestRedPointListProto redpoint = 1;
inline bool Fest_RedPointInfoNotify::has_redpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_RedPointInfoNotify::set_has_redpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_RedPointInfoNotify::clear_has_redpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_RedPointInfoNotify::clear_redpoint() {
  if (redpoint_ != NULL) redpoint_->::proto_ff::FestRedPointListProto::Clear();
  clear_has_redpoint();
}
inline const ::proto_ff::FestRedPointListProto& Fest_RedPointInfoNotify::redpoint() const {
  return redpoint_ != NULL ? *redpoint_ : *default_instance_->redpoint_;
}
inline ::proto_ff::FestRedPointListProto* Fest_RedPointInfoNotify::mutable_redpoint() {
  set_has_redpoint();
  if (redpoint_ == NULL) redpoint_ = new ::proto_ff::FestRedPointListProto;
  return redpoint_;
}
inline ::proto_ff::FestRedPointListProto* Fest_RedPointInfoNotify::release_redpoint() {
  clear_has_redpoint();
  ::proto_ff::FestRedPointListProto* temp = redpoint_;
  redpoint_ = NULL;
  return temp;
}
inline void Fest_RedPointInfoNotify::set_allocated_redpoint(::proto_ff::FestRedPointListProto* redpoint) {
  delete redpoint_;
  redpoint_ = redpoint;
  if (redpoint) {
    set_has_redpoint();
  } else {
    clear_has_redpoint();
  }
}

// -------------------------------------------------------------------

// Fest_ShopBuyReq

// optional int32 template_id = 1;
inline bool Fest_ShopBuyReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShopBuyReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShopBuyReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShopBuyReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShopBuyReq::template_id() const {
  return template_id_;
}
inline void Fest_ShopBuyReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_ShopBuyReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShopBuyReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShopBuyReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShopBuyReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_ShopBuyReq::id() const {
  return id_;
}
inline void Fest_ShopBuyReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_ShopBuyRsp

// required int32 ret = 1;
inline bool Fest_ShopBuyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShopBuyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShopBuyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShopBuyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ShopBuyRsp::ret() const {
  return ret_;
}
inline void Fest_ShopBuyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_ShopBuyRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShopBuyRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShopBuyRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShopBuyRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShopBuyRsp::template_id() const {
  return template_id_;
}
inline void Fest_ShopBuyRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 3;
inline bool Fest_ShopBuyRsp::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_ShopBuyRsp::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_ShopBuyRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_ShopBuyRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_ShopBuyRsp::id() const {
  return id_;
}
inline void Fest_ShopBuyRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 4;
inline bool Fest_ShopBuyRsp::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_ShopBuyRsp::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_ShopBuyRsp::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_ShopBuyRsp::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Fest_ShopBuyRsp::num() const {
  return num_;
}
inline void Fest_ShopBuyRsp::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Fest_GetDailyRechargeRewardReq

// optional int32 template_id = 1;
inline bool Fest_GetDailyRechargeRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_GetDailyRechargeRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_GetDailyRechargeRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_GetDailyRechargeRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_GetDailyRechargeRewardReq::template_id() const {
  return template_id_;
}
inline void Fest_GetDailyRechargeRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_GetDailyRechargeRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_GetDailyRechargeRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_GetDailyRechargeRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_GetDailyRechargeRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_GetDailyRechargeRewardReq::id() const {
  return id_;
}
inline void Fest_GetDailyRechargeRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_DailyRechargeStatusNotify

// required int32 ret = 1;
inline bool Fest_DailyRechargeStatusNotify::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DailyRechargeStatusNotify::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DailyRechargeStatusNotify::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DailyRechargeStatusNotify::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_DailyRechargeStatusNotify::ret() const {
  return ret_;
}
inline void Fest_DailyRechargeStatusNotify::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_DailyRechargeStatusNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DailyRechargeStatusNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DailyRechargeStatusNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DailyRechargeStatusNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DailyRechargeStatusNotify::template_id() const {
  return template_id_;
}
inline void Fest_DailyRechargeStatusNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 total_recharge = 3;
inline bool Fest_DailyRechargeStatusNotify::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_DailyRechargeStatusNotify::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_DailyRechargeStatusNotify::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_DailyRechargeStatusNotify::clear_total_recharge() {
  total_recharge_ = 0;
  clear_has_total_recharge();
}
inline ::google::protobuf::int32 Fest_DailyRechargeStatusNotify::total_recharge() const {
  return total_recharge_;
}
inline void Fest_DailyRechargeStatusNotify::set_total_recharge(::google::protobuf::int32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// repeated .proto_ff.FestDailyTotalRechargeOneProto data = 4;
inline int Fest_DailyRechargeStatusNotify::data_size() const {
  return data_.size();
}
inline void Fest_DailyRechargeStatusNotify::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestDailyTotalRechargeOneProto& Fest_DailyRechargeStatusNotify::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestDailyTotalRechargeOneProto* Fest_DailyRechargeStatusNotify::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestDailyTotalRechargeOneProto* Fest_DailyRechargeStatusNotify::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >&
Fest_DailyRechargeStatusNotify::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >*
Fest_DailyRechargeStatusNotify::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FestRTurnableRechargeTurnableReq

// optional int32 template_id = 1;
inline bool FestRTurnableRechargeTurnableReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRTurnableRechargeTurnableReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRTurnableRechargeTurnableReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRTurnableRechargeTurnableReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRTurnableRechargeTurnableReq::template_id() const {
  return template_id_;
}
inline void FestRTurnableRechargeTurnableReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestRTurnableRechargeTurnableReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRTurnableRechargeTurnableReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRTurnableRechargeTurnableReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRTurnableRechargeTurnableReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestRTurnableRechargeTurnableReq::id() const {
  return id_;
}
inline void FestRTurnableRechargeTurnableReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestRTurnableRechargeTurnableRsp

// required int32 ret = 1;
inline bool FestRTurnableRechargeTurnableRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRTurnableRechargeTurnableRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRTurnableRechargeTurnableRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRTurnableRechargeTurnableRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestRTurnableRechargeTurnableRsp::ret() const {
  return ret_;
}
inline void FestRTurnableRechargeTurnableRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestRTurnableRechargeTurnableRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRTurnableRechargeTurnableRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRTurnableRechargeTurnableRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRTurnableRechargeTurnableRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRTurnableRechargeTurnableRsp::template_id() const {
  return template_id_;
}
inline void FestRTurnableRechargeTurnableRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 turnable_id = 3;
inline bool FestRTurnableRechargeTurnableRsp::has_turnable_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestRTurnableRechargeTurnableRsp::set_has_turnable_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestRTurnableRechargeTurnableRsp::clear_has_turnable_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestRTurnableRechargeTurnableRsp::clear_turnable_id() {
  turnable_id_ = 0;
  clear_has_turnable_id();
}
inline ::google::protobuf::int32 FestRTurnableRechargeTurnableRsp::turnable_id() const {
  return turnable_id_;
}
inline void FestRTurnableRechargeTurnableRsp::set_turnable_id(::google::protobuf::int32 value) {
  set_has_turnable_id();
  turnable_id_ = value;
}

// repeated .proto_ff.FestRTurnableRechargeOneProto data = 4;
inline int FestRTurnableRechargeTurnableRsp::data_size() const {
  return data_.size();
}
inline void FestRTurnableRechargeTurnableRsp::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestRTurnableRechargeOneProto& FestRTurnableRechargeTurnableRsp::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestRTurnableRechargeOneProto* FestRTurnableRechargeTurnableRsp::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestRTurnableRechargeOneProto* FestRTurnableRechargeTurnableRsp::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >&
FestRTurnableRechargeTurnableRsp::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >*
FestRTurnableRechargeTurnableRsp::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Fest_SignReq

// optional int32 template_id = 1;
inline bool Fest_SignReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_SignReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_SignReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_SignReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_SignReq::template_id() const {
  return template_id_;
}
inline void Fest_SignReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_SignRsp

// required int32 ret = 1;
inline bool Fest_SignRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_SignRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_SignRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_SignRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_SignRsp::ret() const {
  return ret_;
}
inline void Fest_SignRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_SignRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_SignRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_SignRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_SignRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_SignRsp::template_id() const {
  return template_id_;
}
inline void Fest_SignRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_GoldStoreUpateBuyRsp

// optional int32 template_id = 1;
inline bool Fest_GoldStoreUpateBuyRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_GoldStoreUpateBuyRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_GoldStoreUpateBuyRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_GoldStoreUpateBuyRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_GoldStoreUpateBuyRsp::template_id() const {
  return template_id_;
}
inline void Fest_GoldStoreUpateBuyRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_GoldStoreUpateBuyRsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_GoldStoreUpateBuyRsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_GoldStoreUpateBuyRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_GoldStoreUpateBuyRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_GoldStoreUpateBuyRsp::id() const {
  return id_;
}
inline void Fest_GoldStoreUpateBuyRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 3;
inline bool Fest_GoldStoreUpateBuyRsp::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_GoldStoreUpateBuyRsp::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_GoldStoreUpateBuyRsp::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_GoldStoreUpateBuyRsp::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Fest_GoldStoreUpateBuyRsp::num() const {
  return num_;
}
inline void Fest_GoldStoreUpateBuyRsp::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggReq

// optional int32 template_id = 1;
inline bool Fest_DigEggReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggReq::template_id() const {
  return template_id_;
}
inline void Fest_DigEggReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 pos = 2;
inline bool Fest_DigEggReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DigEggReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DigEggReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DigEggReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 Fest_DigEggReq::pos() const {
  return pos_;
}
inline void Fest_DigEggReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggRsp

// required int32 ret = 1;
inline bool Fest_DigEggRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_DigEggRsp::ret() const {
  return ret_;
}
inline void Fest_DigEggRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_DigEggRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DigEggRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DigEggRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DigEggRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggRsp::template_id() const {
  return template_id_;
}
inline void Fest_DigEggRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 3;
inline bool Fest_DigEggRsp::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_DigEggRsp::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_DigEggRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_DigEggRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_DigEggRsp::id() const {
  return id_;
}
inline void Fest_DigEggRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 pos = 4;
inline bool Fest_DigEggRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_DigEggRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_DigEggRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_DigEggRsp::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 Fest_DigEggRsp::pos() const {
  return pos_;
}
inline void Fest_DigEggRsp::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggRestReq

// optional int32 template_id = 1;
inline bool Fest_DigEggRestReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggRestReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggRestReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggRestReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggRestReq::template_id() const {
  return template_id_;
}
inline void Fest_DigEggRestReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggRestRsp

// required int32 ret = 1;
inline bool Fest_DigEggRestRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggRestRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggRestRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggRestRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_DigEggRestRsp::ret() const {
  return ret_;
}
inline void Fest_DigEggRestRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_DigEggRestRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DigEggRestRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DigEggRestRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DigEggRestRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggRestRsp::template_id() const {
  return template_id_;
}
inline void Fest_DigEggRestRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 free = 3;
inline bool Fest_DigEggRestRsp::has_free() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_DigEggRestRsp::set_has_free() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_DigEggRestRsp::clear_has_free() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_DigEggRestRsp::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 Fest_DigEggRestRsp::free() const {
  return free_;
}
inline void Fest_DigEggRestRsp::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggLogReq

// optional int32 template_id = 1;
inline bool Fest_DigEggLogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggLogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggLogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggLogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggLogReq::template_id() const {
  return template_id_;
}
inline void Fest_DigEggLogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggLogRsp

// required int32 ret = 1;
inline bool Fest_DigEggLogRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggLogRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggLogRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggLogRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_DigEggLogRsp::ret() const {
  return ret_;
}
inline void Fest_DigEggLogRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_DigEggLogRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DigEggLogRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DigEggLogRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DigEggLogRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggLogRsp::template_id() const {
  return template_id_;
}
inline void Fest_DigEggLogRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestDigEggLogProto log = 3;
inline int Fest_DigEggLogRsp::log_size() const {
  return log_.size();
}
inline void Fest_DigEggLogRsp::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::FestDigEggLogProto& Fest_DigEggLogRsp::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::FestDigEggLogProto* Fest_DigEggLogRsp::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::FestDigEggLogProto* Fest_DigEggLogRsp::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogProto >&
Fest_DigEggLogRsp::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogProto >*
Fest_DigEggLogRsp::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// Fest_DigEggTaskFetchReq

// required int32 template_id = 1;
inline bool Fest_DigEggTaskFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggTaskFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggTaskFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggTaskFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggTaskFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_DigEggTaskFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// required int32 id = 2;
inline bool Fest_DigEggTaskFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DigEggTaskFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DigEggTaskFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DigEggTaskFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_DigEggTaskFetchReq::id() const {
  return id_;
}
inline void Fest_DigEggTaskFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggTaskFetchRsp

// required int32 ret = 1;
inline bool Fest_DigEggTaskFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DigEggTaskFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DigEggTaskFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DigEggTaskFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_DigEggTaskFetchRsp::ret() const {
  return ret_;
}
inline void Fest_DigEggTaskFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_DigEggTaskFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DigEggTaskFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DigEggTaskFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DigEggTaskFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DigEggTaskFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_DigEggTaskFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_DigEggTaskUpdateRsp

// repeated .proto_ff.FestDigEggTaskProto task = 1;
inline int Fest_DigEggTaskUpdateRsp::task_size() const {
  return task_.size();
}
inline void Fest_DigEggTaskUpdateRsp::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestDigEggTaskProto& Fest_DigEggTaskUpdateRsp::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestDigEggTaskProto* Fest_DigEggTaskUpdateRsp::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestDigEggTaskProto* Fest_DigEggTaskUpdateRsp::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >&
Fest_DigEggTaskUpdateRsp::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskProto >*
Fest_DigEggTaskUpdateRsp::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// Fest_RTuranbleLogReq

// optional int32 template_id = 1;
inline bool Fest_RTuranbleLogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_RTuranbleLogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_RTuranbleLogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_RTuranbleLogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_RTuranbleLogReq::template_id() const {
  return template_id_;
}
inline void Fest_RTuranbleLogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_RTuranbleLogRsp

// required int32 ret = 1;
inline bool Fest_RTuranbleLogRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_RTuranbleLogRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_RTuranbleLogRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_RTuranbleLogRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_RTuranbleLogRsp::ret() const {
  return ret_;
}
inline void Fest_RTuranbleLogRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_RTuranbleLogRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_RTuranbleLogRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_RTuranbleLogRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_RTuranbleLogRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_RTuranbleLogRsp::template_id() const {
  return template_id_;
}
inline void Fest_RTuranbleLogRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.RTurnableLogDBProto log = 3;
inline int Fest_RTuranbleLogRsp::log_size() const {
  return log_.size();
}
inline void Fest_RTuranbleLogRsp::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::RTurnableLogDBProto& Fest_RTuranbleLogRsp::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::RTurnableLogDBProto* Fest_RTuranbleLogRsp::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::RTurnableLogDBProto* Fest_RTuranbleLogRsp::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RTurnableLogDBProto >&
Fest_RTuranbleLogRsp::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RTurnableLogDBProto >*
Fest_RTuranbleLogRsp::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// TurntableTurnTableReq

// optional int32 template_id = 1;
inline bool TurntableTurnTableReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableTurnTableReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableTurnTableReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableTurnTableReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 TurntableTurnTableReq::template_id() const {
  return template_id_;
}
inline void TurntableTurnTableReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// TurntableTurnTableRsp

// optional int32 ret = 1;
inline bool TurntableTurnTableRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableTurnTableRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableTurnTableRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableTurnTableRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 TurntableTurnTableRsp::ret() const {
  return ret_;
}
inline void TurntableTurnTableRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool TurntableTurnTableRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurntableTurnTableRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurntableTurnTableRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurntableTurnTableRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 TurntableTurnTableRsp::template_id() const {
  return template_id_;
}
inline void TurntableTurnTableRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 left_num = 3;
inline bool TurntableTurnTableRsp::has_left_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurntableTurnTableRsp::set_has_left_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurntableTurnTableRsp::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurntableTurnTableRsp::clear_left_num() {
  left_num_ = 0;
  clear_has_left_num();
}
inline ::google::protobuf::int32 TurntableTurnTableRsp::left_num() const {
  return left_num_;
}
inline void TurntableTurnTableRsp::set_left_num(::google::protobuf::int32 value) {
  set_has_left_num();
  left_num_ = value;
}

// optional int32 turntable_id = 4;
inline bool TurntableTurnTableRsp::has_turntable_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TurntableTurnTableRsp::set_has_turntable_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TurntableTurnTableRsp::clear_has_turntable_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TurntableTurnTableRsp::clear_turntable_id() {
  turntable_id_ = 0;
  clear_has_turntable_id();
}
inline ::google::protobuf::int32 TurntableTurnTableRsp::turntable_id() const {
  return turntable_id_;
}
inline void TurntableTurnTableRsp::set_turntable_id(::google::protobuf::int32 value) {
  set_has_turntable_id();
  turntable_id_ = value;
}

// repeated int32 chou_jiang_ids = 5;
inline int TurntableTurnTableRsp::chou_jiang_ids_size() const {
  return chou_jiang_ids_.size();
}
inline void TurntableTurnTableRsp::clear_chou_jiang_ids() {
  chou_jiang_ids_.Clear();
}
inline ::google::protobuf::int32 TurntableTurnTableRsp::chou_jiang_ids(int index) const {
  return chou_jiang_ids_.Get(index);
}
inline void TurntableTurnTableRsp::set_chou_jiang_ids(int index, ::google::protobuf::int32 value) {
  chou_jiang_ids_.Set(index, value);
}
inline void TurntableTurnTableRsp::add_chou_jiang_ids(::google::protobuf::int32 value) {
  chou_jiang_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TurntableTurnTableRsp::chou_jiang_ids() const {
  return chou_jiang_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TurntableTurnTableRsp::mutable_chou_jiang_ids() {
  return &chou_jiang_ids_;
}

// -------------------------------------------------------------------

// TurntableRewardReq

// optional int32 template_id = 1;
inline bool TurntableRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 TurntableRewardReq::template_id() const {
  return template_id_;
}
inline void TurntableRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool TurntableRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurntableRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurntableRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurntableRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TurntableRewardReq::id() const {
  return id_;
}
inline void TurntableRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// TurntableRewardRsp

// optional int32 ret = 1;
inline bool TurntableRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 TurntableRewardRsp::ret() const {
  return ret_;
}
inline void TurntableRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool TurntableRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurntableRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurntableRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurntableRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 TurntableRewardRsp::template_id() const {
  return template_id_;
}
inline void TurntableRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// TurntableStatusChange

// optional int32 template_id = 1;
inline bool TurntableStatusChange::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableStatusChange::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableStatusChange::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableStatusChange::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 TurntableStatusChange::template_id() const {
  return template_id_;
}
inline void TurntableStatusChange::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestTurnableTaskProto task = 2;
inline int TurntableStatusChange::task_size() const {
  return task_.size();
}
inline void TurntableStatusChange::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestTurnableTaskProto& TurntableStatusChange::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestTurnableTaskProto* TurntableStatusChange::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestTurnableTaskProto* TurntableStatusChange::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >&
TurntableStatusChange::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >*
TurntableStatusChange::mutable_task() {
  return &task_;
}

// optional uint32 left_num = 3;
inline bool TurntableStatusChange::has_left_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurntableStatusChange::set_has_left_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurntableStatusChange::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurntableStatusChange::clear_left_num() {
  left_num_ = 0u;
  clear_has_left_num();
}
inline ::google::protobuf::uint32 TurntableStatusChange::left_num() const {
  return left_num_;
}
inline void TurntableStatusChange::set_left_num(::google::protobuf::uint32 value) {
  set_has_left_num();
  left_num_ = value;
}

// -------------------------------------------------------------------

// FestDonateGetServerNumReq

// optional int32 template_id = 1;
inline bool FestDonateGetServerNumReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetServerNumReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetServerNumReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetServerNumReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetServerNumReq::template_id() const {
  return template_id_;
}
inline void FestDonateGetServerNumReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestDonateGetServerNumRsp

// optional int32 ret = 1;
inline bool FestDonateGetServerNumRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetServerNumRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetServerNumRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetServerNumRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDonateGetServerNumRsp::ret() const {
  return ret_;
}
inline void FestDonateGetServerNumRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDonateGetServerNumRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetServerNumRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetServerNumRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetServerNumRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetServerNumRsp::template_id() const {
  return template_id_;
}
inline void FestDonateGetServerNumRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 server_num = 3;
inline bool FestDonateGetServerNumRsp::has_server_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateGetServerNumRsp::set_has_server_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateGetServerNumRsp::clear_has_server_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateGetServerNumRsp::clear_server_num() {
  server_num_ = 0u;
  clear_has_server_num();
}
inline ::google::protobuf::uint32 FestDonateGetServerNumRsp::server_num() const {
  return server_num_;
}
inline void FestDonateGetServerNumRsp::set_server_num(::google::protobuf::uint32 value) {
  set_has_server_num();
  server_num_ = value;
}

// -------------------------------------------------------------------

// FestDonateDonateReq

// optional int32 template_id = 1;
inline bool FestDonateDonateReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateDonateReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateDonateReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateDonateReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateDonateReq::template_id() const {
  return template_id_;
}
inline void FestDonateDonateReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 2;
inline bool FestDonateDonateReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateDonateReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateDonateReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateDonateReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FestDonateDonateReq::type() const {
  return type_;
}
inline void FestDonateDonateReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FestDonateDonateRsp

// optional int32 ret = 1;
inline bool FestDonateDonateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateDonateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateDonateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateDonateRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDonateDonateRsp::ret() const {
  return ret_;
}
inline void FestDonateDonateRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDonateDonateRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateDonateRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateDonateRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateDonateRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateDonateRsp::template_id() const {
  return template_id_;
}
inline void FestDonateDonateRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 single_num = 3;
inline bool FestDonateDonateRsp::has_single_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateDonateRsp::set_has_single_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateDonateRsp::clear_has_single_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateDonateRsp::clear_single_num() {
  single_num_ = 0u;
  clear_has_single_num();
}
inline ::google::protobuf::uint32 FestDonateDonateRsp::single_num() const {
  return single_num_;
}
inline void FestDonateDonateRsp::set_single_num(::google::protobuf::uint32 value) {
  set_has_single_num();
  single_num_ = value;
}

// -------------------------------------------------------------------

// FestDonateGetSingleRewardReq

// optional int32 template_id = 1;
inline bool FestDonateGetSingleRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetSingleRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetSingleRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetSingleRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetSingleRewardReq::template_id() const {
  return template_id_;
}
inline void FestDonateGetSingleRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestDonateGetSingleRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetSingleRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetSingleRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetSingleRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDonateGetSingleRewardReq::id() const {
  return id_;
}
inline void FestDonateGetSingleRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestDonateGetSingleRewardRsp

// optional int32 ret = 1;
inline bool FestDonateGetSingleRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetSingleRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetSingleRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetSingleRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDonateGetSingleRewardRsp::ret() const {
  return ret_;
}
inline void FestDonateGetSingleRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDonateGetSingleRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetSingleRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetSingleRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetSingleRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetSingleRewardRsp::template_id() const {
  return template_id_;
}
inline void FestDonateGetSingleRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestDonateSingleProto data = 3;
inline bool FestDonateGetSingleRewardRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateGetSingleRewardRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateGetSingleRewardRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateGetSingleRewardRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestDonateSingleProto::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestDonateSingleProto& FestDonateGetSingleRewardRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestDonateSingleProto* FestDonateGetSingleRewardRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestDonateSingleProto;
  return data_;
}
inline ::proto_ff::FestDonateSingleProto* FestDonateGetSingleRewardRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestDonateSingleProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestDonateGetSingleRewardRsp::set_allocated_data(::proto_ff::FestDonateSingleProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestDonateGetServerRewardReq

// optional int32 template_id = 1;
inline bool FestDonateGetServerRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetServerRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetServerRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetServerRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetServerRewardReq::template_id() const {
  return template_id_;
}
inline void FestDonateGetServerRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestDonateGetServerRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetServerRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetServerRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetServerRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDonateGetServerRewardReq::id() const {
  return id_;
}
inline void FestDonateGetServerRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestDonateGetServerRewardRsp

// optional int32 ret = 1;
inline bool FestDonateGetServerRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetServerRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetServerRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetServerRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDonateGetServerRewardRsp::ret() const {
  return ret_;
}
inline void FestDonateGetServerRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDonateGetServerRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetServerRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetServerRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetServerRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetServerRewardRsp::template_id() const {
  return template_id_;
}
inline void FestDonateGetServerRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestDonateServerProto data = 3;
inline bool FestDonateGetServerRewardRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateGetServerRewardRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateGetServerRewardRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateGetServerRewardRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestDonateServerProto::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestDonateServerProto& FestDonateGetServerRewardRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestDonateServerProto* FestDonateGetServerRewardRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestDonateServerProto;
  return data_;
}
inline ::proto_ff::FestDonateServerProto* FestDonateGetServerRewardRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestDonateServerProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestDonateGetServerRewardRsp::set_allocated_data(::proto_ff::FestDonateServerProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestDonateGetTaskRewardReq

// optional int32 template_id = 1;
inline bool FestDonateGetTaskRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetTaskRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetTaskRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetTaskRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetTaskRewardReq::template_id() const {
  return template_id_;
}
inline void FestDonateGetTaskRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestDonateGetTaskRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetTaskRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetTaskRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetTaskRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDonateGetTaskRewardReq::id() const {
  return id_;
}
inline void FestDonateGetTaskRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestDonateGetTaskRewardRsp

// optional int32 ret = 1;
inline bool FestDonateGetTaskRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateGetTaskRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateGetTaskRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateGetTaskRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDonateGetTaskRewardRsp::ret() const {
  return ret_;
}
inline void FestDonateGetTaskRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDonateGetTaskRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDonateGetTaskRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDonateGetTaskRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDonateGetTaskRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateGetTaskRewardRsp::template_id() const {
  return template_id_;
}
inline void FestDonateGetTaskRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestDonateTaskProto data = 3;
inline bool FestDonateGetTaskRewardRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateGetTaskRewardRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateGetTaskRewardRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateGetTaskRewardRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestDonateTaskProto::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestDonateTaskProto& FestDonateGetTaskRewardRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestDonateTaskProto* FestDonateGetTaskRewardRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestDonateTaskProto;
  return data_;
}
inline ::proto_ff::FestDonateTaskProto* FestDonateGetTaskRewardRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestDonateTaskProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestDonateGetTaskRewardRsp::set_allocated_data(::proto_ff::FestDonateTaskProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestDonateTaskTtatusChange

// optional int32 template_id = 1;
inline bool FestDonateTaskTtatusChange::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDonateTaskTtatusChange::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDonateTaskTtatusChange::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDonateTaskTtatusChange::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDonateTaskTtatusChange::template_id() const {
  return template_id_;
}
inline void FestDonateTaskTtatusChange::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestDonateTaskProto data = 2;
inline int FestDonateTaskTtatusChange::data_size() const {
  return data_.size();
}
inline void FestDonateTaskTtatusChange::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestDonateTaskProto& FestDonateTaskTtatusChange::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestDonateTaskProto* FestDonateTaskTtatusChange::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestDonateTaskProto* FestDonateTaskTtatusChange::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >&
FestDonateTaskTtatusChange::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >*
FestDonateTaskTtatusChange::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FestOnlineGetRewardReq

// optional int32 template_id = 1;
inline bool FestOnlineGetRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestOnlineGetRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestOnlineGetRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestOnlineGetRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestOnlineGetRewardReq::template_id() const {
  return template_id_;
}
inline void FestOnlineGetRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestOnlineGetRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestOnlineGetRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestOnlineGetRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestOnlineGetRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestOnlineGetRewardReq::id() const {
  return id_;
}
inline void FestOnlineGetRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestOnlineGetRewardRsp

// optional int32 ret = 1;
inline bool FestOnlineGetRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestOnlineGetRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestOnlineGetRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestOnlineGetRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestOnlineGetRewardRsp::ret() const {
  return ret_;
}
inline void FestOnlineGetRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestOnlineGetRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestOnlineGetRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestOnlineGetRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestOnlineGetRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestOnlineGetRewardRsp::template_id() const {
  return template_id_;
}
inline void FestOnlineGetRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestOnlineOneProto data = 3;
inline bool FestOnlineGetRewardRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestOnlineGetRewardRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestOnlineGetRewardRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestOnlineGetRewardRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestOnlineOneProto::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestOnlineOneProto& FestOnlineGetRewardRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestOnlineOneProto* FestOnlineGetRewardRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestOnlineOneProto;
  return data_;
}
inline ::proto_ff::FestOnlineOneProto* FestOnlineGetRewardRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestOnlineOneProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestOnlineGetRewardRsp::set_allocated_data(::proto_ff::FestOnlineOneProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestCollectWorldExchargeReq

// optional int32 template_id = 1;
inline bool FestCollectWorldExchargeReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCollectWorldExchargeReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCollectWorldExchargeReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCollectWorldExchargeReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCollectWorldExchargeReq::template_id() const {
  return template_id_;
}
inline void FestCollectWorldExchargeReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestCollectWorldExchargeReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCollectWorldExchargeReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCollectWorldExchargeReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCollectWorldExchargeReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestCollectWorldExchargeReq::id() const {
  return id_;
}
inline void FestCollectWorldExchargeReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestCollectWorldExchargeRsp

// optional int32 ret = 1;
inline bool FestCollectWorldExchargeRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCollectWorldExchargeRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCollectWorldExchargeRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCollectWorldExchargeRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestCollectWorldExchargeRsp::ret() const {
  return ret_;
}
inline void FestCollectWorldExchargeRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestCollectWorldExchargeRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCollectWorldExchargeRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCollectWorldExchargeRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCollectWorldExchargeRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCollectWorldExchargeRsp::template_id() const {
  return template_id_;
}
inline void FestCollectWorldExchargeRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestCollectWordOneProto data = 3;
inline bool FestCollectWorldExchargeRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestCollectWorldExchargeRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestCollectWorldExchargeRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestCollectWorldExchargeRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestCollectWordOneProto::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestCollectWordOneProto& FestCollectWorldExchargeRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestCollectWordOneProto* FestCollectWorldExchargeRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestCollectWordOneProto;
  return data_;
}
inline ::proto_ff::FestCollectWordOneProto* FestCollectWorldExchargeRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestCollectWordOneProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestCollectWorldExchargeRsp::set_allocated_data(::proto_ff::FestCollectWordOneProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestDrawPizeChouJiangReq

// optional int32 template_id = 1;
inline bool FestDrawPizeChouJiangReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeChouJiangReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeChouJiangReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeChouJiangReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeChouJiangReq::template_id() const {
  return template_id_;
}
inline void FestDrawPizeChouJiangReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 2;
inline bool FestDrawPizeChouJiangReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDrawPizeChouJiangReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDrawPizeChouJiangReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDrawPizeChouJiangReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FestDrawPizeChouJiangReq::type() const {
  return type_;
}
inline void FestDrawPizeChouJiangReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FestDrawPizeChouJiangRsp

// optional int32 ret = 1;
inline bool FestDrawPizeChouJiangRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeChouJiangRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeChouJiangRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeChouJiangRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDrawPizeChouJiangRsp::ret() const {
  return ret_;
}
inline void FestDrawPizeChouJiangRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDrawPizeChouJiangRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDrawPizeChouJiangRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDrawPizeChouJiangRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDrawPizeChouJiangRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeChouJiangRsp::template_id() const {
  return template_id_;
}
inline void FestDrawPizeChouJiangRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated int32 choujiang_id = 3;
inline int FestDrawPizeChouJiangRsp::choujiang_id_size() const {
  return choujiang_id_.size();
}
inline void FestDrawPizeChouJiangRsp::clear_choujiang_id() {
  choujiang_id_.Clear();
}
inline ::google::protobuf::int32 FestDrawPizeChouJiangRsp::choujiang_id(int index) const {
  return choujiang_id_.Get(index);
}
inline void FestDrawPizeChouJiangRsp::set_choujiang_id(int index, ::google::protobuf::int32 value) {
  choujiang_id_.Set(index, value);
}
inline void FestDrawPizeChouJiangRsp::add_choujiang_id(::google::protobuf::int32 value) {
  choujiang_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestDrawPizeChouJiangRsp::choujiang_id() const {
  return choujiang_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestDrawPizeChouJiangRsp::mutable_choujiang_id() {
  return &choujiang_id_;
}

// optional uint32 choujiang_num = 5;
inline bool FestDrawPizeChouJiangRsp::has_choujiang_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestDrawPizeChouJiangRsp::set_has_choujiang_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestDrawPizeChouJiangRsp::clear_has_choujiang_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestDrawPizeChouJiangRsp::clear_choujiang_num() {
  choujiang_num_ = 0u;
  clear_has_choujiang_num();
}
inline ::google::protobuf::uint32 FestDrawPizeChouJiangRsp::choujiang_num() const {
  return choujiang_num_;
}
inline void FestDrawPizeChouJiangRsp::set_choujiang_num(::google::protobuf::uint32 value) {
  set_has_choujiang_num();
  choujiang_num_ = value;
}

// -------------------------------------------------------------------

// FestDrawPizeGetRewardReq

// optional int32 template_id = 1;
inline bool FestDrawPizeGetRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeGetRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeGetRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeGetRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeGetRewardReq::template_id() const {
  return template_id_;
}
inline void FestDrawPizeGetRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestDrawPizeGetRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDrawPizeGetRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDrawPizeGetRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDrawPizeGetRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDrawPizeGetRewardReq::id() const {
  return id_;
}
inline void FestDrawPizeGetRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestDrawPizeGetRewardRsp

// optional int32 ret = 1;
inline bool FestDrawPizeGetRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeGetRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeGetRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeGetRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDrawPizeGetRewardRsp::ret() const {
  return ret_;
}
inline void FestDrawPizeGetRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDrawPizeGetRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDrawPizeGetRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDrawPizeGetRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDrawPizeGetRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeGetRewardRsp::template_id() const {
  return template_id_;
}
inline void FestDrawPizeGetRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.DrawPizeTaskProto data = 3;
inline bool FestDrawPizeGetRewardRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDrawPizeGetRewardRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDrawPizeGetRewardRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDrawPizeGetRewardRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::DrawPizeTaskProto::Clear();
  clear_has_data();
}
inline const ::proto_ff::DrawPizeTaskProto& FestDrawPizeGetRewardRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::DrawPizeTaskProto* FestDrawPizeGetRewardRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::DrawPizeTaskProto;
  return data_;
}
inline ::proto_ff::DrawPizeTaskProto* FestDrawPizeGetRewardRsp::release_data() {
  clear_has_data();
  ::proto_ff::DrawPizeTaskProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestDrawPizeGetRewardRsp::set_allocated_data(::proto_ff::DrawPizeTaskProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestDrawPizeLogReq

// optional int32 template_id = 1;
inline bool FestDrawPizeLogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeLogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeLogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeLogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeLogReq::template_id() const {
  return template_id_;
}
inline void FestDrawPizeLogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestDrawPizeLogRsp

// optional int32 ret = 1;
inline bool FestDrawPizeLogRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeLogRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeLogRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeLogRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDrawPizeLogRsp::ret() const {
  return ret_;
}
inline void FestDrawPizeLogRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDrawPizeLogRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDrawPizeLogRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDrawPizeLogRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDrawPizeLogRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeLogRsp::template_id() const {
  return template_id_;
}
inline void FestDrawPizeLogRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.DrawPizeLogDBProto log = 3;
inline int FestDrawPizeLogRsp::log_size() const {
  return log_.size();
}
inline void FestDrawPizeLogRsp::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::DrawPizeLogDBProto& FestDrawPizeLogRsp::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::DrawPizeLogDBProto* FestDrawPizeLogRsp::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::DrawPizeLogDBProto* FestDrawPizeLogRsp::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >&
FestDrawPizeLogRsp::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >*
FestDrawPizeLogRsp::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// FestDrawPizeGetServerNumReq

// optional int32 template_id = 1;
inline bool FestDrawPizeGetServerNumReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeGetServerNumReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeGetServerNumReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeGetServerNumReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeGetServerNumReq::template_id() const {
  return template_id_;
}
inline void FestDrawPizeGetServerNumReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestDrawPizeGetServerNumRsp

// optional int32 ret = 1;
inline bool FestDrawPizeGetServerNumRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDrawPizeGetServerNumRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDrawPizeGetServerNumRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDrawPizeGetServerNumRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestDrawPizeGetServerNumRsp::ret() const {
  return ret_;
}
inline void FestDrawPizeGetServerNumRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestDrawPizeGetServerNumRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDrawPizeGetServerNumRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDrawPizeGetServerNumRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDrawPizeGetServerNumRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDrawPizeGetServerNumRsp::template_id() const {
  return template_id_;
}
inline void FestDrawPizeGetServerNumRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 server_num = 3;
inline bool FestDrawPizeGetServerNumRsp::has_server_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDrawPizeGetServerNumRsp::set_has_server_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDrawPizeGetServerNumRsp::clear_has_server_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDrawPizeGetServerNumRsp::clear_server_num() {
  server_num_ = 0u;
  clear_has_server_num();
}
inline ::google::protobuf::uint32 FestDrawPizeGetServerNumRsp::server_num() const {
  return server_num_;
}
inline void FestDrawPizeGetServerNumRsp::set_server_num(::google::protobuf::uint32 value) {
  set_has_server_num();
  server_num_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetRewardReq

// optional int32 template_id = 1;
inline bool FestServerRankGetRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetRewardReq::template_id() const {
  return template_id_;
}
inline void FestServerRankGetRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 2;
inline bool FestServerRankGetRewardReq::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetRewardReq::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetRewardReq::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetRewardReq::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetRewardReq::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetRewardReq::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional int32 reward_id = 3;
inline bool FestServerRankGetRewardReq::has_reward_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankGetRewardReq::set_has_reward_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankGetRewardReq::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankGetRewardReq::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 FestServerRankGetRewardReq::reward_id() const {
  return reward_id_;
}
inline void FestServerRankGetRewardReq::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetRewardRsp

// optional int32 ret = 1;
inline bool FestServerRankGetRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestServerRankGetRewardRsp::ret() const {
  return ret_;
}
inline void FestServerRankGetRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestServerRankGetRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetRewardRsp::template_id() const {
  return template_id_;
}
inline void FestServerRankGetRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool FestServerRankGetRewardRsp::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankGetRewardRsp::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankGetRewardRsp::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankGetRewardRsp::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetRewardRsp::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetRewardRsp::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional .proto_ff.FestRankRewardData data = 4;
inline bool FestServerRankGetRewardRsp::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestServerRankGetRewardRsp::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestServerRankGetRewardRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestServerRankGetRewardRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestRankRewardData::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestRankRewardData& FestServerRankGetRewardRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestRankRewardData* FestServerRankGetRewardRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestRankRewardData;
  return data_;
}
inline ::proto_ff::FestRankRewardData* FestServerRankGetRewardRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestRankRewardData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestServerRankGetRewardRsp::set_allocated_data(::proto_ff::FestRankRewardData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FestServerRankRewardStatusChange

// optional int32 template_id = 1;
inline bool FestServerRankRewardStatusChange::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankRewardStatusChange::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankRewardStatusChange::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankRewardStatusChange::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankRewardStatusChange::template_id() const {
  return template_id_;
}
inline void FestServerRankRewardStatusChange::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 2;
inline bool FestServerRankRewardStatusChange::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankRewardStatusChange::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankRewardStatusChange::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankRewardStatusChange::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankRewardStatusChange::rank_id() const {
  return rank_id_;
}
inline void FestServerRankRewardStatusChange::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// repeated .proto_ff.FestRankRewardData data = 3;
inline int FestServerRankRewardStatusChange::data_size() const {
  return data_.size();
}
inline void FestServerRankRewardStatusChange::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestRankRewardData& FestServerRankRewardStatusChange::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestRankRewardData* FestServerRankRewardStatusChange::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestRankRewardData* FestServerRankRewardStatusChange::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankRewardData >&
FestServerRankRewardStatusChange::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankRewardData >*
FestServerRankRewardStatusChange::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FestServerRankGetMyRankReq

// optional int32 template_id = 1;
inline bool FestServerRankGetMyRankReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetMyRankReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetMyRankReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetMyRankReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetMyRankReq::template_id() const {
  return template_id_;
}
inline void FestServerRankGetMyRankReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 2;
inline bool FestServerRankGetMyRankReq::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetMyRankReq::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetMyRankReq::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetMyRankReq::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetMyRankReq::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetMyRankReq::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetMyRankRsp

// optional int32 ret = 1;
inline bool FestServerRankGetMyRankRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetMyRankRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetMyRankRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetMyRankRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestServerRankGetMyRankRsp::ret() const {
  return ret_;
}
inline void FestServerRankGetMyRankRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestServerRankGetMyRankRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetMyRankRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetMyRankRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetMyRankRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetMyRankRsp::template_id() const {
  return template_id_;
}
inline void FestServerRankGetMyRankRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool FestServerRankGetMyRankRsp::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankGetMyRankRsp::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankGetMyRankRsp::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankGetMyRankRsp::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetMyRankRsp::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetMyRankRsp::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional int32 my_rank = 4;
inline bool FestServerRankGetMyRankRsp::has_my_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestServerRankGetMyRankRsp::set_has_my_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestServerRankGetMyRankRsp::clear_has_my_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestServerRankGetMyRankRsp::clear_my_rank() {
  my_rank_ = 0;
  clear_has_my_rank();
}
inline ::google::protobuf::int32 FestServerRankGetMyRankRsp::my_rank() const {
  return my_rank_;
}
inline void FestServerRankGetMyRankRsp::set_my_rank(::google::protobuf::int32 value) {
  set_has_my_rank();
  my_rank_ = value;
}

// optional uint64 param = 5;
inline bool FestServerRankGetMyRankRsp::has_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestServerRankGetMyRankRsp::set_has_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestServerRankGetMyRankRsp::clear_has_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestServerRankGetMyRankRsp::clear_param() {
  param_ = GOOGLE_ULONGLONG(0);
  clear_has_param();
}
inline ::google::protobuf::uint64 FestServerRankGetMyRankRsp::param() const {
  return param_;
}
inline void FestServerRankGetMyRankRsp::set_param(::google::protobuf::uint64 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetAllRankReq

// optional int32 template_id = 1;
inline bool FestServerRankGetAllRankReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetAllRankReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetAllRankReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetAllRankReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetAllRankReq::template_id() const {
  return template_id_;
}
inline void FestServerRankGetAllRankReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 2;
inline bool FestServerRankGetAllRankReq::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetAllRankReq::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetAllRankReq::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetAllRankReq::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetAllRankReq::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetAllRankReq::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional int32 sex_type = 3;
inline bool FestServerRankGetAllRankReq::has_sex_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankGetAllRankReq::set_has_sex_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankGetAllRankReq::clear_has_sex_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankGetAllRankReq::clear_sex_type() {
  sex_type_ = 0;
  clear_has_sex_type();
}
inline ::google::protobuf::int32 FestServerRankGetAllRankReq::sex_type() const {
  return sex_type_;
}
inline void FestServerRankGetAllRankReq::set_sex_type(::google::protobuf::int32 value) {
  set_has_sex_type();
  sex_type_ = value;
}

// optional uint64 cid = 4;
inline bool FestServerRankGetAllRankReq::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestServerRankGetAllRankReq::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestServerRankGetAllRankReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestServerRankGetAllRankReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FestServerRankGetAllRankReq::cid() const {
  return cid_;
}
inline void FestServerRankGetAllRankReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 rank_type = 5;
inline bool FestServerRankGetAllRankReq::has_rank_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestServerRankGetAllRankReq::set_has_rank_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestServerRankGetAllRankReq::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestServerRankGetAllRankReq::clear_rank_type() {
  rank_type_ = 0u;
  clear_has_rank_type();
}
inline ::google::protobuf::uint32 FestServerRankGetAllRankReq::rank_type() const {
  return rank_type_;
}
inline void FestServerRankGetAllRankReq::set_rank_type(::google::protobuf::uint32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetAllRankRsp

// optional int32 ret = 1;
inline bool FestServerRankGetAllRankRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetAllRankRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetAllRankRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetAllRankRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestServerRankGetAllRankRsp::ret() const {
  return ret_;
}
inline void FestServerRankGetAllRankRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestServerRankGetAllRankRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetAllRankRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetAllRankRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetAllRankRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetAllRankRsp::template_id() const {
  return template_id_;
}
inline void FestServerRankGetAllRankRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool FestServerRankGetAllRankRsp::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankGetAllRankRsp::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankGetAllRankRsp::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankGetAllRankRsp::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetAllRankRsp::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetAllRankRsp::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// repeated .proto_ff.RankNodeData rankList = 4;
inline int FestServerRankGetAllRankRsp::ranklist_size() const {
  return ranklist_.size();
}
inline void FestServerRankGetAllRankRsp::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::proto_ff::RankNodeData& FestServerRankGetAllRankRsp::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::proto_ff::RankNodeData* FestServerRankGetAllRankRsp::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::proto_ff::RankNodeData* FestServerRankGetAllRankRsp::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RankNodeData >&
FestServerRankGetAllRankRsp::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RankNodeData >*
FestServerRankGetAllRankRsp::mutable_ranklist() {
  return &ranklist_;
}

// -------------------------------------------------------------------

// FestServerRankBuyGiftReq

// optional int32 template_id = 1;
inline bool FestServerRankBuyGiftReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankBuyGiftReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankBuyGiftReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankBuyGiftReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankBuyGiftReq::template_id() const {
  return template_id_;
}
inline void FestServerRankBuyGiftReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 2;
inline bool FestServerRankBuyGiftReq::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankBuyGiftReq::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankBuyGiftReq::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankBuyGiftReq::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankBuyGiftReq::rank_id() const {
  return rank_id_;
}
inline void FestServerRankBuyGiftReq::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// -------------------------------------------------------------------

// FestServerRankBuyGiftRsp

// optional int32 ret = 1;
inline bool FestServerRankBuyGiftRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankBuyGiftRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankBuyGiftRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankBuyGiftRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestServerRankBuyGiftRsp::ret() const {
  return ret_;
}
inline void FestServerRankBuyGiftRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestServerRankBuyGiftRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankBuyGiftRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankBuyGiftRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankBuyGiftRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankBuyGiftRsp::template_id() const {
  return template_id_;
}
inline void FestServerRankBuyGiftRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool FestServerRankBuyGiftRsp::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankBuyGiftRsp::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankBuyGiftRsp::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankBuyGiftRsp::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankBuyGiftRsp::rank_id() const {
  return rank_id_;
}
inline void FestServerRankBuyGiftRsp::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional uint32 gift_status = 4;
inline bool FestServerRankBuyGiftRsp::has_gift_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestServerRankBuyGiftRsp::set_has_gift_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestServerRankBuyGiftRsp::clear_has_gift_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestServerRankBuyGiftRsp::clear_gift_status() {
  gift_status_ = 0u;
  clear_has_gift_status();
}
inline ::google::protobuf::uint32 FestServerRankBuyGiftRsp::gift_status() const {
  return gift_status_;
}
inline void FestServerRankBuyGiftRsp::set_gift_status(::google::protobuf::uint32 value) {
  set_has_gift_status();
  gift_status_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetRedPointRewardReq

// optional int32 template_id = 1;
inline bool FestServerRankGetRedPointRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetRedPointRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetRedPointRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetRedPointRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetRedPointRewardReq::template_id() const {
  return template_id_;
}
inline void FestServerRankGetRedPointRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 2;
inline bool FestServerRankGetRedPointRewardReq::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetRedPointRewardReq::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetRedPointRewardReq::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetRedPointRewardReq::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetRedPointRewardReq::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetRedPointRewardReq::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// -------------------------------------------------------------------

// FestServerRankGetRedPointRewardRsp

// optional int32 ret = 1;
inline bool FestServerRankGetRedPointRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankGetRedPointRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestServerRankGetRedPointRewardRsp::ret() const {
  return ret_;
}
inline void FestServerRankGetRedPointRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestServerRankGetRedPointRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestServerRankGetRedPointRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankGetRedPointRewardRsp::template_id() const {
  return template_id_;
}
inline void FestServerRankGetRedPointRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool FestServerRankGetRedPointRewardRsp::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestServerRankGetRedPointRewardRsp::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 FestServerRankGetRedPointRewardRsp::rank_id() const {
  return rank_id_;
}
inline void FestServerRankGetRedPointRewardRsp::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional uint32 red_point_status = 4;
inline bool FestServerRankGetRedPointRewardRsp::has_red_point_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestServerRankGetRedPointRewardRsp::set_has_red_point_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_has_red_point_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestServerRankGetRedPointRewardRsp::clear_red_point_status() {
  red_point_status_ = 0u;
  clear_has_red_point_status();
}
inline ::google::protobuf::uint32 FestServerRankGetRedPointRewardRsp::red_point_status() const {
  return red_point_status_;
}
inline void FestServerRankGetRedPointRewardRsp::set_red_point_status(::google::protobuf::uint32 value) {
  set_has_red_point_status();
  red_point_status_ = value;
}

// -------------------------------------------------------------------

// FestServerRankStatusChange

// optional int32 template_id = 1;
inline bool FestServerRankStatusChange::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestServerRankStatusChange::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestServerRankStatusChange::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestServerRankStatusChange::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestServerRankStatusChange::template_id() const {
  return template_id_;
}
inline void FestServerRankStatusChange::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestRankData rank = 2;
inline int FestServerRankStatusChange::rank_size() const {
  return rank_.size();
}
inline void FestServerRankStatusChange::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::FestRankData& FestServerRankStatusChange::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::FestRankData* FestServerRankStatusChange::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::FestRankData* FestServerRankStatusChange::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankData >&
FestServerRankStatusChange::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRankData >*
FestServerRankStatusChange::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// FestCandleFetchReq

// optional int32 template_id = 1;
inline bool FestCandleFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCandleFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCandleFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCandleFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCandleFetchReq::template_id() const {
  return template_id_;
}
inline void FestCandleFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool FestCandleFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCandleFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCandleFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCandleFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestCandleFetchReq::id() const {
  return id_;
}
inline void FestCandleFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FestCandleFetchRsp

// optional int32 ret = 1;
inline bool FestCandleFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCandleFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCandleFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCandleFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestCandleFetchRsp::ret() const {
  return ret_;
}
inline void FestCandleFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestCandleFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCandleFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCandleFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCandleFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCandleFetchRsp::template_id() const {
  return template_id_;
}
inline void FestCandleFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestCandleFetchLstRsp

// optional int32 template_id = 1;
inline bool FestCandleFetchLstRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCandleFetchLstRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCandleFetchLstRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCandleFetchLstRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCandleFetchLstRsp::template_id() const {
  return template_id_;
}
inline void FestCandleFetchLstRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated int32 id_lst = 2;
inline int FestCandleFetchLstRsp::id_lst_size() const {
  return id_lst_.size();
}
inline void FestCandleFetchLstRsp::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::int32 FestCandleFetchLstRsp::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void FestCandleFetchLstRsp::set_id_lst(int index, ::google::protobuf::int32 value) {
  id_lst_.Set(index, value);
}
inline void FestCandleFetchLstRsp::add_id_lst(::google::protobuf::int32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestCandleFetchLstRsp::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestCandleFetchLstRsp::mutable_id_lst() {
  return &id_lst_;
}

// -------------------------------------------------------------------

// FestCandleRankReq

// optional int32 template_id = 1;
inline bool FestCandleRankReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCandleRankReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCandleRankReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCandleRankReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCandleRankReq::template_id() const {
  return template_id_;
}
inline void FestCandleRankReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestCandleRankRsp

// optional int32 ret = 1;
inline bool FestCandleRankRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestCandleRankRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestCandleRankRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestCandleRankRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FestCandleRankRsp::ret() const {
  return ret_;
}
inline void FestCandleRankRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FestCandleRankRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCandleRankRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCandleRankRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCandleRankRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestCandleRankRsp::template_id() const {
  return template_id_;
}
inline void FestCandleRankRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestCandRankProto rank = 3;
inline int FestCandleRankRsp::rank_size() const {
  return rank_.size();
}
inline void FestCandleRankRsp::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::FestCandRankProto& FestCandleRankRsp::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::FestCandRankProto* FestCandleRankRsp::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::FestCandRankProto* FestCandleRankRsp::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCandRankProto >&
FestCandleRankRsp::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCandRankProto >*
FestCandleRankRsp::mutable_rank() {
  return &rank_;
}

// optional uint64 harm = 4;
inline bool FestCandleRankRsp::has_harm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestCandleRankRsp::set_has_harm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestCandleRankRsp::clear_has_harm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestCandleRankRsp::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 FestCandleRankRsp::harm() const {
  return harm_;
}
inline void FestCandleRankRsp::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// Fest_L2C_DigEgg_OpRsp

// optional bytes name = 1;
inline bool Fest_L2C_DigEgg_OpRsp::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_DigEgg_OpRsp::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Fest_L2C_DigEgg_OpRsp::name() const {
  return *name_;
}
inline void Fest_L2C_DigEgg_OpRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fest_L2C_DigEgg_OpRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fest_L2C_DigEgg_OpRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fest_L2C_DigEgg_OpRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Fest_L2C_DigEgg_OpRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Fest_L2C_DigEgg_OpRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool Fest_L2C_DigEgg_OpRsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2C_DigEgg_OpRsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_L2C_DigEgg_OpRsp::id() const {
  return id_;
}
inline void Fest_L2C_DigEgg_OpRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 template_id = 3;
inline bool Fest_L2C_DigEgg_OpRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_L2C_DigEgg_OpRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_DigEgg_OpRsp::template_id() const {
  return template_id_;
}
inline void Fest_L2C_DigEgg_OpRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint64 cid = 4;
inline bool Fest_L2C_DigEgg_OpRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_L2C_DigEgg_OpRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_L2C_DigEgg_OpRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2C_DigEgg_OpRsp::cid() const {
  return cid_;
}
inline void Fest_L2C_DigEgg_OpRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Fest_L2C_LogReq

// optional uint64 cid = 1;
inline bool Fest_L2C_LogReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_LogReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_LogReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_LogReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2C_LogReq::cid() const {
  return cid_;
}
inline void Fest_L2C_LogReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_L2C_LogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2C_LogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2C_LogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2C_LogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_LogReq::template_id() const {
  return template_id_;
}
inline void Fest_L2C_LogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_L2C_RTurnable_OpRsp

// optional int32 template_id = 1;
inline bool Fest_L2C_RTurnable_OpRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_RTurnable_OpRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_RTurnable_OpRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_RTurnable_OpRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_RTurnable_OpRsp::template_id() const {
  return template_id_;
}
inline void Fest_L2C_RTurnable_OpRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.RTurnableLogDBProto log = 2;
inline bool Fest_L2C_RTurnable_OpRsp::has_log() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2C_RTurnable_OpRsp::set_has_log() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2C_RTurnable_OpRsp::clear_has_log() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2C_RTurnable_OpRsp::clear_log() {
  if (log_ != NULL) log_->::proto_ff::RTurnableLogDBProto::Clear();
  clear_has_log();
}
inline const ::proto_ff::RTurnableLogDBProto& Fest_L2C_RTurnable_OpRsp::log() const {
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::proto_ff::RTurnableLogDBProto* Fest_L2C_RTurnable_OpRsp::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::proto_ff::RTurnableLogDBProto;
  return log_;
}
inline ::proto_ff::RTurnableLogDBProto* Fest_L2C_RTurnable_OpRsp::release_log() {
  clear_has_log();
  ::proto_ff::RTurnableLogDBProto* temp = log_;
  log_ = NULL;
  return temp;
}
inline void Fest_L2C_RTurnable_OpRsp::set_allocated_log(::proto_ff::RTurnableLogDBProto* log) {
  delete log_;
  log_ = log;
  if (log) {
    set_has_log();
  } else {
    clear_has_log();
  }
}

// -------------------------------------------------------------------

// Fest_L2C_RTurnable_LogReq

// optional uint64 cid = 1;
inline bool Fest_L2C_RTurnable_LogReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_RTurnable_LogReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_RTurnable_LogReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_RTurnable_LogReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2C_RTurnable_LogReq::cid() const {
  return cid_;
}
inline void Fest_L2C_RTurnable_LogReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_L2C_RTurnable_LogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2C_RTurnable_LogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2C_RTurnable_LogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2C_RTurnable_LogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_RTurnable_LogReq::template_id() const {
  return template_id_;
}
inline void Fest_L2C_RTurnable_LogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_L2C_DonateOperate_Notify

// optional uint64 cid = 1;
inline bool Fest_L2C_DonateOperate_Notify::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_DonateOperate_Notify::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_DonateOperate_Notify::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_DonateOperate_Notify::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2C_DonateOperate_Notify::cid() const {
  return cid_;
}
inline void Fest_L2C_DonateOperate_Notify::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_L2C_DonateOperate_Notify::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2C_DonateOperate_Notify::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2C_DonateOperate_Notify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2C_DonateOperate_Notify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_DonateOperate_Notify::template_id() const {
  return template_id_;
}
inline void Fest_L2C_DonateOperate_Notify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 single_num = 3;
inline bool Fest_L2C_DonateOperate_Notify::has_single_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_L2C_DonateOperate_Notify::set_has_single_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_L2C_DonateOperate_Notify::clear_has_single_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_L2C_DonateOperate_Notify::clear_single_num() {
  single_num_ = 0u;
  clear_has_single_num();
}
inline ::google::protobuf::uint32 Fest_L2C_DonateOperate_Notify::single_num() const {
  return single_num_;
}
inline void Fest_L2C_DonateOperate_Notify::set_single_num(::google::protobuf::uint32 value) {
  set_has_single_num();
  single_num_ = value;
}

// -------------------------------------------------------------------

// Fest_C2L_DonateGetServerRewardReq

// optional int32 template_id = 1;
inline bool Fest_C2L_DonateGetServerRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_C2L_DonateGetServerRewardReq::template_id() const {
  return template_id_;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_C2L_DonateGetServerRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_C2L_DonateGetServerRewardReq::id() const {
  return id_;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 server_num = 3;
inline bool Fest_C2L_DonateGetServerRewardReq::has_server_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_has_server_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_has_server_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_server_num() {
  server_num_ = 0u;
  clear_has_server_num();
}
inline ::google::protobuf::uint32 Fest_C2L_DonateGetServerRewardReq::server_num() const {
  return server_num_;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_server_num(::google::protobuf::uint32 value) {
  set_has_server_num();
  server_num_ = value;
}

// optional uint64 cid = 4;
inline bool Fest_C2L_DonateGetServerRewardReq::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_C2L_DonateGetServerRewardReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_C2L_DonateGetServerRewardReq::cid() const {
  return cid_;
}
inline void Fest_C2L_DonateGetServerRewardReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Fest_L2C_DrawPizeLogReq

// optional int32 template_id = 1;
inline bool Fest_L2C_DrawPizeLogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_DrawPizeLogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_DrawPizeLogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_DrawPizeLogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_DrawPizeLogReq::template_id() const {
  return template_id_;
}
inline void Fest_L2C_DrawPizeLogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.DrawPizeLogDBProto log = 2;
inline int Fest_L2C_DrawPizeLogReq::log_size() const {
  return log_.size();
}
inline void Fest_L2C_DrawPizeLogReq::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::DrawPizeLogDBProto& Fest_L2C_DrawPizeLogReq::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::DrawPizeLogDBProto* Fest_L2C_DrawPizeLogReq::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::DrawPizeLogDBProto* Fest_L2C_DrawPizeLogReq::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >&
Fest_L2C_DrawPizeLogReq::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DrawPizeLogDBProto >*
Fest_L2C_DrawPizeLogReq::mutable_log() {
  return &log_;
}

// optional int32 choujiang_num = 3;
inline bool Fest_L2C_DrawPizeLogReq::has_choujiang_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_L2C_DrawPizeLogReq::set_has_choujiang_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_L2C_DrawPizeLogReq::clear_has_choujiang_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_L2C_DrawPizeLogReq::clear_choujiang_num() {
  choujiang_num_ = 0;
  clear_has_choujiang_num();
}
inline ::google::protobuf::int32 Fest_L2C_DrawPizeLogReq::choujiang_num() const {
  return choujiang_num_;
}
inline void Fest_L2C_DrawPizeLogReq::set_choujiang_num(::google::protobuf::int32 value) {
  set_has_choujiang_num();
  choujiang_num_ = value;
}

// -------------------------------------------------------------------

// Fest_L2C_DrawPizeChouJiangGetServerNumReq

// optional int32 template_id = 1;
inline bool Fest_L2C_DrawPizeChouJiangGetServerNumReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_L2C_DrawPizeChouJiangGetServerNumReq::template_id() const {
  return template_id_;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 2;
inline bool Fest_L2C_DrawPizeChouJiangGetServerNumReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Fest_L2C_DrawPizeChouJiangGetServerNumReq::type() const {
  return type_;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 cid = 3;
inline bool Fest_L2C_DrawPizeChouJiangGetServerNumReq::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2C_DrawPizeChouJiangGetServerNumReq::cid() const {
  return cid_;
}
inline void Fest_L2C_DrawPizeChouJiangGetServerNumReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Fest_C2L_DrawPizeChouJiangGetServerNumRsp

// optional int32 template_id = 1;
inline bool Fest_C2L_DrawPizeChouJiangGetServerNumRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_C2L_DrawPizeChouJiangGetServerNumRsp::template_id() const {
  return template_id_;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 2;
inline bool Fest_C2L_DrawPizeChouJiangGetServerNumRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Fest_C2L_DrawPizeChouJiangGetServerNumRsp::type() const {
  return type_;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 server_num = 3;
inline bool Fest_C2L_DrawPizeChouJiangGetServerNumRsp::has_server_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_has_server_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_has_server_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_server_num() {
  server_num_ = 0u;
  clear_has_server_num();
}
inline ::google::protobuf::uint32 Fest_C2L_DrawPizeChouJiangGetServerNumRsp::server_num() const {
  return server_num_;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_server_num(::google::protobuf::uint32 value) {
  set_has_server_num();
  server_num_ = value;
}

// optional uint64 cid = 4;
inline bool Fest_C2L_DrawPizeChouJiangGetServerNumRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_C2L_DrawPizeChouJiangGetServerNumRsp::cid() const {
  return cid_;
}
inline void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Fest_C2L_ServerRankSyncReq

// optional uint64 cid = 1;
inline bool Fest_C2L_ServerRankSyncReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_C2L_ServerRankSyncReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_C2L_ServerRankSyncReq::cid() const {
  return cid_;
}
inline void Fest_C2L_ServerRankSyncReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_C2L_ServerRankSyncReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_C2L_ServerRankSyncReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncReq::template_id() const {
  return template_id_;
}
inline void Fest_C2L_ServerRankSyncReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool Fest_C2L_ServerRankSyncReq::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_C2L_ServerRankSyncReq::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncReq::rank_id() const {
  return rank_id_;
}
inline void Fest_C2L_ServerRankSyncReq::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional int32 rank_type = 4;
inline bool Fest_C2L_ServerRankSyncReq::has_rank_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_C2L_ServerRankSyncReq::set_has_rank_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_C2L_ServerRankSyncReq::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncReq::rank_type() const {
  return rank_type_;
}
inline void Fest_C2L_ServerRankSyncReq::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// -------------------------------------------------------------------

// Fest_C2L_ServerRankSyncRsp

// optional uint64 cid = 1;
inline bool Fest_C2L_ServerRankSyncRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_C2L_ServerRankSyncRsp::cid() const {
  return cid_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_C2L_ServerRankSyncRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncRsp::template_id() const {
  return template_id_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 rank_id = 3;
inline bool Fest_C2L_ServerRankSyncRsp::has_rank_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_rank_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncRsp::rank_id() const {
  return rank_id_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional int32 rank_type = 4;
inline bool Fest_C2L_ServerRankSyncRsp::has_rank_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_rank_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncRsp::rank_type() const {
  return rank_type_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// optional int32 my_rank = 5;
inline bool Fest_C2L_ServerRankSyncRsp::has_my_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_my_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_my_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_my_rank() {
  my_rank_ = 0;
  clear_has_my_rank();
}
inline ::google::protobuf::int32 Fest_C2L_ServerRankSyncRsp::my_rank() const {
  return my_rank_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_my_rank(::google::protobuf::int32 value) {
  set_has_my_rank();
  my_rank_ = value;
}

// optional uint64 param = 6;
inline bool Fest_C2L_ServerRankSyncRsp::has_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_param() {
  param_ = GOOGLE_ULONGLONG(0);
  clear_has_param();
}
inline ::google::protobuf::uint64 Fest_C2L_ServerRankSyncRsp::param() const {
  return param_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_param(::google::protobuf::uint64 value) {
  set_has_param();
  param_ = value;
}

// optional bool finish = 7;
inline bool Fest_C2L_ServerRankSyncRsp::has_finish() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Fest_C2L_ServerRankSyncRsp::set_has_finish() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_has_finish() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Fest_C2L_ServerRankSyncRsp::clear_finish() {
  finish_ = false;
  clear_has_finish();
}
inline bool Fest_C2L_ServerRankSyncRsp::finish() const {
  return finish_;
}
inline void Fest_C2L_ServerRankSyncRsp::set_finish(bool value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// Fest_S2C_CandleRankReward

// repeated .proto_ff.ComPair64 cidrank = 1;
inline int Fest_S2C_CandleRankReward::cidrank_size() const {
  return cidrank_.size();
}
inline void Fest_S2C_CandleRankReward::clear_cidrank() {
  cidrank_.Clear();
}
inline const ::proto_ff::ComPair64& Fest_S2C_CandleRankReward::cidrank(int index) const {
  return cidrank_.Get(index);
}
inline ::proto_ff::ComPair64* Fest_S2C_CandleRankReward::mutable_cidrank(int index) {
  return cidrank_.Mutable(index);
}
inline ::proto_ff::ComPair64* Fest_S2C_CandleRankReward::add_cidrank() {
  return cidrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
Fest_S2C_CandleRankReward::cidrank() const {
  return cidrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
Fest_S2C_CandleRankReward::mutable_cidrank() {
  return &cidrank_;
}

// -------------------------------------------------------------------

// Fest_L2S_CandleAddHarm

// optional uint64 cid = 1;
inline bool Fest_L2S_CandleAddHarm::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2S_CandleAddHarm::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2S_CandleAddHarm::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2S_CandleAddHarm::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2S_CandleAddHarm::cid() const {
  return cid_;
}
inline void Fest_L2S_CandleAddHarm::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool Fest_L2S_CandleAddHarm::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2S_CandleAddHarm::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2S_CandleAddHarm::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2S_CandleAddHarm::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Fest_L2S_CandleAddHarm::name() const {
  return *name_;
}
inline void Fest_L2S_CandleAddHarm::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fest_L2S_CandleAddHarm::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fest_L2S_CandleAddHarm::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fest_L2S_CandleAddHarm::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Fest_L2S_CandleAddHarm::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Fest_L2S_CandleAddHarm::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 harm = 3;
inline bool Fest_L2S_CandleAddHarm::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_L2S_CandleAddHarm::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_L2S_CandleAddHarm::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_L2S_CandleAddHarm::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 Fest_L2S_CandleAddHarm::harm() const {
  return harm_;
}
inline void Fest_L2S_CandleAddHarm::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint32 zid = 4;
inline bool Fest_L2S_CandleAddHarm::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_L2S_CandleAddHarm::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_L2S_CandleAddHarm::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_L2S_CandleAddHarm::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Fest_L2S_CandleAddHarm::zid() const {
  return zid_;
}
inline void Fest_L2S_CandleAddHarm::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 logicid = 5;
inline bool Fest_L2S_CandleAddHarm::has_logicid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Fest_L2S_CandleAddHarm::set_has_logicid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Fest_L2S_CandleAddHarm::clear_has_logicid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Fest_L2S_CandleAddHarm::clear_logicid() {
  logicid_ = 0u;
  clear_has_logicid();
}
inline ::google::protobuf::uint32 Fest_L2S_CandleAddHarm::logicid() const {
  return logicid_;
}
inline void Fest_L2S_CandleAddHarm::set_logicid(::google::protobuf::uint32 value) {
  set_has_logicid();
  logicid_ = value;
}

// -------------------------------------------------------------------

// Fest_S2L_CandleTotalHarmRsp

// optional uint64 cid = 1;
inline bool Fest_S2L_CandleTotalHarmRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_S2L_CandleTotalHarmRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_S2L_CandleTotalHarmRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_S2L_CandleTotalHarmRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_S2L_CandleTotalHarmRsp::cid() const {
  return cid_;
}
inline void Fest_S2L_CandleTotalHarmRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int64 total_harm = 2;
inline bool Fest_S2L_CandleTotalHarmRsp::has_total_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_S2L_CandleTotalHarmRsp::set_has_total_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_S2L_CandleTotalHarmRsp::clear_has_total_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_S2L_CandleTotalHarmRsp::clear_total_harm() {
  total_harm_ = GOOGLE_LONGLONG(0);
  clear_has_total_harm();
}
inline ::google::protobuf::int64 Fest_S2L_CandleTotalHarmRsp::total_harm() const {
  return total_harm_;
}
inline void Fest_S2L_CandleTotalHarmRsp::set_total_harm(::google::protobuf::int64 value) {
  set_has_total_harm();
  total_harm_ = value;
}

// -------------------------------------------------------------------

// Fest_L2S_CandleRankReq

// optional uint64 cid = 1;
inline bool Fest_L2S_CandleRankReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_L2S_CandleRankReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_L2S_CandleRankReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_L2S_CandleRankReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Fest_L2S_CandleRankReq::cid() const {
  return cid_;
}
inline void Fest_L2S_CandleRankReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int64 harm = 2;
inline bool Fest_L2S_CandleRankReq::has_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_L2S_CandleRankReq::set_has_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_L2S_CandleRankReq::clear_has_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_L2S_CandleRankReq::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 Fest_L2S_CandleRankReq::harm() const {
  return harm_;
}
inline void Fest_L2S_CandleRankReq::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint32 zid = 3;
inline bool Fest_L2S_CandleRankReq::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_L2S_CandleRankReq::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_L2S_CandleRankReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_L2S_CandleRankReq::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Fest_L2S_CandleRankReq::zid() const {
  return zid_;
}
inline void Fest_L2S_CandleRankReq::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// Fest_BossFirstOptReq

// optional int32 template_id = 1;
inline bool Fest_BossFirstOptReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_BossFirstOptReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_BossFirstOptReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_BossFirstOptReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_BossFirstOptReq::template_id() const {
  return template_id_;
}
inline void Fest_BossFirstOptReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_BossFirstOptReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_BossFirstOptReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_BossFirstOptReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_BossFirstOptReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_BossFirstOptReq::id() const {
  return id_;
}
inline void Fest_BossFirstOptReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 3;
inline bool Fest_BossFirstOptReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_BossFirstOptReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_BossFirstOptReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_BossFirstOptReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Fest_BossFirstOptReq::type() const {
  return type_;
}
inline void Fest_BossFirstOptReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Fest_BossFirstOptRsp

// optional int32 ret = 1;
inline bool Fest_BossFirstOptRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_BossFirstOptRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_BossFirstOptRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_BossFirstOptRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_BossFirstOptRsp::ret() const {
  return ret_;
}
inline void Fest_BossFirstOptRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool Fest_BossFirstOptRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_BossFirstOptRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_BossFirstOptRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_BossFirstOptRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_BossFirstOptRsp::template_id() const {
  return template_id_;
}
inline void Fest_BossFirstOptRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 3;
inline bool Fest_BossFirstOptRsp::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_BossFirstOptRsp::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_BossFirstOptRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_BossFirstOptRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_BossFirstOptRsp::id() const {
  return id_;
}
inline void Fest_BossFirstOptRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 4;
inline bool Fest_BossFirstOptRsp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_BossFirstOptRsp::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_BossFirstOptRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_BossFirstOptRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Fest_BossFirstOptRsp::type() const {
  return type_;
}
inline void Fest_BossFirstOptRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Fest_BossInfoReq

// optional int32 template_id = 1;
inline bool Fest_BossInfoReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_BossInfoReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_BossInfoReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_BossInfoReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_BossInfoReq::template_id() const {
  return template_id_;
}
inline void Fest_BossInfoReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestBossInfo

// optional int32 id = 1;
inline bool FestBossInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestBossInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestBossInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestBossInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestBossInfo::id() const {
  return id_;
}
inline void FestBossInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 refresh_time = 2;
inline bool FestBossInfo::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestBossInfo::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestBossInfo::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestBossInfo::clear_refresh_time() {
  refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_refresh_time();
}
inline ::google::protobuf::uint64 FestBossInfo::refresh_time() const {
  return refresh_time_;
}
inline void FestBossInfo::set_refresh_time(::google::protobuf::uint64 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// optional uint64 kill_cid = 3;
inline bool FestBossInfo::has_kill_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestBossInfo::set_has_kill_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestBossInfo::clear_has_kill_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestBossInfo::clear_kill_cid() {
  kill_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_kill_cid();
}
inline ::google::protobuf::uint64 FestBossInfo::kill_cid() const {
  return kill_cid_;
}
inline void FestBossInfo::set_kill_cid(::google::protobuf::uint64 value) {
  set_has_kill_cid();
  kill_cid_ = value;
}

// optional bytes kill_name = 4;
inline bool FestBossInfo::has_kill_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestBossInfo::set_has_kill_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestBossInfo::clear_has_kill_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestBossInfo::clear_kill_name() {
  if (kill_name_ != &::google::protobuf::internal::kEmptyString) {
    kill_name_->clear();
  }
  clear_has_kill_name();
}
inline const ::std::string& FestBossInfo::kill_name() const {
  return *kill_name_;
}
inline void FestBossInfo::set_kill_name(const ::std::string& value) {
  set_has_kill_name();
  if (kill_name_ == &::google::protobuf::internal::kEmptyString) {
    kill_name_ = new ::std::string;
  }
  kill_name_->assign(value);
}
inline void FestBossInfo::set_kill_name(const char* value) {
  set_has_kill_name();
  if (kill_name_ == &::google::protobuf::internal::kEmptyString) {
    kill_name_ = new ::std::string;
  }
  kill_name_->assign(value);
}
inline void FestBossInfo::set_kill_name(const void* value, size_t size) {
  set_has_kill_name();
  if (kill_name_ == &::google::protobuf::internal::kEmptyString) {
    kill_name_ = new ::std::string;
  }
  kill_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FestBossInfo::mutable_kill_name() {
  set_has_kill_name();
  if (kill_name_ == &::google::protobuf::internal::kEmptyString) {
    kill_name_ = new ::std::string;
  }
  return kill_name_;
}
inline ::std::string* FestBossInfo::release_kill_name() {
  clear_has_kill_name();
  if (kill_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kill_name_;
    kill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FestBossInfo::set_allocated_kill_name(::std::string* kill_name) {
  if (kill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete kill_name_;
  }
  if (kill_name) {
    set_has_kill_name();
    kill_name_ = kill_name;
  } else {
    clear_has_kill_name();
    kill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 kill_time = 5;
inline bool FestBossInfo::has_kill_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestBossInfo::set_has_kill_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestBossInfo::clear_has_kill_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestBossInfo::clear_kill_time() {
  kill_time_ = GOOGLE_ULONGLONG(0);
  clear_has_kill_time();
}
inline ::google::protobuf::uint64 FestBossInfo::kill_time() const {
  return kill_time_;
}
inline void FestBossInfo::set_kill_time(::google::protobuf::uint64 value) {
  set_has_kill_time();
  kill_time_ = value;
}

// optional uint32 teamid = 6;
inline bool FestBossInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FestBossInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FestBossInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FestBossInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 FestBossInfo::teamid() const {
  return teamid_;
}
inline void FestBossInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional .proto_ff.RoleHeadPicProto head = 7;
inline bool FestBossInfo::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FestBossInfo::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FestBossInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FestBossInfo::clear_head() {
  if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
  clear_has_head();
}
inline const ::proto_ff::RoleHeadPicProto& FestBossInfo::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::proto_ff::RoleHeadPicProto* FestBossInfo::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::proto_ff::RoleHeadPicProto;
  return head_;
}
inline ::proto_ff::RoleHeadPicProto* FestBossInfo::release_head() {
  clear_has_head();
  ::proto_ff::RoleHeadPicProto* temp = head_;
  head_ = NULL;
  return temp;
}
inline void FestBossInfo::set_allocated_head(::proto_ff::RoleHeadPicProto* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// Fest_BossInfoRsp

// optional int32 template_id = 1;
inline bool Fest_BossInfoRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_BossInfoRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_BossInfoRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_BossInfoRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_BossInfoRsp::template_id() const {
  return template_id_;
}
inline void Fest_BossInfoRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestBossInfo infos = 2;
inline int Fest_BossInfoRsp::infos_size() const {
  return infos_.size();
}
inline void Fest_BossInfoRsp::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::FestBossInfo& Fest_BossInfoRsp::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::FestBossInfo* Fest_BossInfoRsp::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::FestBossInfo* Fest_BossInfoRsp::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >&
Fest_BossInfoRsp::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >*
Fest_BossInfoRsp::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// Fest_BFGlobalDBKill

// optional int32 id = 1;
inline bool Fest_BFGlobalDBKill::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_BFGlobalDBKill::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_BFGlobalDBKill::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_BFGlobalDBKill::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_BFGlobalDBKill::id() const {
  return id_;
}
inline void Fest_BFGlobalDBKill::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 kill_cid = 2;
inline bool Fest_BFGlobalDBKill::has_kill_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_BFGlobalDBKill::set_has_kill_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_BFGlobalDBKill::clear_has_kill_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_BFGlobalDBKill::clear_kill_cid() {
  kill_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_kill_cid();
}
inline ::google::protobuf::uint64 Fest_BFGlobalDBKill::kill_cid() const {
  return kill_cid_;
}
inline void Fest_BFGlobalDBKill::set_kill_cid(::google::protobuf::uint64 value) {
  set_has_kill_cid();
  kill_cid_ = value;
}

// optional uint64 kill_time = 3;
inline bool Fest_BFGlobalDBKill::has_kill_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_BFGlobalDBKill::set_has_kill_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_BFGlobalDBKill::clear_has_kill_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_BFGlobalDBKill::clear_kill_time() {
  kill_time_ = GOOGLE_ULONGLONG(0);
  clear_has_kill_time();
}
inline ::google::protobuf::uint64 Fest_BFGlobalDBKill::kill_time() const {
  return kill_time_;
}
inline void Fest_BFGlobalDBKill::set_kill_time(::google::protobuf::uint64 value) {
  set_has_kill_time();
  kill_time_ = value;
}

// optional uint32 teamid = 4;
inline bool Fest_BFGlobalDBKill::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_BFGlobalDBKill::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_BFGlobalDBKill::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_BFGlobalDBKill::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 Fest_BFGlobalDBKill::teamid() const {
  return teamid_;
}
inline void Fest_BFGlobalDBKill::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// Fest_BFGlobalDBEntry

// optional int32 tmpId = 1;
inline bool Fest_BFGlobalDBEntry::has_tmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_BFGlobalDBEntry::set_has_tmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_BFGlobalDBEntry::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_BFGlobalDBEntry::clear_tmpid() {
  tmpid_ = 0;
  clear_has_tmpid();
}
inline ::google::protobuf::int32 Fest_BFGlobalDBEntry::tmpid() const {
  return tmpid_;
}
inline void Fest_BFGlobalDBEntry::set_tmpid(::google::protobuf::int32 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// repeated .proto_ff.Fest_BFGlobalDBKill infos = 2;
inline int Fest_BFGlobalDBEntry::infos_size() const {
  return infos_.size();
}
inline void Fest_BFGlobalDBEntry::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::Fest_BFGlobalDBKill& Fest_BFGlobalDBEntry::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::Fest_BFGlobalDBKill* Fest_BFGlobalDBEntry::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::Fest_BFGlobalDBKill* Fest_BFGlobalDBEntry::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBKill >&
Fest_BFGlobalDBEntry::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBKill >*
Fest_BFGlobalDBEntry::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// Fest_BFGlobalDB

// repeated .proto_ff.Fest_BFGlobalDBEntry entrys = 1;
inline int Fest_BFGlobalDB::entrys_size() const {
  return entrys_.size();
}
inline void Fest_BFGlobalDB::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::Fest_BFGlobalDBEntry& Fest_BFGlobalDB::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::Fest_BFGlobalDBEntry* Fest_BFGlobalDB::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::Fest_BFGlobalDBEntry* Fest_BFGlobalDB::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBEntry >&
Fest_BFGlobalDB::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_BFGlobalDBEntry >*
Fest_BFGlobalDB::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// L2CFest_BossKFSimpleReq

// optional uint64 roleid = 1;
inline bool L2CFest_BossKFSimpleReq::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2CFest_BossKFSimpleReq::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2CFest_BossKFSimpleReq::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2CFest_BossKFSimpleReq::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 L2CFest_BossKFSimpleReq::roleid() const {
  return roleid_;
}
inline void L2CFest_BossKFSimpleReq::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 template_id = 2;
inline bool L2CFest_BossKFSimpleReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void L2CFest_BossKFSimpleReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void L2CFest_BossKFSimpleReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void L2CFest_BossKFSimpleReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 L2CFest_BossKFSimpleReq::template_id() const {
  return template_id_;
}
inline void L2CFest_BossKFSimpleReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestSimpleProto proto = 3;
inline bool L2CFest_BossKFSimpleReq::has_proto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void L2CFest_BossKFSimpleReq::set_has_proto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void L2CFest_BossKFSimpleReq::clear_has_proto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void L2CFest_BossKFSimpleReq::clear_proto() {
  if (proto_ != NULL) proto_->::proto_ff::FestSimpleProto::Clear();
  clear_has_proto();
}
inline const ::proto_ff::FestSimpleProto& L2CFest_BossKFSimpleReq::proto() const {
  return proto_ != NULL ? *proto_ : *default_instance_->proto_;
}
inline ::proto_ff::FestSimpleProto* L2CFest_BossKFSimpleReq::mutable_proto() {
  set_has_proto();
  if (proto_ == NULL) proto_ = new ::proto_ff::FestSimpleProto;
  return proto_;
}
inline ::proto_ff::FestSimpleProto* L2CFest_BossKFSimpleReq::release_proto() {
  clear_has_proto();
  ::proto_ff::FestSimpleProto* temp = proto_;
  proto_ = NULL;
  return temp;
}
inline void L2CFest_BossKFSimpleReq::set_allocated_proto(::proto_ff::FestSimpleProto* proto) {
  delete proto_;
  proto_ = proto;
  if (proto) {
    set_has_proto();
  } else {
    clear_has_proto();
  }
}

// repeated int32 recv_red_ids = 4;
inline int L2CFest_BossKFSimpleReq::recv_red_ids_size() const {
  return recv_red_ids_.size();
}
inline void L2CFest_BossKFSimpleReq::clear_recv_red_ids() {
  recv_red_ids_.Clear();
}
inline ::google::protobuf::int32 L2CFest_BossKFSimpleReq::recv_red_ids(int index) const {
  return recv_red_ids_.Get(index);
}
inline void L2CFest_BossKFSimpleReq::set_recv_red_ids(int index, ::google::protobuf::int32 value) {
  recv_red_ids_.Set(index, value);
}
inline void L2CFest_BossKFSimpleReq::add_recv_red_ids(::google::protobuf::int32 value) {
  recv_red_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
L2CFest_BossKFSimpleReq::recv_red_ids() const {
  return recv_red_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
L2CFest_BossKFSimpleReq::mutable_recv_red_ids() {
  return &recv_red_ids_;
}

// -------------------------------------------------------------------

// C2LFest_BossKFNotify

// optional int32 template_id = 1;
inline bool C2LFest_BossKFNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LFest_BossKFNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LFest_BossKFNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LFest_BossKFNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 C2LFest_BossKFNotify::template_id() const {
  return template_id_;
}
inline void C2LFest_BossKFNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool C2LFest_BossKFNotify::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LFest_BossKFNotify::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LFest_BossKFNotify::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LFest_BossKFNotify::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 C2LFest_BossKFNotify::id() const {
  return id_;
}
inline void C2LFest_BossKFNotify::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 roleid = 3;
inline bool C2LFest_BossKFNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2LFest_BossKFNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2LFest_BossKFNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2LFest_BossKFNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 C2LFest_BossKFNotify::roleid() const {
  return roleid_;
}
inline void C2LFest_BossKFNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 teamid = 4;
inline bool C2LFest_BossKFNotify::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2LFest_BossKFNotify::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2LFest_BossKFNotify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2LFest_BossKFNotify::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 C2LFest_BossKFNotify::teamid() const {
  return teamid_;
}
inline void C2LFest_BossKFNotify::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 zid = 5;
inline bool C2LFest_BossKFNotify::has_zid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2LFest_BossKFNotify::set_has_zid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2LFest_BossKFNotify::clear_has_zid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2LFest_BossKFNotify::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 C2LFest_BossKFNotify::zid() const {
  return zid_;
}
inline void C2LFest_BossKFNotify::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// C2LFest_BossInfoReq

// optional uint64 roleId = 1;
inline bool C2LFest_BossInfoReq::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LFest_BossInfoReq::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LFest_BossInfoReq::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LFest_BossInfoReq::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 C2LFest_BossInfoReq::roleid() const {
  return roleid_;
}
inline void C2LFest_BossInfoReq::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 template_id = 2;
inline bool C2LFest_BossInfoReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LFest_BossInfoReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LFest_BossInfoReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LFest_BossInfoReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 C2LFest_BossInfoReq::template_id() const {
  return template_id_;
}
inline void C2LFest_BossInfoReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestBossInfo infos = 3;
inline int C2LFest_BossInfoReq::infos_size() const {
  return infos_.size();
}
inline void C2LFest_BossInfoReq::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::FestBossInfo& C2LFest_BossInfoReq::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::FestBossInfo* C2LFest_BossInfoReq::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::FestBossInfo* C2LFest_BossInfoReq::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >&
C2LFest_BossInfoReq::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossInfo >*
C2LFest_BossInfoReq::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// C2LFest_BossFirstOptReq

// optional int32 template_id = 1;
inline bool C2LFest_BossFirstOptReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LFest_BossFirstOptReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LFest_BossFirstOptReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LFest_BossFirstOptReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 C2LFest_BossFirstOptReq::template_id() const {
  return template_id_;
}
inline void C2LFest_BossFirstOptReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool C2LFest_BossFirstOptReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LFest_BossFirstOptReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LFest_BossFirstOptReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LFest_BossFirstOptReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 C2LFest_BossFirstOptReq::id() const {
  return id_;
}
inline void C2LFest_BossFirstOptReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 3;
inline bool C2LFest_BossFirstOptReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2LFest_BossFirstOptReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2LFest_BossFirstOptReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2LFest_BossFirstOptReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 C2LFest_BossFirstOptReq::type() const {
  return type_;
}
inline void C2LFest_BossFirstOptReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 roleid = 4;
inline bool C2LFest_BossFirstOptReq::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2LFest_BossFirstOptReq::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2LFest_BossFirstOptReq::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2LFest_BossFirstOptReq::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 C2LFest_BossFirstOptReq::roleid() const {
  return roleid_;
}
inline void C2LFest_BossFirstOptReq::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 flag = 5;
inline bool C2LFest_BossFirstOptReq::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2LFest_BossFirstOptReq::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2LFest_BossFirstOptReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2LFest_BossFirstOptReq::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 C2LFest_BossFirstOptReq::flag() const {
  return flag_;
}
inline void C2LFest_BossFirstOptReq::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// C2LFest_HuiMengXiYou_GetRewardReq

// optional int32 template_id = 1;
inline bool C2LFest_HuiMengXiYou_GetRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 C2LFest_HuiMengXiYou_GetRewardReq::template_id() const {
  return template_id_;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool C2LFest_HuiMengXiYou_GetRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 C2LFest_HuiMengXiYou_GetRewardReq::id() const {
  return id_;
}
inline void C2LFest_HuiMengXiYou_GetRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// L2CFest_HuiMengXiYou_GetRewardRsp

// optional int32 ret_code = 1;
inline bool L2CFest_HuiMengXiYou_GetRewardRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 L2CFest_HuiMengXiYou_GetRewardRsp::ret_code() const {
  return ret_code_;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional int32 template_id = 2;
inline bool L2CFest_HuiMengXiYou_GetRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 L2CFest_HuiMengXiYou_GetRewardRsp::template_id() const {
  return template_id_;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .proto_ff.FestHuiMengXiYouReward reward = 3;
inline bool L2CFest_HuiMengXiYou_GetRewardRsp::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::clear_reward() {
  if (reward_ != NULL) reward_->::proto_ff::FestHuiMengXiYouReward::Clear();
  clear_has_reward();
}
inline const ::proto_ff::FestHuiMengXiYouReward& L2CFest_HuiMengXiYou_GetRewardRsp::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::proto_ff::FestHuiMengXiYouReward* L2CFest_HuiMengXiYou_GetRewardRsp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::proto_ff::FestHuiMengXiYouReward;
  return reward_;
}
inline ::proto_ff::FestHuiMengXiYouReward* L2CFest_HuiMengXiYou_GetRewardRsp::release_reward() {
  clear_has_reward();
  ::proto_ff::FestHuiMengXiYouReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void L2CFest_HuiMengXiYou_GetRewardRsp::set_allocated_reward(::proto_ff::FestHuiMengXiYouReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouRewardStatusChange

// optional int32 template_id = 1;
inline bool NotifyFest_HuiMengXiYouRewardStatusChange::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouRewardStatusChange::template_id() const {
  return template_id_;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestHuiMengXiYouReward reward = 2;
inline int NotifyFest_HuiMengXiYouRewardStatusChange::reward_size() const {
  return reward_.size();
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::FestHuiMengXiYouReward& NotifyFest_HuiMengXiYouRewardStatusChange::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::FestHuiMengXiYouReward* NotifyFest_HuiMengXiYouRewardStatusChange::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::FestHuiMengXiYouReward* NotifyFest_HuiMengXiYouRewardStatusChange::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestHuiMengXiYouReward >&
NotifyFest_HuiMengXiYouRewardStatusChange::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestHuiMengXiYouReward >*
NotifyFest_HuiMengXiYouRewardStatusChange::mutable_reward() {
  return &reward_;
}

// optional int32 cur_points = 3;
inline bool NotifyFest_HuiMengXiYouRewardStatusChange::has_cur_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::set_has_cur_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::clear_has_cur_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::clear_cur_points() {
  cur_points_ = 0;
  clear_has_cur_points();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouRewardStatusChange::cur_points() const {
  return cur_points_;
}
inline void NotifyFest_HuiMengXiYouRewardStatusChange::set_cur_points(::google::protobuf::int32 value) {
  set_has_cur_points();
  cur_points_ = value;
}

// -------------------------------------------------------------------

// XiYouGameInfo

// optional int32 id = 1;
inline bool XiYouGameInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XiYouGameInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XiYouGameInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XiYouGameInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 XiYouGameInfo::id() const {
  return id_;
}
inline void XiYouGameInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 status = 2;
inline bool XiYouGameInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XiYouGameInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XiYouGameInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XiYouGameInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 XiYouGameInfo::status() const {
  return status_;
}
inline void XiYouGameInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// NotiftFest_HuiMengXiYouStart

// optional int32 play_id = 1;
inline bool NotiftFest_HuiMengXiYouStart::has_play_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotiftFest_HuiMengXiYouStart::set_has_play_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotiftFest_HuiMengXiYouStart::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotiftFest_HuiMengXiYouStart::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouStart::play_id() const {
  return play_id_;
}
inline void NotiftFest_HuiMengXiYouStart::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// repeated .proto_ff.XiYouGameInfo info = 2;
inline int NotiftFest_HuiMengXiYouStart::info_size() const {
  return info_.size();
}
inline void NotiftFest_HuiMengXiYouStart::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::XiYouGameInfo& NotiftFest_HuiMengXiYouStart::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::XiYouGameInfo* NotiftFest_HuiMengXiYouStart::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::XiYouGameInfo* NotiftFest_HuiMengXiYouStart::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >&
NotiftFest_HuiMengXiYouStart::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >*
NotiftFest_HuiMengXiYouStart::mutable_info() {
  return &info_;
}

// optional int32 cur_state = 3;
inline bool NotiftFest_HuiMengXiYouStart::has_cur_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotiftFest_HuiMengXiYouStart::set_has_cur_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotiftFest_HuiMengXiYouStart::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotiftFest_HuiMengXiYouStart::clear_cur_state() {
  cur_state_ = 0;
  clear_has_cur_state();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouStart::cur_state() const {
  return cur_state_;
}
inline void NotiftFest_HuiMengXiYouStart::set_cur_state(::google::protobuf::int32 value) {
  set_has_cur_state();
  cur_state_ = value;
}

// optional int32 left_time = 4;
inline bool NotiftFest_HuiMengXiYouStart::has_left_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotiftFest_HuiMengXiYouStart::set_has_left_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotiftFest_HuiMengXiYouStart::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotiftFest_HuiMengXiYouStart::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouStart::left_time() const {
  return left_time_;
}
inline void NotiftFest_HuiMengXiYouStart::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// NotiftFest_LogicHuiMengXiYouStart

// repeated uint64 cid = 1;
inline int NotiftFest_LogicHuiMengXiYouStart::cid_size() const {
  return cid_.size();
}
inline void NotiftFest_LogicHuiMengXiYouStart::clear_cid() {
  cid_.Clear();
}
inline ::google::protobuf::uint64 NotiftFest_LogicHuiMengXiYouStart::cid(int index) const {
  return cid_.Get(index);
}
inline void NotiftFest_LogicHuiMengXiYouStart::set_cid(int index, ::google::protobuf::uint64 value) {
  cid_.Set(index, value);
}
inline void NotiftFest_LogicHuiMengXiYouStart::add_cid(::google::protobuf::uint64 value) {
  cid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NotiftFest_LogicHuiMengXiYouStart::cid() const {
  return cid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NotiftFest_LogicHuiMengXiYouStart::mutable_cid() {
  return &cid_;
}

// optional .proto_ff.NotiftFest_HuiMengXiYouStart start = 2;
inline bool NotiftFest_LogicHuiMengXiYouStart::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotiftFest_LogicHuiMengXiYouStart::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotiftFest_LogicHuiMengXiYouStart::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotiftFest_LogicHuiMengXiYouStart::clear_start() {
  if (start_ != NULL) start_->::proto_ff::NotiftFest_HuiMengXiYouStart::Clear();
  clear_has_start();
}
inline const ::proto_ff::NotiftFest_HuiMengXiYouStart& NotiftFest_LogicHuiMengXiYouStart::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::proto_ff::NotiftFest_HuiMengXiYouStart* NotiftFest_LogicHuiMengXiYouStart::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::proto_ff::NotiftFest_HuiMengXiYouStart;
  return start_;
}
inline ::proto_ff::NotiftFest_HuiMengXiYouStart* NotiftFest_LogicHuiMengXiYouStart::release_start() {
  clear_has_start();
  ::proto_ff::NotiftFest_HuiMengXiYouStart* temp = start_;
  start_ = NULL;
  return temp;
}
inline void NotiftFest_LogicHuiMengXiYouStart::set_allocated_start(::proto_ff::NotiftFest_HuiMengXiYouStart* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouSceneChange

// optional int32 play_id = 1;
inline bool NotifyFest_HuiMengXiYouSceneChange::has_play_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouSceneChange::set_has_play_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouSceneChange::play_id() const {
  return play_id_;
}
inline void NotifyFest_HuiMengXiYouSceneChange::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// repeated .proto_ff.XiYouGameInfo info = 2;
inline int NotifyFest_HuiMengXiYouSceneChange::info_size() const {
  return info_.size();
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::XiYouGameInfo& NotifyFest_HuiMengXiYouSceneChange::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::XiYouGameInfo* NotifyFest_HuiMengXiYouSceneChange::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::XiYouGameInfo* NotifyFest_HuiMengXiYouSceneChange::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >&
NotifyFest_HuiMengXiYouSceneChange::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >*
NotifyFest_HuiMengXiYouSceneChange::mutable_info() {
  return &info_;
}

// optional int32 cur_state = 3;
inline bool NotifyFest_HuiMengXiYouSceneChange::has_cur_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyFest_HuiMengXiYouSceneChange::set_has_cur_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_cur_state() {
  cur_state_ = 0;
  clear_has_cur_state();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouSceneChange::cur_state() const {
  return cur_state_;
}
inline void NotifyFest_HuiMengXiYouSceneChange::set_cur_state(::google::protobuf::int32 value) {
  set_has_cur_state();
  cur_state_ = value;
}

// optional int32 left_time = 4;
inline bool NotifyFest_HuiMengXiYouSceneChange::has_left_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyFest_HuiMengXiYouSceneChange::set_has_left_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyFest_HuiMengXiYouSceneChange::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouSceneChange::left_time() const {
  return left_time_;
}
inline void NotifyFest_HuiMengXiYouSceneChange::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// NotiftFest_HuiMengXiYouGameStart

// optional int32 play_id = 1;
inline bool NotiftFest_HuiMengXiYouGameStart::has_play_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameStart::set_has_play_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameStart::play_id() const {
  return play_id_;
}
inline void NotiftFest_HuiMengXiYouGameStart::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// repeated .proto_ff.XiYouGameInfo info = 2;
inline int NotiftFest_HuiMengXiYouGameStart::info_size() const {
  return info_.size();
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::XiYouGameInfo& NotiftFest_HuiMengXiYouGameStart::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::XiYouGameInfo* NotiftFest_HuiMengXiYouGameStart::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::XiYouGameInfo* NotiftFest_HuiMengXiYouGameStart::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >&
NotiftFest_HuiMengXiYouGameStart::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouGameInfo >*
NotiftFest_HuiMengXiYouGameStart::mutable_info() {
  return &info_;
}

// optional int32 cur_state = 3;
inline bool NotiftFest_HuiMengXiYouGameStart::has_cur_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameStart::set_has_cur_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_cur_state() {
  cur_state_ = 0;
  clear_has_cur_state();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameStart::cur_state() const {
  return cur_state_;
}
inline void NotiftFest_HuiMengXiYouGameStart::set_cur_state(::google::protobuf::int32 value) {
  set_has_cur_state();
  cur_state_ = value;
}

// optional int32 left_time = 4;
inline bool NotiftFest_HuiMengXiYouGameStart::has_left_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameStart::set_has_left_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotiftFest_HuiMengXiYouGameStart::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameStart::left_time() const {
  return left_time_;
}
inline void NotiftFest_HuiMengXiYouGameStart::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// NotiftFest_HuiMengXiYouEnd

// optional int32 play_id = 1;
inline bool NotiftFest_HuiMengXiYouEnd::has_play_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotiftFest_HuiMengXiYouEnd::set_has_play_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotiftFest_HuiMengXiYouEnd::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotiftFest_HuiMengXiYouEnd::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouEnd::play_id() const {
  return play_id_;
}
inline void NotiftFest_HuiMengXiYouEnd::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// optional int32 points = 2;
inline bool NotiftFest_HuiMengXiYouEnd::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotiftFest_HuiMengXiYouEnd::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotiftFest_HuiMengXiYouEnd::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotiftFest_HuiMengXiYouEnd::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouEnd::points() const {
  return points_;
}
inline void NotiftFest_HuiMengXiYouEnd::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// -------------------------------------------------------------------

// NotiftFest_HuiMengXiYouGameInfo

// optional int32 play_id = 1;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_play_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_play_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::play_id() const {
  return play_id_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// optional int32 game_id = 2;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::game_id() const {
  return game_id_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 task_schedule = 3;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_task_schedule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_task_schedule() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_task_schedule() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_task_schedule() {
  task_schedule_ = 0;
  clear_has_task_schedule();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::task_schedule() const {
  return task_schedule_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_task_schedule(::google::protobuf::int32 value) {
  set_has_task_schedule();
  task_schedule_ = value;
}

// optional int32 cur_points = 4;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_cur_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_cur_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_cur_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_cur_points() {
  cur_points_ = 0;
  clear_has_cur_points();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::cur_points() const {
  return cur_points_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_cur_points(::google::protobuf::int32 value) {
  set_has_cur_points();
  cur_points_ = value;
}

// optional int32 points_level = 5;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_points_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_points_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_points_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_points_level() {
  points_level_ = 0;
  clear_has_points_level();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::points_level() const {
  return points_level_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_points_level(::google::protobuf::int32 value) {
  set_has_points_level();
  points_level_ = value;
}

// optional int32 my_cur_points = 6;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_my_cur_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_my_cur_points() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_my_cur_points() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_my_cur_points() {
  my_cur_points_ = 0;
  clear_has_my_cur_points();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::my_cur_points() const {
  return my_cur_points_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_my_cur_points(::google::protobuf::int32 value) {
  set_has_my_cur_points();
  my_cur_points_ = value;
}

// optional int32 my_all_points = 7;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_my_all_points() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_my_all_points() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_my_all_points() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_my_all_points() {
  my_all_points_ = 0;
  clear_has_my_all_points();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::my_all_points() const {
  return my_all_points_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_my_all_points(::google::protobuf::int32 value) {
  set_has_my_all_points();
  my_all_points_ = value;
}

// optional int32 left_time = 8;
inline bool NotiftFest_HuiMengXiYouGameInfo::has_left_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_has_left_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NotiftFest_HuiMengXiYouGameInfo::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 NotiftFest_HuiMengXiYouGameInfo::left_time() const {
  return left_time_;
}
inline void NotiftFest_HuiMengXiYouGameInfo::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouGameEnd

// optional int32 play_id = 1;
inline bool NotifyFest_HuiMengXiYouGameEnd::has_play_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_has_play_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouGameEnd::play_id() const {
  return play_id_;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// optional int32 game_id = 2;
inline bool NotifyFest_HuiMengXiYouGameEnd::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouGameEnd::game_id() const {
  return game_id_;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 points_level = 5;
inline bool NotifyFest_HuiMengXiYouGameEnd::has_points_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_has_points_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_has_points_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_points_level() {
  points_level_ = 0;
  clear_has_points_level();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouGameEnd::points_level() const {
  return points_level_;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_points_level(::google::protobuf::int32 value) {
  set_has_points_level();
  points_level_ = value;
}

// optional int32 my_cur_points = 6;
inline bool NotifyFest_HuiMengXiYouGameEnd::has_my_cur_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_has_my_cur_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_has_my_cur_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_my_cur_points() {
  my_cur_points_ = 0;
  clear_has_my_cur_points();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouGameEnd::my_cur_points() const {
  return my_cur_points_;
}
inline void NotifyFest_HuiMengXiYouGameEnd::set_my_cur_points(::google::protobuf::int32 value) {
  set_has_my_cur_points();
  my_cur_points_ = value;
}

// repeated .proto_ff.ComItem reward = 7;
inline int NotifyFest_HuiMengXiYouGameEnd::reward_size() const {
  return reward_.size();
}
inline void NotifyFest_HuiMengXiYouGameEnd::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItem& NotifyFest_HuiMengXiYouGameEnd::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItem* NotifyFest_HuiMengXiYouGameEnd::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItem* NotifyFest_HuiMengXiYouGameEnd::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
NotifyFest_HuiMengXiYouGameEnd::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
NotifyFest_HuiMengXiYouGameEnd::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouEnterReq

// optional int32 template_id = 1;
inline bool NotifyFest_HuiMengXiYouEnterReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouEnterReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouEnterReq::template_id() const {
  return template_id_;
}
inline void NotifyFest_HuiMengXiYouEnterReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouEnterRsp

// optional int32 ret_code = 1;
inline bool NotifyFest_HuiMengXiYouEnterRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouEnterRsp::ret_code() const {
  return ret_code_;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional int32 template_id = 2;
inline bool NotifyFest_HuiMengXiYouEnterRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouEnterRsp::template_id() const {
  return template_id_;
}
inline void NotifyFest_HuiMengXiYouEnterRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouEnterGameReq

// optional int32 template_id = 1;
inline bool NotifyFest_HuiMengXiYouEnterGameReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouEnterGameReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterGameReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterGameReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouEnterGameReq::template_id() const {
  return template_id_;
}
inline void NotifyFest_HuiMengXiYouEnterGameReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouEnterGameRsp

// optional int32 ret_code = 1;
inline bool NotifyFest_HuiMengXiYouEnterGameRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouEnterGameRsp::ret_code() const {
  return ret_code_;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional int32 template_id = 2;
inline bool NotifyFest_HuiMengXiYouEnterGameRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 NotifyFest_HuiMengXiYouEnterGameRsp::template_id() const {
  return template_id_;
}
inline void NotifyFest_HuiMengXiYouEnterGameRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// C2LFest_HuiMengXiYouGiveCaiJiReq

// optional int32 template_id = 1;
inline bool C2LFest_HuiMengXiYouGiveCaiJiReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LFest_HuiMengXiYouGiveCaiJiReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LFest_HuiMengXiYouGiveCaiJiReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LFest_HuiMengXiYouGiveCaiJiReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 C2LFest_HuiMengXiYouGiveCaiJiReq::template_id() const {
  return template_id_;
}
inline void C2LFest_HuiMengXiYouGiveCaiJiReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// L2CFest_HuiMengXiYouGiveCaiJiRsp

// optional int32 ret_code = 1;
inline bool L2CFest_HuiMengXiYouGiveCaiJiRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 L2CFest_HuiMengXiYouGiveCaiJiRsp::ret_code() const {
  return ret_code_;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional int32 template_id = 2;
inline bool L2CFest_HuiMengXiYouGiveCaiJiRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 L2CFest_HuiMengXiYouGiveCaiJiRsp::template_id() const {
  return template_id_;
}
inline void L2CFest_HuiMengXiYouGiveCaiJiRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// XiYouCaiJiCollectInfo

// optional uint64 cid = 1;
inline bool XiYouCaiJiCollectInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XiYouCaiJiCollectInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XiYouCaiJiCollectInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XiYouCaiJiCollectInfo::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 XiYouCaiJiCollectInfo::cid() const {
  return cid_;
}
inline void XiYouCaiJiCollectInfo::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional .proto_ff.Vector3PB pos = 5;
inline bool XiYouCaiJiCollectInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XiYouCaiJiCollectInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XiYouCaiJiCollectInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XiYouCaiJiCollectInfo::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& XiYouCaiJiCollectInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* XiYouCaiJiCollectInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* XiYouCaiJiCollectInfo::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void XiYouCaiJiCollectInfo::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouCollect

// repeated .proto_ff.XiYouCaiJiCollectInfo collects = 1;
inline int NotifyFest_HuiMengXiYouCollect::collects_size() const {
  return collects_.size();
}
inline void NotifyFest_HuiMengXiYouCollect::clear_collects() {
  collects_.Clear();
}
inline const ::proto_ff::XiYouCaiJiCollectInfo& NotifyFest_HuiMengXiYouCollect::collects(int index) const {
  return collects_.Get(index);
}
inline ::proto_ff::XiYouCaiJiCollectInfo* NotifyFest_HuiMengXiYouCollect::mutable_collects(int index) {
  return collects_.Mutable(index);
}
inline ::proto_ff::XiYouCaiJiCollectInfo* NotifyFest_HuiMengXiYouCollect::add_collects() {
  return collects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectInfo >&
NotifyFest_HuiMengXiYouCollect::collects() const {
  return collects_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectInfo >*
NotifyFest_HuiMengXiYouCollect::mutable_collects() {
  return &collects_;
}

// -------------------------------------------------------------------

// XiYouCaiJiCollectMonsterInfo

// optional uint32 monster_id = 1;
inline bool XiYouCaiJiCollectMonsterInfo::has_monster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XiYouCaiJiCollectMonsterInfo::set_has_monster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XiYouCaiJiCollectMonsterInfo::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XiYouCaiJiCollectMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
  clear_has_monster_id();
}
inline ::google::protobuf::uint32 XiYouCaiJiCollectMonsterInfo::monster_id() const {
  return monster_id_;
}
inline void XiYouCaiJiCollectMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  set_has_monster_id();
  monster_id_ = value;
}

// optional uint32 num = 2;
inline bool XiYouCaiJiCollectMonsterInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XiYouCaiJiCollectMonsterInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XiYouCaiJiCollectMonsterInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XiYouCaiJiCollectMonsterInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 XiYouCaiJiCollectMonsterInfo::num() const {
  return num_;
}
inline void XiYouCaiJiCollectMonsterInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 item_id = 3;
inline bool XiYouCaiJiCollectMonsterInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void XiYouCaiJiCollectMonsterInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void XiYouCaiJiCollectMonsterInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void XiYouCaiJiCollectMonsterInfo::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 XiYouCaiJiCollectMonsterInfo::item_id() const {
  return item_id_;
}
inline void XiYouCaiJiCollectMonsterInfo::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYouCollectSuccess

// repeated .proto_ff.XiYouCaiJiCollectMonsterInfo monster_info = 1;
inline int NotifyFest_HuiMengXiYouCollectSuccess::monster_info_size() const {
  return monster_info_.size();
}
inline void NotifyFest_HuiMengXiYouCollectSuccess::clear_monster_info() {
  monster_info_.Clear();
}
inline const ::proto_ff::XiYouCaiJiCollectMonsterInfo& NotifyFest_HuiMengXiYouCollectSuccess::monster_info(int index) const {
  return monster_info_.Get(index);
}
inline ::proto_ff::XiYouCaiJiCollectMonsterInfo* NotifyFest_HuiMengXiYouCollectSuccess::mutable_monster_info(int index) {
  return monster_info_.Mutable(index);
}
inline ::proto_ff::XiYouCaiJiCollectMonsterInfo* NotifyFest_HuiMengXiYouCollectSuccess::add_monster_info() {
  return monster_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectMonsterInfo >&
NotifyFest_HuiMengXiYouCollectSuccess::monster_info() const {
  return monster_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::XiYouCaiJiCollectMonsterInfo >*
NotifyFest_HuiMengXiYouCollectSuccess::mutable_monster_info() {
  return &monster_info_;
}

// -------------------------------------------------------------------

// NotifyFest_HuiMengXiYou_RoubaoziNotify

// optional uint32 cur_fresh_wave = 1;
inline bool NotifyFest_HuiMengXiYou_RoubaoziNotify::has_cur_fresh_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_has_cur_fresh_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_has_cur_fresh_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_cur_fresh_wave() {
  cur_fresh_wave_ = 0u;
  clear_has_cur_fresh_wave();
}
inline ::google::protobuf::uint32 NotifyFest_HuiMengXiYou_RoubaoziNotify::cur_fresh_wave() const {
  return cur_fresh_wave_;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_cur_fresh_wave(::google::protobuf::uint32 value) {
  set_has_cur_fresh_wave();
  cur_fresh_wave_ = value;
}

// optional uint32 all_fresh_wave = 2;
inline bool NotifyFest_HuiMengXiYou_RoubaoziNotify::has_all_fresh_wave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_has_all_fresh_wave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_has_all_fresh_wave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_all_fresh_wave() {
  all_fresh_wave_ = 0u;
  clear_has_all_fresh_wave();
}
inline ::google::protobuf::uint32 NotifyFest_HuiMengXiYou_RoubaoziNotify::all_fresh_wave() const {
  return all_fresh_wave_;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_all_fresh_wave(::google::protobuf::uint32 value) {
  set_has_all_fresh_wave();
  all_fresh_wave_ = value;
}

// optional uint64 npc_cid = 3;
inline bool NotifyFest_HuiMengXiYou_RoubaoziNotify::has_npc_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_has_npc_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_has_npc_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_npc_cid() {
  npc_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_npc_cid();
}
inline ::google::protobuf::uint64 NotifyFest_HuiMengXiYou_RoubaoziNotify::npc_cid() const {
  return npc_cid_;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_npc_cid(::google::protobuf::uint64 value) {
  set_has_npc_cid();
  npc_cid_ = value;
}

// optional .proto_ff.Vector3PB npc_pos = 4;
inline bool NotifyFest_HuiMengXiYou_RoubaoziNotify::has_npc_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_has_npc_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_has_npc_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_npc_pos() {
  if (npc_pos_ != NULL) npc_pos_->::proto_ff::Vector3PB::Clear();
  clear_has_npc_pos();
}
inline const ::proto_ff::Vector3PB& NotifyFest_HuiMengXiYou_RoubaoziNotify::npc_pos() const {
  return npc_pos_ != NULL ? *npc_pos_ : *default_instance_->npc_pos_;
}
inline ::proto_ff::Vector3PB* NotifyFest_HuiMengXiYou_RoubaoziNotify::mutable_npc_pos() {
  set_has_npc_pos();
  if (npc_pos_ == NULL) npc_pos_ = new ::proto_ff::Vector3PB;
  return npc_pos_;
}
inline ::proto_ff::Vector3PB* NotifyFest_HuiMengXiYou_RoubaoziNotify::release_npc_pos() {
  clear_has_npc_pos();
  ::proto_ff::Vector3PB* temp = npc_pos_;
  npc_pos_ = NULL;
  return temp;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_allocated_npc_pos(::proto_ff::Vector3PB* npc_pos) {
  delete npc_pos_;
  npc_pos_ = npc_pos;
  if (npc_pos) {
    set_has_npc_pos();
  } else {
    clear_has_npc_pos();
  }
}

// optional uint32 npc_status = 5;
inline bool NotifyFest_HuiMengXiYou_RoubaoziNotify::has_npc_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_has_npc_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_has_npc_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::clear_npc_status() {
  npc_status_ = 0u;
  clear_has_npc_status();
}
inline ::google::protobuf::uint32 NotifyFest_HuiMengXiYou_RoubaoziNotify::npc_status() const {
  return npc_status_;
}
inline void NotifyFest_HuiMengXiYou_RoubaoziNotify::set_npc_status(::google::protobuf::uint32 value) {
  set_has_npc_status();
  npc_status_ = value;
}

// -------------------------------------------------------------------

// FMarryRankInfo

// optional int32 rank = 1;
inline bool FMarryRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FMarryRankInfo::rank() const {
  return rank_;
}
inline void FMarryRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .proto_ff.RolePlayerMiniInfo roles = 2;
inline int FMarryRankInfo::roles_size() const {
  return roles_.size();
}
inline void FMarryRankInfo::clear_roles() {
  roles_.Clear();
}
inline const ::proto_ff::RolePlayerMiniInfo& FMarryRankInfo::roles(int index) const {
  return roles_.Get(index);
}
inline ::proto_ff::RolePlayerMiniInfo* FMarryRankInfo::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::proto_ff::RolePlayerMiniInfo* FMarryRankInfo::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
FMarryRankInfo::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
FMarryRankInfo::mutable_roles() {
  return &roles_;
}

// optional int32 score = 3;
inline bool FMarryRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryRankInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FMarryRankInfo::score() const {
  return score_;
}
inline void FMarryRankInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// FMarryExpressRankInfo

// optional int32 rank = 1;
inline bool FMarryExpressRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryExpressRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryExpressRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryExpressRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FMarryExpressRankInfo::rank() const {
  return rank_;
}
inline void FMarryExpressRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 cid = 2;
inline bool FMarryExpressRankInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMarryExpressRankInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMarryExpressRankInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMarryExpressRankInfo::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FMarryExpressRankInfo::cid() const {
  return cid_;
}
inline void FMarryExpressRankInfo::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool FMarryExpressRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryExpressRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryExpressRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryExpressRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FMarryExpressRankInfo::name() const {
  return *name_;
}
inline void FMarryExpressRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FMarryExpressRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FMarryExpressRankInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FMarryExpressRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FMarryExpressRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FMarryExpressRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 score = 4;
inline bool FMarryExpressRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FMarryExpressRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FMarryExpressRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FMarryExpressRankInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FMarryExpressRankInfo::score() const {
  return score_;
}
inline void FMarryExpressRankInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// FMarryRankReq

// optional int32 template_id = 1;
inline bool FMarryRankReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRankReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRankReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRankReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryRankReq::template_id() const {
  return template_id_;
}
inline void FMarryRankReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FMarryRankRsp

// optional int32 template_id = 1;
inline bool FMarryRankRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRankRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRankRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRankRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryRankRsp::template_id() const {
  return template_id_;
}
inline void FMarryRankRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FMarryRankInfo entrys = 2;
inline int FMarryRankRsp::entrys_size() const {
  return entrys_.size();
}
inline void FMarryRankRsp::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::FMarryRankInfo& FMarryRankRsp::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::FMarryRankInfo* FMarryRankRsp::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::FMarryRankInfo* FMarryRankRsp::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRankInfo >&
FMarryRankRsp::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRankInfo >*
FMarryRankRsp::mutable_entrys() {
  return &entrys_;
}

// optional .proto_ff.FMarryRankInfo my = 3;
inline bool FMarryRankRsp::has_my() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryRankRsp::set_has_my() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryRankRsp::clear_has_my() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryRankRsp::clear_my() {
  if (my_ != NULL) my_->::proto_ff::FMarryRankInfo::Clear();
  clear_has_my();
}
inline const ::proto_ff::FMarryRankInfo& FMarryRankRsp::my() const {
  return my_ != NULL ? *my_ : *default_instance_->my_;
}
inline ::proto_ff::FMarryRankInfo* FMarryRankRsp::mutable_my() {
  set_has_my();
  if (my_ == NULL) my_ = new ::proto_ff::FMarryRankInfo;
  return my_;
}
inline ::proto_ff::FMarryRankInfo* FMarryRankRsp::release_my() {
  clear_has_my();
  ::proto_ff::FMarryRankInfo* temp = my_;
  my_ = NULL;
  return temp;
}
inline void FMarryRankRsp::set_allocated_my(::proto_ff::FMarryRankInfo* my) {
  delete my_;
  my_ = my;
  if (my) {
    set_has_my();
  } else {
    clear_has_my();
  }
}

// -------------------------------------------------------------------

// FMarryExpressReq

// optional int32 template_id = 1;
inline bool FMarryExpressReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryExpressReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryExpressReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryExpressReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryExpressReq::template_id() const {
  return template_id_;
}
inline void FMarryExpressReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FMarryExpressRsp

// optional int32 template_id = 1;
inline bool FMarryExpressRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryExpressRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryExpressRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryExpressRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryExpressRsp::template_id() const {
  return template_id_;
}
inline void FMarryExpressRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FMarryExpressRankInfo sends = 2;
inline int FMarryExpressRsp::sends_size() const {
  return sends_.size();
}
inline void FMarryExpressRsp::clear_sends() {
  sends_.Clear();
}
inline const ::proto_ff::FMarryExpressRankInfo& FMarryExpressRsp::sends(int index) const {
  return sends_.Get(index);
}
inline ::proto_ff::FMarryExpressRankInfo* FMarryExpressRsp::mutable_sends(int index) {
  return sends_.Mutable(index);
}
inline ::proto_ff::FMarryExpressRankInfo* FMarryExpressRsp::add_sends() {
  return sends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >&
FMarryExpressRsp::sends() const {
  return sends_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >*
FMarryExpressRsp::mutable_sends() {
  return &sends_;
}

// repeated .proto_ff.FMarryExpressRankInfo recvs = 3;
inline int FMarryExpressRsp::recvs_size() const {
  return recvs_.size();
}
inline void FMarryExpressRsp::clear_recvs() {
  recvs_.Clear();
}
inline const ::proto_ff::FMarryExpressRankInfo& FMarryExpressRsp::recvs(int index) const {
  return recvs_.Get(index);
}
inline ::proto_ff::FMarryExpressRankInfo* FMarryExpressRsp::mutable_recvs(int index) {
  return recvs_.Mutable(index);
}
inline ::proto_ff::FMarryExpressRankInfo* FMarryExpressRsp::add_recvs() {
  return recvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >&
FMarryExpressRsp::recvs() const {
  return recvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpressRankInfo >*
FMarryExpressRsp::mutable_recvs() {
  return &recvs_;
}

// repeated .proto_ff.ExpressLog logs = 4;
inline int FMarryExpressRsp::logs_size() const {
  return logs_.size();
}
inline void FMarryExpressRsp::clear_logs() {
  logs_.Clear();
}
inline const ::proto_ff::ExpressLog& FMarryExpressRsp::logs(int index) const {
  return logs_.Get(index);
}
inline ::proto_ff::ExpressLog* FMarryExpressRsp::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::proto_ff::ExpressLog* FMarryExpressRsp::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ExpressLog >&
FMarryExpressRsp::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ExpressLog >*
FMarryExpressRsp::mutable_logs() {
  return &logs_;
}

// -------------------------------------------------------------------

// FMarryRoleReq

// optional int32 template_id = 1;
inline bool FMarryRoleReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRoleReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRoleReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRoleReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryRoleReq::template_id() const {
  return template_id_;
}
inline void FMarryRoleReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FMarryRoleRsp

// optional int32 template_id = 1;
inline bool FMarryRoleRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRoleRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRoleRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRoleRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryRoleRsp::template_id() const {
  return template_id_;
}
inline void FMarryRoleRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FMarryTask tasks = 2;
inline int FMarryRoleRsp::tasks_size() const {
  return tasks_.size();
}
inline void FMarryRoleRsp::clear_tasks() {
  tasks_.Clear();
}
inline const ::proto_ff::FMarryTask& FMarryRoleRsp::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::proto_ff::FMarryTask* FMarryRoleRsp::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::proto_ff::FMarryTask* FMarryRoleRsp::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >&
FMarryRoleRsp::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >*
FMarryRoleRsp::mutable_tasks() {
  return &tasks_;
}

// repeated int32 process_ids = 3;
inline int FMarryRoleRsp::process_ids_size() const {
  return process_ids_.size();
}
inline void FMarryRoleRsp::clear_process_ids() {
  process_ids_.Clear();
}
inline ::google::protobuf::int32 FMarryRoleRsp::process_ids(int index) const {
  return process_ids_.Get(index);
}
inline void FMarryRoleRsp::set_process_ids(int index, ::google::protobuf::int32 value) {
  process_ids_.Set(index, value);
}
inline void FMarryRoleRsp::add_process_ids(::google::protobuf::int32 value) {
  process_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FMarryRoleRsp::process_ids() const {
  return process_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FMarryRoleRsp::mutable_process_ids() {
  return &process_ids_;
}

// -------------------------------------------------------------------

// FMarryRoleRecvReq

// optional int32 template_id = 1;
inline bool FMarryRoleRecvReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRoleRecvReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRoleRecvReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRoleRecvReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryRoleRecvReq::template_id() const {
  return template_id_;
}
inline void FMarryRoleRecvReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 2;
inline bool FMarryRoleRecvReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMarryRoleRecvReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMarryRoleRecvReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMarryRoleRecvReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FMarryRoleRecvReq::type() const {
  return type_;
}
inline void FMarryRoleRecvReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 3;
inline bool FMarryRoleRecvReq::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryRoleRecvReq::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryRoleRecvReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryRoleRecvReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FMarryRoleRecvReq::id() const {
  return id_;
}
inline void FMarryRoleRecvReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FMarryRoleRecvRsp

// optional int32 ret = 1;
inline bool FMarryRoleRecvRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRoleRecvRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRoleRecvRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRoleRecvRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FMarryRoleRecvRsp::ret() const {
  return ret_;
}
inline void FMarryRoleRecvRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 template_id = 2;
inline bool FMarryRoleRecvRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMarryRoleRecvRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMarryRoleRecvRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMarryRoleRecvRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FMarryRoleRecvRsp::template_id() const {
  return template_id_;
}
inline void FMarryRoleRecvRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 3;
inline bool FMarryRoleRecvRsp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryRoleRecvRsp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryRoleRecvRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryRoleRecvRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FMarryRoleRecvRsp::type() const {
  return type_;
}
inline void FMarryRoleRecvRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 4;
inline bool FMarryRoleRecvRsp::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FMarryRoleRecvRsp::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FMarryRoleRecvRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FMarryRoleRecvRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FMarryRoleRecvRsp::id() const {
  return id_;
}
inline void FMarryRoleRecvRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FMarryRecord

// optional int32 marry_id = 1;
inline bool FMarryRecord::has_marry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryRecord::set_has_marry_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryRecord::clear_has_marry_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryRecord::clear_marry_id() {
  marry_id_ = 0;
  clear_has_marry_id();
}
inline ::google::protobuf::int32 FMarryRecord::marry_id() const {
  return marry_id_;
}
inline void FMarryRecord::set_marry_id(::google::protobuf::int32 value) {
  set_has_marry_id();
  marry_id_ = value;
}

// optional int32 val = 2;
inline bool FMarryRecord::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMarryRecord::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMarryRecord::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMarryRecord::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 FMarryRecord::val() const {
  return val_;
}
inline void FMarryRecord::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// optional uint64 time = 3;
inline bool FMarryRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FMarryRecord::time() const {
  return time_;
}
inline void FMarryRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// FMarryExpress

// optional uint64 cid = 1;
inline bool FMarryExpress::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryExpress::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryExpress::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryExpress::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FMarryExpress::cid() const {
  return cid_;
}
inline void FMarryExpress::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint64 time = 2;
inline bool FMarryExpress::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMarryExpress::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMarryExpress::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMarryExpress::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FMarryExpress::time() const {
  return time_;
}
inline void FMarryExpress::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 val = 3;
inline bool FMarryExpress::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryExpress::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryExpress::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryExpress::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 FMarryExpress::val() const {
  return val_;
}
inline void FMarryExpress::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// FMarryDBEntry

// optional int32 tmpId = 1;
inline bool FMarryDBEntry::has_tmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMarryDBEntry::set_has_tmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMarryDBEntry::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMarryDBEntry::clear_tmpid() {
  tmpid_ = 0;
  clear_has_tmpid();
}
inline ::google::protobuf::int32 FMarryDBEntry::tmpid() const {
  return tmpid_;
}
inline void FMarryDBEntry::set_tmpid(::google::protobuf::int32 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// optional int32 groupId = 2;
inline bool FMarryDBEntry::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMarryDBEntry::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMarryDBEntry::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMarryDBEntry::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 FMarryDBEntry::groupid() const {
  return groupid_;
}
inline void FMarryDBEntry::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated .proto_ff.FMarryRecord records = 3;
inline int FMarryDBEntry::records_size() const {
  return records_.size();
}
inline void FMarryDBEntry::clear_records() {
  records_.Clear();
}
inline const ::proto_ff::FMarryRecord& FMarryDBEntry::records(int index) const {
  return records_.Get(index);
}
inline ::proto_ff::FMarryRecord* FMarryDBEntry::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::proto_ff::FMarryRecord* FMarryDBEntry::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRecord >&
FMarryDBEntry::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryRecord >*
FMarryDBEntry::mutable_records() {
  return &records_;
}

// repeated .proto_ff.FMarryExpress sends = 4;
inline int FMarryDBEntry::sends_size() const {
  return sends_.size();
}
inline void FMarryDBEntry::clear_sends() {
  sends_.Clear();
}
inline const ::proto_ff::FMarryExpress& FMarryDBEntry::sends(int index) const {
  return sends_.Get(index);
}
inline ::proto_ff::FMarryExpress* FMarryDBEntry::mutable_sends(int index) {
  return sends_.Mutable(index);
}
inline ::proto_ff::FMarryExpress* FMarryDBEntry::add_sends() {
  return sends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >&
FMarryDBEntry::sends() const {
  return sends_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >*
FMarryDBEntry::mutable_sends() {
  return &sends_;
}

// repeated .proto_ff.FMarryExpress recvs = 5;
inline int FMarryDBEntry::recvs_size() const {
  return recvs_.size();
}
inline void FMarryDBEntry::clear_recvs() {
  recvs_.Clear();
}
inline const ::proto_ff::FMarryExpress& FMarryDBEntry::recvs(int index) const {
  return recvs_.Get(index);
}
inline ::proto_ff::FMarryExpress* FMarryDBEntry::mutable_recvs(int index) {
  return recvs_.Mutable(index);
}
inline ::proto_ff::FMarryExpress* FMarryDBEntry::add_recvs() {
  return recvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >&
FMarryDBEntry::recvs() const {
  return recvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryExpress >*
FMarryDBEntry::mutable_recvs() {
  return &recvs_;
}

// -------------------------------------------------------------------

// FMarryDB

// repeated .proto_ff.FMarryDBEntry entrys = 1;
inline int FMarryDB::entrys_size() const {
  return entrys_.size();
}
inline void FMarryDB::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::FMarryDBEntry& FMarryDB::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::FMarryDBEntry* FMarryDB::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::FMarryDBEntry* FMarryDB::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryDBEntry >&
FMarryDB::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryDBEntry >*
FMarryDB::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// Fest_XiYouGlobalDBInfo

// optional int32 id = 1;
inline bool Fest_XiYouGlobalDBInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_XiYouGlobalDBInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_XiYouGlobalDBInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_XiYouGlobalDBInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_XiYouGlobalDBInfo::id() const {
  return id_;
}
inline void Fest_XiYouGlobalDBInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 status = 2;
inline bool Fest_XiYouGlobalDBInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_XiYouGlobalDBInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_XiYouGlobalDBInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_XiYouGlobalDBInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Fest_XiYouGlobalDBInfo::status() const {
  return status_;
}
inline void Fest_XiYouGlobalDBInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 state = 3;
inline bool Fest_XiYouGlobalDBInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_XiYouGlobalDBInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_XiYouGlobalDBInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_XiYouGlobalDBInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Fest_XiYouGlobalDBInfo::state() const {
  return state_;
}
inline void Fest_XiYouGlobalDBInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// C2LFMarrySynScoreReq

// optional int32 tmpId = 1;
inline bool C2LFMarrySynScoreReq::has_tmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LFMarrySynScoreReq::set_has_tmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LFMarrySynScoreReq::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LFMarrySynScoreReq::clear_tmpid() {
  tmpid_ = 0;
  clear_has_tmpid();
}
inline ::google::protobuf::int32 C2LFMarrySynScoreReq::tmpid() const {
  return tmpid_;
}
inline void C2LFMarrySynScoreReq::set_tmpid(::google::protobuf::int32 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// optional int32 marry_id = 2;
inline bool C2LFMarrySynScoreReq::has_marry_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LFMarrySynScoreReq::set_has_marry_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LFMarrySynScoreReq::clear_has_marry_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LFMarrySynScoreReq::clear_marry_id() {
  marry_id_ = 0;
  clear_has_marry_id();
}
inline ::google::protobuf::int32 C2LFMarrySynScoreReq::marry_id() const {
  return marry_id_;
}
inline void C2LFMarrySynScoreReq::set_marry_id(::google::protobuf::int32 value) {
  set_has_marry_id();
  marry_id_ = value;
}

// optional uint64 cid = 3;
inline bool C2LFMarrySynScoreReq::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2LFMarrySynScoreReq::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2LFMarrySynScoreReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2LFMarrySynScoreReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 C2LFMarrySynScoreReq::cid() const {
  return cid_;
}
inline void C2LFMarrySynScoreReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// L2CFMarrySynScoreRsp

// optional int32 tmpId = 1;
inline bool L2CFMarrySynScoreRsp::has_tmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2CFMarrySynScoreRsp::set_has_tmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2CFMarrySynScoreRsp::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2CFMarrySynScoreRsp::clear_tmpid() {
  tmpid_ = 0;
  clear_has_tmpid();
}
inline ::google::protobuf::int32 L2CFMarrySynScoreRsp::tmpid() const {
  return tmpid_;
}
inline void L2CFMarrySynScoreRsp::set_tmpid(::google::protobuf::int32 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// optional int32 marry_id = 2;
inline bool L2CFMarrySynScoreRsp::has_marry_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void L2CFMarrySynScoreRsp::set_has_marry_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void L2CFMarrySynScoreRsp::clear_has_marry_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void L2CFMarrySynScoreRsp::clear_marry_id() {
  marry_id_ = 0;
  clear_has_marry_id();
}
inline ::google::protobuf::int32 L2CFMarrySynScoreRsp::marry_id() const {
  return marry_id_;
}
inline void L2CFMarrySynScoreRsp::set_marry_id(::google::protobuf::int32 value) {
  set_has_marry_id();
  marry_id_ = value;
}

// optional uint64 cid = 3;
inline bool L2CFMarrySynScoreRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void L2CFMarrySynScoreRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void L2CFMarrySynScoreRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void L2CFMarrySynScoreRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 L2CFMarrySynScoreRsp::cid() const {
  return cid_;
}
inline void L2CFMarrySynScoreRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 score = 4;
inline bool L2CFMarrySynScoreRsp::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void L2CFMarrySynScoreRsp::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void L2CFMarrySynScoreRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void L2CFMarrySynScoreRsp::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 L2CFMarrySynScoreRsp::score() const {
  return score_;
}
inline void L2CFMarrySynScoreRsp::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// Fest_XiYouGlobalDBEntry

// optional int32 tmpId = 1;
inline bool Fest_XiYouGlobalDBEntry::has_tmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_XiYouGlobalDBEntry::set_has_tmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_XiYouGlobalDBEntry::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_XiYouGlobalDBEntry::clear_tmpid() {
  tmpid_ = 0;
  clear_has_tmpid();
}
inline ::google::protobuf::int32 Fest_XiYouGlobalDBEntry::tmpid() const {
  return tmpid_;
}
inline void Fest_XiYouGlobalDBEntry::set_tmpid(::google::protobuf::int32 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// repeated .proto_ff.Fest_XiYouGlobalDBInfo info = 2;
inline int Fest_XiYouGlobalDBEntry::info_size() const {
  return info_.size();
}
inline void Fest_XiYouGlobalDBEntry::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::Fest_XiYouGlobalDBInfo& Fest_XiYouGlobalDBEntry::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::Fest_XiYouGlobalDBInfo* Fest_XiYouGlobalDBEntry::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::Fest_XiYouGlobalDBInfo* Fest_XiYouGlobalDBEntry::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBInfo >&
Fest_XiYouGlobalDBEntry::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBInfo >*
Fest_XiYouGlobalDBEntry::mutable_info() {
  return &info_;
}

// optional int32 state = 3;
inline bool Fest_XiYouGlobalDBEntry::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_XiYouGlobalDBEntry::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_XiYouGlobalDBEntry::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_XiYouGlobalDBEntry::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Fest_XiYouGlobalDBEntry::state() const {
  return state_;
}
inline void Fest_XiYouGlobalDBEntry::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional bool open = 4;
inline bool Fest_XiYouGlobalDBEntry::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_XiYouGlobalDBEntry::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_XiYouGlobalDBEntry::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_XiYouGlobalDBEntry::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool Fest_XiYouGlobalDBEntry::open() const {
  return open_;
}
inline void Fest_XiYouGlobalDBEntry::set_open(bool value) {
  set_has_open();
  open_ = value;
}

// optional int32 readyId = 5;
inline bool Fest_XiYouGlobalDBEntry::has_readyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Fest_XiYouGlobalDBEntry::set_has_readyid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Fest_XiYouGlobalDBEntry::clear_has_readyid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Fest_XiYouGlobalDBEntry::clear_readyid() {
  readyid_ = 0;
  clear_has_readyid();
}
inline ::google::protobuf::int32 Fest_XiYouGlobalDBEntry::readyid() const {
  return readyid_;
}
inline void Fest_XiYouGlobalDBEntry::set_readyid(::google::protobuf::int32 value) {
  set_has_readyid();
  readyid_ = value;
}

// -------------------------------------------------------------------

// Fest_XiYouGlobalDB

// repeated .proto_ff.Fest_XiYouGlobalDBEntry entrys = 1;
inline int Fest_XiYouGlobalDB::entrys_size() const {
  return entrys_.size();
}
inline void Fest_XiYouGlobalDB::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::Fest_XiYouGlobalDBEntry& Fest_XiYouGlobalDB::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::Fest_XiYouGlobalDBEntry* Fest_XiYouGlobalDB::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::Fest_XiYouGlobalDBEntry* Fest_XiYouGlobalDB::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBEntry >&
Fest_XiYouGlobalDB::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Fest_XiYouGlobalDBEntry >*
Fest_XiYouGlobalDB::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// Fest_XiYouSyncNotify

// optional int32 template_id = 1;
inline bool Fest_XiYouSyncNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_XiYouSyncNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_XiYouSyncNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_XiYouSyncNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_XiYouSyncNotify::template_id() const {
  return template_id_;
}
inline void Fest_XiYouSyncNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 cur_state_id = 2;
inline bool Fest_XiYouSyncNotify::has_cur_state_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_XiYouSyncNotify::set_has_cur_state_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_XiYouSyncNotify::clear_has_cur_state_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_XiYouSyncNotify::clear_cur_state_id() {
  cur_state_id_ = 0;
  clear_has_cur_state_id();
}
inline ::google::protobuf::int32 Fest_XiYouSyncNotify::cur_state_id() const {
  return cur_state_id_;
}
inline void Fest_XiYouSyncNotify::set_cur_state_id(::google::protobuf::int32 value) {
  set_has_cur_state_id();
  cur_state_id_ = value;
}

// optional int32 cur_state_status = 3;
inline bool Fest_XiYouSyncNotify::has_cur_state_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_XiYouSyncNotify::set_has_cur_state_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_XiYouSyncNotify::clear_has_cur_state_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_XiYouSyncNotify::clear_cur_state_status() {
  cur_state_status_ = 0;
  clear_has_cur_state_status();
}
inline ::google::protobuf::int32 Fest_XiYouSyncNotify::cur_state_status() const {
  return cur_state_status_;
}
inline void Fest_XiYouSyncNotify::set_cur_state_status(::google::protobuf::int32 value) {
  set_has_cur_state_status();
  cur_state_status_ = value;
}

// optional int32 cur_state_time = 4;
inline bool Fest_XiYouSyncNotify::has_cur_state_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_XiYouSyncNotify::set_has_cur_state_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_XiYouSyncNotify::clear_has_cur_state_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_XiYouSyncNotify::clear_cur_state_time() {
  cur_state_time_ = 0;
  clear_has_cur_state_time();
}
inline ::google::protobuf::int32 Fest_XiYouSyncNotify::cur_state_time() const {
  return cur_state_time_;
}
inline void Fest_XiYouSyncNotify::set_cur_state_time(::google::protobuf::int32 value) {
  set_has_cur_state_time();
  cur_state_time_ = value;
}

// -------------------------------------------------------------------

// Fest_XiYouSyncLogic

// optional int32 cur_state = 1;
inline bool Fest_XiYouSyncLogic::has_cur_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_XiYouSyncLogic::set_has_cur_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_XiYouSyncLogic::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_XiYouSyncLogic::clear_cur_state() {
  cur_state_ = 0;
  clear_has_cur_state();
}
inline ::google::protobuf::int32 Fest_XiYouSyncLogic::cur_state() const {
  return cur_state_;
}
inline void Fest_XiYouSyncLogic::set_cur_state(::google::protobuf::int32 value) {
  set_has_cur_state();
  cur_state_ = value;
}

// optional int32 zid = 2;
inline bool Fest_XiYouSyncLogic::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_XiYouSyncLogic::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_XiYouSyncLogic::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_XiYouSyncLogic::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 Fest_XiYouSyncLogic::zid() const {
  return zid_;
}
inline void Fest_XiYouSyncLogic::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 logic_id = 3;
inline bool Fest_XiYouSyncLogic::has_logic_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_XiYouSyncLogic::set_has_logic_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_XiYouSyncLogic::clear_has_logic_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_XiYouSyncLogic::clear_logic_id() {
  logic_id_ = 0;
  clear_has_logic_id();
}
inline ::google::protobuf::int32 Fest_XiYouSyncLogic::logic_id() const {
  return logic_id_;
}
inline void Fest_XiYouSyncLogic::set_logic_id(::google::protobuf::int32 value) {
  set_has_logic_id();
  logic_id_ = value;
}

// -------------------------------------------------------------------

// Fest_XiYouSyncFinish

// optional int32 game_id = 1;
inline bool Fest_XiYouSyncFinish::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_XiYouSyncFinish::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_XiYouSyncFinish::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_XiYouSyncFinish::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 Fest_XiYouSyncFinish::game_id() const {
  return game_id_;
}
inline void Fest_XiYouSyncFinish::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional int32 ready_id = 2;
inline bool Fest_XiYouSyncFinish::has_ready_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_XiYouSyncFinish::set_has_ready_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_XiYouSyncFinish::clear_has_ready_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_XiYouSyncFinish::clear_ready_id() {
  ready_id_ = 0;
  clear_has_ready_id();
}
inline ::google::protobuf::int32 Fest_XiYouSyncFinish::ready_id() const {
  return ready_id_;
}
inline void Fest_XiYouSyncFinish::set_ready_id(::google::protobuf::int32 value) {
  set_has_ready_id();
  ready_id_ = value;
}

// -------------------------------------------------------------------

// Fest_XiYouSyncForceClose

// optional int32 ready_id = 1;
inline bool Fest_XiYouSyncForceClose::has_ready_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_XiYouSyncForceClose::set_has_ready_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_XiYouSyncForceClose::clear_has_ready_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_XiYouSyncForceClose::clear_ready_id() {
  ready_id_ = 0;
  clear_has_ready_id();
}
inline ::google::protobuf::int32 Fest_XiYouSyncForceClose::ready_id() const {
  return ready_id_;
}
inline void Fest_XiYouSyncForceClose::set_ready_id(::google::protobuf::int32 value) {
  set_has_ready_id();
  ready_id_ = value;
}

// optional int32 cur_state = 2;
inline bool Fest_XiYouSyncForceClose::has_cur_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_XiYouSyncForceClose::set_has_cur_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_XiYouSyncForceClose::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_XiYouSyncForceClose::clear_cur_state() {
  cur_state_ = 0;
  clear_has_cur_state();
}
inline ::google::protobuf::int32 Fest_XiYouSyncForceClose::cur_state() const {
  return cur_state_;
}
inline void Fest_XiYouSyncForceClose::set_cur_state(::google::protobuf::int32 value) {
  set_has_cur_state();
  cur_state_ = value;
}

// -------------------------------------------------------------------

// Fest_DayTotalRechargeFetchReq

// optional int32 template_id = 1;
inline bool Fest_DayTotalRechargeFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DayTotalRechargeFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DayTotalRechargeFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DayTotalRechargeFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DayTotalRechargeFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_DayTotalRechargeFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_DayTotalRechargeFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DayTotalRechargeFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DayTotalRechargeFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DayTotalRechargeFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_DayTotalRechargeFetchReq::id() const {
  return id_;
}
inline void Fest_DayTotalRechargeFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_DayTotalRechargeFetchRsp

// optional int32 template_id = 1;
inline bool Fest_DayTotalRechargeFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DayTotalRechargeFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DayTotalRechargeFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DayTotalRechargeFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DayTotalRechargeFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_DayTotalRechargeFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_DayTotalRechargeFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DayTotalRechargeFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DayTotalRechargeFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DayTotalRechargeFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_DayTotalRechargeFetchRsp::ret() const {
  return ret_;
}
inline void Fest_DayTotalRechargeFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_DayTotalRechargeNotify

// optional int32 template_id = 1;
inline bool Fest_DayTotalRechargeNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_DayTotalRechargeNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_DayTotalRechargeNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_DayTotalRechargeNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_DayTotalRechargeNotify::template_id() const {
  return template_id_;
}
inline void Fest_DayTotalRechargeNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 recharge = 2;
inline bool Fest_DayTotalRechargeNotify::has_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_DayTotalRechargeNotify::set_has_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_DayTotalRechargeNotify::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_DayTotalRechargeNotify::clear_recharge() {
  recharge_ = 0u;
  clear_has_recharge();
}
inline ::google::protobuf::uint32 Fest_DayTotalRechargeNotify::recharge() const {
  return recharge_;
}
inline void Fest_DayTotalRechargeNotify::set_recharge(::google::protobuf::uint32 value) {
  set_has_recharge();
  recharge_ = value;
}

// repeated int32 fetch_lst = 3;
inline int Fest_DayTotalRechargeNotify::fetch_lst_size() const {
  return fetch_lst_.size();
}
inline void Fest_DayTotalRechargeNotify::clear_fetch_lst() {
  fetch_lst_.Clear();
}
inline ::google::protobuf::int32 Fest_DayTotalRechargeNotify::fetch_lst(int index) const {
  return fetch_lst_.Get(index);
}
inline void Fest_DayTotalRechargeNotify::set_fetch_lst(int index, ::google::protobuf::int32 value) {
  fetch_lst_.Set(index, value);
}
inline void Fest_DayTotalRechargeNotify::add_fetch_lst(::google::protobuf::int32 value) {
  fetch_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Fest_DayTotalRechargeNotify::fetch_lst() const {
  return fetch_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Fest_DayTotalRechargeNotify::mutable_fetch_lst() {
  return &fetch_lst_;
}

// -------------------------------------------------------------------

// Fest_LoginRewardFetchReq

// optional int32 template_id = 1;
inline bool Fest_LoginRewardFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LoginRewardFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LoginRewardFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LoginRewardFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LoginRewardFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_LoginRewardFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 day = 2;
inline bool Fest_LoginRewardFetchReq::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LoginRewardFetchReq::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LoginRewardFetchReq::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LoginRewardFetchReq::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 Fest_LoginRewardFetchReq::day() const {
  return day_;
}
inline void Fest_LoginRewardFetchReq::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// Fest_LoginRewardFetchRsp

// optional int32 template_id = 1;
inline bool Fest_LoginRewardFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LoginRewardFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LoginRewardFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LoginRewardFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LoginRewardFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_LoginRewardFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_LoginRewardFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LoginRewardFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LoginRewardFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LoginRewardFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_LoginRewardFetchRsp::ret() const {
  return ret_;
}
inline void Fest_LoginRewardFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_LoginRewardNotify

// optional int32 template_id = 1;
inline bool Fest_LoginRewardNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LoginRewardNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LoginRewardNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LoginRewardNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LoginRewardNotify::template_id() const {
  return template_id_;
}
inline void Fest_LoginRewardNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.ComPair fetch = 2;
inline int Fest_LoginRewardNotify::fetch_size() const {
  return fetch_.size();
}
inline void Fest_LoginRewardNotify::clear_fetch() {
  fetch_.Clear();
}
inline const ::proto_ff::ComPair& Fest_LoginRewardNotify::fetch(int index) const {
  return fetch_.Get(index);
}
inline ::proto_ff::ComPair* Fest_LoginRewardNotify::mutable_fetch(int index) {
  return fetch_.Mutable(index);
}
inline ::proto_ff::ComPair* Fest_LoginRewardNotify::add_fetch() {
  return fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
Fest_LoginRewardNotify::fetch() const {
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
Fest_LoginRewardNotify::mutable_fetch() {
  return &fetch_;
}

// -------------------------------------------------------------------

// Fest_TotalRechargeFetchReq

// optional int32 template_id = 1;
inline bool Fest_TotalRechargeFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_TotalRechargeFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_TotalRechargeFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_TotalRechargeFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_TotalRechargeFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_TotalRechargeFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_TotalRechargeFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_TotalRechargeFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_TotalRechargeFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_TotalRechargeFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_TotalRechargeFetchReq::id() const {
  return id_;
}
inline void Fest_TotalRechargeFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_TotalRechargeFetchRsp

// optional int32 template_id = 1;
inline bool Fest_TotalRechargeFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_TotalRechargeFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_TotalRechargeFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_TotalRechargeFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_TotalRechargeFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_TotalRechargeFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_TotalRechargeFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_TotalRechargeFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_TotalRechargeFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_TotalRechargeFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_TotalRechargeFetchRsp::ret() const {
  return ret_;
}
inline void Fest_TotalRechargeFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_TotalRechargeNotify

// optional int32 template_id = 1;
inline bool Fest_TotalRechargeNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_TotalRechargeNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_TotalRechargeNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_TotalRechargeNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_TotalRechargeNotify::template_id() const {
  return template_id_;
}
inline void Fest_TotalRechargeNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated int32 fetch_lst = 2;
inline int Fest_TotalRechargeNotify::fetch_lst_size() const {
  return fetch_lst_.size();
}
inline void Fest_TotalRechargeNotify::clear_fetch_lst() {
  fetch_lst_.Clear();
}
inline ::google::protobuf::int32 Fest_TotalRechargeNotify::fetch_lst(int index) const {
  return fetch_lst_.Get(index);
}
inline void Fest_TotalRechargeNotify::set_fetch_lst(int index, ::google::protobuf::int32 value) {
  fetch_lst_.Set(index, value);
}
inline void Fest_TotalRechargeNotify::add_fetch_lst(::google::protobuf::int32 value) {
  fetch_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Fest_TotalRechargeNotify::fetch_lst() const {
  return fetch_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Fest_TotalRechargeNotify::mutable_fetch_lst() {
  return &fetch_lst_;
}

// optional uint32 total_recharge = 3;
inline bool Fest_TotalRechargeNotify::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_TotalRechargeNotify::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_TotalRechargeNotify::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_TotalRechargeNotify::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 Fest_TotalRechargeNotify::total_recharge() const {
  return total_recharge_;
}
inline void Fest_TotalRechargeNotify::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeTotalFetchReq

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeTotalFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeTotalFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeTotalFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeTotalFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeTotalFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeTotalFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 gear = 2;
inline bool Fest_ContiRechargeTotalFetchReq::has_gear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeTotalFetchReq::set_has_gear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeTotalFetchReq::clear_has_gear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeTotalFetchReq::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 Fest_ContiRechargeTotalFetchReq::gear() const {
  return gear_;
}
inline void Fest_ContiRechargeTotalFetchReq::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// optional int32 total_day = 3;
inline bool Fest_ContiRechargeTotalFetchReq::has_total_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_ContiRechargeTotalFetchReq::set_has_total_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_ContiRechargeTotalFetchReq::clear_has_total_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_ContiRechargeTotalFetchReq::clear_total_day() {
  total_day_ = 0;
  clear_has_total_day();
}
inline ::google::protobuf::int32 Fest_ContiRechargeTotalFetchReq::total_day() const {
  return total_day_;
}
inline void Fest_ContiRechargeTotalFetchReq::set_total_day(::google::protobuf::int32 value) {
  set_has_total_day();
  total_day_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeTotalFetchRsp

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeTotalFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeTotalFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeTotalFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeTotalFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeTotalFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeTotalFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_ContiRechargeTotalFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeTotalFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeTotalFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeTotalFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ContiRechargeTotalFetchRsp::ret() const {
  return ret_;
}
inline void Fest_ContiRechargeTotalFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeDayFetchReq

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeDayFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeDayFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeDayFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeDayFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeDayFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeDayFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 day = 2;
inline bool Fest_ContiRechargeDayFetchReq::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeDayFetchReq::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeDayFetchReq::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeDayFetchReq::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 Fest_ContiRechargeDayFetchReq::day() const {
  return day_;
}
inline void Fest_ContiRechargeDayFetchReq::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional int32 gear = 3;
inline bool Fest_ContiRechargeDayFetchReq::has_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_ContiRechargeDayFetchReq::set_has_gear() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_ContiRechargeDayFetchReq::clear_has_gear() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_ContiRechargeDayFetchReq::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 Fest_ContiRechargeDayFetchReq::gear() const {
  return gear_;
}
inline void Fest_ContiRechargeDayFetchReq::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeDayFetchRsp

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeDayFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeDayFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeDayFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeDayFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeDayFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeDayFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_ContiRechargeDayFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeDayFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeDayFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeDayFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ContiRechargeDayFetchRsp::ret() const {
  return ret_;
}
inline void Fest_ContiRechargeDayFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeSuppleReq

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeSuppleReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeSuppleReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeSuppleReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeSuppleReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeSuppleReq::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeSuppleReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 supplement = 2;
inline bool Fest_ContiRechargeSuppleReq::has_supplement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeSuppleReq::set_has_supplement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeSuppleReq::clear_has_supplement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeSuppleReq::clear_supplement() {
  supplement_ = 0;
  clear_has_supplement();
}
inline ::google::protobuf::int32 Fest_ContiRechargeSuppleReq::supplement() const {
  return supplement_;
}
inline void Fest_ContiRechargeSuppleReq::set_supplement(::google::protobuf::int32 value) {
  set_has_supplement();
  supplement_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeSuppleRsp

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeSuppleRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeSuppleRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeSuppleRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeSuppleRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeSuppleRsp::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeSuppleRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_ContiRechargeSuppleRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeSuppleRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeSuppleRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeSuppleRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ContiRechargeSuppleRsp::ret() const {
  return ret_;
}
inline void Fest_ContiRechargeSuppleRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_ContiRechargeUpdateRsp

// optional int32 template_id = 1;
inline bool Fest_ContiRechargeUpdateRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ContiRechargeUpdateRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ContiRechargeUpdateRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ContiRechargeUpdateRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ContiRechargeUpdateRsp::template_id() const {
  return template_id_;
}
inline void Fest_ContiRechargeUpdateRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 total_recharge = 2;
inline bool Fest_ContiRechargeUpdateRsp::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ContiRechargeUpdateRsp::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ContiRechargeUpdateRsp::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ContiRechargeUpdateRsp::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 Fest_ContiRechargeUpdateRsp::total_recharge() const {
  return total_recharge_;
}
inline void Fest_ContiRechargeUpdateRsp::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// optional int32 supplement = 3;
inline bool Fest_ContiRechargeUpdateRsp::has_supplement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_ContiRechargeUpdateRsp::set_has_supplement() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_ContiRechargeUpdateRsp::clear_has_supplement() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_ContiRechargeUpdateRsp::clear_supplement() {
  supplement_ = 0;
  clear_has_supplement();
}
inline ::google::protobuf::int32 Fest_ContiRechargeUpdateRsp::supplement() const {
  return supplement_;
}
inline void Fest_ContiRechargeUpdateRsp::set_supplement(::google::protobuf::int32 value) {
  set_has_supplement();
  supplement_ = value;
}

// repeated .proto_ff.FestContiDayRewardProto day = 4;
inline int Fest_ContiRechargeUpdateRsp::day_size() const {
  return day_.size();
}
inline void Fest_ContiRechargeUpdateRsp::clear_day() {
  day_.Clear();
}
inline const ::proto_ff::FestContiDayRewardProto& Fest_ContiRechargeUpdateRsp::day(int index) const {
  return day_.Get(index);
}
inline ::proto_ff::FestContiDayRewardProto* Fest_ContiRechargeUpdateRsp::mutable_day(int index) {
  return day_.Mutable(index);
}
inline ::proto_ff::FestContiDayRewardProto* Fest_ContiRechargeUpdateRsp::add_day() {
  return day_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >&
Fest_ContiRechargeUpdateRsp::day() const {
  return day_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiDayRewardProto >*
Fest_ContiRechargeUpdateRsp::mutable_day() {
  return &day_;
}

// repeated .proto_ff.FestContiTotalRewardProto total = 5;
inline int Fest_ContiRechargeUpdateRsp::total_size() const {
  return total_.size();
}
inline void Fest_ContiRechargeUpdateRsp::clear_total() {
  total_.Clear();
}
inline const ::proto_ff::FestContiTotalRewardProto& Fest_ContiRechargeUpdateRsp::total(int index) const {
  return total_.Get(index);
}
inline ::proto_ff::FestContiTotalRewardProto* Fest_ContiRechargeUpdateRsp::mutable_total(int index) {
  return total_.Mutable(index);
}
inline ::proto_ff::FestContiTotalRewardProto* Fest_ContiRechargeUpdateRsp::add_total() {
  return total_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >&
Fest_ContiRechargeUpdateRsp::total() const {
  return total_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestContiTotalRewardProto >*
Fest_ContiRechargeUpdateRsp::mutable_total() {
  return &total_;
}

// -------------------------------------------------------------------

// Fest_LimitSaleBuyReq

// optional int32 template_id = 1;
inline bool Fest_LimitSaleBuyReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LimitSaleBuyReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LimitSaleBuyReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LimitSaleBuyReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LimitSaleBuyReq::template_id() const {
  return template_id_;
}
inline void Fest_LimitSaleBuyReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_LimitSaleBuyReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LimitSaleBuyReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LimitSaleBuyReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LimitSaleBuyReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_LimitSaleBuyReq::id() const {
  return id_;
}
inline void Fest_LimitSaleBuyReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_LimitSaleBuyRsp

// optional int32 template_id = 1;
inline bool Fest_LimitSaleBuyRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LimitSaleBuyRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LimitSaleBuyRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LimitSaleBuyRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LimitSaleBuyRsp::template_id() const {
  return template_id_;
}
inline void Fest_LimitSaleBuyRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_LimitSaleBuyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LimitSaleBuyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LimitSaleBuyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LimitSaleBuyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_LimitSaleBuyRsp::ret() const {
  return ret_;
}
inline void Fest_LimitSaleBuyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_LimitSaleFetchReq

// optional int32 template_id = 1;
inline bool Fest_LimitSaleFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LimitSaleFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LimitSaleFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LimitSaleFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LimitSaleFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_LimitSaleFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 val = 2;
inline bool Fest_LimitSaleFetchReq::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LimitSaleFetchReq::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LimitSaleFetchReq::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LimitSaleFetchReq::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 Fest_LimitSaleFetchReq::val() const {
  return val_;
}
inline void Fest_LimitSaleFetchReq::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// Fest_LimitSaleFetchRsp

// optional int32 template_id = 1;
inline bool Fest_LimitSaleFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LimitSaleFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LimitSaleFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LimitSaleFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LimitSaleFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_LimitSaleFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_LimitSaleFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LimitSaleFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LimitSaleFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LimitSaleFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_LimitSaleFetchRsp::ret() const {
  return ret_;
}
inline void Fest_LimitSaleFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Fest_LimitSaleUpdateRsp

// optional int32 template_id = 1;
inline bool Fest_LimitSaleUpdateRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_LimitSaleUpdateRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_LimitSaleUpdateRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_LimitSaleUpdateRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_LimitSaleUpdateRsp::template_id() const {
  return template_id_;
}
inline void Fest_LimitSaleUpdateRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 type = 2;
inline bool Fest_LimitSaleUpdateRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_LimitSaleUpdateRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_LimitSaleUpdateRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_LimitSaleUpdateRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Fest_LimitSaleUpdateRsp::type() const {
  return type_;
}
inline void Fest_LimitSaleUpdateRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 total = 3;
inline bool Fest_LimitSaleUpdateRsp::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_LimitSaleUpdateRsp::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_LimitSaleUpdateRsp::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_LimitSaleUpdateRsp::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 Fest_LimitSaleUpdateRsp::total() const {
  return total_;
}
inline void Fest_LimitSaleUpdateRsp::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// repeated int32 fetch_total = 4;
inline int Fest_LimitSaleUpdateRsp::fetch_total_size() const {
  return fetch_total_.size();
}
inline void Fest_LimitSaleUpdateRsp::clear_fetch_total() {
  fetch_total_.Clear();
}
inline ::google::protobuf::int32 Fest_LimitSaleUpdateRsp::fetch_total(int index) const {
  return fetch_total_.Get(index);
}
inline void Fest_LimitSaleUpdateRsp::set_fetch_total(int index, ::google::protobuf::int32 value) {
  fetch_total_.Set(index, value);
}
inline void Fest_LimitSaleUpdateRsp::add_fetch_total(::google::protobuf::int32 value) {
  fetch_total_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Fest_LimitSaleUpdateRsp::fetch_total() const {
  return fetch_total_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Fest_LimitSaleUpdateRsp::mutable_fetch_total() {
  return &fetch_total_;
}

// repeated .proto_ff.ComPair buy = 5;
inline int Fest_LimitSaleUpdateRsp::buy_size() const {
  return buy_.size();
}
inline void Fest_LimitSaleUpdateRsp::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::ComPair& Fest_LimitSaleUpdateRsp::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::ComPair* Fest_LimitSaleUpdateRsp::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::ComPair* Fest_LimitSaleUpdateRsp::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
Fest_LimitSaleUpdateRsp::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
Fest_LimitSaleUpdateRsp::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// Fest_MysteryBuyReq

// optional int32 template_id = 1;
inline bool Fest_MysteryBuyReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_MysteryBuyReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_MysteryBuyReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_MysteryBuyReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_MysteryBuyReq::template_id() const {
  return template_id_;
}
inline void Fest_MysteryBuyReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 2;
inline bool Fest_MysteryBuyReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_MysteryBuyReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_MysteryBuyReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_MysteryBuyReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_MysteryBuyReq::id() const {
  return id_;
}
inline void Fest_MysteryBuyReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_MysteryBuyRsp

// optional int32 template_id = 1;
inline bool Fest_MysteryBuyRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_MysteryBuyRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_MysteryBuyRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_MysteryBuyRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_MysteryBuyRsp::template_id() const {
  return template_id_;
}
inline void Fest_MysteryBuyRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 2;
inline bool Fest_MysteryBuyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_MysteryBuyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_MysteryBuyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_MysteryBuyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_MysteryBuyRsp::ret() const {
  return ret_;
}
inline void Fest_MysteryBuyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 id = 3;
inline bool Fest_MysteryBuyRsp::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_MysteryBuyRsp::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_MysteryBuyRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_MysteryBuyRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_MysteryBuyRsp::id() const {
  return id_;
}
inline void Fest_MysteryBuyRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 4;
inline bool Fest_MysteryBuyRsp::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_MysteryBuyRsp::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_MysteryBuyRsp::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_MysteryBuyRsp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Fest_MysteryBuyRsp::count() const {
  return count_;
}
inline void Fest_MysteryBuyRsp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Fest_MysteryUpdateRsp

// optional int32 template_id = 1;
inline bool Fest_MysteryUpdateRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_MysteryUpdateRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_MysteryUpdateRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_MysteryUpdateRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_MysteryUpdateRsp::template_id() const {
  return template_id_;
}
inline void Fest_MysteryUpdateRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 open_id = 2;
inline bool Fest_MysteryUpdateRsp::has_open_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_MysteryUpdateRsp::set_has_open_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_MysteryUpdateRsp::clear_has_open_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_MysteryUpdateRsp::clear_open_id() {
  open_id_ = 0;
  clear_has_open_id();
}
inline ::google::protobuf::int32 Fest_MysteryUpdateRsp::open_id() const {
  return open_id_;
}
inline void Fest_MysteryUpdateRsp::set_open_id(::google::protobuf::int32 value) {
  set_has_open_id();
  open_id_ = value;
}

// repeated .proto_ff.ComPair buy = 3;
inline int Fest_MysteryUpdateRsp::buy_size() const {
  return buy_.size();
}
inline void Fest_MysteryUpdateRsp::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::ComPair& Fest_MysteryUpdateRsp::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::ComPair* Fest_MysteryUpdateRsp::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::ComPair* Fest_MysteryUpdateRsp::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
Fest_MysteryUpdateRsp::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
Fest_MysteryUpdateRsp::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// Fest_ShootSunReq

// optional int32 template_id = 1;
inline bool Fest_ShootSunReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunReq::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 pos = 2;
inline bool Fest_ShootSunReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShootSunReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShootSunReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShootSunReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 Fest_ShootSunReq::pos() const {
  return pos_;
}
inline void Fest_ShootSunReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunRsp

// required int32 ret = 1;
inline bool Fest_ShootSunRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ShootSunRsp::ret() const {
  return ret_;
}
inline void Fest_ShootSunRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_ShootSunRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShootSunRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShootSunRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShootSunRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunRsp::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 id = 3;
inline bool Fest_ShootSunRsp::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_ShootSunRsp::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_ShootSunRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_ShootSunRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_ShootSunRsp::id() const {
  return id_;
}
inline void Fest_ShootSunRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 pos = 4;
inline bool Fest_ShootSunRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fest_ShootSunRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fest_ShootSunRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fest_ShootSunRsp::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 Fest_ShootSunRsp::pos() const {
  return pos_;
}
inline void Fest_ShootSunRsp::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunRestReq

// optional int32 template_id = 1;
inline bool Fest_ShootSunRestReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunRestReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunRestReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunRestReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunRestReq::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunRestReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunRestRsp

// required int32 ret = 1;
inline bool Fest_ShootSunRestRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunRestRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunRestRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunRestRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ShootSunRestRsp::ret() const {
  return ret_;
}
inline void Fest_ShootSunRestRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_ShootSunRestRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShootSunRestRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShootSunRestRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShootSunRestRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunRestRsp::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunRestRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 free = 3;
inline bool Fest_ShootSunRestRsp::has_free() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fest_ShootSunRestRsp::set_has_free() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fest_ShootSunRestRsp::clear_has_free() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fest_ShootSunRestRsp::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 Fest_ShootSunRestRsp::free() const {
  return free_;
}
inline void Fest_ShootSunRestRsp::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunLogReq

// optional int32 template_id = 1;
inline bool Fest_ShootSunLogReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunLogReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunLogReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunLogReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunLogReq::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunLogReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunLogRsp

// required int32 ret = 1;
inline bool Fest_ShootSunLogRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunLogRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunLogRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunLogRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ShootSunLogRsp::ret() const {
  return ret_;
}
inline void Fest_ShootSunLogRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_ShootSunLogRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShootSunLogRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShootSunLogRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShootSunLogRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunLogRsp::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunLogRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestShootSunLogProto log = 3;
inline int Fest_ShootSunLogRsp::log_size() const {
  return log_.size();
}
inline void Fest_ShootSunLogRsp::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::FestShootSunLogProto& Fest_ShootSunLogRsp::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::FestShootSunLogProto* Fest_ShootSunLogRsp::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::FestShootSunLogProto* Fest_ShootSunLogRsp::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunLogProto >&
Fest_ShootSunLogRsp::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunLogProto >*
Fest_ShootSunLogRsp::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// Fest_ShootSunTaskFetchReq

// required int32 template_id = 1;
inline bool Fest_ShootSunTaskFetchReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunTaskFetchReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunTaskFetchReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunTaskFetchReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunTaskFetchReq::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunTaskFetchReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// required int32 id = 2;
inline bool Fest_ShootSunTaskFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShootSunTaskFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShootSunTaskFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShootSunTaskFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Fest_ShootSunTaskFetchReq::id() const {
  return id_;
}
inline void Fest_ShootSunTaskFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunTaskFetchRsp

// required int32 ret = 1;
inline bool Fest_ShootSunTaskFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunTaskFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunTaskFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunTaskFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Fest_ShootSunTaskFetchRsp::ret() const {
  return ret_;
}
inline void Fest_ShootSunTaskFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 template_id = 2;
inline bool Fest_ShootSunTaskFetchRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fest_ShootSunTaskFetchRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fest_ShootSunTaskFetchRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fest_ShootSunTaskFetchRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunTaskFetchRsp::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunTaskFetchRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// Fest_ShootSunTaskUpdateRsp

// required int32 template_id = 1;
inline bool Fest_ShootSunTaskUpdateRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fest_ShootSunTaskUpdateRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fest_ShootSunTaskUpdateRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fest_ShootSunTaskUpdateRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 Fest_ShootSunTaskUpdateRsp::template_id() const {
  return template_id_;
}
inline void Fest_ShootSunTaskUpdateRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.FestShootSunTaskProto task = 2;
inline int Fest_ShootSunTaskUpdateRsp::task_size() const {
  return task_.size();
}
inline void Fest_ShootSunTaskUpdateRsp::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestShootSunTaskProto& Fest_ShootSunTaskUpdateRsp::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestShootSunTaskProto* Fest_ShootSunTaskUpdateRsp::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestShootSunTaskProto* Fest_ShootSunTaskUpdateRsp::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >&
Fest_ShootSunTaskUpdateRsp::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestShootSunTaskProto >*
Fest_ShootSunTaskUpdateRsp::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// FestRechargePrizeChouJiangReq

// optional int32 template_id = 1;
inline bool FestRechargePrizeChouJiangReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeChouJiangReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeChouJiangReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeChouJiangReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeChouJiangReq::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeChouJiangReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeChouJiangRsp

// optional int32 ret_code = 1;
inline bool FestRechargePrizeChouJiangRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeChouJiangRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeChouJiangRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeChouJiangRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FestRechargePrizeChouJiangRsp::ret_code() const {
  return ret_code_;
}
inline void FestRechargePrizeChouJiangRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional .proto_ff.FestRechargePrizeData data = 2;
inline bool FestRechargePrizeChouJiangRsp::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRechargePrizeChouJiangRsp::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRechargePrizeChouJiangRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRechargePrizeChouJiangRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FestRechargePrizeData::Clear();
  clear_has_data();
}
inline const ::proto_ff::FestRechargePrizeData& FestRechargePrizeChouJiangRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FestRechargePrizeData* FestRechargePrizeChouJiangRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FestRechargePrizeData;
  return data_;
}
inline ::proto_ff::FestRechargePrizeData* FestRechargePrizeChouJiangRsp::release_data() {
  clear_has_data();
  ::proto_ff::FestRechargePrizeData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FestRechargePrizeChouJiangRsp::set_allocated_data(::proto_ff::FestRechargePrizeData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional int32 template_id = 3;
inline bool FestRechargePrizeChouJiangRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestRechargePrizeChouJiangRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestRechargePrizeChouJiangRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestRechargePrizeChouJiangRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeChouJiangRsp::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeChouJiangRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeChouJiangRecordReq

// optional int32 template_id = 1;
inline bool FestRechargePrizeChouJiangRecordReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeChouJiangRecordReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeChouJiangRecordReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeChouJiangRecordReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeChouJiangRecordReq::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeChouJiangRecordReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeChouJiangRecordRsp

// optional int32 ret_code = 1;
inline bool FestRechargePrizeChouJiangRecordRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeChouJiangRecordRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeChouJiangRecordRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeChouJiangRecordRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FestRechargePrizeChouJiangRecordRsp::ret_code() const {
  return ret_code_;
}
inline void FestRechargePrizeChouJiangRecordRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// repeated .proto_ff.FestRechargePrizeRecord record = 2;
inline int FestRechargePrizeChouJiangRecordRsp::record_size() const {
  return record_.size();
}
inline void FestRechargePrizeChouJiangRecordRsp::clear_record() {
  record_.Clear();
}
inline const ::proto_ff::FestRechargePrizeRecord& FestRechargePrizeChouJiangRecordRsp::record(int index) const {
  return record_.Get(index);
}
inline ::proto_ff::FestRechargePrizeRecord* FestRechargePrizeChouJiangRecordRsp::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::proto_ff::FestRechargePrizeRecord* FestRechargePrizeChouJiangRecordRsp::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeRecord >&
FestRechargePrizeChouJiangRecordRsp::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeRecord >*
FestRechargePrizeChouJiangRecordRsp::mutable_record() {
  return &record_;
}

// optional int32 template_id = 3;
inline bool FestRechargePrizeChouJiangRecordRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestRechargePrizeChouJiangRecordRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestRechargePrizeChouJiangRecordRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestRechargePrizeChouJiangRecordRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeChouJiangRecordRsp::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeChouJiangRecordRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeGetTaskRewardReq

// optional int32 template_id = 1;
inline bool FestRechargePrizeGetTaskRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeGetTaskRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeGetTaskRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeGetTaskRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeGetTaskRewardReq::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeGetTaskRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 task_id = 2;
inline bool FestRechargePrizeGetTaskRewardReq::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRechargePrizeGetTaskRewardReq::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRechargePrizeGetTaskRewardReq::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRechargePrizeGetTaskRewardReq::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 FestRechargePrizeGetTaskRewardReq::task_id() const {
  return task_id_;
}
inline void FestRechargePrizeGetTaskRewardReq::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeGetTaskRewardRsp

// optional int32 ret_code = 1;
inline bool FestRechargePrizeGetTaskRewardRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeGetTaskRewardRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeGetTaskRewardRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeGetTaskRewardRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FestRechargePrizeGetTaskRewardRsp::ret_code() const {
  return ret_code_;
}
inline void FestRechargePrizeGetTaskRewardRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional .proto_ff.FestRechargePrizeTaskData task = 2;
inline bool FestRechargePrizeGetTaskRewardRsp::has_task() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRechargePrizeGetTaskRewardRsp::set_has_task() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRechargePrizeGetTaskRewardRsp::clear_has_task() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRechargePrizeGetTaskRewardRsp::clear_task() {
  if (task_ != NULL) task_->::proto_ff::FestRechargePrizeTaskData::Clear();
  clear_has_task();
}
inline const ::proto_ff::FestRechargePrizeTaskData& FestRechargePrizeGetTaskRewardRsp::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::proto_ff::FestRechargePrizeTaskData* FestRechargePrizeGetTaskRewardRsp::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::proto_ff::FestRechargePrizeTaskData;
  return task_;
}
inline ::proto_ff::FestRechargePrizeTaskData* FestRechargePrizeGetTaskRewardRsp::release_task() {
  clear_has_task();
  ::proto_ff::FestRechargePrizeTaskData* temp = task_;
  task_ = NULL;
  return temp;
}
inline void FestRechargePrizeGetTaskRewardRsp::set_allocated_task(::proto_ff::FestRechargePrizeTaskData* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional int32 template_id = 3;
inline bool FestRechargePrizeGetTaskRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestRechargePrizeGetTaskRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestRechargePrizeGetTaskRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestRechargePrizeGetTaskRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeGetTaskRewardRsp::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeGetTaskRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeGetFreeRewardReq

// optional int32 template_id = 1;
inline bool FestRechargePrizeGetFreeRewardReq::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeGetFreeRewardReq::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeGetFreeRewardReq::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeGetFreeRewardReq::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeGetFreeRewardReq::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeGetFreeRewardReq::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeGetFreeRewardRsp

// optional int32 ret_code = 1;
inline bool FestRechargePrizeGetFreeRewardRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestRechargePrizeGetFreeRewardRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestRechargePrizeGetFreeRewardRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestRechargePrizeGetFreeRewardRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 FestRechargePrizeGetFreeRewardRsp::ret_code() const {
  return ret_code_;
}
inline void FestRechargePrizeGetFreeRewardRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional uint32 free_status = 2;
inline bool FestRechargePrizeGetFreeRewardRsp::has_free_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRechargePrizeGetFreeRewardRsp::set_has_free_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRechargePrizeGetFreeRewardRsp::clear_has_free_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRechargePrizeGetFreeRewardRsp::clear_free_status() {
  free_status_ = 0u;
  clear_has_free_status();
}
inline ::google::protobuf::uint32 FestRechargePrizeGetFreeRewardRsp::free_status() const {
  return free_status_;
}
inline void FestRechargePrizeGetFreeRewardRsp::set_free_status(::google::protobuf::uint32 value) {
  set_has_free_status();
  free_status_ = value;
}

// optional int32 template_id = 3;
inline bool FestRechargePrizeGetFreeRewardRsp::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestRechargePrizeGetFreeRewardRsp::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestRechargePrizeGetFreeRewardRsp::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestRechargePrizeGetFreeRewardRsp::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeGetFreeRewardRsp::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeGetFreeRewardRsp::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// FestRechargePrizeTaskStatusNotify

// repeated .proto_ff.FestRechargePrizeTaskData task = 1;
inline int FestRechargePrizeTaskStatusNotify::task_size() const {
  return task_.size();
}
inline void FestRechargePrizeTaskStatusNotify::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestRechargePrizeTaskData& FestRechargePrizeTaskStatusNotify::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestRechargePrizeTaskData* FestRechargePrizeTaskStatusNotify::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestRechargePrizeTaskData* FestRechargePrizeTaskStatusNotify::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeTaskData >&
FestRechargePrizeTaskStatusNotify::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRechargePrizeTaskData >*
FestRechargePrizeTaskStatusNotify::mutable_task() {
  return &task_;
}

// optional int32 template_id = 2;
inline bool FestRechargePrizeTaskStatusNotify::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestRechargePrizeTaskStatusNotify::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestRechargePrizeTaskStatusNotify::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestRechargePrizeTaskStatusNotify::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestRechargePrizeTaskStatusNotify::template_id() const {
  return template_id_;
}
inline void FestRechargePrizeTaskStatusNotify::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Fest_2eproto__INCLUDED
