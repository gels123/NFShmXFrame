// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Box.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Box.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_BoxBoxBoxdataDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BoxBoxBoxdataDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BoxBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BoxBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BoxBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BoxBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BoxBoxdataEquipDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BoxBoxdataEquipDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BoxBoxdataItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BoxBoxdataItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BoxBoxdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BoxBoxdata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BoxBoxdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BoxBoxdata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fBox_2eproto() {
  protobuf_AddDesc_E_5fBox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Box.proto");
  GOOGLE_CHECK(file != NULL);
  E_BoxBoxBoxdataDesc_descriptor_ = file->message_type(0);
  static const int E_BoxBoxBoxdataDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxBoxdataDesc, m_mintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxBoxdataDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxBoxdataDesc, m_maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxBoxdataDesc, m_weight_),
  };
  E_BoxBoxBoxdataDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BoxBoxBoxdataDesc_descriptor_,
      E_BoxBoxBoxdataDesc::default_instance_,
      E_BoxBoxBoxdataDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxBoxdataDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxBoxdataDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BoxBoxBoxdataDesc));
  E_BoxBox_descriptor_ = file->message_type(1);
  static const int E_BoxBox_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_mintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, m_boxdata_),
  };
  E_BoxBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BoxBox_descriptor_,
      E_BoxBox::default_instance_,
      E_BoxBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BoxBox));
  Sheet_BoxBox_descriptor_ = file->message_type(2);
  static const int Sheet_BoxBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BoxBox, e_boxbox_list_),
  };
  Sheet_BoxBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BoxBox_descriptor_,
      Sheet_BoxBox::default_instance_,
      Sheet_BoxBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BoxBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BoxBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BoxBox));
  E_BoxBoxdataEquipDesc_descriptor_ = file->message_type(3);
  static const int E_BoxBoxdataEquipDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, m_maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, m_minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, m_isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, m_rand_),
  };
  E_BoxBoxdataEquipDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BoxBoxdataEquipDesc_descriptor_,
      E_BoxBoxdataEquipDesc::default_instance_,
      E_BoxBoxdataEquipDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataEquipDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BoxBoxdataEquipDesc));
  E_BoxBoxdataItemDesc_descriptor_ = file->message_type(4);
  static const int E_BoxBoxdataItemDesc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, m_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, m_maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, m_minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, m_isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, m_rarerand_),
  };
  E_BoxBoxdataItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BoxBoxdataItemDesc_descriptor_,
      E_BoxBoxdataItemDesc::default_instance_,
      E_BoxBoxdataItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdataItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BoxBoxdataItemDesc));
  E_BoxBoxdata_descriptor_ = file->message_type(5);
  static const int E_BoxBoxdata_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_drop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_goldminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_goldmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_goldrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_bindjewelminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_bindjewelmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_bindjewelrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_jewelminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_jewelmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_jewelrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_eq_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, m_item_),
  };
  E_BoxBoxdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BoxBoxdata_descriptor_,
      E_BoxBoxdata::default_instance_,
      E_BoxBoxdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BoxBoxdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BoxBoxdata));
  Sheet_BoxBoxdata_descriptor_ = file->message_type(6);
  static const int Sheet_BoxBoxdata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BoxBoxdata, e_boxboxdata_list_),
  };
  Sheet_BoxBoxdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BoxBoxdata_descriptor_,
      Sheet_BoxBoxdata::default_instance_,
      Sheet_BoxBoxdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BoxBoxdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BoxBoxdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BoxBoxdata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fBox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BoxBoxBoxdataDesc_descriptor_, &E_BoxBoxBoxdataDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BoxBox_descriptor_, &E_BoxBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BoxBox_descriptor_, &Sheet_BoxBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BoxBoxdataEquipDesc_descriptor_, &E_BoxBoxdataEquipDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BoxBoxdataItemDesc_descriptor_, &E_BoxBoxdataItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BoxBoxdata_descriptor_, &E_BoxBoxdata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BoxBoxdata_descriptor_, &Sheet_BoxBoxdata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fBox_2eproto() {
  delete E_BoxBoxBoxdataDesc::default_instance_;
  delete E_BoxBoxBoxdataDesc_reflection_;
  delete E_BoxBox::default_instance_;
  delete E_BoxBox_reflection_;
  delete Sheet_BoxBox::default_instance_;
  delete Sheet_BoxBox_reflection_;
  delete E_BoxBoxdataEquipDesc::default_instance_;
  delete E_BoxBoxdataEquipDesc_reflection_;
  delete E_BoxBoxdataItemDesc::default_instance_;
  delete E_BoxBoxdataItemDesc_reflection_;
  delete E_BoxBoxdata::default_instance_;
  delete E_BoxBoxdata_reflection_;
  delete Sheet_BoxBoxdata::default_instance_;
  delete Sheet_BoxBoxdata_reflection_;
}

void protobuf_AddDesc_E_5fBox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013E_Box.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\225\001\n\023E_BoxBoxBoxdataDesc\022$\n\nm_minT"
    "imes\030\001 \001(\005B\020\302\377\024\014\346\254\241\346\225\260\344\270\213\351\231\220\022\024\n\004m_id\030\002 \001"
    "(\003B\006\302\377\024\002id\022$\n\nm_maxTimes\030\003 \001(\005B\020\302\377\024\014\346\254\241\346"
    "\225\260\344\270\212\351\231\220\022\034\n\010m_weight\030\004 \001(\005B\n\302\377\024\006\346\235\203\351\207\215\"\230"
    "\002\n\010E_BoxBox\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002id\022\032\n\006m_t"
    "ype\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022 \n\006m_Rate\030\003 \001(\005B\020\302"
    "\377\024\014\347\224\237\346\225\210\346\246\202\347\216\207\022*\n\006m_Mask\030\004 \001(\tB\032\302\377\024\022\346\246\202"
    "\347\216\207\350\260\203\346\225\264\346\240\207\347\255\276\220\301\024@\022$\n\nm_minTimes\030\005 \001(\005B"
    "\020\302\377\024\014\346\234\200\345\260\217\346\254\241\346\225\260\022$\n\nm_maxTimes\030\006 \001(\005B\020\302"
    "\377\024\014\346\234\200\345\244\247\346\254\241\346\225\260\022@\n\tm_boxdata\030\007 \003(\0132\035.pro"
    "to_ff.E_BoxBoxBoxdataDescB\016\302\377\024\006\346\216\211\350\220\275\210\301\024"
    "\014\"@\n\014Sheet_BoxBox\0220\n\rE_BoxBox_List\030\001 \003(\013"
    "2\022.proto_ff.E_BoxBoxB\005\210\301\024\200 \"\274\001\n\025E_BoxBox"
    "dataEquipDesc\022\"\n\010m_maxNum\030\001 \001(\005B\020\302\377\024\014\346\234\200"
    "\345\244\247\346\225\260\351\207\217\022\"\n\010m_minNum\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346"
    "\225\260\351\207\217\022\034\n\010m_isbind\030\003 \001(\005B\n\302\377\024\006\347\273\221\345\256\232\022\030\n\004m"
    "_id\030\004 \001(\tB\n\302\377\024\002id\220\301\024@\022#\n\006m_rand\030\005 \001(\005B\023\302"
    "\377\024\017\346\246\202\347\216\207\347\231\276\345\210\206\346\257\224\"\351\001\n\024E_BoxBoxdataItemD"
    "esc\022\036\n\006m_rand\030\001 \001(\tB\016\302\377\024\006\346\235\203\351\207\215\220\301\024@\022\"\n\010m"
    "_maxNum\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\225\260\351\207\217\022\"\n\010m_min"
    "Num\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\351\207\217\022&\n\010m_isbind\030"
    "\004 \001(\tB\024\302\377\024\014\346\240\207\345\256\232\346\240\207\350\256\260\220\301\024@\022\030\n\004m_id\030\005 \001("
    "\tB\n\302\377\024\002id\220\301\024@\022\'\n\nm_rarerand\030\006 \001(\005B\023\302\377\024\017\346"
    "\246\202\347\216\207\347\231\276\345\210\206\346\257\224\"\216\005\n\014E_BoxBoxdata\022\035\n\004m_id\030"
    "\001 \001(\003B\017\302\377\024\013\346\216\211\350\220\275\345\214\205ID\022%\n\013m_drop_type\030\002 "
    "\001(\005B\020\302\377\024\014\346\216\211\350\220\275\347\261\273\345\236\213\022&\n\014m_goldminNum\030\003 "
    "\001(\005B\020\302\377\024\014\351\207\221\345\270\201\344\270\213\351\231\220\022&\n\014m_goldmaxNum\030\004 "
    "\001(\005B\020\302\377\024\014\351\207\221\345\270\201\344\270\212\351\231\220\022\'\n\nm_goldrand\030\005 \001("
    "\005B\023\302\377\024\017\351\207\221\345\270\201\346\216\211\350\220\275\347\216\207\022+\n\021m_bindjewelmin"
    "Num\030\006 \001(\005B\020\302\377\024\014\347\273\221\351\222\273\344\270\213\351\231\220\022+\n\021m_bindjew"
    "elmaxNum\030\007 \001(\005B\020\302\377\024\014\347\273\221\351\222\273\344\270\212\351\231\220\022,\n\017m_bi"
    "ndjewelrand\030\010 \001(\005B\023\302\377\024\017\347\273\221\351\222\273\346\216\211\350\220\275\347\216\207\022\'"
    "\n\rm_jewelminNum\030\t \001(\005B\020\302\377\024\014\351\222\273\347\237\263\344\270\213\351\231\220\022"
    "\'\n\rm_jewelmaxNum\030\n \001(\005B\020\302\377\024\014\351\222\273\347\237\263\344\270\212\351\231\220"
    "\022(\n\013m_jewelrand\030\013 \001(\005B\023\302\377\024\017\351\222\273\347\237\263\346\216\211\350\220\275\347"
    "\216\207\022-\n\017m_eq_profession\030\014 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\351"
    "\231\220\345\210\266\220\301\024@\022F\n\007m_equip\030\r \003(\0132\037.proto_ff.E_"
    "BoxBoxdataEquipDescB\024\302\377\024\014\347\250\200\346\234\211\350\243\205\345\244\207\210\301\024"
    "\025\022D\n\006m_item\030\016 \003(\0132\036.proto_ff.E_BoxBoxdat"
    "aItemDescB\024\302\377\024\014\347\250\200\346\234\211\347\211\251\345\223\201\210\301\0242\"L\n\020Sheet"
    "_BoxBoxdata\0228\n\021E_BoxBoxdata_List\030\001 \003(\0132\026"
    ".proto_ff.E_BoxBoxdataB\005\210\301\024\200 ", 1709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Box.proto", &protobuf_RegisterTypes);
  E_BoxBoxBoxdataDesc::default_instance_ = new E_BoxBoxBoxdataDesc();
  E_BoxBox::default_instance_ = new E_BoxBox();
  Sheet_BoxBox::default_instance_ = new Sheet_BoxBox();
  E_BoxBoxdataEquipDesc::default_instance_ = new E_BoxBoxdataEquipDesc();
  E_BoxBoxdataItemDesc::default_instance_ = new E_BoxBoxdataItemDesc();
  E_BoxBoxdata::default_instance_ = new E_BoxBoxdata();
  Sheet_BoxBoxdata::default_instance_ = new Sheet_BoxBoxdata();
  E_BoxBoxBoxdataDesc::default_instance_->InitAsDefaultInstance();
  E_BoxBox::default_instance_->InitAsDefaultInstance();
  Sheet_BoxBox::default_instance_->InitAsDefaultInstance();
  E_BoxBoxdataEquipDesc::default_instance_->InitAsDefaultInstance();
  E_BoxBoxdataItemDesc::default_instance_->InitAsDefaultInstance();
  E_BoxBoxdata::default_instance_->InitAsDefaultInstance();
  Sheet_BoxBoxdata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fBox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fBox_2eproto {
  StaticDescriptorInitializer_E_5fBox_2eproto() {
    protobuf_AddDesc_E_5fBox_2eproto();
  }
} static_descriptor_initializer_E_5fBox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_BoxBoxBoxdataDesc::kMMinTimesFieldNumber;
const int E_BoxBoxBoxdataDesc::kMIdFieldNumber;
const int E_BoxBoxBoxdataDesc::kMMaxTimesFieldNumber;
const int E_BoxBoxBoxdataDesc::kMWeightFieldNumber;
#endif  // !_MSC_VER

E_BoxBoxBoxdataDesc::E_BoxBoxBoxdataDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BoxBoxBoxdataDesc::InitAsDefaultInstance() {
}

E_BoxBoxBoxdataDesc::E_BoxBoxBoxdataDesc(const E_BoxBoxBoxdataDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BoxBoxBoxdataDesc::SharedCtor() {
  _cached_size_ = 0;
  m_mintimes_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_maxtimes_ = 0;
  m_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BoxBoxBoxdataDesc::~E_BoxBoxBoxdataDesc() {
  SharedDtor();
}

void E_BoxBoxBoxdataDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_BoxBoxBoxdataDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BoxBoxBoxdataDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BoxBoxBoxdataDesc_descriptor_;
}

const E_BoxBoxBoxdataDesc& E_BoxBoxBoxdataDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

E_BoxBoxBoxdataDesc* E_BoxBoxBoxdataDesc::default_instance_ = NULL;

E_BoxBoxBoxdataDesc* E_BoxBoxBoxdataDesc::New() const {
  return new E_BoxBoxBoxdataDesc;
}

void E_BoxBoxBoxdataDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mintimes_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
    m_maxtimes_ = 0;
    m_weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BoxBoxBoxdataDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_minTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mintimes_)));
          set_has_m_mintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int64 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_maxTimes;
        break;
      }

      // optional int32 m_maxTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxtimes_)));
          set_has_m_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_weight;
        break;
      }

      // optional int32 m_weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weight_)));
          set_has_m_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BoxBoxBoxdataDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_minTimes = 1;
  if (has_m_mintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mintimes(), output);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  // optional int32 m_maxTimes = 3;
  if (has_m_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_maxtimes(), output);
  }

  // optional int32 m_weight = 4;
  if (has_m_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BoxBoxBoxdataDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_minTimes = 1;
  if (has_m_mintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mintimes(), target);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  // optional int32 m_maxTimes = 3;
  if (has_m_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_maxtimes(), target);
  }

  // optional int32 m_weight = 4;
  if (has_m_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BoxBoxBoxdataDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_minTimes = 1;
    if (has_m_mintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mintimes());
    }

    // optional int64 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_maxTimes = 3;
    if (has_m_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxtimes());
    }

    // optional int32 m_weight = 4;
    if (has_m_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BoxBoxBoxdataDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BoxBoxBoxdataDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BoxBoxBoxdataDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BoxBoxBoxdataDesc::MergeFrom(const E_BoxBoxBoxdataDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mintimes()) {
      set_m_mintimes(from.m_mintimes());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_maxtimes()) {
      set_m_maxtimes(from.m_maxtimes());
    }
    if (from.has_m_weight()) {
      set_m_weight(from.m_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BoxBoxBoxdataDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BoxBoxBoxdataDesc::CopyFrom(const E_BoxBoxBoxdataDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BoxBoxBoxdataDesc::IsInitialized() const {

  return true;
}

void E_BoxBoxBoxdataDesc::Swap(E_BoxBoxBoxdataDesc* other) {
  if (other != this) {
    std::swap(m_mintimes_, other->m_mintimes_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_maxtimes_, other->m_maxtimes_);
    std::swap(m_weight_, other->m_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BoxBoxBoxdataDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BoxBoxBoxdataDesc_descriptor_;
  metadata.reflection = E_BoxBoxBoxdataDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BoxBox::kMIdFieldNumber;
const int E_BoxBox::kMTypeFieldNumber;
const int E_BoxBox::kMRateFieldNumber;
const int E_BoxBox::kMMaskFieldNumber;
const int E_BoxBox::kMMinTimesFieldNumber;
const int E_BoxBox::kMMaxTimesFieldNumber;
const int E_BoxBox::kMBoxdataFieldNumber;
#endif  // !_MSC_VER

E_BoxBox::E_BoxBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BoxBox::InitAsDefaultInstance() {
}

E_BoxBox::E_BoxBox(const E_BoxBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BoxBox::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_rate_ = 0;
  m_mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_mintimes_ = 0;
  m_maxtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BoxBox::~E_BoxBox() {
  SharedDtor();
}

void E_BoxBox::SharedDtor() {
  if (m_mask_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mask_;
  }
  if (this != default_instance_) {
  }
}

void E_BoxBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BoxBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BoxBox_descriptor_;
}

const E_BoxBox& E_BoxBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

E_BoxBox* E_BoxBox::default_instance_ = NULL;

E_BoxBox* E_BoxBox::New() const {
  return new E_BoxBox;
}

void E_BoxBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    m_rate_ = 0;
    if (has_m_mask()) {
      if (m_mask_ != &::google::protobuf::internal::kEmptyString) {
        m_mask_->clear();
      }
    }
    m_mintimes_ = 0;
    m_maxtimes_ = 0;
  }
  m_boxdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BoxBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Rate;
        break;
      }

      // optional int32 m_Rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rate_)));
          set_has_m_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Mask;
        break;
      }

      // optional string m_Mask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mask().data(), this->m_mask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_minTimes;
        break;
      }

      // optional int32 m_minTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mintimes_)));
          set_has_m_mintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_maxTimes;
        break;
      }

      // optional int32 m_maxTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxtimes_)));
          set_has_m_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_boxdata;
        break;
      }

      // repeated .proto_ff.E_BoxBoxBoxdataDesc m_boxdata = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_boxdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_boxdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_boxdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BoxBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_Rate = 3;
  if (has_m_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rate(), output);
  }

  // optional string m_Mask = 4;
  if (has_m_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mask().data(), this->m_mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_mask(), output);
  }

  // optional int32 m_minTimes = 5;
  if (has_m_mintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_mintimes(), output);
  }

  // optional int32 m_maxTimes = 6;
  if (has_m_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_maxtimes(), output);
  }

  // repeated .proto_ff.E_BoxBoxBoxdataDesc m_boxdata = 7;
  for (int i = 0; i < this->m_boxdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_boxdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BoxBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_Rate = 3;
  if (has_m_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rate(), target);
  }

  // optional string m_Mask = 4;
  if (has_m_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mask().data(), this->m_mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_mask(), target);
  }

  // optional int32 m_minTimes = 5;
  if (has_m_mintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_mintimes(), target);
  }

  // optional int32 m_maxTimes = 6;
  if (has_m_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_maxtimes(), target);
  }

  // repeated .proto_ff.E_BoxBoxBoxdataDesc m_boxdata = 7;
  for (int i = 0; i < this->m_boxdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_boxdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BoxBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_Rate = 3;
    if (has_m_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rate());
    }

    // optional string m_Mask = 4;
    if (has_m_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mask());
    }

    // optional int32 m_minTimes = 5;
    if (has_m_mintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mintimes());
    }

    // optional int32 m_maxTimes = 6;
    if (has_m_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxtimes());
    }

  }
  // repeated .proto_ff.E_BoxBoxBoxdataDesc m_boxdata = 7;
  total_size += 1 * this->m_boxdata_size();
  for (int i = 0; i < this->m_boxdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_boxdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BoxBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BoxBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BoxBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BoxBox::MergeFrom(const E_BoxBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_boxdata_.MergeFrom(from.m_boxdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_rate()) {
      set_m_rate(from.m_rate());
    }
    if (from.has_m_mask()) {
      set_m_mask(from.m_mask());
    }
    if (from.has_m_mintimes()) {
      set_m_mintimes(from.m_mintimes());
    }
    if (from.has_m_maxtimes()) {
      set_m_maxtimes(from.m_maxtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BoxBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BoxBox::CopyFrom(const E_BoxBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BoxBox::IsInitialized() const {

  return true;
}

void E_BoxBox::Swap(E_BoxBox* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_rate_, other->m_rate_);
    std::swap(m_mask_, other->m_mask_);
    std::swap(m_mintimes_, other->m_mintimes_);
    std::swap(m_maxtimes_, other->m_maxtimes_);
    m_boxdata_.Swap(&other->m_boxdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BoxBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BoxBox_descriptor_;
  metadata.reflection = E_BoxBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BoxBox::kEBoxBoxListFieldNumber;
#endif  // !_MSC_VER

Sheet_BoxBox::Sheet_BoxBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BoxBox::InitAsDefaultInstance() {
}

Sheet_BoxBox::Sheet_BoxBox(const Sheet_BoxBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BoxBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BoxBox::~Sheet_BoxBox() {
  SharedDtor();
}

void Sheet_BoxBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BoxBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BoxBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BoxBox_descriptor_;
}

const Sheet_BoxBox& Sheet_BoxBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

Sheet_BoxBox* Sheet_BoxBox::default_instance_ = NULL;

Sheet_BoxBox* Sheet_BoxBox::New() const {
  return new Sheet_BoxBox;
}

void Sheet_BoxBox::Clear() {
  e_boxbox_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BoxBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BoxBox E_BoxBox_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BoxBox_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_boxbox_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BoxBox_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BoxBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BoxBox E_BoxBox_List = 1;
  for (int i = 0; i < this->e_boxbox_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_boxbox_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BoxBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BoxBox E_BoxBox_List = 1;
  for (int i = 0; i < this->e_boxbox_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_boxbox_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BoxBox::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BoxBox E_BoxBox_List = 1;
  total_size += 1 * this->e_boxbox_list_size();
  for (int i = 0; i < this->e_boxbox_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_boxbox_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BoxBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BoxBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BoxBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BoxBox::MergeFrom(const Sheet_BoxBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_boxbox_list_.MergeFrom(from.e_boxbox_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BoxBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BoxBox::CopyFrom(const Sheet_BoxBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BoxBox::IsInitialized() const {

  return true;
}

void Sheet_BoxBox::Swap(Sheet_BoxBox* other) {
  if (other != this) {
    e_boxbox_list_.Swap(&other->e_boxbox_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BoxBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BoxBox_descriptor_;
  metadata.reflection = Sheet_BoxBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BoxBoxdataEquipDesc::kMMaxNumFieldNumber;
const int E_BoxBoxdataEquipDesc::kMMinNumFieldNumber;
const int E_BoxBoxdataEquipDesc::kMIsbindFieldNumber;
const int E_BoxBoxdataEquipDesc::kMIdFieldNumber;
const int E_BoxBoxdataEquipDesc::kMRandFieldNumber;
#endif  // !_MSC_VER

E_BoxBoxdataEquipDesc::E_BoxBoxdataEquipDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BoxBoxdataEquipDesc::InitAsDefaultInstance() {
}

E_BoxBoxdataEquipDesc::E_BoxBoxdataEquipDesc(const E_BoxBoxdataEquipDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BoxBoxdataEquipDesc::SharedCtor() {
  _cached_size_ = 0;
  m_maxnum_ = 0;
  m_minnum_ = 0;
  m_isbind_ = 0;
  m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rand_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BoxBoxdataEquipDesc::~E_BoxBoxdataEquipDesc() {
  SharedDtor();
}

void E_BoxBoxdataEquipDesc::SharedDtor() {
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    delete m_id_;
  }
  if (this != default_instance_) {
  }
}

void E_BoxBoxdataEquipDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BoxBoxdataEquipDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BoxBoxdataEquipDesc_descriptor_;
}

const E_BoxBoxdataEquipDesc& E_BoxBoxdataEquipDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

E_BoxBoxdataEquipDesc* E_BoxBoxdataEquipDesc::default_instance_ = NULL;

E_BoxBoxdataEquipDesc* E_BoxBoxdataEquipDesc::New() const {
  return new E_BoxBoxdataEquipDesc;
}

void E_BoxBoxdataEquipDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_maxnum_ = 0;
    m_minnum_ = 0;
    m_isbind_ = 0;
    if (has_m_id()) {
      if (m_id_ != &::google::protobuf::internal::kEmptyString) {
        m_id_->clear();
      }
    }
    m_rand_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BoxBoxdataEquipDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_maxNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxnum_)));
          set_has_m_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_minNum;
        break;
      }

      // optional int32 m_minNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minnum_)));
          set_has_m_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_isbind;
        break;
      }

      // optional int32 m_isbind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isbind_)));
          set_has_m_isbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_id;
        break;
      }

      // optional string m_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_id().data(), this->m_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rand;
        break;
      }

      // optional int32 m_rand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rand_)));
          set_has_m_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BoxBoxdataEquipDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_maxNum = 1;
  if (has_m_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_maxnum(), output);
  }

  // optional int32 m_minNum = 2;
  if (has_m_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_minnum(), output);
  }

  // optional int32 m_isbind = 3;
  if (has_m_isbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_isbind(), output);
  }

  // optional string m_id = 4;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_id().data(), this->m_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_id(), output);
  }

  // optional int32 m_rand = 5;
  if (has_m_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BoxBoxdataEquipDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_maxNum = 1;
  if (has_m_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_maxnum(), target);
  }

  // optional int32 m_minNum = 2;
  if (has_m_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_minnum(), target);
  }

  // optional int32 m_isbind = 3;
  if (has_m_isbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_isbind(), target);
  }

  // optional string m_id = 4;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_id().data(), this->m_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_id(), target);
  }

  // optional int32 m_rand = 5;
  if (has_m_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BoxBoxdataEquipDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_maxNum = 1;
    if (has_m_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxnum());
    }

    // optional int32 m_minNum = 2;
    if (has_m_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minnum());
    }

    // optional int32 m_isbind = 3;
    if (has_m_isbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isbind());
    }

    // optional string m_id = 4;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_id());
    }

    // optional int32 m_rand = 5;
    if (has_m_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BoxBoxdataEquipDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BoxBoxdataEquipDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BoxBoxdataEquipDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BoxBoxdataEquipDesc::MergeFrom(const E_BoxBoxdataEquipDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_maxnum()) {
      set_m_maxnum(from.m_maxnum());
    }
    if (from.has_m_minnum()) {
      set_m_minnum(from.m_minnum());
    }
    if (from.has_m_isbind()) {
      set_m_isbind(from.m_isbind());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rand()) {
      set_m_rand(from.m_rand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BoxBoxdataEquipDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BoxBoxdataEquipDesc::CopyFrom(const E_BoxBoxdataEquipDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BoxBoxdataEquipDesc::IsInitialized() const {

  return true;
}

void E_BoxBoxdataEquipDesc::Swap(E_BoxBoxdataEquipDesc* other) {
  if (other != this) {
    std::swap(m_maxnum_, other->m_maxnum_);
    std::swap(m_minnum_, other->m_minnum_);
    std::swap(m_isbind_, other->m_isbind_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_rand_, other->m_rand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BoxBoxdataEquipDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BoxBoxdataEquipDesc_descriptor_;
  metadata.reflection = E_BoxBoxdataEquipDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BoxBoxdataItemDesc::kMRandFieldNumber;
const int E_BoxBoxdataItemDesc::kMMaxNumFieldNumber;
const int E_BoxBoxdataItemDesc::kMMinNumFieldNumber;
const int E_BoxBoxdataItemDesc::kMIsbindFieldNumber;
const int E_BoxBoxdataItemDesc::kMIdFieldNumber;
const int E_BoxBoxdataItemDesc::kMRarerandFieldNumber;
#endif  // !_MSC_VER

E_BoxBoxdataItemDesc::E_BoxBoxdataItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BoxBoxdataItemDesc::InitAsDefaultInstance() {
}

E_BoxBoxdataItemDesc::E_BoxBoxdataItemDesc(const E_BoxBoxdataItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BoxBoxdataItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_rand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_maxnum_ = 0;
  m_minnum_ = 0;
  m_isbind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rarerand_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BoxBoxdataItemDesc::~E_BoxBoxdataItemDesc() {
  SharedDtor();
}

void E_BoxBoxdataItemDesc::SharedDtor() {
  if (m_rand_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rand_;
  }
  if (m_isbind_ != &::google::protobuf::internal::kEmptyString) {
    delete m_isbind_;
  }
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    delete m_id_;
  }
  if (this != default_instance_) {
  }
}

void E_BoxBoxdataItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BoxBoxdataItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BoxBoxdataItemDesc_descriptor_;
}

const E_BoxBoxdataItemDesc& E_BoxBoxdataItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

E_BoxBoxdataItemDesc* E_BoxBoxdataItemDesc::default_instance_ = NULL;

E_BoxBoxdataItemDesc* E_BoxBoxdataItemDesc::New() const {
  return new E_BoxBoxdataItemDesc;
}

void E_BoxBoxdataItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_rand()) {
      if (m_rand_ != &::google::protobuf::internal::kEmptyString) {
        m_rand_->clear();
      }
    }
    m_maxnum_ = 0;
    m_minnum_ = 0;
    if (has_m_isbind()) {
      if (m_isbind_ != &::google::protobuf::internal::kEmptyString) {
        m_isbind_->clear();
      }
    }
    if (has_m_id()) {
      if (m_id_ != &::google::protobuf::internal::kEmptyString) {
        m_id_->clear();
      }
    }
    m_rarerand_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BoxBoxdataItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rand().data(), this->m_rand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_maxNum;
        break;
      }

      // optional int32 m_maxNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxnum_)));
          set_has_m_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_minNum;
        break;
      }

      // optional int32 m_minNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minnum_)));
          set_has_m_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_isbind;
        break;
      }

      // optional string m_isbind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_isbind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_isbind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_isbind().data(), this->m_isbind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_id;
        break;
      }

      // optional string m_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_id().data(), this->m_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_rarerand;
        break;
      }

      // optional int32 m_rarerand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rarerand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rarerand_)));
          set_has_m_rarerand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BoxBoxdataItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_rand = 1;
  if (has_m_rand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rand().data(), this->m_rand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_rand(), output);
  }

  // optional int32 m_maxNum = 2;
  if (has_m_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_maxnum(), output);
  }

  // optional int32 m_minNum = 3;
  if (has_m_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_minnum(), output);
  }

  // optional string m_isbind = 4;
  if (has_m_isbind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_isbind().data(), this->m_isbind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_isbind(), output);
  }

  // optional string m_id = 5;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_id().data(), this->m_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_id(), output);
  }

  // optional int32 m_rarerand = 6;
  if (has_m_rarerand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_rarerand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BoxBoxdataItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_rand = 1;
  if (has_m_rand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rand().data(), this->m_rand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_rand(), target);
  }

  // optional int32 m_maxNum = 2;
  if (has_m_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_maxnum(), target);
  }

  // optional int32 m_minNum = 3;
  if (has_m_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_minnum(), target);
  }

  // optional string m_isbind = 4;
  if (has_m_isbind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_isbind().data(), this->m_isbind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_isbind(), target);
  }

  // optional string m_id = 5;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_id().data(), this->m_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_id(), target);
  }

  // optional int32 m_rarerand = 6;
  if (has_m_rarerand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_rarerand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BoxBoxdataItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_rand = 1;
    if (has_m_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rand());
    }

    // optional int32 m_maxNum = 2;
    if (has_m_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxnum());
    }

    // optional int32 m_minNum = 3;
    if (has_m_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minnum());
    }

    // optional string m_isbind = 4;
    if (has_m_isbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_isbind());
    }

    // optional string m_id = 5;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_id());
    }

    // optional int32 m_rarerand = 6;
    if (has_m_rarerand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rarerand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BoxBoxdataItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BoxBoxdataItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BoxBoxdataItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BoxBoxdataItemDesc::MergeFrom(const E_BoxBoxdataItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rand()) {
      set_m_rand(from.m_rand());
    }
    if (from.has_m_maxnum()) {
      set_m_maxnum(from.m_maxnum());
    }
    if (from.has_m_minnum()) {
      set_m_minnum(from.m_minnum());
    }
    if (from.has_m_isbind()) {
      set_m_isbind(from.m_isbind());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rarerand()) {
      set_m_rarerand(from.m_rarerand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BoxBoxdataItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BoxBoxdataItemDesc::CopyFrom(const E_BoxBoxdataItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BoxBoxdataItemDesc::IsInitialized() const {

  return true;
}

void E_BoxBoxdataItemDesc::Swap(E_BoxBoxdataItemDesc* other) {
  if (other != this) {
    std::swap(m_rand_, other->m_rand_);
    std::swap(m_maxnum_, other->m_maxnum_);
    std::swap(m_minnum_, other->m_minnum_);
    std::swap(m_isbind_, other->m_isbind_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_rarerand_, other->m_rarerand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BoxBoxdataItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BoxBoxdataItemDesc_descriptor_;
  metadata.reflection = E_BoxBoxdataItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BoxBoxdata::kMIdFieldNumber;
const int E_BoxBoxdata::kMDropTypeFieldNumber;
const int E_BoxBoxdata::kMGoldminNumFieldNumber;
const int E_BoxBoxdata::kMGoldmaxNumFieldNumber;
const int E_BoxBoxdata::kMGoldrandFieldNumber;
const int E_BoxBoxdata::kMBindjewelminNumFieldNumber;
const int E_BoxBoxdata::kMBindjewelmaxNumFieldNumber;
const int E_BoxBoxdata::kMBindjewelrandFieldNumber;
const int E_BoxBoxdata::kMJewelminNumFieldNumber;
const int E_BoxBoxdata::kMJewelmaxNumFieldNumber;
const int E_BoxBoxdata::kMJewelrandFieldNumber;
const int E_BoxBoxdata::kMEqProfessionFieldNumber;
const int E_BoxBoxdata::kMEquipFieldNumber;
const int E_BoxBoxdata::kMItemFieldNumber;
#endif  // !_MSC_VER

E_BoxBoxdata::E_BoxBoxdata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BoxBoxdata::InitAsDefaultInstance() {
}

E_BoxBoxdata::E_BoxBoxdata(const E_BoxBoxdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BoxBoxdata::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_drop_type_ = 0;
  m_goldminnum_ = 0;
  m_goldmaxnum_ = 0;
  m_goldrand_ = 0;
  m_bindjewelminnum_ = 0;
  m_bindjewelmaxnum_ = 0;
  m_bindjewelrand_ = 0;
  m_jewelminnum_ = 0;
  m_jewelmaxnum_ = 0;
  m_jewelrand_ = 0;
  m_eq_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BoxBoxdata::~E_BoxBoxdata() {
  SharedDtor();
}

void E_BoxBoxdata::SharedDtor() {
  if (m_eq_profession_ != &::google::protobuf::internal::kEmptyString) {
    delete m_eq_profession_;
  }
  if (this != default_instance_) {
  }
}

void E_BoxBoxdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BoxBoxdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BoxBoxdata_descriptor_;
}

const E_BoxBoxdata& E_BoxBoxdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

E_BoxBoxdata* E_BoxBoxdata::default_instance_ = NULL;

E_BoxBoxdata* E_BoxBoxdata::New() const {
  return new E_BoxBoxdata;
}

void E_BoxBoxdata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_drop_type_ = 0;
    m_goldminnum_ = 0;
    m_goldmaxnum_ = 0;
    m_goldrand_ = 0;
    m_bindjewelminnum_ = 0;
    m_bindjewelmaxnum_ = 0;
    m_bindjewelrand_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_jewelminnum_ = 0;
    m_jewelmaxnum_ = 0;
    m_jewelrand_ = 0;
    if (has_m_eq_profession()) {
      if (m_eq_profession_ != &::google::protobuf::internal::kEmptyString) {
        m_eq_profession_->clear();
      }
    }
  }
  m_equip_.Clear();
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BoxBoxdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_drop_type;
        break;
      }

      // optional int32 m_drop_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_drop_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_drop_type_)));
          set_has_m_drop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_goldminNum;
        break;
      }

      // optional int32 m_goldminNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldminnum_)));
          set_has_m_goldminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_goldmaxNum;
        break;
      }

      // optional int32 m_goldmaxNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldmaxnum_)));
          set_has_m_goldmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_goldrand;
        break;
      }

      // optional int32 m_goldrand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldrand_)));
          set_has_m_goldrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bindjewelminNum;
        break;
      }

      // optional int32 m_bindjewelminNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bindjewelminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bindjewelminnum_)));
          set_has_m_bindjewelminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_bindjewelmaxNum;
        break;
      }

      // optional int32 m_bindjewelmaxNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bindjewelmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bindjewelmaxnum_)));
          set_has_m_bindjewelmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_bindjewelrand;
        break;
      }

      // optional int32 m_bindjewelrand = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bindjewelrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bindjewelrand_)));
          set_has_m_bindjewelrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_jewelminNum;
        break;
      }

      // optional int32 m_jewelminNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jewelminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jewelminnum_)));
          set_has_m_jewelminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_jewelmaxNum;
        break;
      }

      // optional int32 m_jewelmaxNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jewelmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jewelmaxnum_)));
          set_has_m_jewelmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_jewelrand;
        break;
      }

      // optional int32 m_jewelrand = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jewelrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jewelrand_)));
          set_has_m_jewelrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_eq_profession;
        break;
      }

      // optional string m_eq_profession = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_eq_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_eq_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_eq_profession().data(), this->m_eq_profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_equip;
        break;
      }

      // repeated .proto_ff.E_BoxBoxdataEquipDesc m_equip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_equip;
        if (input->ExpectTag(114)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_BoxBoxdataItemDesc m_item = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BoxBoxdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_drop_type = 2;
  if (has_m_drop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_drop_type(), output);
  }

  // optional int32 m_goldminNum = 3;
  if (has_m_goldminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_goldminnum(), output);
  }

  // optional int32 m_goldmaxNum = 4;
  if (has_m_goldmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_goldmaxnum(), output);
  }

  // optional int32 m_goldrand = 5;
  if (has_m_goldrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_goldrand(), output);
  }

  // optional int32 m_bindjewelminNum = 6;
  if (has_m_bindjewelminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bindjewelminnum(), output);
  }

  // optional int32 m_bindjewelmaxNum = 7;
  if (has_m_bindjewelmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_bindjewelmaxnum(), output);
  }

  // optional int32 m_bindjewelrand = 8;
  if (has_m_bindjewelrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_bindjewelrand(), output);
  }

  // optional int32 m_jewelminNum = 9;
  if (has_m_jewelminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_jewelminnum(), output);
  }

  // optional int32 m_jewelmaxNum = 10;
  if (has_m_jewelmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_jewelmaxnum(), output);
  }

  // optional int32 m_jewelrand = 11;
  if (has_m_jewelrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_jewelrand(), output);
  }

  // optional string m_eq_profession = 12;
  if (has_m_eq_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_eq_profession().data(), this->m_eq_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_eq_profession(), output);
  }

  // repeated .proto_ff.E_BoxBoxdataEquipDesc m_equip = 13;
  for (int i = 0; i < this->m_equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_equip(i), output);
  }

  // repeated .proto_ff.E_BoxBoxdataItemDesc m_item = 14;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BoxBoxdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_drop_type = 2;
  if (has_m_drop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_drop_type(), target);
  }

  // optional int32 m_goldminNum = 3;
  if (has_m_goldminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_goldminnum(), target);
  }

  // optional int32 m_goldmaxNum = 4;
  if (has_m_goldmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_goldmaxnum(), target);
  }

  // optional int32 m_goldrand = 5;
  if (has_m_goldrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_goldrand(), target);
  }

  // optional int32 m_bindjewelminNum = 6;
  if (has_m_bindjewelminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_bindjewelminnum(), target);
  }

  // optional int32 m_bindjewelmaxNum = 7;
  if (has_m_bindjewelmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_bindjewelmaxnum(), target);
  }

  // optional int32 m_bindjewelrand = 8;
  if (has_m_bindjewelrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_bindjewelrand(), target);
  }

  // optional int32 m_jewelminNum = 9;
  if (has_m_jewelminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_jewelminnum(), target);
  }

  // optional int32 m_jewelmaxNum = 10;
  if (has_m_jewelmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_jewelmaxnum(), target);
  }

  // optional int32 m_jewelrand = 11;
  if (has_m_jewelrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_jewelrand(), target);
  }

  // optional string m_eq_profession = 12;
  if (has_m_eq_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_eq_profession().data(), this->m_eq_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_eq_profession(), target);
  }

  // repeated .proto_ff.E_BoxBoxdataEquipDesc m_equip = 13;
  for (int i = 0; i < this->m_equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_equip(i), target);
  }

  // repeated .proto_ff.E_BoxBoxdataItemDesc m_item = 14;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BoxBoxdata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_drop_type = 2;
    if (has_m_drop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_drop_type());
    }

    // optional int32 m_goldminNum = 3;
    if (has_m_goldminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldminnum());
    }

    // optional int32 m_goldmaxNum = 4;
    if (has_m_goldmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldmaxnum());
    }

    // optional int32 m_goldrand = 5;
    if (has_m_goldrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldrand());
    }

    // optional int32 m_bindjewelminNum = 6;
    if (has_m_bindjewelminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bindjewelminnum());
    }

    // optional int32 m_bindjewelmaxNum = 7;
    if (has_m_bindjewelmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bindjewelmaxnum());
    }

    // optional int32 m_bindjewelrand = 8;
    if (has_m_bindjewelrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bindjewelrand());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_jewelminNum = 9;
    if (has_m_jewelminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jewelminnum());
    }

    // optional int32 m_jewelmaxNum = 10;
    if (has_m_jewelmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jewelmaxnum());
    }

    // optional int32 m_jewelrand = 11;
    if (has_m_jewelrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jewelrand());
    }

    // optional string m_eq_profession = 12;
    if (has_m_eq_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_eq_profession());
    }

  }
  // repeated .proto_ff.E_BoxBoxdataEquipDesc m_equip = 13;
  total_size += 1 * this->m_equip_size();
  for (int i = 0; i < this->m_equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_equip(i));
  }

  // repeated .proto_ff.E_BoxBoxdataItemDesc m_item = 14;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BoxBoxdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BoxBoxdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BoxBoxdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BoxBoxdata::MergeFrom(const E_BoxBoxdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_equip_.MergeFrom(from.m_equip_);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_drop_type()) {
      set_m_drop_type(from.m_drop_type());
    }
    if (from.has_m_goldminnum()) {
      set_m_goldminnum(from.m_goldminnum());
    }
    if (from.has_m_goldmaxnum()) {
      set_m_goldmaxnum(from.m_goldmaxnum());
    }
    if (from.has_m_goldrand()) {
      set_m_goldrand(from.m_goldrand());
    }
    if (from.has_m_bindjewelminnum()) {
      set_m_bindjewelminnum(from.m_bindjewelminnum());
    }
    if (from.has_m_bindjewelmaxnum()) {
      set_m_bindjewelmaxnum(from.m_bindjewelmaxnum());
    }
    if (from.has_m_bindjewelrand()) {
      set_m_bindjewelrand(from.m_bindjewelrand());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_jewelminnum()) {
      set_m_jewelminnum(from.m_jewelminnum());
    }
    if (from.has_m_jewelmaxnum()) {
      set_m_jewelmaxnum(from.m_jewelmaxnum());
    }
    if (from.has_m_jewelrand()) {
      set_m_jewelrand(from.m_jewelrand());
    }
    if (from.has_m_eq_profession()) {
      set_m_eq_profession(from.m_eq_profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BoxBoxdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BoxBoxdata::CopyFrom(const E_BoxBoxdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BoxBoxdata::IsInitialized() const {

  return true;
}

void E_BoxBoxdata::Swap(E_BoxBoxdata* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_drop_type_, other->m_drop_type_);
    std::swap(m_goldminnum_, other->m_goldminnum_);
    std::swap(m_goldmaxnum_, other->m_goldmaxnum_);
    std::swap(m_goldrand_, other->m_goldrand_);
    std::swap(m_bindjewelminnum_, other->m_bindjewelminnum_);
    std::swap(m_bindjewelmaxnum_, other->m_bindjewelmaxnum_);
    std::swap(m_bindjewelrand_, other->m_bindjewelrand_);
    std::swap(m_jewelminnum_, other->m_jewelminnum_);
    std::swap(m_jewelmaxnum_, other->m_jewelmaxnum_);
    std::swap(m_jewelrand_, other->m_jewelrand_);
    std::swap(m_eq_profession_, other->m_eq_profession_);
    m_equip_.Swap(&other->m_equip_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BoxBoxdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BoxBoxdata_descriptor_;
  metadata.reflection = E_BoxBoxdata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BoxBoxdata::kEBoxBoxdataListFieldNumber;
#endif  // !_MSC_VER

Sheet_BoxBoxdata::Sheet_BoxBoxdata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BoxBoxdata::InitAsDefaultInstance() {
}

Sheet_BoxBoxdata::Sheet_BoxBoxdata(const Sheet_BoxBoxdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BoxBoxdata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BoxBoxdata::~Sheet_BoxBoxdata() {
  SharedDtor();
}

void Sheet_BoxBoxdata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BoxBoxdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BoxBoxdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BoxBoxdata_descriptor_;
}

const Sheet_BoxBoxdata& Sheet_BoxBoxdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBox_2eproto();
  return *default_instance_;
}

Sheet_BoxBoxdata* Sheet_BoxBoxdata::default_instance_ = NULL;

Sheet_BoxBoxdata* Sheet_BoxBoxdata::New() const {
  return new Sheet_BoxBoxdata;
}

void Sheet_BoxBoxdata::Clear() {
  e_boxboxdata_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BoxBoxdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BoxBoxdata E_BoxBoxdata_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BoxBoxdata_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_boxboxdata_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BoxBoxdata_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BoxBoxdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BoxBoxdata E_BoxBoxdata_List = 1;
  for (int i = 0; i < this->e_boxboxdata_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_boxboxdata_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BoxBoxdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BoxBoxdata E_BoxBoxdata_List = 1;
  for (int i = 0; i < this->e_boxboxdata_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_boxboxdata_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BoxBoxdata::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BoxBoxdata E_BoxBoxdata_List = 1;
  total_size += 1 * this->e_boxboxdata_list_size();
  for (int i = 0; i < this->e_boxboxdata_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_boxboxdata_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BoxBoxdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BoxBoxdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BoxBoxdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BoxBoxdata::MergeFrom(const Sheet_BoxBoxdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_boxboxdata_list_.MergeFrom(from.e_boxboxdata_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BoxBoxdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BoxBoxdata::CopyFrom(const Sheet_BoxBoxdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BoxBoxdata::IsInitialized() const {

  return true;
}

void Sheet_BoxBoxdata::Swap(Sheet_BoxBoxdata* other) {
  if (other != this) {
    e_boxboxdata_list_.Swap(&other->e_boxboxdata_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BoxBoxdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BoxBoxdata_descriptor_;
  metadata.reflection = Sheet_BoxBoxdata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
