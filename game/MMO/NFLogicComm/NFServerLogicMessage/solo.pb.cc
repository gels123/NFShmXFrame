// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: solo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "solo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* soloduanweirewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soloduanweirewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* soloduanweidayRewardItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soloduanweidayRewardItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* soloduanwei_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soloduanwei_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_soloduanwei_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_soloduanwei_reflection_ = NULL;
const ::google::protobuf::Descriptor* solorankrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  solorankrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* solorank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  solorank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_solorank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_solorank_reflection_ = NULL;
const ::google::protobuf::Descriptor* solopipei_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  solopipei_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_solopipei_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_solopipei_reflection_ = NULL;
const ::google::protobuf::Descriptor* soloconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soloconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_soloconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_soloconstant_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_solo_2eproto() {
  protobuf_AddDesc_solo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "solo.proto");
  GOOGLE_CHECK(file != NULL);
  soloduanweirewardDesc_descriptor_ = file->message_type(0);
  static const int soloduanweirewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweirewardDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweirewardDesc, duanwei_),
  };
  soloduanweirewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soloduanweirewardDesc_descriptor_,
      soloduanweirewardDesc::default_instance_,
      soloduanweirewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweirewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweirewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soloduanweirewardDesc));
  soloduanweidayRewardItemDesc_descriptor_ = file->message_type(1);
  static const int soloduanweidayRewardItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweidayRewardItemDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweidayRewardItemDesc, id_),
  };
  soloduanweidayRewardItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soloduanweidayRewardItemDesc_descriptor_,
      soloduanweidayRewardItemDesc::default_instance_,
      soloduanweidayRewardItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweidayRewardItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanweidayRewardItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soloduanweidayRewardItemDesc));
  soloduanwei_descriptor_ = file->message_type(2);
  static const int soloduanwei_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, duanweiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, pointmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, pointwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, pointlose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, arenawin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, arenalose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, pipeipoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, dayreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, diamondnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, dayrewarditem_),
  };
  soloduanwei_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soloduanwei_descriptor_,
      soloduanwei::default_instance_,
      soloduanwei_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloduanwei, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soloduanwei));
  Sheet_soloduanwei_descriptor_ = file->message_type(3);
  static const int Sheet_soloduanwei_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_soloduanwei, soloduanwei_list_),
  };
  Sheet_soloduanwei_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_soloduanwei_descriptor_,
      Sheet_soloduanwei::default_instance_,
      Sheet_soloduanwei_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_soloduanwei, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_soloduanwei, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_soloduanwei));
  solorankrewardDesc_descriptor_ = file->message_type(4);
  static const int solorankrewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorankrewardDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorankrewardDesc, rank_),
  };
  solorankrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      solorankrewardDesc_descriptor_,
      solorankrewardDesc::default_instance_,
      solorankrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorankrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorankrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(solorankrewardDesc));
  solorank_descriptor_ = file->message_type(5);
  static const int solorank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, minrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, diamondnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, reward_),
  };
  solorank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      solorank_descriptor_,
      solorank::default_instance_,
      solorank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solorank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(solorank));
  Sheet_solorank_descriptor_ = file->message_type(6);
  static const int Sheet_solorank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_solorank, solorank_list_),
  };
  Sheet_solorank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_solorank_descriptor_,
      Sheet_solorank::default_instance_,
      Sheet_solorank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_solorank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_solorank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_solorank));
  solopipei_descriptor_ = file->message_type(7);
  static const int solopipei_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solopipei, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solopipei, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solopipei, reward_),
  };
  solopipei_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      solopipei_descriptor_,
      solopipei::default_instance_,
      solopipei_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solopipei, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(solopipei, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(solopipei));
  Sheet_solopipei_descriptor_ = file->message_type(8);
  static const int Sheet_solopipei_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_solopipei, solopipei_list_),
  };
  Sheet_solopipei_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_solopipei_descriptor_,
      Sheet_solopipei::default_instance_,
      Sheet_solopipei_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_solopipei, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_solopipei, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_solopipei));
  soloconstant_descriptor_ = file->message_type(9);
  static const int soloconstant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloconstant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloconstant, constant_),
  };
  soloconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soloconstant_descriptor_,
      soloconstant::default_instance_,
      soloconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soloconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soloconstant));
  Sheet_soloconstant_descriptor_ = file->message_type(10);
  static const int Sheet_soloconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_soloconstant, soloconstant_list_),
  };
  Sheet_soloconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_soloconstant_descriptor_,
      Sheet_soloconstant::default_instance_,
      Sheet_soloconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_soloconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_soloconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_soloconstant));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_solo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soloduanweirewardDesc_descriptor_, &soloduanweirewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soloduanweidayRewardItemDesc_descriptor_, &soloduanweidayRewardItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soloduanwei_descriptor_, &soloduanwei::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_soloduanwei_descriptor_, &Sheet_soloduanwei::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    solorankrewardDesc_descriptor_, &solorankrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    solorank_descriptor_, &solorank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_solorank_descriptor_, &Sheet_solorank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    solopipei_descriptor_, &solopipei::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_solopipei_descriptor_, &Sheet_solopipei::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soloconstant_descriptor_, &soloconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_soloconstant_descriptor_, &Sheet_soloconstant::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_solo_2eproto() {
  delete soloduanweirewardDesc::default_instance_;
  delete soloduanweirewardDesc_reflection_;
  delete soloduanweidayRewardItemDesc::default_instance_;
  delete soloduanweidayRewardItemDesc_reflection_;
  delete soloduanwei::default_instance_;
  delete soloduanwei_reflection_;
  delete Sheet_soloduanwei::default_instance_;
  delete Sheet_soloduanwei_reflection_;
  delete solorankrewardDesc::default_instance_;
  delete solorankrewardDesc_reflection_;
  delete solorank::default_instance_;
  delete solorank_reflection_;
  delete Sheet_solorank::default_instance_;
  delete Sheet_solorank_reflection_;
  delete solopipei::default_instance_;
  delete solopipei_reflection_;
  delete Sheet_solopipei::default_instance_;
  delete Sheet_solopipei_reflection_;
  delete soloconstant::default_instance_;
  delete soloconstant_reflection_;
  delete Sheet_soloconstant::default_instance_;
  delete Sheet_soloconstant_reflection_;
}

void protobuf_AddDesc_solo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nsolo.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"M\n\025soloduanweirewardDesc\022\027\n\003num\030\001 "
    "\001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\033\n\007duanwei\030\002 \001(\003B\n\302\377\024\006\346\256"
    "\265\344\275\215\"W\n\034soloduanweidayRewardItemDesc\022\035\n\003"
    "num\030\001 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\346\225\260\351\207\217\022\030\n\002id\030\002 \001(\003B"
    "\014\302\377\024\010\345\245\226\345\212\261ID\"\222\004\n\013soloduanwei\022\037\n\tduanwei"
    "ID\030\001 \001(\005B\014\302\377\024\010\346\256\265\344\275\215ID\022\"\n\010pointMin\030\002 \001(\005"
    "B\020\302\377\024\014\345\215\207\346\256\265\347\247\257\345\210\206\022\"\n\010pointWin\030\003 \001(\005B\020\302\377"
    "\024\014\350\203\234\345\210\251\347\247\257\345\210\206\022#\n\tpointLose\030\004 \001(\005B\020\302\377\024\014\345"
    "\244\261\350\264\245\347\247\257\345\210\206\022\"\n\010arenaWin\030\005 \001(\005B\020\302\377\024\014\350\203\234\345\210"
    "\251\345\212\237\345\213\213\022#\n\tarenaLose\030\006 \001(\005B\020\302\377\024\014\345\244\261\350\264\245\345\212"
    "\237\345\213\213\0229\n\npipeiPoint\030\007 \001(\005B%\302\377\024!\346\257\217\344\272\224\347\247\222\345"
    "\214\271\351\205\215\346\255\243\350\264\237\346\211\251\345\244\247\347\247\257\345\210\206\022)\n\tdayReward\030\010 \001"
    "(\005B\026\302\377\024\022\346\257\217\346\227\245\345\245\226\345\212\261\345\212\237\345\213\213\0220\n\ndiamondNum"
    "\030\t \001(\005B\034\302\377\024\030\346\256\265\344\275\215\345\245\226\345\212\261\347\273\221\351\222\273\346\225\260\351\207\217\022\?\n\006"
    "reward\030\n \003(\0132\037.proto_ff.soloduanweirewar"
    "dDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\022S\n\rdayRewardItem\030\013"
    " \003(\0132&.proto_ff.soloduanweidayRewardItem"
    "DescB\024\302\377\024\014\346\257\217\346\227\245\351\201\223\345\205\267\210\301\024\002\"J\n\021Sheet_solo"
    "duanwei\0225\n\020soloduanwei_List\030\001 \003(\0132\025.prot"
    "o_ff.soloduanweiB\004\210\301\024}\"G\n\022solorankreward"
    "Desc\022\027\n\003num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\030\n\004rank\030\002 "
    "\001(\003B\n\302\377\024\006\346\216\222\345\220\215\"\336\001\n\010solorank\022\034\n\006rankID\030\001"
    " \001(\005B\014\302\377\024\010\346\216\222\345\220\215ID\022!\n\007maxRank\030\002 \001(\005B\020\302\377\024"
    "\014\346\234\200\351\253\230\346\216\222\345\220\215\022!\n\007minRank\030\003 \001(\005B\020\302\377\024\014\346\234\200\344"
    "\275\216\346\216\222\345\220\215\0220\n\ndiamondNum\030\004 \001(\005B\034\302\377\024\030\346\216\222\345\220\215"
    "\345\245\226\345\212\261\347\273\221\351\222\273\346\225\260\351\207\217\022<\n\006reward\030\005 \003(\0132\034.pro"
    "to_ff.solorankrewardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\004"
    "\"A\n\016Sheet_solorank\022/\n\rsolorank_List\030\001 \003("
    "\0132\022.proto_ff.solorankB\004\210\301\024p\"Z\n\tsolopipei"
    "\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002ID\022\035\n\003num\030\002 \001(\005B\020\302\377\024\014\345"
    "\214\271\351\205\215\346\254\241\346\225\260\022\032\n\006reward\030\003 \001(\003B\n\302\377\024\006\345\245\226\345\212\261\""
    "D\n\017Sheet_solopipei\0221\n\016solopipei_List\030\001 \003"
    "(\0132\023.proto_ff.solopipeiB\004\210\301\024k\"D\n\014solocon"
    "stant\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002ID\022 \n\010constant\030\002 "
    "\001(\tB\016\302\377\024\006\345\217\202\346\225\260\220\301\0241\"N\n\022Sheet_soloconstan"
    "t\0228\n\021soloconstant_List\030\001 \003(\0132\026.proto_ff."
    "soloconstantB\005\210\301\024\213\001", 1499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "solo.proto", &protobuf_RegisterTypes);
  soloduanweirewardDesc::default_instance_ = new soloduanweirewardDesc();
  soloduanweidayRewardItemDesc::default_instance_ = new soloduanweidayRewardItemDesc();
  soloduanwei::default_instance_ = new soloduanwei();
  Sheet_soloduanwei::default_instance_ = new Sheet_soloduanwei();
  solorankrewardDesc::default_instance_ = new solorankrewardDesc();
  solorank::default_instance_ = new solorank();
  Sheet_solorank::default_instance_ = new Sheet_solorank();
  solopipei::default_instance_ = new solopipei();
  Sheet_solopipei::default_instance_ = new Sheet_solopipei();
  soloconstant::default_instance_ = new soloconstant();
  Sheet_soloconstant::default_instance_ = new Sheet_soloconstant();
  soloduanweirewardDesc::default_instance_->InitAsDefaultInstance();
  soloduanweidayRewardItemDesc::default_instance_->InitAsDefaultInstance();
  soloduanwei::default_instance_->InitAsDefaultInstance();
  Sheet_soloduanwei::default_instance_->InitAsDefaultInstance();
  solorankrewardDesc::default_instance_->InitAsDefaultInstance();
  solorank::default_instance_->InitAsDefaultInstance();
  Sheet_solorank::default_instance_->InitAsDefaultInstance();
  solopipei::default_instance_->InitAsDefaultInstance();
  Sheet_solopipei::default_instance_->InitAsDefaultInstance();
  soloconstant::default_instance_->InitAsDefaultInstance();
  Sheet_soloconstant::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_solo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_solo_2eproto {
  StaticDescriptorInitializer_solo_2eproto() {
    protobuf_AddDesc_solo_2eproto();
  }
} static_descriptor_initializer_solo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int soloduanweirewardDesc::kNumFieldNumber;
const int soloduanweirewardDesc::kDuanweiFieldNumber;
#endif  // !_MSC_VER

soloduanweirewardDesc::soloduanweirewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soloduanweirewardDesc::InitAsDefaultInstance() {
}

soloduanweirewardDesc::soloduanweirewardDesc(const soloduanweirewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soloduanweirewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  duanwei_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soloduanweirewardDesc::~soloduanweirewardDesc() {
  SharedDtor();
}

void soloduanweirewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soloduanweirewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soloduanweirewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soloduanweirewardDesc_descriptor_;
}

const soloduanweirewardDesc& soloduanweirewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

soloduanweirewardDesc* soloduanweirewardDesc::default_instance_ = NULL;

soloduanweirewardDesc* soloduanweirewardDesc::New() const {
  return new soloduanweirewardDesc;
}

void soloduanweirewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    duanwei_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soloduanweirewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duanwei;
        break;
      }

      // optional int64 duanwei = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duanwei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duanwei_)));
          set_has_duanwei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soloduanweirewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 duanwei = 2;
  if (has_duanwei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->duanwei(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soloduanweirewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 duanwei = 2;
  if (has_duanwei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->duanwei(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soloduanweirewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 duanwei = 2;
    if (has_duanwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duanwei());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soloduanweirewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soloduanweirewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soloduanweirewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soloduanweirewardDesc::MergeFrom(const soloduanweirewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_duanwei()) {
      set_duanwei(from.duanwei());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soloduanweirewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soloduanweirewardDesc::CopyFrom(const soloduanweirewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soloduanweirewardDesc::IsInitialized() const {

  return true;
}

void soloduanweirewardDesc::Swap(soloduanweirewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(duanwei_, other->duanwei_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soloduanweirewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soloduanweirewardDesc_descriptor_;
  metadata.reflection = soloduanweirewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soloduanweidayRewardItemDesc::kNumFieldNumber;
const int soloduanweidayRewardItemDesc::kIdFieldNumber;
#endif  // !_MSC_VER

soloduanweidayRewardItemDesc::soloduanweidayRewardItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soloduanweidayRewardItemDesc::InitAsDefaultInstance() {
}

soloduanweidayRewardItemDesc::soloduanweidayRewardItemDesc(const soloduanweidayRewardItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soloduanweidayRewardItemDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soloduanweidayRewardItemDesc::~soloduanweidayRewardItemDesc() {
  SharedDtor();
}

void soloduanweidayRewardItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soloduanweidayRewardItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soloduanweidayRewardItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soloduanweidayRewardItemDesc_descriptor_;
}

const soloduanweidayRewardItemDesc& soloduanweidayRewardItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

soloduanweidayRewardItemDesc* soloduanweidayRewardItemDesc::default_instance_ = NULL;

soloduanweidayRewardItemDesc* soloduanweidayRewardItemDesc::New() const {
  return new soloduanweidayRewardItemDesc;
}

void soloduanweidayRewardItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soloduanweidayRewardItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soloduanweidayRewardItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soloduanweidayRewardItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soloduanweidayRewardItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soloduanweidayRewardItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soloduanweidayRewardItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soloduanweidayRewardItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soloduanweidayRewardItemDesc::MergeFrom(const soloduanweidayRewardItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soloduanweidayRewardItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soloduanweidayRewardItemDesc::CopyFrom(const soloduanweidayRewardItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soloduanweidayRewardItemDesc::IsInitialized() const {

  return true;
}

void soloduanweidayRewardItemDesc::Swap(soloduanweidayRewardItemDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soloduanweidayRewardItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soloduanweidayRewardItemDesc_descriptor_;
  metadata.reflection = soloduanweidayRewardItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soloduanwei::kDuanweiIDFieldNumber;
const int soloduanwei::kPointMinFieldNumber;
const int soloduanwei::kPointWinFieldNumber;
const int soloduanwei::kPointLoseFieldNumber;
const int soloduanwei::kArenaWinFieldNumber;
const int soloduanwei::kArenaLoseFieldNumber;
const int soloduanwei::kPipeiPointFieldNumber;
const int soloduanwei::kDayRewardFieldNumber;
const int soloduanwei::kDiamondNumFieldNumber;
const int soloduanwei::kRewardFieldNumber;
const int soloduanwei::kDayRewardItemFieldNumber;
#endif  // !_MSC_VER

soloduanwei::soloduanwei()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soloduanwei::InitAsDefaultInstance() {
}

soloduanwei::soloduanwei(const soloduanwei& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soloduanwei::SharedCtor() {
  _cached_size_ = 0;
  duanweiid_ = 0;
  pointmin_ = 0;
  pointwin_ = 0;
  pointlose_ = 0;
  arenawin_ = 0;
  arenalose_ = 0;
  pipeipoint_ = 0;
  dayreward_ = 0;
  diamondnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soloduanwei::~soloduanwei() {
  SharedDtor();
}

void soloduanwei::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soloduanwei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soloduanwei::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soloduanwei_descriptor_;
}

const soloduanwei& soloduanwei::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

soloduanwei* soloduanwei::default_instance_ = NULL;

soloduanwei* soloduanwei::New() const {
  return new soloduanwei;
}

void soloduanwei::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duanweiid_ = 0;
    pointmin_ = 0;
    pointwin_ = 0;
    pointlose_ = 0;
    arenawin_ = 0;
    arenalose_ = 0;
    pipeipoint_ = 0;
    dayreward_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diamondnum_ = 0;
  }
  reward_.Clear();
  dayrewarditem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soloduanwei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duanweiID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duanweiid_)));
          set_has_duanweiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointMin;
        break;
      }

      // optional int32 pointMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointmin_)));
          set_has_pointmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pointWin;
        break;
      }

      // optional int32 pointWin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointwin_)));
          set_has_pointwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pointLose;
        break;
      }

      // optional int32 pointLose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointlose_)));
          set_has_pointlose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arenaWin;
        break;
      }

      // optional int32 arenaWin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenawin_)));
          set_has_arenawin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arenaLose;
        break;
      }

      // optional int32 arenaLose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenalose_)));
          set_has_arenalose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pipeiPoint;
        break;
      }

      // optional int32 pipeiPoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pipeiPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pipeipoint_)));
          set_has_pipeipoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dayReward;
        break;
      }

      // optional int32 dayReward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayreward_)));
          set_has_dayreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diamondNum;
        break;
      }

      // optional int32 diamondNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondnum_)));
          set_has_diamondnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.soloduanweirewardDesc reward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_reward;
        if (input->ExpectTag(90)) goto parse_dayRewardItem;
        break;
      }

      // repeated .proto_ff.soloduanweidayRewardItemDesc dayRewardItem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayRewardItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayrewarditem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dayRewardItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soloduanwei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 duanweiID = 1;
  if (has_duanweiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duanweiid(), output);
  }

  // optional int32 pointMin = 2;
  if (has_pointmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointmin(), output);
  }

  // optional int32 pointWin = 3;
  if (has_pointwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pointwin(), output);
  }

  // optional int32 pointLose = 4;
  if (has_pointlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pointlose(), output);
  }

  // optional int32 arenaWin = 5;
  if (has_arenawin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arenawin(), output);
  }

  // optional int32 arenaLose = 6;
  if (has_arenalose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->arenalose(), output);
  }

  // optional int32 pipeiPoint = 7;
  if (has_pipeipoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pipeipoint(), output);
  }

  // optional int32 dayReward = 8;
  if (has_dayreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dayreward(), output);
  }

  // optional int32 diamondNum = 9;
  if (has_diamondnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->diamondnum(), output);
  }

  // repeated .proto_ff.soloduanweirewardDesc reward = 10;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->reward(i), output);
  }

  // repeated .proto_ff.soloduanweidayRewardItemDesc dayRewardItem = 11;
  for (int i = 0; i < this->dayrewarditem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dayrewarditem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soloduanwei::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 duanweiID = 1;
  if (has_duanweiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duanweiid(), target);
  }

  // optional int32 pointMin = 2;
  if (has_pointmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pointmin(), target);
  }

  // optional int32 pointWin = 3;
  if (has_pointwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pointwin(), target);
  }

  // optional int32 pointLose = 4;
  if (has_pointlose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pointlose(), target);
  }

  // optional int32 arenaWin = 5;
  if (has_arenawin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arenawin(), target);
  }

  // optional int32 arenaLose = 6;
  if (has_arenalose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->arenalose(), target);
  }

  // optional int32 pipeiPoint = 7;
  if (has_pipeipoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pipeipoint(), target);
  }

  // optional int32 dayReward = 8;
  if (has_dayreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dayreward(), target);
  }

  // optional int32 diamondNum = 9;
  if (has_diamondnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->diamondnum(), target);
  }

  // repeated .proto_ff.soloduanweirewardDesc reward = 10;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->reward(i), target);
  }

  // repeated .proto_ff.soloduanweidayRewardItemDesc dayRewardItem = 11;
  for (int i = 0; i < this->dayrewarditem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dayrewarditem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soloduanwei::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duanweiID = 1;
    if (has_duanweiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duanweiid());
    }

    // optional int32 pointMin = 2;
    if (has_pointmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointmin());
    }

    // optional int32 pointWin = 3;
    if (has_pointwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointwin());
    }

    // optional int32 pointLose = 4;
    if (has_pointlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointlose());
    }

    // optional int32 arenaWin = 5;
    if (has_arenawin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenawin());
    }

    // optional int32 arenaLose = 6;
    if (has_arenalose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenalose());
    }

    // optional int32 pipeiPoint = 7;
    if (has_pipeipoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pipeipoint());
    }

    // optional int32 dayReward = 8;
    if (has_dayreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayreward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 diamondNum = 9;
    if (has_diamondnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondnum());
    }

  }
  // repeated .proto_ff.soloduanweirewardDesc reward = 10;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .proto_ff.soloduanweidayRewardItemDesc dayRewardItem = 11;
  total_size += 1 * this->dayrewarditem_size();
  for (int i = 0; i < this->dayrewarditem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayrewarditem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soloduanwei::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soloduanwei* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soloduanwei*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soloduanwei::MergeFrom(const soloduanwei& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  dayrewarditem_.MergeFrom(from.dayrewarditem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duanweiid()) {
      set_duanweiid(from.duanweiid());
    }
    if (from.has_pointmin()) {
      set_pointmin(from.pointmin());
    }
    if (from.has_pointwin()) {
      set_pointwin(from.pointwin());
    }
    if (from.has_pointlose()) {
      set_pointlose(from.pointlose());
    }
    if (from.has_arenawin()) {
      set_arenawin(from.arenawin());
    }
    if (from.has_arenalose()) {
      set_arenalose(from.arenalose());
    }
    if (from.has_pipeipoint()) {
      set_pipeipoint(from.pipeipoint());
    }
    if (from.has_dayreward()) {
      set_dayreward(from.dayreward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diamondnum()) {
      set_diamondnum(from.diamondnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soloduanwei::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soloduanwei::CopyFrom(const soloduanwei& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soloduanwei::IsInitialized() const {

  return true;
}

void soloduanwei::Swap(soloduanwei* other) {
  if (other != this) {
    std::swap(duanweiid_, other->duanweiid_);
    std::swap(pointmin_, other->pointmin_);
    std::swap(pointwin_, other->pointwin_);
    std::swap(pointlose_, other->pointlose_);
    std::swap(arenawin_, other->arenawin_);
    std::swap(arenalose_, other->arenalose_);
    std::swap(pipeipoint_, other->pipeipoint_);
    std::swap(dayreward_, other->dayreward_);
    std::swap(diamondnum_, other->diamondnum_);
    reward_.Swap(&other->reward_);
    dayrewarditem_.Swap(&other->dayrewarditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soloduanwei::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soloduanwei_descriptor_;
  metadata.reflection = soloduanwei_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_soloduanwei::kSoloduanweiListFieldNumber;
#endif  // !_MSC_VER

Sheet_soloduanwei::Sheet_soloduanwei()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_soloduanwei::InitAsDefaultInstance() {
}

Sheet_soloduanwei::Sheet_soloduanwei(const Sheet_soloduanwei& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_soloduanwei::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_soloduanwei::~Sheet_soloduanwei() {
  SharedDtor();
}

void Sheet_soloduanwei::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_soloduanwei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_soloduanwei::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_soloduanwei_descriptor_;
}

const Sheet_soloduanwei& Sheet_soloduanwei::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

Sheet_soloduanwei* Sheet_soloduanwei::default_instance_ = NULL;

Sheet_soloduanwei* Sheet_soloduanwei::New() const {
  return new Sheet_soloduanwei;
}

void Sheet_soloduanwei::Clear() {
  soloduanwei_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_soloduanwei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.soloduanwei soloduanwei_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soloduanwei_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soloduanwei_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_soloduanwei_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_soloduanwei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.soloduanwei soloduanwei_List = 1;
  for (int i = 0; i < this->soloduanwei_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soloduanwei_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_soloduanwei::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.soloduanwei soloduanwei_List = 1;
  for (int i = 0; i < this->soloduanwei_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soloduanwei_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_soloduanwei::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.soloduanwei soloduanwei_List = 1;
  total_size += 1 * this->soloduanwei_list_size();
  for (int i = 0; i < this->soloduanwei_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soloduanwei_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_soloduanwei::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_soloduanwei* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_soloduanwei*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_soloduanwei::MergeFrom(const Sheet_soloduanwei& from) {
  GOOGLE_CHECK_NE(&from, this);
  soloduanwei_list_.MergeFrom(from.soloduanwei_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_soloduanwei::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_soloduanwei::CopyFrom(const Sheet_soloduanwei& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_soloduanwei::IsInitialized() const {

  return true;
}

void Sheet_soloduanwei::Swap(Sheet_soloduanwei* other) {
  if (other != this) {
    soloduanwei_list_.Swap(&other->soloduanwei_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_soloduanwei::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_soloduanwei_descriptor_;
  metadata.reflection = Sheet_soloduanwei_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int solorankrewardDesc::kNumFieldNumber;
const int solorankrewardDesc::kRankFieldNumber;
#endif  // !_MSC_VER

solorankrewardDesc::solorankrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void solorankrewardDesc::InitAsDefaultInstance() {
}

solorankrewardDesc::solorankrewardDesc(const solorankrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void solorankrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  rank_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

solorankrewardDesc::~solorankrewardDesc() {
  SharedDtor();
}

void solorankrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void solorankrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* solorankrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return solorankrewardDesc_descriptor_;
}

const solorankrewardDesc& solorankrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

solorankrewardDesc* solorankrewardDesc::default_instance_ = NULL;

solorankrewardDesc* solorankrewardDesc::New() const {
  return new solorankrewardDesc;
}

void solorankrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    rank_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool solorankrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int64 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void solorankrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* solorankrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int solorankrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void solorankrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const solorankrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const solorankrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void solorankrewardDesc::MergeFrom(const solorankrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void solorankrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void solorankrewardDesc::CopyFrom(const solorankrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool solorankrewardDesc::IsInitialized() const {

  return true;
}

void solorankrewardDesc::Swap(solorankrewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata solorankrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = solorankrewardDesc_descriptor_;
  metadata.reflection = solorankrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int solorank::kRankIDFieldNumber;
const int solorank::kMaxRankFieldNumber;
const int solorank::kMinRankFieldNumber;
const int solorank::kDiamondNumFieldNumber;
const int solorank::kRewardFieldNumber;
#endif  // !_MSC_VER

solorank::solorank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void solorank::InitAsDefaultInstance() {
}

solorank::solorank(const solorank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void solorank::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0;
  maxrank_ = 0;
  minrank_ = 0;
  diamondnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

solorank::~solorank() {
  SharedDtor();
}

void solorank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void solorank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* solorank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return solorank_descriptor_;
}

const solorank& solorank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

solorank* solorank::default_instance_ = NULL;

solorank* solorank::New() const {
  return new solorank;
}

void solorank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0;
    maxrank_ = 0;
    minrank_ = 0;
    diamondnum_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool solorank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxRank;
        break;
      }

      // optional int32 maxRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrank_)));
          set_has_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minRank;
        break;
      }

      // optional int32 minRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minrank_)));
          set_has_minrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamondNum;
        break;
      }

      // optional int32 diamondNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondnum_)));
          set_has_diamondnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.solorankrewardDesc reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void solorank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rankID = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }

  // optional int32 maxRank = 2;
  if (has_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxrank(), output);
  }

  // optional int32 minRank = 3;
  if (has_minrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minrank(), output);
  }

  // optional int32 diamondNum = 4;
  if (has_diamondnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamondnum(), output);
  }

  // repeated .proto_ff.solorankrewardDesc reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* solorank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rankID = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }

  // optional int32 maxRank = 2;
  if (has_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxrank(), target);
  }

  // optional int32 minRank = 3;
  if (has_minrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minrank(), target);
  }

  // optional int32 diamondNum = 4;
  if (has_diamondnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamondnum(), target);
  }

  // repeated .proto_ff.solorankrewardDesc reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int solorank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankID = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int32 maxRank = 2;
    if (has_maxrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrank());
    }

    // optional int32 minRank = 3;
    if (has_minrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minrank());
    }

    // optional int32 diamondNum = 4;
    if (has_diamondnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondnum());
    }

  }
  // repeated .proto_ff.solorankrewardDesc reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void solorank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const solorank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const solorank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void solorank::MergeFrom(const solorank& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_maxrank()) {
      set_maxrank(from.maxrank());
    }
    if (from.has_minrank()) {
      set_minrank(from.minrank());
    }
    if (from.has_diamondnum()) {
      set_diamondnum(from.diamondnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void solorank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void solorank::CopyFrom(const solorank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool solorank::IsInitialized() const {

  return true;
}

void solorank::Swap(solorank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(maxrank_, other->maxrank_);
    std::swap(minrank_, other->minrank_);
    std::swap(diamondnum_, other->diamondnum_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata solorank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = solorank_descriptor_;
  metadata.reflection = solorank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_solorank::kSolorankListFieldNumber;
#endif  // !_MSC_VER

Sheet_solorank::Sheet_solorank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_solorank::InitAsDefaultInstance() {
}

Sheet_solorank::Sheet_solorank(const Sheet_solorank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_solorank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_solorank::~Sheet_solorank() {
  SharedDtor();
}

void Sheet_solorank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_solorank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_solorank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_solorank_descriptor_;
}

const Sheet_solorank& Sheet_solorank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

Sheet_solorank* Sheet_solorank::default_instance_ = NULL;

Sheet_solorank* Sheet_solorank::New() const {
  return new Sheet_solorank;
}

void Sheet_solorank::Clear() {
  solorank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_solorank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.solorank solorank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solorank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solorank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_solorank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_solorank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.solorank solorank_List = 1;
  for (int i = 0; i < this->solorank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->solorank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_solorank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.solorank solorank_List = 1;
  for (int i = 0; i < this->solorank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->solorank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_solorank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.solorank solorank_List = 1;
  total_size += 1 * this->solorank_list_size();
  for (int i = 0; i < this->solorank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solorank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_solorank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_solorank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_solorank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_solorank::MergeFrom(const Sheet_solorank& from) {
  GOOGLE_CHECK_NE(&from, this);
  solorank_list_.MergeFrom(from.solorank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_solorank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_solorank::CopyFrom(const Sheet_solorank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_solorank::IsInitialized() const {

  return true;
}

void Sheet_solorank::Swap(Sheet_solorank* other) {
  if (other != this) {
    solorank_list_.Swap(&other->solorank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_solorank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_solorank_descriptor_;
  metadata.reflection = Sheet_solorank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int solopipei::kIDFieldNumber;
const int solopipei::kNumFieldNumber;
const int solopipei::kRewardFieldNumber;
#endif  // !_MSC_VER

solopipei::solopipei()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void solopipei::InitAsDefaultInstance() {
}

solopipei::solopipei(const solopipei& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void solopipei::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  reward_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

solopipei::~solopipei() {
  SharedDtor();
}

void solopipei::SharedDtor() {
  if (this != default_instance_) {
  }
}

void solopipei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* solopipei::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return solopipei_descriptor_;
}

const solopipei& solopipei::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

solopipei* solopipei::default_instance_ = NULL;

solopipei* solopipei::New() const {
  return new solopipei;
}

void solopipei::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    reward_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool solopipei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int64 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void solopipei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int64 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* solopipei::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int64 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int solopipei::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void solopipei::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const solopipei* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const solopipei*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void solopipei::MergeFrom(const solopipei& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void solopipei::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void solopipei::CopyFrom(const solopipei& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool solopipei::IsInitialized() const {

  return true;
}

void solopipei::Swap(solopipei* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata solopipei::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = solopipei_descriptor_;
  metadata.reflection = solopipei_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_solopipei::kSolopipeiListFieldNumber;
#endif  // !_MSC_VER

Sheet_solopipei::Sheet_solopipei()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_solopipei::InitAsDefaultInstance() {
}

Sheet_solopipei::Sheet_solopipei(const Sheet_solopipei& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_solopipei::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_solopipei::~Sheet_solopipei() {
  SharedDtor();
}

void Sheet_solopipei::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_solopipei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_solopipei::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_solopipei_descriptor_;
}

const Sheet_solopipei& Sheet_solopipei::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

Sheet_solopipei* Sheet_solopipei::default_instance_ = NULL;

Sheet_solopipei* Sheet_solopipei::New() const {
  return new Sheet_solopipei;
}

void Sheet_solopipei::Clear() {
  solopipei_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_solopipei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.solopipei solopipei_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solopipei_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solopipei_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_solopipei_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_solopipei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.solopipei solopipei_List = 1;
  for (int i = 0; i < this->solopipei_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->solopipei_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_solopipei::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.solopipei solopipei_List = 1;
  for (int i = 0; i < this->solopipei_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->solopipei_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_solopipei::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.solopipei solopipei_List = 1;
  total_size += 1 * this->solopipei_list_size();
  for (int i = 0; i < this->solopipei_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solopipei_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_solopipei::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_solopipei* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_solopipei*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_solopipei::MergeFrom(const Sheet_solopipei& from) {
  GOOGLE_CHECK_NE(&from, this);
  solopipei_list_.MergeFrom(from.solopipei_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_solopipei::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_solopipei::CopyFrom(const Sheet_solopipei& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_solopipei::IsInitialized() const {

  return true;
}

void Sheet_solopipei::Swap(Sheet_solopipei* other) {
  if (other != this) {
    solopipei_list_.Swap(&other->solopipei_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_solopipei::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_solopipei_descriptor_;
  metadata.reflection = Sheet_solopipei_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soloconstant::kIDFieldNumber;
const int soloconstant::kConstantFieldNumber;
#endif  // !_MSC_VER

soloconstant::soloconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soloconstant::InitAsDefaultInstance() {
}

soloconstant::soloconstant(const soloconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soloconstant::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  constant_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soloconstant::~soloconstant() {
  SharedDtor();
}

void soloconstant::SharedDtor() {
  if (constant_ != &::google::protobuf::internal::kEmptyString) {
    delete constant_;
  }
  if (this != default_instance_) {
  }
}

void soloconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soloconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soloconstant_descriptor_;
}

const soloconstant& soloconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

soloconstant* soloconstant::default_instance_ = NULL;

soloconstant* soloconstant::New() const {
  return new soloconstant;
}

void soloconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_constant()) {
      if (constant_ != &::google::protobuf::internal::kEmptyString) {
        constant_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soloconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_constant;
        break;
      }

      // optional string constant = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_constant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->constant().data(), this->constant().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soloconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string constant = 2;
  if (has_constant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->constant().data(), this->constant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->constant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soloconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string constant = 2;
  if (has_constant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->constant().data(), this->constant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->constant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soloconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string constant = 2;
    if (has_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->constant());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soloconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soloconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soloconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soloconstant::MergeFrom(const soloconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_constant()) {
      set_constant(from.constant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soloconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soloconstant::CopyFrom(const soloconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soloconstant::IsInitialized() const {

  return true;
}

void soloconstant::Swap(soloconstant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(constant_, other->constant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soloconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soloconstant_descriptor_;
  metadata.reflection = soloconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_soloconstant::kSoloconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_soloconstant::Sheet_soloconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_soloconstant::InitAsDefaultInstance() {
}

Sheet_soloconstant::Sheet_soloconstant(const Sheet_soloconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_soloconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_soloconstant::~Sheet_soloconstant() {
  SharedDtor();
}

void Sheet_soloconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_soloconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_soloconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_soloconstant_descriptor_;
}

const Sheet_soloconstant& Sheet_soloconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_solo_2eproto();
  return *default_instance_;
}

Sheet_soloconstant* Sheet_soloconstant::default_instance_ = NULL;

Sheet_soloconstant* Sheet_soloconstant::New() const {
  return new Sheet_soloconstant;
}

void Sheet_soloconstant::Clear() {
  soloconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_soloconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.soloconstant soloconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soloconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soloconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_soloconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_soloconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.soloconstant soloconstant_List = 1;
  for (int i = 0; i < this->soloconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soloconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_soloconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.soloconstant soloconstant_List = 1;
  for (int i = 0; i < this->soloconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soloconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_soloconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.soloconstant soloconstant_List = 1;
  total_size += 1 * this->soloconstant_list_size();
  for (int i = 0; i < this->soloconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soloconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_soloconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_soloconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_soloconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_soloconstant::MergeFrom(const Sheet_soloconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  soloconstant_list_.MergeFrom(from.soloconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_soloconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_soloconstant::CopyFrom(const Sheet_soloconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_soloconstant::IsInitialized() const {

  return true;
}

void Sheet_soloconstant::Swap(Sheet_soloconstant* other) {
  if (other != this) {
    soloconstant_list_.Swap(&other->soloconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_soloconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_soloconstant_descriptor_;
  metadata.reflection = Sheet_soloconstant_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
