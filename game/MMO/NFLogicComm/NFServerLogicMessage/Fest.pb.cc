// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Fest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FestSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestSimpleListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestSimpleListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRedPointProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRedPointProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRedPointListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRedPointListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestShopProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestShopProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestShopDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestShopDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestSignDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestSignDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDailyTotalRechargeDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDailyTotalRechargeDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestGoldStoreProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestGoldStoreProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRTurnableRechargeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRTurnableRechargeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestTurnableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestTurnableProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestOnlineProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestOnlineProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCollectWordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCollectWordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestBossDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestBossDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestMarryDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestMarryDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDayTotalRechargeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDayTotalRechargeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestLoginProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestLoginProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestTotalRechargeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestTotalRechargeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_SimpleListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_SimpleListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_SimpleInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_SimpleInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DetailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DetailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DetailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DetailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DetailUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DetailUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_RedPointInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_RedPointInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_RedPointInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_RedPointInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_ShopBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_ShopBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_ShopBuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_ShopBuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_GetDailyRechargeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_GetDailyRechargeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DailyRechargeStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DailyRechargeStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRTurnableRechargeTurnableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRTurnableRechargeTurnableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRTurnableRechargeTurnableRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRTurnableRechargeTurnableRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_SignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_SignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_SignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_SignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_GoldStoreUpateBuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_GoldStoreUpateBuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggRestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggRestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggRestRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggRestRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggLogRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggLogRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggTaskFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggTaskFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggTaskFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggTaskFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DigEggTaskUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DigEggTaskUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_RTuranbleLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_RTuranbleLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_RTuranbleLogRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_RTuranbleLogRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableTurnTableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableTurnTableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableTurnTableRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableTurnTableRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetServerNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetServerNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetServerNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetServerNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateDonateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateDonateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateDonateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateDonateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetSingleRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetSingleRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetSingleRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetSingleRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetServerRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetServerRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetServerRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetServerRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateGetTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateGetTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateTaskTtatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateTaskTtatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestOnlineGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestOnlineGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestOnlineGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestOnlineGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCollectWorldExchargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCollectWorldExchargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCollectWorldExchargeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCollectWorldExchargeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeChouJiangReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeChouJiangReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeChouJiangRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeChouJiangRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeLogRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeLogRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeGetServerNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeGetServerNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeGetServerNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeGetServerNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankRewardStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankRewardStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetMyRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetMyRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetMyRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetMyRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetAllRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetAllRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetAllRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetAllRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankBuyGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankBuyGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankBuyGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankBuyGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetRedPointRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetRedPointRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankGetRedPointRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankGetRedPointRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestServerRankStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestServerRankStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleFetchLstRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleFetchLstRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_DigEgg_OpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_DigEgg_OpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_LogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_LogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_RTurnable_OpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_RTurnable_OpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_RTurnable_LogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_RTurnable_LogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_DonateOperate_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_DonateOperate_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_C2L_DonateGetServerRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_C2L_DonateGetServerRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_DrawPizeLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_DrawPizeLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2C_DrawPizeChouJiangGetServerNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2C_DrawPizeChouJiangGetServerNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_C2L_DrawPizeChouJiangGetServerNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_C2L_DrawPizeChouJiangGetServerNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_C2L_ServerRankSyncReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_C2L_ServerRankSyncReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_C2L_ServerRankSyncRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_C2L_ServerRankSyncRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_S2C_CandleRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_S2C_CandleRankReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2S_CandleAddHarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2S_CandleAddHarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_S2L_CandleTotalHarmRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_S2L_CandleTotalHarmRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_L2S_CandleRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_L2S_CandleRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BossFirstOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BossFirstOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BossFirstOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BossFirstOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BossInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BossInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BossInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BossInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BFGlobalDBKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BFGlobalDBKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BFGlobalDBEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BFGlobalDBEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_BFGlobalDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_BFGlobalDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CFest_BossKFSimpleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CFest_BossKFSimpleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LFest_BossKFNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LFest_BossKFNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LFest_BossInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LFest_BossInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LFest_BossFirstOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LFest_BossFirstOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LFest_HuiMengXiYou_GetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LFest_HuiMengXiYou_GetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CFest_HuiMengXiYou_GetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CFest_HuiMengXiYou_GetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouRewardStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouRewardStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* XiYouGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XiYouGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotiftFest_HuiMengXiYouStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotiftFest_LogicHuiMengXiYouStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotiftFest_LogicHuiMengXiYouStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouSceneChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouSceneChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotiftFest_HuiMengXiYouGameStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotiftFest_HuiMengXiYouEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotiftFest_HuiMengXiYouGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouEnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouEnterGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LFest_HuiMengXiYouGiveCaiJiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LFest_HuiMengXiYouGiveCaiJiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CFest_HuiMengXiYouGiveCaiJiRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CFest_HuiMengXiYouGiveCaiJiRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* XiYouCaiJiCollectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XiYouCaiJiCollectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* XiYouCaiJiCollectMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XiYouCaiJiCollectMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouCollectSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYouCollectSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYou_RoubaoziNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFest_HuiMengXiYou_RoubaoziNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryExpressRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryExpressRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryExpressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryExpressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryExpressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryExpressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRoleRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRoleRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRoleRecvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRoleRecvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryExpress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryExpress_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryDBEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryDBEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouGlobalDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouGlobalDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LFMarrySynScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LFMarrySynScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CFMarrySynScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CFMarrySynScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouGlobalDBEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouGlobalDBEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouGlobalDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouGlobalDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouSyncNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouSyncNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouSyncLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouSyncLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouSyncFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouSyncFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_XiYouSyncForceClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_XiYouSyncForceClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DayTotalRechargeFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DayTotalRechargeFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DayTotalRechargeFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DayTotalRechargeFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_DayTotalRechargeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_DayTotalRechargeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_LoginRewardFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_LoginRewardFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_LoginRewardFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_LoginRewardFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_LoginRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_LoginRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_TotalRechargeFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_TotalRechargeFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_TotalRechargeFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_TotalRechargeFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fest_TotalRechargeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fest_TotalRechargeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Fest_2eproto() {
  protobuf_AddDesc_Fest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Fest.proto");
  GOOGLE_CHECK(file != NULL);
  FestSimpleProto_descriptor_ = file->message_type(0);
  static const int FestSimpleProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, redpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, begintime_),
  };
  FestSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestSimpleProto_descriptor_,
      FestSimpleProto::default_instance_,
      FestSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestSimpleProto));
  FestSimpleListProto_descriptor_ = file->message_type(1);
  static const int FestSimpleListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleListProto, info_),
  };
  FestSimpleListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestSimpleListProto_descriptor_,
      FestSimpleListProto::default_instance_,
      FestSimpleListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestSimpleListProto));
  FestRedPointProto_descriptor_ = file->message_type(2);
  static const int FestRedPointProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointProto, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointProto, redpoint_),
  };
  FestRedPointProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRedPointProto_descriptor_,
      FestRedPointProto::default_instance_,
      FestRedPointProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRedPointProto));
  FestRedPointListProto_descriptor_ = file->message_type(3);
  static const int FestRedPointListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointListProto, info_),
  };
  FestRedPointListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRedPointListProto_descriptor_,
      FestRedPointListProto::default_instance_,
      FestRedPointListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRedPointListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRedPointListProto));
  FestShopProto_descriptor_ = file->message_type(4);
  static const int FestShopProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopProto, num_),
  };
  FestShopProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestShopProto_descriptor_,
      FestShopProto::default_instance_,
      FestShopProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestShopProto));
  FestShopDetailProto_descriptor_ = file->message_type(5);
  static const int FestShopDetailProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopDetailProto, buy_),
  };
  FestShopDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestShopDetailProto_descriptor_,
      FestShopDetailProto::default_instance_,
      FestShopDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestShopDetailProto));
  FestSignDetailProto_descriptor_ = file->message_type(6);
  static const int FestSignDetailProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSignDetailProto, is_sign_),
  };
  FestSignDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestSignDetailProto_descriptor_,
      FestSignDetailProto::default_instance_,
      FestSignDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSignDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSignDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestSignDetailProto));
  FestDailyTotalRechargeDetailProto_descriptor_ = file->message_type(7);
  static const int FestDailyTotalRechargeDetailProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDetailProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDetailProto, total_recharge_),
  };
  FestDailyTotalRechargeDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDailyTotalRechargeDetailProto_descriptor_,
      FestDailyTotalRechargeDetailProto::default_instance_,
      FestDailyTotalRechargeDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDailyTotalRechargeDetailProto));
  FestGoldStoreProto_descriptor_ = file->message_type(8);
  static const int FestGoldStoreProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestGoldStoreProto, info_),
  };
  FestGoldStoreProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestGoldStoreProto_descriptor_,
      FestGoldStoreProto::default_instance_,
      FestGoldStoreProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestGoldStoreProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestGoldStoreProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestGoldStoreProto));
  FestDigEggLogProto_descriptor_ = file->message_type(9);
  static const int FestDigEggLogProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogProto, cid_),
  };
  FestDigEggLogProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggLogProto_descriptor_,
      FestDigEggLogProto::default_instance_,
      FestDigEggLogProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggLogProto));
  FestDigEggTaskProto_descriptor_ = file->message_type(10);
  static const int FestDigEggTaskProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskProto, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskProto, fetch_),
  };
  FestDigEggTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggTaskProto_descriptor_,
      FestDigEggTaskProto::default_instance_,
      FestDigEggTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggTaskProto));
  FestDigEggProto_descriptor_ = file->message_type(11);
  static const int FestDigEggProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggProto, free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggProto, task_),
  };
  FestDigEggProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggProto_descriptor_,
      FestDigEggProto::default_instance_,
      FestDigEggProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggProto));
  FestCandleProto_descriptor_ = file->message_type(12);
  static const int FestCandleProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleProto, id_lst_),
  };
  FestCandleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleProto_descriptor_,
      FestCandleProto::default_instance_,
      FestCandleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleProto));
  FestCandRankProto_descriptor_ = file->message_type(13);
  static const int FestCandRankProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, rank_),
  };
  FestCandRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandRankProto_descriptor_,
      FestCandRankProto::default_instance_,
      FestCandRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandRankProto));
  FestRTurnableRechargeProto_descriptor_ = file->message_type(14);
  static const int FestRTurnableRechargeProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeProto, info_),
  };
  FestRTurnableRechargeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRTurnableRechargeProto_descriptor_,
      FestRTurnableRechargeProto::default_instance_,
      FestRTurnableRechargeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRTurnableRechargeProto));
  FestTurnableProto_descriptor_ = file->message_type(15);
  static const int FestTurnableProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableProto, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableProto, chou_jiang_ids_),
  };
  FestTurnableProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestTurnableProto_descriptor_,
      FestTurnableProto::default_instance_,
      FestTurnableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestTurnableProto));
  FestDonateProto_descriptor_ = file->message_type(16);
  static const int FestDonateProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateProto, single_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateProto, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateProto, single_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateProto, task_),
  };
  FestDonateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateProto_descriptor_,
      FestDonateProto::default_instance_,
      FestDonateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateProto));
  FestOnlineProto_descriptor_ = file->message_type(17);
  static const int FestOnlineProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineProto, data_),
  };
  FestOnlineProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestOnlineProto_descriptor_,
      FestOnlineProto::default_instance_,
      FestOnlineProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestOnlineProto));
  FestCollectWordProto_descriptor_ = file->message_type(18);
  static const int FestCollectWordProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordProto, data_),
  };
  FestCollectWordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCollectWordProto_descriptor_,
      FestCollectWordProto::default_instance_,
      FestCollectWordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCollectWordProto));
  FestBossDetailProto_descriptor_ = file->message_type(19);
  static const int FestBossDetailProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossDetailProto, recv_kill_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossDetailProto, recv_red_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossDetailProto, my_kills_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossDetailProto, kill_ids_),
  };
  FestBossDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestBossDetailProto_descriptor_,
      FestBossDetailProto::default_instance_,
      FestBossDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestBossDetailProto));
  FestMarryDetail_descriptor_ = file->message_type(20);
  static const int FestMarryDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestMarryDetail, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestMarryDetail, process_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestMarryDetail, score_),
  };
  FestMarryDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestMarryDetail_descriptor_,
      FestMarryDetail::default_instance_,
      FestMarryDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestMarryDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestMarryDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestMarryDetail));
  FestDayTotalRechargeProto_descriptor_ = file->message_type(21);
  static const int FestDayTotalRechargeProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDayTotalRechargeProto, fetch_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDayTotalRechargeProto, recharge_),
  };
  FestDayTotalRechargeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDayTotalRechargeProto_descriptor_,
      FestDayTotalRechargeProto::default_instance_,
      FestDayTotalRechargeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDayTotalRechargeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDayTotalRechargeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDayTotalRechargeProto));
  FestLoginProto_descriptor_ = file->message_type(22);
  static const int FestLoginProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestLoginProto, fetch_),
  };
  FestLoginProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestLoginProto_descriptor_,
      FestLoginProto::default_instance_,
      FestLoginProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestLoginProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestLoginProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestLoginProto));
  FestTotalRechargeProto_descriptor_ = file->message_type(23);
  static const int FestTotalRechargeProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTotalRechargeProto, fetch_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTotalRechargeProto, total_recharge_),
  };
  FestTotalRechargeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestTotalRechargeProto_descriptor_,
      FestTotalRechargeProto::default_instance_,
      FestTotalRechargeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTotalRechargeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTotalRechargeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestTotalRechargeProto));
  FestDetailProto_descriptor_ = file->message_type(24);
  static const int FestDetailProto_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, daily_total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, gold_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, dig_egg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, rturnable_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, turntable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, collect_word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, draw_pize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, server_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, hui_meng_xi_you_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, marry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, candle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, day_total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, login_),
  };
  FestDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDetailProto_descriptor_,
      FestDetailProto::default_instance_,
      FestDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDetailProto));
  Fest_SimpleListRsp_descriptor_ = file->message_type(25);
  static const int Fest_SimpleListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SimpleListRsp, simple_),
  };
  Fest_SimpleListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_SimpleListRsp_descriptor_,
      Fest_SimpleListRsp::default_instance_,
      Fest_SimpleListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SimpleListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SimpleListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_SimpleListRsp));
  Fest_SimpleInfoNotify_descriptor_ = file->message_type(26);
  static const int Fest_SimpleInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SimpleInfoNotify, simple_),
  };
  Fest_SimpleInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_SimpleInfoNotify_descriptor_,
      Fest_SimpleInfoNotify::default_instance_,
      Fest_SimpleInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SimpleInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SimpleInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_SimpleInfoNotify));
  Fest_DetailReq_descriptor_ = file->message_type(27);
  static const int Fest_DetailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailReq, fest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailReq, template_id_),
  };
  Fest_DetailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DetailReq_descriptor_,
      Fest_DetailReq::default_instance_,
      Fest_DetailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DetailReq));
  Fest_DetailRsp_descriptor_ = file->message_type(28);
  static const int Fest_DetailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailRsp, detail_),
  };
  Fest_DetailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DetailRsp_descriptor_,
      Fest_DetailRsp::default_instance_,
      Fest_DetailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DetailRsp));
  Fest_DetailUpdateRsp_descriptor_ = file->message_type(29);
  static const int Fest_DetailUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailUpdateRsp, detail_),
  };
  Fest_DetailUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DetailUpdateRsp_descriptor_,
      Fest_DetailUpdateRsp::default_instance_,
      Fest_DetailUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DetailUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DetailUpdateRsp));
  Fest_RedPointInfoRsp_descriptor_ = file->message_type(30);
  static const int Fest_RedPointInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RedPointInfoRsp, redpoint_),
  };
  Fest_RedPointInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_RedPointInfoRsp_descriptor_,
      Fest_RedPointInfoRsp::default_instance_,
      Fest_RedPointInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RedPointInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RedPointInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_RedPointInfoRsp));
  Fest_RedPointInfoNotify_descriptor_ = file->message_type(31);
  static const int Fest_RedPointInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RedPointInfoNotify, redpoint_),
  };
  Fest_RedPointInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_RedPointInfoNotify_descriptor_,
      Fest_RedPointInfoNotify::default_instance_,
      Fest_RedPointInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RedPointInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RedPointInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_RedPointInfoNotify));
  Fest_ShopBuyReq_descriptor_ = file->message_type(32);
  static const int Fest_ShopBuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyReq, id_),
  };
  Fest_ShopBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_ShopBuyReq_descriptor_,
      Fest_ShopBuyReq::default_instance_,
      Fest_ShopBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_ShopBuyReq));
  Fest_ShopBuyRsp_descriptor_ = file->message_type(33);
  static const int Fest_ShopBuyRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyRsp, num_),
  };
  Fest_ShopBuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_ShopBuyRsp_descriptor_,
      Fest_ShopBuyRsp::default_instance_,
      Fest_ShopBuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_ShopBuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_ShopBuyRsp));
  Fest_GetDailyRechargeRewardReq_descriptor_ = file->message_type(34);
  static const int Fest_GetDailyRechargeRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GetDailyRechargeRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GetDailyRechargeRewardReq, id_),
  };
  Fest_GetDailyRechargeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_GetDailyRechargeRewardReq_descriptor_,
      Fest_GetDailyRechargeRewardReq::default_instance_,
      Fest_GetDailyRechargeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GetDailyRechargeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GetDailyRechargeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_GetDailyRechargeRewardReq));
  Fest_DailyRechargeStatusNotify_descriptor_ = file->message_type(35);
  static const int Fest_DailyRechargeStatusNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DailyRechargeStatusNotify, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DailyRechargeStatusNotify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DailyRechargeStatusNotify, total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DailyRechargeStatusNotify, data_),
  };
  Fest_DailyRechargeStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DailyRechargeStatusNotify_descriptor_,
      Fest_DailyRechargeStatusNotify::default_instance_,
      Fest_DailyRechargeStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DailyRechargeStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DailyRechargeStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DailyRechargeStatusNotify));
  FestRTurnableRechargeTurnableReq_descriptor_ = file->message_type(36);
  static const int FestRTurnableRechargeTurnableReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableReq, id_),
  };
  FestRTurnableRechargeTurnableReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRTurnableRechargeTurnableReq_descriptor_,
      FestRTurnableRechargeTurnableReq::default_instance_,
      FestRTurnableRechargeTurnableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRTurnableRechargeTurnableReq));
  FestRTurnableRechargeTurnableRsp_descriptor_ = file->message_type(37);
  static const int FestRTurnableRechargeTurnableRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableRsp, turnable_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableRsp, data_),
  };
  FestRTurnableRechargeTurnableRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRTurnableRechargeTurnableRsp_descriptor_,
      FestRTurnableRechargeTurnableRsp::default_instance_,
      FestRTurnableRechargeTurnableRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeTurnableRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRTurnableRechargeTurnableRsp));
  Fest_SignReq_descriptor_ = file->message_type(38);
  static const int Fest_SignReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignReq, template_id_),
  };
  Fest_SignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_SignReq_descriptor_,
      Fest_SignReq::default_instance_,
      Fest_SignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_SignReq));
  Fest_SignRsp_descriptor_ = file->message_type(39);
  static const int Fest_SignRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignRsp, template_id_),
  };
  Fest_SignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_SignRsp_descriptor_,
      Fest_SignRsp::default_instance_,
      Fest_SignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_SignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_SignRsp));
  Fest_GoldStoreUpateBuyRsp_descriptor_ = file->message_type(40);
  static const int Fest_GoldStoreUpateBuyRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GoldStoreUpateBuyRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GoldStoreUpateBuyRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GoldStoreUpateBuyRsp, num_),
  };
  Fest_GoldStoreUpateBuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_GoldStoreUpateBuyRsp_descriptor_,
      Fest_GoldStoreUpateBuyRsp::default_instance_,
      Fest_GoldStoreUpateBuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GoldStoreUpateBuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_GoldStoreUpateBuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_GoldStoreUpateBuyRsp));
  Fest_DigEggReq_descriptor_ = file->message_type(41);
  static const int Fest_DigEggReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggReq, pos_),
  };
  Fest_DigEggReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggReq_descriptor_,
      Fest_DigEggReq::default_instance_,
      Fest_DigEggReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggReq));
  Fest_DigEggRsp_descriptor_ = file->message_type(42);
  static const int Fest_DigEggRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRsp, pos_),
  };
  Fest_DigEggRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggRsp_descriptor_,
      Fest_DigEggRsp::default_instance_,
      Fest_DigEggRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggRsp));
  Fest_DigEggRestReq_descriptor_ = file->message_type(43);
  static const int Fest_DigEggRestReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestReq, template_id_),
  };
  Fest_DigEggRestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggRestReq_descriptor_,
      Fest_DigEggRestReq::default_instance_,
      Fest_DigEggRestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggRestReq));
  Fest_DigEggRestRsp_descriptor_ = file->message_type(44);
  static const int Fest_DigEggRestRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestRsp, free_),
  };
  Fest_DigEggRestRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggRestRsp_descriptor_,
      Fest_DigEggRestRsp::default_instance_,
      Fest_DigEggRestRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggRestRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggRestRsp));
  Fest_DigEggLogReq_descriptor_ = file->message_type(45);
  static const int Fest_DigEggLogReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogReq, template_id_),
  };
  Fest_DigEggLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggLogReq_descriptor_,
      Fest_DigEggLogReq::default_instance_,
      Fest_DigEggLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggLogReq));
  Fest_DigEggLogRsp_descriptor_ = file->message_type(46);
  static const int Fest_DigEggLogRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogRsp, log_),
  };
  Fest_DigEggLogRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggLogRsp_descriptor_,
      Fest_DigEggLogRsp::default_instance_,
      Fest_DigEggLogRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggLogRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggLogRsp));
  Fest_DigEggTaskFetchReq_descriptor_ = file->message_type(47);
  static const int Fest_DigEggTaskFetchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchReq, id_),
  };
  Fest_DigEggTaskFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggTaskFetchReq_descriptor_,
      Fest_DigEggTaskFetchReq::default_instance_,
      Fest_DigEggTaskFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggTaskFetchReq));
  Fest_DigEggTaskFetchRsp_descriptor_ = file->message_type(48);
  static const int Fest_DigEggTaskFetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchRsp, template_id_),
  };
  Fest_DigEggTaskFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggTaskFetchRsp_descriptor_,
      Fest_DigEggTaskFetchRsp::default_instance_,
      Fest_DigEggTaskFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggTaskFetchRsp));
  Fest_DigEggTaskUpdateRsp_descriptor_ = file->message_type(49);
  static const int Fest_DigEggTaskUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskUpdateRsp, task_),
  };
  Fest_DigEggTaskUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DigEggTaskUpdateRsp_descriptor_,
      Fest_DigEggTaskUpdateRsp::default_instance_,
      Fest_DigEggTaskUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DigEggTaskUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DigEggTaskUpdateRsp));
  Fest_RTuranbleLogReq_descriptor_ = file->message_type(50);
  static const int Fest_RTuranbleLogReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogReq, template_id_),
  };
  Fest_RTuranbleLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_RTuranbleLogReq_descriptor_,
      Fest_RTuranbleLogReq::default_instance_,
      Fest_RTuranbleLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_RTuranbleLogReq));
  Fest_RTuranbleLogRsp_descriptor_ = file->message_type(51);
  static const int Fest_RTuranbleLogRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogRsp, log_),
  };
  Fest_RTuranbleLogRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_RTuranbleLogRsp_descriptor_,
      Fest_RTuranbleLogRsp::default_instance_,
      Fest_RTuranbleLogRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_RTuranbleLogRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_RTuranbleLogRsp));
  TurntableTurnTableReq_descriptor_ = file->message_type(52);
  static const int TurntableTurnTableReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableReq, template_id_),
  };
  TurntableTurnTableReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableTurnTableReq_descriptor_,
      TurntableTurnTableReq::default_instance_,
      TurntableTurnTableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableTurnTableReq));
  TurntableTurnTableRsp_descriptor_ = file->message_type(53);
  static const int TurntableTurnTableRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, turntable_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, chou_jiang_ids_),
  };
  TurntableTurnTableRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableTurnTableRsp_descriptor_,
      TurntableTurnTableRsp::default_instance_,
      TurntableTurnTableRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableTurnTableRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableTurnTableRsp));
  TurntableRewardReq_descriptor_ = file->message_type(54);
  static const int TurntableRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardReq, id_),
  };
  TurntableRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableRewardReq_descriptor_,
      TurntableRewardReq::default_instance_,
      TurntableRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableRewardReq));
  TurntableRewardRsp_descriptor_ = file->message_type(55);
  static const int TurntableRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardRsp, template_id_),
  };
  TurntableRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableRewardRsp_descriptor_,
      TurntableRewardRsp::default_instance_,
      TurntableRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableRewardRsp));
  TurntableStatusChange_descriptor_ = file->message_type(56);
  static const int TurntableStatusChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableStatusChange, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableStatusChange, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableStatusChange, left_num_),
  };
  TurntableStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableStatusChange_descriptor_,
      TurntableStatusChange::default_instance_,
      TurntableStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableStatusChange));
  FestDonateGetServerNumReq_descriptor_ = file->message_type(57);
  static const int FestDonateGetServerNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumReq, template_id_),
  };
  FestDonateGetServerNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetServerNumReq_descriptor_,
      FestDonateGetServerNumReq::default_instance_,
      FestDonateGetServerNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetServerNumReq));
  FestDonateGetServerNumRsp_descriptor_ = file->message_type(58);
  static const int FestDonateGetServerNumRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumRsp, server_num_),
  };
  FestDonateGetServerNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetServerNumRsp_descriptor_,
      FestDonateGetServerNumRsp::default_instance_,
      FestDonateGetServerNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetServerNumRsp));
  FestDonateDonateReq_descriptor_ = file->message_type(59);
  static const int FestDonateDonateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateReq, type_),
  };
  FestDonateDonateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateDonateReq_descriptor_,
      FestDonateDonateReq::default_instance_,
      FestDonateDonateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateDonateReq));
  FestDonateDonateRsp_descriptor_ = file->message_type(60);
  static const int FestDonateDonateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateRsp, single_num_),
  };
  FestDonateDonateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateDonateRsp_descriptor_,
      FestDonateDonateRsp::default_instance_,
      FestDonateDonateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDonateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateDonateRsp));
  FestDonateGetSingleRewardReq_descriptor_ = file->message_type(61);
  static const int FestDonateGetSingleRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardReq, id_),
  };
  FestDonateGetSingleRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetSingleRewardReq_descriptor_,
      FestDonateGetSingleRewardReq::default_instance_,
      FestDonateGetSingleRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetSingleRewardReq));
  FestDonateGetSingleRewardRsp_descriptor_ = file->message_type(62);
  static const int FestDonateGetSingleRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardRsp, data_),
  };
  FestDonateGetSingleRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetSingleRewardRsp_descriptor_,
      FestDonateGetSingleRewardRsp::default_instance_,
      FestDonateGetSingleRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetSingleRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetSingleRewardRsp));
  FestDonateGetServerRewardReq_descriptor_ = file->message_type(63);
  static const int FestDonateGetServerRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardReq, id_),
  };
  FestDonateGetServerRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetServerRewardReq_descriptor_,
      FestDonateGetServerRewardReq::default_instance_,
      FestDonateGetServerRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetServerRewardReq));
  FestDonateGetServerRewardRsp_descriptor_ = file->message_type(64);
  static const int FestDonateGetServerRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardRsp, data_),
  };
  FestDonateGetServerRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetServerRewardRsp_descriptor_,
      FestDonateGetServerRewardRsp::default_instance_,
      FestDonateGetServerRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetServerRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetServerRewardRsp));
  FestDonateGetTaskRewardReq_descriptor_ = file->message_type(65);
  static const int FestDonateGetTaskRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardReq, id_),
  };
  FestDonateGetTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetTaskRewardReq_descriptor_,
      FestDonateGetTaskRewardReq::default_instance_,
      FestDonateGetTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetTaskRewardReq));
  FestDonateGetTaskRewardRsp_descriptor_ = file->message_type(66);
  static const int FestDonateGetTaskRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardRsp, data_),
  };
  FestDonateGetTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateGetTaskRewardRsp_descriptor_,
      FestDonateGetTaskRewardRsp::default_instance_,
      FestDonateGetTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateGetTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateGetTaskRewardRsp));
  FestDonateTaskTtatusChange_descriptor_ = file->message_type(67);
  static const int FestDonateTaskTtatusChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateTaskTtatusChange, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateTaskTtatusChange, data_),
  };
  FestDonateTaskTtatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateTaskTtatusChange_descriptor_,
      FestDonateTaskTtatusChange::default_instance_,
      FestDonateTaskTtatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateTaskTtatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateTaskTtatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateTaskTtatusChange));
  FestOnlineGetRewardReq_descriptor_ = file->message_type(68);
  static const int FestOnlineGetRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardReq, id_),
  };
  FestOnlineGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestOnlineGetRewardReq_descriptor_,
      FestOnlineGetRewardReq::default_instance_,
      FestOnlineGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestOnlineGetRewardReq));
  FestOnlineGetRewardRsp_descriptor_ = file->message_type(69);
  static const int FestOnlineGetRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardRsp, data_),
  };
  FestOnlineGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestOnlineGetRewardRsp_descriptor_,
      FestOnlineGetRewardRsp::default_instance_,
      FestOnlineGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestOnlineGetRewardRsp));
  FestCollectWorldExchargeReq_descriptor_ = file->message_type(70);
  static const int FestCollectWorldExchargeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeReq, id_),
  };
  FestCollectWorldExchargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCollectWorldExchargeReq_descriptor_,
      FestCollectWorldExchargeReq::default_instance_,
      FestCollectWorldExchargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCollectWorldExchargeReq));
  FestCollectWorldExchargeRsp_descriptor_ = file->message_type(71);
  static const int FestCollectWorldExchargeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeRsp, data_),
  };
  FestCollectWorldExchargeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCollectWorldExchargeRsp_descriptor_,
      FestCollectWorldExchargeRsp::default_instance_,
      FestCollectWorldExchargeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWorldExchargeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCollectWorldExchargeRsp));
  FestDrawPizeChouJiangReq_descriptor_ = file->message_type(72);
  static const int FestDrawPizeChouJiangReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangReq, type_),
  };
  FestDrawPizeChouJiangReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeChouJiangReq_descriptor_,
      FestDrawPizeChouJiangReq::default_instance_,
      FestDrawPizeChouJiangReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeChouJiangReq));
  FestDrawPizeChouJiangRsp_descriptor_ = file->message_type(73);
  static const int FestDrawPizeChouJiangRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangRsp, choujiang_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangRsp, choujiang_num_),
  };
  FestDrawPizeChouJiangRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeChouJiangRsp_descriptor_,
      FestDrawPizeChouJiangRsp::default_instance_,
      FestDrawPizeChouJiangRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeChouJiangRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeChouJiangRsp));
  FestDrawPizeGetRewardReq_descriptor_ = file->message_type(74);
  static const int FestDrawPizeGetRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardReq, id_),
  };
  FestDrawPizeGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeGetRewardReq_descriptor_,
      FestDrawPizeGetRewardReq::default_instance_,
      FestDrawPizeGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeGetRewardReq));
  FestDrawPizeGetRewardRsp_descriptor_ = file->message_type(75);
  static const int FestDrawPizeGetRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardRsp, data_),
  };
  FestDrawPizeGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeGetRewardRsp_descriptor_,
      FestDrawPizeGetRewardRsp::default_instance_,
      FestDrawPizeGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeGetRewardRsp));
  FestDrawPizeLogReq_descriptor_ = file->message_type(76);
  static const int FestDrawPizeLogReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogReq, template_id_),
  };
  FestDrawPizeLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeLogReq_descriptor_,
      FestDrawPizeLogReq::default_instance_,
      FestDrawPizeLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeLogReq));
  FestDrawPizeLogRsp_descriptor_ = file->message_type(77);
  static const int FestDrawPizeLogRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogRsp, log_),
  };
  FestDrawPizeLogRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeLogRsp_descriptor_,
      FestDrawPizeLogRsp::default_instance_,
      FestDrawPizeLogRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeLogRsp));
  FestDrawPizeGetServerNumReq_descriptor_ = file->message_type(78);
  static const int FestDrawPizeGetServerNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumReq, template_id_),
  };
  FestDrawPizeGetServerNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeGetServerNumReq_descriptor_,
      FestDrawPizeGetServerNumReq::default_instance_,
      FestDrawPizeGetServerNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeGetServerNumReq));
  FestDrawPizeGetServerNumRsp_descriptor_ = file->message_type(79);
  static const int FestDrawPizeGetServerNumRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumRsp, server_num_),
  };
  FestDrawPizeGetServerNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeGetServerNumRsp_descriptor_,
      FestDrawPizeGetServerNumRsp::default_instance_,
      FestDrawPizeGetServerNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeGetServerNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeGetServerNumRsp));
  FestServerRankGetRewardReq_descriptor_ = file->message_type(80);
  static const int FestServerRankGetRewardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardReq, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardReq, reward_id_),
  };
  FestServerRankGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetRewardReq_descriptor_,
      FestServerRankGetRewardReq::default_instance_,
      FestServerRankGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetRewardReq));
  FestServerRankGetRewardRsp_descriptor_ = file->message_type(81);
  static const int FestServerRankGetRewardRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardRsp, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardRsp, data_),
  };
  FestServerRankGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetRewardRsp_descriptor_,
      FestServerRankGetRewardRsp::default_instance_,
      FestServerRankGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetRewardRsp));
  FestServerRankRewardStatusChange_descriptor_ = file->message_type(82);
  static const int FestServerRankRewardStatusChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankRewardStatusChange, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankRewardStatusChange, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankRewardStatusChange, data_),
  };
  FestServerRankRewardStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankRewardStatusChange_descriptor_,
      FestServerRankRewardStatusChange::default_instance_,
      FestServerRankRewardStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankRewardStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankRewardStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankRewardStatusChange));
  FestServerRankGetMyRankReq_descriptor_ = file->message_type(83);
  static const int FestServerRankGetMyRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankReq, rank_id_),
  };
  FestServerRankGetMyRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetMyRankReq_descriptor_,
      FestServerRankGetMyRankReq::default_instance_,
      FestServerRankGetMyRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetMyRankReq));
  FestServerRankGetMyRankRsp_descriptor_ = file->message_type(84);
  static const int FestServerRankGetMyRankRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, my_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, param_),
  };
  FestServerRankGetMyRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetMyRankRsp_descriptor_,
      FestServerRankGetMyRankRsp::default_instance_,
      FestServerRankGetMyRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetMyRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetMyRankRsp));
  FestServerRankGetAllRankReq_descriptor_ = file->message_type(85);
  static const int FestServerRankGetAllRankReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankReq, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankReq, rank_type_),
  };
  FestServerRankGetAllRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetAllRankReq_descriptor_,
      FestServerRankGetAllRankReq::default_instance_,
      FestServerRankGetAllRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetAllRankReq));
  FestServerRankGetAllRankRsp_descriptor_ = file->message_type(86);
  static const int FestServerRankGetAllRankRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankRsp, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankRsp, ranklist_),
  };
  FestServerRankGetAllRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetAllRankRsp_descriptor_,
      FestServerRankGetAllRankRsp::default_instance_,
      FestServerRankGetAllRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetAllRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetAllRankRsp));
  FestServerRankBuyGiftReq_descriptor_ = file->message_type(87);
  static const int FestServerRankBuyGiftReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftReq, rank_id_),
  };
  FestServerRankBuyGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankBuyGiftReq_descriptor_,
      FestServerRankBuyGiftReq::default_instance_,
      FestServerRankBuyGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankBuyGiftReq));
  FestServerRankBuyGiftRsp_descriptor_ = file->message_type(88);
  static const int FestServerRankBuyGiftRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftRsp, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftRsp, gift_status_),
  };
  FestServerRankBuyGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankBuyGiftRsp_descriptor_,
      FestServerRankBuyGiftRsp::default_instance_,
      FestServerRankBuyGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankBuyGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankBuyGiftRsp));
  FestServerRankGetRedPointRewardReq_descriptor_ = file->message_type(89);
  static const int FestServerRankGetRedPointRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardReq, rank_id_),
  };
  FestServerRankGetRedPointRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetRedPointRewardReq_descriptor_,
      FestServerRankGetRedPointRewardReq::default_instance_,
      FestServerRankGetRedPointRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetRedPointRewardReq));
  FestServerRankGetRedPointRewardRsp_descriptor_ = file->message_type(90);
  static const int FestServerRankGetRedPointRewardRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardRsp, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardRsp, red_point_status_),
  };
  FestServerRankGetRedPointRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankGetRedPointRewardRsp_descriptor_,
      FestServerRankGetRedPointRewardRsp::default_instance_,
      FestServerRankGetRedPointRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankGetRedPointRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankGetRedPointRewardRsp));
  FestServerRankStatusChange_descriptor_ = file->message_type(91);
  static const int FestServerRankStatusChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankStatusChange, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankStatusChange, rank_),
  };
  FestServerRankStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestServerRankStatusChange_descriptor_,
      FestServerRankStatusChange::default_instance_,
      FestServerRankStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestServerRankStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestServerRankStatusChange));
  FestCandleFetchReq_descriptor_ = file->message_type(92);
  static const int FestCandleFetchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchReq, id_),
  };
  FestCandleFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleFetchReq_descriptor_,
      FestCandleFetchReq::default_instance_,
      FestCandleFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleFetchReq));
  FestCandleFetchRsp_descriptor_ = file->message_type(93);
  static const int FestCandleFetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchRsp, template_id_),
  };
  FestCandleFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleFetchRsp_descriptor_,
      FestCandleFetchRsp::default_instance_,
      FestCandleFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleFetchRsp));
  FestCandleFetchLstRsp_descriptor_ = file->message_type(94);
  static const int FestCandleFetchLstRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchLstRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchLstRsp, id_lst_),
  };
  FestCandleFetchLstRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleFetchLstRsp_descriptor_,
      FestCandleFetchLstRsp::default_instance_,
      FestCandleFetchLstRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchLstRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleFetchLstRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleFetchLstRsp));
  FestCandleRankReq_descriptor_ = file->message_type(95);
  static const int FestCandleRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankReq, template_id_),
  };
  FestCandleRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleRankReq_descriptor_,
      FestCandleRankReq::default_instance_,
      FestCandleRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleRankReq));
  FestCandleRankRsp_descriptor_ = file->message_type(96);
  static const int FestCandleRankRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankRsp, harm_),
  };
  FestCandleRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleRankRsp_descriptor_,
      FestCandleRankRsp::default_instance_,
      FestCandleRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleRankRsp));
  Fest_L2C_DigEgg_OpRsp_descriptor_ = file->message_type(97);
  static const int Fest_L2C_DigEgg_OpRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DigEgg_OpRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DigEgg_OpRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DigEgg_OpRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DigEgg_OpRsp, cid_),
  };
  Fest_L2C_DigEgg_OpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_DigEgg_OpRsp_descriptor_,
      Fest_L2C_DigEgg_OpRsp::default_instance_,
      Fest_L2C_DigEgg_OpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DigEgg_OpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DigEgg_OpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_DigEgg_OpRsp));
  Fest_L2C_LogReq_descriptor_ = file->message_type(98);
  static const int Fest_L2C_LogReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_LogReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_LogReq, template_id_),
  };
  Fest_L2C_LogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_LogReq_descriptor_,
      Fest_L2C_LogReq::default_instance_,
      Fest_L2C_LogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_LogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_LogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_LogReq));
  Fest_L2C_RTurnable_OpRsp_descriptor_ = file->message_type(99);
  static const int Fest_L2C_RTurnable_OpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_OpRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_OpRsp, log_),
  };
  Fest_L2C_RTurnable_OpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_RTurnable_OpRsp_descriptor_,
      Fest_L2C_RTurnable_OpRsp::default_instance_,
      Fest_L2C_RTurnable_OpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_OpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_OpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_RTurnable_OpRsp));
  Fest_L2C_RTurnable_LogReq_descriptor_ = file->message_type(100);
  static const int Fest_L2C_RTurnable_LogReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_LogReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_LogReq, template_id_),
  };
  Fest_L2C_RTurnable_LogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_RTurnable_LogReq_descriptor_,
      Fest_L2C_RTurnable_LogReq::default_instance_,
      Fest_L2C_RTurnable_LogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_LogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_RTurnable_LogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_RTurnable_LogReq));
  Fest_L2C_DonateOperate_Notify_descriptor_ = file->message_type(101);
  static const int Fest_L2C_DonateOperate_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DonateOperate_Notify, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DonateOperate_Notify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DonateOperate_Notify, single_num_),
  };
  Fest_L2C_DonateOperate_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_DonateOperate_Notify_descriptor_,
      Fest_L2C_DonateOperate_Notify::default_instance_,
      Fest_L2C_DonateOperate_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DonateOperate_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DonateOperate_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_DonateOperate_Notify));
  Fest_C2L_DonateGetServerRewardReq_descriptor_ = file->message_type(102);
  static const int Fest_C2L_DonateGetServerRewardReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DonateGetServerRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DonateGetServerRewardReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DonateGetServerRewardReq, server_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DonateGetServerRewardReq, cid_),
  };
  Fest_C2L_DonateGetServerRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_C2L_DonateGetServerRewardReq_descriptor_,
      Fest_C2L_DonateGetServerRewardReq::default_instance_,
      Fest_C2L_DonateGetServerRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DonateGetServerRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DonateGetServerRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_C2L_DonateGetServerRewardReq));
  Fest_L2C_DrawPizeLogReq_descriptor_ = file->message_type(103);
  static const int Fest_L2C_DrawPizeLogReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeLogReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeLogReq, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeLogReq, choujiang_num_),
  };
  Fest_L2C_DrawPizeLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_DrawPizeLogReq_descriptor_,
      Fest_L2C_DrawPizeLogReq::default_instance_,
      Fest_L2C_DrawPizeLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_DrawPizeLogReq));
  Fest_L2C_DrawPizeChouJiangGetServerNumReq_descriptor_ = file->message_type(104);
  static const int Fest_L2C_DrawPizeChouJiangGetServerNumReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeChouJiangGetServerNumReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeChouJiangGetServerNumReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeChouJiangGetServerNumReq, cid_),
  };
  Fest_L2C_DrawPizeChouJiangGetServerNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2C_DrawPizeChouJiangGetServerNumReq_descriptor_,
      Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance_,
      Fest_L2C_DrawPizeChouJiangGetServerNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeChouJiangGetServerNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2C_DrawPizeChouJiangGetServerNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2C_DrawPizeChouJiangGetServerNumReq));
  Fest_C2L_DrawPizeChouJiangGetServerNumRsp_descriptor_ = file->message_type(105);
  static const int Fest_C2L_DrawPizeChouJiangGetServerNumRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DrawPizeChouJiangGetServerNumRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DrawPizeChouJiangGetServerNumRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DrawPizeChouJiangGetServerNumRsp, server_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DrawPizeChouJiangGetServerNumRsp, cid_),
  };
  Fest_C2L_DrawPizeChouJiangGetServerNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_C2L_DrawPizeChouJiangGetServerNumRsp_descriptor_,
      Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance_,
      Fest_C2L_DrawPizeChouJiangGetServerNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DrawPizeChouJiangGetServerNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_DrawPizeChouJiangGetServerNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_C2L_DrawPizeChouJiangGetServerNumRsp));
  Fest_C2L_ServerRankSyncReq_descriptor_ = file->message_type(106);
  static const int Fest_C2L_ServerRankSyncReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncReq, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncReq, rank_type_),
  };
  Fest_C2L_ServerRankSyncReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_C2L_ServerRankSyncReq_descriptor_,
      Fest_C2L_ServerRankSyncReq::default_instance_,
      Fest_C2L_ServerRankSyncReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_C2L_ServerRankSyncReq));
  Fest_C2L_ServerRankSyncRsp_descriptor_ = file->message_type(107);
  static const int Fest_C2L_ServerRankSyncRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, my_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, finish_),
  };
  Fest_C2L_ServerRankSyncRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_C2L_ServerRankSyncRsp_descriptor_,
      Fest_C2L_ServerRankSyncRsp::default_instance_,
      Fest_C2L_ServerRankSyncRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_C2L_ServerRankSyncRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_C2L_ServerRankSyncRsp));
  Fest_S2C_CandleRankReward_descriptor_ = file->message_type(108);
  static const int Fest_S2C_CandleRankReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2C_CandleRankReward, cidrank_),
  };
  Fest_S2C_CandleRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_S2C_CandleRankReward_descriptor_,
      Fest_S2C_CandleRankReward::default_instance_,
      Fest_S2C_CandleRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2C_CandleRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2C_CandleRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_S2C_CandleRankReward));
  Fest_L2S_CandleAddHarm_descriptor_ = file->message_type(109);
  static const int Fest_L2S_CandleAddHarm_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, logicid_),
  };
  Fest_L2S_CandleAddHarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2S_CandleAddHarm_descriptor_,
      Fest_L2S_CandleAddHarm::default_instance_,
      Fest_L2S_CandleAddHarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleAddHarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2S_CandleAddHarm));
  Fest_S2L_CandleTotalHarmRsp_descriptor_ = file->message_type(110);
  static const int Fest_S2L_CandleTotalHarmRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2L_CandleTotalHarmRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2L_CandleTotalHarmRsp, total_harm_),
  };
  Fest_S2L_CandleTotalHarmRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_S2L_CandleTotalHarmRsp_descriptor_,
      Fest_S2L_CandleTotalHarmRsp::default_instance_,
      Fest_S2L_CandleTotalHarmRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2L_CandleTotalHarmRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_S2L_CandleTotalHarmRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_S2L_CandleTotalHarmRsp));
  Fest_L2S_CandleRankReq_descriptor_ = file->message_type(111);
  static const int Fest_L2S_CandleRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleRankReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleRankReq, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleRankReq, zid_),
  };
  Fest_L2S_CandleRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_L2S_CandleRankReq_descriptor_,
      Fest_L2S_CandleRankReq::default_instance_,
      Fest_L2S_CandleRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_L2S_CandleRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_L2S_CandleRankReq));
  Fest_BossFirstOptReq_descriptor_ = file->message_type(112);
  static const int Fest_BossFirstOptReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptReq, type_),
  };
  Fest_BossFirstOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BossFirstOptReq_descriptor_,
      Fest_BossFirstOptReq::default_instance_,
      Fest_BossFirstOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BossFirstOptReq));
  Fest_BossFirstOptRsp_descriptor_ = file->message_type(113);
  static const int Fest_BossFirstOptRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptRsp, type_),
  };
  Fest_BossFirstOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BossFirstOptRsp_descriptor_,
      Fest_BossFirstOptRsp::default_instance_,
      Fest_BossFirstOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossFirstOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BossFirstOptRsp));
  Fest_BossInfoReq_descriptor_ = file->message_type(114);
  static const int Fest_BossInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoReq, template_id_),
  };
  Fest_BossInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BossInfoReq_descriptor_,
      Fest_BossInfoReq::default_instance_,
      Fest_BossInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BossInfoReq));
  FestBossInfo_descriptor_ = file->message_type(115);
  static const int FestBossInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, kill_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, kill_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, kill_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, head_),
  };
  FestBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestBossInfo_descriptor_,
      FestBossInfo::default_instance_,
      FestBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestBossInfo));
  Fest_BossInfoRsp_descriptor_ = file->message_type(116);
  static const int Fest_BossInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoRsp, infos_),
  };
  Fest_BossInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BossInfoRsp_descriptor_,
      Fest_BossInfoRsp::default_instance_,
      Fest_BossInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BossInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BossInfoRsp));
  Fest_BFGlobalDBKill_descriptor_ = file->message_type(117);
  static const int Fest_BFGlobalDBKill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBKill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBKill, kill_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBKill, kill_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBKill, teamid_),
  };
  Fest_BFGlobalDBKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BFGlobalDBKill_descriptor_,
      Fest_BFGlobalDBKill::default_instance_,
      Fest_BFGlobalDBKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BFGlobalDBKill));
  Fest_BFGlobalDBEntry_descriptor_ = file->message_type(118);
  static const int Fest_BFGlobalDBEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBEntry, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBEntry, infos_),
  };
  Fest_BFGlobalDBEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BFGlobalDBEntry_descriptor_,
      Fest_BFGlobalDBEntry::default_instance_,
      Fest_BFGlobalDBEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDBEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BFGlobalDBEntry));
  Fest_BFGlobalDB_descriptor_ = file->message_type(119);
  static const int Fest_BFGlobalDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDB, entrys_),
  };
  Fest_BFGlobalDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_BFGlobalDB_descriptor_,
      Fest_BFGlobalDB::default_instance_,
      Fest_BFGlobalDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_BFGlobalDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_BFGlobalDB));
  L2CFest_BossKFSimpleReq_descriptor_ = file->message_type(120);
  static const int L2CFest_BossKFSimpleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_BossKFSimpleReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_BossKFSimpleReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_BossKFSimpleReq, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_BossKFSimpleReq, recv_red_ids_),
  };
  L2CFest_BossKFSimpleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CFest_BossKFSimpleReq_descriptor_,
      L2CFest_BossKFSimpleReq::default_instance_,
      L2CFest_BossKFSimpleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_BossKFSimpleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_BossKFSimpleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CFest_BossKFSimpleReq));
  C2LFest_BossKFNotify_descriptor_ = file->message_type(121);
  static const int C2LFest_BossKFNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, zid_),
  };
  C2LFest_BossKFNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LFest_BossKFNotify_descriptor_,
      C2LFest_BossKFNotify::default_instance_,
      C2LFest_BossKFNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossKFNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LFest_BossKFNotify));
  C2LFest_BossInfoReq_descriptor_ = file->message_type(122);
  static const int C2LFest_BossInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossInfoReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossInfoReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossInfoReq, infos_),
  };
  C2LFest_BossInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LFest_BossInfoReq_descriptor_,
      C2LFest_BossInfoReq::default_instance_,
      C2LFest_BossInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LFest_BossInfoReq));
  C2LFest_BossFirstOptReq_descriptor_ = file->message_type(123);
  static const int C2LFest_BossFirstOptReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, flag_),
  };
  C2LFest_BossFirstOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LFest_BossFirstOptReq_descriptor_,
      C2LFest_BossFirstOptReq::default_instance_,
      C2LFest_BossFirstOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_BossFirstOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LFest_BossFirstOptReq));
  C2LFest_HuiMengXiYou_GetRewardReq_descriptor_ = file->message_type(124);
  static const int C2LFest_HuiMengXiYou_GetRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYou_GetRewardReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYou_GetRewardReq, id_),
  };
  C2LFest_HuiMengXiYou_GetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LFest_HuiMengXiYou_GetRewardReq_descriptor_,
      C2LFest_HuiMengXiYou_GetRewardReq::default_instance_,
      C2LFest_HuiMengXiYou_GetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYou_GetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYou_GetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LFest_HuiMengXiYou_GetRewardReq));
  L2CFest_HuiMengXiYou_GetRewardRsp_descriptor_ = file->message_type(125);
  static const int L2CFest_HuiMengXiYou_GetRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYou_GetRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYou_GetRewardRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYou_GetRewardRsp, reward_),
  };
  L2CFest_HuiMengXiYou_GetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CFest_HuiMengXiYou_GetRewardRsp_descriptor_,
      L2CFest_HuiMengXiYou_GetRewardRsp::default_instance_,
      L2CFest_HuiMengXiYou_GetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYou_GetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYou_GetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CFest_HuiMengXiYou_GetRewardRsp));
  NotifyFest_HuiMengXiYouRewardStatusChange_descriptor_ = file->message_type(126);
  static const int NotifyFest_HuiMengXiYouRewardStatusChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouRewardStatusChange, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouRewardStatusChange, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouRewardStatusChange, cur_points_),
  };
  NotifyFest_HuiMengXiYouRewardStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouRewardStatusChange_descriptor_,
      NotifyFest_HuiMengXiYouRewardStatusChange::default_instance_,
      NotifyFest_HuiMengXiYouRewardStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouRewardStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouRewardStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouRewardStatusChange));
  XiYouGameInfo_descriptor_ = file->message_type(127);
  static const int XiYouGameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouGameInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouGameInfo, status_),
  };
  XiYouGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XiYouGameInfo_descriptor_,
      XiYouGameInfo::default_instance_,
      XiYouGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XiYouGameInfo));
  NotiftFest_HuiMengXiYouStart_descriptor_ = file->message_type(128);
  static const int NotiftFest_HuiMengXiYouStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouStart, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouStart, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouStart, cur_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouStart, left_time_),
  };
  NotiftFest_HuiMengXiYouStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotiftFest_HuiMengXiYouStart_descriptor_,
      NotiftFest_HuiMengXiYouStart::default_instance_,
      NotiftFest_HuiMengXiYouStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotiftFest_HuiMengXiYouStart));
  NotiftFest_LogicHuiMengXiYouStart_descriptor_ = file->message_type(129);
  static const int NotiftFest_LogicHuiMengXiYouStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_LogicHuiMengXiYouStart, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_LogicHuiMengXiYouStart, start_),
  };
  NotiftFest_LogicHuiMengXiYouStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotiftFest_LogicHuiMengXiYouStart_descriptor_,
      NotiftFest_LogicHuiMengXiYouStart::default_instance_,
      NotiftFest_LogicHuiMengXiYouStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_LogicHuiMengXiYouStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_LogicHuiMengXiYouStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotiftFest_LogicHuiMengXiYouStart));
  NotifyFest_HuiMengXiYouSceneChange_descriptor_ = file->message_type(130);
  static const int NotifyFest_HuiMengXiYouSceneChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouSceneChange, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouSceneChange, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouSceneChange, cur_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouSceneChange, left_time_),
  };
  NotifyFest_HuiMengXiYouSceneChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouSceneChange_descriptor_,
      NotifyFest_HuiMengXiYouSceneChange::default_instance_,
      NotifyFest_HuiMengXiYouSceneChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouSceneChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouSceneChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouSceneChange));
  NotiftFest_HuiMengXiYouGameStart_descriptor_ = file->message_type(131);
  static const int NotiftFest_HuiMengXiYouGameStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameStart, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameStart, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameStart, cur_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameStart, left_time_),
  };
  NotiftFest_HuiMengXiYouGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotiftFest_HuiMengXiYouGameStart_descriptor_,
      NotiftFest_HuiMengXiYouGameStart::default_instance_,
      NotiftFest_HuiMengXiYouGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotiftFest_HuiMengXiYouGameStart));
  NotiftFest_HuiMengXiYouEnd_descriptor_ = file->message_type(132);
  static const int NotiftFest_HuiMengXiYouEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouEnd, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouEnd, points_),
  };
  NotiftFest_HuiMengXiYouEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotiftFest_HuiMengXiYouEnd_descriptor_,
      NotiftFest_HuiMengXiYouEnd::default_instance_,
      NotiftFest_HuiMengXiYouEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotiftFest_HuiMengXiYouEnd));
  NotiftFest_HuiMengXiYouGameInfo_descriptor_ = file->message_type(133);
  static const int NotiftFest_HuiMengXiYouGameInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, task_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, cur_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, points_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, my_cur_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, my_all_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, left_time_),
  };
  NotiftFest_HuiMengXiYouGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotiftFest_HuiMengXiYouGameInfo_descriptor_,
      NotiftFest_HuiMengXiYouGameInfo::default_instance_,
      NotiftFest_HuiMengXiYouGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotiftFest_HuiMengXiYouGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotiftFest_HuiMengXiYouGameInfo));
  NotifyFest_HuiMengXiYouGameEnd_descriptor_ = file->message_type(134);
  static const int NotifyFest_HuiMengXiYouGameEnd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, points_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, my_cur_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, reward_),
  };
  NotifyFest_HuiMengXiYouGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouGameEnd_descriptor_,
      NotifyFest_HuiMengXiYouGameEnd::default_instance_,
      NotifyFest_HuiMengXiYouGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouGameEnd));
  NotifyFest_HuiMengXiYouEnterReq_descriptor_ = file->message_type(135);
  static const int NotifyFest_HuiMengXiYouEnterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterReq, template_id_),
  };
  NotifyFest_HuiMengXiYouEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouEnterReq_descriptor_,
      NotifyFest_HuiMengXiYouEnterReq::default_instance_,
      NotifyFest_HuiMengXiYouEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouEnterReq));
  NotifyFest_HuiMengXiYouEnterRsp_descriptor_ = file->message_type(136);
  static const int NotifyFest_HuiMengXiYouEnterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterRsp, template_id_),
  };
  NotifyFest_HuiMengXiYouEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouEnterRsp_descriptor_,
      NotifyFest_HuiMengXiYouEnterRsp::default_instance_,
      NotifyFest_HuiMengXiYouEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouEnterRsp));
  NotifyFest_HuiMengXiYouEnterGameReq_descriptor_ = file->message_type(137);
  static const int NotifyFest_HuiMengXiYouEnterGameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameReq, template_id_),
  };
  NotifyFest_HuiMengXiYouEnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouEnterGameReq_descriptor_,
      NotifyFest_HuiMengXiYouEnterGameReq::default_instance_,
      NotifyFest_HuiMengXiYouEnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouEnterGameReq));
  NotifyFest_HuiMengXiYouEnterGameRsp_descriptor_ = file->message_type(138);
  static const int NotifyFest_HuiMengXiYouEnterGameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameRsp, template_id_),
  };
  NotifyFest_HuiMengXiYouEnterGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouEnterGameRsp_descriptor_,
      NotifyFest_HuiMengXiYouEnterGameRsp::default_instance_,
      NotifyFest_HuiMengXiYouEnterGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouEnterGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouEnterGameRsp));
  C2LFest_HuiMengXiYouGiveCaiJiReq_descriptor_ = file->message_type(139);
  static const int C2LFest_HuiMengXiYouGiveCaiJiReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYouGiveCaiJiReq, template_id_),
  };
  C2LFest_HuiMengXiYouGiveCaiJiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LFest_HuiMengXiYouGiveCaiJiReq_descriptor_,
      C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance_,
      C2LFest_HuiMengXiYouGiveCaiJiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYouGiveCaiJiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFest_HuiMengXiYouGiveCaiJiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LFest_HuiMengXiYouGiveCaiJiReq));
  L2CFest_HuiMengXiYouGiveCaiJiRsp_descriptor_ = file->message_type(140);
  static const int L2CFest_HuiMengXiYouGiveCaiJiRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYouGiveCaiJiRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYouGiveCaiJiRsp, template_id_),
  };
  L2CFest_HuiMengXiYouGiveCaiJiRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CFest_HuiMengXiYouGiveCaiJiRsp_descriptor_,
      L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance_,
      L2CFest_HuiMengXiYouGiveCaiJiRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYouGiveCaiJiRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFest_HuiMengXiYouGiveCaiJiRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CFest_HuiMengXiYouGiveCaiJiRsp));
  XiYouCaiJiCollectInfo_descriptor_ = file->message_type(141);
  static const int XiYouCaiJiCollectInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectInfo, pos_),
  };
  XiYouCaiJiCollectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XiYouCaiJiCollectInfo_descriptor_,
      XiYouCaiJiCollectInfo::default_instance_,
      XiYouCaiJiCollectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XiYouCaiJiCollectInfo));
  NotifyFest_HuiMengXiYouCollect_descriptor_ = file->message_type(142);
  static const int NotifyFest_HuiMengXiYouCollect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouCollect, collects_),
  };
  NotifyFest_HuiMengXiYouCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouCollect_descriptor_,
      NotifyFest_HuiMengXiYouCollect::default_instance_,
      NotifyFest_HuiMengXiYouCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouCollect));
  XiYouCaiJiCollectMonsterInfo_descriptor_ = file->message_type(143);
  static const int XiYouCaiJiCollectMonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectMonsterInfo, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectMonsterInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectMonsterInfo, item_id_),
  };
  XiYouCaiJiCollectMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XiYouCaiJiCollectMonsterInfo_descriptor_,
      XiYouCaiJiCollectMonsterInfo::default_instance_,
      XiYouCaiJiCollectMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XiYouCaiJiCollectMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XiYouCaiJiCollectMonsterInfo));
  NotifyFest_HuiMengXiYouCollectSuccess_descriptor_ = file->message_type(144);
  static const int NotifyFest_HuiMengXiYouCollectSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouCollectSuccess, monster_info_),
  };
  NotifyFest_HuiMengXiYouCollectSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYouCollectSuccess_descriptor_,
      NotifyFest_HuiMengXiYouCollectSuccess::default_instance_,
      NotifyFest_HuiMengXiYouCollectSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouCollectSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYouCollectSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYouCollectSuccess));
  NotifyFest_HuiMengXiYou_RoubaoziNotify_descriptor_ = file->message_type(145);
  static const int NotifyFest_HuiMengXiYou_RoubaoziNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, cur_fresh_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, all_fresh_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, npc_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, npc_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, npc_status_),
  };
  NotifyFest_HuiMengXiYou_RoubaoziNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFest_HuiMengXiYou_RoubaoziNotify_descriptor_,
      NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance_,
      NotifyFest_HuiMengXiYou_RoubaoziNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFest_HuiMengXiYou_RoubaoziNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFest_HuiMengXiYou_RoubaoziNotify));
  FMarryRankInfo_descriptor_ = file->message_type(146);
  static const int FMarryRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankInfo, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankInfo, score_),
  };
  FMarryRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRankInfo_descriptor_,
      FMarryRankInfo::default_instance_,
      FMarryRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRankInfo));
  FMarryExpressRankInfo_descriptor_ = file->message_type(147);
  static const int FMarryExpressRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRankInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRankInfo, score_),
  };
  FMarryExpressRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryExpressRankInfo_descriptor_,
      FMarryExpressRankInfo::default_instance_,
      FMarryExpressRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryExpressRankInfo));
  FMarryRankReq_descriptor_ = file->message_type(148);
  static const int FMarryRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankReq, template_id_),
  };
  FMarryRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRankReq_descriptor_,
      FMarryRankReq::default_instance_,
      FMarryRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRankReq));
  FMarryRankRsp_descriptor_ = file->message_type(149);
  static const int FMarryRankRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankRsp, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankRsp, my_),
  };
  FMarryRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRankRsp_descriptor_,
      FMarryRankRsp::default_instance_,
      FMarryRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRankRsp));
  FMarryExpressReq_descriptor_ = file->message_type(150);
  static const int FMarryExpressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressReq, template_id_),
  };
  FMarryExpressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryExpressReq_descriptor_,
      FMarryExpressReq::default_instance_,
      FMarryExpressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryExpressReq));
  FMarryExpressRsp_descriptor_ = file->message_type(151);
  static const int FMarryExpressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRsp, sends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRsp, recvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRsp, logs_),
  };
  FMarryExpressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryExpressRsp_descriptor_,
      FMarryExpressRsp::default_instance_,
      FMarryExpressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryExpressRsp));
  FMarryRoleReq_descriptor_ = file->message_type(152);
  static const int FMarryRoleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleReq, template_id_),
  };
  FMarryRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRoleReq_descriptor_,
      FMarryRoleReq::default_instance_,
      FMarryRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRoleReq));
  FMarryRoleRsp_descriptor_ = file->message_type(153);
  static const int FMarryRoleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRsp, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRsp, process_ids_),
  };
  FMarryRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRoleRsp_descriptor_,
      FMarryRoleRsp::default_instance_,
      FMarryRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRoleRsp));
  FMarryRoleRecvReq_descriptor_ = file->message_type(154);
  static const int FMarryRoleRecvReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvReq, id_),
  };
  FMarryRoleRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRoleRecvReq_descriptor_,
      FMarryRoleRecvReq::default_instance_,
      FMarryRoleRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRoleRecvReq));
  FMarryRoleRecvRsp_descriptor_ = file->message_type(155);
  static const int FMarryRoleRecvRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvRsp, id_),
  };
  FMarryRoleRecvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRoleRecvRsp_descriptor_,
      FMarryRoleRecvRsp::default_instance_,
      FMarryRoleRecvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleRecvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRoleRecvRsp));
  FMarryRecord_descriptor_ = file->message_type(156);
  static const int FMarryRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRecord, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRecord, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRecord, time_),
  };
  FMarryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRecord_descriptor_,
      FMarryRecord::default_instance_,
      FMarryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRecord));
  FMarryExpress_descriptor_ = file->message_type(157);
  static const int FMarryExpress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpress, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpress, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpress, val_),
  };
  FMarryExpress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryExpress_descriptor_,
      FMarryExpress::default_instance_,
      FMarryExpress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryExpress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryExpress));
  FMarryDBEntry_descriptor_ = file->message_type(158);
  static const int FMarryDBEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, sends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, recvs_),
  };
  FMarryDBEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryDBEntry_descriptor_,
      FMarryDBEntry::default_instance_,
      FMarryDBEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDBEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryDBEntry));
  FMarryDB_descriptor_ = file->message_type(159);
  static const int FMarryDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDB, entrys_),
  };
  FMarryDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryDB_descriptor_,
      FMarryDB::default_instance_,
      FMarryDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryDB));
  Fest_XiYouGlobalDBInfo_descriptor_ = file->message_type(160);
  static const int Fest_XiYouGlobalDBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBInfo, state_),
  };
  Fest_XiYouGlobalDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouGlobalDBInfo_descriptor_,
      Fest_XiYouGlobalDBInfo::default_instance_,
      Fest_XiYouGlobalDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouGlobalDBInfo));
  C2LFMarrySynScoreReq_descriptor_ = file->message_type(161);
  static const int C2LFMarrySynScoreReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFMarrySynScoreReq, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFMarrySynScoreReq, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFMarrySynScoreReq, cid_),
  };
  C2LFMarrySynScoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LFMarrySynScoreReq_descriptor_,
      C2LFMarrySynScoreReq::default_instance_,
      C2LFMarrySynScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFMarrySynScoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LFMarrySynScoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LFMarrySynScoreReq));
  L2CFMarrySynScoreRsp_descriptor_ = file->message_type(162);
  static const int L2CFMarrySynScoreRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFMarrySynScoreRsp, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFMarrySynScoreRsp, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFMarrySynScoreRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFMarrySynScoreRsp, score_),
  };
  L2CFMarrySynScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CFMarrySynScoreRsp_descriptor_,
      L2CFMarrySynScoreRsp::default_instance_,
      L2CFMarrySynScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFMarrySynScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CFMarrySynScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CFMarrySynScoreRsp));
  Fest_XiYouGlobalDBEntry_descriptor_ = file->message_type(163);
  static const int Fest_XiYouGlobalDBEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, readyid_),
  };
  Fest_XiYouGlobalDBEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouGlobalDBEntry_descriptor_,
      Fest_XiYouGlobalDBEntry::default_instance_,
      Fest_XiYouGlobalDBEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDBEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouGlobalDBEntry));
  Fest_XiYouGlobalDB_descriptor_ = file->message_type(164);
  static const int Fest_XiYouGlobalDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDB, entrys_),
  };
  Fest_XiYouGlobalDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouGlobalDB_descriptor_,
      Fest_XiYouGlobalDB::default_instance_,
      Fest_XiYouGlobalDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouGlobalDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouGlobalDB));
  Fest_XiYouSyncNotify_descriptor_ = file->message_type(165);
  static const int Fest_XiYouSyncNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncNotify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncNotify, cur_state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncNotify, cur_state_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncNotify, cur_state_time_),
  };
  Fest_XiYouSyncNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouSyncNotify_descriptor_,
      Fest_XiYouSyncNotify::default_instance_,
      Fest_XiYouSyncNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouSyncNotify));
  Fest_XiYouSyncLogic_descriptor_ = file->message_type(166);
  static const int Fest_XiYouSyncLogic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncLogic, cur_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncLogic, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncLogic, logic_id_),
  };
  Fest_XiYouSyncLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouSyncLogic_descriptor_,
      Fest_XiYouSyncLogic::default_instance_,
      Fest_XiYouSyncLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouSyncLogic));
  Fest_XiYouSyncFinish_descriptor_ = file->message_type(167);
  static const int Fest_XiYouSyncFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncFinish, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncFinish, ready_id_),
  };
  Fest_XiYouSyncFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouSyncFinish_descriptor_,
      Fest_XiYouSyncFinish::default_instance_,
      Fest_XiYouSyncFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouSyncFinish));
  Fest_XiYouSyncForceClose_descriptor_ = file->message_type(168);
  static const int Fest_XiYouSyncForceClose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncForceClose, ready_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncForceClose, cur_state_),
  };
  Fest_XiYouSyncForceClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_XiYouSyncForceClose_descriptor_,
      Fest_XiYouSyncForceClose::default_instance_,
      Fest_XiYouSyncForceClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncForceClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_XiYouSyncForceClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_XiYouSyncForceClose));
  Fest_DayTotalRechargeFetchReq_descriptor_ = file->message_type(169);
  static const int Fest_DayTotalRechargeFetchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchReq, id_),
  };
  Fest_DayTotalRechargeFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DayTotalRechargeFetchReq_descriptor_,
      Fest_DayTotalRechargeFetchReq::default_instance_,
      Fest_DayTotalRechargeFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DayTotalRechargeFetchReq));
  Fest_DayTotalRechargeFetchRsp_descriptor_ = file->message_type(170);
  static const int Fest_DayTotalRechargeFetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchRsp, ret_),
  };
  Fest_DayTotalRechargeFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DayTotalRechargeFetchRsp_descriptor_,
      Fest_DayTotalRechargeFetchRsp::default_instance_,
      Fest_DayTotalRechargeFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DayTotalRechargeFetchRsp));
  Fest_DayTotalRechargeNotify_descriptor_ = file->message_type(171);
  static const int Fest_DayTotalRechargeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeNotify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeNotify, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeNotify, fetch_lst_),
  };
  Fest_DayTotalRechargeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_DayTotalRechargeNotify_descriptor_,
      Fest_DayTotalRechargeNotify::default_instance_,
      Fest_DayTotalRechargeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_DayTotalRechargeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_DayTotalRechargeNotify));
  Fest_LoginRewardFetchReq_descriptor_ = file->message_type(172);
  static const int Fest_LoginRewardFetchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchReq, day_),
  };
  Fest_LoginRewardFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_LoginRewardFetchReq_descriptor_,
      Fest_LoginRewardFetchReq::default_instance_,
      Fest_LoginRewardFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_LoginRewardFetchReq));
  Fest_LoginRewardFetchRsp_descriptor_ = file->message_type(173);
  static const int Fest_LoginRewardFetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchRsp, ret_),
  };
  Fest_LoginRewardFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_LoginRewardFetchRsp_descriptor_,
      Fest_LoginRewardFetchRsp::default_instance_,
      Fest_LoginRewardFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_LoginRewardFetchRsp));
  Fest_LoginRewardNotify_descriptor_ = file->message_type(174);
  static const int Fest_LoginRewardNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardNotify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardNotify, fetch_),
  };
  Fest_LoginRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_LoginRewardNotify_descriptor_,
      Fest_LoginRewardNotify::default_instance_,
      Fest_LoginRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_LoginRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_LoginRewardNotify));
  Fest_TotalRechargeFetchReq_descriptor_ = file->message_type(175);
  static const int Fest_TotalRechargeFetchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchReq, id_),
  };
  Fest_TotalRechargeFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_TotalRechargeFetchReq_descriptor_,
      Fest_TotalRechargeFetchReq::default_instance_,
      Fest_TotalRechargeFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_TotalRechargeFetchReq));
  Fest_TotalRechargeFetchRsp_descriptor_ = file->message_type(176);
  static const int Fest_TotalRechargeFetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchRsp, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchRsp, ret_),
  };
  Fest_TotalRechargeFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_TotalRechargeFetchRsp_descriptor_,
      Fest_TotalRechargeFetchRsp::default_instance_,
      Fest_TotalRechargeFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_TotalRechargeFetchRsp));
  Fest_TotalRechargeNotify_descriptor_ = file->message_type(177);
  static const int Fest_TotalRechargeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeNotify, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeNotify, fetch_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeNotify, total_recharge_),
  };
  Fest_TotalRechargeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fest_TotalRechargeNotify_descriptor_,
      Fest_TotalRechargeNotify::default_instance_,
      Fest_TotalRechargeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fest_TotalRechargeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fest_TotalRechargeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Fest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestSimpleProto_descriptor_, &FestSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestSimpleListProto_descriptor_, &FestSimpleListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRedPointProto_descriptor_, &FestRedPointProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRedPointListProto_descriptor_, &FestRedPointListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestShopProto_descriptor_, &FestShopProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestShopDetailProto_descriptor_, &FestShopDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestSignDetailProto_descriptor_, &FestSignDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDailyTotalRechargeDetailProto_descriptor_, &FestDailyTotalRechargeDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestGoldStoreProto_descriptor_, &FestGoldStoreProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggLogProto_descriptor_, &FestDigEggLogProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggTaskProto_descriptor_, &FestDigEggTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggProto_descriptor_, &FestDigEggProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleProto_descriptor_, &FestCandleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandRankProto_descriptor_, &FestCandRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRTurnableRechargeProto_descriptor_, &FestRTurnableRechargeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestTurnableProto_descriptor_, &FestTurnableProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateProto_descriptor_, &FestDonateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestOnlineProto_descriptor_, &FestOnlineProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCollectWordProto_descriptor_, &FestCollectWordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestBossDetailProto_descriptor_, &FestBossDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestMarryDetail_descriptor_, &FestMarryDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDayTotalRechargeProto_descriptor_, &FestDayTotalRechargeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestLoginProto_descriptor_, &FestLoginProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestTotalRechargeProto_descriptor_, &FestTotalRechargeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDetailProto_descriptor_, &FestDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_SimpleListRsp_descriptor_, &Fest_SimpleListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_SimpleInfoNotify_descriptor_, &Fest_SimpleInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DetailReq_descriptor_, &Fest_DetailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DetailRsp_descriptor_, &Fest_DetailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DetailUpdateRsp_descriptor_, &Fest_DetailUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_RedPointInfoRsp_descriptor_, &Fest_RedPointInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_RedPointInfoNotify_descriptor_, &Fest_RedPointInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_ShopBuyReq_descriptor_, &Fest_ShopBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_ShopBuyRsp_descriptor_, &Fest_ShopBuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_GetDailyRechargeRewardReq_descriptor_, &Fest_GetDailyRechargeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DailyRechargeStatusNotify_descriptor_, &Fest_DailyRechargeStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRTurnableRechargeTurnableReq_descriptor_, &FestRTurnableRechargeTurnableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRTurnableRechargeTurnableRsp_descriptor_, &FestRTurnableRechargeTurnableRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_SignReq_descriptor_, &Fest_SignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_SignRsp_descriptor_, &Fest_SignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_GoldStoreUpateBuyRsp_descriptor_, &Fest_GoldStoreUpateBuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggReq_descriptor_, &Fest_DigEggReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggRsp_descriptor_, &Fest_DigEggRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggRestReq_descriptor_, &Fest_DigEggRestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggRestRsp_descriptor_, &Fest_DigEggRestRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggLogReq_descriptor_, &Fest_DigEggLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggLogRsp_descriptor_, &Fest_DigEggLogRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggTaskFetchReq_descriptor_, &Fest_DigEggTaskFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggTaskFetchRsp_descriptor_, &Fest_DigEggTaskFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DigEggTaskUpdateRsp_descriptor_, &Fest_DigEggTaskUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_RTuranbleLogReq_descriptor_, &Fest_RTuranbleLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_RTuranbleLogRsp_descriptor_, &Fest_RTuranbleLogRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableTurnTableReq_descriptor_, &TurntableTurnTableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableTurnTableRsp_descriptor_, &TurntableTurnTableRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableRewardReq_descriptor_, &TurntableRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableRewardRsp_descriptor_, &TurntableRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableStatusChange_descriptor_, &TurntableStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetServerNumReq_descriptor_, &FestDonateGetServerNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetServerNumRsp_descriptor_, &FestDonateGetServerNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateDonateReq_descriptor_, &FestDonateDonateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateDonateRsp_descriptor_, &FestDonateDonateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetSingleRewardReq_descriptor_, &FestDonateGetSingleRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetSingleRewardRsp_descriptor_, &FestDonateGetSingleRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetServerRewardReq_descriptor_, &FestDonateGetServerRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetServerRewardRsp_descriptor_, &FestDonateGetServerRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetTaskRewardReq_descriptor_, &FestDonateGetTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateGetTaskRewardRsp_descriptor_, &FestDonateGetTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateTaskTtatusChange_descriptor_, &FestDonateTaskTtatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestOnlineGetRewardReq_descriptor_, &FestOnlineGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestOnlineGetRewardRsp_descriptor_, &FestOnlineGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCollectWorldExchargeReq_descriptor_, &FestCollectWorldExchargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCollectWorldExchargeRsp_descriptor_, &FestCollectWorldExchargeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeChouJiangReq_descriptor_, &FestDrawPizeChouJiangReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeChouJiangRsp_descriptor_, &FestDrawPizeChouJiangRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeGetRewardReq_descriptor_, &FestDrawPizeGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeGetRewardRsp_descriptor_, &FestDrawPizeGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeLogReq_descriptor_, &FestDrawPizeLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeLogRsp_descriptor_, &FestDrawPizeLogRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeGetServerNumReq_descriptor_, &FestDrawPizeGetServerNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeGetServerNumRsp_descriptor_, &FestDrawPizeGetServerNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetRewardReq_descriptor_, &FestServerRankGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetRewardRsp_descriptor_, &FestServerRankGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankRewardStatusChange_descriptor_, &FestServerRankRewardStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetMyRankReq_descriptor_, &FestServerRankGetMyRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetMyRankRsp_descriptor_, &FestServerRankGetMyRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetAllRankReq_descriptor_, &FestServerRankGetAllRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetAllRankRsp_descriptor_, &FestServerRankGetAllRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankBuyGiftReq_descriptor_, &FestServerRankBuyGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankBuyGiftRsp_descriptor_, &FestServerRankBuyGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetRedPointRewardReq_descriptor_, &FestServerRankGetRedPointRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankGetRedPointRewardRsp_descriptor_, &FestServerRankGetRedPointRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestServerRankStatusChange_descriptor_, &FestServerRankStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleFetchReq_descriptor_, &FestCandleFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleFetchRsp_descriptor_, &FestCandleFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleFetchLstRsp_descriptor_, &FestCandleFetchLstRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleRankReq_descriptor_, &FestCandleRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleRankRsp_descriptor_, &FestCandleRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_DigEgg_OpRsp_descriptor_, &Fest_L2C_DigEgg_OpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_LogReq_descriptor_, &Fest_L2C_LogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_RTurnable_OpRsp_descriptor_, &Fest_L2C_RTurnable_OpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_RTurnable_LogReq_descriptor_, &Fest_L2C_RTurnable_LogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_DonateOperate_Notify_descriptor_, &Fest_L2C_DonateOperate_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_C2L_DonateGetServerRewardReq_descriptor_, &Fest_C2L_DonateGetServerRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_DrawPizeLogReq_descriptor_, &Fest_L2C_DrawPizeLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2C_DrawPizeChouJiangGetServerNumReq_descriptor_, &Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_C2L_DrawPizeChouJiangGetServerNumRsp_descriptor_, &Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_C2L_ServerRankSyncReq_descriptor_, &Fest_C2L_ServerRankSyncReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_C2L_ServerRankSyncRsp_descriptor_, &Fest_C2L_ServerRankSyncRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_S2C_CandleRankReward_descriptor_, &Fest_S2C_CandleRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2S_CandleAddHarm_descriptor_, &Fest_L2S_CandleAddHarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_S2L_CandleTotalHarmRsp_descriptor_, &Fest_S2L_CandleTotalHarmRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_L2S_CandleRankReq_descriptor_, &Fest_L2S_CandleRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BossFirstOptReq_descriptor_, &Fest_BossFirstOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BossFirstOptRsp_descriptor_, &Fest_BossFirstOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BossInfoReq_descriptor_, &Fest_BossInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestBossInfo_descriptor_, &FestBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BossInfoRsp_descriptor_, &Fest_BossInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BFGlobalDBKill_descriptor_, &Fest_BFGlobalDBKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BFGlobalDBEntry_descriptor_, &Fest_BFGlobalDBEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_BFGlobalDB_descriptor_, &Fest_BFGlobalDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CFest_BossKFSimpleReq_descriptor_, &L2CFest_BossKFSimpleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LFest_BossKFNotify_descriptor_, &C2LFest_BossKFNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LFest_BossInfoReq_descriptor_, &C2LFest_BossInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LFest_BossFirstOptReq_descriptor_, &C2LFest_BossFirstOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LFest_HuiMengXiYou_GetRewardReq_descriptor_, &C2LFest_HuiMengXiYou_GetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CFest_HuiMengXiYou_GetRewardRsp_descriptor_, &L2CFest_HuiMengXiYou_GetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouRewardStatusChange_descriptor_, &NotifyFest_HuiMengXiYouRewardStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XiYouGameInfo_descriptor_, &XiYouGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotiftFest_HuiMengXiYouStart_descriptor_, &NotiftFest_HuiMengXiYouStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotiftFest_LogicHuiMengXiYouStart_descriptor_, &NotiftFest_LogicHuiMengXiYouStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouSceneChange_descriptor_, &NotifyFest_HuiMengXiYouSceneChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotiftFest_HuiMengXiYouGameStart_descriptor_, &NotiftFest_HuiMengXiYouGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotiftFest_HuiMengXiYouEnd_descriptor_, &NotiftFest_HuiMengXiYouEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotiftFest_HuiMengXiYouGameInfo_descriptor_, &NotiftFest_HuiMengXiYouGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouGameEnd_descriptor_, &NotifyFest_HuiMengXiYouGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouEnterReq_descriptor_, &NotifyFest_HuiMengXiYouEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouEnterRsp_descriptor_, &NotifyFest_HuiMengXiYouEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouEnterGameReq_descriptor_, &NotifyFest_HuiMengXiYouEnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouEnterGameRsp_descriptor_, &NotifyFest_HuiMengXiYouEnterGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LFest_HuiMengXiYouGiveCaiJiReq_descriptor_, &C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CFest_HuiMengXiYouGiveCaiJiRsp_descriptor_, &L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XiYouCaiJiCollectInfo_descriptor_, &XiYouCaiJiCollectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouCollect_descriptor_, &NotifyFest_HuiMengXiYouCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XiYouCaiJiCollectMonsterInfo_descriptor_, &XiYouCaiJiCollectMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYouCollectSuccess_descriptor_, &NotifyFest_HuiMengXiYouCollectSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFest_HuiMengXiYou_RoubaoziNotify_descriptor_, &NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRankInfo_descriptor_, &FMarryRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryExpressRankInfo_descriptor_, &FMarryExpressRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRankReq_descriptor_, &FMarryRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRankRsp_descriptor_, &FMarryRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryExpressReq_descriptor_, &FMarryExpressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryExpressRsp_descriptor_, &FMarryExpressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRoleReq_descriptor_, &FMarryRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRoleRsp_descriptor_, &FMarryRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRoleRecvReq_descriptor_, &FMarryRoleRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRoleRecvRsp_descriptor_, &FMarryRoleRecvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRecord_descriptor_, &FMarryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryExpress_descriptor_, &FMarryExpress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryDBEntry_descriptor_, &FMarryDBEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryDB_descriptor_, &FMarryDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouGlobalDBInfo_descriptor_, &Fest_XiYouGlobalDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LFMarrySynScoreReq_descriptor_, &C2LFMarrySynScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CFMarrySynScoreRsp_descriptor_, &L2CFMarrySynScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouGlobalDBEntry_descriptor_, &Fest_XiYouGlobalDBEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouGlobalDB_descriptor_, &Fest_XiYouGlobalDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouSyncNotify_descriptor_, &Fest_XiYouSyncNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouSyncLogic_descriptor_, &Fest_XiYouSyncLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouSyncFinish_descriptor_, &Fest_XiYouSyncFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_XiYouSyncForceClose_descriptor_, &Fest_XiYouSyncForceClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DayTotalRechargeFetchReq_descriptor_, &Fest_DayTotalRechargeFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DayTotalRechargeFetchRsp_descriptor_, &Fest_DayTotalRechargeFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_DayTotalRechargeNotify_descriptor_, &Fest_DayTotalRechargeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_LoginRewardFetchReq_descriptor_, &Fest_LoginRewardFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_LoginRewardFetchRsp_descriptor_, &Fest_LoginRewardFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_LoginRewardNotify_descriptor_, &Fest_LoginRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_TotalRechargeFetchReq_descriptor_, &Fest_TotalRechargeFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_TotalRechargeFetchRsp_descriptor_, &Fest_TotalRechargeFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fest_TotalRechargeNotify_descriptor_, &Fest_TotalRechargeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Fest_2eproto() {
  delete FestSimpleProto::default_instance_;
  delete FestSimpleProto_reflection_;
  delete FestSimpleListProto::default_instance_;
  delete FestSimpleListProto_reflection_;
  delete FestRedPointProto::default_instance_;
  delete FestRedPointProto_reflection_;
  delete FestRedPointListProto::default_instance_;
  delete FestRedPointListProto_reflection_;
  delete FestShopProto::default_instance_;
  delete FestShopProto_reflection_;
  delete FestShopDetailProto::default_instance_;
  delete FestShopDetailProto_reflection_;
  delete FestSignDetailProto::default_instance_;
  delete FestSignDetailProto_reflection_;
  delete FestDailyTotalRechargeDetailProto::default_instance_;
  delete FestDailyTotalRechargeDetailProto_reflection_;
  delete FestGoldStoreProto::default_instance_;
  delete FestGoldStoreProto_reflection_;
  delete FestDigEggLogProto::default_instance_;
  delete FestDigEggLogProto_reflection_;
  delete FestDigEggTaskProto::default_instance_;
  delete FestDigEggTaskProto_reflection_;
  delete FestDigEggProto::default_instance_;
  delete FestDigEggProto_reflection_;
  delete FestCandleProto::default_instance_;
  delete FestCandleProto_reflection_;
  delete FestCandRankProto::default_instance_;
  delete FestCandRankProto_reflection_;
  delete FestRTurnableRechargeProto::default_instance_;
  delete FestRTurnableRechargeProto_reflection_;
  delete FestTurnableProto::default_instance_;
  delete FestTurnableProto_reflection_;
  delete FestDonateProto::default_instance_;
  delete FestDonateProto_reflection_;
  delete FestOnlineProto::default_instance_;
  delete FestOnlineProto_reflection_;
  delete FestCollectWordProto::default_instance_;
  delete FestCollectWordProto_reflection_;
  delete FestBossDetailProto::default_instance_;
  delete FestBossDetailProto_reflection_;
  delete FestMarryDetail::default_instance_;
  delete FestMarryDetail_reflection_;
  delete FestDayTotalRechargeProto::default_instance_;
  delete FestDayTotalRechargeProto_reflection_;
  delete FestLoginProto::default_instance_;
  delete FestLoginProto_reflection_;
  delete FestTotalRechargeProto::default_instance_;
  delete FestTotalRechargeProto_reflection_;
  delete FestDetailProto::default_instance_;
  delete FestDetailProto_reflection_;
  delete Fest_SimpleListRsp::default_instance_;
  delete Fest_SimpleListRsp_reflection_;
  delete Fest_SimpleInfoNotify::default_instance_;
  delete Fest_SimpleInfoNotify_reflection_;
  delete Fest_DetailReq::default_instance_;
  delete Fest_DetailReq_reflection_;
  delete Fest_DetailRsp::default_instance_;
  delete Fest_DetailRsp_reflection_;
  delete Fest_DetailUpdateRsp::default_instance_;
  delete Fest_DetailUpdateRsp_reflection_;
  delete Fest_RedPointInfoRsp::default_instance_;
  delete Fest_RedPointInfoRsp_reflection_;
  delete Fest_RedPointInfoNotify::default_instance_;
  delete Fest_RedPointInfoNotify_reflection_;
  delete Fest_ShopBuyReq::default_instance_;
  delete Fest_ShopBuyReq_reflection_;
  delete Fest_ShopBuyRsp::default_instance_;
  delete Fest_ShopBuyRsp_reflection_;
  delete Fest_GetDailyRechargeRewardReq::default_instance_;
  delete Fest_GetDailyRechargeRewardReq_reflection_;
  delete Fest_DailyRechargeStatusNotify::default_instance_;
  delete Fest_DailyRechargeStatusNotify_reflection_;
  delete FestRTurnableRechargeTurnableReq::default_instance_;
  delete FestRTurnableRechargeTurnableReq_reflection_;
  delete FestRTurnableRechargeTurnableRsp::default_instance_;
  delete FestRTurnableRechargeTurnableRsp_reflection_;
  delete Fest_SignReq::default_instance_;
  delete Fest_SignReq_reflection_;
  delete Fest_SignRsp::default_instance_;
  delete Fest_SignRsp_reflection_;
  delete Fest_GoldStoreUpateBuyRsp::default_instance_;
  delete Fest_GoldStoreUpateBuyRsp_reflection_;
  delete Fest_DigEggReq::default_instance_;
  delete Fest_DigEggReq_reflection_;
  delete Fest_DigEggRsp::default_instance_;
  delete Fest_DigEggRsp_reflection_;
  delete Fest_DigEggRestReq::default_instance_;
  delete Fest_DigEggRestReq_reflection_;
  delete Fest_DigEggRestRsp::default_instance_;
  delete Fest_DigEggRestRsp_reflection_;
  delete Fest_DigEggLogReq::default_instance_;
  delete Fest_DigEggLogReq_reflection_;
  delete Fest_DigEggLogRsp::default_instance_;
  delete Fest_DigEggLogRsp_reflection_;
  delete Fest_DigEggTaskFetchReq::default_instance_;
  delete Fest_DigEggTaskFetchReq_reflection_;
  delete Fest_DigEggTaskFetchRsp::default_instance_;
  delete Fest_DigEggTaskFetchRsp_reflection_;
  delete Fest_DigEggTaskUpdateRsp::default_instance_;
  delete Fest_DigEggTaskUpdateRsp_reflection_;
  delete Fest_RTuranbleLogReq::default_instance_;
  delete Fest_RTuranbleLogReq_reflection_;
  delete Fest_RTuranbleLogRsp::default_instance_;
  delete Fest_RTuranbleLogRsp_reflection_;
  delete TurntableTurnTableReq::default_instance_;
  delete TurntableTurnTableReq_reflection_;
  delete TurntableTurnTableRsp::default_instance_;
  delete TurntableTurnTableRsp_reflection_;
  delete TurntableRewardReq::default_instance_;
  delete TurntableRewardReq_reflection_;
  delete TurntableRewardRsp::default_instance_;
  delete TurntableRewardRsp_reflection_;
  delete TurntableStatusChange::default_instance_;
  delete TurntableStatusChange_reflection_;
  delete FestDonateGetServerNumReq::default_instance_;
  delete FestDonateGetServerNumReq_reflection_;
  delete FestDonateGetServerNumRsp::default_instance_;
  delete FestDonateGetServerNumRsp_reflection_;
  delete FestDonateDonateReq::default_instance_;
  delete FestDonateDonateReq_reflection_;
  delete FestDonateDonateRsp::default_instance_;
  delete FestDonateDonateRsp_reflection_;
  delete FestDonateGetSingleRewardReq::default_instance_;
  delete FestDonateGetSingleRewardReq_reflection_;
  delete FestDonateGetSingleRewardRsp::default_instance_;
  delete FestDonateGetSingleRewardRsp_reflection_;
  delete FestDonateGetServerRewardReq::default_instance_;
  delete FestDonateGetServerRewardReq_reflection_;
  delete FestDonateGetServerRewardRsp::default_instance_;
  delete FestDonateGetServerRewardRsp_reflection_;
  delete FestDonateGetTaskRewardReq::default_instance_;
  delete FestDonateGetTaskRewardReq_reflection_;
  delete FestDonateGetTaskRewardRsp::default_instance_;
  delete FestDonateGetTaskRewardRsp_reflection_;
  delete FestDonateTaskTtatusChange::default_instance_;
  delete FestDonateTaskTtatusChange_reflection_;
  delete FestOnlineGetRewardReq::default_instance_;
  delete FestOnlineGetRewardReq_reflection_;
  delete FestOnlineGetRewardRsp::default_instance_;
  delete FestOnlineGetRewardRsp_reflection_;
  delete FestCollectWorldExchargeReq::default_instance_;
  delete FestCollectWorldExchargeReq_reflection_;
  delete FestCollectWorldExchargeRsp::default_instance_;
  delete FestCollectWorldExchargeRsp_reflection_;
  delete FestDrawPizeChouJiangReq::default_instance_;
  delete FestDrawPizeChouJiangReq_reflection_;
  delete FestDrawPizeChouJiangRsp::default_instance_;
  delete FestDrawPizeChouJiangRsp_reflection_;
  delete FestDrawPizeGetRewardReq::default_instance_;
  delete FestDrawPizeGetRewardReq_reflection_;
  delete FestDrawPizeGetRewardRsp::default_instance_;
  delete FestDrawPizeGetRewardRsp_reflection_;
  delete FestDrawPizeLogReq::default_instance_;
  delete FestDrawPizeLogReq_reflection_;
  delete FestDrawPizeLogRsp::default_instance_;
  delete FestDrawPizeLogRsp_reflection_;
  delete FestDrawPizeGetServerNumReq::default_instance_;
  delete FestDrawPizeGetServerNumReq_reflection_;
  delete FestDrawPizeGetServerNumRsp::default_instance_;
  delete FestDrawPizeGetServerNumRsp_reflection_;
  delete FestServerRankGetRewardReq::default_instance_;
  delete FestServerRankGetRewardReq_reflection_;
  delete FestServerRankGetRewardRsp::default_instance_;
  delete FestServerRankGetRewardRsp_reflection_;
  delete FestServerRankRewardStatusChange::default_instance_;
  delete FestServerRankRewardStatusChange_reflection_;
  delete FestServerRankGetMyRankReq::default_instance_;
  delete FestServerRankGetMyRankReq_reflection_;
  delete FestServerRankGetMyRankRsp::default_instance_;
  delete FestServerRankGetMyRankRsp_reflection_;
  delete FestServerRankGetAllRankReq::default_instance_;
  delete FestServerRankGetAllRankReq_reflection_;
  delete FestServerRankGetAllRankRsp::default_instance_;
  delete FestServerRankGetAllRankRsp_reflection_;
  delete FestServerRankBuyGiftReq::default_instance_;
  delete FestServerRankBuyGiftReq_reflection_;
  delete FestServerRankBuyGiftRsp::default_instance_;
  delete FestServerRankBuyGiftRsp_reflection_;
  delete FestServerRankGetRedPointRewardReq::default_instance_;
  delete FestServerRankGetRedPointRewardReq_reflection_;
  delete FestServerRankGetRedPointRewardRsp::default_instance_;
  delete FestServerRankGetRedPointRewardRsp_reflection_;
  delete FestServerRankStatusChange::default_instance_;
  delete FestServerRankStatusChange_reflection_;
  delete FestCandleFetchReq::default_instance_;
  delete FestCandleFetchReq_reflection_;
  delete FestCandleFetchRsp::default_instance_;
  delete FestCandleFetchRsp_reflection_;
  delete FestCandleFetchLstRsp::default_instance_;
  delete FestCandleFetchLstRsp_reflection_;
  delete FestCandleRankReq::default_instance_;
  delete FestCandleRankReq_reflection_;
  delete FestCandleRankRsp::default_instance_;
  delete FestCandleRankRsp_reflection_;
  delete Fest_L2C_DigEgg_OpRsp::default_instance_;
  delete Fest_L2C_DigEgg_OpRsp_reflection_;
  delete Fest_L2C_LogReq::default_instance_;
  delete Fest_L2C_LogReq_reflection_;
  delete Fest_L2C_RTurnable_OpRsp::default_instance_;
  delete Fest_L2C_RTurnable_OpRsp_reflection_;
  delete Fest_L2C_RTurnable_LogReq::default_instance_;
  delete Fest_L2C_RTurnable_LogReq_reflection_;
  delete Fest_L2C_DonateOperate_Notify::default_instance_;
  delete Fest_L2C_DonateOperate_Notify_reflection_;
  delete Fest_C2L_DonateGetServerRewardReq::default_instance_;
  delete Fest_C2L_DonateGetServerRewardReq_reflection_;
  delete Fest_L2C_DrawPizeLogReq::default_instance_;
  delete Fest_L2C_DrawPizeLogReq_reflection_;
  delete Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance_;
  delete Fest_L2C_DrawPizeChouJiangGetServerNumReq_reflection_;
  delete Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance_;
  delete Fest_C2L_DrawPizeChouJiangGetServerNumRsp_reflection_;
  delete Fest_C2L_ServerRankSyncReq::default_instance_;
  delete Fest_C2L_ServerRankSyncReq_reflection_;
  delete Fest_C2L_ServerRankSyncRsp::default_instance_;
  delete Fest_C2L_ServerRankSyncRsp_reflection_;
  delete Fest_S2C_CandleRankReward::default_instance_;
  delete Fest_S2C_CandleRankReward_reflection_;
  delete Fest_L2S_CandleAddHarm::default_instance_;
  delete Fest_L2S_CandleAddHarm_reflection_;
  delete Fest_S2L_CandleTotalHarmRsp::default_instance_;
  delete Fest_S2L_CandleTotalHarmRsp_reflection_;
  delete Fest_L2S_CandleRankReq::default_instance_;
  delete Fest_L2S_CandleRankReq_reflection_;
  delete Fest_BossFirstOptReq::default_instance_;
  delete Fest_BossFirstOptReq_reflection_;
  delete Fest_BossFirstOptRsp::default_instance_;
  delete Fest_BossFirstOptRsp_reflection_;
  delete Fest_BossInfoReq::default_instance_;
  delete Fest_BossInfoReq_reflection_;
  delete FestBossInfo::default_instance_;
  delete FestBossInfo_reflection_;
  delete Fest_BossInfoRsp::default_instance_;
  delete Fest_BossInfoRsp_reflection_;
  delete Fest_BFGlobalDBKill::default_instance_;
  delete Fest_BFGlobalDBKill_reflection_;
  delete Fest_BFGlobalDBEntry::default_instance_;
  delete Fest_BFGlobalDBEntry_reflection_;
  delete Fest_BFGlobalDB::default_instance_;
  delete Fest_BFGlobalDB_reflection_;
  delete L2CFest_BossKFSimpleReq::default_instance_;
  delete L2CFest_BossKFSimpleReq_reflection_;
  delete C2LFest_BossKFNotify::default_instance_;
  delete C2LFest_BossKFNotify_reflection_;
  delete C2LFest_BossInfoReq::default_instance_;
  delete C2LFest_BossInfoReq_reflection_;
  delete C2LFest_BossFirstOptReq::default_instance_;
  delete C2LFest_BossFirstOptReq_reflection_;
  delete C2LFest_HuiMengXiYou_GetRewardReq::default_instance_;
  delete C2LFest_HuiMengXiYou_GetRewardReq_reflection_;
  delete L2CFest_HuiMengXiYou_GetRewardRsp::default_instance_;
  delete L2CFest_HuiMengXiYou_GetRewardRsp_reflection_;
  delete NotifyFest_HuiMengXiYouRewardStatusChange::default_instance_;
  delete NotifyFest_HuiMengXiYouRewardStatusChange_reflection_;
  delete XiYouGameInfo::default_instance_;
  delete XiYouGameInfo_reflection_;
  delete NotiftFest_HuiMengXiYouStart::default_instance_;
  delete NotiftFest_HuiMengXiYouStart_reflection_;
  delete NotiftFest_LogicHuiMengXiYouStart::default_instance_;
  delete NotiftFest_LogicHuiMengXiYouStart_reflection_;
  delete NotifyFest_HuiMengXiYouSceneChange::default_instance_;
  delete NotifyFest_HuiMengXiYouSceneChange_reflection_;
  delete NotiftFest_HuiMengXiYouGameStart::default_instance_;
  delete NotiftFest_HuiMengXiYouGameStart_reflection_;
  delete NotiftFest_HuiMengXiYouEnd::default_instance_;
  delete NotiftFest_HuiMengXiYouEnd_reflection_;
  delete NotiftFest_HuiMengXiYouGameInfo::default_instance_;
  delete NotiftFest_HuiMengXiYouGameInfo_reflection_;
  delete NotifyFest_HuiMengXiYouGameEnd::default_instance_;
  delete NotifyFest_HuiMengXiYouGameEnd_reflection_;
  delete NotifyFest_HuiMengXiYouEnterReq::default_instance_;
  delete NotifyFest_HuiMengXiYouEnterReq_reflection_;
  delete NotifyFest_HuiMengXiYouEnterRsp::default_instance_;
  delete NotifyFest_HuiMengXiYouEnterRsp_reflection_;
  delete NotifyFest_HuiMengXiYouEnterGameReq::default_instance_;
  delete NotifyFest_HuiMengXiYouEnterGameReq_reflection_;
  delete NotifyFest_HuiMengXiYouEnterGameRsp::default_instance_;
  delete NotifyFest_HuiMengXiYouEnterGameRsp_reflection_;
  delete C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance_;
  delete C2LFest_HuiMengXiYouGiveCaiJiReq_reflection_;
  delete L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance_;
  delete L2CFest_HuiMengXiYouGiveCaiJiRsp_reflection_;
  delete XiYouCaiJiCollectInfo::default_instance_;
  delete XiYouCaiJiCollectInfo_reflection_;
  delete NotifyFest_HuiMengXiYouCollect::default_instance_;
  delete NotifyFest_HuiMengXiYouCollect_reflection_;
  delete XiYouCaiJiCollectMonsterInfo::default_instance_;
  delete XiYouCaiJiCollectMonsterInfo_reflection_;
  delete NotifyFest_HuiMengXiYouCollectSuccess::default_instance_;
  delete NotifyFest_HuiMengXiYouCollectSuccess_reflection_;
  delete NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance_;
  delete NotifyFest_HuiMengXiYou_RoubaoziNotify_reflection_;
  delete FMarryRankInfo::default_instance_;
  delete FMarryRankInfo_reflection_;
  delete FMarryExpressRankInfo::default_instance_;
  delete FMarryExpressRankInfo_reflection_;
  delete FMarryRankReq::default_instance_;
  delete FMarryRankReq_reflection_;
  delete FMarryRankRsp::default_instance_;
  delete FMarryRankRsp_reflection_;
  delete FMarryExpressReq::default_instance_;
  delete FMarryExpressReq_reflection_;
  delete FMarryExpressRsp::default_instance_;
  delete FMarryExpressRsp_reflection_;
  delete FMarryRoleReq::default_instance_;
  delete FMarryRoleReq_reflection_;
  delete FMarryRoleRsp::default_instance_;
  delete FMarryRoleRsp_reflection_;
  delete FMarryRoleRecvReq::default_instance_;
  delete FMarryRoleRecvReq_reflection_;
  delete FMarryRoleRecvRsp::default_instance_;
  delete FMarryRoleRecvRsp_reflection_;
  delete FMarryRecord::default_instance_;
  delete FMarryRecord_reflection_;
  delete FMarryExpress::default_instance_;
  delete FMarryExpress_reflection_;
  delete FMarryDBEntry::default_instance_;
  delete FMarryDBEntry_reflection_;
  delete FMarryDB::default_instance_;
  delete FMarryDB_reflection_;
  delete Fest_XiYouGlobalDBInfo::default_instance_;
  delete Fest_XiYouGlobalDBInfo_reflection_;
  delete C2LFMarrySynScoreReq::default_instance_;
  delete C2LFMarrySynScoreReq_reflection_;
  delete L2CFMarrySynScoreRsp::default_instance_;
  delete L2CFMarrySynScoreRsp_reflection_;
  delete Fest_XiYouGlobalDBEntry::default_instance_;
  delete Fest_XiYouGlobalDBEntry_reflection_;
  delete Fest_XiYouGlobalDB::default_instance_;
  delete Fest_XiYouGlobalDB_reflection_;
  delete Fest_XiYouSyncNotify::default_instance_;
  delete Fest_XiYouSyncNotify_reflection_;
  delete Fest_XiYouSyncLogic::default_instance_;
  delete Fest_XiYouSyncLogic_reflection_;
  delete Fest_XiYouSyncFinish::default_instance_;
  delete Fest_XiYouSyncFinish_reflection_;
  delete Fest_XiYouSyncForceClose::default_instance_;
  delete Fest_XiYouSyncForceClose_reflection_;
  delete Fest_DayTotalRechargeFetchReq::default_instance_;
  delete Fest_DayTotalRechargeFetchReq_reflection_;
  delete Fest_DayTotalRechargeFetchRsp::default_instance_;
  delete Fest_DayTotalRechargeFetchRsp_reflection_;
  delete Fest_DayTotalRechargeNotify::default_instance_;
  delete Fest_DayTotalRechargeNotify_reflection_;
  delete Fest_LoginRewardFetchReq::default_instance_;
  delete Fest_LoginRewardFetchReq_reflection_;
  delete Fest_LoginRewardFetchRsp::default_instance_;
  delete Fest_LoginRewardFetchRsp_reflection_;
  delete Fest_LoginRewardNotify::default_instance_;
  delete Fest_LoginRewardNotify_reflection_;
  delete Fest_TotalRechargeFetchReq::default_instance_;
  delete Fest_TotalRechargeFetchReq_reflection_;
  delete Fest_TotalRechargeFetchRsp::default_instance_;
  delete Fest_TotalRechargeFetchRsp_reflection_;
  delete Fest_TotalRechargeNotify::default_instance_;
  delete Fest_TotalRechargeNotify_reflection_;
}

void protobuf_AddDesc_Fest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nFest.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"{\n\017FestSimpleProto\022\023\n\013templat"
    "e_id\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\022\016\n\006period\030\003 \001("
    "\005\022\020\n\010redpoint\030\004 \001(\005\022\017\n\007endtime\030\005 \001(\004\022\021\n\t"
    "begintime\030\006 \001(\004\">\n\023FestSimpleListProto\022\'"
    "\n\004info\030\001 \003(\0132\031.proto_ff.FestSimpleProto\""
    ":\n\021FestRedPointProto\022\023\n\013template_id\030\001 \001("
    "\005\022\020\n\010redpoint\030\002 \001(\005\"B\n\025FestRedPointListP"
    "roto\022)\n\004info\030\001 \003(\0132\033.proto_ff.FestRedPoi"
    "ntProto\"(\n\rFestShopProto\022\n\n\002id\030\001 \001(\005\022\013\n\003"
    "num\030\002 \001(\005\";\n\023FestShopDetailProto\022$\n\003buy\030"
    "\001 \003(\0132\027.proto_ff.FestShopProto\"&\n\023FestSi"
    "gnDetailProto\022\017\n\007is_sign\030\001 \001(\005\"s\n!FestDa"
    "ilyTotalRechargeDetailProto\0226\n\004data\030\001 \003("
    "\0132(.proto_ff.FestDailyTotalRechargeOnePr"
    "oto\022\026\n\016total_recharge\030\002 \001(\r\"5\n\022FestGoldS"
    "toreProto\022\037\n\004info\030\001 \003(\0132\021.proto_ff.ComPa"
    "ir\";\n\022FestDigEggLogProto\022\014\n\004name\030\001 \001(\014\022\n"
    "\n\002id\030\002 \001(\005\022\013\n\003cid\030\003 \001(\004\"=\n\023FestDigEggTas"
    "kProto\022\n\n\002id\030\001 \001(\005\022\013\n\003cur\030\002 \001(\005\022\r\n\005fetch"
    "\030\003 \001(\005\"m\n\017FestDigEggProto\022\037\n\004info\030\001 \003(\0132"
    "\021.proto_ff.ComPair\022\014\n\004free\030\002 \001(\005\022+\n\004task"
    "\030\003 \003(\0132\035.proto_ff.FestDigEggTaskProto\"!\n"
    "\017FestCandleProto\022\016\n\006id_lst\030\001 \003(\005\"W\n\021Fest"
    "CandRankProto\022\013\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014"
    "\022\014\n\004harm\030\003 \001(\004\022\013\n\003zid\030\004 \001(\r\022\014\n\004rank\030\005 \001("
    "\005\"S\n\032FestRTurnableRechargeProto\0225\n\004info\030"
    "\001 \003(\0132\'.proto_ff.FestRTurnableRechargeOn"
    "eProto\"l\n\021FestTurnableProto\022-\n\004task\030\001 \003("
    "\0132\037.proto_ff.FestTurnableTaskProto\022\020\n\010le"
    "ft_num\030\002 \001(\r\022\026\n\016chou_jiang_ids\030\005 \003(\005\"\264\001\n"
    "\017FestDonateProto\022/\n\006single\030\001 \003(\0132\037.proto"
    "_ff.FestDonateSingleProto\022/\n\006server\030\002 \003("
    "\0132\037.proto_ff.FestDonateServerProto\022\022\n\nsi"
    "ngle_num\030\003 \001(\r\022+\n\004task\030\004 \003(\0132\035.proto_ff."
    "FestDonateTaskProto\"=\n\017FestOnlineProto\022*"
    "\n\004data\030\001 \003(\0132\034.proto_ff.FestOnlineOnePro"
    "to\"G\n\024FestCollectWordProto\022/\n\004data\030\001 \003(\013"
    "2!.proto_ff.FestCollectWordOneProto\"j\n\023F"
    "estBossDetailProto\022\025\n\rrecv_kill_ids\030\001 \003("
    "\005\022\024\n\014recv_red_ids\030\002 \003(\005\022\024\n\014my_kills_ids\030"
    "\003 \003(\005\022\020\n\010kill_ids\030\004 \003(\005\"Z\n\017FestMarryDeta"
    "il\022#\n\005tasks\030\001 \003(\0132\024.proto_ff.FMarryTask\022"
    "\023\n\013process_ids\030\002 \003(\005\022\r\n\005score\030\003 \001(\005\"@\n\031F"
    "estDayTotalRechargeProto\022\021\n\tfetch_lst\030\001 "
    "\003(\005\022\020\n\010recharge\030\002 \001(\r\"2\n\016FestLoginProto\022"
    " \n\005fetch\030\001 \003(\0132\021.proto_ff.ComPair\"C\n\026Fes"
    "tTotalRechargeProto\022\021\n\tfetch_lst\030\001 \003(\005\022\026"
    "\n\016total_recharge\030\002 \001(\r\"\341\007\n\017FestDetailPro"
    "to\022\023\n\013template_id\030\001 \001(\005\022+\n\004shop\030\002 \001(\0132\035."
    "proto_ff.FestShopDetailProto\022I\n\024daily_to"
    "tal_recharge\030\003 \001(\0132+.proto_ff.FestDailyT"
    "otalRechargeDetailProto\022+\n\004sign\030\004 \001(\0132\035."
    "proto_ff.FestSignDetailProto\0220\n\ngold_sto"
    "re\030\005 \001(\0132\034.proto_ff.FestGoldStoreProto\022*"
    "\n\007dig_egg\030\006 \001(\0132\031.proto_ff.FestDigEggPro"
    "to\022@\n\022rturnable_recharge\030\007 \001(\0132$.proto_f"
    "f.FestRTurnableRechargeProto\022.\n\tturntabl"
    "e\030\010 \001(\0132\033.proto_ff.FestTurnableProto\022)\n\006"
    "donate\030\t \001(\0132\031.proto_ff.FestDonateProto\022"
    ")\n\006online\030\n \001(\0132\031.proto_ff.FestOnlinePro"
    "to\0224\n\014collect_word\030\013 \001(\0132\036.proto_ff.Fest"
    "CollectWordProto\022*\n\tdraw_pize\030\014 \001(\0132\027.pr"
    "oto_ff.DrawPizeProto\022+\n\004boss\030\r \001(\0132\035.pro"
    "to_ff.FestBossDetailProto\022-\n\013server_rank"
    "\030\016 \001(\0132\030.proto_ff.FestRankDBData\0227\n\017hui_"
    "meng_xi_you\030\017 \001(\0132\036.proto_ff.FestHuiMeng"
    "XiYouData\022(\n\005marry\030\020 \001(\0132\031.proto_ff.Fest"
    "MarryDetail\022)\n\006candle\030\021 \001(\0132\031.proto_ff.F"
    "estCandleProto\022\?\n\022day_total_recharge\030\022 \001"
    "(\0132#.proto_ff.FestDayTotalRechargeProto\022"
    "8\n\016total_recharge\030\023 \001(\0132 .proto_ff.FestT"
    "otalRechargeProto\022\'\n\005login\030\024 \001(\0132\030.proto"
    "_ff.FestLoginProto\"C\n\022Fest_SimpleListRsp"
    "\022-\n\006simple\030\001 \001(\0132\035.proto_ff.FestSimpleLi"
    "stProto\"F\n\025Fest_SimpleInfoNotify\022-\n\006simp"
    "le\030\001 \001(\0132\035.proto_ff.FestSimpleListProto\""
    "6\n\016Fest_DetailReq\022\017\n\007fest_id\030\001 \001(\005\022\023\n\013te"
    "mplate_id\030\002 \001(\005\";\n\016Fest_DetailRsp\022)\n\006det"
    "ail\030\001 \003(\0132\031.proto_ff.FestDetailProto\"A\n\024"
    "Fest_DetailUpdateRsp\022)\n\006detail\030\001 \003(\0132\031.p"
    "roto_ff.FestDetailProto\"I\n\024Fest_RedPoint"
    "InfoRsp\0221\n\010redpoint\030\001 \001(\0132\037.proto_ff.Fes"
    "tRedPointListProto\"L\n\027Fest_RedPointInfoN"
    "otify\0221\n\010redpoint\030\001 \001(\0132\037.proto_ff.FestR"
    "edPointListProto\"2\n\017Fest_ShopBuyReq\022\023\n\013t"
    "emplate_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"L\n\017Fest_Sho"
    "pBuyRsp\022\013\n\003ret\030\001 \002(\005\022\023\n\013template_id\030\002 \001("
    "\005\022\n\n\002id\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\"A\n\036Fest_GetDa"
    "ilyRechargeRewardReq\022\023\n\013template_id\030\001 \001("
    "\005\022\n\n\002id\030\002 \001(\005\"\222\001\n\036Fest_DailyRechargeStat"
    "usNotify\022\013\n\003ret\030\001 \002(\005\022\023\n\013template_id\030\002 \001"
    "(\005\022\026\n\016total_recharge\030\003 \001(\005\0226\n\004data\030\004 \003(\013"
    "2(.proto_ff.FestDailyTotalRechargeOnePro"
    "to\"C\n FestRTurnableRechargeTurnableReq\022\023"
    "\n\013template_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"\220\001\n Fest"
    "RTurnableRechargeTurnableRsp\022\013\n\003ret\030\001 \002("
    "\005\022\023\n\013template_id\030\002 \001(\005\022\023\n\013turnable_id\030\003 "
    "\001(\005\0225\n\004data\030\004 \003(\0132\'.proto_ff.FestRTurnab"
    "leRechargeOneProto\"#\n\014Fest_SignReq\022\023\n\013te"
    "mplate_id\030\001 \001(\005\"0\n\014Fest_SignRsp\022\013\n\003ret\030\001"
    " \002(\005\022\023\n\013template_id\030\002 \002(\005\"I\n\031Fest_GoldSt"
    "oreUpateBuyRsp\022\023\n\013template_id\030\001 \001(\005\022\n\n\002i"
    "d\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"2\n\016Fest_DigEggReq\022\023"
    "\n\013template_id\030\001 \001(\005\022\013\n\003pos\030\002 \001(\r\"K\n\016Fest"
    "_DigEggRsp\022\013\n\003ret\030\001 \002(\005\022\023\n\013template_id\030\002"
    " \002(\005\022\n\n\002id\030\003 \001(\005\022\013\n\003pos\030\004 \001(\r\")\n\022Fest_Di"
    "gEggRestReq\022\023\n\013template_id\030\001 \001(\005\"D\n\022Fest"
    "_DigEggRestRsp\022\013\n\003ret\030\001 \002(\005\022\023\n\013template_"
    "id\030\002 \002(\005\022\014\n\004free\030\003 \001(\005\"(\n\021Fest_DigEggLog"
    "Req\022\023\n\013template_id\030\001 \001(\005\"`\n\021Fest_DigEggL"
    "ogRsp\022\013\n\003ret\030\001 \002(\005\022\023\n\013template_id\030\002 \002(\005\022"
    ")\n\003log\030\003 \003(\0132\034.proto_ff.FestDigEggLogPro"
    "to\":\n\027Fest_DigEggTaskFetchReq\022\023\n\013templat"
    "e_id\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\";\n\027Fest_DigEggTas"
    "kFetchRsp\022\013\n\003ret\030\001 \002(\005\022\023\n\013template_id\030\002 "
    "\002(\005\"G\n\030Fest_DigEggTaskUpdateRsp\022+\n\004task\030"
    "\001 \003(\0132\035.proto_ff.FestDigEggTaskProto\"+\n\024"
    "Fest_RTuranbleLogReq\022\023\n\013template_id\030\001 \001("
    "\005\"d\n\024Fest_RTuranbleLogRsp\022\013\n\003ret\030\001 \002(\005\022\023"
    "\n\013template_id\030\002 \002(\005\022*\n\003log\030\003 \003(\0132\035.proto"
    "_ff.RTurnableLogDBProto\",\n\025TurntableTurn"
    "TableReq\022\023\n\013template_id\030\001 \001(\005\"y\n\025Turntab"
    "leTurnTableRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_"
    "id\030\002 \001(\005\022\020\n\010left_num\030\003 \001(\005\022\024\n\014turntable_"
    "id\030\004 \001(\005\022\026\n\016chou_jiang_ids\030\005 \003(\005\"5\n\022Turn"
    "tableRewardReq\022\023\n\013template_id\030\001 \001(\005\022\n\n\002i"
    "d\030\002 \001(\005\"6\n\022TurntableRewardRsp\022\013\n\003ret\030\001 \001"
    "(\005\022\023\n\013template_id\030\002 \001(\005\"m\n\025TurntableStat"
    "usChange\022\023\n\013template_id\030\001 \001(\005\022-\n\004task\030\002 "
    "\003(\0132\037.proto_ff.FestTurnableTaskProto\022\020\n\010"
    "left_num\030\003 \001(\r\"0\n\031FestDonateGetServerNum"
    "Req\022\023\n\013template_id\030\001 \001(\005\"Q\n\031FestDonateGe"
    "tServerNumRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_i"
    "d\030\002 \001(\005\022\022\n\nserver_num\030\003 \001(\r\"8\n\023FestDonat"
    "eDonateReq\022\023\n\013template_id\030\001 \001(\005\022\014\n\004type\030"
    "\002 \001(\005\"K\n\023FestDonateDonateRsp\022\013\n\003ret\030\001 \001("
    "\005\022\023\n\013template_id\030\002 \001(\005\022\022\n\nsingle_num\030\003 \001"
    "(\r\"\?\n\034FestDonateGetSingleRewardReq\022\023\n\013te"
    "mplate_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"o\n\034FestDonat"
    "eGetSingleRewardRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013temp"
    "late_id\030\002 \001(\005\022-\n\004data\030\003 \001(\0132\037.proto_ff.F"
    "estDonateSingleProto\"\?\n\034FestDonateGetSer"
    "verRewardReq\022\023\n\013template_id\030\001 \001(\005\022\n\n\002id\030"
    "\002 \001(\005\"o\n\034FestDonateGetServerRewardRsp\022\013\n"
    "\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\022-\n\004data\030"
    "\003 \001(\0132\037.proto_ff.FestDonateServerProto\"="
    "\n\032FestDonateGetTaskRewardReq\022\023\n\013template"
    "_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"k\n\032FestDonateGetTa"
    "skRewardRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030"
    "\002 \001(\005\022+\n\004data\030\003 \001(\0132\035.proto_ff.FestDonat"
    "eTaskProto\"^\n\032FestDonateTaskTtatusChange"
    "\022\023\n\013template_id\030\001 \001(\005\022+\n\004data\030\002 \003(\0132\035.pr"
    "oto_ff.FestDonateTaskProto\"9\n\026FestOnline"
    "GetRewardReq\022\023\n\013template_id\030\001 \001(\005\022\n\n\002id\030"
    "\002 \001(\005\"f\n\026FestOnlineGetRewardRsp\022\013\n\003ret\030\001"
    " \001(\005\022\023\n\013template_id\030\002 \001(\005\022*\n\004data\030\003 \001(\0132"
    "\034.proto_ff.FestOnlineOneProto\">\n\033FestCol"
    "lectWorldExchargeReq\022\023\n\013template_id\030\001 \001("
    "\005\022\n\n\002id\030\002 \001(\005\"p\n\033FestCollectWorldExcharg"
    "eRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\022/"
    "\n\004data\030\003 \001(\0132!.proto_ff.FestCollectWordO"
    "neProto\"=\n\030FestDrawPizeChouJiangReq\022\023\n\013t"
    "emplate_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"i\n\030FestDr"
    "awPizeChouJiangRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013templ"
    "ate_id\030\002 \001(\005\022\024\n\014choujiang_id\030\003 \003(\005\022\025\n\rch"
    "oujiang_num\030\005 \001(\r\";\n\030FestDrawPizeGetRewa"
    "rdReq\022\023\n\013template_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"g"
    "\n\030FestDrawPizeGetRewardRsp\022\013\n\003ret\030\001 \001(\005\022"
    "\023\n\013template_id\030\002 \001(\005\022)\n\004data\030\003 \001(\0132\033.pro"
    "to_ff.DrawPizeTaskProto\")\n\022FestDrawPizeL"
    "ogReq\022\023\n\013template_id\030\001 \001(\005\"a\n\022FestDrawPi"
    "zeLogRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001"
    "(\005\022)\n\003log\030\003 \003(\0132\034.proto_ff.DrawPizeLogDB"
    "Proto\"2\n\033FestDrawPizeGetServerNumReq\022\023\n\013"
    "template_id\030\001 \001(\005\"S\n\033FestDrawPizeGetServ"
    "erNumRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001"
    "(\005\022\022\n\nserver_num\030\003 \001(\r\"U\n\032FestServerRank"
    "GetRewardReq\022\023\n\013template_id\030\001 \001(\005\022\017\n\007ran"
    "k_id\030\002 \001(\005\022\021\n\treward_id\030\003 \001(\005\"{\n\032FestSer"
    "verRankGetRewardRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013temp"
    "late_id\030\002 \001(\005\022\017\n\007rank_id\030\003 \001(\005\022*\n\004data\030\004"
    " \001(\0132\034.proto_ff.FestRankRewardData\"t\n Fe"
    "stServerRankRewardStatusChange\022\023\n\013templa"
    "te_id\030\001 \001(\005\022\017\n\007rank_id\030\002 \001(\005\022*\n\004data\030\003 \003"
    "(\0132\034.proto_ff.FestRankRewardData\"B\n\032Fest"
    "ServerRankGetMyRankReq\022\023\n\013template_id\030\001 "
    "\001(\005\022\017\n\007rank_id\030\002 \001(\005\"o\n\032FestServerRankGe"
    "tMyRankRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002"
    " \001(\005\022\017\n\007rank_id\030\003 \001(\005\022\017\n\007my_rank\030\004 \001(\005\022\r"
    "\n\005param\030\005 \001(\004\"c\n\033FestServerRankGetAllRan"
    "kReq\022\023\n\013template_id\030\001 \001(\005\022\017\n\007rank_id\030\002 \001"
    "(\005\022\013\n\003cid\030\003 \001(\004\022\021\n\trank_type\030\004 \001(\r\"z\n\033Fe"
    "stServerRankGetAllRankRsp\022\013\n\003ret\030\001 \001(\005\022\023"
    "\n\013template_id\030\002 \001(\005\022\017\n\007rank_id\030\003 \001(\005\022(\n\010"
    "rankList\030\004 \003(\0132\026.proto_ff.RankNodeData\"@"
    "\n\030FestServerRankBuyGiftReq\022\023\n\013template_i"
    "d\030\001 \001(\005\022\017\n\007rank_id\030\002 \001(\005\"b\n\030FestServerRa"
    "nkBuyGiftRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id"
    "\030\002 \001(\005\022\017\n\007rank_id\030\003 \001(\005\022\023\n\013gift_status\030\004"
    " \001(\r\"J\n\"FestServerRankGetRedPointRewardR"
    "eq\022\023\n\013template_id\030\001 \001(\005\022\017\n\007rank_id\030\002 \001(\005"
    "\"q\n\"FestServerRankGetRedPointRewardRsp\022\013"
    "\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\022\017\n\007rank"
    "_id\030\003 \001(\005\022\030\n\020red_point_status\030\004 \001(\r\"W\n\032F"
    "estServerRankStatusChange\022\023\n\013template_id"
    "\030\001 \001(\005\022$\n\004rank\030\002 \003(\0132\026.proto_ff.FestRank"
    "Data\"5\n\022FestCandleFetchReq\022\023\n\013template_i"
    "d\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"6\n\022FestCandleFetchRs"
    "p\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\"<\n\025F"
    "estCandleFetchLstRsp\022\023\n\013template_id\030\001 \001("
    "\005\022\016\n\006id_lst\030\002 \003(\005\"(\n\021FestCandleRankReq\022\023"
    "\n\013template_id\030\001 \001(\005\"n\n\021FestCandleRankRsp"
    "\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\022)\n\004ra"
    "nk\030\003 \003(\0132\033.proto_ff.FestCandRankProto\022\014\n"
    "\004harm\030\004 \001(\004\"S\n\025Fest_L2C_DigEgg_OpRsp\022\014\n\004"
    "name\030\001 \001(\014\022\n\n\002id\030\002 \001(\005\022\023\n\013template_id\030\003 "
    "\001(\005\022\013\n\003cid\030\004 \001(\004\"3\n\017Fest_L2C_LogReq\022\013\n\003c"
    "id\030\001 \001(\004\022\023\n\013template_id\030\002 \001(\005\"[\n\030Fest_L2"
    "C_RTurnable_OpRsp\022\023\n\013template_id\030\001 \001(\005\022*"
    "\n\003log\030\002 \001(\0132\035.proto_ff.RTurnableLogDBPro"
    "to\"=\n\031Fest_L2C_RTurnable_LogReq\022\013\n\003cid\030\001"
    " \001(\004\022\023\n\013template_id\030\002 \001(\005\"U\n\035Fest_L2C_Do"
    "nateOperate_Notify\022\013\n\003cid\030\001 \001(\004\022\023\n\013templ"
    "ate_id\030\002 \001(\005\022\022\n\nsingle_num\030\003 \001(\r\"e\n!Fest"
    "_C2L_DonateGetServerRewardReq\022\023\n\013templat"
    "e_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\022\n\nserver_num\030\003 \001"
    "(\r\022\013\n\003cid\030\004 \001(\004\"p\n\027Fest_L2C_DrawPizeLogR"
    "eq\022\023\n\013template_id\030\001 \001(\005\022)\n\003log\030\002 \003(\0132\034.p"
    "roto_ff.DrawPizeLogDBProto\022\025\n\rchoujiang_"
    "num\030\003 \001(\005\"[\n)Fest_L2C_DrawPizeChouJiangG"
    "etServerNumReq\022\023\n\013template_id\030\001 \001(\005\022\014\n\004t"
    "ype\030\002 \001(\005\022\013\n\003cid\030\003 \001(\004\"o\n)Fest_C2L_DrawP"
    "izeChouJiangGetServerNumRsp\022\023\n\013template_"
    "id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\022\n\nserver_num\030\003 \001"
    "(\r\022\013\n\003cid\030\004 \001(\004\"b\n\032Fest_C2L_ServerRankSy"
    "ncReq\022\013\n\003cid\030\001 \001(\004\022\023\n\013template_id\030\002 \001(\005\022"
    "\017\n\007rank_id\030\003 \001(\005\022\021\n\trank_type\030\004 \001(\005\"\222\001\n\032"
    "Fest_C2L_ServerRankSyncRsp\022\013\n\003cid\030\001 \001(\004\022"
    "\023\n\013template_id\030\002 \001(\005\022\017\n\007rank_id\030\003 \001(\005\022\021\n"
    "\trank_type\030\004 \001(\005\022\017\n\007my_rank\030\005 \001(\005\022\r\n\005par"
    "am\030\006 \001(\004\022\016\n\006finish\030\007 \001(\010\"A\n\031Fest_S2C_Can"
    "dleRankReward\022$\n\007cidrank\030\001 \003(\0132\023.proto_f"
    "f.ComPair64\"_\n\026Fest_L2S_CandleAddHarm\022\013\n"
    "\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\014\n\004harm\030\003 \001(\003\022\013"
    "\n\003zid\030\004 \001(\r\022\017\n\007logicid\030\005 \001(\r\">\n\033Fest_S2L"
    "_CandleTotalHarmRsp\022\013\n\003cid\030\001 \001(\004\022\022\n\ntota"
    "l_harm\030\002 \001(\003\"@\n\026Fest_L2S_CandleRankReq\022\013"
    "\n\003cid\030\001 \001(\004\022\014\n\004harm\030\002 \001(\003\022\013\n\003zid\030\003 \001(\r\"E"
    "\n\024Fest_BossFirstOptReq\022\023\n\013template_id\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"R\n\024Fest_Bo"
    "ssFirstOptRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013template_i"
    "d\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\"\'\n\020Fes"
    "t_BossInfoReq\022\023\n\013template_id\030\001 \001(\005\"\242\001\n\014F"
    "estBossInfo\022\n\n\002id\030\001 \001(\005\022\024\n\014refresh_time\030"
    "\002 \001(\004\022\020\n\010kill_cid\030\003 \001(\004\022\021\n\tkill_name\030\004 \001"
    "(\014\022\021\n\tkill_time\030\005 \001(\004\022\016\n\006teamid\030\006 \001(\r\022(\n"
    "\004head\030\007 \001(\0132\032.proto_ff.RoleHeadPicProto\""
    "N\n\020Fest_BossInfoRsp\022\023\n\013template_id\030\001 \001(\005"
    "\022%\n\005infos\030\002 \003(\0132\026.proto_ff.FestBossInfo\""
    "V\n\023Fest_BFGlobalDBKill\022\n\n\002id\030\001 \001(\005\022\020\n\010ki"
    "ll_cid\030\002 \001(\004\022\021\n\tkill_time\030\003 \001(\004\022\016\n\006teami"
    "d\030\004 \001(\r\"S\n\024Fest_BFGlobalDBEntry\022\r\n\005tmpId"
    "\030\001 \001(\005\022,\n\005infos\030\002 \003(\0132\035.proto_ff.Fest_BF"
    "GlobalDBKill\"A\n\017Fest_BFGlobalDB\022.\n\006entry"
    "s\030\001 \003(\0132\036.proto_ff.Fest_BFGlobalDBEntry\""
    "~\n\027L2CFest_BossKFSimpleReq\022\016\n\006roleid\030\001 \001"
    "(\004\022\023\n\013template_id\030\002 \001(\005\022(\n\005proto\030\003 \001(\0132\031"
    ".proto_ff.FestSimpleProto\022\024\n\014recv_red_id"
    "s\030\004 \003(\005\"d\n\024C2LFest_BossKFNotify\022\023\n\013templ"
    "ate_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n\006roleid\030\003 \001(\004"
    "\022\016\n\006teamid\030\004 \001(\005\022\013\n\003zid\030\005 \001(\005\"a\n\023C2LFest"
    "_BossInfoReq\022\016\n\006roleId\030\001 \001(\004\022\023\n\013template"
    "_id\030\002 \001(\005\022%\n\005infos\030\003 \003(\0132\026.proto_ff.Fest"
    "BossInfo\"f\n\027C2LFest_BossFirstOptReq\022\023\n\013t"
    "emplate_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004type\030\003 \001"
    "(\005\022\016\n\006roleid\030\004 \001(\004\022\014\n\004flag\030\005 \001(\005\"D\n!C2LF"
    "est_HuiMengXiYou_GetRewardReq\022\023\n\013templat"
    "e_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"|\n!L2CFest_HuiMen"
    "gXiYou_GetRewardRsp\022\020\n\010ret_code\030\001 \001(\005\022\023\n"
    "\013template_id\030\002 \001(\005\0220\n\006reward\030\003 \001(\0132 .pro"
    "to_ff.FestHuiMengXiYouReward\"\206\001\n)NotifyF"
    "est_HuiMengXiYouRewardStatusChange\022\023\n\013te"
    "mplate_id\030\001 \001(\005\0220\n\006reward\030\002 \003(\0132 .proto_"
    "ff.FestHuiMengXiYouReward\022\022\n\ncur_points\030"
    "\003 \001(\005\"+\n\rXiYouGameInfo\022\n\n\002id\030\001 \001(\005\022\016\n\006st"
    "atus\030\002 \001(\005\"|\n\034NotiftFest_HuiMengXiYouSta"
    "rt\022\017\n\007play_id\030\001 \001(\005\022%\n\004info\030\002 \003(\0132\027.prot"
    "o_ff.XiYouGameInfo\022\021\n\tcur_state\030\003 \001(\005\022\021\n"
    "\tleft_time\030\004 \001(\005\"g\n!NotiftFest_LogicHuiM"
    "engXiYouStart\022\013\n\003cid\030\001 \003(\004\0225\n\005start\030\002 \001("
    "\0132&.proto_ff.NotiftFest_HuiMengXiYouStar"
    "t\"\202\001\n\"NotifyFest_HuiMengXiYouSceneChange"
    "\022\017\n\007play_id\030\001 \001(\005\022%\n\004info\030\002 \003(\0132\027.proto_"
    "ff.XiYouGameInfo\022\021\n\tcur_state\030\003 \001(\005\022\021\n\tl"
    "eft_time\030\004 \001(\005\"\200\001\n NotiftFest_HuiMengXiY"
    "ouGameStart\022\017\n\007play_id\030\001 \001(\005\022%\n\004info\030\002 \003"
    "(\0132\027.proto_ff.XiYouGameInfo\022\021\n\tcur_state"
    "\030\003 \001(\005\022\021\n\tleft_time\030\004 \001(\005\"=\n\032NotiftFest_"
    "HuiMengXiYouEnd\022\017\n\007play_id\030\001 \001(\005\022\016\n\006poin"
    "ts\030\002 \001(\005\"\305\001\n\037NotiftFest_HuiMengXiYouGame"
    "Info\022\017\n\007play_id\030\001 \001(\005\022\017\n\007game_id\030\002 \001(\005\022\025"
    "\n\rtask_schedule\030\003 \001(\005\022\022\n\ncur_points\030\004 \001("
    "\005\022\024\n\014points_level\030\005 \001(\005\022\025\n\rmy_cur_points"
    "\030\006 \001(\005\022\025\n\rmy_all_points\030\007 \001(\005\022\021\n\tleft_ti"
    "me\030\010 \001(\005\"\222\001\n\036NotifyFest_HuiMengXiYouGame"
    "End\022\017\n\007play_id\030\001 \001(\005\022\017\n\007game_id\030\002 \001(\005\022\024\n"
    "\014points_level\030\005 \001(\005\022\025\n\rmy_cur_points\030\006 \001"
    "(\005\022!\n\006reward\030\007 \003(\0132\021.proto_ff.ComItem\"6\n"
    "\037NotifyFest_HuiMengXiYouEnterReq\022\023\n\013temp"
    "late_id\030\001 \001(\005\"H\n\037NotifyFest_HuiMengXiYou"
    "EnterRsp\022\020\n\010ret_code\030\001 \001(\005\022\023\n\013template_i"
    "d\030\002 \001(\005\":\n#NotifyFest_HuiMengXiYouEnterG"
    "ameReq\022\023\n\013template_id\030\001 \001(\005\"L\n#NotifyFes"
    "t_HuiMengXiYouEnterGameRsp\022\020\n\010ret_code\030\001"
    " \001(\005\022\023\n\013template_id\030\002 \001(\005\"7\n C2LFest_Hui"
    "MengXiYouGiveCaiJiReq\022\023\n\013template_id\030\001 \001"
    "(\005\"I\n L2CFest_HuiMengXiYouGiveCaiJiRsp\022\020"
    "\n\010ret_code\030\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\"F\n"
    "\025XiYouCaiJiCollectInfo\022\013\n\003cid\030\001 \001(\004\022 \n\003p"
    "os\030\005 \001(\0132\023.proto_ff.Vector3PB\"S\n\036NotifyF"
    "est_HuiMengXiYouCollect\0221\n\010collects\030\001 \003("
    "\0132\037.proto_ff.XiYouCaiJiCollectInfo\"P\n\034Xi"
    "YouCaiJiCollectMonsterInfo\022\022\n\nmonster_id"
    "\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\r\"e\n%"
    "NotifyFest_HuiMengXiYouCollectSuccess\022<\n"
    "\014monster_info\030\001 \003(\0132&.proto_ff.XiYouCaiJ"
    "iCollectMonsterInfo\"\243\001\n&NotifyFest_HuiMe"
    "ngXiYou_RoubaoziNotify\022\026\n\016cur_fresh_wave"
    "\030\001 \001(\r\022\026\n\016all_fresh_wave\030\002 \001(\r\022\017\n\007npc_ci"
    "d\030\003 \001(\004\022$\n\007npc_pos\030\004 \001(\0132\023.proto_ff.Vect"
    "or3PB\022\022\n\nnpc_status\030\005 \001(\r\"Z\n\016FMarryRankI"
    "nfo\022\014\n\004rank\030\001 \001(\005\022+\n\005roles\030\002 \003(\0132\034.proto"
    "_ff.RolePlayerMiniInfo\022\r\n\005score\030\003 \001(\005\"O\n"
    "\025FMarryExpressRankInfo\022\014\n\004rank\030\001 \001(\005\022\013\n\003"
    "cid\030\002 \001(\004\022\014\n\004name\030\003 \001(\014\022\r\n\005score\030\004 \001(\005\"$"
    "\n\rFMarryRankReq\022\023\n\013template_id\030\001 \001(\005\"t\n\r"
    "FMarryRankRsp\022\023\n\013template_id\030\001 \001(\005\022(\n\006en"
    "trys\030\002 \003(\0132\030.proto_ff.FMarryRankInfo\022$\n\002"
    "my\030\003 \001(\0132\030.proto_ff.FMarryRankInfo\"\'\n\020FM"
    "arryExpressReq\022\023\n\013template_id\030\001 \001(\005\"\253\001\n\020"
    "FMarryExpressRsp\022\023\n\013template_id\030\001 \001(\005\022.\n"
    "\005sends\030\002 \003(\0132\037.proto_ff.FMarryExpressRan"
    "kInfo\022.\n\005recvs\030\003 \003(\0132\037.proto_ff.FMarryEx"
    "pressRankInfo\022\"\n\004logs\030\004 \003(\0132\024.proto_ff.E"
    "xpressLog\"$\n\rFMarryRoleReq\022\023\n\013template_i"
    "d\030\001 \001(\005\"^\n\rFMarryRoleRsp\022\023\n\013template_id\030"
    "\001 \001(\005\022#\n\005tasks\030\002 \003(\0132\024.proto_ff.FMarryTa"
    "sk\022\023\n\013process_ids\030\003 \003(\005\"B\n\021FMarryRoleRec"
    "vReq\022\023\n\013template_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022"
    "\n\n\002id\030\003 \001(\005\"O\n\021FMarryRoleRecvRsp\022\013\n\003ret\030"
    "\001 \001(\005\022\023\n\013template_id\030\002 \001(\005\022\014\n\004type\030\003 \001(\005"
    "\022\n\n\002id\030\004 \001(\005\";\n\014FMarryRecord\022\020\n\010marry_id"
    "\030\001 \001(\005\022\013\n\003val\030\002 \001(\005\022\014\n\004time\030\003 \001(\004\"7\n\rFMa"
    "rryExpress\022\013\n\003cid\030\001 \001(\004\022\014\n\004time\030\002 \001(\004\022\013\n"
    "\003val\030\003 \001(\005\"\250\001\n\rFMarryDBEntry\022\r\n\005tmpId\030\001 "
    "\001(\005\022\017\n\007groupId\030\002 \001(\005\022\'\n\007records\030\003 \003(\0132\026."
    "proto_ff.FMarryRecord\022&\n\005sends\030\004 \003(\0132\027.p"
    "roto_ff.FMarryExpress\022&\n\005recvs\030\005 \003(\0132\027.p"
    "roto_ff.FMarryExpress\"3\n\010FMarryDB\022\'\n\006ent"
    "rys\030\001 \003(\0132\027.proto_ff.FMarryDBEntry\"C\n\026Fe"
    "st_XiYouGlobalDBInfo\022\n\n\002id\030\001 \001(\005\022\016\n\006stat"
    "us\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\"D\n\024C2LFMarrySynS"
    "coreReq\022\r\n\005tmpId\030\001 \001(\005\022\020\n\010marry_id\030\002 \001(\005"
    "\022\013\n\003cid\030\003 \001(\004\"S\n\024L2CFMarrySynScoreRsp\022\r\n"
    "\005tmpId\030\001 \001(\005\022\020\n\010marry_id\030\002 \001(\005\022\013\n\003cid\030\003 "
    "\001(\004\022\r\n\005score\030\004 \001(\005\"\206\001\n\027Fest_XiYouGlobalD"
    "BEntry\022\r\n\005tmpId\030\001 \001(\005\022.\n\004info\030\002 \003(\0132 .pr"
    "oto_ff.Fest_XiYouGlobalDBInfo\022\r\n\005state\030\003"
    " \001(\005\022\014\n\004open\030\004 \001(\010\022\017\n\007readyId\030\005 \001(\005\"G\n\022F"
    "est_XiYouGlobalDB\0221\n\006entrys\030\001 \003(\0132!.prot"
    "o_ff.Fest_XiYouGlobalDBEntry\"s\n\024Fest_XiY"
    "ouSyncNotify\022\023\n\013template_id\030\001 \001(\005\022\024\n\014cur"
    "_state_id\030\002 \001(\005\022\030\n\020cur_state_status\030\003 \001("
    "\005\022\026\n\016cur_state_time\030\004 \001(\005\"G\n\023Fest_XiYouS"
    "yncLogic\022\021\n\tcur_state\030\001 \001(\005\022\013\n\003zid\030\002 \001(\005"
    "\022\020\n\010logic_id\030\003 \001(\005\"9\n\024Fest_XiYouSyncFini"
    "sh\022\017\n\007game_id\030\001 \001(\005\022\020\n\010ready_id\030\002 \001(\005\"\?\n"
    "\030Fest_XiYouSyncForceClose\022\020\n\010ready_id\030\001 "
    "\001(\005\022\021\n\tcur_state\030\002 \001(\005\"@\n\035Fest_DayTotalR"
    "echargeFetchReq\022\023\n\013template_id\030\001 \001(\005\022\n\n\002"
    "id\030\002 \001(\005\"A\n\035Fest_DayTotalRechargeFetchRs"
    "p\022\023\n\013template_id\030\001 \001(\005\022\013\n\003ret\030\002 \001(\005\"W\n\033F"
    "est_DayTotalRechargeNotify\022\023\n\013template_i"
    "d\030\001 \001(\005\022\020\n\010recharge\030\002 \001(\r\022\021\n\tfetch_lst\030\003"
    " \003(\005\"<\n\030Fest_LoginRewardFetchReq\022\023\n\013temp"
    "late_id\030\001 \001(\005\022\013\n\003day\030\002 \001(\005\"<\n\030Fest_Login"
    "RewardFetchRsp\022\023\n\013template_id\030\001 \001(\005\022\013\n\003r"
    "et\030\002 \001(\005\"O\n\026Fest_LoginRewardNotify\022\023\n\013te"
    "mplate_id\030\001 \001(\005\022 \n\005fetch\030\002 \003(\0132\021.proto_f"
    "f.ComPair\"=\n\032Fest_TotalRechargeFetchReq\022"
    "\023\n\013template_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\">\n\032Fest"
    "_TotalRechargeFetchRsp\022\023\n\013template_id\030\001 "
    "\001(\005\022\013\n\003ret\030\002 \001(\005\"Z\n\030Fest_TotalRechargeNo"
    "tify\022\023\n\013template_id\030\001 \001(\005\022\021\n\tfetch_lst\030\002"
    " \003(\005\022\026\n\016total_recharge\030\003 \001(\r", 15828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Fest.proto", &protobuf_RegisterTypes);
  FestSimpleProto::default_instance_ = new FestSimpleProto();
  FestSimpleListProto::default_instance_ = new FestSimpleListProto();
  FestRedPointProto::default_instance_ = new FestRedPointProto();
  FestRedPointListProto::default_instance_ = new FestRedPointListProto();
  FestShopProto::default_instance_ = new FestShopProto();
  FestShopDetailProto::default_instance_ = new FestShopDetailProto();
  FestSignDetailProto::default_instance_ = new FestSignDetailProto();
  FestDailyTotalRechargeDetailProto::default_instance_ = new FestDailyTotalRechargeDetailProto();
  FestGoldStoreProto::default_instance_ = new FestGoldStoreProto();
  FestDigEggLogProto::default_instance_ = new FestDigEggLogProto();
  FestDigEggTaskProto::default_instance_ = new FestDigEggTaskProto();
  FestDigEggProto::default_instance_ = new FestDigEggProto();
  FestCandleProto::default_instance_ = new FestCandleProto();
  FestCandRankProto::default_instance_ = new FestCandRankProto();
  FestRTurnableRechargeProto::default_instance_ = new FestRTurnableRechargeProto();
  FestTurnableProto::default_instance_ = new FestTurnableProto();
  FestDonateProto::default_instance_ = new FestDonateProto();
  FestOnlineProto::default_instance_ = new FestOnlineProto();
  FestCollectWordProto::default_instance_ = new FestCollectWordProto();
  FestBossDetailProto::default_instance_ = new FestBossDetailProto();
  FestMarryDetail::default_instance_ = new FestMarryDetail();
  FestDayTotalRechargeProto::default_instance_ = new FestDayTotalRechargeProto();
  FestLoginProto::default_instance_ = new FestLoginProto();
  FestTotalRechargeProto::default_instance_ = new FestTotalRechargeProto();
  FestDetailProto::default_instance_ = new FestDetailProto();
  Fest_SimpleListRsp::default_instance_ = new Fest_SimpleListRsp();
  Fest_SimpleInfoNotify::default_instance_ = new Fest_SimpleInfoNotify();
  Fest_DetailReq::default_instance_ = new Fest_DetailReq();
  Fest_DetailRsp::default_instance_ = new Fest_DetailRsp();
  Fest_DetailUpdateRsp::default_instance_ = new Fest_DetailUpdateRsp();
  Fest_RedPointInfoRsp::default_instance_ = new Fest_RedPointInfoRsp();
  Fest_RedPointInfoNotify::default_instance_ = new Fest_RedPointInfoNotify();
  Fest_ShopBuyReq::default_instance_ = new Fest_ShopBuyReq();
  Fest_ShopBuyRsp::default_instance_ = new Fest_ShopBuyRsp();
  Fest_GetDailyRechargeRewardReq::default_instance_ = new Fest_GetDailyRechargeRewardReq();
  Fest_DailyRechargeStatusNotify::default_instance_ = new Fest_DailyRechargeStatusNotify();
  FestRTurnableRechargeTurnableReq::default_instance_ = new FestRTurnableRechargeTurnableReq();
  FestRTurnableRechargeTurnableRsp::default_instance_ = new FestRTurnableRechargeTurnableRsp();
  Fest_SignReq::default_instance_ = new Fest_SignReq();
  Fest_SignRsp::default_instance_ = new Fest_SignRsp();
  Fest_GoldStoreUpateBuyRsp::default_instance_ = new Fest_GoldStoreUpateBuyRsp();
  Fest_DigEggReq::default_instance_ = new Fest_DigEggReq();
  Fest_DigEggRsp::default_instance_ = new Fest_DigEggRsp();
  Fest_DigEggRestReq::default_instance_ = new Fest_DigEggRestReq();
  Fest_DigEggRestRsp::default_instance_ = new Fest_DigEggRestRsp();
  Fest_DigEggLogReq::default_instance_ = new Fest_DigEggLogReq();
  Fest_DigEggLogRsp::default_instance_ = new Fest_DigEggLogRsp();
  Fest_DigEggTaskFetchReq::default_instance_ = new Fest_DigEggTaskFetchReq();
  Fest_DigEggTaskFetchRsp::default_instance_ = new Fest_DigEggTaskFetchRsp();
  Fest_DigEggTaskUpdateRsp::default_instance_ = new Fest_DigEggTaskUpdateRsp();
  Fest_RTuranbleLogReq::default_instance_ = new Fest_RTuranbleLogReq();
  Fest_RTuranbleLogRsp::default_instance_ = new Fest_RTuranbleLogRsp();
  TurntableTurnTableReq::default_instance_ = new TurntableTurnTableReq();
  TurntableTurnTableRsp::default_instance_ = new TurntableTurnTableRsp();
  TurntableRewardReq::default_instance_ = new TurntableRewardReq();
  TurntableRewardRsp::default_instance_ = new TurntableRewardRsp();
  TurntableStatusChange::default_instance_ = new TurntableStatusChange();
  FestDonateGetServerNumReq::default_instance_ = new FestDonateGetServerNumReq();
  FestDonateGetServerNumRsp::default_instance_ = new FestDonateGetServerNumRsp();
  FestDonateDonateReq::default_instance_ = new FestDonateDonateReq();
  FestDonateDonateRsp::default_instance_ = new FestDonateDonateRsp();
  FestDonateGetSingleRewardReq::default_instance_ = new FestDonateGetSingleRewardReq();
  FestDonateGetSingleRewardRsp::default_instance_ = new FestDonateGetSingleRewardRsp();
  FestDonateGetServerRewardReq::default_instance_ = new FestDonateGetServerRewardReq();
  FestDonateGetServerRewardRsp::default_instance_ = new FestDonateGetServerRewardRsp();
  FestDonateGetTaskRewardReq::default_instance_ = new FestDonateGetTaskRewardReq();
  FestDonateGetTaskRewardRsp::default_instance_ = new FestDonateGetTaskRewardRsp();
  FestDonateTaskTtatusChange::default_instance_ = new FestDonateTaskTtatusChange();
  FestOnlineGetRewardReq::default_instance_ = new FestOnlineGetRewardReq();
  FestOnlineGetRewardRsp::default_instance_ = new FestOnlineGetRewardRsp();
  FestCollectWorldExchargeReq::default_instance_ = new FestCollectWorldExchargeReq();
  FestCollectWorldExchargeRsp::default_instance_ = new FestCollectWorldExchargeRsp();
  FestDrawPizeChouJiangReq::default_instance_ = new FestDrawPizeChouJiangReq();
  FestDrawPizeChouJiangRsp::default_instance_ = new FestDrawPizeChouJiangRsp();
  FestDrawPizeGetRewardReq::default_instance_ = new FestDrawPizeGetRewardReq();
  FestDrawPizeGetRewardRsp::default_instance_ = new FestDrawPizeGetRewardRsp();
  FestDrawPizeLogReq::default_instance_ = new FestDrawPizeLogReq();
  FestDrawPizeLogRsp::default_instance_ = new FestDrawPizeLogRsp();
  FestDrawPizeGetServerNumReq::default_instance_ = new FestDrawPizeGetServerNumReq();
  FestDrawPizeGetServerNumRsp::default_instance_ = new FestDrawPizeGetServerNumRsp();
  FestServerRankGetRewardReq::default_instance_ = new FestServerRankGetRewardReq();
  FestServerRankGetRewardRsp::default_instance_ = new FestServerRankGetRewardRsp();
  FestServerRankRewardStatusChange::default_instance_ = new FestServerRankRewardStatusChange();
  FestServerRankGetMyRankReq::default_instance_ = new FestServerRankGetMyRankReq();
  FestServerRankGetMyRankRsp::default_instance_ = new FestServerRankGetMyRankRsp();
  FestServerRankGetAllRankReq::default_instance_ = new FestServerRankGetAllRankReq();
  FestServerRankGetAllRankRsp::default_instance_ = new FestServerRankGetAllRankRsp();
  FestServerRankBuyGiftReq::default_instance_ = new FestServerRankBuyGiftReq();
  FestServerRankBuyGiftRsp::default_instance_ = new FestServerRankBuyGiftRsp();
  FestServerRankGetRedPointRewardReq::default_instance_ = new FestServerRankGetRedPointRewardReq();
  FestServerRankGetRedPointRewardRsp::default_instance_ = new FestServerRankGetRedPointRewardRsp();
  FestServerRankStatusChange::default_instance_ = new FestServerRankStatusChange();
  FestCandleFetchReq::default_instance_ = new FestCandleFetchReq();
  FestCandleFetchRsp::default_instance_ = new FestCandleFetchRsp();
  FestCandleFetchLstRsp::default_instance_ = new FestCandleFetchLstRsp();
  FestCandleRankReq::default_instance_ = new FestCandleRankReq();
  FestCandleRankRsp::default_instance_ = new FestCandleRankRsp();
  Fest_L2C_DigEgg_OpRsp::default_instance_ = new Fest_L2C_DigEgg_OpRsp();
  Fest_L2C_LogReq::default_instance_ = new Fest_L2C_LogReq();
  Fest_L2C_RTurnable_OpRsp::default_instance_ = new Fest_L2C_RTurnable_OpRsp();
  Fest_L2C_RTurnable_LogReq::default_instance_ = new Fest_L2C_RTurnable_LogReq();
  Fest_L2C_DonateOperate_Notify::default_instance_ = new Fest_L2C_DonateOperate_Notify();
  Fest_C2L_DonateGetServerRewardReq::default_instance_ = new Fest_C2L_DonateGetServerRewardReq();
  Fest_L2C_DrawPizeLogReq::default_instance_ = new Fest_L2C_DrawPizeLogReq();
  Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance_ = new Fest_L2C_DrawPizeChouJiangGetServerNumReq();
  Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance_ = new Fest_C2L_DrawPizeChouJiangGetServerNumRsp();
  Fest_C2L_ServerRankSyncReq::default_instance_ = new Fest_C2L_ServerRankSyncReq();
  Fest_C2L_ServerRankSyncRsp::default_instance_ = new Fest_C2L_ServerRankSyncRsp();
  Fest_S2C_CandleRankReward::default_instance_ = new Fest_S2C_CandleRankReward();
  Fest_L2S_CandleAddHarm::default_instance_ = new Fest_L2S_CandleAddHarm();
  Fest_S2L_CandleTotalHarmRsp::default_instance_ = new Fest_S2L_CandleTotalHarmRsp();
  Fest_L2S_CandleRankReq::default_instance_ = new Fest_L2S_CandleRankReq();
  Fest_BossFirstOptReq::default_instance_ = new Fest_BossFirstOptReq();
  Fest_BossFirstOptRsp::default_instance_ = new Fest_BossFirstOptRsp();
  Fest_BossInfoReq::default_instance_ = new Fest_BossInfoReq();
  FestBossInfo::default_instance_ = new FestBossInfo();
  Fest_BossInfoRsp::default_instance_ = new Fest_BossInfoRsp();
  Fest_BFGlobalDBKill::default_instance_ = new Fest_BFGlobalDBKill();
  Fest_BFGlobalDBEntry::default_instance_ = new Fest_BFGlobalDBEntry();
  Fest_BFGlobalDB::default_instance_ = new Fest_BFGlobalDB();
  L2CFest_BossKFSimpleReq::default_instance_ = new L2CFest_BossKFSimpleReq();
  C2LFest_BossKFNotify::default_instance_ = new C2LFest_BossKFNotify();
  C2LFest_BossInfoReq::default_instance_ = new C2LFest_BossInfoReq();
  C2LFest_BossFirstOptReq::default_instance_ = new C2LFest_BossFirstOptReq();
  C2LFest_HuiMengXiYou_GetRewardReq::default_instance_ = new C2LFest_HuiMengXiYou_GetRewardReq();
  L2CFest_HuiMengXiYou_GetRewardRsp::default_instance_ = new L2CFest_HuiMengXiYou_GetRewardRsp();
  NotifyFest_HuiMengXiYouRewardStatusChange::default_instance_ = new NotifyFest_HuiMengXiYouRewardStatusChange();
  XiYouGameInfo::default_instance_ = new XiYouGameInfo();
  NotiftFest_HuiMengXiYouStart::default_instance_ = new NotiftFest_HuiMengXiYouStart();
  NotiftFest_LogicHuiMengXiYouStart::default_instance_ = new NotiftFest_LogicHuiMengXiYouStart();
  NotifyFest_HuiMengXiYouSceneChange::default_instance_ = new NotifyFest_HuiMengXiYouSceneChange();
  NotiftFest_HuiMengXiYouGameStart::default_instance_ = new NotiftFest_HuiMengXiYouGameStart();
  NotiftFest_HuiMengXiYouEnd::default_instance_ = new NotiftFest_HuiMengXiYouEnd();
  NotiftFest_HuiMengXiYouGameInfo::default_instance_ = new NotiftFest_HuiMengXiYouGameInfo();
  NotifyFest_HuiMengXiYouGameEnd::default_instance_ = new NotifyFest_HuiMengXiYouGameEnd();
  NotifyFest_HuiMengXiYouEnterReq::default_instance_ = new NotifyFest_HuiMengXiYouEnterReq();
  NotifyFest_HuiMengXiYouEnterRsp::default_instance_ = new NotifyFest_HuiMengXiYouEnterRsp();
  NotifyFest_HuiMengXiYouEnterGameReq::default_instance_ = new NotifyFest_HuiMengXiYouEnterGameReq();
  NotifyFest_HuiMengXiYouEnterGameRsp::default_instance_ = new NotifyFest_HuiMengXiYouEnterGameRsp();
  C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance_ = new C2LFest_HuiMengXiYouGiveCaiJiReq();
  L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance_ = new L2CFest_HuiMengXiYouGiveCaiJiRsp();
  XiYouCaiJiCollectInfo::default_instance_ = new XiYouCaiJiCollectInfo();
  NotifyFest_HuiMengXiYouCollect::default_instance_ = new NotifyFest_HuiMengXiYouCollect();
  XiYouCaiJiCollectMonsterInfo::default_instance_ = new XiYouCaiJiCollectMonsterInfo();
  NotifyFest_HuiMengXiYouCollectSuccess::default_instance_ = new NotifyFest_HuiMengXiYouCollectSuccess();
  NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance_ = new NotifyFest_HuiMengXiYou_RoubaoziNotify();
  FMarryRankInfo::default_instance_ = new FMarryRankInfo();
  FMarryExpressRankInfo::default_instance_ = new FMarryExpressRankInfo();
  FMarryRankReq::default_instance_ = new FMarryRankReq();
  FMarryRankRsp::default_instance_ = new FMarryRankRsp();
  FMarryExpressReq::default_instance_ = new FMarryExpressReq();
  FMarryExpressRsp::default_instance_ = new FMarryExpressRsp();
  FMarryRoleReq::default_instance_ = new FMarryRoleReq();
  FMarryRoleRsp::default_instance_ = new FMarryRoleRsp();
  FMarryRoleRecvReq::default_instance_ = new FMarryRoleRecvReq();
  FMarryRoleRecvRsp::default_instance_ = new FMarryRoleRecvRsp();
  FMarryRecord::default_instance_ = new FMarryRecord();
  FMarryExpress::default_instance_ = new FMarryExpress();
  FMarryDBEntry::default_instance_ = new FMarryDBEntry();
  FMarryDB::default_instance_ = new FMarryDB();
  Fest_XiYouGlobalDBInfo::default_instance_ = new Fest_XiYouGlobalDBInfo();
  C2LFMarrySynScoreReq::default_instance_ = new C2LFMarrySynScoreReq();
  L2CFMarrySynScoreRsp::default_instance_ = new L2CFMarrySynScoreRsp();
  Fest_XiYouGlobalDBEntry::default_instance_ = new Fest_XiYouGlobalDBEntry();
  Fest_XiYouGlobalDB::default_instance_ = new Fest_XiYouGlobalDB();
  Fest_XiYouSyncNotify::default_instance_ = new Fest_XiYouSyncNotify();
  Fest_XiYouSyncLogic::default_instance_ = new Fest_XiYouSyncLogic();
  Fest_XiYouSyncFinish::default_instance_ = new Fest_XiYouSyncFinish();
  Fest_XiYouSyncForceClose::default_instance_ = new Fest_XiYouSyncForceClose();
  Fest_DayTotalRechargeFetchReq::default_instance_ = new Fest_DayTotalRechargeFetchReq();
  Fest_DayTotalRechargeFetchRsp::default_instance_ = new Fest_DayTotalRechargeFetchRsp();
  Fest_DayTotalRechargeNotify::default_instance_ = new Fest_DayTotalRechargeNotify();
  Fest_LoginRewardFetchReq::default_instance_ = new Fest_LoginRewardFetchReq();
  Fest_LoginRewardFetchRsp::default_instance_ = new Fest_LoginRewardFetchRsp();
  Fest_LoginRewardNotify::default_instance_ = new Fest_LoginRewardNotify();
  Fest_TotalRechargeFetchReq::default_instance_ = new Fest_TotalRechargeFetchReq();
  Fest_TotalRechargeFetchRsp::default_instance_ = new Fest_TotalRechargeFetchRsp();
  Fest_TotalRechargeNotify::default_instance_ = new Fest_TotalRechargeNotify();
  FestSimpleProto::default_instance_->InitAsDefaultInstance();
  FestSimpleListProto::default_instance_->InitAsDefaultInstance();
  FestRedPointProto::default_instance_->InitAsDefaultInstance();
  FestRedPointListProto::default_instance_->InitAsDefaultInstance();
  FestShopProto::default_instance_->InitAsDefaultInstance();
  FestShopDetailProto::default_instance_->InitAsDefaultInstance();
  FestSignDetailProto::default_instance_->InitAsDefaultInstance();
  FestDailyTotalRechargeDetailProto::default_instance_->InitAsDefaultInstance();
  FestGoldStoreProto::default_instance_->InitAsDefaultInstance();
  FestDigEggLogProto::default_instance_->InitAsDefaultInstance();
  FestDigEggTaskProto::default_instance_->InitAsDefaultInstance();
  FestDigEggProto::default_instance_->InitAsDefaultInstance();
  FestCandleProto::default_instance_->InitAsDefaultInstance();
  FestCandRankProto::default_instance_->InitAsDefaultInstance();
  FestRTurnableRechargeProto::default_instance_->InitAsDefaultInstance();
  FestTurnableProto::default_instance_->InitAsDefaultInstance();
  FestDonateProto::default_instance_->InitAsDefaultInstance();
  FestOnlineProto::default_instance_->InitAsDefaultInstance();
  FestCollectWordProto::default_instance_->InitAsDefaultInstance();
  FestBossDetailProto::default_instance_->InitAsDefaultInstance();
  FestMarryDetail::default_instance_->InitAsDefaultInstance();
  FestDayTotalRechargeProto::default_instance_->InitAsDefaultInstance();
  FestLoginProto::default_instance_->InitAsDefaultInstance();
  FestTotalRechargeProto::default_instance_->InitAsDefaultInstance();
  FestDetailProto::default_instance_->InitAsDefaultInstance();
  Fest_SimpleListRsp::default_instance_->InitAsDefaultInstance();
  Fest_SimpleInfoNotify::default_instance_->InitAsDefaultInstance();
  Fest_DetailReq::default_instance_->InitAsDefaultInstance();
  Fest_DetailRsp::default_instance_->InitAsDefaultInstance();
  Fest_DetailUpdateRsp::default_instance_->InitAsDefaultInstance();
  Fest_RedPointInfoRsp::default_instance_->InitAsDefaultInstance();
  Fest_RedPointInfoNotify::default_instance_->InitAsDefaultInstance();
  Fest_ShopBuyReq::default_instance_->InitAsDefaultInstance();
  Fest_ShopBuyRsp::default_instance_->InitAsDefaultInstance();
  Fest_GetDailyRechargeRewardReq::default_instance_->InitAsDefaultInstance();
  Fest_DailyRechargeStatusNotify::default_instance_->InitAsDefaultInstance();
  FestRTurnableRechargeTurnableReq::default_instance_->InitAsDefaultInstance();
  FestRTurnableRechargeTurnableRsp::default_instance_->InitAsDefaultInstance();
  Fest_SignReq::default_instance_->InitAsDefaultInstance();
  Fest_SignRsp::default_instance_->InitAsDefaultInstance();
  Fest_GoldStoreUpateBuyRsp::default_instance_->InitAsDefaultInstance();
  Fest_DigEggReq::default_instance_->InitAsDefaultInstance();
  Fest_DigEggRsp::default_instance_->InitAsDefaultInstance();
  Fest_DigEggRestReq::default_instance_->InitAsDefaultInstance();
  Fest_DigEggRestRsp::default_instance_->InitAsDefaultInstance();
  Fest_DigEggLogReq::default_instance_->InitAsDefaultInstance();
  Fest_DigEggLogRsp::default_instance_->InitAsDefaultInstance();
  Fest_DigEggTaskFetchReq::default_instance_->InitAsDefaultInstance();
  Fest_DigEggTaskFetchRsp::default_instance_->InitAsDefaultInstance();
  Fest_DigEggTaskUpdateRsp::default_instance_->InitAsDefaultInstance();
  Fest_RTuranbleLogReq::default_instance_->InitAsDefaultInstance();
  Fest_RTuranbleLogRsp::default_instance_->InitAsDefaultInstance();
  TurntableTurnTableReq::default_instance_->InitAsDefaultInstance();
  TurntableTurnTableRsp::default_instance_->InitAsDefaultInstance();
  TurntableRewardReq::default_instance_->InitAsDefaultInstance();
  TurntableRewardRsp::default_instance_->InitAsDefaultInstance();
  TurntableStatusChange::default_instance_->InitAsDefaultInstance();
  FestDonateGetServerNumReq::default_instance_->InitAsDefaultInstance();
  FestDonateGetServerNumRsp::default_instance_->InitAsDefaultInstance();
  FestDonateDonateReq::default_instance_->InitAsDefaultInstance();
  FestDonateDonateRsp::default_instance_->InitAsDefaultInstance();
  FestDonateGetSingleRewardReq::default_instance_->InitAsDefaultInstance();
  FestDonateGetSingleRewardRsp::default_instance_->InitAsDefaultInstance();
  FestDonateGetServerRewardReq::default_instance_->InitAsDefaultInstance();
  FestDonateGetServerRewardRsp::default_instance_->InitAsDefaultInstance();
  FestDonateGetTaskRewardReq::default_instance_->InitAsDefaultInstance();
  FestDonateGetTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  FestDonateTaskTtatusChange::default_instance_->InitAsDefaultInstance();
  FestOnlineGetRewardReq::default_instance_->InitAsDefaultInstance();
  FestOnlineGetRewardRsp::default_instance_->InitAsDefaultInstance();
  FestCollectWorldExchargeReq::default_instance_->InitAsDefaultInstance();
  FestCollectWorldExchargeRsp::default_instance_->InitAsDefaultInstance();
  FestDrawPizeChouJiangReq::default_instance_->InitAsDefaultInstance();
  FestDrawPizeChouJiangRsp::default_instance_->InitAsDefaultInstance();
  FestDrawPizeGetRewardReq::default_instance_->InitAsDefaultInstance();
  FestDrawPizeGetRewardRsp::default_instance_->InitAsDefaultInstance();
  FestDrawPizeLogReq::default_instance_->InitAsDefaultInstance();
  FestDrawPizeLogRsp::default_instance_->InitAsDefaultInstance();
  FestDrawPizeGetServerNumReq::default_instance_->InitAsDefaultInstance();
  FestDrawPizeGetServerNumRsp::default_instance_->InitAsDefaultInstance();
  FestServerRankGetRewardReq::default_instance_->InitAsDefaultInstance();
  FestServerRankGetRewardRsp::default_instance_->InitAsDefaultInstance();
  FestServerRankRewardStatusChange::default_instance_->InitAsDefaultInstance();
  FestServerRankGetMyRankReq::default_instance_->InitAsDefaultInstance();
  FestServerRankGetMyRankRsp::default_instance_->InitAsDefaultInstance();
  FestServerRankGetAllRankReq::default_instance_->InitAsDefaultInstance();
  FestServerRankGetAllRankRsp::default_instance_->InitAsDefaultInstance();
  FestServerRankBuyGiftReq::default_instance_->InitAsDefaultInstance();
  FestServerRankBuyGiftRsp::default_instance_->InitAsDefaultInstance();
  FestServerRankGetRedPointRewardReq::default_instance_->InitAsDefaultInstance();
  FestServerRankGetRedPointRewardRsp::default_instance_->InitAsDefaultInstance();
  FestServerRankStatusChange::default_instance_->InitAsDefaultInstance();
  FestCandleFetchReq::default_instance_->InitAsDefaultInstance();
  FestCandleFetchRsp::default_instance_->InitAsDefaultInstance();
  FestCandleFetchLstRsp::default_instance_->InitAsDefaultInstance();
  FestCandleRankReq::default_instance_->InitAsDefaultInstance();
  FestCandleRankRsp::default_instance_->InitAsDefaultInstance();
  Fest_L2C_DigEgg_OpRsp::default_instance_->InitAsDefaultInstance();
  Fest_L2C_LogReq::default_instance_->InitAsDefaultInstance();
  Fest_L2C_RTurnable_OpRsp::default_instance_->InitAsDefaultInstance();
  Fest_L2C_RTurnable_LogReq::default_instance_->InitAsDefaultInstance();
  Fest_L2C_DonateOperate_Notify::default_instance_->InitAsDefaultInstance();
  Fest_C2L_DonateGetServerRewardReq::default_instance_->InitAsDefaultInstance();
  Fest_L2C_DrawPizeLogReq::default_instance_->InitAsDefaultInstance();
  Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance_->InitAsDefaultInstance();
  Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance_->InitAsDefaultInstance();
  Fest_C2L_ServerRankSyncReq::default_instance_->InitAsDefaultInstance();
  Fest_C2L_ServerRankSyncRsp::default_instance_->InitAsDefaultInstance();
  Fest_S2C_CandleRankReward::default_instance_->InitAsDefaultInstance();
  Fest_L2S_CandleAddHarm::default_instance_->InitAsDefaultInstance();
  Fest_S2L_CandleTotalHarmRsp::default_instance_->InitAsDefaultInstance();
  Fest_L2S_CandleRankReq::default_instance_->InitAsDefaultInstance();
  Fest_BossFirstOptReq::default_instance_->InitAsDefaultInstance();
  Fest_BossFirstOptRsp::default_instance_->InitAsDefaultInstance();
  Fest_BossInfoReq::default_instance_->InitAsDefaultInstance();
  FestBossInfo::default_instance_->InitAsDefaultInstance();
  Fest_BossInfoRsp::default_instance_->InitAsDefaultInstance();
  Fest_BFGlobalDBKill::default_instance_->InitAsDefaultInstance();
  Fest_BFGlobalDBEntry::default_instance_->InitAsDefaultInstance();
  Fest_BFGlobalDB::default_instance_->InitAsDefaultInstance();
  L2CFest_BossKFSimpleReq::default_instance_->InitAsDefaultInstance();
  C2LFest_BossKFNotify::default_instance_->InitAsDefaultInstance();
  C2LFest_BossInfoReq::default_instance_->InitAsDefaultInstance();
  C2LFest_BossFirstOptReq::default_instance_->InitAsDefaultInstance();
  C2LFest_HuiMengXiYou_GetRewardReq::default_instance_->InitAsDefaultInstance();
  L2CFest_HuiMengXiYou_GetRewardRsp::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouRewardStatusChange::default_instance_->InitAsDefaultInstance();
  XiYouGameInfo::default_instance_->InitAsDefaultInstance();
  NotiftFest_HuiMengXiYouStart::default_instance_->InitAsDefaultInstance();
  NotiftFest_LogicHuiMengXiYouStart::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouSceneChange::default_instance_->InitAsDefaultInstance();
  NotiftFest_HuiMengXiYouGameStart::default_instance_->InitAsDefaultInstance();
  NotiftFest_HuiMengXiYouEnd::default_instance_->InitAsDefaultInstance();
  NotiftFest_HuiMengXiYouGameInfo::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouGameEnd::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouEnterReq::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouEnterRsp::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouEnterGameReq::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouEnterGameRsp::default_instance_->InitAsDefaultInstance();
  C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance_->InitAsDefaultInstance();
  L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance_->InitAsDefaultInstance();
  XiYouCaiJiCollectInfo::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouCollect::default_instance_->InitAsDefaultInstance();
  XiYouCaiJiCollectMonsterInfo::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYouCollectSuccess::default_instance_->InitAsDefaultInstance();
  NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance_->InitAsDefaultInstance();
  FMarryRankInfo::default_instance_->InitAsDefaultInstance();
  FMarryExpressRankInfo::default_instance_->InitAsDefaultInstance();
  FMarryRankReq::default_instance_->InitAsDefaultInstance();
  FMarryRankRsp::default_instance_->InitAsDefaultInstance();
  FMarryExpressReq::default_instance_->InitAsDefaultInstance();
  FMarryExpressRsp::default_instance_->InitAsDefaultInstance();
  FMarryRoleReq::default_instance_->InitAsDefaultInstance();
  FMarryRoleRsp::default_instance_->InitAsDefaultInstance();
  FMarryRoleRecvReq::default_instance_->InitAsDefaultInstance();
  FMarryRoleRecvRsp::default_instance_->InitAsDefaultInstance();
  FMarryRecord::default_instance_->InitAsDefaultInstance();
  FMarryExpress::default_instance_->InitAsDefaultInstance();
  FMarryDBEntry::default_instance_->InitAsDefaultInstance();
  FMarryDB::default_instance_->InitAsDefaultInstance();
  Fest_XiYouGlobalDBInfo::default_instance_->InitAsDefaultInstance();
  C2LFMarrySynScoreReq::default_instance_->InitAsDefaultInstance();
  L2CFMarrySynScoreRsp::default_instance_->InitAsDefaultInstance();
  Fest_XiYouGlobalDBEntry::default_instance_->InitAsDefaultInstance();
  Fest_XiYouGlobalDB::default_instance_->InitAsDefaultInstance();
  Fest_XiYouSyncNotify::default_instance_->InitAsDefaultInstance();
  Fest_XiYouSyncLogic::default_instance_->InitAsDefaultInstance();
  Fest_XiYouSyncFinish::default_instance_->InitAsDefaultInstance();
  Fest_XiYouSyncForceClose::default_instance_->InitAsDefaultInstance();
  Fest_DayTotalRechargeFetchReq::default_instance_->InitAsDefaultInstance();
  Fest_DayTotalRechargeFetchRsp::default_instance_->InitAsDefaultInstance();
  Fest_DayTotalRechargeNotify::default_instance_->InitAsDefaultInstance();
  Fest_LoginRewardFetchReq::default_instance_->InitAsDefaultInstance();
  Fest_LoginRewardFetchRsp::default_instance_->InitAsDefaultInstance();
  Fest_LoginRewardNotify::default_instance_->InitAsDefaultInstance();
  Fest_TotalRechargeFetchReq::default_instance_->InitAsDefaultInstance();
  Fest_TotalRechargeFetchRsp::default_instance_->InitAsDefaultInstance();
  Fest_TotalRechargeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Fest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Fest_2eproto {
  StaticDescriptorInitializer_Fest_2eproto() {
    protobuf_AddDesc_Fest_2eproto();
  }
} static_descriptor_initializer_Fest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FestSimpleProto::kTemplateIdFieldNumber;
const int FestSimpleProto::kStateFieldNumber;
const int FestSimpleProto::kPeriodFieldNumber;
const int FestSimpleProto::kRedpointFieldNumber;
const int FestSimpleProto::kEndtimeFieldNumber;
const int FestSimpleProto::kBegintimeFieldNumber;
#endif  // !_MSC_VER

FestSimpleProto::FestSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestSimpleProto::InitAsDefaultInstance() {
}

FestSimpleProto::FestSimpleProto(const FestSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  state_ = 0;
  period_ = 0;
  redpoint_ = 0;
  endtime_ = GOOGLE_ULONGLONG(0);
  begintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestSimpleProto::~FestSimpleProto() {
  SharedDtor();
}

void FestSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestSimpleProto_descriptor_;
}

const FestSimpleProto& FestSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestSimpleProto* FestSimpleProto::default_instance_ = NULL;

FestSimpleProto* FestSimpleProto::New() const {
  return new FestSimpleProto;
}

void FestSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    state_ = 0;
    period_ = 0;
    redpoint_ = 0;
    endtime_ = GOOGLE_ULONGLONG(0);
    begintime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_period;
        break;
      }

      // optional int32 period = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_redpoint;
        break;
      }

      // optional int32 redpoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redpoint_)));
          set_has_redpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_begintime;
        break;
      }

      // optional uint64 begintime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 period = 3;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->period(), output);
  }

  // optional int32 redpoint = 4;
  if (has_redpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->redpoint(), output);
  }

  // optional uint64 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  // optional uint64 begintime = 6;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 period = 3;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->period(), target);
  }

  // optional int32 redpoint = 4;
  if (has_redpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->redpoint(), target);
  }

  // optional uint64 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endtime(), target);
  }

  // optional uint64 begintime = 6;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 period = 3;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // optional int32 redpoint = 4;
    if (has_redpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redpoint());
    }

    // optional uint64 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 begintime = 6;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestSimpleProto::MergeFrom(const FestSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_redpoint()) {
      set_redpoint(from.redpoint());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestSimpleProto::CopyFrom(const FestSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestSimpleProto::IsInitialized() const {

  return true;
}

void FestSimpleProto::Swap(FestSimpleProto* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(state_, other->state_);
    std::swap(period_, other->period_);
    std::swap(redpoint_, other->redpoint_);
    std::swap(endtime_, other->endtime_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestSimpleProto_descriptor_;
  metadata.reflection = FestSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestSimpleListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestSimpleListProto::FestSimpleListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestSimpleListProto::InitAsDefaultInstance() {
}

FestSimpleListProto::FestSimpleListProto(const FestSimpleListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestSimpleListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestSimpleListProto::~FestSimpleListProto() {
  SharedDtor();
}

void FestSimpleListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestSimpleListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestSimpleListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestSimpleListProto_descriptor_;
}

const FestSimpleListProto& FestSimpleListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestSimpleListProto* FestSimpleListProto::default_instance_ = NULL;

FestSimpleListProto* FestSimpleListProto::New() const {
  return new FestSimpleListProto;
}

void FestSimpleListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestSimpleListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestSimpleProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestSimpleListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestSimpleListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestSimpleListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestSimpleProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestSimpleListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestSimpleListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestSimpleListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestSimpleListProto::MergeFrom(const FestSimpleListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestSimpleListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestSimpleListProto::CopyFrom(const FestSimpleListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestSimpleListProto::IsInitialized() const {

  return true;
}

void FestSimpleListProto::Swap(FestSimpleListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestSimpleListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestSimpleListProto_descriptor_;
  metadata.reflection = FestSimpleListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRedPointProto::kTemplateIdFieldNumber;
const int FestRedPointProto::kRedpointFieldNumber;
#endif  // !_MSC_VER

FestRedPointProto::FestRedPointProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRedPointProto::InitAsDefaultInstance() {
}

FestRedPointProto::FestRedPointProto(const FestRedPointProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRedPointProto::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  redpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRedPointProto::~FestRedPointProto() {
  SharedDtor();
}

void FestRedPointProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRedPointProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRedPointProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRedPointProto_descriptor_;
}

const FestRedPointProto& FestRedPointProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestRedPointProto* FestRedPointProto::default_instance_ = NULL;

FestRedPointProto* FestRedPointProto::New() const {
  return new FestRedPointProto;
}

void FestRedPointProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    redpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRedPointProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_redpoint;
        break;
      }

      // optional int32 redpoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redpoint_)));
          set_has_redpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRedPointProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 redpoint = 2;
  if (has_redpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->redpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRedPointProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 redpoint = 2;
  if (has_redpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->redpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRedPointProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 redpoint = 2;
    if (has_redpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRedPointProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRedPointProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRedPointProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRedPointProto::MergeFrom(const FestRedPointProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_redpoint()) {
      set_redpoint(from.redpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRedPointProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRedPointProto::CopyFrom(const FestRedPointProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRedPointProto::IsInitialized() const {

  return true;
}

void FestRedPointProto::Swap(FestRedPointProto* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(redpoint_, other->redpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRedPointProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRedPointProto_descriptor_;
  metadata.reflection = FestRedPointProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRedPointListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestRedPointListProto::FestRedPointListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRedPointListProto::InitAsDefaultInstance() {
}

FestRedPointListProto::FestRedPointListProto(const FestRedPointListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRedPointListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRedPointListProto::~FestRedPointListProto() {
  SharedDtor();
}

void FestRedPointListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRedPointListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRedPointListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRedPointListProto_descriptor_;
}

const FestRedPointListProto& FestRedPointListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestRedPointListProto* FestRedPointListProto::default_instance_ = NULL;

FestRedPointListProto* FestRedPointListProto::New() const {
  return new FestRedPointListProto;
}

void FestRedPointListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRedPointListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestRedPointProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRedPointListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestRedPointProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRedPointListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestRedPointProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRedPointListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestRedPointProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRedPointListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRedPointListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRedPointListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRedPointListProto::MergeFrom(const FestRedPointListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRedPointListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRedPointListProto::CopyFrom(const FestRedPointListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRedPointListProto::IsInitialized() const {

  return true;
}

void FestRedPointListProto::Swap(FestRedPointListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRedPointListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRedPointListProto_descriptor_;
  metadata.reflection = FestRedPointListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestShopProto::kIdFieldNumber;
const int FestShopProto::kNumFieldNumber;
#endif  // !_MSC_VER

FestShopProto::FestShopProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestShopProto::InitAsDefaultInstance() {
}

FestShopProto::FestShopProto(const FestShopProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestShopProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestShopProto::~FestShopProto() {
  SharedDtor();
}

void FestShopProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestShopProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestShopProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestShopProto_descriptor_;
}

const FestShopProto& FestShopProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestShopProto* FestShopProto::default_instance_ = NULL;

FestShopProto* FestShopProto::New() const {
  return new FestShopProto;
}

void FestShopProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestShopProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestShopProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestShopProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestShopProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestShopProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestShopProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestShopProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestShopProto::MergeFrom(const FestShopProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestShopProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestShopProto::CopyFrom(const FestShopProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestShopProto::IsInitialized() const {

  return true;
}

void FestShopProto::Swap(FestShopProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestShopProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestShopProto_descriptor_;
  metadata.reflection = FestShopProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestShopDetailProto::kBuyFieldNumber;
#endif  // !_MSC_VER

FestShopDetailProto::FestShopDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestShopDetailProto::InitAsDefaultInstance() {
}

FestShopDetailProto::FestShopDetailProto(const FestShopDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestShopDetailProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestShopDetailProto::~FestShopDetailProto() {
  SharedDtor();
}

void FestShopDetailProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestShopDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestShopDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestShopDetailProto_descriptor_;
}

const FestShopDetailProto& FestShopDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestShopDetailProto* FestShopDetailProto::default_instance_ = NULL;

FestShopDetailProto* FestShopDetailProto::New() const {
  return new FestShopDetailProto;
}

void FestShopDetailProto::Clear() {
  buy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestShopDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestShopProto buy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestShopDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestShopProto buy = 1;
  for (int i = 0; i < this->buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestShopDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestShopProto buy = 1;
  for (int i = 0; i < this->buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestShopDetailProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestShopProto buy = 1;
  total_size += 1 * this->buy_size();
  for (int i = 0; i < this->buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestShopDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestShopDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestShopDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestShopDetailProto::MergeFrom(const FestShopDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_.MergeFrom(from.buy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestShopDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestShopDetailProto::CopyFrom(const FestShopDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestShopDetailProto::IsInitialized() const {

  return true;
}

void FestShopDetailProto::Swap(FestShopDetailProto* other) {
  if (other != this) {
    buy_.Swap(&other->buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestShopDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestShopDetailProto_descriptor_;
  metadata.reflection = FestShopDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestSignDetailProto::kIsSignFieldNumber;
#endif  // !_MSC_VER

FestSignDetailProto::FestSignDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestSignDetailProto::InitAsDefaultInstance() {
}

FestSignDetailProto::FestSignDetailProto(const FestSignDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestSignDetailProto::SharedCtor() {
  _cached_size_ = 0;
  is_sign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestSignDetailProto::~FestSignDetailProto() {
  SharedDtor();
}

void FestSignDetailProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestSignDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestSignDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestSignDetailProto_descriptor_;
}

const FestSignDetailProto& FestSignDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestSignDetailProto* FestSignDetailProto::default_instance_ = NULL;

FestSignDetailProto* FestSignDetailProto::New() const {
  return new FestSignDetailProto;
}

void FestSignDetailProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_sign_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestSignDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_sign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sign_)));
          set_has_is_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestSignDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_sign = 1;
  if (has_is_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestSignDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_sign = 1;
  if (has_is_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestSignDetailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_sign = 1;
    if (has_is_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestSignDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestSignDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestSignDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestSignDetailProto::MergeFrom(const FestSignDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_sign()) {
      set_is_sign(from.is_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestSignDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestSignDetailProto::CopyFrom(const FestSignDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestSignDetailProto::IsInitialized() const {

  return true;
}

void FestSignDetailProto::Swap(FestSignDetailProto* other) {
  if (other != this) {
    std::swap(is_sign_, other->is_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestSignDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestSignDetailProto_descriptor_;
  metadata.reflection = FestSignDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDailyTotalRechargeDetailProto::kDataFieldNumber;
const int FestDailyTotalRechargeDetailProto::kTotalRechargeFieldNumber;
#endif  // !_MSC_VER

FestDailyTotalRechargeDetailProto::FestDailyTotalRechargeDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDailyTotalRechargeDetailProto::InitAsDefaultInstance() {
}

FestDailyTotalRechargeDetailProto::FestDailyTotalRechargeDetailProto(const FestDailyTotalRechargeDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDailyTotalRechargeDetailProto::SharedCtor() {
  _cached_size_ = 0;
  total_recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDailyTotalRechargeDetailProto::~FestDailyTotalRechargeDetailProto() {
  SharedDtor();
}

void FestDailyTotalRechargeDetailProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDailyTotalRechargeDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDailyTotalRechargeDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDailyTotalRechargeDetailProto_descriptor_;
}

const FestDailyTotalRechargeDetailProto& FestDailyTotalRechargeDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDailyTotalRechargeDetailProto* FestDailyTotalRechargeDetailProto::default_instance_ = NULL;

FestDailyTotalRechargeDetailProto* FestDailyTotalRechargeDetailProto::New() const {
  return new FestDailyTotalRechargeDetailProto;
}

void FestDailyTotalRechargeDetailProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_recharge_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDailyTotalRechargeDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_total_recharge;
        break;
      }

      // optional uint32 total_recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDailyTotalRechargeDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 total_recharge = 2;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDailyTotalRechargeDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 total_recharge = 2;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDailyTotalRechargeDetailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 total_recharge = 2;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

  }
  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDailyTotalRechargeDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDailyTotalRechargeDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDailyTotalRechargeDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDailyTotalRechargeDetailProto::MergeFrom(const FestDailyTotalRechargeDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDailyTotalRechargeDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDailyTotalRechargeDetailProto::CopyFrom(const FestDailyTotalRechargeDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDailyTotalRechargeDetailProto::IsInitialized() const {

  return true;
}

void FestDailyTotalRechargeDetailProto::Swap(FestDailyTotalRechargeDetailProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDailyTotalRechargeDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDailyTotalRechargeDetailProto_descriptor_;
  metadata.reflection = FestDailyTotalRechargeDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestGoldStoreProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestGoldStoreProto::FestGoldStoreProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestGoldStoreProto::InitAsDefaultInstance() {
}

FestGoldStoreProto::FestGoldStoreProto(const FestGoldStoreProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestGoldStoreProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestGoldStoreProto::~FestGoldStoreProto() {
  SharedDtor();
}

void FestGoldStoreProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestGoldStoreProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestGoldStoreProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestGoldStoreProto_descriptor_;
}

const FestGoldStoreProto& FestGoldStoreProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestGoldStoreProto* FestGoldStoreProto::default_instance_ = NULL;

FestGoldStoreProto* FestGoldStoreProto::New() const {
  return new FestGoldStoreProto;
}

void FestGoldStoreProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestGoldStoreProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestGoldStoreProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestGoldStoreProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestGoldStoreProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestGoldStoreProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestGoldStoreProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestGoldStoreProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestGoldStoreProto::MergeFrom(const FestGoldStoreProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestGoldStoreProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestGoldStoreProto::CopyFrom(const FestGoldStoreProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestGoldStoreProto::IsInitialized() const {

  return true;
}

void FestGoldStoreProto::Swap(FestGoldStoreProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestGoldStoreProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestGoldStoreProto_descriptor_;
  metadata.reflection = FestGoldStoreProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggLogProto::kNameFieldNumber;
const int FestDigEggLogProto::kIdFieldNumber;
const int FestDigEggLogProto::kCidFieldNumber;
#endif  // !_MSC_VER

FestDigEggLogProto::FestDigEggLogProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggLogProto::InitAsDefaultInstance() {
}

FestDigEggLogProto::FestDigEggLogProto(const FestDigEggLogProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggLogProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggLogProto::~FestDigEggLogProto() {
  SharedDtor();
}

void FestDigEggLogProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FestDigEggLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggLogProto_descriptor_;
}

const FestDigEggLogProto& FestDigEggLogProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDigEggLogProto* FestDigEggLogProto::default_instance_ = NULL;

FestDigEggLogProto* FestDigEggLogProto::New() const {
  return new FestDigEggLogProto;
}

void FestDigEggLogProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggLogProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggLogProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggLogProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggLogProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggLogProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggLogProto::MergeFrom(const FestDigEggLogProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggLogProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggLogProto::CopyFrom(const FestDigEggLogProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggLogProto::IsInitialized() const {

  return true;
}

void FestDigEggLogProto::Swap(FestDigEggLogProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggLogProto_descriptor_;
  metadata.reflection = FestDigEggLogProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggTaskProto::kIdFieldNumber;
const int FestDigEggTaskProto::kCurFieldNumber;
const int FestDigEggTaskProto::kFetchFieldNumber;
#endif  // !_MSC_VER

FestDigEggTaskProto::FestDigEggTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggTaskProto::InitAsDefaultInstance() {
}

FestDigEggTaskProto::FestDigEggTaskProto(const FestDigEggTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggTaskProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_ = 0;
  fetch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggTaskProto::~FestDigEggTaskProto() {
  SharedDtor();
}

void FestDigEggTaskProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDigEggTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggTaskProto_descriptor_;
}

const FestDigEggTaskProto& FestDigEggTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDigEggTaskProto* FestDigEggTaskProto::default_instance_ = NULL;

FestDigEggTaskProto* FestDigEggTaskProto::New() const {
  return new FestDigEggTaskProto;
}

void FestDigEggTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_ = 0;
    fetch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur(), target);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // optional int32 fetch = 3;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggTaskProto::MergeFrom(const FestDigEggTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggTaskProto::CopyFrom(const FestDigEggTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggTaskProto::IsInitialized() const {

  return true;
}

void FestDigEggTaskProto::Swap(FestDigEggTaskProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_, other->cur_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggTaskProto_descriptor_;
  metadata.reflection = FestDigEggTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggProto::kInfoFieldNumber;
const int FestDigEggProto::kFreeFieldNumber;
const int FestDigEggProto::kTaskFieldNumber;
#endif  // !_MSC_VER

FestDigEggProto::FestDigEggProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggProto::InitAsDefaultInstance() {
}

FestDigEggProto::FestDigEggProto(const FestDigEggProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggProto::SharedCtor() {
  _cached_size_ = 0;
  free_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggProto::~FestDigEggProto() {
  SharedDtor();
}

void FestDigEggProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDigEggProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggProto_descriptor_;
}

const FestDigEggProto& FestDigEggProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDigEggProto* FestDigEggProto::default_instance_ = NULL;

FestDigEggProto* FestDigEggProto::New() const {
  return new FestDigEggProto;
}

void FestDigEggProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    free_ = 0;
  }
  info_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_free;
        break;
      }

      // optional int32 free = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task;
        break;
      }

      // repeated .proto_ff.FestDigEggTaskProto task = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int32 free = 2;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->free(), output);
  }

  // repeated .proto_ff.FestDigEggTaskProto task = 3;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int32 free = 2;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->free(), target);
  }

  // repeated .proto_ff.FestDigEggTaskProto task = 3;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 free = 2;
    if (has_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free());
    }

  }
  // repeated .proto_ff.ComPair info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .proto_ff.FestDigEggTaskProto task = 3;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggProto::MergeFrom(const FestDigEggProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_free()) {
      set_free(from.free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggProto::CopyFrom(const FestDigEggProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggProto::IsInitialized() const {

  return true;
}

void FestDigEggProto::Swap(FestDigEggProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(free_, other->free_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggProto_descriptor_;
  metadata.reflection = FestDigEggProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleProto::kIdLstFieldNumber;
#endif  // !_MSC_VER

FestCandleProto::FestCandleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleProto::InitAsDefaultInstance() {
}

FestCandleProto::FestCandleProto(const FestCandleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleProto::~FestCandleProto() {
  SharedDtor();
}

void FestCandleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleProto_descriptor_;
}

const FestCandleProto& FestCandleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandleProto* FestCandleProto::default_instance_ = NULL;

FestCandleProto* FestCandleProto::New() const {
  return new FestCandleProto;
}

void FestCandleProto::Clear() {
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id_lst = 1;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id_lst = 1;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleProto::ByteSize() const {
  int total_size = 0;

  // repeated int32 id_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleProto::MergeFrom(const FestCandleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleProto::CopyFrom(const FestCandleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleProto::IsInitialized() const {

  return true;
}

void FestCandleProto::Swap(FestCandleProto* other) {
  if (other != this) {
    id_lst_.Swap(&other->id_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleProto_descriptor_;
  metadata.reflection = FestCandleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandRankProto::kCidFieldNumber;
const int FestCandRankProto::kNameFieldNumber;
const int FestCandRankProto::kHarmFieldNumber;
const int FestCandRankProto::kZidFieldNumber;
const int FestCandRankProto::kRankFieldNumber;
#endif  // !_MSC_VER

FestCandRankProto::FestCandRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandRankProto::InitAsDefaultInstance() {
}

FestCandRankProto::FestCandRankProto(const FestCandRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandRankProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandRankProto::~FestCandRankProto() {
  SharedDtor();
}

void FestCandRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FestCandRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandRankProto_descriptor_;
}

const FestCandRankProto& FestCandRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandRankProto* FestCandRankProto::default_instance_ = NULL;

FestCandRankProto* FestCandRankProto::New() const {
  return new FestCandRankProto;
}

void FestCandRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    harm_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->harm(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->harm(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandRankProto::MergeFrom(const FestCandRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandRankProto::CopyFrom(const FestCandRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandRankProto::IsInitialized() const {

  return true;
}

void FestCandRankProto::Swap(FestCandRankProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(harm_, other->harm_);
    std::swap(zid_, other->zid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandRankProto_descriptor_;
  metadata.reflection = FestCandRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRTurnableRechargeProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestRTurnableRechargeProto::FestRTurnableRechargeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRTurnableRechargeProto::InitAsDefaultInstance() {
}

FestRTurnableRechargeProto::FestRTurnableRechargeProto(const FestRTurnableRechargeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRTurnableRechargeProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRTurnableRechargeProto::~FestRTurnableRechargeProto() {
  SharedDtor();
}

void FestRTurnableRechargeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRTurnableRechargeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRTurnableRechargeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRTurnableRechargeProto_descriptor_;
}

const FestRTurnableRechargeProto& FestRTurnableRechargeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestRTurnableRechargeProto* FestRTurnableRechargeProto::default_instance_ = NULL;

FestRTurnableRechargeProto* FestRTurnableRechargeProto::New() const {
  return new FestRTurnableRechargeProto;
}

void FestRTurnableRechargeProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRTurnableRechargeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRTurnableRechargeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRTurnableRechargeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRTurnableRechargeProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRTurnableRechargeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRTurnableRechargeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRTurnableRechargeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRTurnableRechargeProto::MergeFrom(const FestRTurnableRechargeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRTurnableRechargeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRTurnableRechargeProto::CopyFrom(const FestRTurnableRechargeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRTurnableRechargeProto::IsInitialized() const {

  return true;
}

void FestRTurnableRechargeProto::Swap(FestRTurnableRechargeProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRTurnableRechargeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRTurnableRechargeProto_descriptor_;
  metadata.reflection = FestRTurnableRechargeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestTurnableProto::kTaskFieldNumber;
const int FestTurnableProto::kLeftNumFieldNumber;
const int FestTurnableProto::kChouJiangIdsFieldNumber;
#endif  // !_MSC_VER

FestTurnableProto::FestTurnableProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestTurnableProto::InitAsDefaultInstance() {
}

FestTurnableProto::FestTurnableProto(const FestTurnableProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestTurnableProto::SharedCtor() {
  _cached_size_ = 0;
  left_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestTurnableProto::~FestTurnableProto() {
  SharedDtor();
}

void FestTurnableProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestTurnableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestTurnableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestTurnableProto_descriptor_;
}

const FestTurnableProto& FestTurnableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestTurnableProto* FestTurnableProto::default_instance_ = NULL;

FestTurnableProto* FestTurnableProto::New() const {
  return new FestTurnableProto;
}

void FestTurnableProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    left_num_ = 0u;
  }
  task_.Clear();
  chou_jiang_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestTurnableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestTurnableTaskProto task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectTag(16)) goto parse_left_num;
        break;
      }

      // optional uint32 left_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chou_jiang_ids;
        break;
      }

      // repeated int32 chou_jiang_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chou_jiang_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_chou_jiang_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chou_jiang_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chou_jiang_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestTurnableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  // optional uint32 left_num = 2;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_num(), output);
  }

  // repeated int32 chou_jiang_ids = 5;
  for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->chou_jiang_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestTurnableProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  // optional uint32 left_num = 2;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_num(), target);
  }

  // repeated int32 chou_jiang_ids = 5;
  for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->chou_jiang_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestTurnableProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 left_num = 2;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_num());
    }

  }
  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated int32 chou_jiang_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chou_jiang_ids(i));
    }
    total_size += 1 * this->chou_jiang_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestTurnableProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestTurnableProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestTurnableProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestTurnableProto::MergeFrom(const FestTurnableProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  chou_jiang_ids_.MergeFrom(from.chou_jiang_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestTurnableProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestTurnableProto::CopyFrom(const FestTurnableProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestTurnableProto::IsInitialized() const {

  return true;
}

void FestTurnableProto::Swap(FestTurnableProto* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(left_num_, other->left_num_);
    chou_jiang_ids_.Swap(&other->chou_jiang_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestTurnableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestTurnableProto_descriptor_;
  metadata.reflection = FestTurnableProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateProto::kSingleFieldNumber;
const int FestDonateProto::kServerFieldNumber;
const int FestDonateProto::kSingleNumFieldNumber;
const int FestDonateProto::kTaskFieldNumber;
#endif  // !_MSC_VER

FestDonateProto::FestDonateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateProto::InitAsDefaultInstance() {
}

FestDonateProto::FestDonateProto(const FestDonateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateProto::SharedCtor() {
  _cached_size_ = 0;
  single_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateProto::~FestDonateProto() {
  SharedDtor();
}

void FestDonateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateProto_descriptor_;
}

const FestDonateProto& FestDonateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateProto* FestDonateProto::default_instance_ = NULL;

FestDonateProto* FestDonateProto::New() const {
  return new FestDonateProto;
}

void FestDonateProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    single_num_ = 0u;
  }
  single_.Clear();
  server_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDonateSingleProto single = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_single;
        if (input->ExpectTag(18)) goto parse_server;
        break;
      }

      // repeated .proto_ff.FestDonateServerProto server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        if (input->ExpectTag(24)) goto parse_single_num;
        break;
      }

      // optional uint32 single_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &single_num_)));
          set_has_single_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task;
        break;
      }

      // repeated .proto_ff.FestDonateTaskProto task = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDonateSingleProto single = 1;
  for (int i = 0; i < this->single_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->single(i), output);
  }

  // repeated .proto_ff.FestDonateServerProto server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server(i), output);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->single_num(), output);
  }

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDonateSingleProto single = 1;
  for (int i = 0; i < this->single_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->single(i), target);
  }

  // repeated .proto_ff.FestDonateServerProto server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server(i), target);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->single_num(), target);
  }

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 single_num = 3;
    if (has_single_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->single_num());
    }

  }
  // repeated .proto_ff.FestDonateSingleProto single = 1;
  total_size += 1 * this->single_size();
  for (int i = 0; i < this->single_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single(i));
  }

  // repeated .proto_ff.FestDonateServerProto server = 2;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateProto::MergeFrom(const FestDonateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  single_.MergeFrom(from.single_);
  server_.MergeFrom(from.server_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_single_num()) {
      set_single_num(from.single_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateProto::CopyFrom(const FestDonateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateProto::IsInitialized() const {

  return true;
}

void FestDonateProto::Swap(FestDonateProto* other) {
  if (other != this) {
    single_.Swap(&other->single_);
    server_.Swap(&other->server_);
    std::swap(single_num_, other->single_num_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateProto_descriptor_;
  metadata.reflection = FestDonateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestOnlineProto::kDataFieldNumber;
#endif  // !_MSC_VER

FestOnlineProto::FestOnlineProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestOnlineProto::InitAsDefaultInstance() {
}

FestOnlineProto::FestOnlineProto(const FestOnlineProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestOnlineProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestOnlineProto::~FestOnlineProto() {
  SharedDtor();
}

void FestOnlineProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestOnlineProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestOnlineProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestOnlineProto_descriptor_;
}

const FestOnlineProto& FestOnlineProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestOnlineProto* FestOnlineProto::default_instance_ = NULL;

FestOnlineProto* FestOnlineProto::New() const {
  return new FestOnlineProto;
}

void FestOnlineProto::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestOnlineProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestOnlineOneProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestOnlineProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestOnlineOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestOnlineProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestOnlineOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestOnlineProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestOnlineOneProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestOnlineProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestOnlineProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestOnlineProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestOnlineProto::MergeFrom(const FestOnlineProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestOnlineProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestOnlineProto::CopyFrom(const FestOnlineProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestOnlineProto::IsInitialized() const {

  return true;
}

void FestOnlineProto::Swap(FestOnlineProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestOnlineProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestOnlineProto_descriptor_;
  metadata.reflection = FestOnlineProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCollectWordProto::kDataFieldNumber;
#endif  // !_MSC_VER

FestCollectWordProto::FestCollectWordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCollectWordProto::InitAsDefaultInstance() {
}

FestCollectWordProto::FestCollectWordProto(const FestCollectWordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCollectWordProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCollectWordProto::~FestCollectWordProto() {
  SharedDtor();
}

void FestCollectWordProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCollectWordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCollectWordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCollectWordProto_descriptor_;
}

const FestCollectWordProto& FestCollectWordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCollectWordProto* FestCollectWordProto::default_instance_ = NULL;

FestCollectWordProto* FestCollectWordProto::New() const {
  return new FestCollectWordProto;
}

void FestCollectWordProto::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCollectWordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestCollectWordOneProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCollectWordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCollectWordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCollectWordProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCollectWordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCollectWordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCollectWordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCollectWordProto::MergeFrom(const FestCollectWordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCollectWordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCollectWordProto::CopyFrom(const FestCollectWordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCollectWordProto::IsInitialized() const {

  return true;
}

void FestCollectWordProto::Swap(FestCollectWordProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCollectWordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCollectWordProto_descriptor_;
  metadata.reflection = FestCollectWordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestBossDetailProto::kRecvKillIdsFieldNumber;
const int FestBossDetailProto::kRecvRedIdsFieldNumber;
const int FestBossDetailProto::kMyKillsIdsFieldNumber;
const int FestBossDetailProto::kKillIdsFieldNumber;
#endif  // !_MSC_VER

FestBossDetailProto::FestBossDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestBossDetailProto::InitAsDefaultInstance() {
}

FestBossDetailProto::FestBossDetailProto(const FestBossDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestBossDetailProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestBossDetailProto::~FestBossDetailProto() {
  SharedDtor();
}

void FestBossDetailProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestBossDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestBossDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestBossDetailProto_descriptor_;
}

const FestBossDetailProto& FestBossDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestBossDetailProto* FestBossDetailProto::default_instance_ = NULL;

FestBossDetailProto* FestBossDetailProto::New() const {
  return new FestBossDetailProto;
}

void FestBossDetailProto::Clear() {
  recv_kill_ids_.Clear();
  recv_red_ids_.Clear();
  my_kills_ids_.Clear();
  kill_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestBossDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 recv_kill_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_kill_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_recv_kill_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_kill_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_recv_kill_ids;
        if (input->ExpectTag(16)) goto parse_recv_red_ids;
        break;
      }

      // repeated int32 recv_red_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_red_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_recv_red_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_red_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recv_red_ids;
        if (input->ExpectTag(24)) goto parse_my_kills_ids;
        break;
      }

      // repeated int32 my_kills_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_kills_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_my_kills_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_my_kills_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_kills_ids;
        if (input->ExpectTag(32)) goto parse_kill_ids;
        break;
      }

      // repeated int32 kill_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_kill_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kill_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestBossDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 recv_kill_ids = 1;
  for (int i = 0; i < this->recv_kill_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->recv_kill_ids(i), output);
  }

  // repeated int32 recv_red_ids = 2;
  for (int i = 0; i < this->recv_red_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->recv_red_ids(i), output);
  }

  // repeated int32 my_kills_ids = 3;
  for (int i = 0; i < this->my_kills_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->my_kills_ids(i), output);
  }

  // repeated int32 kill_ids = 4;
  for (int i = 0; i < this->kill_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->kill_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestBossDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 recv_kill_ids = 1;
  for (int i = 0; i < this->recv_kill_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->recv_kill_ids(i), target);
  }

  // repeated int32 recv_red_ids = 2;
  for (int i = 0; i < this->recv_red_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->recv_red_ids(i), target);
  }

  // repeated int32 my_kills_ids = 3;
  for (int i = 0; i < this->my_kills_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->my_kills_ids(i), target);
  }

  // repeated int32 kill_ids = 4;
  for (int i = 0; i < this->kill_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->kill_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestBossDetailProto::ByteSize() const {
  int total_size = 0;

  // repeated int32 recv_kill_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_kill_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_kill_ids(i));
    }
    total_size += 1 * this->recv_kill_ids_size() + data_size;
  }

  // repeated int32 recv_red_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_red_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_red_ids(i));
    }
    total_size += 1 * this->recv_red_ids_size() + data_size;
  }

  // repeated int32 my_kills_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->my_kills_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->my_kills_ids(i));
    }
    total_size += 1 * this->my_kills_ids_size() + data_size;
  }

  // repeated int32 kill_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->kill_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kill_ids(i));
    }
    total_size += 1 * this->kill_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestBossDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestBossDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestBossDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestBossDetailProto::MergeFrom(const FestBossDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_kill_ids_.MergeFrom(from.recv_kill_ids_);
  recv_red_ids_.MergeFrom(from.recv_red_ids_);
  my_kills_ids_.MergeFrom(from.my_kills_ids_);
  kill_ids_.MergeFrom(from.kill_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestBossDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestBossDetailProto::CopyFrom(const FestBossDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestBossDetailProto::IsInitialized() const {

  return true;
}

void FestBossDetailProto::Swap(FestBossDetailProto* other) {
  if (other != this) {
    recv_kill_ids_.Swap(&other->recv_kill_ids_);
    recv_red_ids_.Swap(&other->recv_red_ids_);
    my_kills_ids_.Swap(&other->my_kills_ids_);
    kill_ids_.Swap(&other->kill_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestBossDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestBossDetailProto_descriptor_;
  metadata.reflection = FestBossDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestMarryDetail::kTasksFieldNumber;
const int FestMarryDetail::kProcessIdsFieldNumber;
const int FestMarryDetail::kScoreFieldNumber;
#endif  // !_MSC_VER

FestMarryDetail::FestMarryDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestMarryDetail::InitAsDefaultInstance() {
}

FestMarryDetail::FestMarryDetail(const FestMarryDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestMarryDetail::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestMarryDetail::~FestMarryDetail() {
  SharedDtor();
}

void FestMarryDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestMarryDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestMarryDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestMarryDetail_descriptor_;
}

const FestMarryDetail& FestMarryDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestMarryDetail* FestMarryDetail::default_instance_ = NULL;

FestMarryDetail* FestMarryDetail::New() const {
  return new FestMarryDetail;
}

void FestMarryDetail::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    score_ = 0;
  }
  tasks_.Clear();
  process_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestMarryDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FMarryTask tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectTag(16)) goto parse_process_ids;
        break;
      }

      // repeated int32 process_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_process_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_process_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_ids;
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestMarryDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FMarryTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  // repeated int32 process_ids = 2;
  for (int i = 0; i < this->process_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->process_ids(i), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestMarryDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FMarryTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  // repeated int32 process_ids = 2;
  for (int i = 0; i < this->process_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->process_ids(i), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestMarryDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .proto_ff.FMarryTask tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  // repeated int32 process_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->process_ids(i));
    }
    total_size += 1 * this->process_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestMarryDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestMarryDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestMarryDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestMarryDetail::MergeFrom(const FestMarryDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  process_ids_.MergeFrom(from.process_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestMarryDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestMarryDetail::CopyFrom(const FestMarryDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestMarryDetail::IsInitialized() const {

  return true;
}

void FestMarryDetail::Swap(FestMarryDetail* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    process_ids_.Swap(&other->process_ids_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestMarryDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestMarryDetail_descriptor_;
  metadata.reflection = FestMarryDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDayTotalRechargeProto::kFetchLstFieldNumber;
const int FestDayTotalRechargeProto::kRechargeFieldNumber;
#endif  // !_MSC_VER

FestDayTotalRechargeProto::FestDayTotalRechargeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDayTotalRechargeProto::InitAsDefaultInstance() {
}

FestDayTotalRechargeProto::FestDayTotalRechargeProto(const FestDayTotalRechargeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDayTotalRechargeProto::SharedCtor() {
  _cached_size_ = 0;
  recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDayTotalRechargeProto::~FestDayTotalRechargeProto() {
  SharedDtor();
}

void FestDayTotalRechargeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDayTotalRechargeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDayTotalRechargeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDayTotalRechargeProto_descriptor_;
}

const FestDayTotalRechargeProto& FestDayTotalRechargeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDayTotalRechargeProto* FestDayTotalRechargeProto::default_instance_ = NULL;

FestDayTotalRechargeProto* FestDayTotalRechargeProto::New() const {
  return new FestDayTotalRechargeProto;
}

void FestDayTotalRechargeProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    recharge_ = 0u;
  }
  fetch_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDayTotalRechargeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetch_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetch_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetch_lst;
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDayTotalRechargeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetch_lst(i), output);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDayTotalRechargeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetch_lst(i), target);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDayTotalRechargeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

  }
  // repeated int32 fetch_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch_lst(i));
    }
    total_size += 1 * this->fetch_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDayTotalRechargeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDayTotalRechargeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDayTotalRechargeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDayTotalRechargeProto::MergeFrom(const FestDayTotalRechargeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_lst_.MergeFrom(from.fetch_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDayTotalRechargeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDayTotalRechargeProto::CopyFrom(const FestDayTotalRechargeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDayTotalRechargeProto::IsInitialized() const {

  return true;
}

void FestDayTotalRechargeProto::Swap(FestDayTotalRechargeProto* other) {
  if (other != this) {
    fetch_lst_.Swap(&other->fetch_lst_);
    std::swap(recharge_, other->recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDayTotalRechargeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDayTotalRechargeProto_descriptor_;
  metadata.reflection = FestDayTotalRechargeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestLoginProto::kFetchFieldNumber;
#endif  // !_MSC_VER

FestLoginProto::FestLoginProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestLoginProto::InitAsDefaultInstance() {
}

FestLoginProto::FestLoginProto(const FestLoginProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestLoginProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestLoginProto::~FestLoginProto() {
  SharedDtor();
}

void FestLoginProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestLoginProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestLoginProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestLoginProto_descriptor_;
}

const FestLoginProto& FestLoginProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestLoginProto* FestLoginProto::default_instance_ = NULL;

FestLoginProto* FestLoginProto::New() const {
  return new FestLoginProto;
}

void FestLoginProto::Clear() {
  fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestLoginProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair fetch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestLoginProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair fetch = 1;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestLoginProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair fetch = 1;
  for (int i = 0; i < this->fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestLoginProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair fetch = 1;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestLoginProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestLoginProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestLoginProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestLoginProto::MergeFrom(const FestLoginProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_.MergeFrom(from.fetch_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestLoginProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestLoginProto::CopyFrom(const FestLoginProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestLoginProto::IsInitialized() const {

  return true;
}

void FestLoginProto::Swap(FestLoginProto* other) {
  if (other != this) {
    fetch_.Swap(&other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestLoginProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestLoginProto_descriptor_;
  metadata.reflection = FestLoginProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestTotalRechargeProto::kFetchLstFieldNumber;
const int FestTotalRechargeProto::kTotalRechargeFieldNumber;
#endif  // !_MSC_VER

FestTotalRechargeProto::FestTotalRechargeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestTotalRechargeProto::InitAsDefaultInstance() {
}

FestTotalRechargeProto::FestTotalRechargeProto(const FestTotalRechargeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestTotalRechargeProto::SharedCtor() {
  _cached_size_ = 0;
  total_recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestTotalRechargeProto::~FestTotalRechargeProto() {
  SharedDtor();
}

void FestTotalRechargeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestTotalRechargeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestTotalRechargeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestTotalRechargeProto_descriptor_;
}

const FestTotalRechargeProto& FestTotalRechargeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestTotalRechargeProto* FestTotalRechargeProto::default_instance_ = NULL;

FestTotalRechargeProto* FestTotalRechargeProto::New() const {
  return new FestTotalRechargeProto;
}

void FestTotalRechargeProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_recharge_ = 0u;
  }
  fetch_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestTotalRechargeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetch_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetch_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetch_lst;
        if (input->ExpectTag(16)) goto parse_total_recharge;
        break;
      }

      // optional uint32 total_recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestTotalRechargeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetch_lst(i), output);
  }

  // optional uint32 total_recharge = 2;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestTotalRechargeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetch_lst(i), target);
  }

  // optional uint32 total_recharge = 2;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestTotalRechargeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 total_recharge = 2;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

  }
  // repeated int32 fetch_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch_lst(i));
    }
    total_size += 1 * this->fetch_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestTotalRechargeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestTotalRechargeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestTotalRechargeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestTotalRechargeProto::MergeFrom(const FestTotalRechargeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_lst_.MergeFrom(from.fetch_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestTotalRechargeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestTotalRechargeProto::CopyFrom(const FestTotalRechargeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestTotalRechargeProto::IsInitialized() const {

  return true;
}

void FestTotalRechargeProto::Swap(FestTotalRechargeProto* other) {
  if (other != this) {
    fetch_lst_.Swap(&other->fetch_lst_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestTotalRechargeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestTotalRechargeProto_descriptor_;
  metadata.reflection = FestTotalRechargeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDetailProto::kTemplateIdFieldNumber;
const int FestDetailProto::kShopFieldNumber;
const int FestDetailProto::kDailyTotalRechargeFieldNumber;
const int FestDetailProto::kSignFieldNumber;
const int FestDetailProto::kGoldStoreFieldNumber;
const int FestDetailProto::kDigEggFieldNumber;
const int FestDetailProto::kRturnableRechargeFieldNumber;
const int FestDetailProto::kTurntableFieldNumber;
const int FestDetailProto::kDonateFieldNumber;
const int FestDetailProto::kOnlineFieldNumber;
const int FestDetailProto::kCollectWordFieldNumber;
const int FestDetailProto::kDrawPizeFieldNumber;
const int FestDetailProto::kBossFieldNumber;
const int FestDetailProto::kServerRankFieldNumber;
const int FestDetailProto::kHuiMengXiYouFieldNumber;
const int FestDetailProto::kMarryFieldNumber;
const int FestDetailProto::kCandleFieldNumber;
const int FestDetailProto::kDayTotalRechargeFieldNumber;
const int FestDetailProto::kTotalRechargeFieldNumber;
const int FestDetailProto::kLoginFieldNumber;
#endif  // !_MSC_VER

FestDetailProto::FestDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDetailProto::InitAsDefaultInstance() {
  shop_ = const_cast< ::proto_ff::FestShopDetailProto*>(&::proto_ff::FestShopDetailProto::default_instance());
  daily_total_recharge_ = const_cast< ::proto_ff::FestDailyTotalRechargeDetailProto*>(&::proto_ff::FestDailyTotalRechargeDetailProto::default_instance());
  sign_ = const_cast< ::proto_ff::FestSignDetailProto*>(&::proto_ff::FestSignDetailProto::default_instance());
  gold_store_ = const_cast< ::proto_ff::FestGoldStoreProto*>(&::proto_ff::FestGoldStoreProto::default_instance());
  dig_egg_ = const_cast< ::proto_ff::FestDigEggProto*>(&::proto_ff::FestDigEggProto::default_instance());
  rturnable_recharge_ = const_cast< ::proto_ff::FestRTurnableRechargeProto*>(&::proto_ff::FestRTurnableRechargeProto::default_instance());
  turntable_ = const_cast< ::proto_ff::FestTurnableProto*>(&::proto_ff::FestTurnableProto::default_instance());
  donate_ = const_cast< ::proto_ff::FestDonateProto*>(&::proto_ff::FestDonateProto::default_instance());
  online_ = const_cast< ::proto_ff::FestOnlineProto*>(&::proto_ff::FestOnlineProto::default_instance());
  collect_word_ = const_cast< ::proto_ff::FestCollectWordProto*>(&::proto_ff::FestCollectWordProto::default_instance());
  draw_pize_ = const_cast< ::proto_ff::DrawPizeProto*>(&::proto_ff::DrawPizeProto::default_instance());
  boss_ = const_cast< ::proto_ff::FestBossDetailProto*>(&::proto_ff::FestBossDetailProto::default_instance());
  server_rank_ = const_cast< ::proto_ff::FestRankDBData*>(&::proto_ff::FestRankDBData::default_instance());
  hui_meng_xi_you_ = const_cast< ::proto_ff::FestHuiMengXiYouData*>(&::proto_ff::FestHuiMengXiYouData::default_instance());
  marry_ = const_cast< ::proto_ff::FestMarryDetail*>(&::proto_ff::FestMarryDetail::default_instance());
  candle_ = const_cast< ::proto_ff::FestCandleProto*>(&::proto_ff::FestCandleProto::default_instance());
  day_total_recharge_ = const_cast< ::proto_ff::FestDayTotalRechargeProto*>(&::proto_ff::FestDayTotalRechargeProto::default_instance());
  total_recharge_ = const_cast< ::proto_ff::FestTotalRechargeProto*>(&::proto_ff::FestTotalRechargeProto::default_instance());
  login_ = const_cast< ::proto_ff::FestLoginProto*>(&::proto_ff::FestLoginProto::default_instance());
}

FestDetailProto::FestDetailProto(const FestDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDetailProto::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  shop_ = NULL;
  daily_total_recharge_ = NULL;
  sign_ = NULL;
  gold_store_ = NULL;
  dig_egg_ = NULL;
  rturnable_recharge_ = NULL;
  turntable_ = NULL;
  donate_ = NULL;
  online_ = NULL;
  collect_word_ = NULL;
  draw_pize_ = NULL;
  boss_ = NULL;
  server_rank_ = NULL;
  hui_meng_xi_you_ = NULL;
  marry_ = NULL;
  candle_ = NULL;
  day_total_recharge_ = NULL;
  total_recharge_ = NULL;
  login_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDetailProto::~FestDetailProto() {
  SharedDtor();
}

void FestDetailProto::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
    delete daily_total_recharge_;
    delete sign_;
    delete gold_store_;
    delete dig_egg_;
    delete rturnable_recharge_;
    delete turntable_;
    delete donate_;
    delete online_;
    delete collect_word_;
    delete draw_pize_;
    delete boss_;
    delete server_rank_;
    delete hui_meng_xi_you_;
    delete marry_;
    delete candle_;
    delete day_total_recharge_;
    delete total_recharge_;
    delete login_;
  }
}

void FestDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDetailProto_descriptor_;
}

const FestDetailProto& FestDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDetailProto* FestDetailProto::default_instance_ = NULL;

FestDetailProto* FestDetailProto::New() const {
  return new FestDetailProto;
}

void FestDetailProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    if (has_shop()) {
      if (shop_ != NULL) shop_->::proto_ff::FestShopDetailProto::Clear();
    }
    if (has_daily_total_recharge()) {
      if (daily_total_recharge_ != NULL) daily_total_recharge_->::proto_ff::FestDailyTotalRechargeDetailProto::Clear();
    }
    if (has_sign()) {
      if (sign_ != NULL) sign_->::proto_ff::FestSignDetailProto::Clear();
    }
    if (has_gold_store()) {
      if (gold_store_ != NULL) gold_store_->::proto_ff::FestGoldStoreProto::Clear();
    }
    if (has_dig_egg()) {
      if (dig_egg_ != NULL) dig_egg_->::proto_ff::FestDigEggProto::Clear();
    }
    if (has_rturnable_recharge()) {
      if (rturnable_recharge_ != NULL) rturnable_recharge_->::proto_ff::FestRTurnableRechargeProto::Clear();
    }
    if (has_turntable()) {
      if (turntable_ != NULL) turntable_->::proto_ff::FestTurnableProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_donate()) {
      if (donate_ != NULL) donate_->::proto_ff::FestDonateProto::Clear();
    }
    if (has_online()) {
      if (online_ != NULL) online_->::proto_ff::FestOnlineProto::Clear();
    }
    if (has_collect_word()) {
      if (collect_word_ != NULL) collect_word_->::proto_ff::FestCollectWordProto::Clear();
    }
    if (has_draw_pize()) {
      if (draw_pize_ != NULL) draw_pize_->::proto_ff::DrawPizeProto::Clear();
    }
    if (has_boss()) {
      if (boss_ != NULL) boss_->::proto_ff::FestBossDetailProto::Clear();
    }
    if (has_server_rank()) {
      if (server_rank_ != NULL) server_rank_->::proto_ff::FestRankDBData::Clear();
    }
    if (has_hui_meng_xi_you()) {
      if (hui_meng_xi_you_ != NULL) hui_meng_xi_you_->::proto_ff::FestHuiMengXiYouData::Clear();
    }
    if (has_marry()) {
      if (marry_ != NULL) marry_->::proto_ff::FestMarryDetail::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_candle()) {
      if (candle_ != NULL) candle_->::proto_ff::FestCandleProto::Clear();
    }
    if (has_day_total_recharge()) {
      if (day_total_recharge_ != NULL) day_total_recharge_->::proto_ff::FestDayTotalRechargeProto::Clear();
    }
    if (has_total_recharge()) {
      if (total_recharge_ != NULL) total_recharge_->::proto_ff::FestTotalRechargeProto::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::proto_ff::FestLoginProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        break;
      }

      // optional .proto_ff.FestShopDetailProto shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_daily_total_recharge;
        break;
      }

      // optional .proto_ff.FestDailyTotalRechargeDetailProto daily_total_recharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_total_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_total_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional .proto_ff.FestSignDetailProto sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gold_store;
        break;
      }

      // optional .proto_ff.FestGoldStoreProto gold_store = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gold_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gold_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dig_egg;
        break;
      }

      // optional .proto_ff.FestDigEggProto dig_egg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dig_egg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dig_egg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rturnable_recharge;
        break;
      }

      // optional .proto_ff.FestRTurnableRechargeProto rturnable_recharge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rturnable_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rturnable_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_turntable;
        break;
      }

      // optional .proto_ff.FestTurnableProto turntable = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turntable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turntable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_donate;
        break;
      }

      // optional .proto_ff.FestDonateProto donate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_donate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_online;
        break;
      }

      // optional .proto_ff.FestOnlineProto online = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_collect_word;
        break;
      }

      // optional .proto_ff.FestCollectWordProto collect_word = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_draw_pize;
        break;
      }

      // optional .proto_ff.DrawPizeProto draw_pize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_pize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draw_pize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_boss;
        break;
      }

      // optional .proto_ff.FestBossDetailProto boss = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_server_rank;
        break;
      }

      // optional .proto_ff.FestRankDBData server_rank = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hui_meng_xi_you;
        break;
      }

      // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hui_meng_xi_you:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hui_meng_xi_you()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_marry;
        break;
      }

      // optional .proto_ff.FestMarryDetail marry = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_candle;
        break;
      }

      // optional .proto_ff.FestCandleProto candle = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_day_total_recharge;
        break;
      }

      // optional .proto_ff.FestDayTotalRechargeProto day_total_recharge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day_total_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_day_total_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_total_recharge;
        break;
      }

      // optional .proto_ff.FestTotalRechargeProto total_recharge = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_login;
        break;
      }

      // optional .proto_ff.FestLoginProto login = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional .proto_ff.FestShopDetailProto shop = 2;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop(), output);
  }

  // optional .proto_ff.FestDailyTotalRechargeDetailProto daily_total_recharge = 3;
  if (has_daily_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->daily_total_recharge(), output);
  }

  // optional .proto_ff.FestSignDetailProto sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sign(), output);
  }

  // optional .proto_ff.FestGoldStoreProto gold_store = 5;
  if (has_gold_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gold_store(), output);
  }

  // optional .proto_ff.FestDigEggProto dig_egg = 6;
  if (has_dig_egg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dig_egg(), output);
  }

  // optional .proto_ff.FestRTurnableRechargeProto rturnable_recharge = 7;
  if (has_rturnable_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rturnable_recharge(), output);
  }

  // optional .proto_ff.FestTurnableProto turntable = 8;
  if (has_turntable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->turntable(), output);
  }

  // optional .proto_ff.FestDonateProto donate = 9;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->donate(), output);
  }

  // optional .proto_ff.FestOnlineProto online = 10;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->online(), output);
  }

  // optional .proto_ff.FestCollectWordProto collect_word = 11;
  if (has_collect_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->collect_word(), output);
  }

  // optional .proto_ff.DrawPizeProto draw_pize = 12;
  if (has_draw_pize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->draw_pize(), output);
  }

  // optional .proto_ff.FestBossDetailProto boss = 13;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->boss(), output);
  }

  // optional .proto_ff.FestRankDBData server_rank = 14;
  if (has_server_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->server_rank(), output);
  }

  // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 15;
  if (has_hui_meng_xi_you()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->hui_meng_xi_you(), output);
  }

  // optional .proto_ff.FestMarryDetail marry = 16;
  if (has_marry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->marry(), output);
  }

  // optional .proto_ff.FestCandleProto candle = 17;
  if (has_candle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->candle(), output);
  }

  // optional .proto_ff.FestDayTotalRechargeProto day_total_recharge = 18;
  if (has_day_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->day_total_recharge(), output);
  }

  // optional .proto_ff.FestTotalRechargeProto total_recharge = 19;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->total_recharge(), output);
  }

  // optional .proto_ff.FestLoginProto login = 20;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional .proto_ff.FestShopDetailProto shop = 2;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop(), target);
  }

  // optional .proto_ff.FestDailyTotalRechargeDetailProto daily_total_recharge = 3;
  if (has_daily_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->daily_total_recharge(), target);
  }

  // optional .proto_ff.FestSignDetailProto sign = 4;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sign(), target);
  }

  // optional .proto_ff.FestGoldStoreProto gold_store = 5;
  if (has_gold_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gold_store(), target);
  }

  // optional .proto_ff.FestDigEggProto dig_egg = 6;
  if (has_dig_egg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dig_egg(), target);
  }

  // optional .proto_ff.FestRTurnableRechargeProto rturnable_recharge = 7;
  if (has_rturnable_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rturnable_recharge(), target);
  }

  // optional .proto_ff.FestTurnableProto turntable = 8;
  if (has_turntable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->turntable(), target);
  }

  // optional .proto_ff.FestDonateProto donate = 9;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->donate(), target);
  }

  // optional .proto_ff.FestOnlineProto online = 10;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->online(), target);
  }

  // optional .proto_ff.FestCollectWordProto collect_word = 11;
  if (has_collect_word()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->collect_word(), target);
  }

  // optional .proto_ff.DrawPizeProto draw_pize = 12;
  if (has_draw_pize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->draw_pize(), target);
  }

  // optional .proto_ff.FestBossDetailProto boss = 13;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->boss(), target);
  }

  // optional .proto_ff.FestRankDBData server_rank = 14;
  if (has_server_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->server_rank(), target);
  }

  // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 15;
  if (has_hui_meng_xi_you()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->hui_meng_xi_you(), target);
  }

  // optional .proto_ff.FestMarryDetail marry = 16;
  if (has_marry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->marry(), target);
  }

  // optional .proto_ff.FestCandleProto candle = 17;
  if (has_candle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->candle(), target);
  }

  // optional .proto_ff.FestDayTotalRechargeProto day_total_recharge = 18;
  if (has_day_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->day_total_recharge(), target);
  }

  // optional .proto_ff.FestTotalRechargeProto total_recharge = 19;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->total_recharge(), target);
  }

  // optional .proto_ff.FestLoginProto login = 20;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDetailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestShopDetailProto shop = 2;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // optional .proto_ff.FestDailyTotalRechargeDetailProto daily_total_recharge = 3;
    if (has_daily_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_total_recharge());
    }

    // optional .proto_ff.FestSignDetailProto sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .proto_ff.FestGoldStoreProto gold_store = 5;
    if (has_gold_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gold_store());
    }

    // optional .proto_ff.FestDigEggProto dig_egg = 6;
    if (has_dig_egg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dig_egg());
    }

    // optional .proto_ff.FestRTurnableRechargeProto rturnable_recharge = 7;
    if (has_rturnable_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rturnable_recharge());
    }

    // optional .proto_ff.FestTurnableProto turntable = 8;
    if (has_turntable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turntable());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.FestDonateProto donate = 9;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donate());
    }

    // optional .proto_ff.FestOnlineProto online = 10;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online());
    }

    // optional .proto_ff.FestCollectWordProto collect_word = 11;
    if (has_collect_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect_word());
    }

    // optional .proto_ff.DrawPizeProto draw_pize = 12;
    if (has_draw_pize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draw_pize());
    }

    // optional .proto_ff.FestBossDetailProto boss = 13;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

    // optional .proto_ff.FestRankDBData server_rank = 14;
    if (has_server_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_rank());
    }

    // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 15;
    if (has_hui_meng_xi_you()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hui_meng_xi_you());
    }

    // optional .proto_ff.FestMarryDetail marry = 16;
    if (has_marry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marry());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.FestCandleProto candle = 17;
    if (has_candle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->candle());
    }

    // optional .proto_ff.FestDayTotalRechargeProto day_total_recharge = 18;
    if (has_day_total_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->day_total_recharge());
    }

    // optional .proto_ff.FestTotalRechargeProto total_recharge = 19;
    if (has_total_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_recharge());
    }

    // optional .proto_ff.FestLoginProto login = 20;
    if (has_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDetailProto::MergeFrom(const FestDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_shop()) {
      mutable_shop()->::proto_ff::FestShopDetailProto::MergeFrom(from.shop());
    }
    if (from.has_daily_total_recharge()) {
      mutable_daily_total_recharge()->::proto_ff::FestDailyTotalRechargeDetailProto::MergeFrom(from.daily_total_recharge());
    }
    if (from.has_sign()) {
      mutable_sign()->::proto_ff::FestSignDetailProto::MergeFrom(from.sign());
    }
    if (from.has_gold_store()) {
      mutable_gold_store()->::proto_ff::FestGoldStoreProto::MergeFrom(from.gold_store());
    }
    if (from.has_dig_egg()) {
      mutable_dig_egg()->::proto_ff::FestDigEggProto::MergeFrom(from.dig_egg());
    }
    if (from.has_rturnable_recharge()) {
      mutable_rturnable_recharge()->::proto_ff::FestRTurnableRechargeProto::MergeFrom(from.rturnable_recharge());
    }
    if (from.has_turntable()) {
      mutable_turntable()->::proto_ff::FestTurnableProto::MergeFrom(from.turntable());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_donate()) {
      mutable_donate()->::proto_ff::FestDonateProto::MergeFrom(from.donate());
    }
    if (from.has_online()) {
      mutable_online()->::proto_ff::FestOnlineProto::MergeFrom(from.online());
    }
    if (from.has_collect_word()) {
      mutable_collect_word()->::proto_ff::FestCollectWordProto::MergeFrom(from.collect_word());
    }
    if (from.has_draw_pize()) {
      mutable_draw_pize()->::proto_ff::DrawPizeProto::MergeFrom(from.draw_pize());
    }
    if (from.has_boss()) {
      mutable_boss()->::proto_ff::FestBossDetailProto::MergeFrom(from.boss());
    }
    if (from.has_server_rank()) {
      mutable_server_rank()->::proto_ff::FestRankDBData::MergeFrom(from.server_rank());
    }
    if (from.has_hui_meng_xi_you()) {
      mutable_hui_meng_xi_you()->::proto_ff::FestHuiMengXiYouData::MergeFrom(from.hui_meng_xi_you());
    }
    if (from.has_marry()) {
      mutable_marry()->::proto_ff::FestMarryDetail::MergeFrom(from.marry());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_candle()) {
      mutable_candle()->::proto_ff::FestCandleProto::MergeFrom(from.candle());
    }
    if (from.has_day_total_recharge()) {
      mutable_day_total_recharge()->::proto_ff::FestDayTotalRechargeProto::MergeFrom(from.day_total_recharge());
    }
    if (from.has_total_recharge()) {
      mutable_total_recharge()->::proto_ff::FestTotalRechargeProto::MergeFrom(from.total_recharge());
    }
    if (from.has_login()) {
      mutable_login()->::proto_ff::FestLoginProto::MergeFrom(from.login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDetailProto::CopyFrom(const FestDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDetailProto::IsInitialized() const {

  return true;
}

void FestDetailProto::Swap(FestDetailProto* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(shop_, other->shop_);
    std::swap(daily_total_recharge_, other->daily_total_recharge_);
    std::swap(sign_, other->sign_);
    std::swap(gold_store_, other->gold_store_);
    std::swap(dig_egg_, other->dig_egg_);
    std::swap(rturnable_recharge_, other->rturnable_recharge_);
    std::swap(turntable_, other->turntable_);
    std::swap(donate_, other->donate_);
    std::swap(online_, other->online_);
    std::swap(collect_word_, other->collect_word_);
    std::swap(draw_pize_, other->draw_pize_);
    std::swap(boss_, other->boss_);
    std::swap(server_rank_, other->server_rank_);
    std::swap(hui_meng_xi_you_, other->hui_meng_xi_you_);
    std::swap(marry_, other->marry_);
    std::swap(candle_, other->candle_);
    std::swap(day_total_recharge_, other->day_total_recharge_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(login_, other->login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDetailProto_descriptor_;
  metadata.reflection = FestDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_SimpleListRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

Fest_SimpleListRsp::Fest_SimpleListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_SimpleListRsp::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::FestSimpleListProto*>(&::proto_ff::FestSimpleListProto::default_instance());
}

Fest_SimpleListRsp::Fest_SimpleListRsp(const Fest_SimpleListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_SimpleListRsp::SharedCtor() {
  _cached_size_ = 0;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_SimpleListRsp::~Fest_SimpleListRsp() {
  SharedDtor();
}

void Fest_SimpleListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void Fest_SimpleListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_SimpleListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_SimpleListRsp_descriptor_;
}

const Fest_SimpleListRsp& Fest_SimpleListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_SimpleListRsp* Fest_SimpleListRsp::default_instance_ = NULL;

Fest_SimpleListRsp* Fest_SimpleListRsp::New() const {
  return new Fest_SimpleListRsp;
}

void Fest_SimpleListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::FestSimpleListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_SimpleListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FestSimpleListProto simple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_SimpleListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FestSimpleListProto simple = 1;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_SimpleListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FestSimpleListProto simple = 1;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_SimpleListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FestSimpleListProto simple = 1;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_SimpleListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_SimpleListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_SimpleListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_SimpleListRsp::MergeFrom(const Fest_SimpleListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::FestSimpleListProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_SimpleListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_SimpleListRsp::CopyFrom(const Fest_SimpleListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_SimpleListRsp::IsInitialized() const {

  return true;
}

void Fest_SimpleListRsp::Swap(Fest_SimpleListRsp* other) {
  if (other != this) {
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_SimpleListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_SimpleListRsp_descriptor_;
  metadata.reflection = Fest_SimpleListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_SimpleInfoNotify::kSimpleFieldNumber;
#endif  // !_MSC_VER

Fest_SimpleInfoNotify::Fest_SimpleInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_SimpleInfoNotify::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::FestSimpleListProto*>(&::proto_ff::FestSimpleListProto::default_instance());
}

Fest_SimpleInfoNotify::Fest_SimpleInfoNotify(const Fest_SimpleInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_SimpleInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_SimpleInfoNotify::~Fest_SimpleInfoNotify() {
  SharedDtor();
}

void Fest_SimpleInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void Fest_SimpleInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_SimpleInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_SimpleInfoNotify_descriptor_;
}

const Fest_SimpleInfoNotify& Fest_SimpleInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_SimpleInfoNotify* Fest_SimpleInfoNotify::default_instance_ = NULL;

Fest_SimpleInfoNotify* Fest_SimpleInfoNotify::New() const {
  return new Fest_SimpleInfoNotify;
}

void Fest_SimpleInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::FestSimpleListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_SimpleInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FestSimpleListProto simple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_SimpleInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FestSimpleListProto simple = 1;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_SimpleInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FestSimpleListProto simple = 1;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_SimpleInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FestSimpleListProto simple = 1;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_SimpleInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_SimpleInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_SimpleInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_SimpleInfoNotify::MergeFrom(const Fest_SimpleInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::FestSimpleListProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_SimpleInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_SimpleInfoNotify::CopyFrom(const Fest_SimpleInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_SimpleInfoNotify::IsInitialized() const {

  return true;
}

void Fest_SimpleInfoNotify::Swap(Fest_SimpleInfoNotify* other) {
  if (other != this) {
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_SimpleInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_SimpleInfoNotify_descriptor_;
  metadata.reflection = Fest_SimpleInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DetailReq::kFestIdFieldNumber;
const int Fest_DetailReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_DetailReq::Fest_DetailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DetailReq::InitAsDefaultInstance() {
}

Fest_DetailReq::Fest_DetailReq(const Fest_DetailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DetailReq::SharedCtor() {
  _cached_size_ = 0;
  fest_id_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DetailReq::~Fest_DetailReq() {
  SharedDtor();
}

void Fest_DetailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DetailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DetailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DetailReq_descriptor_;
}

const Fest_DetailReq& Fest_DetailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DetailReq* Fest_DetailReq::default_instance_ = NULL;

Fest_DetailReq* Fest_DetailReq::New() const {
  return new Fest_DetailReq;
}

void Fest_DetailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fest_id_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DetailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fest_id_)));
          set_has_fest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DetailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fest_id = 1;
  if (has_fest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fest_id(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DetailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fest_id = 1;
  if (has_fest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fest_id(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DetailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fest_id = 1;
    if (has_fest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fest_id());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DetailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DetailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DetailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DetailReq::MergeFrom(const Fest_DetailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fest_id()) {
      set_fest_id(from.fest_id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DetailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DetailReq::CopyFrom(const Fest_DetailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DetailReq::IsInitialized() const {

  return true;
}

void Fest_DetailReq::Swap(Fest_DetailReq* other) {
  if (other != this) {
    std::swap(fest_id_, other->fest_id_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DetailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DetailReq_descriptor_;
  metadata.reflection = Fest_DetailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DetailRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Fest_DetailRsp::Fest_DetailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DetailRsp::InitAsDefaultInstance() {
}

Fest_DetailRsp::Fest_DetailRsp(const Fest_DetailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DetailRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DetailRsp::~Fest_DetailRsp() {
  SharedDtor();
}

void Fest_DetailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DetailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DetailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DetailRsp_descriptor_;
}

const Fest_DetailRsp& Fest_DetailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DetailRsp* Fest_DetailRsp::default_instance_ = NULL;

Fest_DetailRsp* Fest_DetailRsp::New() const {
  return new Fest_DetailRsp;
}

void Fest_DetailRsp::Clear() {
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DetailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDetailProto detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DetailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDetailProto detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DetailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDetailProto detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DetailRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestDetailProto detail = 1;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DetailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DetailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DetailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DetailRsp::MergeFrom(const Fest_DetailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DetailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DetailRsp::CopyFrom(const Fest_DetailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DetailRsp::IsInitialized() const {

  return true;
}

void Fest_DetailRsp::Swap(Fest_DetailRsp* other) {
  if (other != this) {
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DetailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DetailRsp_descriptor_;
  metadata.reflection = Fest_DetailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DetailUpdateRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Fest_DetailUpdateRsp::Fest_DetailUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DetailUpdateRsp::InitAsDefaultInstance() {
}

Fest_DetailUpdateRsp::Fest_DetailUpdateRsp(const Fest_DetailUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DetailUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DetailUpdateRsp::~Fest_DetailUpdateRsp() {
  SharedDtor();
}

void Fest_DetailUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DetailUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DetailUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DetailUpdateRsp_descriptor_;
}

const Fest_DetailUpdateRsp& Fest_DetailUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DetailUpdateRsp* Fest_DetailUpdateRsp::default_instance_ = NULL;

Fest_DetailUpdateRsp* Fest_DetailUpdateRsp::New() const {
  return new Fest_DetailUpdateRsp;
}

void Fest_DetailUpdateRsp::Clear() {
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DetailUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDetailProto detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DetailUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDetailProto detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DetailUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDetailProto detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DetailUpdateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestDetailProto detail = 1;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DetailUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DetailUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DetailUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DetailUpdateRsp::MergeFrom(const Fest_DetailUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DetailUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DetailUpdateRsp::CopyFrom(const Fest_DetailUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DetailUpdateRsp::IsInitialized() const {

  return true;
}

void Fest_DetailUpdateRsp::Swap(Fest_DetailUpdateRsp* other) {
  if (other != this) {
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DetailUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DetailUpdateRsp_descriptor_;
  metadata.reflection = Fest_DetailUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_RedPointInfoRsp::kRedpointFieldNumber;
#endif  // !_MSC_VER

Fest_RedPointInfoRsp::Fest_RedPointInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_RedPointInfoRsp::InitAsDefaultInstance() {
  redpoint_ = const_cast< ::proto_ff::FestRedPointListProto*>(&::proto_ff::FestRedPointListProto::default_instance());
}

Fest_RedPointInfoRsp::Fest_RedPointInfoRsp(const Fest_RedPointInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_RedPointInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  redpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_RedPointInfoRsp::~Fest_RedPointInfoRsp() {
  SharedDtor();
}

void Fest_RedPointInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete redpoint_;
  }
}

void Fest_RedPointInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_RedPointInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_RedPointInfoRsp_descriptor_;
}

const Fest_RedPointInfoRsp& Fest_RedPointInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_RedPointInfoRsp* Fest_RedPointInfoRsp::default_instance_ = NULL;

Fest_RedPointInfoRsp* Fest_RedPointInfoRsp::New() const {
  return new Fest_RedPointInfoRsp;
}

void Fest_RedPointInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_redpoint()) {
      if (redpoint_ != NULL) redpoint_->::proto_ff::FestRedPointListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_RedPointInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FestRedPointListProto redpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_RedPointInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FestRedPointListProto redpoint = 1;
  if (has_redpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_RedPointInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FestRedPointListProto redpoint = 1;
  if (has_redpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->redpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_RedPointInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FestRedPointListProto redpoint = 1;
    if (has_redpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_RedPointInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_RedPointInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_RedPointInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_RedPointInfoRsp::MergeFrom(const Fest_RedPointInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpoint()) {
      mutable_redpoint()->::proto_ff::FestRedPointListProto::MergeFrom(from.redpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_RedPointInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_RedPointInfoRsp::CopyFrom(const Fest_RedPointInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_RedPointInfoRsp::IsInitialized() const {

  return true;
}

void Fest_RedPointInfoRsp::Swap(Fest_RedPointInfoRsp* other) {
  if (other != this) {
    std::swap(redpoint_, other->redpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_RedPointInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_RedPointInfoRsp_descriptor_;
  metadata.reflection = Fest_RedPointInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_RedPointInfoNotify::kRedpointFieldNumber;
#endif  // !_MSC_VER

Fest_RedPointInfoNotify::Fest_RedPointInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_RedPointInfoNotify::InitAsDefaultInstance() {
  redpoint_ = const_cast< ::proto_ff::FestRedPointListProto*>(&::proto_ff::FestRedPointListProto::default_instance());
}

Fest_RedPointInfoNotify::Fest_RedPointInfoNotify(const Fest_RedPointInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_RedPointInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  redpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_RedPointInfoNotify::~Fest_RedPointInfoNotify() {
  SharedDtor();
}

void Fest_RedPointInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete redpoint_;
  }
}

void Fest_RedPointInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_RedPointInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_RedPointInfoNotify_descriptor_;
}

const Fest_RedPointInfoNotify& Fest_RedPointInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_RedPointInfoNotify* Fest_RedPointInfoNotify::default_instance_ = NULL;

Fest_RedPointInfoNotify* Fest_RedPointInfoNotify::New() const {
  return new Fest_RedPointInfoNotify;
}

void Fest_RedPointInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_redpoint()) {
      if (redpoint_ != NULL) redpoint_->::proto_ff::FestRedPointListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_RedPointInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FestRedPointListProto redpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_RedPointInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FestRedPointListProto redpoint = 1;
  if (has_redpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_RedPointInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FestRedPointListProto redpoint = 1;
  if (has_redpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->redpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_RedPointInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FestRedPointListProto redpoint = 1;
    if (has_redpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_RedPointInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_RedPointInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_RedPointInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_RedPointInfoNotify::MergeFrom(const Fest_RedPointInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpoint()) {
      mutable_redpoint()->::proto_ff::FestRedPointListProto::MergeFrom(from.redpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_RedPointInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_RedPointInfoNotify::CopyFrom(const Fest_RedPointInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_RedPointInfoNotify::IsInitialized() const {

  return true;
}

void Fest_RedPointInfoNotify::Swap(Fest_RedPointInfoNotify* other) {
  if (other != this) {
    std::swap(redpoint_, other->redpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_RedPointInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_RedPointInfoNotify_descriptor_;
  metadata.reflection = Fest_RedPointInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_ShopBuyReq::kTemplateIdFieldNumber;
const int Fest_ShopBuyReq::kIdFieldNumber;
#endif  // !_MSC_VER

Fest_ShopBuyReq::Fest_ShopBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_ShopBuyReq::InitAsDefaultInstance() {
}

Fest_ShopBuyReq::Fest_ShopBuyReq(const Fest_ShopBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_ShopBuyReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_ShopBuyReq::~Fest_ShopBuyReq() {
  SharedDtor();
}

void Fest_ShopBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_ShopBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_ShopBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_ShopBuyReq_descriptor_;
}

const Fest_ShopBuyReq& Fest_ShopBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_ShopBuyReq* Fest_ShopBuyReq::default_instance_ = NULL;

Fest_ShopBuyReq* Fest_ShopBuyReq::New() const {
  return new Fest_ShopBuyReq;
}

void Fest_ShopBuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_ShopBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_ShopBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_ShopBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_ShopBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_ShopBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_ShopBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_ShopBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_ShopBuyReq::MergeFrom(const Fest_ShopBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_ShopBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_ShopBuyReq::CopyFrom(const Fest_ShopBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_ShopBuyReq::IsInitialized() const {

  return true;
}

void Fest_ShopBuyReq::Swap(Fest_ShopBuyReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_ShopBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_ShopBuyReq_descriptor_;
  metadata.reflection = Fest_ShopBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_ShopBuyRsp::kRetFieldNumber;
const int Fest_ShopBuyRsp::kTemplateIdFieldNumber;
const int Fest_ShopBuyRsp::kIdFieldNumber;
const int Fest_ShopBuyRsp::kNumFieldNumber;
#endif  // !_MSC_VER

Fest_ShopBuyRsp::Fest_ShopBuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_ShopBuyRsp::InitAsDefaultInstance() {
}

Fest_ShopBuyRsp::Fest_ShopBuyRsp(const Fest_ShopBuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_ShopBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_ShopBuyRsp::~Fest_ShopBuyRsp() {
  SharedDtor();
}

void Fest_ShopBuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_ShopBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_ShopBuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_ShopBuyRsp_descriptor_;
}

const Fest_ShopBuyRsp& Fest_ShopBuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_ShopBuyRsp* Fest_ShopBuyRsp::default_instance_ = NULL;

Fest_ShopBuyRsp* Fest_ShopBuyRsp::New() const {
  return new Fest_ShopBuyRsp;
}

void Fest_ShopBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_ShopBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_ShopBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_ShopBuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_ShopBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_ShopBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_ShopBuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_ShopBuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_ShopBuyRsp::MergeFrom(const Fest_ShopBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_ShopBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_ShopBuyRsp::CopyFrom(const Fest_ShopBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_ShopBuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Fest_ShopBuyRsp::Swap(Fest_ShopBuyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_ShopBuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_ShopBuyRsp_descriptor_;
  metadata.reflection = Fest_ShopBuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_GetDailyRechargeRewardReq::kTemplateIdFieldNumber;
const int Fest_GetDailyRechargeRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

Fest_GetDailyRechargeRewardReq::Fest_GetDailyRechargeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_GetDailyRechargeRewardReq::InitAsDefaultInstance() {
}

Fest_GetDailyRechargeRewardReq::Fest_GetDailyRechargeRewardReq(const Fest_GetDailyRechargeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_GetDailyRechargeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_GetDailyRechargeRewardReq::~Fest_GetDailyRechargeRewardReq() {
  SharedDtor();
}

void Fest_GetDailyRechargeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_GetDailyRechargeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_GetDailyRechargeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_GetDailyRechargeRewardReq_descriptor_;
}

const Fest_GetDailyRechargeRewardReq& Fest_GetDailyRechargeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_GetDailyRechargeRewardReq* Fest_GetDailyRechargeRewardReq::default_instance_ = NULL;

Fest_GetDailyRechargeRewardReq* Fest_GetDailyRechargeRewardReq::New() const {
  return new Fest_GetDailyRechargeRewardReq;
}

void Fest_GetDailyRechargeRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_GetDailyRechargeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_GetDailyRechargeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_GetDailyRechargeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_GetDailyRechargeRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_GetDailyRechargeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_GetDailyRechargeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_GetDailyRechargeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_GetDailyRechargeRewardReq::MergeFrom(const Fest_GetDailyRechargeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_GetDailyRechargeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_GetDailyRechargeRewardReq::CopyFrom(const Fest_GetDailyRechargeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_GetDailyRechargeRewardReq::IsInitialized() const {

  return true;
}

void Fest_GetDailyRechargeRewardReq::Swap(Fest_GetDailyRechargeRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_GetDailyRechargeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_GetDailyRechargeRewardReq_descriptor_;
  metadata.reflection = Fest_GetDailyRechargeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DailyRechargeStatusNotify::kRetFieldNumber;
const int Fest_DailyRechargeStatusNotify::kTemplateIdFieldNumber;
const int Fest_DailyRechargeStatusNotify::kTotalRechargeFieldNumber;
const int Fest_DailyRechargeStatusNotify::kDataFieldNumber;
#endif  // !_MSC_VER

Fest_DailyRechargeStatusNotify::Fest_DailyRechargeStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DailyRechargeStatusNotify::InitAsDefaultInstance() {
}

Fest_DailyRechargeStatusNotify::Fest_DailyRechargeStatusNotify(const Fest_DailyRechargeStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DailyRechargeStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  total_recharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DailyRechargeStatusNotify::~Fest_DailyRechargeStatusNotify() {
  SharedDtor();
}

void Fest_DailyRechargeStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DailyRechargeStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DailyRechargeStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DailyRechargeStatusNotify_descriptor_;
}

const Fest_DailyRechargeStatusNotify& Fest_DailyRechargeStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DailyRechargeStatusNotify* Fest_DailyRechargeStatusNotify::default_instance_ = NULL;

Fest_DailyRechargeStatusNotify* Fest_DailyRechargeStatusNotify::New() const {
  return new Fest_DailyRechargeStatusNotify;
}

void Fest_DailyRechargeStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    total_recharge_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DailyRechargeStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_recharge;
        break;
      }

      // optional int32 total_recharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DailyRechargeStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 total_recharge = 3;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_recharge(), output);
  }

  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DailyRechargeStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 total_recharge = 3;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_recharge(), target);
  }

  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DailyRechargeStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 total_recharge = 3;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_recharge());
    }

  }
  // repeated .proto_ff.FestDailyTotalRechargeOneProto data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DailyRechargeStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DailyRechargeStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DailyRechargeStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DailyRechargeStatusNotify::MergeFrom(const Fest_DailyRechargeStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DailyRechargeStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DailyRechargeStatusNotify::CopyFrom(const Fest_DailyRechargeStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DailyRechargeStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Fest_DailyRechargeStatusNotify::Swap(Fest_DailyRechargeStatusNotify* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(total_recharge_, other->total_recharge_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DailyRechargeStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DailyRechargeStatusNotify_descriptor_;
  metadata.reflection = Fest_DailyRechargeStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRTurnableRechargeTurnableReq::kTemplateIdFieldNumber;
const int FestRTurnableRechargeTurnableReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestRTurnableRechargeTurnableReq::FestRTurnableRechargeTurnableReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRTurnableRechargeTurnableReq::InitAsDefaultInstance() {
}

FestRTurnableRechargeTurnableReq::FestRTurnableRechargeTurnableReq(const FestRTurnableRechargeTurnableReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRTurnableRechargeTurnableReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRTurnableRechargeTurnableReq::~FestRTurnableRechargeTurnableReq() {
  SharedDtor();
}

void FestRTurnableRechargeTurnableReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRTurnableRechargeTurnableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRTurnableRechargeTurnableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRTurnableRechargeTurnableReq_descriptor_;
}

const FestRTurnableRechargeTurnableReq& FestRTurnableRechargeTurnableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestRTurnableRechargeTurnableReq* FestRTurnableRechargeTurnableReq::default_instance_ = NULL;

FestRTurnableRechargeTurnableReq* FestRTurnableRechargeTurnableReq::New() const {
  return new FestRTurnableRechargeTurnableReq;
}

void FestRTurnableRechargeTurnableReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRTurnableRechargeTurnableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRTurnableRechargeTurnableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRTurnableRechargeTurnableReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRTurnableRechargeTurnableReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRTurnableRechargeTurnableReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRTurnableRechargeTurnableReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRTurnableRechargeTurnableReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRTurnableRechargeTurnableReq::MergeFrom(const FestRTurnableRechargeTurnableReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRTurnableRechargeTurnableReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRTurnableRechargeTurnableReq::CopyFrom(const FestRTurnableRechargeTurnableReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRTurnableRechargeTurnableReq::IsInitialized() const {

  return true;
}

void FestRTurnableRechargeTurnableReq::Swap(FestRTurnableRechargeTurnableReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRTurnableRechargeTurnableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRTurnableRechargeTurnableReq_descriptor_;
  metadata.reflection = FestRTurnableRechargeTurnableReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRTurnableRechargeTurnableRsp::kRetFieldNumber;
const int FestRTurnableRechargeTurnableRsp::kTemplateIdFieldNumber;
const int FestRTurnableRechargeTurnableRsp::kTurnableIdFieldNumber;
const int FestRTurnableRechargeTurnableRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestRTurnableRechargeTurnableRsp::FestRTurnableRechargeTurnableRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRTurnableRechargeTurnableRsp::InitAsDefaultInstance() {
}

FestRTurnableRechargeTurnableRsp::FestRTurnableRechargeTurnableRsp(const FestRTurnableRechargeTurnableRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRTurnableRechargeTurnableRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  turnable_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRTurnableRechargeTurnableRsp::~FestRTurnableRechargeTurnableRsp() {
  SharedDtor();
}

void FestRTurnableRechargeTurnableRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRTurnableRechargeTurnableRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRTurnableRechargeTurnableRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRTurnableRechargeTurnableRsp_descriptor_;
}

const FestRTurnableRechargeTurnableRsp& FestRTurnableRechargeTurnableRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestRTurnableRechargeTurnableRsp* FestRTurnableRechargeTurnableRsp::default_instance_ = NULL;

FestRTurnableRechargeTurnableRsp* FestRTurnableRechargeTurnableRsp::New() const {
  return new FestRTurnableRechargeTurnableRsp;
}

void FestRTurnableRechargeTurnableRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    turnable_id_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRTurnableRechargeTurnableRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turnable_id;
        break;
      }

      // optional int32 turnable_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnable_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnable_id_)));
          set_has_turnable_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .proto_ff.FestRTurnableRechargeOneProto data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRTurnableRechargeTurnableRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 turnable_id = 3;
  if (has_turnable_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->turnable_id(), output);
  }

  // repeated .proto_ff.FestRTurnableRechargeOneProto data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRTurnableRechargeTurnableRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 turnable_id = 3;
  if (has_turnable_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->turnable_id(), target);
  }

  // repeated .proto_ff.FestRTurnableRechargeOneProto data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRTurnableRechargeTurnableRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 turnable_id = 3;
    if (has_turnable_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnable_id());
    }

  }
  // repeated .proto_ff.FestRTurnableRechargeOneProto data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRTurnableRechargeTurnableRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRTurnableRechargeTurnableRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRTurnableRechargeTurnableRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRTurnableRechargeTurnableRsp::MergeFrom(const FestRTurnableRechargeTurnableRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_turnable_id()) {
      set_turnable_id(from.turnable_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRTurnableRechargeTurnableRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRTurnableRechargeTurnableRsp::CopyFrom(const FestRTurnableRechargeTurnableRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRTurnableRechargeTurnableRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FestRTurnableRechargeTurnableRsp::Swap(FestRTurnableRechargeTurnableRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(turnable_id_, other->turnable_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRTurnableRechargeTurnableRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRTurnableRechargeTurnableRsp_descriptor_;
  metadata.reflection = FestRTurnableRechargeTurnableRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_SignReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_SignReq::Fest_SignReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_SignReq::InitAsDefaultInstance() {
}

Fest_SignReq::Fest_SignReq(const Fest_SignReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_SignReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_SignReq::~Fest_SignReq() {
  SharedDtor();
}

void Fest_SignReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_SignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_SignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_SignReq_descriptor_;
}

const Fest_SignReq& Fest_SignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_SignReq* Fest_SignReq::default_instance_ = NULL;

Fest_SignReq* Fest_SignReq::New() const {
  return new Fest_SignReq;
}

void Fest_SignReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_SignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_SignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_SignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_SignReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_SignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_SignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_SignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_SignReq::MergeFrom(const Fest_SignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_SignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_SignReq::CopyFrom(const Fest_SignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_SignReq::IsInitialized() const {

  return true;
}

void Fest_SignReq::Swap(Fest_SignReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_SignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_SignReq_descriptor_;
  metadata.reflection = Fest_SignReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_SignRsp::kRetFieldNumber;
const int Fest_SignRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_SignRsp::Fest_SignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_SignRsp::InitAsDefaultInstance() {
}

Fest_SignRsp::Fest_SignRsp(const Fest_SignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_SignRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_SignRsp::~Fest_SignRsp() {
  SharedDtor();
}

void Fest_SignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_SignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_SignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_SignRsp_descriptor_;
}

const Fest_SignRsp& Fest_SignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_SignRsp* Fest_SignRsp::default_instance_ = NULL;

Fest_SignRsp* Fest_SignRsp::New() const {
  return new Fest_SignRsp;
}

void Fest_SignRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_SignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_SignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_SignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_SignRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_SignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_SignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_SignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_SignRsp::MergeFrom(const Fest_SignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_SignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_SignRsp::CopyFrom(const Fest_SignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_SignRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_SignRsp::Swap(Fest_SignRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_SignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_SignRsp_descriptor_;
  metadata.reflection = Fest_SignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_GoldStoreUpateBuyRsp::kTemplateIdFieldNumber;
const int Fest_GoldStoreUpateBuyRsp::kIdFieldNumber;
const int Fest_GoldStoreUpateBuyRsp::kNumFieldNumber;
#endif  // !_MSC_VER

Fest_GoldStoreUpateBuyRsp::Fest_GoldStoreUpateBuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_GoldStoreUpateBuyRsp::InitAsDefaultInstance() {
}

Fest_GoldStoreUpateBuyRsp::Fest_GoldStoreUpateBuyRsp(const Fest_GoldStoreUpateBuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_GoldStoreUpateBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_GoldStoreUpateBuyRsp::~Fest_GoldStoreUpateBuyRsp() {
  SharedDtor();
}

void Fest_GoldStoreUpateBuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_GoldStoreUpateBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_GoldStoreUpateBuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_GoldStoreUpateBuyRsp_descriptor_;
}

const Fest_GoldStoreUpateBuyRsp& Fest_GoldStoreUpateBuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_GoldStoreUpateBuyRsp* Fest_GoldStoreUpateBuyRsp::default_instance_ = NULL;

Fest_GoldStoreUpateBuyRsp* Fest_GoldStoreUpateBuyRsp::New() const {
  return new Fest_GoldStoreUpateBuyRsp;
}

void Fest_GoldStoreUpateBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_GoldStoreUpateBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_GoldStoreUpateBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_GoldStoreUpateBuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_GoldStoreUpateBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_GoldStoreUpateBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_GoldStoreUpateBuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_GoldStoreUpateBuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_GoldStoreUpateBuyRsp::MergeFrom(const Fest_GoldStoreUpateBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_GoldStoreUpateBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_GoldStoreUpateBuyRsp::CopyFrom(const Fest_GoldStoreUpateBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_GoldStoreUpateBuyRsp::IsInitialized() const {

  return true;
}

void Fest_GoldStoreUpateBuyRsp::Swap(Fest_GoldStoreUpateBuyRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_GoldStoreUpateBuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_GoldStoreUpateBuyRsp_descriptor_;
  metadata.reflection = Fest_GoldStoreUpateBuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggReq::kTemplateIdFieldNumber;
const int Fest_DigEggReq::kPosFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggReq::Fest_DigEggReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggReq::InitAsDefaultInstance() {
}

Fest_DigEggReq::Fest_DigEggReq(const Fest_DigEggReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggReq::~Fest_DigEggReq() {
  SharedDtor();
}

void Fest_DigEggReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggReq_descriptor_;
}

const Fest_DigEggReq& Fest_DigEggReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggReq* Fest_DigEggReq::default_instance_ = NULL;

Fest_DigEggReq* Fest_DigEggReq::New() const {
  return new Fest_DigEggReq;
}

void Fest_DigEggReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggReq::MergeFrom(const Fest_DigEggReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggReq::CopyFrom(const Fest_DigEggReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggReq::IsInitialized() const {

  return true;
}

void Fest_DigEggReq::Swap(Fest_DigEggReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggReq_descriptor_;
  metadata.reflection = Fest_DigEggReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggRsp::kRetFieldNumber;
const int Fest_DigEggRsp::kTemplateIdFieldNumber;
const int Fest_DigEggRsp::kIdFieldNumber;
const int Fest_DigEggRsp::kPosFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggRsp::Fest_DigEggRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggRsp::InitAsDefaultInstance() {
}

Fest_DigEggRsp::Fest_DigEggRsp(const Fest_DigEggRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  id_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggRsp::~Fest_DigEggRsp() {
  SharedDtor();
}

void Fest_DigEggRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggRsp_descriptor_;
}

const Fest_DigEggRsp& Fest_DigEggRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggRsp* Fest_DigEggRsp::default_instance_ = NULL;

Fest_DigEggRsp* Fest_DigEggRsp::New() const {
  return new Fest_DigEggRsp;
}

void Fest_DigEggRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    id_ = 0;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggRsp::MergeFrom(const Fest_DigEggRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggRsp::CopyFrom(const Fest_DigEggRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_DigEggRsp::Swap(Fest_DigEggRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggRsp_descriptor_;
  metadata.reflection = Fest_DigEggRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggRestReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggRestReq::Fest_DigEggRestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggRestReq::InitAsDefaultInstance() {
}

Fest_DigEggRestReq::Fest_DigEggRestReq(const Fest_DigEggRestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggRestReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggRestReq::~Fest_DigEggRestReq() {
  SharedDtor();
}

void Fest_DigEggRestReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggRestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggRestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggRestReq_descriptor_;
}

const Fest_DigEggRestReq& Fest_DigEggRestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggRestReq* Fest_DigEggRestReq::default_instance_ = NULL;

Fest_DigEggRestReq* Fest_DigEggRestReq::New() const {
  return new Fest_DigEggRestReq;
}

void Fest_DigEggRestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggRestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggRestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggRestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggRestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggRestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggRestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggRestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggRestReq::MergeFrom(const Fest_DigEggRestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggRestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggRestReq::CopyFrom(const Fest_DigEggRestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggRestReq::IsInitialized() const {

  return true;
}

void Fest_DigEggRestReq::Swap(Fest_DigEggRestReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggRestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggRestReq_descriptor_;
  metadata.reflection = Fest_DigEggRestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggRestRsp::kRetFieldNumber;
const int Fest_DigEggRestRsp::kTemplateIdFieldNumber;
const int Fest_DigEggRestRsp::kFreeFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggRestRsp::Fest_DigEggRestRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggRestRsp::InitAsDefaultInstance() {
}

Fest_DigEggRestRsp::Fest_DigEggRestRsp(const Fest_DigEggRestRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggRestRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  free_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggRestRsp::~Fest_DigEggRestRsp() {
  SharedDtor();
}

void Fest_DigEggRestRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggRestRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggRestRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggRestRsp_descriptor_;
}

const Fest_DigEggRestRsp& Fest_DigEggRestRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggRestRsp* Fest_DigEggRestRsp::default_instance_ = NULL;

Fest_DigEggRestRsp* Fest_DigEggRestRsp::New() const {
  return new Fest_DigEggRestRsp;
}

void Fest_DigEggRestRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    free_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggRestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free;
        break;
      }

      // optional int32 free = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggRestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 free = 3;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->free(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggRestRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 free = 3;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->free(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggRestRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 free = 3;
    if (has_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggRestRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggRestRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggRestRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggRestRsp::MergeFrom(const Fest_DigEggRestRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_free()) {
      set_free(from.free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggRestRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggRestRsp::CopyFrom(const Fest_DigEggRestRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggRestRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_DigEggRestRsp::Swap(Fest_DigEggRestRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(free_, other->free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggRestRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggRestRsp_descriptor_;
  metadata.reflection = Fest_DigEggRestRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggLogReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggLogReq::Fest_DigEggLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggLogReq::InitAsDefaultInstance() {
}

Fest_DigEggLogReq::Fest_DigEggLogReq(const Fest_DigEggLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggLogReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggLogReq::~Fest_DigEggLogReq() {
  SharedDtor();
}

void Fest_DigEggLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggLogReq_descriptor_;
}

const Fest_DigEggLogReq& Fest_DigEggLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggLogReq* Fest_DigEggLogReq::default_instance_ = NULL;

Fest_DigEggLogReq* Fest_DigEggLogReq::New() const {
  return new Fest_DigEggLogReq;
}

void Fest_DigEggLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggLogReq::MergeFrom(const Fest_DigEggLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggLogReq::CopyFrom(const Fest_DigEggLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggLogReq::IsInitialized() const {

  return true;
}

void Fest_DigEggLogReq::Swap(Fest_DigEggLogReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggLogReq_descriptor_;
  metadata.reflection = Fest_DigEggLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggLogRsp::kRetFieldNumber;
const int Fest_DigEggLogRsp::kTemplateIdFieldNumber;
const int Fest_DigEggLogRsp::kLogFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggLogRsp::Fest_DigEggLogRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggLogRsp::InitAsDefaultInstance() {
}

Fest_DigEggLogRsp::Fest_DigEggLogRsp(const Fest_DigEggLogRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggLogRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggLogRsp::~Fest_DigEggLogRsp() {
  SharedDtor();
}

void Fest_DigEggLogRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggLogRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggLogRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggLogRsp_descriptor_;
}

const Fest_DigEggLogRsp& Fest_DigEggLogRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggLogRsp* Fest_DigEggLogRsp::default_instance_ = NULL;

Fest_DigEggLogRsp* Fest_DigEggLogRsp::New() const {
  return new Fest_DigEggLogRsp;
}

void Fest_DigEggLogRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggLogRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // repeated .proto_ff.FestDigEggLogProto log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggLogRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // repeated .proto_ff.FestDigEggLogProto log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggLogRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // repeated .proto_ff.FestDigEggLogProto log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggLogRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FestDigEggLogProto log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggLogRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggLogRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggLogRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggLogRsp::MergeFrom(const Fest_DigEggLogRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggLogRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggLogRsp::CopyFrom(const Fest_DigEggLogRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggLogRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_DigEggLogRsp::Swap(Fest_DigEggLogRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggLogRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggLogRsp_descriptor_;
  metadata.reflection = Fest_DigEggLogRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggTaskFetchReq::kTemplateIdFieldNumber;
const int Fest_DigEggTaskFetchReq::kIdFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggTaskFetchReq::Fest_DigEggTaskFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggTaskFetchReq::InitAsDefaultInstance() {
}

Fest_DigEggTaskFetchReq::Fest_DigEggTaskFetchReq(const Fest_DigEggTaskFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggTaskFetchReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggTaskFetchReq::~Fest_DigEggTaskFetchReq() {
  SharedDtor();
}

void Fest_DigEggTaskFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggTaskFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggTaskFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggTaskFetchReq_descriptor_;
}

const Fest_DigEggTaskFetchReq& Fest_DigEggTaskFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggTaskFetchReq* Fest_DigEggTaskFetchReq::default_instance_ = NULL;

Fest_DigEggTaskFetchReq* Fest_DigEggTaskFetchReq::New() const {
  return new Fest_DigEggTaskFetchReq;
}

void Fest_DigEggTaskFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggTaskFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggTaskFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggTaskFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggTaskFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggTaskFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggTaskFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggTaskFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggTaskFetchReq::MergeFrom(const Fest_DigEggTaskFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggTaskFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggTaskFetchReq::CopyFrom(const Fest_DigEggTaskFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggTaskFetchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_DigEggTaskFetchReq::Swap(Fest_DigEggTaskFetchReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggTaskFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggTaskFetchReq_descriptor_;
  metadata.reflection = Fest_DigEggTaskFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggTaskFetchRsp::kRetFieldNumber;
const int Fest_DigEggTaskFetchRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggTaskFetchRsp::Fest_DigEggTaskFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggTaskFetchRsp::InitAsDefaultInstance() {
}

Fest_DigEggTaskFetchRsp::Fest_DigEggTaskFetchRsp(const Fest_DigEggTaskFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggTaskFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggTaskFetchRsp::~Fest_DigEggTaskFetchRsp() {
  SharedDtor();
}

void Fest_DigEggTaskFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggTaskFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggTaskFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggTaskFetchRsp_descriptor_;
}

const Fest_DigEggTaskFetchRsp& Fest_DigEggTaskFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggTaskFetchRsp* Fest_DigEggTaskFetchRsp::default_instance_ = NULL;

Fest_DigEggTaskFetchRsp* Fest_DigEggTaskFetchRsp::New() const {
  return new Fest_DigEggTaskFetchRsp;
}

void Fest_DigEggTaskFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggTaskFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggTaskFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggTaskFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggTaskFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggTaskFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggTaskFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggTaskFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggTaskFetchRsp::MergeFrom(const Fest_DigEggTaskFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggTaskFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggTaskFetchRsp::CopyFrom(const Fest_DigEggTaskFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggTaskFetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_DigEggTaskFetchRsp::Swap(Fest_DigEggTaskFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggTaskFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggTaskFetchRsp_descriptor_;
  metadata.reflection = Fest_DigEggTaskFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DigEggTaskUpdateRsp::kTaskFieldNumber;
#endif  // !_MSC_VER

Fest_DigEggTaskUpdateRsp::Fest_DigEggTaskUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DigEggTaskUpdateRsp::InitAsDefaultInstance() {
}

Fest_DigEggTaskUpdateRsp::Fest_DigEggTaskUpdateRsp(const Fest_DigEggTaskUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DigEggTaskUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DigEggTaskUpdateRsp::~Fest_DigEggTaskUpdateRsp() {
  SharedDtor();
}

void Fest_DigEggTaskUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DigEggTaskUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DigEggTaskUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DigEggTaskUpdateRsp_descriptor_;
}

const Fest_DigEggTaskUpdateRsp& Fest_DigEggTaskUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DigEggTaskUpdateRsp* Fest_DigEggTaskUpdateRsp::default_instance_ = NULL;

Fest_DigEggTaskUpdateRsp* Fest_DigEggTaskUpdateRsp::New() const {
  return new Fest_DigEggTaskUpdateRsp;
}

void Fest_DigEggTaskUpdateRsp::Clear() {
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DigEggTaskUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDigEggTaskProto task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DigEggTaskUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDigEggTaskProto task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DigEggTaskUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDigEggTaskProto task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DigEggTaskUpdateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestDigEggTaskProto task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DigEggTaskUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DigEggTaskUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DigEggTaskUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DigEggTaskUpdateRsp::MergeFrom(const Fest_DigEggTaskUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DigEggTaskUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DigEggTaskUpdateRsp::CopyFrom(const Fest_DigEggTaskUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DigEggTaskUpdateRsp::IsInitialized() const {

  return true;
}

void Fest_DigEggTaskUpdateRsp::Swap(Fest_DigEggTaskUpdateRsp* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DigEggTaskUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DigEggTaskUpdateRsp_descriptor_;
  metadata.reflection = Fest_DigEggTaskUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_RTuranbleLogReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_RTuranbleLogReq::Fest_RTuranbleLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_RTuranbleLogReq::InitAsDefaultInstance() {
}

Fest_RTuranbleLogReq::Fest_RTuranbleLogReq(const Fest_RTuranbleLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_RTuranbleLogReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_RTuranbleLogReq::~Fest_RTuranbleLogReq() {
  SharedDtor();
}

void Fest_RTuranbleLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_RTuranbleLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_RTuranbleLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_RTuranbleLogReq_descriptor_;
}

const Fest_RTuranbleLogReq& Fest_RTuranbleLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_RTuranbleLogReq* Fest_RTuranbleLogReq::default_instance_ = NULL;

Fest_RTuranbleLogReq* Fest_RTuranbleLogReq::New() const {
  return new Fest_RTuranbleLogReq;
}

void Fest_RTuranbleLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_RTuranbleLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_RTuranbleLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_RTuranbleLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_RTuranbleLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_RTuranbleLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_RTuranbleLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_RTuranbleLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_RTuranbleLogReq::MergeFrom(const Fest_RTuranbleLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_RTuranbleLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_RTuranbleLogReq::CopyFrom(const Fest_RTuranbleLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_RTuranbleLogReq::IsInitialized() const {

  return true;
}

void Fest_RTuranbleLogReq::Swap(Fest_RTuranbleLogReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_RTuranbleLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_RTuranbleLogReq_descriptor_;
  metadata.reflection = Fest_RTuranbleLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_RTuranbleLogRsp::kRetFieldNumber;
const int Fest_RTuranbleLogRsp::kTemplateIdFieldNumber;
const int Fest_RTuranbleLogRsp::kLogFieldNumber;
#endif  // !_MSC_VER

Fest_RTuranbleLogRsp::Fest_RTuranbleLogRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_RTuranbleLogRsp::InitAsDefaultInstance() {
}

Fest_RTuranbleLogRsp::Fest_RTuranbleLogRsp(const Fest_RTuranbleLogRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_RTuranbleLogRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_RTuranbleLogRsp::~Fest_RTuranbleLogRsp() {
  SharedDtor();
}

void Fest_RTuranbleLogRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_RTuranbleLogRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_RTuranbleLogRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_RTuranbleLogRsp_descriptor_;
}

const Fest_RTuranbleLogRsp& Fest_RTuranbleLogRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_RTuranbleLogRsp* Fest_RTuranbleLogRsp::default_instance_ = NULL;

Fest_RTuranbleLogRsp* Fest_RTuranbleLogRsp::New() const {
  return new Fest_RTuranbleLogRsp;
}

void Fest_RTuranbleLogRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_RTuranbleLogRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // repeated .proto_ff.RTurnableLogDBProto log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_RTuranbleLogRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // repeated .proto_ff.RTurnableLogDBProto log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_RTuranbleLogRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // repeated .proto_ff.RTurnableLogDBProto log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_RTuranbleLogRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.RTurnableLogDBProto log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_RTuranbleLogRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_RTuranbleLogRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_RTuranbleLogRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_RTuranbleLogRsp::MergeFrom(const Fest_RTuranbleLogRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_RTuranbleLogRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_RTuranbleLogRsp::CopyFrom(const Fest_RTuranbleLogRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_RTuranbleLogRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Fest_RTuranbleLogRsp::Swap(Fest_RTuranbleLogRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_RTuranbleLogRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_RTuranbleLogRsp_descriptor_;
  metadata.reflection = Fest_RTuranbleLogRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableTurnTableReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

TurntableTurnTableReq::TurntableTurnTableReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableTurnTableReq::InitAsDefaultInstance() {
}

TurntableTurnTableReq::TurntableTurnTableReq(const TurntableTurnTableReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableTurnTableReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableTurnTableReq::~TurntableTurnTableReq() {
  SharedDtor();
}

void TurntableTurnTableReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableTurnTableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableTurnTableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableTurnTableReq_descriptor_;
}

const TurntableTurnTableReq& TurntableTurnTableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

TurntableTurnTableReq* TurntableTurnTableReq::default_instance_ = NULL;

TurntableTurnTableReq* TurntableTurnTableReq::New() const {
  return new TurntableTurnTableReq;
}

void TurntableTurnTableReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableTurnTableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableTurnTableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableTurnTableReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableTurnTableReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableTurnTableReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableTurnTableReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableTurnTableReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableTurnTableReq::MergeFrom(const TurntableTurnTableReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableTurnTableReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableTurnTableReq::CopyFrom(const TurntableTurnTableReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableTurnTableReq::IsInitialized() const {

  return true;
}

void TurntableTurnTableReq::Swap(TurntableTurnTableReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableTurnTableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableTurnTableReq_descriptor_;
  metadata.reflection = TurntableTurnTableReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableTurnTableRsp::kRetFieldNumber;
const int TurntableTurnTableRsp::kTemplateIdFieldNumber;
const int TurntableTurnTableRsp::kLeftNumFieldNumber;
const int TurntableTurnTableRsp::kTurntableIdFieldNumber;
const int TurntableTurnTableRsp::kChouJiangIdsFieldNumber;
#endif  // !_MSC_VER

TurntableTurnTableRsp::TurntableTurnTableRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableTurnTableRsp::InitAsDefaultInstance() {
}

TurntableTurnTableRsp::TurntableTurnTableRsp(const TurntableTurnTableRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableTurnTableRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  left_num_ = 0;
  turntable_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableTurnTableRsp::~TurntableTurnTableRsp() {
  SharedDtor();
}

void TurntableTurnTableRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableTurnTableRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableTurnTableRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableTurnTableRsp_descriptor_;
}

const TurntableTurnTableRsp& TurntableTurnTableRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

TurntableTurnTableRsp* TurntableTurnTableRsp::default_instance_ = NULL;

TurntableTurnTableRsp* TurntableTurnTableRsp::New() const {
  return new TurntableTurnTableRsp;
}

void TurntableTurnTableRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    left_num_ = 0;
    turntable_id_ = 0;
  }
  chou_jiang_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableTurnTableRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_num;
        break;
      }

      // optional int32 left_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turntable_id;
        break;
      }

      // optional int32 turntable_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turntable_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turntable_id_)));
          set_has_turntable_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chou_jiang_ids;
        break;
      }

      // repeated int32 chou_jiang_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chou_jiang_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_chou_jiang_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chou_jiang_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chou_jiang_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableTurnTableRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 left_num = 3;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_num(), output);
  }

  // optional int32 turntable_id = 4;
  if (has_turntable_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->turntable_id(), output);
  }

  // repeated int32 chou_jiang_ids = 5;
  for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->chou_jiang_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableTurnTableRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 left_num = 3;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_num(), target);
  }

  // optional int32 turntable_id = 4;
  if (has_turntable_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->turntable_id(), target);
  }

  // repeated int32 chou_jiang_ids = 5;
  for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->chou_jiang_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableTurnTableRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 left_num = 3;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 turntable_id = 4;
    if (has_turntable_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turntable_id());
    }

  }
  // repeated int32 chou_jiang_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chou_jiang_ids(i));
    }
    total_size += 1 * this->chou_jiang_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableTurnTableRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableTurnTableRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableTurnTableRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableTurnTableRsp::MergeFrom(const TurntableTurnTableRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  chou_jiang_ids_.MergeFrom(from.chou_jiang_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_turntable_id()) {
      set_turntable_id(from.turntable_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableTurnTableRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableTurnTableRsp::CopyFrom(const TurntableTurnTableRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableTurnTableRsp::IsInitialized() const {

  return true;
}

void TurntableTurnTableRsp::Swap(TurntableTurnTableRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(left_num_, other->left_num_);
    std::swap(turntable_id_, other->turntable_id_);
    chou_jiang_ids_.Swap(&other->chou_jiang_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableTurnTableRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableTurnTableRsp_descriptor_;
  metadata.reflection = TurntableTurnTableRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableRewardReq::kTemplateIdFieldNumber;
const int TurntableRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TurntableRewardReq::TurntableRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableRewardReq::InitAsDefaultInstance() {
}

TurntableRewardReq::TurntableRewardReq(const TurntableRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableRewardReq::~TurntableRewardReq() {
  SharedDtor();
}

void TurntableRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableRewardReq_descriptor_;
}

const TurntableRewardReq& TurntableRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

TurntableRewardReq* TurntableRewardReq::default_instance_ = NULL;

TurntableRewardReq* TurntableRewardReq::New() const {
  return new TurntableRewardReq;
}

void TurntableRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableRewardReq::MergeFrom(const TurntableRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableRewardReq::CopyFrom(const TurntableRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableRewardReq::IsInitialized() const {

  return true;
}

void TurntableRewardReq::Swap(TurntableRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableRewardReq_descriptor_;
  metadata.reflection = TurntableRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableRewardRsp::kRetFieldNumber;
const int TurntableRewardRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

TurntableRewardRsp::TurntableRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableRewardRsp::InitAsDefaultInstance() {
}

TurntableRewardRsp::TurntableRewardRsp(const TurntableRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableRewardRsp::~TurntableRewardRsp() {
  SharedDtor();
}

void TurntableRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableRewardRsp_descriptor_;
}

const TurntableRewardRsp& TurntableRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

TurntableRewardRsp* TurntableRewardRsp::default_instance_ = NULL;

TurntableRewardRsp* TurntableRewardRsp::New() const {
  return new TurntableRewardRsp;
}

void TurntableRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableRewardRsp::MergeFrom(const TurntableRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableRewardRsp::CopyFrom(const TurntableRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableRewardRsp::IsInitialized() const {

  return true;
}

void TurntableRewardRsp::Swap(TurntableRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableRewardRsp_descriptor_;
  metadata.reflection = TurntableRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableStatusChange::kTemplateIdFieldNumber;
const int TurntableStatusChange::kTaskFieldNumber;
const int TurntableStatusChange::kLeftNumFieldNumber;
#endif  // !_MSC_VER

TurntableStatusChange::TurntableStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableStatusChange::InitAsDefaultInstance() {
}

TurntableStatusChange::TurntableStatusChange(const TurntableStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableStatusChange::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  left_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableStatusChange::~TurntableStatusChange() {
  SharedDtor();
}

void TurntableStatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableStatusChange_descriptor_;
}

const TurntableStatusChange& TurntableStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

TurntableStatusChange* TurntableStatusChange::default_instance_ = NULL;

TurntableStatusChange* TurntableStatusChange::New() const {
  return new TurntableStatusChange;
}

void TurntableStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    left_num_ = 0u;
  }
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // repeated .proto_ff.FestTurnableTaskProto task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        if (input->ExpectTag(24)) goto parse_left_num;
        break;
      }

      // optional uint32 left_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FestTurnableTaskProto task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task(i), output);
  }

  // optional uint32 left_num = 3;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FestTurnableTaskProto task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task(i), target);
  }

  // optional uint32 left_num = 3;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 left_num = 3;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_num());
    }

  }
  // repeated .proto_ff.FestTurnableTaskProto task = 2;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableStatusChange::MergeFrom(const TurntableStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableStatusChange::CopyFrom(const TurntableStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableStatusChange::IsInitialized() const {

  return true;
}

void TurntableStatusChange::Swap(TurntableStatusChange* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    task_.Swap(&other->task_);
    std::swap(left_num_, other->left_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableStatusChange_descriptor_;
  metadata.reflection = TurntableStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetServerNumReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FestDonateGetServerNumReq::FestDonateGetServerNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetServerNumReq::InitAsDefaultInstance() {
}

FestDonateGetServerNumReq::FestDonateGetServerNumReq(const FestDonateGetServerNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetServerNumReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetServerNumReq::~FestDonateGetServerNumReq() {
  SharedDtor();
}

void FestDonateGetServerNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateGetServerNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetServerNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetServerNumReq_descriptor_;
}

const FestDonateGetServerNumReq& FestDonateGetServerNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetServerNumReq* FestDonateGetServerNumReq::default_instance_ = NULL;

FestDonateGetServerNumReq* FestDonateGetServerNumReq::New() const {
  return new FestDonateGetServerNumReq;
}

void FestDonateGetServerNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetServerNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetServerNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetServerNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetServerNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetServerNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetServerNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetServerNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetServerNumReq::MergeFrom(const FestDonateGetServerNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetServerNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetServerNumReq::CopyFrom(const FestDonateGetServerNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetServerNumReq::IsInitialized() const {

  return true;
}

void FestDonateGetServerNumReq::Swap(FestDonateGetServerNumReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetServerNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetServerNumReq_descriptor_;
  metadata.reflection = FestDonateGetServerNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetServerNumRsp::kRetFieldNumber;
const int FestDonateGetServerNumRsp::kTemplateIdFieldNumber;
const int FestDonateGetServerNumRsp::kServerNumFieldNumber;
#endif  // !_MSC_VER

FestDonateGetServerNumRsp::FestDonateGetServerNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetServerNumRsp::InitAsDefaultInstance() {
}

FestDonateGetServerNumRsp::FestDonateGetServerNumRsp(const FestDonateGetServerNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetServerNumRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  server_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetServerNumRsp::~FestDonateGetServerNumRsp() {
  SharedDtor();
}

void FestDonateGetServerNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateGetServerNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetServerNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetServerNumRsp_descriptor_;
}

const FestDonateGetServerNumRsp& FestDonateGetServerNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetServerNumRsp* FestDonateGetServerNumRsp::default_instance_ = NULL;

FestDonateGetServerNumRsp* FestDonateGetServerNumRsp::New() const {
  return new FestDonateGetServerNumRsp;
}

void FestDonateGetServerNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    server_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetServerNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_num;
        break;
      }

      // optional uint32 server_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_num_)));
          set_has_server_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetServerNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetServerNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetServerNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 server_num = 3;
    if (has_server_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetServerNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetServerNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetServerNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetServerNumRsp::MergeFrom(const FestDonateGetServerNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_server_num()) {
      set_server_num(from.server_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetServerNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetServerNumRsp::CopyFrom(const FestDonateGetServerNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetServerNumRsp::IsInitialized() const {

  return true;
}

void FestDonateGetServerNumRsp::Swap(FestDonateGetServerNumRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(server_num_, other->server_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetServerNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetServerNumRsp_descriptor_;
  metadata.reflection = FestDonateGetServerNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateDonateReq::kTemplateIdFieldNumber;
const int FestDonateDonateReq::kTypeFieldNumber;
#endif  // !_MSC_VER

FestDonateDonateReq::FestDonateDonateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateDonateReq::InitAsDefaultInstance() {
}

FestDonateDonateReq::FestDonateDonateReq(const FestDonateDonateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateDonateReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateDonateReq::~FestDonateDonateReq() {
  SharedDtor();
}

void FestDonateDonateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateDonateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateDonateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateDonateReq_descriptor_;
}

const FestDonateDonateReq& FestDonateDonateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateDonateReq* FestDonateDonateReq::default_instance_ = NULL;

FestDonateDonateReq* FestDonateDonateReq::New() const {
  return new FestDonateDonateReq;
}

void FestDonateDonateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateDonateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateDonateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateDonateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateDonateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateDonateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateDonateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateDonateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateDonateReq::MergeFrom(const FestDonateDonateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateDonateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateDonateReq::CopyFrom(const FestDonateDonateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateDonateReq::IsInitialized() const {

  return true;
}

void FestDonateDonateReq::Swap(FestDonateDonateReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateDonateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateDonateReq_descriptor_;
  metadata.reflection = FestDonateDonateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateDonateRsp::kRetFieldNumber;
const int FestDonateDonateRsp::kTemplateIdFieldNumber;
const int FestDonateDonateRsp::kSingleNumFieldNumber;
#endif  // !_MSC_VER

FestDonateDonateRsp::FestDonateDonateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateDonateRsp::InitAsDefaultInstance() {
}

FestDonateDonateRsp::FestDonateDonateRsp(const FestDonateDonateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateDonateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  single_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateDonateRsp::~FestDonateDonateRsp() {
  SharedDtor();
}

void FestDonateDonateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateDonateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateDonateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateDonateRsp_descriptor_;
}

const FestDonateDonateRsp& FestDonateDonateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateDonateRsp* FestDonateDonateRsp::default_instance_ = NULL;

FestDonateDonateRsp* FestDonateDonateRsp::New() const {
  return new FestDonateDonateRsp;
}

void FestDonateDonateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    single_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateDonateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_single_num;
        break;
      }

      // optional uint32 single_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &single_num_)));
          set_has_single_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateDonateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->single_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateDonateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->single_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateDonateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 single_num = 3;
    if (has_single_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->single_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateDonateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateDonateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateDonateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateDonateRsp::MergeFrom(const FestDonateDonateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_single_num()) {
      set_single_num(from.single_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateDonateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateDonateRsp::CopyFrom(const FestDonateDonateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateDonateRsp::IsInitialized() const {

  return true;
}

void FestDonateDonateRsp::Swap(FestDonateDonateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(single_num_, other->single_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateDonateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateDonateRsp_descriptor_;
  metadata.reflection = FestDonateDonateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetSingleRewardReq::kTemplateIdFieldNumber;
const int FestDonateGetSingleRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestDonateGetSingleRewardReq::FestDonateGetSingleRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetSingleRewardReq::InitAsDefaultInstance() {
}

FestDonateGetSingleRewardReq::FestDonateGetSingleRewardReq(const FestDonateGetSingleRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetSingleRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetSingleRewardReq::~FestDonateGetSingleRewardReq() {
  SharedDtor();
}

void FestDonateGetSingleRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateGetSingleRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetSingleRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetSingleRewardReq_descriptor_;
}

const FestDonateGetSingleRewardReq& FestDonateGetSingleRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetSingleRewardReq* FestDonateGetSingleRewardReq::default_instance_ = NULL;

FestDonateGetSingleRewardReq* FestDonateGetSingleRewardReq::New() const {
  return new FestDonateGetSingleRewardReq;
}

void FestDonateGetSingleRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetSingleRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetSingleRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetSingleRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetSingleRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetSingleRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetSingleRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetSingleRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetSingleRewardReq::MergeFrom(const FestDonateGetSingleRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetSingleRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetSingleRewardReq::CopyFrom(const FestDonateGetSingleRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetSingleRewardReq::IsInitialized() const {

  return true;
}

void FestDonateGetSingleRewardReq::Swap(FestDonateGetSingleRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetSingleRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetSingleRewardReq_descriptor_;
  metadata.reflection = FestDonateGetSingleRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetSingleRewardRsp::kRetFieldNumber;
const int FestDonateGetSingleRewardRsp::kTemplateIdFieldNumber;
const int FestDonateGetSingleRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestDonateGetSingleRewardRsp::FestDonateGetSingleRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetSingleRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FestDonateSingleProto*>(&::proto_ff::FestDonateSingleProto::default_instance());
}

FestDonateGetSingleRewardRsp::FestDonateGetSingleRewardRsp(const FestDonateGetSingleRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetSingleRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetSingleRewardRsp::~FestDonateGetSingleRewardRsp() {
  SharedDtor();
}

void FestDonateGetSingleRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestDonateGetSingleRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetSingleRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetSingleRewardRsp_descriptor_;
}

const FestDonateGetSingleRewardRsp& FestDonateGetSingleRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetSingleRewardRsp* FestDonateGetSingleRewardRsp::default_instance_ = NULL;

FestDonateGetSingleRewardRsp* FestDonateGetSingleRewardRsp::New() const {
  return new FestDonateGetSingleRewardRsp;
}

void FestDonateGetSingleRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FestDonateSingleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetSingleRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FestDonateSingleProto data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetSingleRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestDonateSingleProto data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetSingleRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestDonateSingleProto data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetSingleRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestDonateSingleProto data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetSingleRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetSingleRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetSingleRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetSingleRewardRsp::MergeFrom(const FestDonateGetSingleRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FestDonateSingleProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetSingleRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetSingleRewardRsp::CopyFrom(const FestDonateGetSingleRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetSingleRewardRsp::IsInitialized() const {

  return true;
}

void FestDonateGetSingleRewardRsp::Swap(FestDonateGetSingleRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetSingleRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetSingleRewardRsp_descriptor_;
  metadata.reflection = FestDonateGetSingleRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetServerRewardReq::kTemplateIdFieldNumber;
const int FestDonateGetServerRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestDonateGetServerRewardReq::FestDonateGetServerRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetServerRewardReq::InitAsDefaultInstance() {
}

FestDonateGetServerRewardReq::FestDonateGetServerRewardReq(const FestDonateGetServerRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetServerRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetServerRewardReq::~FestDonateGetServerRewardReq() {
  SharedDtor();
}

void FestDonateGetServerRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateGetServerRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetServerRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetServerRewardReq_descriptor_;
}

const FestDonateGetServerRewardReq& FestDonateGetServerRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetServerRewardReq* FestDonateGetServerRewardReq::default_instance_ = NULL;

FestDonateGetServerRewardReq* FestDonateGetServerRewardReq::New() const {
  return new FestDonateGetServerRewardReq;
}

void FestDonateGetServerRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetServerRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetServerRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetServerRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetServerRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetServerRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetServerRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetServerRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetServerRewardReq::MergeFrom(const FestDonateGetServerRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetServerRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetServerRewardReq::CopyFrom(const FestDonateGetServerRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetServerRewardReq::IsInitialized() const {

  return true;
}

void FestDonateGetServerRewardReq::Swap(FestDonateGetServerRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetServerRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetServerRewardReq_descriptor_;
  metadata.reflection = FestDonateGetServerRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetServerRewardRsp::kRetFieldNumber;
const int FestDonateGetServerRewardRsp::kTemplateIdFieldNumber;
const int FestDonateGetServerRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestDonateGetServerRewardRsp::FestDonateGetServerRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetServerRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FestDonateServerProto*>(&::proto_ff::FestDonateServerProto::default_instance());
}

FestDonateGetServerRewardRsp::FestDonateGetServerRewardRsp(const FestDonateGetServerRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetServerRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetServerRewardRsp::~FestDonateGetServerRewardRsp() {
  SharedDtor();
}

void FestDonateGetServerRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestDonateGetServerRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetServerRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetServerRewardRsp_descriptor_;
}

const FestDonateGetServerRewardRsp& FestDonateGetServerRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetServerRewardRsp* FestDonateGetServerRewardRsp::default_instance_ = NULL;

FestDonateGetServerRewardRsp* FestDonateGetServerRewardRsp::New() const {
  return new FestDonateGetServerRewardRsp;
}

void FestDonateGetServerRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FestDonateServerProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetServerRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FestDonateServerProto data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetServerRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestDonateServerProto data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetServerRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestDonateServerProto data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetServerRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestDonateServerProto data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetServerRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetServerRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetServerRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetServerRewardRsp::MergeFrom(const FestDonateGetServerRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FestDonateServerProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetServerRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetServerRewardRsp::CopyFrom(const FestDonateGetServerRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetServerRewardRsp::IsInitialized() const {

  return true;
}

void FestDonateGetServerRewardRsp::Swap(FestDonateGetServerRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetServerRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetServerRewardRsp_descriptor_;
  metadata.reflection = FestDonateGetServerRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetTaskRewardReq::kTemplateIdFieldNumber;
const int FestDonateGetTaskRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestDonateGetTaskRewardReq::FestDonateGetTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetTaskRewardReq::InitAsDefaultInstance() {
}

FestDonateGetTaskRewardReq::FestDonateGetTaskRewardReq(const FestDonateGetTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetTaskRewardReq::~FestDonateGetTaskRewardReq() {
  SharedDtor();
}

void FestDonateGetTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateGetTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetTaskRewardReq_descriptor_;
}

const FestDonateGetTaskRewardReq& FestDonateGetTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetTaskRewardReq* FestDonateGetTaskRewardReq::default_instance_ = NULL;

FestDonateGetTaskRewardReq* FestDonateGetTaskRewardReq::New() const {
  return new FestDonateGetTaskRewardReq;
}

void FestDonateGetTaskRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetTaskRewardReq::MergeFrom(const FestDonateGetTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetTaskRewardReq::CopyFrom(const FestDonateGetTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetTaskRewardReq::IsInitialized() const {

  return true;
}

void FestDonateGetTaskRewardReq::Swap(FestDonateGetTaskRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetTaskRewardReq_descriptor_;
  metadata.reflection = FestDonateGetTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateGetTaskRewardRsp::kRetFieldNumber;
const int FestDonateGetTaskRewardRsp::kTemplateIdFieldNumber;
const int FestDonateGetTaskRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestDonateGetTaskRewardRsp::FestDonateGetTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateGetTaskRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FestDonateTaskProto*>(&::proto_ff::FestDonateTaskProto::default_instance());
}

FestDonateGetTaskRewardRsp::FestDonateGetTaskRewardRsp(const FestDonateGetTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateGetTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateGetTaskRewardRsp::~FestDonateGetTaskRewardRsp() {
  SharedDtor();
}

void FestDonateGetTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestDonateGetTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateGetTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateGetTaskRewardRsp_descriptor_;
}

const FestDonateGetTaskRewardRsp& FestDonateGetTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateGetTaskRewardRsp* FestDonateGetTaskRewardRsp::default_instance_ = NULL;

FestDonateGetTaskRewardRsp* FestDonateGetTaskRewardRsp::New() const {
  return new FestDonateGetTaskRewardRsp;
}

void FestDonateGetTaskRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FestDonateTaskProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateGetTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FestDonateTaskProto data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateGetTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestDonateTaskProto data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateGetTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestDonateTaskProto data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateGetTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestDonateTaskProto data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateGetTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateGetTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateGetTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateGetTaskRewardRsp::MergeFrom(const FestDonateGetTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FestDonateTaskProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateGetTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateGetTaskRewardRsp::CopyFrom(const FestDonateGetTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateGetTaskRewardRsp::IsInitialized() const {

  return true;
}

void FestDonateGetTaskRewardRsp::Swap(FestDonateGetTaskRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateGetTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateGetTaskRewardRsp_descriptor_;
  metadata.reflection = FestDonateGetTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateTaskTtatusChange::kTemplateIdFieldNumber;
const int FestDonateTaskTtatusChange::kDataFieldNumber;
#endif  // !_MSC_VER

FestDonateTaskTtatusChange::FestDonateTaskTtatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateTaskTtatusChange::InitAsDefaultInstance() {
}

FestDonateTaskTtatusChange::FestDonateTaskTtatusChange(const FestDonateTaskTtatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateTaskTtatusChange::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateTaskTtatusChange::~FestDonateTaskTtatusChange() {
  SharedDtor();
}

void FestDonateTaskTtatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateTaskTtatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateTaskTtatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateTaskTtatusChange_descriptor_;
}

const FestDonateTaskTtatusChange& FestDonateTaskTtatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDonateTaskTtatusChange* FestDonateTaskTtatusChange::default_instance_ = NULL;

FestDonateTaskTtatusChange* FestDonateTaskTtatusChange::New() const {
  return new FestDonateTaskTtatusChange;
}

void FestDonateTaskTtatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateTaskTtatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .proto_ff.FestDonateTaskProto data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateTaskTtatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FestDonateTaskProto data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateTaskTtatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FestDonateTaskProto data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateTaskTtatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FestDonateTaskProto data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateTaskTtatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateTaskTtatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateTaskTtatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateTaskTtatusChange::MergeFrom(const FestDonateTaskTtatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateTaskTtatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateTaskTtatusChange::CopyFrom(const FestDonateTaskTtatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateTaskTtatusChange::IsInitialized() const {

  return true;
}

void FestDonateTaskTtatusChange::Swap(FestDonateTaskTtatusChange* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateTaskTtatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateTaskTtatusChange_descriptor_;
  metadata.reflection = FestDonateTaskTtatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestOnlineGetRewardReq::kTemplateIdFieldNumber;
const int FestOnlineGetRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestOnlineGetRewardReq::FestOnlineGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestOnlineGetRewardReq::InitAsDefaultInstance() {
}

FestOnlineGetRewardReq::FestOnlineGetRewardReq(const FestOnlineGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestOnlineGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestOnlineGetRewardReq::~FestOnlineGetRewardReq() {
  SharedDtor();
}

void FestOnlineGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestOnlineGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestOnlineGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestOnlineGetRewardReq_descriptor_;
}

const FestOnlineGetRewardReq& FestOnlineGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestOnlineGetRewardReq* FestOnlineGetRewardReq::default_instance_ = NULL;

FestOnlineGetRewardReq* FestOnlineGetRewardReq::New() const {
  return new FestOnlineGetRewardReq;
}

void FestOnlineGetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestOnlineGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestOnlineGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestOnlineGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestOnlineGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestOnlineGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestOnlineGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestOnlineGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestOnlineGetRewardReq::MergeFrom(const FestOnlineGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestOnlineGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestOnlineGetRewardReq::CopyFrom(const FestOnlineGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestOnlineGetRewardReq::IsInitialized() const {

  return true;
}

void FestOnlineGetRewardReq::Swap(FestOnlineGetRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestOnlineGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestOnlineGetRewardReq_descriptor_;
  metadata.reflection = FestOnlineGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestOnlineGetRewardRsp::kRetFieldNumber;
const int FestOnlineGetRewardRsp::kTemplateIdFieldNumber;
const int FestOnlineGetRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestOnlineGetRewardRsp::FestOnlineGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestOnlineGetRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FestOnlineOneProto*>(&::proto_ff::FestOnlineOneProto::default_instance());
}

FestOnlineGetRewardRsp::FestOnlineGetRewardRsp(const FestOnlineGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestOnlineGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestOnlineGetRewardRsp::~FestOnlineGetRewardRsp() {
  SharedDtor();
}

void FestOnlineGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestOnlineGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestOnlineGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestOnlineGetRewardRsp_descriptor_;
}

const FestOnlineGetRewardRsp& FestOnlineGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestOnlineGetRewardRsp* FestOnlineGetRewardRsp::default_instance_ = NULL;

FestOnlineGetRewardRsp* FestOnlineGetRewardRsp::New() const {
  return new FestOnlineGetRewardRsp;
}

void FestOnlineGetRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FestOnlineOneProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestOnlineGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FestOnlineOneProto data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestOnlineGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestOnlineOneProto data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestOnlineGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestOnlineOneProto data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestOnlineGetRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestOnlineOneProto data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestOnlineGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestOnlineGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestOnlineGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestOnlineGetRewardRsp::MergeFrom(const FestOnlineGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FestOnlineOneProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestOnlineGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestOnlineGetRewardRsp::CopyFrom(const FestOnlineGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestOnlineGetRewardRsp::IsInitialized() const {

  return true;
}

void FestOnlineGetRewardRsp::Swap(FestOnlineGetRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestOnlineGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestOnlineGetRewardRsp_descriptor_;
  metadata.reflection = FestOnlineGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCollectWorldExchargeReq::kTemplateIdFieldNumber;
const int FestCollectWorldExchargeReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestCollectWorldExchargeReq::FestCollectWorldExchargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCollectWorldExchargeReq::InitAsDefaultInstance() {
}

FestCollectWorldExchargeReq::FestCollectWorldExchargeReq(const FestCollectWorldExchargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCollectWorldExchargeReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCollectWorldExchargeReq::~FestCollectWorldExchargeReq() {
  SharedDtor();
}

void FestCollectWorldExchargeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCollectWorldExchargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCollectWorldExchargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCollectWorldExchargeReq_descriptor_;
}

const FestCollectWorldExchargeReq& FestCollectWorldExchargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCollectWorldExchargeReq* FestCollectWorldExchargeReq::default_instance_ = NULL;

FestCollectWorldExchargeReq* FestCollectWorldExchargeReq::New() const {
  return new FestCollectWorldExchargeReq;
}

void FestCollectWorldExchargeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCollectWorldExchargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCollectWorldExchargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCollectWorldExchargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCollectWorldExchargeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCollectWorldExchargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCollectWorldExchargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCollectWorldExchargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCollectWorldExchargeReq::MergeFrom(const FestCollectWorldExchargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCollectWorldExchargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCollectWorldExchargeReq::CopyFrom(const FestCollectWorldExchargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCollectWorldExchargeReq::IsInitialized() const {

  return true;
}

void FestCollectWorldExchargeReq::Swap(FestCollectWorldExchargeReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCollectWorldExchargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCollectWorldExchargeReq_descriptor_;
  metadata.reflection = FestCollectWorldExchargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCollectWorldExchargeRsp::kRetFieldNumber;
const int FestCollectWorldExchargeRsp::kTemplateIdFieldNumber;
const int FestCollectWorldExchargeRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestCollectWorldExchargeRsp::FestCollectWorldExchargeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCollectWorldExchargeRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FestCollectWordOneProto*>(&::proto_ff::FestCollectWordOneProto::default_instance());
}

FestCollectWorldExchargeRsp::FestCollectWorldExchargeRsp(const FestCollectWorldExchargeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCollectWorldExchargeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCollectWorldExchargeRsp::~FestCollectWorldExchargeRsp() {
  SharedDtor();
}

void FestCollectWorldExchargeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestCollectWorldExchargeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCollectWorldExchargeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCollectWorldExchargeRsp_descriptor_;
}

const FestCollectWorldExchargeRsp& FestCollectWorldExchargeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCollectWorldExchargeRsp* FestCollectWorldExchargeRsp::default_instance_ = NULL;

FestCollectWorldExchargeRsp* FestCollectWorldExchargeRsp::New() const {
  return new FestCollectWorldExchargeRsp;
}

void FestCollectWorldExchargeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FestCollectWordOneProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCollectWorldExchargeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FestCollectWordOneProto data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCollectWorldExchargeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestCollectWordOneProto data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCollectWorldExchargeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestCollectWordOneProto data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCollectWorldExchargeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestCollectWordOneProto data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCollectWorldExchargeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCollectWorldExchargeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCollectWorldExchargeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCollectWorldExchargeRsp::MergeFrom(const FestCollectWorldExchargeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FestCollectWordOneProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCollectWorldExchargeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCollectWorldExchargeRsp::CopyFrom(const FestCollectWorldExchargeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCollectWorldExchargeRsp::IsInitialized() const {

  return true;
}

void FestCollectWorldExchargeRsp::Swap(FestCollectWorldExchargeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCollectWorldExchargeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCollectWorldExchargeRsp_descriptor_;
  metadata.reflection = FestCollectWorldExchargeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeChouJiangReq::kTemplateIdFieldNumber;
const int FestDrawPizeChouJiangReq::kTypeFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeChouJiangReq::FestDrawPizeChouJiangReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeChouJiangReq::InitAsDefaultInstance() {
}

FestDrawPizeChouJiangReq::FestDrawPizeChouJiangReq(const FestDrawPizeChouJiangReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeChouJiangReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeChouJiangReq::~FestDrawPizeChouJiangReq() {
  SharedDtor();
}

void FestDrawPizeChouJiangReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeChouJiangReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeChouJiangReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeChouJiangReq_descriptor_;
}

const FestDrawPizeChouJiangReq& FestDrawPizeChouJiangReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeChouJiangReq* FestDrawPizeChouJiangReq::default_instance_ = NULL;

FestDrawPizeChouJiangReq* FestDrawPizeChouJiangReq::New() const {
  return new FestDrawPizeChouJiangReq;
}

void FestDrawPizeChouJiangReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeChouJiangReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeChouJiangReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeChouJiangReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeChouJiangReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeChouJiangReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeChouJiangReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeChouJiangReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeChouJiangReq::MergeFrom(const FestDrawPizeChouJiangReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeChouJiangReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeChouJiangReq::CopyFrom(const FestDrawPizeChouJiangReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeChouJiangReq::IsInitialized() const {

  return true;
}

void FestDrawPizeChouJiangReq::Swap(FestDrawPizeChouJiangReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeChouJiangReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeChouJiangReq_descriptor_;
  metadata.reflection = FestDrawPizeChouJiangReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeChouJiangRsp::kRetFieldNumber;
const int FestDrawPizeChouJiangRsp::kTemplateIdFieldNumber;
const int FestDrawPizeChouJiangRsp::kChoujiangIdFieldNumber;
const int FestDrawPizeChouJiangRsp::kChoujiangNumFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeChouJiangRsp::FestDrawPizeChouJiangRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeChouJiangRsp::InitAsDefaultInstance() {
}

FestDrawPizeChouJiangRsp::FestDrawPizeChouJiangRsp(const FestDrawPizeChouJiangRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeChouJiangRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  choujiang_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeChouJiangRsp::~FestDrawPizeChouJiangRsp() {
  SharedDtor();
}

void FestDrawPizeChouJiangRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeChouJiangRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeChouJiangRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeChouJiangRsp_descriptor_;
}

const FestDrawPizeChouJiangRsp& FestDrawPizeChouJiangRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeChouJiangRsp* FestDrawPizeChouJiangRsp::default_instance_ = NULL;

FestDrawPizeChouJiangRsp* FestDrawPizeChouJiangRsp::New() const {
  return new FestDrawPizeChouJiangRsp;
}

void FestDrawPizeChouJiangRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    choujiang_num_ = 0u;
  }
  choujiang_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeChouJiangRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_choujiang_id;
        break;
      }

      // repeated int32 choujiang_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_choujiang_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_choujiang_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_choujiang_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_choujiang_id;
        if (input->ExpectTag(40)) goto parse_choujiang_num;
        break;
      }

      // optional uint32 choujiang_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_choujiang_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choujiang_num_)));
          set_has_choujiang_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeChouJiangRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // repeated int32 choujiang_id = 3;
  for (int i = 0; i < this->choujiang_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->choujiang_id(i), output);
  }

  // optional uint32 choujiang_num = 5;
  if (has_choujiang_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->choujiang_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeChouJiangRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // repeated int32 choujiang_id = 3;
  for (int i = 0; i < this->choujiang_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->choujiang_id(i), target);
  }

  // optional uint32 choujiang_num = 5;
  if (has_choujiang_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->choujiang_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeChouJiangRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 choujiang_num = 5;
    if (has_choujiang_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choujiang_num());
    }

  }
  // repeated int32 choujiang_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->choujiang_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->choujiang_id(i));
    }
    total_size += 1 * this->choujiang_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeChouJiangRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeChouJiangRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeChouJiangRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeChouJiangRsp::MergeFrom(const FestDrawPizeChouJiangRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  choujiang_id_.MergeFrom(from.choujiang_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_choujiang_num()) {
      set_choujiang_num(from.choujiang_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeChouJiangRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeChouJiangRsp::CopyFrom(const FestDrawPizeChouJiangRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeChouJiangRsp::IsInitialized() const {

  return true;
}

void FestDrawPizeChouJiangRsp::Swap(FestDrawPizeChouJiangRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    choujiang_id_.Swap(&other->choujiang_id_);
    std::swap(choujiang_num_, other->choujiang_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeChouJiangRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeChouJiangRsp_descriptor_;
  metadata.reflection = FestDrawPizeChouJiangRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeGetRewardReq::kTemplateIdFieldNumber;
const int FestDrawPizeGetRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeGetRewardReq::FestDrawPizeGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeGetRewardReq::InitAsDefaultInstance() {
}

FestDrawPizeGetRewardReq::FestDrawPizeGetRewardReq(const FestDrawPizeGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeGetRewardReq::~FestDrawPizeGetRewardReq() {
  SharedDtor();
}

void FestDrawPizeGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeGetRewardReq_descriptor_;
}

const FestDrawPizeGetRewardReq& FestDrawPizeGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeGetRewardReq* FestDrawPizeGetRewardReq::default_instance_ = NULL;

FestDrawPizeGetRewardReq* FestDrawPizeGetRewardReq::New() const {
  return new FestDrawPizeGetRewardReq;
}

void FestDrawPizeGetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeGetRewardReq::MergeFrom(const FestDrawPizeGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeGetRewardReq::CopyFrom(const FestDrawPizeGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeGetRewardReq::IsInitialized() const {

  return true;
}

void FestDrawPizeGetRewardReq::Swap(FestDrawPizeGetRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeGetRewardReq_descriptor_;
  metadata.reflection = FestDrawPizeGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeGetRewardRsp::kRetFieldNumber;
const int FestDrawPizeGetRewardRsp::kTemplateIdFieldNumber;
const int FestDrawPizeGetRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeGetRewardRsp::FestDrawPizeGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeGetRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DrawPizeTaskProto*>(&::proto_ff::DrawPizeTaskProto::default_instance());
}

FestDrawPizeGetRewardRsp::FestDrawPizeGetRewardRsp(const FestDrawPizeGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeGetRewardRsp::~FestDrawPizeGetRewardRsp() {
  SharedDtor();
}

void FestDrawPizeGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestDrawPizeGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeGetRewardRsp_descriptor_;
}

const FestDrawPizeGetRewardRsp& FestDrawPizeGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeGetRewardRsp* FestDrawPizeGetRewardRsp::default_instance_ = NULL;

FestDrawPizeGetRewardRsp* FestDrawPizeGetRewardRsp::New() const {
  return new FestDrawPizeGetRewardRsp;
}

void FestDrawPizeGetRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DrawPizeTaskProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.DrawPizeTaskProto data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.DrawPizeTaskProto data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.DrawPizeTaskProto data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeGetRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.DrawPizeTaskProto data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeGetRewardRsp::MergeFrom(const FestDrawPizeGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::DrawPizeTaskProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeGetRewardRsp::CopyFrom(const FestDrawPizeGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeGetRewardRsp::IsInitialized() const {

  return true;
}

void FestDrawPizeGetRewardRsp::Swap(FestDrawPizeGetRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeGetRewardRsp_descriptor_;
  metadata.reflection = FestDrawPizeGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeLogReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeLogReq::FestDrawPizeLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeLogReq::InitAsDefaultInstance() {
}

FestDrawPizeLogReq::FestDrawPizeLogReq(const FestDrawPizeLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeLogReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeLogReq::~FestDrawPizeLogReq() {
  SharedDtor();
}

void FestDrawPizeLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeLogReq_descriptor_;
}

const FestDrawPizeLogReq& FestDrawPizeLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeLogReq* FestDrawPizeLogReq::default_instance_ = NULL;

FestDrawPizeLogReq* FestDrawPizeLogReq::New() const {
  return new FestDrawPizeLogReq;
}

void FestDrawPizeLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeLogReq::MergeFrom(const FestDrawPizeLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeLogReq::CopyFrom(const FestDrawPizeLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeLogReq::IsInitialized() const {

  return true;
}

void FestDrawPizeLogReq::Swap(FestDrawPizeLogReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeLogReq_descriptor_;
  metadata.reflection = FestDrawPizeLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeLogRsp::kRetFieldNumber;
const int FestDrawPizeLogRsp::kTemplateIdFieldNumber;
const int FestDrawPizeLogRsp::kLogFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeLogRsp::FestDrawPizeLogRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeLogRsp::InitAsDefaultInstance() {
}

FestDrawPizeLogRsp::FestDrawPizeLogRsp(const FestDrawPizeLogRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeLogRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeLogRsp::~FestDrawPizeLogRsp() {
  SharedDtor();
}

void FestDrawPizeLogRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeLogRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeLogRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeLogRsp_descriptor_;
}

const FestDrawPizeLogRsp& FestDrawPizeLogRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeLogRsp* FestDrawPizeLogRsp::default_instance_ = NULL;

FestDrawPizeLogRsp* FestDrawPizeLogRsp::New() const {
  return new FestDrawPizeLogRsp;
}

void FestDrawPizeLogRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeLogRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // repeated .proto_ff.DrawPizeLogDBProto log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeLogRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // repeated .proto_ff.DrawPizeLogDBProto log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeLogRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // repeated .proto_ff.DrawPizeLogDBProto log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeLogRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.DrawPizeLogDBProto log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeLogRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeLogRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeLogRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeLogRsp::MergeFrom(const FestDrawPizeLogRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeLogRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeLogRsp::CopyFrom(const FestDrawPizeLogRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeLogRsp::IsInitialized() const {

  return true;
}

void FestDrawPizeLogRsp::Swap(FestDrawPizeLogRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeLogRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeLogRsp_descriptor_;
  metadata.reflection = FestDrawPizeLogRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeGetServerNumReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeGetServerNumReq::FestDrawPizeGetServerNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeGetServerNumReq::InitAsDefaultInstance() {
}

FestDrawPizeGetServerNumReq::FestDrawPizeGetServerNumReq(const FestDrawPizeGetServerNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeGetServerNumReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeGetServerNumReq::~FestDrawPizeGetServerNumReq() {
  SharedDtor();
}

void FestDrawPizeGetServerNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeGetServerNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeGetServerNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeGetServerNumReq_descriptor_;
}

const FestDrawPizeGetServerNumReq& FestDrawPizeGetServerNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeGetServerNumReq* FestDrawPizeGetServerNumReq::default_instance_ = NULL;

FestDrawPizeGetServerNumReq* FestDrawPizeGetServerNumReq::New() const {
  return new FestDrawPizeGetServerNumReq;
}

void FestDrawPizeGetServerNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeGetServerNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeGetServerNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeGetServerNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeGetServerNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeGetServerNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeGetServerNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeGetServerNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeGetServerNumReq::MergeFrom(const FestDrawPizeGetServerNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeGetServerNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeGetServerNumReq::CopyFrom(const FestDrawPizeGetServerNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeGetServerNumReq::IsInitialized() const {

  return true;
}

void FestDrawPizeGetServerNumReq::Swap(FestDrawPizeGetServerNumReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeGetServerNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeGetServerNumReq_descriptor_;
  metadata.reflection = FestDrawPizeGetServerNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeGetServerNumRsp::kRetFieldNumber;
const int FestDrawPizeGetServerNumRsp::kTemplateIdFieldNumber;
const int FestDrawPizeGetServerNumRsp::kServerNumFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeGetServerNumRsp::FestDrawPizeGetServerNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeGetServerNumRsp::InitAsDefaultInstance() {
}

FestDrawPizeGetServerNumRsp::FestDrawPizeGetServerNumRsp(const FestDrawPizeGetServerNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeGetServerNumRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  server_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeGetServerNumRsp::~FestDrawPizeGetServerNumRsp() {
  SharedDtor();
}

void FestDrawPizeGetServerNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeGetServerNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeGetServerNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeGetServerNumRsp_descriptor_;
}

const FestDrawPizeGetServerNumRsp& FestDrawPizeGetServerNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestDrawPizeGetServerNumRsp* FestDrawPizeGetServerNumRsp::default_instance_ = NULL;

FestDrawPizeGetServerNumRsp* FestDrawPizeGetServerNumRsp::New() const {
  return new FestDrawPizeGetServerNumRsp;
}

void FestDrawPizeGetServerNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    server_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeGetServerNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_num;
        break;
      }

      // optional uint32 server_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_num_)));
          set_has_server_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeGetServerNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeGetServerNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeGetServerNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 server_num = 3;
    if (has_server_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeGetServerNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeGetServerNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeGetServerNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeGetServerNumRsp::MergeFrom(const FestDrawPizeGetServerNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_server_num()) {
      set_server_num(from.server_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeGetServerNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeGetServerNumRsp::CopyFrom(const FestDrawPizeGetServerNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeGetServerNumRsp::IsInitialized() const {

  return true;
}

void FestDrawPizeGetServerNumRsp::Swap(FestDrawPizeGetServerNumRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(server_num_, other->server_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeGetServerNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeGetServerNumRsp_descriptor_;
  metadata.reflection = FestDrawPizeGetServerNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetRewardReq::kTemplateIdFieldNumber;
const int FestServerRankGetRewardReq::kRankIdFieldNumber;
const int FestServerRankGetRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetRewardReq::FestServerRankGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetRewardReq::InitAsDefaultInstance() {
}

FestServerRankGetRewardReq::FestServerRankGetRewardReq(const FestServerRankGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetRewardReq::~FestServerRankGetRewardReq() {
  SharedDtor();
}

void FestServerRankGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetRewardReq_descriptor_;
}

const FestServerRankGetRewardReq& FestServerRankGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetRewardReq* FestServerRankGetRewardReq::default_instance_ = NULL;

FestServerRankGetRewardReq* FestServerRankGetRewardReq::New() const {
  return new FestServerRankGetRewardReq;
}

void FestServerRankGetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    rank_id_ = 0;
    reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // optional int32 reward_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_id(), output);
  }

  // optional int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_id(), target);
  }

  // optional int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetRewardReq::MergeFrom(const FestServerRankGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetRewardReq::CopyFrom(const FestServerRankGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetRewardReq::IsInitialized() const {

  return true;
}

void FestServerRankGetRewardReq::Swap(FestServerRankGetRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetRewardReq_descriptor_;
  metadata.reflection = FestServerRankGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetRewardRsp::kRetFieldNumber;
const int FestServerRankGetRewardRsp::kTemplateIdFieldNumber;
const int FestServerRankGetRewardRsp::kRankIdFieldNumber;
const int FestServerRankGetRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetRewardRsp::FestServerRankGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FestRankRewardData*>(&::proto_ff::FestRankRewardData::default_instance());
}

FestServerRankGetRewardRsp::FestServerRankGetRewardRsp(const FestServerRankGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetRewardRsp::~FestServerRankGetRewardRsp() {
  SharedDtor();
}

void FestServerRankGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FestServerRankGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetRewardRsp_descriptor_;
}

const FestServerRankGetRewardRsp& FestServerRankGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetRewardRsp* FestServerRankGetRewardRsp::default_instance_ = NULL;

FestServerRankGetRewardRsp* FestServerRankGetRewardRsp::New() const {
  return new FestServerRankGetRewardRsp;
}

void FestServerRankGetRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    rank_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FestRankRewardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .proto_ff.FestRankRewardData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional .proto_ff.FestRankRewardData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional .proto_ff.FestRankRewardData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional .proto_ff.FestRankRewardData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetRewardRsp::MergeFrom(const FestServerRankGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FestRankRewardData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetRewardRsp::CopyFrom(const FestServerRankGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetRewardRsp::IsInitialized() const {

  return true;
}

void FestServerRankGetRewardRsp::Swap(FestServerRankGetRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetRewardRsp_descriptor_;
  metadata.reflection = FestServerRankGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankRewardStatusChange::kTemplateIdFieldNumber;
const int FestServerRankRewardStatusChange::kRankIdFieldNumber;
const int FestServerRankRewardStatusChange::kDataFieldNumber;
#endif  // !_MSC_VER

FestServerRankRewardStatusChange::FestServerRankRewardStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankRewardStatusChange::InitAsDefaultInstance() {
}

FestServerRankRewardStatusChange::FestServerRankRewardStatusChange(const FestServerRankRewardStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankRewardStatusChange::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankRewardStatusChange::~FestServerRankRewardStatusChange() {
  SharedDtor();
}

void FestServerRankRewardStatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankRewardStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankRewardStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankRewardStatusChange_descriptor_;
}

const FestServerRankRewardStatusChange& FestServerRankRewardStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankRewardStatusChange* FestServerRankRewardStatusChange::default_instance_ = NULL;

FestServerRankRewardStatusChange* FestServerRankRewardStatusChange::New() const {
  return new FestServerRankRewardStatusChange;
}

void FestServerRankRewardStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    rank_id_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankRewardStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .proto_ff.FestRankRewardData data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankRewardStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_id(), output);
  }

  // repeated .proto_ff.FestRankRewardData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankRewardStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_id(), target);
  }

  // repeated .proto_ff.FestRankRewardData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankRewardStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  // repeated .proto_ff.FestRankRewardData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankRewardStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankRewardStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankRewardStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankRewardStatusChange::MergeFrom(const FestServerRankRewardStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankRewardStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankRewardStatusChange::CopyFrom(const FestServerRankRewardStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankRewardStatusChange::IsInitialized() const {

  return true;
}

void FestServerRankRewardStatusChange::Swap(FestServerRankRewardStatusChange* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankRewardStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankRewardStatusChange_descriptor_;
  metadata.reflection = FestServerRankRewardStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetMyRankReq::kTemplateIdFieldNumber;
const int FestServerRankGetMyRankReq::kRankIdFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetMyRankReq::FestServerRankGetMyRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetMyRankReq::InitAsDefaultInstance() {
}

FestServerRankGetMyRankReq::FestServerRankGetMyRankReq(const FestServerRankGetMyRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetMyRankReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetMyRankReq::~FestServerRankGetMyRankReq() {
  SharedDtor();
}

void FestServerRankGetMyRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetMyRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetMyRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetMyRankReq_descriptor_;
}

const FestServerRankGetMyRankReq& FestServerRankGetMyRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetMyRankReq* FestServerRankGetMyRankReq::default_instance_ = NULL;

FestServerRankGetMyRankReq* FestServerRankGetMyRankReq::New() const {
  return new FestServerRankGetMyRankReq;
}

void FestServerRankGetMyRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    rank_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetMyRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetMyRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetMyRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetMyRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetMyRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetMyRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetMyRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetMyRankReq::MergeFrom(const FestServerRankGetMyRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetMyRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetMyRankReq::CopyFrom(const FestServerRankGetMyRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetMyRankReq::IsInitialized() const {

  return true;
}

void FestServerRankGetMyRankReq::Swap(FestServerRankGetMyRankReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetMyRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetMyRankReq_descriptor_;
  metadata.reflection = FestServerRankGetMyRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetMyRankRsp::kRetFieldNumber;
const int FestServerRankGetMyRankRsp::kTemplateIdFieldNumber;
const int FestServerRankGetMyRankRsp::kRankIdFieldNumber;
const int FestServerRankGetMyRankRsp::kMyRankFieldNumber;
const int FestServerRankGetMyRankRsp::kParamFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetMyRankRsp::FestServerRankGetMyRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetMyRankRsp::InitAsDefaultInstance() {
}

FestServerRankGetMyRankRsp::FestServerRankGetMyRankRsp(const FestServerRankGetMyRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetMyRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  my_rank_ = 0;
  param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetMyRankRsp::~FestServerRankGetMyRankRsp() {
  SharedDtor();
}

void FestServerRankGetMyRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetMyRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetMyRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetMyRankRsp_descriptor_;
}

const FestServerRankGetMyRankRsp& FestServerRankGetMyRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetMyRankRsp* FestServerRankGetMyRankRsp::default_instance_ = NULL;

FestServerRankGetMyRankRsp* FestServerRankGetMyRankRsp::New() const {
  return new FestServerRankGetMyRankRsp;
}

void FestServerRankGetMyRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    rank_id_ = 0;
    my_rank_ = 0;
    param_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetMyRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_rank;
        break;
      }

      // optional int32 my_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // optional uint64 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetMyRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional int32 my_rank = 4;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->my_rank(), output);
  }

  // optional uint64 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetMyRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional int32 my_rank = 4;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->my_rank(), target);
  }

  // optional uint64 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetMyRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional int32 my_rank = 4;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_rank());
    }

    // optional uint64 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetMyRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetMyRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetMyRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetMyRankRsp::MergeFrom(const FestServerRankGetMyRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetMyRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetMyRankRsp::CopyFrom(const FestServerRankGetMyRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetMyRankRsp::IsInitialized() const {

  return true;
}

void FestServerRankGetMyRankRsp::Swap(FestServerRankGetMyRankRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetMyRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetMyRankRsp_descriptor_;
  metadata.reflection = FestServerRankGetMyRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetAllRankReq::kTemplateIdFieldNumber;
const int FestServerRankGetAllRankReq::kRankIdFieldNumber;
const int FestServerRankGetAllRankReq::kCidFieldNumber;
const int FestServerRankGetAllRankReq::kRankTypeFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetAllRankReq::FestServerRankGetAllRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetAllRankReq::InitAsDefaultInstance() {
}

FestServerRankGetAllRankReq::FestServerRankGetAllRankReq(const FestServerRankGetAllRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetAllRankReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  rank_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetAllRankReq::~FestServerRankGetAllRankReq() {
  SharedDtor();
}

void FestServerRankGetAllRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetAllRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetAllRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetAllRankReq_descriptor_;
}

const FestServerRankGetAllRankReq& FestServerRankGetAllRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetAllRankReq* FestServerRankGetAllRankReq::default_instance_ = NULL;

FestServerRankGetAllRankReq* FestServerRankGetAllRankReq::New() const {
  return new FestServerRankGetAllRankReq;
}

void FestServerRankGetAllRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    rank_id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    rank_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetAllRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_type;
        break;
      }

      // optional uint32 rank_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetAllRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_id(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional uint32 rank_type = 4;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetAllRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_id(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional uint32 rank_type = 4;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetAllRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 rank_type = 4;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetAllRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetAllRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetAllRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetAllRankReq::MergeFrom(const FestServerRankGetAllRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetAllRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetAllRankReq::CopyFrom(const FestServerRankGetAllRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetAllRankReq::IsInitialized() const {

  return true;
}

void FestServerRankGetAllRankReq::Swap(FestServerRankGetAllRankReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(cid_, other->cid_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetAllRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetAllRankReq_descriptor_;
  metadata.reflection = FestServerRankGetAllRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetAllRankRsp::kRetFieldNumber;
const int FestServerRankGetAllRankRsp::kTemplateIdFieldNumber;
const int FestServerRankGetAllRankRsp::kRankIdFieldNumber;
const int FestServerRankGetAllRankRsp::kRankListFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetAllRankRsp::FestServerRankGetAllRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetAllRankRsp::InitAsDefaultInstance() {
}

FestServerRankGetAllRankRsp::FestServerRankGetAllRankRsp(const FestServerRankGetAllRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetAllRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetAllRankRsp::~FestServerRankGetAllRankRsp() {
  SharedDtor();
}

void FestServerRankGetAllRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetAllRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetAllRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetAllRankRsp_descriptor_;
}

const FestServerRankGetAllRankRsp& FestServerRankGetAllRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetAllRankRsp* FestServerRankGetAllRankRsp::default_instance_ = NULL;

FestServerRankGetAllRankRsp* FestServerRankGetAllRankRsp::New() const {
  return new FestServerRankGetAllRankRsp;
}

void FestServerRankGetAllRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    rank_id_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetAllRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rankList;
        break;
      }

      // repeated .proto_ff.RankNodeData rankList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rankList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetAllRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // repeated .proto_ff.RankNodeData rankList = 4;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetAllRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // repeated .proto_ff.RankNodeData rankList = 4;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetAllRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  // repeated .proto_ff.RankNodeData rankList = 4;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetAllRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetAllRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetAllRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetAllRankRsp::MergeFrom(const FestServerRankGetAllRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetAllRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetAllRankRsp::CopyFrom(const FestServerRankGetAllRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetAllRankRsp::IsInitialized() const {

  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  return true;
}

void FestServerRankGetAllRankRsp::Swap(FestServerRankGetAllRankRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetAllRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetAllRankRsp_descriptor_;
  metadata.reflection = FestServerRankGetAllRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankBuyGiftReq::kTemplateIdFieldNumber;
const int FestServerRankBuyGiftReq::kRankIdFieldNumber;
#endif  // !_MSC_VER

FestServerRankBuyGiftReq::FestServerRankBuyGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankBuyGiftReq::InitAsDefaultInstance() {
}

FestServerRankBuyGiftReq::FestServerRankBuyGiftReq(const FestServerRankBuyGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankBuyGiftReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankBuyGiftReq::~FestServerRankBuyGiftReq() {
  SharedDtor();
}

void FestServerRankBuyGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankBuyGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankBuyGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankBuyGiftReq_descriptor_;
}

const FestServerRankBuyGiftReq& FestServerRankBuyGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankBuyGiftReq* FestServerRankBuyGiftReq::default_instance_ = NULL;

FestServerRankBuyGiftReq* FestServerRankBuyGiftReq::New() const {
  return new FestServerRankBuyGiftReq;
}

void FestServerRankBuyGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    rank_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankBuyGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankBuyGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankBuyGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankBuyGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankBuyGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankBuyGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankBuyGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankBuyGiftReq::MergeFrom(const FestServerRankBuyGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankBuyGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankBuyGiftReq::CopyFrom(const FestServerRankBuyGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankBuyGiftReq::IsInitialized() const {

  return true;
}

void FestServerRankBuyGiftReq::Swap(FestServerRankBuyGiftReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankBuyGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankBuyGiftReq_descriptor_;
  metadata.reflection = FestServerRankBuyGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankBuyGiftRsp::kRetFieldNumber;
const int FestServerRankBuyGiftRsp::kTemplateIdFieldNumber;
const int FestServerRankBuyGiftRsp::kRankIdFieldNumber;
const int FestServerRankBuyGiftRsp::kGiftStatusFieldNumber;
#endif  // !_MSC_VER

FestServerRankBuyGiftRsp::FestServerRankBuyGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankBuyGiftRsp::InitAsDefaultInstance() {
}

FestServerRankBuyGiftRsp::FestServerRankBuyGiftRsp(const FestServerRankBuyGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankBuyGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  gift_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankBuyGiftRsp::~FestServerRankBuyGiftRsp() {
  SharedDtor();
}

void FestServerRankBuyGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankBuyGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankBuyGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankBuyGiftRsp_descriptor_;
}

const FestServerRankBuyGiftRsp& FestServerRankBuyGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankBuyGiftRsp* FestServerRankBuyGiftRsp::default_instance_ = NULL;

FestServerRankBuyGiftRsp* FestServerRankBuyGiftRsp::New() const {
  return new FestServerRankBuyGiftRsp;
}

void FestServerRankBuyGiftRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    rank_id_ = 0;
    gift_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankBuyGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gift_status;
        break;
      }

      // optional uint32 gift_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_status_)));
          set_has_gift_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankBuyGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional uint32 gift_status = 4;
  if (has_gift_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gift_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankBuyGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional uint32 gift_status = 4;
  if (has_gift_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gift_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankBuyGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional uint32 gift_status = 4;
    if (has_gift_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankBuyGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankBuyGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankBuyGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankBuyGiftRsp::MergeFrom(const FestServerRankBuyGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_gift_status()) {
      set_gift_status(from.gift_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankBuyGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankBuyGiftRsp::CopyFrom(const FestServerRankBuyGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankBuyGiftRsp::IsInitialized() const {

  return true;
}

void FestServerRankBuyGiftRsp::Swap(FestServerRankBuyGiftRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(gift_status_, other->gift_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankBuyGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankBuyGiftRsp_descriptor_;
  metadata.reflection = FestServerRankBuyGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetRedPointRewardReq::kTemplateIdFieldNumber;
const int FestServerRankGetRedPointRewardReq::kRankIdFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetRedPointRewardReq::FestServerRankGetRedPointRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetRedPointRewardReq::InitAsDefaultInstance() {
}

FestServerRankGetRedPointRewardReq::FestServerRankGetRedPointRewardReq(const FestServerRankGetRedPointRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetRedPointRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetRedPointRewardReq::~FestServerRankGetRedPointRewardReq() {
  SharedDtor();
}

void FestServerRankGetRedPointRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetRedPointRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetRedPointRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetRedPointRewardReq_descriptor_;
}

const FestServerRankGetRedPointRewardReq& FestServerRankGetRedPointRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetRedPointRewardReq* FestServerRankGetRedPointRewardReq::default_instance_ = NULL;

FestServerRankGetRedPointRewardReq* FestServerRankGetRedPointRewardReq::New() const {
  return new FestServerRankGetRedPointRewardReq;
}

void FestServerRankGetRedPointRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    rank_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetRedPointRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetRedPointRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetRedPointRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetRedPointRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetRedPointRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetRedPointRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetRedPointRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetRedPointRewardReq::MergeFrom(const FestServerRankGetRedPointRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetRedPointRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetRedPointRewardReq::CopyFrom(const FestServerRankGetRedPointRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetRedPointRewardReq::IsInitialized() const {

  return true;
}

void FestServerRankGetRedPointRewardReq::Swap(FestServerRankGetRedPointRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetRedPointRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetRedPointRewardReq_descriptor_;
  metadata.reflection = FestServerRankGetRedPointRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankGetRedPointRewardRsp::kRetFieldNumber;
const int FestServerRankGetRedPointRewardRsp::kTemplateIdFieldNumber;
const int FestServerRankGetRedPointRewardRsp::kRankIdFieldNumber;
const int FestServerRankGetRedPointRewardRsp::kRedPointStatusFieldNumber;
#endif  // !_MSC_VER

FestServerRankGetRedPointRewardRsp::FestServerRankGetRedPointRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankGetRedPointRewardRsp::InitAsDefaultInstance() {
}

FestServerRankGetRedPointRewardRsp::FestServerRankGetRedPointRewardRsp(const FestServerRankGetRedPointRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankGetRedPointRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  rank_id_ = 0;
  red_point_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankGetRedPointRewardRsp::~FestServerRankGetRedPointRewardRsp() {
  SharedDtor();
}

void FestServerRankGetRedPointRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankGetRedPointRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankGetRedPointRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankGetRedPointRewardRsp_descriptor_;
}

const FestServerRankGetRedPointRewardRsp& FestServerRankGetRedPointRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankGetRedPointRewardRsp* FestServerRankGetRedPointRewardRsp::default_instance_ = NULL;

FestServerRankGetRedPointRewardRsp* FestServerRankGetRedPointRewardRsp::New() const {
  return new FestServerRankGetRedPointRewardRsp;
}

void FestServerRankGetRedPointRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    rank_id_ = 0;
    red_point_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankGetRedPointRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_red_point_status;
        break;
      }

      // optional uint32 red_point_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_point_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_point_status_)));
          set_has_red_point_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankGetRedPointRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional uint32 red_point_status = 4;
  if (has_red_point_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->red_point_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankGetRedPointRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional uint32 red_point_status = 4;
  if (has_red_point_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->red_point_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankGetRedPointRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional uint32 red_point_status = 4;
    if (has_red_point_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red_point_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankGetRedPointRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankGetRedPointRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankGetRedPointRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankGetRedPointRewardRsp::MergeFrom(const FestServerRankGetRedPointRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_red_point_status()) {
      set_red_point_status(from.red_point_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankGetRedPointRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankGetRedPointRewardRsp::CopyFrom(const FestServerRankGetRedPointRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankGetRedPointRewardRsp::IsInitialized() const {

  return true;
}

void FestServerRankGetRedPointRewardRsp::Swap(FestServerRankGetRedPointRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(red_point_status_, other->red_point_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankGetRedPointRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankGetRedPointRewardRsp_descriptor_;
  metadata.reflection = FestServerRankGetRedPointRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestServerRankStatusChange::kTemplateIdFieldNumber;
const int FestServerRankStatusChange::kRankFieldNumber;
#endif  // !_MSC_VER

FestServerRankStatusChange::FestServerRankStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestServerRankStatusChange::InitAsDefaultInstance() {
}

FestServerRankStatusChange::FestServerRankStatusChange(const FestServerRankStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestServerRankStatusChange::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestServerRankStatusChange::~FestServerRankStatusChange() {
  SharedDtor();
}

void FestServerRankStatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestServerRankStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestServerRankStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestServerRankStatusChange_descriptor_;
}

const FestServerRankStatusChange& FestServerRankStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestServerRankStatusChange* FestServerRankStatusChange::default_instance_ = NULL;

FestServerRankStatusChange* FestServerRankStatusChange::New() const {
  return new FestServerRankStatusChange;
}

void FestServerRankStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestServerRankStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.FestRankData rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestServerRankStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FestRankData rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestServerRankStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FestRankData rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestServerRankStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FestRankData rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestServerRankStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestServerRankStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestServerRankStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestServerRankStatusChange::MergeFrom(const FestServerRankStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestServerRankStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestServerRankStatusChange::CopyFrom(const FestServerRankStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestServerRankStatusChange::IsInitialized() const {

  return true;
}

void FestServerRankStatusChange::Swap(FestServerRankStatusChange* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestServerRankStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestServerRankStatusChange_descriptor_;
  metadata.reflection = FestServerRankStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleFetchReq::kTemplateIdFieldNumber;
const int FestCandleFetchReq::kIdFieldNumber;
#endif  // !_MSC_VER

FestCandleFetchReq::FestCandleFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleFetchReq::InitAsDefaultInstance() {
}

FestCandleFetchReq::FestCandleFetchReq(const FestCandleFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleFetchReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleFetchReq::~FestCandleFetchReq() {
  SharedDtor();
}

void FestCandleFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleFetchReq_descriptor_;
}

const FestCandleFetchReq& FestCandleFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandleFetchReq* FestCandleFetchReq::default_instance_ = NULL;

FestCandleFetchReq* FestCandleFetchReq::New() const {
  return new FestCandleFetchReq;
}

void FestCandleFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleFetchReq::MergeFrom(const FestCandleFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleFetchReq::CopyFrom(const FestCandleFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleFetchReq::IsInitialized() const {

  return true;
}

void FestCandleFetchReq::Swap(FestCandleFetchReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleFetchReq_descriptor_;
  metadata.reflection = FestCandleFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleFetchRsp::kRetFieldNumber;
const int FestCandleFetchRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FestCandleFetchRsp::FestCandleFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleFetchRsp::InitAsDefaultInstance() {
}

FestCandleFetchRsp::FestCandleFetchRsp(const FestCandleFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleFetchRsp::~FestCandleFetchRsp() {
  SharedDtor();
}

void FestCandleFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleFetchRsp_descriptor_;
}

const FestCandleFetchRsp& FestCandleFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandleFetchRsp* FestCandleFetchRsp::default_instance_ = NULL;

FestCandleFetchRsp* FestCandleFetchRsp::New() const {
  return new FestCandleFetchRsp;
}

void FestCandleFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleFetchRsp::MergeFrom(const FestCandleFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleFetchRsp::CopyFrom(const FestCandleFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleFetchRsp::IsInitialized() const {

  return true;
}

void FestCandleFetchRsp::Swap(FestCandleFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleFetchRsp_descriptor_;
  metadata.reflection = FestCandleFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleFetchLstRsp::kTemplateIdFieldNumber;
const int FestCandleFetchLstRsp::kIdLstFieldNumber;
#endif  // !_MSC_VER

FestCandleFetchLstRsp::FestCandleFetchLstRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleFetchLstRsp::InitAsDefaultInstance() {
}

FestCandleFetchLstRsp::FestCandleFetchLstRsp(const FestCandleFetchLstRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleFetchLstRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleFetchLstRsp::~FestCandleFetchLstRsp() {
  SharedDtor();
}

void FestCandleFetchLstRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleFetchLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleFetchLstRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleFetchLstRsp_descriptor_;
}

const FestCandleFetchLstRsp& FestCandleFetchLstRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandleFetchLstRsp* FestCandleFetchLstRsp::default_instance_ = NULL;

FestCandleFetchLstRsp* FestCandleFetchLstRsp::New() const {
  return new FestCandleFetchLstRsp;
}

void FestCandleFetchLstRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleFetchLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        break;
      }

      // repeated int32 id_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleFetchLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated int32 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleFetchLstRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated int32 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleFetchLstRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated int32 id_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleFetchLstRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleFetchLstRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleFetchLstRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleFetchLstRsp::MergeFrom(const FestCandleFetchLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleFetchLstRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleFetchLstRsp::CopyFrom(const FestCandleFetchLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleFetchLstRsp::IsInitialized() const {

  return true;
}

void FestCandleFetchLstRsp::Swap(FestCandleFetchLstRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleFetchLstRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleFetchLstRsp_descriptor_;
  metadata.reflection = FestCandleFetchLstRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleRankReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FestCandleRankReq::FestCandleRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleRankReq::InitAsDefaultInstance() {
}

FestCandleRankReq::FestCandleRankReq(const FestCandleRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleRankReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleRankReq::~FestCandleRankReq() {
  SharedDtor();
}

void FestCandleRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleRankReq_descriptor_;
}

const FestCandleRankReq& FestCandleRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandleRankReq* FestCandleRankReq::default_instance_ = NULL;

FestCandleRankReq* FestCandleRankReq::New() const {
  return new FestCandleRankReq;
}

void FestCandleRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleRankReq::MergeFrom(const FestCandleRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleRankReq::CopyFrom(const FestCandleRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleRankReq::IsInitialized() const {

  return true;
}

void FestCandleRankReq::Swap(FestCandleRankReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleRankReq_descriptor_;
  metadata.reflection = FestCandleRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleRankRsp::kRetFieldNumber;
const int FestCandleRankRsp::kTemplateIdFieldNumber;
const int FestCandleRankRsp::kRankFieldNumber;
const int FestCandleRankRsp::kHarmFieldNumber;
#endif  // !_MSC_VER

FestCandleRankRsp::FestCandleRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleRankRsp::InitAsDefaultInstance() {
}

FestCandleRankRsp::FestCandleRankRsp(const FestCandleRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  harm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleRankRsp::~FestCandleRankRsp() {
  SharedDtor();
}

void FestCandleRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleRankRsp_descriptor_;
}

const FestCandleRankRsp& FestCandleRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestCandleRankRsp* FestCandleRankRsp::default_instance_ = NULL;

FestCandleRankRsp* FestCandleRankRsp::New() const {
  return new FestCandleRankRsp;
}

void FestCandleRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    harm_ = GOOGLE_ULONGLONG(0);
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.FestCandRankProto rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank;
        if (input->ExpectTag(32)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // repeated .proto_ff.FestCandRankProto rank = 3;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank(i), output);
  }

  // optional uint64 harm = 4;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // repeated .proto_ff.FestCandRankProto rank = 3;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank(i), target);
  }

  // optional uint64 harm = 4;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint64 harm = 4;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

  }
  // repeated .proto_ff.FestCandRankProto rank = 3;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleRankRsp::MergeFrom(const FestCandleRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleRankRsp::CopyFrom(const FestCandleRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleRankRsp::IsInitialized() const {

  return true;
}

void FestCandleRankRsp::Swap(FestCandleRankRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    rank_.Swap(&other->rank_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleRankRsp_descriptor_;
  metadata.reflection = FestCandleRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_DigEgg_OpRsp::kNameFieldNumber;
const int Fest_L2C_DigEgg_OpRsp::kIdFieldNumber;
const int Fest_L2C_DigEgg_OpRsp::kTemplateIdFieldNumber;
const int Fest_L2C_DigEgg_OpRsp::kCidFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_DigEgg_OpRsp::Fest_L2C_DigEgg_OpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_DigEgg_OpRsp::InitAsDefaultInstance() {
}

Fest_L2C_DigEgg_OpRsp::Fest_L2C_DigEgg_OpRsp(const Fest_L2C_DigEgg_OpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_DigEgg_OpRsp::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  template_id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_DigEgg_OpRsp::~Fest_L2C_DigEgg_OpRsp() {
  SharedDtor();
}

void Fest_L2C_DigEgg_OpRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Fest_L2C_DigEgg_OpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_DigEgg_OpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_DigEgg_OpRsp_descriptor_;
}

const Fest_L2C_DigEgg_OpRsp& Fest_L2C_DigEgg_OpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_DigEgg_OpRsp* Fest_L2C_DigEgg_OpRsp::default_instance_ = NULL;

Fest_L2C_DigEgg_OpRsp* Fest_L2C_DigEgg_OpRsp::New() const {
  return new Fest_L2C_DigEgg_OpRsp;
}

void Fest_L2C_DigEgg_OpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    template_id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_DigEgg_OpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_DigEgg_OpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_DigEgg_OpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_DigEgg_OpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_DigEgg_OpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_DigEgg_OpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_DigEgg_OpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_DigEgg_OpRsp::MergeFrom(const Fest_L2C_DigEgg_OpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_DigEgg_OpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_DigEgg_OpRsp::CopyFrom(const Fest_L2C_DigEgg_OpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_DigEgg_OpRsp::IsInitialized() const {

  return true;
}

void Fest_L2C_DigEgg_OpRsp::Swap(Fest_L2C_DigEgg_OpRsp* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(template_id_, other->template_id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_DigEgg_OpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_DigEgg_OpRsp_descriptor_;
  metadata.reflection = Fest_L2C_DigEgg_OpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_LogReq::kCidFieldNumber;
const int Fest_L2C_LogReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_LogReq::Fest_L2C_LogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_LogReq::InitAsDefaultInstance() {
}

Fest_L2C_LogReq::Fest_L2C_LogReq(const Fest_L2C_LogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_LogReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_LogReq::~Fest_L2C_LogReq() {
  SharedDtor();
}

void Fest_L2C_LogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_L2C_LogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_LogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_LogReq_descriptor_;
}

const Fest_L2C_LogReq& Fest_L2C_LogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_LogReq* Fest_L2C_LogReq::default_instance_ = NULL;

Fest_L2C_LogReq* Fest_L2C_LogReq::New() const {
  return new Fest_L2C_LogReq;
}

void Fest_L2C_LogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_LogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_LogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_LogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_LogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_LogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_LogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_LogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_LogReq::MergeFrom(const Fest_L2C_LogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_LogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_LogReq::CopyFrom(const Fest_L2C_LogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_LogReq::IsInitialized() const {

  return true;
}

void Fest_L2C_LogReq::Swap(Fest_L2C_LogReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_LogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_LogReq_descriptor_;
  metadata.reflection = Fest_L2C_LogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_RTurnable_OpRsp::kTemplateIdFieldNumber;
const int Fest_L2C_RTurnable_OpRsp::kLogFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_RTurnable_OpRsp::Fest_L2C_RTurnable_OpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_RTurnable_OpRsp::InitAsDefaultInstance() {
  log_ = const_cast< ::proto_ff::RTurnableLogDBProto*>(&::proto_ff::RTurnableLogDBProto::default_instance());
}

Fest_L2C_RTurnable_OpRsp::Fest_L2C_RTurnable_OpRsp(const Fest_L2C_RTurnable_OpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_RTurnable_OpRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_RTurnable_OpRsp::~Fest_L2C_RTurnable_OpRsp() {
  SharedDtor();
}

void Fest_L2C_RTurnable_OpRsp::SharedDtor() {
  if (this != default_instance_) {
    delete log_;
  }
}

void Fest_L2C_RTurnable_OpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_RTurnable_OpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_RTurnable_OpRsp_descriptor_;
}

const Fest_L2C_RTurnable_OpRsp& Fest_L2C_RTurnable_OpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_RTurnable_OpRsp* Fest_L2C_RTurnable_OpRsp::default_instance_ = NULL;

Fest_L2C_RTurnable_OpRsp* Fest_L2C_RTurnable_OpRsp::New() const {
  return new Fest_L2C_RTurnable_OpRsp;
}

void Fest_L2C_RTurnable_OpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    if (has_log()) {
      if (log_ != NULL) log_->::proto_ff::RTurnableLogDBProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_RTurnable_OpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }

      // optional .proto_ff.RTurnableLogDBProto log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_RTurnable_OpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional .proto_ff.RTurnableLogDBProto log = 2;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_RTurnable_OpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional .proto_ff.RTurnableLogDBProto log = 2;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_RTurnable_OpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.RTurnableLogDBProto log = 2;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_RTurnable_OpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_RTurnable_OpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_RTurnable_OpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_RTurnable_OpRsp::MergeFrom(const Fest_L2C_RTurnable_OpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_log()) {
      mutable_log()->::proto_ff::RTurnableLogDBProto::MergeFrom(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_RTurnable_OpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_RTurnable_OpRsp::CopyFrom(const Fest_L2C_RTurnable_OpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_RTurnable_OpRsp::IsInitialized() const {

  return true;
}

void Fest_L2C_RTurnable_OpRsp::Swap(Fest_L2C_RTurnable_OpRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_RTurnable_OpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_RTurnable_OpRsp_descriptor_;
  metadata.reflection = Fest_L2C_RTurnable_OpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_RTurnable_LogReq::kCidFieldNumber;
const int Fest_L2C_RTurnable_LogReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_RTurnable_LogReq::Fest_L2C_RTurnable_LogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_RTurnable_LogReq::InitAsDefaultInstance() {
}

Fest_L2C_RTurnable_LogReq::Fest_L2C_RTurnable_LogReq(const Fest_L2C_RTurnable_LogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_RTurnable_LogReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_RTurnable_LogReq::~Fest_L2C_RTurnable_LogReq() {
  SharedDtor();
}

void Fest_L2C_RTurnable_LogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_L2C_RTurnable_LogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_RTurnable_LogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_RTurnable_LogReq_descriptor_;
}

const Fest_L2C_RTurnable_LogReq& Fest_L2C_RTurnable_LogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_RTurnable_LogReq* Fest_L2C_RTurnable_LogReq::default_instance_ = NULL;

Fest_L2C_RTurnable_LogReq* Fest_L2C_RTurnable_LogReq::New() const {
  return new Fest_L2C_RTurnable_LogReq;
}

void Fest_L2C_RTurnable_LogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_RTurnable_LogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_RTurnable_LogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_RTurnable_LogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_RTurnable_LogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_RTurnable_LogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_RTurnable_LogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_RTurnable_LogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_RTurnable_LogReq::MergeFrom(const Fest_L2C_RTurnable_LogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_RTurnable_LogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_RTurnable_LogReq::CopyFrom(const Fest_L2C_RTurnable_LogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_RTurnable_LogReq::IsInitialized() const {

  return true;
}

void Fest_L2C_RTurnable_LogReq::Swap(Fest_L2C_RTurnable_LogReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_RTurnable_LogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_RTurnable_LogReq_descriptor_;
  metadata.reflection = Fest_L2C_RTurnable_LogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_DonateOperate_Notify::kCidFieldNumber;
const int Fest_L2C_DonateOperate_Notify::kTemplateIdFieldNumber;
const int Fest_L2C_DonateOperate_Notify::kSingleNumFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_DonateOperate_Notify::Fest_L2C_DonateOperate_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_DonateOperate_Notify::InitAsDefaultInstance() {
}

Fest_L2C_DonateOperate_Notify::Fest_L2C_DonateOperate_Notify(const Fest_L2C_DonateOperate_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_DonateOperate_Notify::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  single_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_DonateOperate_Notify::~Fest_L2C_DonateOperate_Notify() {
  SharedDtor();
}

void Fest_L2C_DonateOperate_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_L2C_DonateOperate_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_DonateOperate_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_DonateOperate_Notify_descriptor_;
}

const Fest_L2C_DonateOperate_Notify& Fest_L2C_DonateOperate_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_DonateOperate_Notify* Fest_L2C_DonateOperate_Notify::default_instance_ = NULL;

Fest_L2C_DonateOperate_Notify* Fest_L2C_DonateOperate_Notify::New() const {
  return new Fest_L2C_DonateOperate_Notify;
}

void Fest_L2C_DonateOperate_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    single_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_DonateOperate_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_single_num;
        break;
      }

      // optional uint32 single_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &single_num_)));
          set_has_single_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_DonateOperate_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->single_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_DonateOperate_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->single_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_DonateOperate_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 single_num = 3;
    if (has_single_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->single_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_DonateOperate_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_DonateOperate_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_DonateOperate_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_DonateOperate_Notify::MergeFrom(const Fest_L2C_DonateOperate_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_single_num()) {
      set_single_num(from.single_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_DonateOperate_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_DonateOperate_Notify::CopyFrom(const Fest_L2C_DonateOperate_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_DonateOperate_Notify::IsInitialized() const {

  return true;
}

void Fest_L2C_DonateOperate_Notify::Swap(Fest_L2C_DonateOperate_Notify* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(template_id_, other->template_id_);
    std::swap(single_num_, other->single_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_DonateOperate_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_DonateOperate_Notify_descriptor_;
  metadata.reflection = Fest_L2C_DonateOperate_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_C2L_DonateGetServerRewardReq::kTemplateIdFieldNumber;
const int Fest_C2L_DonateGetServerRewardReq::kIdFieldNumber;
const int Fest_C2L_DonateGetServerRewardReq::kServerNumFieldNumber;
const int Fest_C2L_DonateGetServerRewardReq::kCidFieldNumber;
#endif  // !_MSC_VER

Fest_C2L_DonateGetServerRewardReq::Fest_C2L_DonateGetServerRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_C2L_DonateGetServerRewardReq::InitAsDefaultInstance() {
}

Fest_C2L_DonateGetServerRewardReq::Fest_C2L_DonateGetServerRewardReq(const Fest_C2L_DonateGetServerRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_C2L_DonateGetServerRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  server_num_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_C2L_DonateGetServerRewardReq::~Fest_C2L_DonateGetServerRewardReq() {
  SharedDtor();
}

void Fest_C2L_DonateGetServerRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_C2L_DonateGetServerRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_C2L_DonateGetServerRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_C2L_DonateGetServerRewardReq_descriptor_;
}

const Fest_C2L_DonateGetServerRewardReq& Fest_C2L_DonateGetServerRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_C2L_DonateGetServerRewardReq* Fest_C2L_DonateGetServerRewardReq::default_instance_ = NULL;

Fest_C2L_DonateGetServerRewardReq* Fest_C2L_DonateGetServerRewardReq::New() const {
  return new Fest_C2L_DonateGetServerRewardReq;
}

void Fest_C2L_DonateGetServerRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
    server_num_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_C2L_DonateGetServerRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_num;
        break;
      }

      // optional uint32 server_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_num_)));
          set_has_server_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_C2L_DonateGetServerRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_num(), output);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_C2L_DonateGetServerRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_num(), target);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_C2L_DonateGetServerRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 server_num = 3;
    if (has_server_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_num());
    }

    // optional uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_C2L_DonateGetServerRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_C2L_DonateGetServerRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_C2L_DonateGetServerRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_C2L_DonateGetServerRewardReq::MergeFrom(const Fest_C2L_DonateGetServerRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_server_num()) {
      set_server_num(from.server_num());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_C2L_DonateGetServerRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_C2L_DonateGetServerRewardReq::CopyFrom(const Fest_C2L_DonateGetServerRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_C2L_DonateGetServerRewardReq::IsInitialized() const {

  return true;
}

void Fest_C2L_DonateGetServerRewardReq::Swap(Fest_C2L_DonateGetServerRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(server_num_, other->server_num_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_C2L_DonateGetServerRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_C2L_DonateGetServerRewardReq_descriptor_;
  metadata.reflection = Fest_C2L_DonateGetServerRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_DrawPizeLogReq::kTemplateIdFieldNumber;
const int Fest_L2C_DrawPizeLogReq::kLogFieldNumber;
const int Fest_L2C_DrawPizeLogReq::kChoujiangNumFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_DrawPizeLogReq::Fest_L2C_DrawPizeLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_DrawPizeLogReq::InitAsDefaultInstance() {
}

Fest_L2C_DrawPizeLogReq::Fest_L2C_DrawPizeLogReq(const Fest_L2C_DrawPizeLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_DrawPizeLogReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  choujiang_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_DrawPizeLogReq::~Fest_L2C_DrawPizeLogReq() {
  SharedDtor();
}

void Fest_L2C_DrawPizeLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_L2C_DrawPizeLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_DrawPizeLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_DrawPizeLogReq_descriptor_;
}

const Fest_L2C_DrawPizeLogReq& Fest_L2C_DrawPizeLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_DrawPizeLogReq* Fest_L2C_DrawPizeLogReq::default_instance_ = NULL;

Fest_L2C_DrawPizeLogReq* Fest_L2C_DrawPizeLogReq::New() const {
  return new Fest_L2C_DrawPizeLogReq;
}

void Fest_L2C_DrawPizeLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    choujiang_num_ = 0;
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_DrawPizeLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }

      // repeated .proto_ff.DrawPizeLogDBProto log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        if (input->ExpectTag(24)) goto parse_choujiang_num;
        break;
      }

      // optional int32 choujiang_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_choujiang_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choujiang_num_)));
          set_has_choujiang_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_DrawPizeLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.DrawPizeLogDBProto log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(i), output);
  }

  // optional int32 choujiang_num = 3;
  if (has_choujiang_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->choujiang_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_DrawPizeLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.DrawPizeLogDBProto log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(i), target);
  }

  // optional int32 choujiang_num = 3;
  if (has_choujiang_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->choujiang_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_DrawPizeLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 choujiang_num = 3;
    if (has_choujiang_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choujiang_num());
    }

  }
  // repeated .proto_ff.DrawPizeLogDBProto log = 2;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_DrawPizeLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_DrawPizeLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_DrawPizeLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_DrawPizeLogReq::MergeFrom(const Fest_L2C_DrawPizeLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_choujiang_num()) {
      set_choujiang_num(from.choujiang_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_DrawPizeLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_DrawPizeLogReq::CopyFrom(const Fest_L2C_DrawPizeLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_DrawPizeLogReq::IsInitialized() const {

  return true;
}

void Fest_L2C_DrawPizeLogReq::Swap(Fest_L2C_DrawPizeLogReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    log_.Swap(&other->log_);
    std::swap(choujiang_num_, other->choujiang_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_DrawPizeLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_DrawPizeLogReq_descriptor_;
  metadata.reflection = Fest_L2C_DrawPizeLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2C_DrawPizeChouJiangGetServerNumReq::kTemplateIdFieldNumber;
const int Fest_L2C_DrawPizeChouJiangGetServerNumReq::kTypeFieldNumber;
const int Fest_L2C_DrawPizeChouJiangGetServerNumReq::kCidFieldNumber;
#endif  // !_MSC_VER

Fest_L2C_DrawPizeChouJiangGetServerNumReq::Fest_L2C_DrawPizeChouJiangGetServerNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::InitAsDefaultInstance() {
}

Fest_L2C_DrawPizeChouJiangGetServerNumReq::Fest_L2C_DrawPizeChouJiangGetServerNumReq(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2C_DrawPizeChouJiangGetServerNumReq::~Fest_L2C_DrawPizeChouJiangGetServerNumReq() {
  SharedDtor();
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2C_DrawPizeChouJiangGetServerNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2C_DrawPizeChouJiangGetServerNumReq_descriptor_;
}

const Fest_L2C_DrawPizeChouJiangGetServerNumReq& Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2C_DrawPizeChouJiangGetServerNumReq* Fest_L2C_DrawPizeChouJiangGetServerNumReq::default_instance_ = NULL;

Fest_L2C_DrawPizeChouJiangGetServerNumReq* Fest_L2C_DrawPizeChouJiangGetServerNumReq::New() const {
  return new Fest_L2C_DrawPizeChouJiangGetServerNumReq;
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2C_DrawPizeChouJiangGetServerNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2C_DrawPizeChouJiangGetServerNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2C_DrawPizeChouJiangGetServerNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2C_DrawPizeChouJiangGetServerNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2C_DrawPizeChouJiangGetServerNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::MergeFrom(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::CopyFrom(const Fest_L2C_DrawPizeChouJiangGetServerNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2C_DrawPizeChouJiangGetServerNumReq::IsInitialized() const {

  return true;
}

void Fest_L2C_DrawPizeChouJiangGetServerNumReq::Swap(Fest_L2C_DrawPizeChouJiangGetServerNumReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2C_DrawPizeChouJiangGetServerNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2C_DrawPizeChouJiangGetServerNumReq_descriptor_;
  metadata.reflection = Fest_L2C_DrawPizeChouJiangGetServerNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_C2L_DrawPizeChouJiangGetServerNumRsp::kTemplateIdFieldNumber;
const int Fest_C2L_DrawPizeChouJiangGetServerNumRsp::kTypeFieldNumber;
const int Fest_C2L_DrawPizeChouJiangGetServerNumRsp::kServerNumFieldNumber;
const int Fest_C2L_DrawPizeChouJiangGetServerNumRsp::kCidFieldNumber;
#endif  // !_MSC_VER

Fest_C2L_DrawPizeChouJiangGetServerNumRsp::Fest_C2L_DrawPizeChouJiangGetServerNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::InitAsDefaultInstance() {
}

Fest_C2L_DrawPizeChouJiangGetServerNumRsp::Fest_C2L_DrawPizeChouJiangGetServerNumRsp(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  type_ = 0;
  server_num_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_C2L_DrawPizeChouJiangGetServerNumRsp::~Fest_C2L_DrawPizeChouJiangGetServerNumRsp() {
  SharedDtor();
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_C2L_DrawPizeChouJiangGetServerNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_C2L_DrawPizeChouJiangGetServerNumRsp_descriptor_;
}

const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_C2L_DrawPizeChouJiangGetServerNumRsp* Fest_C2L_DrawPizeChouJiangGetServerNumRsp::default_instance_ = NULL;

Fest_C2L_DrawPizeChouJiangGetServerNumRsp* Fest_C2L_DrawPizeChouJiangGetServerNumRsp::New() const {
  return new Fest_C2L_DrawPizeChouJiangGetServerNumRsp;
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    type_ = 0;
    server_num_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_C2L_DrawPizeChouJiangGetServerNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_num;
        break;
      }

      // optional uint32 server_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_num_)));
          set_has_server_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_num(), output);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_C2L_DrawPizeChouJiangGetServerNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint32 server_num = 3;
  if (has_server_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_num(), target);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_C2L_DrawPizeChouJiangGetServerNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint32 server_num = 3;
    if (has_server_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_num());
    }

    // optional uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_C2L_DrawPizeChouJiangGetServerNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_C2L_DrawPizeChouJiangGetServerNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::MergeFrom(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_server_num()) {
      set_server_num(from.server_num());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::CopyFrom(const Fest_C2L_DrawPizeChouJiangGetServerNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_C2L_DrawPizeChouJiangGetServerNumRsp::IsInitialized() const {

  return true;
}

void Fest_C2L_DrawPizeChouJiangGetServerNumRsp::Swap(Fest_C2L_DrawPizeChouJiangGetServerNumRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(type_, other->type_);
    std::swap(server_num_, other->server_num_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_C2L_DrawPizeChouJiangGetServerNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_C2L_DrawPizeChouJiangGetServerNumRsp_descriptor_;
  metadata.reflection = Fest_C2L_DrawPizeChouJiangGetServerNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_C2L_ServerRankSyncReq::kCidFieldNumber;
const int Fest_C2L_ServerRankSyncReq::kTemplateIdFieldNumber;
const int Fest_C2L_ServerRankSyncReq::kRankIdFieldNumber;
const int Fest_C2L_ServerRankSyncReq::kRankTypeFieldNumber;
#endif  // !_MSC_VER

Fest_C2L_ServerRankSyncReq::Fest_C2L_ServerRankSyncReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_C2L_ServerRankSyncReq::InitAsDefaultInstance() {
}

Fest_C2L_ServerRankSyncReq::Fest_C2L_ServerRankSyncReq(const Fest_C2L_ServerRankSyncReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_C2L_ServerRankSyncReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  rank_id_ = 0;
  rank_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_C2L_ServerRankSyncReq::~Fest_C2L_ServerRankSyncReq() {
  SharedDtor();
}

void Fest_C2L_ServerRankSyncReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_C2L_ServerRankSyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_C2L_ServerRankSyncReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_C2L_ServerRankSyncReq_descriptor_;
}

const Fest_C2L_ServerRankSyncReq& Fest_C2L_ServerRankSyncReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_C2L_ServerRankSyncReq* Fest_C2L_ServerRankSyncReq::default_instance_ = NULL;

Fest_C2L_ServerRankSyncReq* Fest_C2L_ServerRankSyncReq::New() const {
  return new Fest_C2L_ServerRankSyncReq;
}

void Fest_C2L_ServerRankSyncReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    rank_id_ = 0;
    rank_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_C2L_ServerRankSyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_type;
        break;
      }

      // optional int32 rank_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_C2L_ServerRankSyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional int32 rank_type = 4;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_C2L_ServerRankSyncReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional int32 rank_type = 4;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_C2L_ServerRankSyncReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional int32 rank_type = 4;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_C2L_ServerRankSyncReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_C2L_ServerRankSyncReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_C2L_ServerRankSyncReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_C2L_ServerRankSyncReq::MergeFrom(const Fest_C2L_ServerRankSyncReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_C2L_ServerRankSyncReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_C2L_ServerRankSyncReq::CopyFrom(const Fest_C2L_ServerRankSyncReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_C2L_ServerRankSyncReq::IsInitialized() const {

  return true;
}

void Fest_C2L_ServerRankSyncReq::Swap(Fest_C2L_ServerRankSyncReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_C2L_ServerRankSyncReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_C2L_ServerRankSyncReq_descriptor_;
  metadata.reflection = Fest_C2L_ServerRankSyncReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_C2L_ServerRankSyncRsp::kCidFieldNumber;
const int Fest_C2L_ServerRankSyncRsp::kTemplateIdFieldNumber;
const int Fest_C2L_ServerRankSyncRsp::kRankIdFieldNumber;
const int Fest_C2L_ServerRankSyncRsp::kRankTypeFieldNumber;
const int Fest_C2L_ServerRankSyncRsp::kMyRankFieldNumber;
const int Fest_C2L_ServerRankSyncRsp::kParamFieldNumber;
const int Fest_C2L_ServerRankSyncRsp::kFinishFieldNumber;
#endif  // !_MSC_VER

Fest_C2L_ServerRankSyncRsp::Fest_C2L_ServerRankSyncRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_C2L_ServerRankSyncRsp::InitAsDefaultInstance() {
}

Fest_C2L_ServerRankSyncRsp::Fest_C2L_ServerRankSyncRsp(const Fest_C2L_ServerRankSyncRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_C2L_ServerRankSyncRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  rank_id_ = 0;
  rank_type_ = 0;
  my_rank_ = 0;
  param_ = GOOGLE_ULONGLONG(0);
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_C2L_ServerRankSyncRsp::~Fest_C2L_ServerRankSyncRsp() {
  SharedDtor();
}

void Fest_C2L_ServerRankSyncRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_C2L_ServerRankSyncRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_C2L_ServerRankSyncRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_C2L_ServerRankSyncRsp_descriptor_;
}

const Fest_C2L_ServerRankSyncRsp& Fest_C2L_ServerRankSyncRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_C2L_ServerRankSyncRsp* Fest_C2L_ServerRankSyncRsp::default_instance_ = NULL;

Fest_C2L_ServerRankSyncRsp* Fest_C2L_ServerRankSyncRsp::New() const {
  return new Fest_C2L_ServerRankSyncRsp;
}

void Fest_C2L_ServerRankSyncRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    rank_id_ = 0;
    rank_type_ = 0;
    my_rank_ = 0;
    param_ = GOOGLE_ULONGLONG(0);
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_C2L_ServerRankSyncRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_type;
        break;
      }

      // optional int32 rank_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_my_rank;
        break;
      }

      // optional int32 my_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param;
        break;
      }

      // optional uint64 param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_finish;
        break;
      }

      // optional bool finish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_C2L_ServerRankSyncRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional int32 rank_type = 4;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_type(), output);
  }

  // optional int32 my_rank = 5;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->my_rank(), output);
  }

  // optional uint64 param = 6;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->param(), output);
  }

  // optional bool finish = 7;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_C2L_ServerRankSyncRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional int32 rank_type = 4;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_type(), target);
  }

  // optional int32 my_rank = 5;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->my_rank(), target);
  }

  // optional uint64 param = 6;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->param(), target);
  }

  // optional bool finish = 7;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_C2L_ServerRankSyncRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional int32 rank_type = 4;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

    // optional int32 my_rank = 5;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_rank());
    }

    // optional uint64 param = 6;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param());
    }

    // optional bool finish = 7;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_C2L_ServerRankSyncRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_C2L_ServerRankSyncRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_C2L_ServerRankSyncRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_C2L_ServerRankSyncRsp::MergeFrom(const Fest_C2L_ServerRankSyncRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_C2L_ServerRankSyncRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_C2L_ServerRankSyncRsp::CopyFrom(const Fest_C2L_ServerRankSyncRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_C2L_ServerRankSyncRsp::IsInitialized() const {

  return true;
}

void Fest_C2L_ServerRankSyncRsp::Swap(Fest_C2L_ServerRankSyncRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(template_id_, other->template_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(param_, other->param_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_C2L_ServerRankSyncRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_C2L_ServerRankSyncRsp_descriptor_;
  metadata.reflection = Fest_C2L_ServerRankSyncRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_S2C_CandleRankReward::kCidrankFieldNumber;
#endif  // !_MSC_VER

Fest_S2C_CandleRankReward::Fest_S2C_CandleRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_S2C_CandleRankReward::InitAsDefaultInstance() {
}

Fest_S2C_CandleRankReward::Fest_S2C_CandleRankReward(const Fest_S2C_CandleRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_S2C_CandleRankReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_S2C_CandleRankReward::~Fest_S2C_CandleRankReward() {
  SharedDtor();
}

void Fest_S2C_CandleRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_S2C_CandleRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_S2C_CandleRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_S2C_CandleRankReward_descriptor_;
}

const Fest_S2C_CandleRankReward& Fest_S2C_CandleRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_S2C_CandleRankReward* Fest_S2C_CandleRankReward::default_instance_ = NULL;

Fest_S2C_CandleRankReward* Fest_S2C_CandleRankReward::New() const {
  return new Fest_S2C_CandleRankReward;
}

void Fest_S2C_CandleRankReward::Clear() {
  cidrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_S2C_CandleRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 cidrank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cidrank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cidrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cidrank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_S2C_CandleRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 cidrank = 1;
  for (int i = 0; i < this->cidrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cidrank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_S2C_CandleRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 cidrank = 1;
  for (int i = 0; i < this->cidrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cidrank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_S2C_CandleRankReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair64 cidrank = 1;
  total_size += 1 * this->cidrank_size();
  for (int i = 0; i < this->cidrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cidrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_S2C_CandleRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_S2C_CandleRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_S2C_CandleRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_S2C_CandleRankReward::MergeFrom(const Fest_S2C_CandleRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  cidrank_.MergeFrom(from.cidrank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_S2C_CandleRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_S2C_CandleRankReward::CopyFrom(const Fest_S2C_CandleRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_S2C_CandleRankReward::IsInitialized() const {

  return true;
}

void Fest_S2C_CandleRankReward::Swap(Fest_S2C_CandleRankReward* other) {
  if (other != this) {
    cidrank_.Swap(&other->cidrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_S2C_CandleRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_S2C_CandleRankReward_descriptor_;
  metadata.reflection = Fest_S2C_CandleRankReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2S_CandleAddHarm::kCidFieldNumber;
const int Fest_L2S_CandleAddHarm::kNameFieldNumber;
const int Fest_L2S_CandleAddHarm::kHarmFieldNumber;
const int Fest_L2S_CandleAddHarm::kZidFieldNumber;
const int Fest_L2S_CandleAddHarm::kLogicidFieldNumber;
#endif  // !_MSC_VER

Fest_L2S_CandleAddHarm::Fest_L2S_CandleAddHarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2S_CandleAddHarm::InitAsDefaultInstance() {
}

Fest_L2S_CandleAddHarm::Fest_L2S_CandleAddHarm(const Fest_L2S_CandleAddHarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2S_CandleAddHarm::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = GOOGLE_LONGLONG(0);
  zid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2S_CandleAddHarm::~Fest_L2S_CandleAddHarm() {
  SharedDtor();
}

void Fest_L2S_CandleAddHarm::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Fest_L2S_CandleAddHarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2S_CandleAddHarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2S_CandleAddHarm_descriptor_;
}

const Fest_L2S_CandleAddHarm& Fest_L2S_CandleAddHarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2S_CandleAddHarm* Fest_L2S_CandleAddHarm::default_instance_ = NULL;

Fest_L2S_CandleAddHarm* Fest_L2S_CandleAddHarm::New() const {
  return new Fest_L2S_CandleAddHarm;
}

void Fest_L2S_CandleAddHarm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    harm_ = GOOGLE_LONGLONG(0);
    zid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2S_CandleAddHarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional int64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logicid;
        break;
      }

      // optional uint32 logicid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2S_CandleAddHarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->harm(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional uint32 logicid = 5;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2S_CandleAddHarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->harm(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional uint32 logicid = 5;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2S_CandleAddHarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 logicid = 5;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2S_CandleAddHarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2S_CandleAddHarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2S_CandleAddHarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2S_CandleAddHarm::MergeFrom(const Fest_L2S_CandleAddHarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2S_CandleAddHarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2S_CandleAddHarm::CopyFrom(const Fest_L2S_CandleAddHarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2S_CandleAddHarm::IsInitialized() const {

  return true;
}

void Fest_L2S_CandleAddHarm::Swap(Fest_L2S_CandleAddHarm* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(harm_, other->harm_);
    std::swap(zid_, other->zid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2S_CandleAddHarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2S_CandleAddHarm_descriptor_;
  metadata.reflection = Fest_L2S_CandleAddHarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_S2L_CandleTotalHarmRsp::kCidFieldNumber;
const int Fest_S2L_CandleTotalHarmRsp::kTotalHarmFieldNumber;
#endif  // !_MSC_VER

Fest_S2L_CandleTotalHarmRsp::Fest_S2L_CandleTotalHarmRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_S2L_CandleTotalHarmRsp::InitAsDefaultInstance() {
}

Fest_S2L_CandleTotalHarmRsp::Fest_S2L_CandleTotalHarmRsp(const Fest_S2L_CandleTotalHarmRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_S2L_CandleTotalHarmRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  total_harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_S2L_CandleTotalHarmRsp::~Fest_S2L_CandleTotalHarmRsp() {
  SharedDtor();
}

void Fest_S2L_CandleTotalHarmRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_S2L_CandleTotalHarmRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_S2L_CandleTotalHarmRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_S2L_CandleTotalHarmRsp_descriptor_;
}

const Fest_S2L_CandleTotalHarmRsp& Fest_S2L_CandleTotalHarmRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_S2L_CandleTotalHarmRsp* Fest_S2L_CandleTotalHarmRsp::default_instance_ = NULL;

Fest_S2L_CandleTotalHarmRsp* Fest_S2L_CandleTotalHarmRsp::New() const {
  return new Fest_S2L_CandleTotalHarmRsp;
}

void Fest_S2L_CandleTotalHarmRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    total_harm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_S2L_CandleTotalHarmRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_harm;
        break;
      }

      // optional int64 total_harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_harm_)));
          set_has_total_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_S2L_CandleTotalHarmRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int64 total_harm = 2;
  if (has_total_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_S2L_CandleTotalHarmRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int64 total_harm = 2;
  if (has_total_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_S2L_CandleTotalHarmRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int64 total_harm = 2;
    if (has_total_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_S2L_CandleTotalHarmRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_S2L_CandleTotalHarmRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_S2L_CandleTotalHarmRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_S2L_CandleTotalHarmRsp::MergeFrom(const Fest_S2L_CandleTotalHarmRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_total_harm()) {
      set_total_harm(from.total_harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_S2L_CandleTotalHarmRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_S2L_CandleTotalHarmRsp::CopyFrom(const Fest_S2L_CandleTotalHarmRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_S2L_CandleTotalHarmRsp::IsInitialized() const {

  return true;
}

void Fest_S2L_CandleTotalHarmRsp::Swap(Fest_S2L_CandleTotalHarmRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(total_harm_, other->total_harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_S2L_CandleTotalHarmRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_S2L_CandleTotalHarmRsp_descriptor_;
  metadata.reflection = Fest_S2L_CandleTotalHarmRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_L2S_CandleRankReq::kCidFieldNumber;
const int Fest_L2S_CandleRankReq::kHarmFieldNumber;
const int Fest_L2S_CandleRankReq::kZidFieldNumber;
#endif  // !_MSC_VER

Fest_L2S_CandleRankReq::Fest_L2S_CandleRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_L2S_CandleRankReq::InitAsDefaultInstance() {
}

Fest_L2S_CandleRankReq::Fest_L2S_CandleRankReq(const Fest_L2S_CandleRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_L2S_CandleRankReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  harm_ = GOOGLE_LONGLONG(0);
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_L2S_CandleRankReq::~Fest_L2S_CandleRankReq() {
  SharedDtor();
}

void Fest_L2S_CandleRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_L2S_CandleRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_L2S_CandleRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_L2S_CandleRankReq_descriptor_;
}

const Fest_L2S_CandleRankReq& Fest_L2S_CandleRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_L2S_CandleRankReq* Fest_L2S_CandleRankReq::default_instance_ = NULL;

Fest_L2S_CandleRankReq* Fest_L2S_CandleRankReq::New() const {
  return new Fest_L2S_CandleRankReq;
}

void Fest_L2S_CandleRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    harm_ = GOOGLE_LONGLONG(0);
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_L2S_CandleRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_harm;
        break;
      }

      // optional int64 harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_L2S_CandleRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int64 harm = 2;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->harm(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_L2S_CandleRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int64 harm = 2;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->harm(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_L2S_CandleRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int64 harm = 2;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_L2S_CandleRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_L2S_CandleRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_L2S_CandleRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_L2S_CandleRankReq::MergeFrom(const Fest_L2S_CandleRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_L2S_CandleRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_L2S_CandleRankReq::CopyFrom(const Fest_L2S_CandleRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_L2S_CandleRankReq::IsInitialized() const {

  return true;
}

void Fest_L2S_CandleRankReq::Swap(Fest_L2S_CandleRankReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(harm_, other->harm_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_L2S_CandleRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_L2S_CandleRankReq_descriptor_;
  metadata.reflection = Fest_L2S_CandleRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BossFirstOptReq::kTemplateIdFieldNumber;
const int Fest_BossFirstOptReq::kIdFieldNumber;
const int Fest_BossFirstOptReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Fest_BossFirstOptReq::Fest_BossFirstOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BossFirstOptReq::InitAsDefaultInstance() {
}

Fest_BossFirstOptReq::Fest_BossFirstOptReq(const Fest_BossFirstOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BossFirstOptReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BossFirstOptReq::~Fest_BossFirstOptReq() {
  SharedDtor();
}

void Fest_BossFirstOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BossFirstOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BossFirstOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BossFirstOptReq_descriptor_;
}

const Fest_BossFirstOptReq& Fest_BossFirstOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BossFirstOptReq* Fest_BossFirstOptReq::default_instance_ = NULL;

Fest_BossFirstOptReq* Fest_BossFirstOptReq::New() const {
  return new Fest_BossFirstOptReq;
}

void Fest_BossFirstOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BossFirstOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BossFirstOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BossFirstOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BossFirstOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BossFirstOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BossFirstOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BossFirstOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BossFirstOptReq::MergeFrom(const Fest_BossFirstOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BossFirstOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BossFirstOptReq::CopyFrom(const Fest_BossFirstOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BossFirstOptReq::IsInitialized() const {

  return true;
}

void Fest_BossFirstOptReq::Swap(Fest_BossFirstOptReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BossFirstOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BossFirstOptReq_descriptor_;
  metadata.reflection = Fest_BossFirstOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BossFirstOptRsp::kRetFieldNumber;
const int Fest_BossFirstOptRsp::kTemplateIdFieldNumber;
const int Fest_BossFirstOptRsp::kIdFieldNumber;
const int Fest_BossFirstOptRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

Fest_BossFirstOptRsp::Fest_BossFirstOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BossFirstOptRsp::InitAsDefaultInstance() {
}

Fest_BossFirstOptRsp::Fest_BossFirstOptRsp(const Fest_BossFirstOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BossFirstOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BossFirstOptRsp::~Fest_BossFirstOptRsp() {
  SharedDtor();
}

void Fest_BossFirstOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BossFirstOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BossFirstOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BossFirstOptRsp_descriptor_;
}

const Fest_BossFirstOptRsp& Fest_BossFirstOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BossFirstOptRsp* Fest_BossFirstOptRsp::default_instance_ = NULL;

Fest_BossFirstOptRsp* Fest_BossFirstOptRsp::New() const {
  return new Fest_BossFirstOptRsp;
}

void Fest_BossFirstOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BossFirstOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BossFirstOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BossFirstOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BossFirstOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BossFirstOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BossFirstOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BossFirstOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BossFirstOptRsp::MergeFrom(const Fest_BossFirstOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BossFirstOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BossFirstOptRsp::CopyFrom(const Fest_BossFirstOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BossFirstOptRsp::IsInitialized() const {

  return true;
}

void Fest_BossFirstOptRsp::Swap(Fest_BossFirstOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BossFirstOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BossFirstOptRsp_descriptor_;
  metadata.reflection = Fest_BossFirstOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BossInfoReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

Fest_BossInfoReq::Fest_BossInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BossInfoReq::InitAsDefaultInstance() {
}

Fest_BossInfoReq::Fest_BossInfoReq(const Fest_BossInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BossInfoReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BossInfoReq::~Fest_BossInfoReq() {
  SharedDtor();
}

void Fest_BossInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BossInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BossInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BossInfoReq_descriptor_;
}

const Fest_BossInfoReq& Fest_BossInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BossInfoReq* Fest_BossInfoReq::default_instance_ = NULL;

Fest_BossInfoReq* Fest_BossInfoReq::New() const {
  return new Fest_BossInfoReq;
}

void Fest_BossInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BossInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BossInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BossInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BossInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BossInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BossInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BossInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BossInfoReq::MergeFrom(const Fest_BossInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BossInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BossInfoReq::CopyFrom(const Fest_BossInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BossInfoReq::IsInitialized() const {

  return true;
}

void Fest_BossInfoReq::Swap(Fest_BossInfoReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BossInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BossInfoReq_descriptor_;
  metadata.reflection = Fest_BossInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestBossInfo::kIdFieldNumber;
const int FestBossInfo::kRefreshTimeFieldNumber;
const int FestBossInfo::kKillCidFieldNumber;
const int FestBossInfo::kKillNameFieldNumber;
const int FestBossInfo::kKillTimeFieldNumber;
const int FestBossInfo::kTeamidFieldNumber;
const int FestBossInfo::kHeadFieldNumber;
#endif  // !_MSC_VER

FestBossInfo::FestBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestBossInfo::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

FestBossInfo::FestBossInfo(const FestBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestBossInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  refresh_time_ = GOOGLE_ULONGLONG(0);
  kill_cid_ = GOOGLE_ULONGLONG(0);
  kill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_time_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0u;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestBossInfo::~FestBossInfo() {
  SharedDtor();
}

void FestBossInfo::SharedDtor() {
  if (kill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete kill_name_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void FestBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestBossInfo_descriptor_;
}

const FestBossInfo& FestBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FestBossInfo* FestBossInfo::default_instance_ = NULL;

FestBossInfo* FestBossInfo::New() const {
  return new FestBossInfo;
}

void FestBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    refresh_time_ = GOOGLE_ULONGLONG(0);
    kill_cid_ = GOOGLE_ULONGLONG(0);
    if (has_kill_name()) {
      if (kill_name_ != &::google::protobuf::internal::kEmptyString) {
        kill_name_->clear();
      }
    }
    kill_time_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0u;
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_cid;
        break;
      }

      // optional uint64 kill_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kill_cid_)));
          set_has_kill_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kill_name;
        break;
      }

      // optional bytes kill_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kill_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill_time;
        break;
      }

      // optional uint64 kill_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kill_time_)));
          set_has_kill_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 refresh_time = 2;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refresh_time(), output);
  }

  // optional uint64 kill_cid = 3;
  if (has_kill_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kill_cid(), output);
  }

  // optional bytes kill_name = 4;
  if (has_kill_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->kill_name(), output);
  }

  // optional uint64 kill_time = 5;
  if (has_kill_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->kill_time(), output);
  }

  // optional uint32 teamid = 6;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->teamid(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 refresh_time = 2;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refresh_time(), target);
  }

  // optional uint64 kill_cid = 3;
  if (has_kill_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kill_cid(), target);
  }

  // optional bytes kill_name = 4;
  if (has_kill_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->kill_name(), target);
  }

  // optional uint64 kill_time = 5;
  if (has_kill_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->kill_time(), target);
  }

  // optional uint32 teamid = 6;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->teamid(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 7;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 refresh_time = 2;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional uint64 kill_cid = 3;
    if (has_kill_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kill_cid());
    }

    // optional bytes kill_name = 4;
    if (has_kill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kill_name());
    }

    // optional uint64 kill_time = 5;
    if (has_kill_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kill_time());
    }

    // optional uint32 teamid = 6;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .proto_ff.RoleHeadPicProto head = 7;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestBossInfo::MergeFrom(const FestBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_kill_cid()) {
      set_kill_cid(from.kill_cid());
    }
    if (from.has_kill_name()) {
      set_kill_name(from.kill_name());
    }
    if (from.has_kill_time()) {
      set_kill_time(from.kill_time());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestBossInfo::CopyFrom(const FestBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestBossInfo::IsInitialized() const {

  return true;
}

void FestBossInfo::Swap(FestBossInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(kill_cid_, other->kill_cid_);
    std::swap(kill_name_, other->kill_name_);
    std::swap(kill_time_, other->kill_time_);
    std::swap(teamid_, other->teamid_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestBossInfo_descriptor_;
  metadata.reflection = FestBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BossInfoRsp::kTemplateIdFieldNumber;
const int Fest_BossInfoRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

Fest_BossInfoRsp::Fest_BossInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BossInfoRsp::InitAsDefaultInstance() {
}

Fest_BossInfoRsp::Fest_BossInfoRsp(const Fest_BossInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BossInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BossInfoRsp::~Fest_BossInfoRsp() {
  SharedDtor();
}

void Fest_BossInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BossInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BossInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BossInfoRsp_descriptor_;
}

const Fest_BossInfoRsp& Fest_BossInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BossInfoRsp* Fest_BossInfoRsp::default_instance_ = NULL;

Fest_BossInfoRsp* Fest_BossInfoRsp::New() const {
  return new Fest_BossInfoRsp;
}

void Fest_BossInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BossInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.FestBossInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BossInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FestBossInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BossInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FestBossInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BossInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FestBossInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BossInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BossInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BossInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BossInfoRsp::MergeFrom(const Fest_BossInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BossInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BossInfoRsp::CopyFrom(const Fest_BossInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BossInfoRsp::IsInitialized() const {

  return true;
}

void Fest_BossInfoRsp::Swap(Fest_BossInfoRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BossInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BossInfoRsp_descriptor_;
  metadata.reflection = Fest_BossInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BFGlobalDBKill::kIdFieldNumber;
const int Fest_BFGlobalDBKill::kKillCidFieldNumber;
const int Fest_BFGlobalDBKill::kKillTimeFieldNumber;
const int Fest_BFGlobalDBKill::kTeamidFieldNumber;
#endif  // !_MSC_VER

Fest_BFGlobalDBKill::Fest_BFGlobalDBKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BFGlobalDBKill::InitAsDefaultInstance() {
}

Fest_BFGlobalDBKill::Fest_BFGlobalDBKill(const Fest_BFGlobalDBKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BFGlobalDBKill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  kill_cid_ = GOOGLE_ULONGLONG(0);
  kill_time_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BFGlobalDBKill::~Fest_BFGlobalDBKill() {
  SharedDtor();
}

void Fest_BFGlobalDBKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BFGlobalDBKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BFGlobalDBKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BFGlobalDBKill_descriptor_;
}

const Fest_BFGlobalDBKill& Fest_BFGlobalDBKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BFGlobalDBKill* Fest_BFGlobalDBKill::default_instance_ = NULL;

Fest_BFGlobalDBKill* Fest_BFGlobalDBKill::New() const {
  return new Fest_BFGlobalDBKill;
}

void Fest_BFGlobalDBKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    kill_cid_ = GOOGLE_ULONGLONG(0);
    kill_time_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BFGlobalDBKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_cid;
        break;
      }

      // optional uint64 kill_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kill_cid_)));
          set_has_kill_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kill_time;
        break;
      }

      // optional uint64 kill_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kill_time_)));
          set_has_kill_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BFGlobalDBKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 kill_cid = 2;
  if (has_kill_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kill_cid(), output);
  }

  // optional uint64 kill_time = 3;
  if (has_kill_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kill_time(), output);
  }

  // optional uint32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BFGlobalDBKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 kill_cid = 2;
  if (has_kill_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kill_cid(), target);
  }

  // optional uint64 kill_time = 3;
  if (has_kill_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kill_time(), target);
  }

  // optional uint32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BFGlobalDBKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 kill_cid = 2;
    if (has_kill_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kill_cid());
    }

    // optional uint64 kill_time = 3;
    if (has_kill_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kill_time());
    }

    // optional uint32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BFGlobalDBKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BFGlobalDBKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BFGlobalDBKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BFGlobalDBKill::MergeFrom(const Fest_BFGlobalDBKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kill_cid()) {
      set_kill_cid(from.kill_cid());
    }
    if (from.has_kill_time()) {
      set_kill_time(from.kill_time());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BFGlobalDBKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BFGlobalDBKill::CopyFrom(const Fest_BFGlobalDBKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BFGlobalDBKill::IsInitialized() const {

  return true;
}

void Fest_BFGlobalDBKill::Swap(Fest_BFGlobalDBKill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kill_cid_, other->kill_cid_);
    std::swap(kill_time_, other->kill_time_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BFGlobalDBKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BFGlobalDBKill_descriptor_;
  metadata.reflection = Fest_BFGlobalDBKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BFGlobalDBEntry::kTmpIdFieldNumber;
const int Fest_BFGlobalDBEntry::kInfosFieldNumber;
#endif  // !_MSC_VER

Fest_BFGlobalDBEntry::Fest_BFGlobalDBEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BFGlobalDBEntry::InitAsDefaultInstance() {
}

Fest_BFGlobalDBEntry::Fest_BFGlobalDBEntry(const Fest_BFGlobalDBEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BFGlobalDBEntry::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BFGlobalDBEntry::~Fest_BFGlobalDBEntry() {
  SharedDtor();
}

void Fest_BFGlobalDBEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BFGlobalDBEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BFGlobalDBEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BFGlobalDBEntry_descriptor_;
}

const Fest_BFGlobalDBEntry& Fest_BFGlobalDBEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BFGlobalDBEntry* Fest_BFGlobalDBEntry::default_instance_ = NULL;

Fest_BFGlobalDBEntry* Fest_BFGlobalDBEntry::New() const {
  return new Fest_BFGlobalDBEntry;
}

void Fest_BFGlobalDBEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BFGlobalDBEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tmpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.Fest_BFGlobalDBKill infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BFGlobalDBEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tmpid(), output);
  }

  // repeated .proto_ff.Fest_BFGlobalDBKill infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BFGlobalDBEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tmpid(), target);
  }

  // repeated .proto_ff.Fest_BFGlobalDBKill infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BFGlobalDBEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tmpId = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmpid());
    }

  }
  // repeated .proto_ff.Fest_BFGlobalDBKill infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BFGlobalDBEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BFGlobalDBEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BFGlobalDBEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BFGlobalDBEntry::MergeFrom(const Fest_BFGlobalDBEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BFGlobalDBEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BFGlobalDBEntry::CopyFrom(const Fest_BFGlobalDBEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BFGlobalDBEntry::IsInitialized() const {

  return true;
}

void Fest_BFGlobalDBEntry::Swap(Fest_BFGlobalDBEntry* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BFGlobalDBEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BFGlobalDBEntry_descriptor_;
  metadata.reflection = Fest_BFGlobalDBEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_BFGlobalDB::kEntrysFieldNumber;
#endif  // !_MSC_VER

Fest_BFGlobalDB::Fest_BFGlobalDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_BFGlobalDB::InitAsDefaultInstance() {
}

Fest_BFGlobalDB::Fest_BFGlobalDB(const Fest_BFGlobalDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_BFGlobalDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_BFGlobalDB::~Fest_BFGlobalDB() {
  SharedDtor();
}

void Fest_BFGlobalDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_BFGlobalDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_BFGlobalDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_BFGlobalDB_descriptor_;
}

const Fest_BFGlobalDB& Fest_BFGlobalDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_BFGlobalDB* Fest_BFGlobalDB::default_instance_ = NULL;

Fest_BFGlobalDB* Fest_BFGlobalDB::New() const {
  return new Fest_BFGlobalDB;
}

void Fest_BFGlobalDB::Clear() {
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_BFGlobalDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Fest_BFGlobalDBEntry entrys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_BFGlobalDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Fest_BFGlobalDBEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_BFGlobalDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Fest_BFGlobalDBEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_BFGlobalDB::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Fest_BFGlobalDBEntry entrys = 1;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_BFGlobalDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_BFGlobalDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_BFGlobalDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_BFGlobalDB::MergeFrom(const Fest_BFGlobalDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_BFGlobalDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_BFGlobalDB::CopyFrom(const Fest_BFGlobalDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_BFGlobalDB::IsInitialized() const {

  return true;
}

void Fest_BFGlobalDB::Swap(Fest_BFGlobalDB* other) {
  if (other != this) {
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_BFGlobalDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_BFGlobalDB_descriptor_;
  metadata.reflection = Fest_BFGlobalDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CFest_BossKFSimpleReq::kRoleidFieldNumber;
const int L2CFest_BossKFSimpleReq::kTemplateIdFieldNumber;
const int L2CFest_BossKFSimpleReq::kProtoFieldNumber;
const int L2CFest_BossKFSimpleReq::kRecvRedIdsFieldNumber;
#endif  // !_MSC_VER

L2CFest_BossKFSimpleReq::L2CFest_BossKFSimpleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CFest_BossKFSimpleReq::InitAsDefaultInstance() {
  proto_ = const_cast< ::proto_ff::FestSimpleProto*>(&::proto_ff::FestSimpleProto::default_instance());
}

L2CFest_BossKFSimpleReq::L2CFest_BossKFSimpleReq(const L2CFest_BossKFSimpleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CFest_BossKFSimpleReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CFest_BossKFSimpleReq::~L2CFest_BossKFSimpleReq() {
  SharedDtor();
}

void L2CFest_BossKFSimpleReq::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

void L2CFest_BossKFSimpleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CFest_BossKFSimpleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CFest_BossKFSimpleReq_descriptor_;
}

const L2CFest_BossKFSimpleReq& L2CFest_BossKFSimpleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

L2CFest_BossKFSimpleReq* L2CFest_BossKFSimpleReq::default_instance_ = NULL;

L2CFest_BossKFSimpleReq* L2CFest_BossKFSimpleReq::New() const {
  return new L2CFest_BossKFSimpleReq;
}

void L2CFest_BossKFSimpleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    if (has_proto()) {
      if (proto_ != NULL) proto_->::proto_ff::FestSimpleProto::Clear();
    }
  }
  recv_red_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CFest_BossKFSimpleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }

      // optional .proto_ff.FestSimpleProto proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recv_red_ids;
        break;
      }

      // repeated int32 recv_red_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_red_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_recv_red_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_red_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recv_red_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CFest_BossKFSimpleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestSimpleProto proto = 3;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proto(), output);
  }

  // repeated int32 recv_red_ids = 4;
  for (int i = 0; i < this->recv_red_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->recv_red_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CFest_BossKFSimpleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestSimpleProto proto = 3;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proto(), target);
  }

  // repeated int32 recv_red_ids = 4;
  for (int i = 0; i < this->recv_red_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->recv_red_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CFest_BossKFSimpleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestSimpleProto proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proto());
    }

  }
  // repeated int32 recv_red_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_red_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_red_ids(i));
    }
    total_size += 1 * this->recv_red_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CFest_BossKFSimpleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CFest_BossKFSimpleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CFest_BossKFSimpleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CFest_BossKFSimpleReq::MergeFrom(const L2CFest_BossKFSimpleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_red_ids_.MergeFrom(from.recv_red_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_proto()) {
      mutable_proto()->::proto_ff::FestSimpleProto::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CFest_BossKFSimpleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CFest_BossKFSimpleReq::CopyFrom(const L2CFest_BossKFSimpleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CFest_BossKFSimpleReq::IsInitialized() const {

  return true;
}

void L2CFest_BossKFSimpleReq::Swap(L2CFest_BossKFSimpleReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(template_id_, other->template_id_);
    std::swap(proto_, other->proto_);
    recv_red_ids_.Swap(&other->recv_red_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CFest_BossKFSimpleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CFest_BossKFSimpleReq_descriptor_;
  metadata.reflection = L2CFest_BossKFSimpleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LFest_BossKFNotify::kTemplateIdFieldNumber;
const int C2LFest_BossKFNotify::kIdFieldNumber;
const int C2LFest_BossKFNotify::kRoleidFieldNumber;
const int C2LFest_BossKFNotify::kTeamidFieldNumber;
const int C2LFest_BossKFNotify::kZidFieldNumber;
#endif  // !_MSC_VER

C2LFest_BossKFNotify::C2LFest_BossKFNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LFest_BossKFNotify::InitAsDefaultInstance() {
}

C2LFest_BossKFNotify::C2LFest_BossKFNotify(const C2LFest_BossKFNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LFest_BossKFNotify::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0;
  zid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LFest_BossKFNotify::~C2LFest_BossKFNotify() {
  SharedDtor();
}

void C2LFest_BossKFNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LFest_BossKFNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LFest_BossKFNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LFest_BossKFNotify_descriptor_;
}

const C2LFest_BossKFNotify& C2LFest_BossKFNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

C2LFest_BossKFNotify* C2LFest_BossKFNotify::default_instance_ = NULL;

C2LFest_BossKFNotify* C2LFest_BossKFNotify::New() const {
  return new C2LFest_BossKFNotify;
}

void C2LFest_BossKFNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
    roleid_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0;
    zid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LFest_BossKFNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleid;
        break;
      }

      // optional uint64 roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional int32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LFest_BossKFNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint64 roleid = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roleid(), output);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LFest_BossKFNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional uint64 roleid = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roleid(), target);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LFest_BossKFNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 roleid = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LFest_BossKFNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LFest_BossKFNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LFest_BossKFNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LFest_BossKFNotify::MergeFrom(const C2LFest_BossKFNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LFest_BossKFNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LFest_BossKFNotify::CopyFrom(const C2LFest_BossKFNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LFest_BossKFNotify::IsInitialized() const {

  return true;
}

void C2LFest_BossKFNotify::Swap(C2LFest_BossKFNotify* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(roleid_, other->roleid_);
    std::swap(teamid_, other->teamid_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LFest_BossKFNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LFest_BossKFNotify_descriptor_;
  metadata.reflection = C2LFest_BossKFNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LFest_BossInfoReq::kRoleIdFieldNumber;
const int C2LFest_BossInfoReq::kTemplateIdFieldNumber;
const int C2LFest_BossInfoReq::kInfosFieldNumber;
#endif  // !_MSC_VER

C2LFest_BossInfoReq::C2LFest_BossInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LFest_BossInfoReq::InitAsDefaultInstance() {
}

C2LFest_BossInfoReq::C2LFest_BossInfoReq(const C2LFest_BossInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LFest_BossInfoReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LFest_BossInfoReq::~C2LFest_BossInfoReq() {
  SharedDtor();
}

void C2LFest_BossInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LFest_BossInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LFest_BossInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LFest_BossInfoReq_descriptor_;
}

const C2LFest_BossInfoReq& C2LFest_BossInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

C2LFest_BossInfoReq* C2LFest_BossInfoReq::default_instance_ = NULL;

C2LFest_BossInfoReq* C2LFest_BossInfoReq::New() const {
  return new C2LFest_BossInfoReq;
}

void C2LFest_BossInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LFest_BossInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.FestBossInfo infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LFest_BossInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // repeated .proto_ff.FestBossInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LFest_BossInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // repeated .proto_ff.FestBossInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LFest_BossInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FestBossInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LFest_BossInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LFest_BossInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LFest_BossInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LFest_BossInfoReq::MergeFrom(const C2LFest_BossInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LFest_BossInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LFest_BossInfoReq::CopyFrom(const C2LFest_BossInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LFest_BossInfoReq::IsInitialized() const {

  return true;
}

void C2LFest_BossInfoReq::Swap(C2LFest_BossInfoReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(template_id_, other->template_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LFest_BossInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LFest_BossInfoReq_descriptor_;
  metadata.reflection = C2LFest_BossInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LFest_BossFirstOptReq::kTemplateIdFieldNumber;
const int C2LFest_BossFirstOptReq::kIdFieldNumber;
const int C2LFest_BossFirstOptReq::kTypeFieldNumber;
const int C2LFest_BossFirstOptReq::kRoleidFieldNumber;
const int C2LFest_BossFirstOptReq::kFlagFieldNumber;
#endif  // !_MSC_VER

C2LFest_BossFirstOptReq::C2LFest_BossFirstOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LFest_BossFirstOptReq::InitAsDefaultInstance() {
}

C2LFest_BossFirstOptReq::C2LFest_BossFirstOptReq(const C2LFest_BossFirstOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LFest_BossFirstOptReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  type_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LFest_BossFirstOptReq::~C2LFest_BossFirstOptReq() {
  SharedDtor();
}

void C2LFest_BossFirstOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LFest_BossFirstOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LFest_BossFirstOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LFest_BossFirstOptReq_descriptor_;
}

const C2LFest_BossFirstOptReq& C2LFest_BossFirstOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

C2LFest_BossFirstOptReq* C2LFest_BossFirstOptReq::default_instance_ = NULL;

C2LFest_BossFirstOptReq* C2LFest_BossFirstOptReq::New() const {
  return new C2LFest_BossFirstOptReq;
}

void C2LFest_BossFirstOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
    type_ = 0;
    roleid_ = GOOGLE_ULONGLONG(0);
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LFest_BossFirstOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // optional uint64 roleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // optional int32 flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LFest_BossFirstOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional uint64 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roleid(), output);
  }

  // optional int32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LFest_BossFirstOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional uint64 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roleid(), target);
  }

  // optional int32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LFest_BossFirstOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LFest_BossFirstOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LFest_BossFirstOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LFest_BossFirstOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LFest_BossFirstOptReq::MergeFrom(const C2LFest_BossFirstOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LFest_BossFirstOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LFest_BossFirstOptReq::CopyFrom(const C2LFest_BossFirstOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LFest_BossFirstOptReq::IsInitialized() const {

  return true;
}

void C2LFest_BossFirstOptReq::Swap(C2LFest_BossFirstOptReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(roleid_, other->roleid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LFest_BossFirstOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LFest_BossFirstOptReq_descriptor_;
  metadata.reflection = C2LFest_BossFirstOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LFest_HuiMengXiYou_GetRewardReq::kTemplateIdFieldNumber;
const int C2LFest_HuiMengXiYou_GetRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

C2LFest_HuiMengXiYou_GetRewardReq::C2LFest_HuiMengXiYou_GetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LFest_HuiMengXiYou_GetRewardReq::InitAsDefaultInstance() {
}

C2LFest_HuiMengXiYou_GetRewardReq::C2LFest_HuiMengXiYou_GetRewardReq(const C2LFest_HuiMengXiYou_GetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LFest_HuiMengXiYou_GetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LFest_HuiMengXiYou_GetRewardReq::~C2LFest_HuiMengXiYou_GetRewardReq() {
  SharedDtor();
}

void C2LFest_HuiMengXiYou_GetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LFest_HuiMengXiYou_GetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LFest_HuiMengXiYou_GetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LFest_HuiMengXiYou_GetRewardReq_descriptor_;
}

const C2LFest_HuiMengXiYou_GetRewardReq& C2LFest_HuiMengXiYou_GetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

C2LFest_HuiMengXiYou_GetRewardReq* C2LFest_HuiMengXiYou_GetRewardReq::default_instance_ = NULL;

C2LFest_HuiMengXiYou_GetRewardReq* C2LFest_HuiMengXiYou_GetRewardReq::New() const {
  return new C2LFest_HuiMengXiYou_GetRewardReq;
}

void C2LFest_HuiMengXiYou_GetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LFest_HuiMengXiYou_GetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LFest_HuiMengXiYou_GetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LFest_HuiMengXiYou_GetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LFest_HuiMengXiYou_GetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LFest_HuiMengXiYou_GetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LFest_HuiMengXiYou_GetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LFest_HuiMengXiYou_GetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LFest_HuiMengXiYou_GetRewardReq::MergeFrom(const C2LFest_HuiMengXiYou_GetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LFest_HuiMengXiYou_GetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LFest_HuiMengXiYou_GetRewardReq::CopyFrom(const C2LFest_HuiMengXiYou_GetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LFest_HuiMengXiYou_GetRewardReq::IsInitialized() const {

  return true;
}

void C2LFest_HuiMengXiYou_GetRewardReq::Swap(C2LFest_HuiMengXiYou_GetRewardReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LFest_HuiMengXiYou_GetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LFest_HuiMengXiYou_GetRewardReq_descriptor_;
  metadata.reflection = C2LFest_HuiMengXiYou_GetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CFest_HuiMengXiYou_GetRewardRsp::kRetCodeFieldNumber;
const int L2CFest_HuiMengXiYou_GetRewardRsp::kTemplateIdFieldNumber;
const int L2CFest_HuiMengXiYou_GetRewardRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

L2CFest_HuiMengXiYou_GetRewardRsp::L2CFest_HuiMengXiYou_GetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CFest_HuiMengXiYou_GetRewardRsp::InitAsDefaultInstance() {
  reward_ = const_cast< ::proto_ff::FestHuiMengXiYouReward*>(&::proto_ff::FestHuiMengXiYouReward::default_instance());
}

L2CFest_HuiMengXiYou_GetRewardRsp::L2CFest_HuiMengXiYou_GetRewardRsp(const L2CFest_HuiMengXiYou_GetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CFest_HuiMengXiYou_GetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  template_id_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CFest_HuiMengXiYou_GetRewardRsp::~L2CFest_HuiMengXiYou_GetRewardRsp() {
  SharedDtor();
}

void L2CFest_HuiMengXiYou_GetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void L2CFest_HuiMengXiYou_GetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CFest_HuiMengXiYou_GetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CFest_HuiMengXiYou_GetRewardRsp_descriptor_;
}

const L2CFest_HuiMengXiYou_GetRewardRsp& L2CFest_HuiMengXiYou_GetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

L2CFest_HuiMengXiYou_GetRewardRsp* L2CFest_HuiMengXiYou_GetRewardRsp::default_instance_ = NULL;

L2CFest_HuiMengXiYou_GetRewardRsp* L2CFest_HuiMengXiYou_GetRewardRsp::New() const {
  return new L2CFest_HuiMengXiYou_GetRewardRsp;
}

void L2CFest_HuiMengXiYou_GetRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    template_id_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::proto_ff::FestHuiMengXiYouReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CFest_HuiMengXiYou_GetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // optional .proto_ff.FestHuiMengXiYouReward reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CFest_HuiMengXiYou_GetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional .proto_ff.FestHuiMengXiYouReward reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CFest_HuiMengXiYou_GetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional .proto_ff.FestHuiMengXiYouReward reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CFest_HuiMengXiYou_GetRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FestHuiMengXiYouReward reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CFest_HuiMengXiYou_GetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CFest_HuiMengXiYou_GetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CFest_HuiMengXiYou_GetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CFest_HuiMengXiYou_GetRewardRsp::MergeFrom(const L2CFest_HuiMengXiYou_GetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_reward()) {
      mutable_reward()->::proto_ff::FestHuiMengXiYouReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CFest_HuiMengXiYou_GetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CFest_HuiMengXiYou_GetRewardRsp::CopyFrom(const L2CFest_HuiMengXiYou_GetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CFest_HuiMengXiYou_GetRewardRsp::IsInitialized() const {

  return true;
}

void L2CFest_HuiMengXiYou_GetRewardRsp::Swap(L2CFest_HuiMengXiYou_GetRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(template_id_, other->template_id_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CFest_HuiMengXiYou_GetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CFest_HuiMengXiYou_GetRewardRsp_descriptor_;
  metadata.reflection = L2CFest_HuiMengXiYou_GetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouRewardStatusChange::kTemplateIdFieldNumber;
const int NotifyFest_HuiMengXiYouRewardStatusChange::kRewardFieldNumber;
const int NotifyFest_HuiMengXiYouRewardStatusChange::kCurPointsFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouRewardStatusChange::NotifyFest_HuiMengXiYouRewardStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouRewardStatusChange::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouRewardStatusChange::NotifyFest_HuiMengXiYouRewardStatusChange(const NotifyFest_HuiMengXiYouRewardStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouRewardStatusChange::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  cur_points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouRewardStatusChange::~NotifyFest_HuiMengXiYouRewardStatusChange() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouRewardStatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouRewardStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouRewardStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouRewardStatusChange_descriptor_;
}

const NotifyFest_HuiMengXiYouRewardStatusChange& NotifyFest_HuiMengXiYouRewardStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouRewardStatusChange* NotifyFest_HuiMengXiYouRewardStatusChange::default_instance_ = NULL;

NotifyFest_HuiMengXiYouRewardStatusChange* NotifyFest_HuiMengXiYouRewardStatusChange::New() const {
  return new NotifyFest_HuiMengXiYouRewardStatusChange;
}

void NotifyFest_HuiMengXiYouRewardStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    cur_points_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouRewardStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.FestHuiMengXiYouReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_cur_points;
        break;
      }

      // optional int32 cur_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_points_)));
          set_has_cur_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouRewardStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FestHuiMengXiYouReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // optional int32 cur_points = 3;
  if (has_cur_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouRewardStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FestHuiMengXiYouReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // optional int32 cur_points = 3;
  if (has_cur_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouRewardStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 cur_points = 3;
    if (has_cur_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_points());
    }

  }
  // repeated .proto_ff.FestHuiMengXiYouReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouRewardStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouRewardStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouRewardStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouRewardStatusChange::MergeFrom(const NotifyFest_HuiMengXiYouRewardStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_cur_points()) {
      set_cur_points(from.cur_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouRewardStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouRewardStatusChange::CopyFrom(const NotifyFest_HuiMengXiYouRewardStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouRewardStatusChange::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouRewardStatusChange::Swap(NotifyFest_HuiMengXiYouRewardStatusChange* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    reward_.Swap(&other->reward_);
    std::swap(cur_points_, other->cur_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouRewardStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouRewardStatusChange_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouRewardStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XiYouGameInfo::kIdFieldNumber;
const int XiYouGameInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

XiYouGameInfo::XiYouGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XiYouGameInfo::InitAsDefaultInstance() {
}

XiYouGameInfo::XiYouGameInfo(const XiYouGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XiYouGameInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiYouGameInfo::~XiYouGameInfo() {
  SharedDtor();
}

void XiYouGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XiYouGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XiYouGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XiYouGameInfo_descriptor_;
}

const XiYouGameInfo& XiYouGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

XiYouGameInfo* XiYouGameInfo::default_instance_ = NULL;

XiYouGameInfo* XiYouGameInfo::New() const {
  return new XiYouGameInfo;
}

void XiYouGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XiYouGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XiYouGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XiYouGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XiYouGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiYouGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XiYouGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XiYouGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XiYouGameInfo::MergeFrom(const XiYouGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XiYouGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XiYouGameInfo::CopyFrom(const XiYouGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiYouGameInfo::IsInitialized() const {

  return true;
}

void XiYouGameInfo::Swap(XiYouGameInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XiYouGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XiYouGameInfo_descriptor_;
  metadata.reflection = XiYouGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotiftFest_HuiMengXiYouStart::kPlayIdFieldNumber;
const int NotiftFest_HuiMengXiYouStart::kInfoFieldNumber;
const int NotiftFest_HuiMengXiYouStart::kCurStateFieldNumber;
const int NotiftFest_HuiMengXiYouStart::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

NotiftFest_HuiMengXiYouStart::NotiftFest_HuiMengXiYouStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotiftFest_HuiMengXiYouStart::InitAsDefaultInstance() {
}

NotiftFest_HuiMengXiYouStart::NotiftFest_HuiMengXiYouStart(const NotiftFest_HuiMengXiYouStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouStart::SharedCtor() {
  _cached_size_ = 0;
  play_id_ = 0;
  cur_state_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotiftFest_HuiMengXiYouStart::~NotiftFest_HuiMengXiYouStart() {
  SharedDtor();
}

void NotiftFest_HuiMengXiYouStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotiftFest_HuiMengXiYouStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotiftFest_HuiMengXiYouStart_descriptor_;
}

const NotiftFest_HuiMengXiYouStart& NotiftFest_HuiMengXiYouStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotiftFest_HuiMengXiYouStart* NotiftFest_HuiMengXiYouStart::default_instance_ = NULL;

NotiftFest_HuiMengXiYouStart* NotiftFest_HuiMengXiYouStart::New() const {
  return new NotiftFest_HuiMengXiYouStart;
}

void NotiftFest_HuiMengXiYouStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_id_ = 0;
    cur_state_ = 0;
    left_time_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotiftFest_HuiMengXiYouStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.XiYouGameInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_cur_state;
        break;
      }

      // optional int32 cur_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotiftFest_HuiMengXiYouStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_id(), output);
  }

  // repeated .proto_ff.XiYouGameInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 cur_state = 3;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_state(), output);
  }

  // optional int32 left_time = 4;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotiftFest_HuiMengXiYouStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_id(), target);
  }

  // repeated .proto_ff.XiYouGameInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 cur_state = 3;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_state(), target);
  }

  // optional int32 left_time = 4;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotiftFest_HuiMengXiYouStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_id = 1;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 cur_state = 3;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state());
    }

    // optional int32 left_time = 4;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated .proto_ff.XiYouGameInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotiftFest_HuiMengXiYouStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotiftFest_HuiMengXiYouStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotiftFest_HuiMengXiYouStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotiftFest_HuiMengXiYouStart::MergeFrom(const NotiftFest_HuiMengXiYouStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotiftFest_HuiMengXiYouStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouStart::CopyFrom(const NotiftFest_HuiMengXiYouStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiftFest_HuiMengXiYouStart::IsInitialized() const {

  return true;
}

void NotiftFest_HuiMengXiYouStart::Swap(NotiftFest_HuiMengXiYouStart* other) {
  if (other != this) {
    std::swap(play_id_, other->play_id_);
    info_.Swap(&other->info_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotiftFest_HuiMengXiYouStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotiftFest_HuiMengXiYouStart_descriptor_;
  metadata.reflection = NotiftFest_HuiMengXiYouStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotiftFest_LogicHuiMengXiYouStart::kCidFieldNumber;
const int NotiftFest_LogicHuiMengXiYouStart::kStartFieldNumber;
#endif  // !_MSC_VER

NotiftFest_LogicHuiMengXiYouStart::NotiftFest_LogicHuiMengXiYouStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotiftFest_LogicHuiMengXiYouStart::InitAsDefaultInstance() {
  start_ = const_cast< ::proto_ff::NotiftFest_HuiMengXiYouStart*>(&::proto_ff::NotiftFest_HuiMengXiYouStart::default_instance());
}

NotiftFest_LogicHuiMengXiYouStart::NotiftFest_LogicHuiMengXiYouStart(const NotiftFest_LogicHuiMengXiYouStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotiftFest_LogicHuiMengXiYouStart::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotiftFest_LogicHuiMengXiYouStart::~NotiftFest_LogicHuiMengXiYouStart() {
  SharedDtor();
}

void NotiftFest_LogicHuiMengXiYouStart::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
  }
}

void NotiftFest_LogicHuiMengXiYouStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotiftFest_LogicHuiMengXiYouStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotiftFest_LogicHuiMengXiYouStart_descriptor_;
}

const NotiftFest_LogicHuiMengXiYouStart& NotiftFest_LogicHuiMengXiYouStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotiftFest_LogicHuiMengXiYouStart* NotiftFest_LogicHuiMengXiYouStart::default_instance_ = NULL;

NotiftFest_LogicHuiMengXiYouStart* NotiftFest_LogicHuiMengXiYouStart::New() const {
  return new NotiftFest_LogicHuiMengXiYouStart;
}

void NotiftFest_LogicHuiMengXiYouStart::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::proto_ff::NotiftFest_HuiMengXiYouStart::Clear();
    }
  }
  cid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotiftFest_LogicHuiMengXiYouStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_cid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cid;
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // optional .proto_ff.NotiftFest_HuiMengXiYouStart start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotiftFest_LogicHuiMengXiYouStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->cid(i), output);
  }

  // optional .proto_ff.NotiftFest_HuiMengXiYouStart start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotiftFest_LogicHuiMengXiYouStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->cid(i), target);
  }

  // optional .proto_ff.NotiftFest_HuiMengXiYouStart start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotiftFest_LogicHuiMengXiYouStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.NotiftFest_HuiMengXiYouStart start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

  }
  // repeated uint64 cid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid(i));
    }
    total_size += 1 * this->cid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotiftFest_LogicHuiMengXiYouStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotiftFest_LogicHuiMengXiYouStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotiftFest_LogicHuiMengXiYouStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotiftFest_LogicHuiMengXiYouStart::MergeFrom(const NotiftFest_LogicHuiMengXiYouStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_.MergeFrom(from.cid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_start()) {
      mutable_start()->::proto_ff::NotiftFest_HuiMengXiYouStart::MergeFrom(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotiftFest_LogicHuiMengXiYouStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotiftFest_LogicHuiMengXiYouStart::CopyFrom(const NotiftFest_LogicHuiMengXiYouStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiftFest_LogicHuiMengXiYouStart::IsInitialized() const {

  return true;
}

void NotiftFest_LogicHuiMengXiYouStart::Swap(NotiftFest_LogicHuiMengXiYouStart* other) {
  if (other != this) {
    cid_.Swap(&other->cid_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotiftFest_LogicHuiMengXiYouStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotiftFest_LogicHuiMengXiYouStart_descriptor_;
  metadata.reflection = NotiftFest_LogicHuiMengXiYouStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouSceneChange::kPlayIdFieldNumber;
const int NotifyFest_HuiMengXiYouSceneChange::kInfoFieldNumber;
const int NotifyFest_HuiMengXiYouSceneChange::kCurStateFieldNumber;
const int NotifyFest_HuiMengXiYouSceneChange::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouSceneChange::NotifyFest_HuiMengXiYouSceneChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouSceneChange::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouSceneChange::NotifyFest_HuiMengXiYouSceneChange(const NotifyFest_HuiMengXiYouSceneChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouSceneChange::SharedCtor() {
  _cached_size_ = 0;
  play_id_ = 0;
  cur_state_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouSceneChange::~NotifyFest_HuiMengXiYouSceneChange() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouSceneChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouSceneChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouSceneChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouSceneChange_descriptor_;
}

const NotifyFest_HuiMengXiYouSceneChange& NotifyFest_HuiMengXiYouSceneChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouSceneChange* NotifyFest_HuiMengXiYouSceneChange::default_instance_ = NULL;

NotifyFest_HuiMengXiYouSceneChange* NotifyFest_HuiMengXiYouSceneChange::New() const {
  return new NotifyFest_HuiMengXiYouSceneChange;
}

void NotifyFest_HuiMengXiYouSceneChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_id_ = 0;
    cur_state_ = 0;
    left_time_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouSceneChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.XiYouGameInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_cur_state;
        break;
      }

      // optional int32 cur_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouSceneChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_id(), output);
  }

  // repeated .proto_ff.XiYouGameInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 cur_state = 3;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_state(), output);
  }

  // optional int32 left_time = 4;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouSceneChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_id(), target);
  }

  // repeated .proto_ff.XiYouGameInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 cur_state = 3;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_state(), target);
  }

  // optional int32 left_time = 4;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouSceneChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_id = 1;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 cur_state = 3;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state());
    }

    // optional int32 left_time = 4;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated .proto_ff.XiYouGameInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouSceneChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouSceneChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouSceneChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouSceneChange::MergeFrom(const NotifyFest_HuiMengXiYouSceneChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouSceneChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouSceneChange::CopyFrom(const NotifyFest_HuiMengXiYouSceneChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouSceneChange::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouSceneChange::Swap(NotifyFest_HuiMengXiYouSceneChange* other) {
  if (other != this) {
    std::swap(play_id_, other->play_id_);
    info_.Swap(&other->info_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouSceneChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouSceneChange_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouSceneChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotiftFest_HuiMengXiYouGameStart::kPlayIdFieldNumber;
const int NotiftFest_HuiMengXiYouGameStart::kInfoFieldNumber;
const int NotiftFest_HuiMengXiYouGameStart::kCurStateFieldNumber;
const int NotiftFest_HuiMengXiYouGameStart::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

NotiftFest_HuiMengXiYouGameStart::NotiftFest_HuiMengXiYouGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotiftFest_HuiMengXiYouGameStart::InitAsDefaultInstance() {
}

NotiftFest_HuiMengXiYouGameStart::NotiftFest_HuiMengXiYouGameStart(const NotiftFest_HuiMengXiYouGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouGameStart::SharedCtor() {
  _cached_size_ = 0;
  play_id_ = 0;
  cur_state_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotiftFest_HuiMengXiYouGameStart::~NotiftFest_HuiMengXiYouGameStart() {
  SharedDtor();
}

void NotiftFest_HuiMengXiYouGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotiftFest_HuiMengXiYouGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotiftFest_HuiMengXiYouGameStart_descriptor_;
}

const NotiftFest_HuiMengXiYouGameStart& NotiftFest_HuiMengXiYouGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotiftFest_HuiMengXiYouGameStart* NotiftFest_HuiMengXiYouGameStart::default_instance_ = NULL;

NotiftFest_HuiMengXiYouGameStart* NotiftFest_HuiMengXiYouGameStart::New() const {
  return new NotiftFest_HuiMengXiYouGameStart;
}

void NotiftFest_HuiMengXiYouGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_id_ = 0;
    cur_state_ = 0;
    left_time_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotiftFest_HuiMengXiYouGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.XiYouGameInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_cur_state;
        break;
      }

      // optional int32 cur_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotiftFest_HuiMengXiYouGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_id(), output);
  }

  // repeated .proto_ff.XiYouGameInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 cur_state = 3;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_state(), output);
  }

  // optional int32 left_time = 4;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotiftFest_HuiMengXiYouGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_id(), target);
  }

  // repeated .proto_ff.XiYouGameInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 cur_state = 3;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_state(), target);
  }

  // optional int32 left_time = 4;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotiftFest_HuiMengXiYouGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_id = 1;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 cur_state = 3;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state());
    }

    // optional int32 left_time = 4;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated .proto_ff.XiYouGameInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotiftFest_HuiMengXiYouGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotiftFest_HuiMengXiYouGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotiftFest_HuiMengXiYouGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotiftFest_HuiMengXiYouGameStart::MergeFrom(const NotiftFest_HuiMengXiYouGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotiftFest_HuiMengXiYouGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouGameStart::CopyFrom(const NotiftFest_HuiMengXiYouGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiftFest_HuiMengXiYouGameStart::IsInitialized() const {

  return true;
}

void NotiftFest_HuiMengXiYouGameStart::Swap(NotiftFest_HuiMengXiYouGameStart* other) {
  if (other != this) {
    std::swap(play_id_, other->play_id_);
    info_.Swap(&other->info_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotiftFest_HuiMengXiYouGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotiftFest_HuiMengXiYouGameStart_descriptor_;
  metadata.reflection = NotiftFest_HuiMengXiYouGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotiftFest_HuiMengXiYouEnd::kPlayIdFieldNumber;
const int NotiftFest_HuiMengXiYouEnd::kPointsFieldNumber;
#endif  // !_MSC_VER

NotiftFest_HuiMengXiYouEnd::NotiftFest_HuiMengXiYouEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotiftFest_HuiMengXiYouEnd::InitAsDefaultInstance() {
}

NotiftFest_HuiMengXiYouEnd::NotiftFest_HuiMengXiYouEnd(const NotiftFest_HuiMengXiYouEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouEnd::SharedCtor() {
  _cached_size_ = 0;
  play_id_ = 0;
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotiftFest_HuiMengXiYouEnd::~NotiftFest_HuiMengXiYouEnd() {
  SharedDtor();
}

void NotiftFest_HuiMengXiYouEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotiftFest_HuiMengXiYouEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotiftFest_HuiMengXiYouEnd_descriptor_;
}

const NotiftFest_HuiMengXiYouEnd& NotiftFest_HuiMengXiYouEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotiftFest_HuiMengXiYouEnd* NotiftFest_HuiMengXiYouEnd::default_instance_ = NULL;

NotiftFest_HuiMengXiYouEnd* NotiftFest_HuiMengXiYouEnd::New() const {
  return new NotiftFest_HuiMengXiYouEnd;
}

void NotiftFest_HuiMengXiYouEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_id_ = 0;
    points_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotiftFest_HuiMengXiYouEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotiftFest_HuiMengXiYouEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_id(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotiftFest_HuiMengXiYouEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_id(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotiftFest_HuiMengXiYouEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_id = 1;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotiftFest_HuiMengXiYouEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotiftFest_HuiMengXiYouEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotiftFest_HuiMengXiYouEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotiftFest_HuiMengXiYouEnd::MergeFrom(const NotiftFest_HuiMengXiYouEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotiftFest_HuiMengXiYouEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouEnd::CopyFrom(const NotiftFest_HuiMengXiYouEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiftFest_HuiMengXiYouEnd::IsInitialized() const {

  return true;
}

void NotiftFest_HuiMengXiYouEnd::Swap(NotiftFest_HuiMengXiYouEnd* other) {
  if (other != this) {
    std::swap(play_id_, other->play_id_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotiftFest_HuiMengXiYouEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotiftFest_HuiMengXiYouEnd_descriptor_;
  metadata.reflection = NotiftFest_HuiMengXiYouEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotiftFest_HuiMengXiYouGameInfo::kPlayIdFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kGameIdFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kTaskScheduleFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kCurPointsFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kPointsLevelFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kMyCurPointsFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kMyAllPointsFieldNumber;
const int NotiftFest_HuiMengXiYouGameInfo::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

NotiftFest_HuiMengXiYouGameInfo::NotiftFest_HuiMengXiYouGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotiftFest_HuiMengXiYouGameInfo::InitAsDefaultInstance() {
}

NotiftFest_HuiMengXiYouGameInfo::NotiftFest_HuiMengXiYouGameInfo(const NotiftFest_HuiMengXiYouGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouGameInfo::SharedCtor() {
  _cached_size_ = 0;
  play_id_ = 0;
  game_id_ = 0;
  task_schedule_ = 0;
  cur_points_ = 0;
  points_level_ = 0;
  my_cur_points_ = 0;
  my_all_points_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotiftFest_HuiMengXiYouGameInfo::~NotiftFest_HuiMengXiYouGameInfo() {
  SharedDtor();
}

void NotiftFest_HuiMengXiYouGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotiftFest_HuiMengXiYouGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotiftFest_HuiMengXiYouGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotiftFest_HuiMengXiYouGameInfo_descriptor_;
}

const NotiftFest_HuiMengXiYouGameInfo& NotiftFest_HuiMengXiYouGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotiftFest_HuiMengXiYouGameInfo* NotiftFest_HuiMengXiYouGameInfo::default_instance_ = NULL;

NotiftFest_HuiMengXiYouGameInfo* NotiftFest_HuiMengXiYouGameInfo::New() const {
  return new NotiftFest_HuiMengXiYouGameInfo;
}

void NotiftFest_HuiMengXiYouGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_id_ = 0;
    game_id_ = 0;
    task_schedule_ = 0;
    cur_points_ = 0;
    points_level_ = 0;
    my_cur_points_ = 0;
    my_all_points_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotiftFest_HuiMengXiYouGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_schedule;
        break;
      }

      // optional int32 task_schedule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_schedule_)));
          set_has_task_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_points;
        break;
      }

      // optional int32 cur_points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_points_)));
          set_has_cur_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_points_level;
        break;
      }

      // optional int32 points_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_level_)));
          set_has_points_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_my_cur_points;
        break;
      }

      // optional int32 my_cur_points = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_cur_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_cur_points_)));
          set_has_my_cur_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_my_all_points;
        break;
      }

      // optional int32 my_all_points = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_all_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_all_points_)));
          set_has_my_all_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotiftFest_HuiMengXiYouGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_id(), output);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // optional int32 task_schedule = 3;
  if (has_task_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_schedule(), output);
  }

  // optional int32 cur_points = 4;
  if (has_cur_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_points(), output);
  }

  // optional int32 points_level = 5;
  if (has_points_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->points_level(), output);
  }

  // optional int32 my_cur_points = 6;
  if (has_my_cur_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->my_cur_points(), output);
  }

  // optional int32 my_all_points = 7;
  if (has_my_all_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->my_all_points(), output);
  }

  // optional int32 left_time = 8;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotiftFest_HuiMengXiYouGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_id(), target);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // optional int32 task_schedule = 3;
  if (has_task_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_schedule(), target);
  }

  // optional int32 cur_points = 4;
  if (has_cur_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_points(), target);
  }

  // optional int32 points_level = 5;
  if (has_points_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->points_level(), target);
  }

  // optional int32 my_cur_points = 6;
  if (has_my_cur_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->my_cur_points(), target);
  }

  // optional int32 my_all_points = 7;
  if (has_my_all_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->my_all_points(), target);
  }

  // optional int32 left_time = 8;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotiftFest_HuiMengXiYouGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_id = 1;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 task_schedule = 3;
    if (has_task_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_schedule());
    }

    // optional int32 cur_points = 4;
    if (has_cur_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_points());
    }

    // optional int32 points_level = 5;
    if (has_points_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points_level());
    }

    // optional int32 my_cur_points = 6;
    if (has_my_cur_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_cur_points());
    }

    // optional int32 my_all_points = 7;
    if (has_my_all_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_all_points());
    }

    // optional int32 left_time = 8;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotiftFest_HuiMengXiYouGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotiftFest_HuiMengXiYouGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotiftFest_HuiMengXiYouGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotiftFest_HuiMengXiYouGameInfo::MergeFrom(const NotiftFest_HuiMengXiYouGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_task_schedule()) {
      set_task_schedule(from.task_schedule());
    }
    if (from.has_cur_points()) {
      set_cur_points(from.cur_points());
    }
    if (from.has_points_level()) {
      set_points_level(from.points_level());
    }
    if (from.has_my_cur_points()) {
      set_my_cur_points(from.my_cur_points());
    }
    if (from.has_my_all_points()) {
      set_my_all_points(from.my_all_points());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotiftFest_HuiMengXiYouGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotiftFest_HuiMengXiYouGameInfo::CopyFrom(const NotiftFest_HuiMengXiYouGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotiftFest_HuiMengXiYouGameInfo::IsInitialized() const {

  return true;
}

void NotiftFest_HuiMengXiYouGameInfo::Swap(NotiftFest_HuiMengXiYouGameInfo* other) {
  if (other != this) {
    std::swap(play_id_, other->play_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(task_schedule_, other->task_schedule_);
    std::swap(cur_points_, other->cur_points_);
    std::swap(points_level_, other->points_level_);
    std::swap(my_cur_points_, other->my_cur_points_);
    std::swap(my_all_points_, other->my_all_points_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotiftFest_HuiMengXiYouGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotiftFest_HuiMengXiYouGameInfo_descriptor_;
  metadata.reflection = NotiftFest_HuiMengXiYouGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouGameEnd::kPlayIdFieldNumber;
const int NotifyFest_HuiMengXiYouGameEnd::kGameIdFieldNumber;
const int NotifyFest_HuiMengXiYouGameEnd::kPointsLevelFieldNumber;
const int NotifyFest_HuiMengXiYouGameEnd::kMyCurPointsFieldNumber;
const int NotifyFest_HuiMengXiYouGameEnd::kRewardFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouGameEnd::NotifyFest_HuiMengXiYouGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouGameEnd::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouGameEnd::NotifyFest_HuiMengXiYouGameEnd(const NotifyFest_HuiMengXiYouGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouGameEnd::SharedCtor() {
  _cached_size_ = 0;
  play_id_ = 0;
  game_id_ = 0;
  points_level_ = 0;
  my_cur_points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouGameEnd::~NotifyFest_HuiMengXiYouGameEnd() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouGameEnd_descriptor_;
}

const NotifyFest_HuiMengXiYouGameEnd& NotifyFest_HuiMengXiYouGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouGameEnd* NotifyFest_HuiMengXiYouGameEnd::default_instance_ = NULL;

NotifyFest_HuiMengXiYouGameEnd* NotifyFest_HuiMengXiYouGameEnd::New() const {
  return new NotifyFest_HuiMengXiYouGameEnd;
}

void NotifyFest_HuiMengXiYouGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_id_ = 0;
    game_id_ = 0;
    points_level_ = 0;
    my_cur_points_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_points_level;
        break;
      }

      // optional int32 points_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_level_)));
          set_has_points_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_my_cur_points;
        break;
      }

      // optional int32 my_cur_points = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_cur_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_cur_points_)));
          set_has_my_cur_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItem reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_id(), output);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // optional int32 points_level = 5;
  if (has_points_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->points_level(), output);
  }

  // optional int32 my_cur_points = 6;
  if (has_my_cur_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->my_cur_points(), output);
  }

  // repeated .proto_ff.ComItem reward = 7;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_id = 1;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_id(), target);
  }

  // optional int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // optional int32 points_level = 5;
  if (has_points_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->points_level(), target);
  }

  // optional int32 my_cur_points = 6;
  if (has_my_cur_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->my_cur_points(), target);
  }

  // repeated .proto_ff.ComItem reward = 7;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_id = 1;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 points_level = 5;
    if (has_points_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points_level());
    }

    // optional int32 my_cur_points = 6;
    if (has_my_cur_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_cur_points());
    }

  }
  // repeated .proto_ff.ComItem reward = 7;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouGameEnd::MergeFrom(const NotifyFest_HuiMengXiYouGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_points_level()) {
      set_points_level(from.points_level());
    }
    if (from.has_my_cur_points()) {
      set_my_cur_points(from.my_cur_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouGameEnd::CopyFrom(const NotifyFest_HuiMengXiYouGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouGameEnd::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouGameEnd::Swap(NotifyFest_HuiMengXiYouGameEnd* other) {
  if (other != this) {
    std::swap(play_id_, other->play_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(points_level_, other->points_level_);
    std::swap(my_cur_points_, other->my_cur_points_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouGameEnd_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouEnterReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouEnterReq::NotifyFest_HuiMengXiYouEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouEnterReq::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouEnterReq::NotifyFest_HuiMengXiYouEnterReq(const NotifyFest_HuiMengXiYouEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouEnterReq::~NotifyFest_HuiMengXiYouEnterReq() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouEnterReq_descriptor_;
}

const NotifyFest_HuiMengXiYouEnterReq& NotifyFest_HuiMengXiYouEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouEnterReq* NotifyFest_HuiMengXiYouEnterReq::default_instance_ = NULL;

NotifyFest_HuiMengXiYouEnterReq* NotifyFest_HuiMengXiYouEnterReq::New() const {
  return new NotifyFest_HuiMengXiYouEnterReq;
}

void NotifyFest_HuiMengXiYouEnterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouEnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouEnterReq::MergeFrom(const NotifyFest_HuiMengXiYouEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterReq::CopyFrom(const NotifyFest_HuiMengXiYouEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouEnterReq::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouEnterReq::Swap(NotifyFest_HuiMengXiYouEnterReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouEnterReq_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouEnterRsp::kRetCodeFieldNumber;
const int NotifyFest_HuiMengXiYouEnterRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouEnterRsp::NotifyFest_HuiMengXiYouEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouEnterRsp::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouEnterRsp::NotifyFest_HuiMengXiYouEnterRsp(const NotifyFest_HuiMengXiYouEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouEnterRsp::~NotifyFest_HuiMengXiYouEnterRsp() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouEnterRsp_descriptor_;
}

const NotifyFest_HuiMengXiYouEnterRsp& NotifyFest_HuiMengXiYouEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouEnterRsp* NotifyFest_HuiMengXiYouEnterRsp::default_instance_ = NULL;

NotifyFest_HuiMengXiYouEnterRsp* NotifyFest_HuiMengXiYouEnterRsp::New() const {
  return new NotifyFest_HuiMengXiYouEnterRsp;
}

void NotifyFest_HuiMengXiYouEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouEnterRsp::MergeFrom(const NotifyFest_HuiMengXiYouEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterRsp::CopyFrom(const NotifyFest_HuiMengXiYouEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouEnterRsp::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouEnterRsp::Swap(NotifyFest_HuiMengXiYouEnterRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouEnterRsp_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouEnterGameReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouEnterGameReq::NotifyFest_HuiMengXiYouEnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouEnterGameReq::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouEnterGameReq::NotifyFest_HuiMengXiYouEnterGameReq(const NotifyFest_HuiMengXiYouEnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouEnterGameReq::~NotifyFest_HuiMengXiYouEnterGameReq() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouEnterGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouEnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouEnterGameReq_descriptor_;
}

const NotifyFest_HuiMengXiYouEnterGameReq& NotifyFest_HuiMengXiYouEnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouEnterGameReq* NotifyFest_HuiMengXiYouEnterGameReq::default_instance_ = NULL;

NotifyFest_HuiMengXiYouEnterGameReq* NotifyFest_HuiMengXiYouEnterGameReq::New() const {
  return new NotifyFest_HuiMengXiYouEnterGameReq;
}

void NotifyFest_HuiMengXiYouEnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouEnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouEnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouEnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouEnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouEnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouEnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouEnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouEnterGameReq::MergeFrom(const NotifyFest_HuiMengXiYouEnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouEnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterGameReq::CopyFrom(const NotifyFest_HuiMengXiYouEnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouEnterGameReq::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouEnterGameReq::Swap(NotifyFest_HuiMengXiYouEnterGameReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouEnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouEnterGameReq_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouEnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouEnterGameRsp::kRetCodeFieldNumber;
const int NotifyFest_HuiMengXiYouEnterGameRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouEnterGameRsp::NotifyFest_HuiMengXiYouEnterGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouEnterGameRsp::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouEnterGameRsp::NotifyFest_HuiMengXiYouEnterGameRsp(const NotifyFest_HuiMengXiYouEnterGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterGameRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouEnterGameRsp::~NotifyFest_HuiMengXiYouEnterGameRsp() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouEnterGameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouEnterGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouEnterGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouEnterGameRsp_descriptor_;
}

const NotifyFest_HuiMengXiYouEnterGameRsp& NotifyFest_HuiMengXiYouEnterGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouEnterGameRsp* NotifyFest_HuiMengXiYouEnterGameRsp::default_instance_ = NULL;

NotifyFest_HuiMengXiYouEnterGameRsp* NotifyFest_HuiMengXiYouEnterGameRsp::New() const {
  return new NotifyFest_HuiMengXiYouEnterGameRsp;
}

void NotifyFest_HuiMengXiYouEnterGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouEnterGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouEnterGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouEnterGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouEnterGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouEnterGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouEnterGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouEnterGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouEnterGameRsp::MergeFrom(const NotifyFest_HuiMengXiYouEnterGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouEnterGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouEnterGameRsp::CopyFrom(const NotifyFest_HuiMengXiYouEnterGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouEnterGameRsp::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouEnterGameRsp::Swap(NotifyFest_HuiMengXiYouEnterGameRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouEnterGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouEnterGameRsp_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouEnterGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LFest_HuiMengXiYouGiveCaiJiReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

C2LFest_HuiMengXiYouGiveCaiJiReq::C2LFest_HuiMengXiYouGiveCaiJiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::InitAsDefaultInstance() {
}

C2LFest_HuiMengXiYouGiveCaiJiReq::C2LFest_HuiMengXiYouGiveCaiJiReq(const C2LFest_HuiMengXiYouGiveCaiJiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LFest_HuiMengXiYouGiveCaiJiReq::~C2LFest_HuiMengXiYouGiveCaiJiReq() {
  SharedDtor();
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LFest_HuiMengXiYouGiveCaiJiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LFest_HuiMengXiYouGiveCaiJiReq_descriptor_;
}

const C2LFest_HuiMengXiYouGiveCaiJiReq& C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

C2LFest_HuiMengXiYouGiveCaiJiReq* C2LFest_HuiMengXiYouGiveCaiJiReq::default_instance_ = NULL;

C2LFest_HuiMengXiYouGiveCaiJiReq* C2LFest_HuiMengXiYouGiveCaiJiReq::New() const {
  return new C2LFest_HuiMengXiYouGiveCaiJiReq;
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LFest_HuiMengXiYouGiveCaiJiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LFest_HuiMengXiYouGiveCaiJiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LFest_HuiMengXiYouGiveCaiJiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LFest_HuiMengXiYouGiveCaiJiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LFest_HuiMengXiYouGiveCaiJiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::MergeFrom(const C2LFest_HuiMengXiYouGiveCaiJiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::CopyFrom(const C2LFest_HuiMengXiYouGiveCaiJiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LFest_HuiMengXiYouGiveCaiJiReq::IsInitialized() const {

  return true;
}

void C2LFest_HuiMengXiYouGiveCaiJiReq::Swap(C2LFest_HuiMengXiYouGiveCaiJiReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LFest_HuiMengXiYouGiveCaiJiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LFest_HuiMengXiYouGiveCaiJiReq_descriptor_;
  metadata.reflection = C2LFest_HuiMengXiYouGiveCaiJiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CFest_HuiMengXiYouGiveCaiJiRsp::kRetCodeFieldNumber;
const int L2CFest_HuiMengXiYouGiveCaiJiRsp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

L2CFest_HuiMengXiYouGiveCaiJiRsp::L2CFest_HuiMengXiYouGiveCaiJiRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::InitAsDefaultInstance() {
}

L2CFest_HuiMengXiYouGiveCaiJiRsp::L2CFest_HuiMengXiYouGiveCaiJiRsp(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CFest_HuiMengXiYouGiveCaiJiRsp::~L2CFest_HuiMengXiYouGiveCaiJiRsp() {
  SharedDtor();
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CFest_HuiMengXiYouGiveCaiJiRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CFest_HuiMengXiYouGiveCaiJiRsp_descriptor_;
}

const L2CFest_HuiMengXiYouGiveCaiJiRsp& L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

L2CFest_HuiMengXiYouGiveCaiJiRsp* L2CFest_HuiMengXiYouGiveCaiJiRsp::default_instance_ = NULL;

L2CFest_HuiMengXiYouGiveCaiJiRsp* L2CFest_HuiMengXiYouGiveCaiJiRsp::New() const {
  return new L2CFest_HuiMengXiYouGiveCaiJiRsp;
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CFest_HuiMengXiYouGiveCaiJiRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CFest_HuiMengXiYouGiveCaiJiRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CFest_HuiMengXiYouGiveCaiJiRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CFest_HuiMengXiYouGiveCaiJiRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CFest_HuiMengXiYouGiveCaiJiRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::MergeFrom(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::CopyFrom(const L2CFest_HuiMengXiYouGiveCaiJiRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CFest_HuiMengXiYouGiveCaiJiRsp::IsInitialized() const {

  return true;
}

void L2CFest_HuiMengXiYouGiveCaiJiRsp::Swap(L2CFest_HuiMengXiYouGiveCaiJiRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CFest_HuiMengXiYouGiveCaiJiRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CFest_HuiMengXiYouGiveCaiJiRsp_descriptor_;
  metadata.reflection = L2CFest_HuiMengXiYouGiveCaiJiRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XiYouCaiJiCollectInfo::kCidFieldNumber;
const int XiYouCaiJiCollectInfo::kPosFieldNumber;
#endif  // !_MSC_VER

XiYouCaiJiCollectInfo::XiYouCaiJiCollectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XiYouCaiJiCollectInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

XiYouCaiJiCollectInfo::XiYouCaiJiCollectInfo(const XiYouCaiJiCollectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XiYouCaiJiCollectInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiYouCaiJiCollectInfo::~XiYouCaiJiCollectInfo() {
  SharedDtor();
}

void XiYouCaiJiCollectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void XiYouCaiJiCollectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XiYouCaiJiCollectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XiYouCaiJiCollectInfo_descriptor_;
}

const XiYouCaiJiCollectInfo& XiYouCaiJiCollectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

XiYouCaiJiCollectInfo* XiYouCaiJiCollectInfo::default_instance_ = NULL;

XiYouCaiJiCollectInfo* XiYouCaiJiCollectInfo::New() const {
  return new XiYouCaiJiCollectInfo;
}

void XiYouCaiJiCollectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XiYouCaiJiCollectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XiYouCaiJiCollectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XiYouCaiJiCollectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XiYouCaiJiCollectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.Vector3PB pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiYouCaiJiCollectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XiYouCaiJiCollectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XiYouCaiJiCollectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XiYouCaiJiCollectInfo::MergeFrom(const XiYouCaiJiCollectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XiYouCaiJiCollectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XiYouCaiJiCollectInfo::CopyFrom(const XiYouCaiJiCollectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiYouCaiJiCollectInfo::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void XiYouCaiJiCollectInfo::Swap(XiYouCaiJiCollectInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XiYouCaiJiCollectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XiYouCaiJiCollectInfo_descriptor_;
  metadata.reflection = XiYouCaiJiCollectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouCollect::kCollectsFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouCollect::NotifyFest_HuiMengXiYouCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouCollect::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouCollect::NotifyFest_HuiMengXiYouCollect(const NotifyFest_HuiMengXiYouCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouCollect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouCollect::~NotifyFest_HuiMengXiYouCollect() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouCollect_descriptor_;
}

const NotifyFest_HuiMengXiYouCollect& NotifyFest_HuiMengXiYouCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouCollect* NotifyFest_HuiMengXiYouCollect::default_instance_ = NULL;

NotifyFest_HuiMengXiYouCollect* NotifyFest_HuiMengXiYouCollect::New() const {
  return new NotifyFest_HuiMengXiYouCollect;
}

void NotifyFest_HuiMengXiYouCollect::Clear() {
  collects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.XiYouCaiJiCollectInfo collects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_collects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.XiYouCaiJiCollectInfo collects = 1;
  for (int i = 0; i < this->collects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.XiYouCaiJiCollectInfo collects = 1;
  for (int i = 0; i < this->collects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->collects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouCollect::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.XiYouCaiJiCollectInfo collects = 1;
  total_size += 1 * this->collects_size();
  for (int i = 0; i < this->collects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouCollect::MergeFrom(const NotifyFest_HuiMengXiYouCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  collects_.MergeFrom(from.collects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouCollect::CopyFrom(const NotifyFest_HuiMengXiYouCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouCollect::IsInitialized() const {

  for (int i = 0; i < collects_size(); i++) {
    if (!this->collects(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyFest_HuiMengXiYouCollect::Swap(NotifyFest_HuiMengXiYouCollect* other) {
  if (other != this) {
    collects_.Swap(&other->collects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouCollect_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouCollect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XiYouCaiJiCollectMonsterInfo::kMonsterIdFieldNumber;
const int XiYouCaiJiCollectMonsterInfo::kNumFieldNumber;
const int XiYouCaiJiCollectMonsterInfo::kItemIdFieldNumber;
#endif  // !_MSC_VER

XiYouCaiJiCollectMonsterInfo::XiYouCaiJiCollectMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XiYouCaiJiCollectMonsterInfo::InitAsDefaultInstance() {
}

XiYouCaiJiCollectMonsterInfo::XiYouCaiJiCollectMonsterInfo(const XiYouCaiJiCollectMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XiYouCaiJiCollectMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0u;
  num_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiYouCaiJiCollectMonsterInfo::~XiYouCaiJiCollectMonsterInfo() {
  SharedDtor();
}

void XiYouCaiJiCollectMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XiYouCaiJiCollectMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XiYouCaiJiCollectMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XiYouCaiJiCollectMonsterInfo_descriptor_;
}

const XiYouCaiJiCollectMonsterInfo& XiYouCaiJiCollectMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

XiYouCaiJiCollectMonsterInfo* XiYouCaiJiCollectMonsterInfo::default_instance_ = NULL;

XiYouCaiJiCollectMonsterInfo* XiYouCaiJiCollectMonsterInfo::New() const {
  return new XiYouCaiJiCollectMonsterInfo;
}

void XiYouCaiJiCollectMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0u;
    num_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XiYouCaiJiCollectMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XiYouCaiJiCollectMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XiYouCaiJiCollectMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XiYouCaiJiCollectMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiYouCaiJiCollectMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XiYouCaiJiCollectMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XiYouCaiJiCollectMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XiYouCaiJiCollectMonsterInfo::MergeFrom(const XiYouCaiJiCollectMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XiYouCaiJiCollectMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XiYouCaiJiCollectMonsterInfo::CopyFrom(const XiYouCaiJiCollectMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiYouCaiJiCollectMonsterInfo::IsInitialized() const {

  return true;
}

void XiYouCaiJiCollectMonsterInfo::Swap(XiYouCaiJiCollectMonsterInfo* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(num_, other->num_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XiYouCaiJiCollectMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XiYouCaiJiCollectMonsterInfo_descriptor_;
  metadata.reflection = XiYouCaiJiCollectMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYouCollectSuccess::kMonsterInfoFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYouCollectSuccess::NotifyFest_HuiMengXiYouCollectSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYouCollectSuccess::InitAsDefaultInstance() {
}

NotifyFest_HuiMengXiYouCollectSuccess::NotifyFest_HuiMengXiYouCollectSuccess(const NotifyFest_HuiMengXiYouCollectSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouCollectSuccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYouCollectSuccess::~NotifyFest_HuiMengXiYouCollectSuccess() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYouCollectSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFest_HuiMengXiYouCollectSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYouCollectSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYouCollectSuccess_descriptor_;
}

const NotifyFest_HuiMengXiYouCollectSuccess& NotifyFest_HuiMengXiYouCollectSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYouCollectSuccess* NotifyFest_HuiMengXiYouCollectSuccess::default_instance_ = NULL;

NotifyFest_HuiMengXiYouCollectSuccess* NotifyFest_HuiMengXiYouCollectSuccess::New() const {
  return new NotifyFest_HuiMengXiYouCollectSuccess;
}

void NotifyFest_HuiMengXiYouCollectSuccess::Clear() {
  monster_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYouCollectSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.XiYouCaiJiCollectMonsterInfo monster_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monster_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYouCollectSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.XiYouCaiJiCollectMonsterInfo monster_info = 1;
  for (int i = 0; i < this->monster_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monster_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYouCollectSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.XiYouCaiJiCollectMonsterInfo monster_info = 1;
  for (int i = 0; i < this->monster_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monster_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYouCollectSuccess::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.XiYouCaiJiCollectMonsterInfo monster_info = 1;
  total_size += 1 * this->monster_info_size();
  for (int i = 0; i < this->monster_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYouCollectSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYouCollectSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYouCollectSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYouCollectSuccess::MergeFrom(const NotifyFest_HuiMengXiYouCollectSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_info_.MergeFrom(from.monster_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYouCollectSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYouCollectSuccess::CopyFrom(const NotifyFest_HuiMengXiYouCollectSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYouCollectSuccess::IsInitialized() const {

  return true;
}

void NotifyFest_HuiMengXiYouCollectSuccess::Swap(NotifyFest_HuiMengXiYouCollectSuccess* other) {
  if (other != this) {
    monster_info_.Swap(&other->monster_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYouCollectSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYouCollectSuccess_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYouCollectSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFest_HuiMengXiYou_RoubaoziNotify::kCurFreshWaveFieldNumber;
const int NotifyFest_HuiMengXiYou_RoubaoziNotify::kAllFreshWaveFieldNumber;
const int NotifyFest_HuiMengXiYou_RoubaoziNotify::kNpcCidFieldNumber;
const int NotifyFest_HuiMengXiYou_RoubaoziNotify::kNpcPosFieldNumber;
const int NotifyFest_HuiMengXiYou_RoubaoziNotify::kNpcStatusFieldNumber;
#endif  // !_MSC_VER

NotifyFest_HuiMengXiYou_RoubaoziNotify::NotifyFest_HuiMengXiYou_RoubaoziNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::InitAsDefaultInstance() {
  npc_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

NotifyFest_HuiMengXiYou_RoubaoziNotify::NotifyFest_HuiMengXiYou_RoubaoziNotify(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::SharedCtor() {
  _cached_size_ = 0;
  cur_fresh_wave_ = 0u;
  all_fresh_wave_ = 0u;
  npc_cid_ = GOOGLE_ULONGLONG(0);
  npc_pos_ = NULL;
  npc_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFest_HuiMengXiYou_RoubaoziNotify::~NotifyFest_HuiMengXiYou_RoubaoziNotify() {
  SharedDtor();
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::SharedDtor() {
  if (this != default_instance_) {
    delete npc_pos_;
  }
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFest_HuiMengXiYou_RoubaoziNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFest_HuiMengXiYou_RoubaoziNotify_descriptor_;
}

const NotifyFest_HuiMengXiYou_RoubaoziNotify& NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

NotifyFest_HuiMengXiYou_RoubaoziNotify* NotifyFest_HuiMengXiYou_RoubaoziNotify::default_instance_ = NULL;

NotifyFest_HuiMengXiYou_RoubaoziNotify* NotifyFest_HuiMengXiYou_RoubaoziNotify::New() const {
  return new NotifyFest_HuiMengXiYou_RoubaoziNotify;
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_fresh_wave_ = 0u;
    all_fresh_wave_ = 0u;
    npc_cid_ = GOOGLE_ULONGLONG(0);
    if (has_npc_pos()) {
      if (npc_pos_ != NULL) npc_pos_->::proto_ff::Vector3PB::Clear();
    }
    npc_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFest_HuiMengXiYou_RoubaoziNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_fresh_wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_fresh_wave_)));
          set_has_cur_fresh_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_fresh_wave;
        break;
      }

      // optional uint32 all_fresh_wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_fresh_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_fresh_wave_)));
          set_has_all_fresh_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_cid;
        break;
      }

      // optional uint64 npc_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npc_cid_)));
          set_has_npc_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_npc_pos;
        break;
      }

      // optional .proto_ff.Vector3PB npc_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npc_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_npc_status;
        break;
      }

      // optional uint32 npc_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_status_)));
          set_has_npc_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_fresh_wave = 1;
  if (has_cur_fresh_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_fresh_wave(), output);
  }

  // optional uint32 all_fresh_wave = 2;
  if (has_all_fresh_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->all_fresh_wave(), output);
  }

  // optional uint64 npc_cid = 3;
  if (has_npc_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npc_cid(), output);
  }

  // optional .proto_ff.Vector3PB npc_pos = 4;
  if (has_npc_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->npc_pos(), output);
  }

  // optional uint32 npc_status = 5;
  if (has_npc_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->npc_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFest_HuiMengXiYou_RoubaoziNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_fresh_wave = 1;
  if (has_cur_fresh_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_fresh_wave(), target);
  }

  // optional uint32 all_fresh_wave = 2;
  if (has_all_fresh_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->all_fresh_wave(), target);
  }

  // optional uint64 npc_cid = 3;
  if (has_npc_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npc_cid(), target);
  }

  // optional .proto_ff.Vector3PB npc_pos = 4;
  if (has_npc_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->npc_pos(), target);
  }

  // optional uint32 npc_status = 5;
  if (has_npc_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->npc_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFest_HuiMengXiYou_RoubaoziNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_fresh_wave = 1;
    if (has_cur_fresh_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_fresh_wave());
    }

    // optional uint32 all_fresh_wave = 2;
    if (has_all_fresh_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_fresh_wave());
    }

    // optional uint64 npc_cid = 3;
    if (has_npc_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npc_cid());
    }

    // optional .proto_ff.Vector3PB npc_pos = 4;
    if (has_npc_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npc_pos());
    }

    // optional uint32 npc_status = 5;
    if (has_npc_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFest_HuiMengXiYou_RoubaoziNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFest_HuiMengXiYou_RoubaoziNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::MergeFrom(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_fresh_wave()) {
      set_cur_fresh_wave(from.cur_fresh_wave());
    }
    if (from.has_all_fresh_wave()) {
      set_all_fresh_wave(from.all_fresh_wave());
    }
    if (from.has_npc_cid()) {
      set_npc_cid(from.npc_cid());
    }
    if (from.has_npc_pos()) {
      mutable_npc_pos()->::proto_ff::Vector3PB::MergeFrom(from.npc_pos());
    }
    if (from.has_npc_status()) {
      set_npc_status(from.npc_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::CopyFrom(const NotifyFest_HuiMengXiYou_RoubaoziNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFest_HuiMengXiYou_RoubaoziNotify::IsInitialized() const {

  if (has_npc_pos()) {
    if (!this->npc_pos().IsInitialized()) return false;
  }
  return true;
}

void NotifyFest_HuiMengXiYou_RoubaoziNotify::Swap(NotifyFest_HuiMengXiYou_RoubaoziNotify* other) {
  if (other != this) {
    std::swap(cur_fresh_wave_, other->cur_fresh_wave_);
    std::swap(all_fresh_wave_, other->all_fresh_wave_);
    std::swap(npc_cid_, other->npc_cid_);
    std::swap(npc_pos_, other->npc_pos_);
    std::swap(npc_status_, other->npc_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFest_HuiMengXiYou_RoubaoziNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFest_HuiMengXiYou_RoubaoziNotify_descriptor_;
  metadata.reflection = NotifyFest_HuiMengXiYou_RoubaoziNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRankInfo::kRankFieldNumber;
const int FMarryRankInfo::kRolesFieldNumber;
const int FMarryRankInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

FMarryRankInfo::FMarryRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRankInfo::InitAsDefaultInstance() {
}

FMarryRankInfo::FMarryRankInfo(const FMarryRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRankInfo::~FMarryRankInfo() {
  SharedDtor();
}

void FMarryRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRankInfo_descriptor_;
}

const FMarryRankInfo& FMarryRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRankInfo* FMarryRankInfo::default_instance_ = NULL;

FMarryRankInfo* FMarryRankInfo::New() const {
  return new FMarryRankInfo;
}

void FMarryRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    score_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRankInfo::MergeFrom(const FMarryRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRankInfo::CopyFrom(const FMarryRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRankInfo::IsInitialized() const {

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void FMarryRankInfo::Swap(FMarryRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    roles_.Swap(&other->roles_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRankInfo_descriptor_;
  metadata.reflection = FMarryRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryExpressRankInfo::kRankFieldNumber;
const int FMarryExpressRankInfo::kCidFieldNumber;
const int FMarryExpressRankInfo::kNameFieldNumber;
const int FMarryExpressRankInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

FMarryExpressRankInfo::FMarryExpressRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryExpressRankInfo::InitAsDefaultInstance() {
}

FMarryExpressRankInfo::FMarryExpressRankInfo(const FMarryExpressRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryExpressRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryExpressRankInfo::~FMarryExpressRankInfo() {
  SharedDtor();
}

void FMarryExpressRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FMarryExpressRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryExpressRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryExpressRankInfo_descriptor_;
}

const FMarryExpressRankInfo& FMarryExpressRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryExpressRankInfo* FMarryExpressRankInfo::default_instance_ = NULL;

FMarryExpressRankInfo* FMarryExpressRankInfo::New() const {
  return new FMarryExpressRankInfo;
}

void FMarryExpressRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryExpressRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryExpressRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryExpressRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryExpressRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryExpressRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryExpressRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryExpressRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryExpressRankInfo::MergeFrom(const FMarryExpressRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryExpressRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryExpressRankInfo::CopyFrom(const FMarryExpressRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryExpressRankInfo::IsInitialized() const {

  return true;
}

void FMarryExpressRankInfo::Swap(FMarryExpressRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryExpressRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryExpressRankInfo_descriptor_;
  metadata.reflection = FMarryExpressRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRankReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FMarryRankReq::FMarryRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRankReq::InitAsDefaultInstance() {
}

FMarryRankReq::FMarryRankReq(const FMarryRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRankReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRankReq::~FMarryRankReq() {
  SharedDtor();
}

void FMarryRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRankReq_descriptor_;
}

const FMarryRankReq& FMarryRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRankReq* FMarryRankReq::default_instance_ = NULL;

FMarryRankReq* FMarryRankReq::New() const {
  return new FMarryRankReq;
}

void FMarryRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRankReq::MergeFrom(const FMarryRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRankReq::CopyFrom(const FMarryRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRankReq::IsInitialized() const {

  return true;
}

void FMarryRankReq::Swap(FMarryRankReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRankReq_descriptor_;
  metadata.reflection = FMarryRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRankRsp::kTemplateIdFieldNumber;
const int FMarryRankRsp::kEntrysFieldNumber;
const int FMarryRankRsp::kMyFieldNumber;
#endif  // !_MSC_VER

FMarryRankRsp::FMarryRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRankRsp::InitAsDefaultInstance() {
  my_ = const_cast< ::proto_ff::FMarryRankInfo*>(&::proto_ff::FMarryRankInfo::default_instance());
}

FMarryRankRsp::FMarryRankRsp(const FMarryRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRankRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  my_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRankRsp::~FMarryRankRsp() {
  SharedDtor();
}

void FMarryRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete my_;
  }
}

void FMarryRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRankRsp_descriptor_;
}

const FMarryRankRsp& FMarryRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRankRsp* FMarryRankRsp::default_instance_ = NULL;

FMarryRankRsp* FMarryRankRsp::New() const {
  return new FMarryRankRsp;
}

void FMarryRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    if (has_my()) {
      if (my_ != NULL) my_->::proto_ff::FMarryRankInfo::Clear();
    }
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.FMarryRankInfo entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(26)) goto parse_my;
        break;
      }

      // optional .proto_ff.FMarryRankInfo my = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FMarryRankInfo entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional .proto_ff.FMarryRankInfo my = 3;
  if (has_my()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->my(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FMarryRankInfo entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional .proto_ff.FMarryRankInfo my = 3;
  if (has_my()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->my(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .proto_ff.FMarryRankInfo my = 3;
    if (has_my()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my());
    }

  }
  // repeated .proto_ff.FMarryRankInfo entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRankRsp::MergeFrom(const FMarryRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_my()) {
      mutable_my()->::proto_ff::FMarryRankInfo::MergeFrom(from.my());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRankRsp::CopyFrom(const FMarryRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRankRsp::IsInitialized() const {

  for (int i = 0; i < entrys_size(); i++) {
    if (!this->entrys(i).IsInitialized()) return false;
  }
  if (has_my()) {
    if (!this->my().IsInitialized()) return false;
  }
  return true;
}

void FMarryRankRsp::Swap(FMarryRankRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    entrys_.Swap(&other->entrys_);
    std::swap(my_, other->my_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRankRsp_descriptor_;
  metadata.reflection = FMarryRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryExpressReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FMarryExpressReq::FMarryExpressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryExpressReq::InitAsDefaultInstance() {
}

FMarryExpressReq::FMarryExpressReq(const FMarryExpressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryExpressReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryExpressReq::~FMarryExpressReq() {
  SharedDtor();
}

void FMarryExpressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryExpressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryExpressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryExpressReq_descriptor_;
}

const FMarryExpressReq& FMarryExpressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryExpressReq* FMarryExpressReq::default_instance_ = NULL;

FMarryExpressReq* FMarryExpressReq::New() const {
  return new FMarryExpressReq;
}

void FMarryExpressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryExpressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryExpressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryExpressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryExpressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryExpressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryExpressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryExpressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryExpressReq::MergeFrom(const FMarryExpressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryExpressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryExpressReq::CopyFrom(const FMarryExpressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryExpressReq::IsInitialized() const {

  return true;
}

void FMarryExpressReq::Swap(FMarryExpressReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryExpressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryExpressReq_descriptor_;
  metadata.reflection = FMarryExpressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryExpressRsp::kTemplateIdFieldNumber;
const int FMarryExpressRsp::kSendsFieldNumber;
const int FMarryExpressRsp::kRecvsFieldNumber;
const int FMarryExpressRsp::kLogsFieldNumber;
#endif  // !_MSC_VER

FMarryExpressRsp::FMarryExpressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryExpressRsp::InitAsDefaultInstance() {
}

FMarryExpressRsp::FMarryExpressRsp(const FMarryExpressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryExpressRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryExpressRsp::~FMarryExpressRsp() {
  SharedDtor();
}

void FMarryExpressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryExpressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryExpressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryExpressRsp_descriptor_;
}

const FMarryExpressRsp& FMarryExpressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryExpressRsp* FMarryExpressRsp::default_instance_ = NULL;

FMarryExpressRsp* FMarryExpressRsp::New() const {
  return new FMarryExpressRsp;
}

void FMarryExpressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  sends_.Clear();
  recvs_.Clear();
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryExpressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sends;
        break;
      }

      // repeated .proto_ff.FMarryExpressRankInfo sends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sends;
        if (input->ExpectTag(26)) goto parse_recvs;
        break;
      }

      // repeated .proto_ff.FMarryExpressRankInfo recvs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recvs;
        if (input->ExpectTag(34)) goto parse_logs;
        break;
      }

      // repeated .proto_ff.ExpressLog logs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryExpressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FMarryExpressRankInfo sends = 2;
  for (int i = 0; i < this->sends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sends(i), output);
  }

  // repeated .proto_ff.FMarryExpressRankInfo recvs = 3;
  for (int i = 0; i < this->recvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recvs(i), output);
  }

  // repeated .proto_ff.ExpressLog logs = 4;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryExpressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FMarryExpressRankInfo sends = 2;
  for (int i = 0; i < this->sends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sends(i), target);
  }

  // repeated .proto_ff.FMarryExpressRankInfo recvs = 3;
  for (int i = 0; i < this->recvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recvs(i), target);
  }

  // repeated .proto_ff.ExpressLog logs = 4;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryExpressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FMarryExpressRankInfo sends = 2;
  total_size += 1 * this->sends_size();
  for (int i = 0; i < this->sends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sends(i));
  }

  // repeated .proto_ff.FMarryExpressRankInfo recvs = 3;
  total_size += 1 * this->recvs_size();
  for (int i = 0; i < this->recvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recvs(i));
  }

  // repeated .proto_ff.ExpressLog logs = 4;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryExpressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryExpressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryExpressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryExpressRsp::MergeFrom(const FMarryExpressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  sends_.MergeFrom(from.sends_);
  recvs_.MergeFrom(from.recvs_);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryExpressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryExpressRsp::CopyFrom(const FMarryExpressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryExpressRsp::IsInitialized() const {

  return true;
}

void FMarryExpressRsp::Swap(FMarryExpressRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    sends_.Swap(&other->sends_);
    recvs_.Swap(&other->recvs_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryExpressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryExpressRsp_descriptor_;
  metadata.reflection = FMarryExpressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRoleReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

FMarryRoleReq::FMarryRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRoleReq::InitAsDefaultInstance() {
}

FMarryRoleReq::FMarryRoleReq(const FMarryRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRoleReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRoleReq::~FMarryRoleReq() {
  SharedDtor();
}

void FMarryRoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRoleReq_descriptor_;
}

const FMarryRoleReq& FMarryRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRoleReq* FMarryRoleReq::default_instance_ = NULL;

FMarryRoleReq* FMarryRoleReq::New() const {
  return new FMarryRoleReq;
}

void FMarryRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRoleReq::MergeFrom(const FMarryRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRoleReq::CopyFrom(const FMarryRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRoleReq::IsInitialized() const {

  return true;
}

void FMarryRoleReq::Swap(FMarryRoleReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRoleReq_descriptor_;
  metadata.reflection = FMarryRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRoleRsp::kTemplateIdFieldNumber;
const int FMarryRoleRsp::kTasksFieldNumber;
const int FMarryRoleRsp::kProcessIdsFieldNumber;
#endif  // !_MSC_VER

FMarryRoleRsp::FMarryRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRoleRsp::InitAsDefaultInstance() {
}

FMarryRoleRsp::FMarryRoleRsp(const FMarryRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRoleRsp::~FMarryRoleRsp() {
  SharedDtor();
}

void FMarryRoleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRoleRsp_descriptor_;
}

const FMarryRoleRsp& FMarryRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRoleRsp* FMarryRoleRsp::default_instance_ = NULL;

FMarryRoleRsp* FMarryRoleRsp::New() const {
  return new FMarryRoleRsp;
}

void FMarryRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  tasks_.Clear();
  process_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }

      // repeated .proto_ff.FMarryTask tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        if (input->ExpectTag(24)) goto parse_process_ids;
        break;
      }

      // repeated int32 process_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_process_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_process_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_process_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.FMarryTask tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  // repeated int32 process_ids = 3;
  for (int i = 0; i < this->process_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->process_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.FMarryTask tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasks(i), target);
  }

  // repeated int32 process_ids = 3;
  for (int i = 0; i < this->process_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->process_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.FMarryTask tasks = 2;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  // repeated int32 process_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->process_ids(i));
    }
    total_size += 1 * this->process_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRoleRsp::MergeFrom(const FMarryRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  process_ids_.MergeFrom(from.process_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRoleRsp::CopyFrom(const FMarryRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRoleRsp::IsInitialized() const {

  return true;
}

void FMarryRoleRsp::Swap(FMarryRoleRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    tasks_.Swap(&other->tasks_);
    process_ids_.Swap(&other->process_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRoleRsp_descriptor_;
  metadata.reflection = FMarryRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRoleRecvReq::kTemplateIdFieldNumber;
const int FMarryRoleRecvReq::kTypeFieldNumber;
const int FMarryRoleRecvReq::kIdFieldNumber;
#endif  // !_MSC_VER

FMarryRoleRecvReq::FMarryRoleRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRoleRecvReq::InitAsDefaultInstance() {
}

FMarryRoleRecvReq::FMarryRoleRecvReq(const FMarryRoleRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRoleRecvReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRoleRecvReq::~FMarryRoleRecvReq() {
  SharedDtor();
}

void FMarryRoleRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRoleRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRoleRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRoleRecvReq_descriptor_;
}

const FMarryRoleRecvReq& FMarryRoleRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRoleRecvReq* FMarryRoleRecvReq::default_instance_ = NULL;

FMarryRoleRecvReq* FMarryRoleRecvReq::New() const {
  return new FMarryRoleRecvReq;
}

void FMarryRoleRecvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRoleRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRoleRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRoleRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRoleRecvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRoleRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRoleRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRoleRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRoleRecvReq::MergeFrom(const FMarryRoleRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRoleRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRoleRecvReq::CopyFrom(const FMarryRoleRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRoleRecvReq::IsInitialized() const {

  return true;
}

void FMarryRoleRecvReq::Swap(FMarryRoleRecvReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRoleRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRoleRecvReq_descriptor_;
  metadata.reflection = FMarryRoleRecvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRoleRecvRsp::kRetFieldNumber;
const int FMarryRoleRecvRsp::kTemplateIdFieldNumber;
const int FMarryRoleRecvRsp::kTypeFieldNumber;
const int FMarryRoleRecvRsp::kIdFieldNumber;
#endif  // !_MSC_VER

FMarryRoleRecvRsp::FMarryRoleRecvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRoleRecvRsp::InitAsDefaultInstance() {
}

FMarryRoleRecvRsp::FMarryRoleRecvRsp(const FMarryRoleRecvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRoleRecvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  template_id_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRoleRecvRsp::~FMarryRoleRecvRsp() {
  SharedDtor();
}

void FMarryRoleRecvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRoleRecvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRoleRecvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRoleRecvRsp_descriptor_;
}

const FMarryRoleRecvRsp& FMarryRoleRecvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRoleRecvRsp* FMarryRoleRecvRsp::default_instance_ = NULL;

FMarryRoleRecvRsp* FMarryRoleRecvRsp::New() const {
  return new FMarryRoleRecvRsp;
}

void FMarryRoleRecvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    template_id_ = 0;
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRoleRecvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRoleRecvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRoleRecvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRoleRecvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRoleRecvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRoleRecvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRoleRecvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRoleRecvRsp::MergeFrom(const FMarryRoleRecvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRoleRecvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRoleRecvRsp::CopyFrom(const FMarryRoleRecvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRoleRecvRsp::IsInitialized() const {

  return true;
}

void FMarryRoleRecvRsp::Swap(FMarryRoleRecvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(template_id_, other->template_id_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRoleRecvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRoleRecvRsp_descriptor_;
  metadata.reflection = FMarryRoleRecvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRecord::kMarryIdFieldNumber;
const int FMarryRecord::kValFieldNumber;
const int FMarryRecord::kTimeFieldNumber;
#endif  // !_MSC_VER

FMarryRecord::FMarryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRecord::InitAsDefaultInstance() {
}

FMarryRecord::FMarryRecord(const FMarryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRecord::SharedCtor() {
  _cached_size_ = 0;
  marry_id_ = 0;
  val_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRecord::~FMarryRecord() {
  SharedDtor();
}

void FMarryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRecord_descriptor_;
}

const FMarryRecord& FMarryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryRecord* FMarryRecord::default_instance_ = NULL;

FMarryRecord* FMarryRecord::New() const {
  return new FMarryRecord;
}

void FMarryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marry_id_ = 0;
    val_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 marry_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 marry_id = 1;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->marry_id(), output);
  }

  // optional int32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 marry_id = 1;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->marry_id(), target);
  }

  // optional int32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 marry_id = 1;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

    // optional int32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRecord::MergeFrom(const FMarryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRecord::CopyFrom(const FMarryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRecord::IsInitialized() const {

  return true;
}

void FMarryRecord::Swap(FMarryRecord* other) {
  if (other != this) {
    std::swap(marry_id_, other->marry_id_);
    std::swap(val_, other->val_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRecord_descriptor_;
  metadata.reflection = FMarryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryExpress::kCidFieldNumber;
const int FMarryExpress::kTimeFieldNumber;
const int FMarryExpress::kValFieldNumber;
#endif  // !_MSC_VER

FMarryExpress::FMarryExpress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryExpress::InitAsDefaultInstance() {
}

FMarryExpress::FMarryExpress(const FMarryExpress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryExpress::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryExpress::~FMarryExpress() {
  SharedDtor();
}

void FMarryExpress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryExpress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryExpress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryExpress_descriptor_;
}

const FMarryExpress& FMarryExpress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryExpress* FMarryExpress::default_instance_ = NULL;

FMarryExpress* FMarryExpress::New() const {
  return new FMarryExpress;
}

void FMarryExpress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryExpress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // optional int32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryExpress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryExpress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryExpress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryExpress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryExpress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryExpress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryExpress::MergeFrom(const FMarryExpress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryExpress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryExpress::CopyFrom(const FMarryExpress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryExpress::IsInitialized() const {

  return true;
}

void FMarryExpress::Swap(FMarryExpress* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(time_, other->time_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryExpress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryExpress_descriptor_;
  metadata.reflection = FMarryExpress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryDBEntry::kTmpIdFieldNumber;
const int FMarryDBEntry::kGroupIdFieldNumber;
const int FMarryDBEntry::kRecordsFieldNumber;
const int FMarryDBEntry::kSendsFieldNumber;
const int FMarryDBEntry::kRecvsFieldNumber;
#endif  // !_MSC_VER

FMarryDBEntry::FMarryDBEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryDBEntry::InitAsDefaultInstance() {
}

FMarryDBEntry::FMarryDBEntry(const FMarryDBEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryDBEntry::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryDBEntry::~FMarryDBEntry() {
  SharedDtor();
}

void FMarryDBEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryDBEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryDBEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryDBEntry_descriptor_;
}

const FMarryDBEntry& FMarryDBEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryDBEntry* FMarryDBEntry::default_instance_ = NULL;

FMarryDBEntry* FMarryDBEntry::New() const {
  return new FMarryDBEntry;
}

void FMarryDBEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0;
    groupid_ = 0;
  }
  records_.Clear();
  sends_.Clear();
  recvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryDBEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tmpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupId;
        break;
      }

      // optional int32 groupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .proto_ff.FMarryRecord records = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectTag(34)) goto parse_sends;
        break;
      }

      // repeated .proto_ff.FMarryExpress sends = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sends;
        if (input->ExpectTag(42)) goto parse_recvs;
        break;
      }

      // repeated .proto_ff.FMarryExpress recvs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryDBEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tmpid(), output);
  }

  // optional int32 groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // repeated .proto_ff.FMarryRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  // repeated .proto_ff.FMarryExpress sends = 4;
  for (int i = 0; i < this->sends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sends(i), output);
  }

  // repeated .proto_ff.FMarryExpress recvs = 5;
  for (int i = 0; i < this->recvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->recvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryDBEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tmpid(), target);
  }

  // optional int32 groupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // repeated .proto_ff.FMarryRecord records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  // repeated .proto_ff.FMarryExpress sends = 4;
  for (int i = 0; i < this->sends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sends(i), target);
  }

  // repeated .proto_ff.FMarryExpress recvs = 5;
  for (int i = 0; i < this->recvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->recvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryDBEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tmpId = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmpid());
    }

    // optional int32 groupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  // repeated .proto_ff.FMarryRecord records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated .proto_ff.FMarryExpress sends = 4;
  total_size += 1 * this->sends_size();
  for (int i = 0; i < this->sends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sends(i));
  }

  // repeated .proto_ff.FMarryExpress recvs = 5;
  total_size += 1 * this->recvs_size();
  for (int i = 0; i < this->recvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryDBEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryDBEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryDBEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryDBEntry::MergeFrom(const FMarryDBEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  sends_.MergeFrom(from.sends_);
  recvs_.MergeFrom(from.recvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryDBEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryDBEntry::CopyFrom(const FMarryDBEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryDBEntry::IsInitialized() const {

  return true;
}

void FMarryDBEntry::Swap(FMarryDBEntry* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    std::swap(groupid_, other->groupid_);
    records_.Swap(&other->records_);
    sends_.Swap(&other->sends_);
    recvs_.Swap(&other->recvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryDBEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryDBEntry_descriptor_;
  metadata.reflection = FMarryDBEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryDB::kEntrysFieldNumber;
#endif  // !_MSC_VER

FMarryDB::FMarryDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryDB::InitAsDefaultInstance() {
}

FMarryDB::FMarryDB(const FMarryDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryDB::~FMarryDB() {
  SharedDtor();
}

void FMarryDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryDB_descriptor_;
}

const FMarryDB& FMarryDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

FMarryDB* FMarryDB::default_instance_ = NULL;

FMarryDB* FMarryDB::New() const {
  return new FMarryDB;
}

void FMarryDB::Clear() {
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FMarryDBEntry entrys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FMarryDBEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FMarryDBEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryDB::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FMarryDBEntry entrys = 1;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryDB::MergeFrom(const FMarryDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryDB::CopyFrom(const FMarryDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryDB::IsInitialized() const {

  return true;
}

void FMarryDB::Swap(FMarryDB* other) {
  if (other != this) {
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryDB_descriptor_;
  metadata.reflection = FMarryDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouGlobalDBInfo::kIdFieldNumber;
const int Fest_XiYouGlobalDBInfo::kStatusFieldNumber;
const int Fest_XiYouGlobalDBInfo::kStateFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouGlobalDBInfo::Fest_XiYouGlobalDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouGlobalDBInfo::InitAsDefaultInstance() {
}

Fest_XiYouGlobalDBInfo::Fest_XiYouGlobalDBInfo(const Fest_XiYouGlobalDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouGlobalDBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouGlobalDBInfo::~Fest_XiYouGlobalDBInfo() {
  SharedDtor();
}

void Fest_XiYouGlobalDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouGlobalDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouGlobalDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouGlobalDBInfo_descriptor_;
}

const Fest_XiYouGlobalDBInfo& Fest_XiYouGlobalDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouGlobalDBInfo* Fest_XiYouGlobalDBInfo::default_instance_ = NULL;

Fest_XiYouGlobalDBInfo* Fest_XiYouGlobalDBInfo::New() const {
  return new Fest_XiYouGlobalDBInfo;
}

void Fest_XiYouGlobalDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouGlobalDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouGlobalDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouGlobalDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouGlobalDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouGlobalDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouGlobalDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouGlobalDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouGlobalDBInfo::MergeFrom(const Fest_XiYouGlobalDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouGlobalDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouGlobalDBInfo::CopyFrom(const Fest_XiYouGlobalDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouGlobalDBInfo::IsInitialized() const {

  return true;
}

void Fest_XiYouGlobalDBInfo::Swap(Fest_XiYouGlobalDBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouGlobalDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouGlobalDBInfo_descriptor_;
  metadata.reflection = Fest_XiYouGlobalDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LFMarrySynScoreReq::kTmpIdFieldNumber;
const int C2LFMarrySynScoreReq::kMarryIdFieldNumber;
const int C2LFMarrySynScoreReq::kCidFieldNumber;
#endif  // !_MSC_VER

C2LFMarrySynScoreReq::C2LFMarrySynScoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LFMarrySynScoreReq::InitAsDefaultInstance() {
}

C2LFMarrySynScoreReq::C2LFMarrySynScoreReq(const C2LFMarrySynScoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LFMarrySynScoreReq::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0;
  marry_id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LFMarrySynScoreReq::~C2LFMarrySynScoreReq() {
  SharedDtor();
}

void C2LFMarrySynScoreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LFMarrySynScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LFMarrySynScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LFMarrySynScoreReq_descriptor_;
}

const C2LFMarrySynScoreReq& C2LFMarrySynScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

C2LFMarrySynScoreReq* C2LFMarrySynScoreReq::default_instance_ = NULL;

C2LFMarrySynScoreReq* C2LFMarrySynScoreReq::New() const {
  return new C2LFMarrySynScoreReq;
}

void C2LFMarrySynScoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0;
    marry_id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LFMarrySynScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tmpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marry_id;
        break;
      }

      // optional int32 marry_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LFMarrySynScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tmpid(), output);
  }

  // optional int32 marry_id = 2;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->marry_id(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LFMarrySynScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tmpid(), target);
  }

  // optional int32 marry_id = 2;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->marry_id(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LFMarrySynScoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tmpId = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmpid());
    }

    // optional int32 marry_id = 2;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LFMarrySynScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LFMarrySynScoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LFMarrySynScoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LFMarrySynScoreReq::MergeFrom(const C2LFMarrySynScoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LFMarrySynScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LFMarrySynScoreReq::CopyFrom(const C2LFMarrySynScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LFMarrySynScoreReq::IsInitialized() const {

  return true;
}

void C2LFMarrySynScoreReq::Swap(C2LFMarrySynScoreReq* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LFMarrySynScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LFMarrySynScoreReq_descriptor_;
  metadata.reflection = C2LFMarrySynScoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CFMarrySynScoreRsp::kTmpIdFieldNumber;
const int L2CFMarrySynScoreRsp::kMarryIdFieldNumber;
const int L2CFMarrySynScoreRsp::kCidFieldNumber;
const int L2CFMarrySynScoreRsp::kScoreFieldNumber;
#endif  // !_MSC_VER

L2CFMarrySynScoreRsp::L2CFMarrySynScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CFMarrySynScoreRsp::InitAsDefaultInstance() {
}

L2CFMarrySynScoreRsp::L2CFMarrySynScoreRsp(const L2CFMarrySynScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CFMarrySynScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0;
  marry_id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CFMarrySynScoreRsp::~L2CFMarrySynScoreRsp() {
  SharedDtor();
}

void L2CFMarrySynScoreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CFMarrySynScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CFMarrySynScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CFMarrySynScoreRsp_descriptor_;
}

const L2CFMarrySynScoreRsp& L2CFMarrySynScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

L2CFMarrySynScoreRsp* L2CFMarrySynScoreRsp::default_instance_ = NULL;

L2CFMarrySynScoreRsp* L2CFMarrySynScoreRsp::New() const {
  return new L2CFMarrySynScoreRsp;
}

void L2CFMarrySynScoreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0;
    marry_id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CFMarrySynScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tmpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marry_id;
        break;
      }

      // optional int32 marry_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CFMarrySynScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tmpid(), output);
  }

  // optional int32 marry_id = 2;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->marry_id(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CFMarrySynScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tmpid(), target);
  }

  // optional int32 marry_id = 2;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->marry_id(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CFMarrySynScoreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tmpId = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmpid());
    }

    // optional int32 marry_id = 2;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CFMarrySynScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CFMarrySynScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CFMarrySynScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CFMarrySynScoreRsp::MergeFrom(const L2CFMarrySynScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CFMarrySynScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CFMarrySynScoreRsp::CopyFrom(const L2CFMarrySynScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CFMarrySynScoreRsp::IsInitialized() const {

  return true;
}

void L2CFMarrySynScoreRsp::Swap(L2CFMarrySynScoreRsp* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(cid_, other->cid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CFMarrySynScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CFMarrySynScoreRsp_descriptor_;
  metadata.reflection = L2CFMarrySynScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouGlobalDBEntry::kTmpIdFieldNumber;
const int Fest_XiYouGlobalDBEntry::kInfoFieldNumber;
const int Fest_XiYouGlobalDBEntry::kStateFieldNumber;
const int Fest_XiYouGlobalDBEntry::kOpenFieldNumber;
const int Fest_XiYouGlobalDBEntry::kReadyIdFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouGlobalDBEntry::Fest_XiYouGlobalDBEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouGlobalDBEntry::InitAsDefaultInstance() {
}

Fest_XiYouGlobalDBEntry::Fest_XiYouGlobalDBEntry(const Fest_XiYouGlobalDBEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouGlobalDBEntry::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0;
  state_ = 0;
  open_ = false;
  readyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouGlobalDBEntry::~Fest_XiYouGlobalDBEntry() {
  SharedDtor();
}

void Fest_XiYouGlobalDBEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouGlobalDBEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouGlobalDBEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouGlobalDBEntry_descriptor_;
}

const Fest_XiYouGlobalDBEntry& Fest_XiYouGlobalDBEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouGlobalDBEntry* Fest_XiYouGlobalDBEntry::default_instance_ = NULL;

Fest_XiYouGlobalDBEntry* Fest_XiYouGlobalDBEntry::New() const {
  return new Fest_XiYouGlobalDBEntry;
}

void Fest_XiYouGlobalDBEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0;
    state_ = 0;
    open_ = false;
    readyid_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouGlobalDBEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tmpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.Fest_XiYouGlobalDBInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_readyId;
        break;
      }

      // optional int32 readyId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readyid_)));
          set_has_readyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouGlobalDBEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tmpid(), output);
  }

  // repeated .proto_ff.Fest_XiYouGlobalDBInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional bool open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  // optional int32 readyId = 5;
  if (has_readyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->readyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouGlobalDBEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tmpId = 1;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tmpid(), target);
  }

  // repeated .proto_ff.Fest_XiYouGlobalDBInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional bool open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  // optional int32 readyId = 5;
  if (has_readyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->readyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouGlobalDBEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tmpId = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmpid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional bool open = 4;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional int32 readyId = 5;
    if (has_readyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readyid());
    }

  }
  // repeated .proto_ff.Fest_XiYouGlobalDBInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouGlobalDBEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouGlobalDBEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouGlobalDBEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouGlobalDBEntry::MergeFrom(const Fest_XiYouGlobalDBEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_readyid()) {
      set_readyid(from.readyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouGlobalDBEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouGlobalDBEntry::CopyFrom(const Fest_XiYouGlobalDBEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouGlobalDBEntry::IsInitialized() const {

  return true;
}

void Fest_XiYouGlobalDBEntry::Swap(Fest_XiYouGlobalDBEntry* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    info_.Swap(&other->info_);
    std::swap(state_, other->state_);
    std::swap(open_, other->open_);
    std::swap(readyid_, other->readyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouGlobalDBEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouGlobalDBEntry_descriptor_;
  metadata.reflection = Fest_XiYouGlobalDBEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouGlobalDB::kEntrysFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouGlobalDB::Fest_XiYouGlobalDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouGlobalDB::InitAsDefaultInstance() {
}

Fest_XiYouGlobalDB::Fest_XiYouGlobalDB(const Fest_XiYouGlobalDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouGlobalDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouGlobalDB::~Fest_XiYouGlobalDB() {
  SharedDtor();
}

void Fest_XiYouGlobalDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouGlobalDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouGlobalDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouGlobalDB_descriptor_;
}

const Fest_XiYouGlobalDB& Fest_XiYouGlobalDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouGlobalDB* Fest_XiYouGlobalDB::default_instance_ = NULL;

Fest_XiYouGlobalDB* Fest_XiYouGlobalDB::New() const {
  return new Fest_XiYouGlobalDB;
}

void Fest_XiYouGlobalDB::Clear() {
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouGlobalDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Fest_XiYouGlobalDBEntry entrys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouGlobalDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Fest_XiYouGlobalDBEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouGlobalDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Fest_XiYouGlobalDBEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouGlobalDB::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Fest_XiYouGlobalDBEntry entrys = 1;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouGlobalDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouGlobalDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouGlobalDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouGlobalDB::MergeFrom(const Fest_XiYouGlobalDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouGlobalDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouGlobalDB::CopyFrom(const Fest_XiYouGlobalDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouGlobalDB::IsInitialized() const {

  return true;
}

void Fest_XiYouGlobalDB::Swap(Fest_XiYouGlobalDB* other) {
  if (other != this) {
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouGlobalDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouGlobalDB_descriptor_;
  metadata.reflection = Fest_XiYouGlobalDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouSyncNotify::kTemplateIdFieldNumber;
const int Fest_XiYouSyncNotify::kCurStateIdFieldNumber;
const int Fest_XiYouSyncNotify::kCurStateStatusFieldNumber;
const int Fest_XiYouSyncNotify::kCurStateTimeFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouSyncNotify::Fest_XiYouSyncNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouSyncNotify::InitAsDefaultInstance() {
}

Fest_XiYouSyncNotify::Fest_XiYouSyncNotify(const Fest_XiYouSyncNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouSyncNotify::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  cur_state_id_ = 0;
  cur_state_status_ = 0;
  cur_state_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouSyncNotify::~Fest_XiYouSyncNotify() {
  SharedDtor();
}

void Fest_XiYouSyncNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouSyncNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouSyncNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouSyncNotify_descriptor_;
}

const Fest_XiYouSyncNotify& Fest_XiYouSyncNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouSyncNotify* Fest_XiYouSyncNotify::default_instance_ = NULL;

Fest_XiYouSyncNotify* Fest_XiYouSyncNotify::New() const {
  return new Fest_XiYouSyncNotify;
}

void Fest_XiYouSyncNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    cur_state_id_ = 0;
    cur_state_status_ = 0;
    cur_state_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouSyncNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_state_id;
        break;
      }

      // optional int32 cur_state_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_id_)));
          set_has_cur_state_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_state_status;
        break;
      }

      // optional int32 cur_state_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_status_)));
          set_has_cur_state_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_state_time;
        break;
      }

      // optional int32 cur_state_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_time_)));
          set_has_cur_state_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouSyncNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 cur_state_id = 2;
  if (has_cur_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_state_id(), output);
  }

  // optional int32 cur_state_status = 3;
  if (has_cur_state_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_state_status(), output);
  }

  // optional int32 cur_state_time = 4;
  if (has_cur_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_state_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouSyncNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 cur_state_id = 2;
  if (has_cur_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_state_id(), target);
  }

  // optional int32 cur_state_status = 3;
  if (has_cur_state_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_state_status(), target);
  }

  // optional int32 cur_state_time = 4;
  if (has_cur_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_state_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouSyncNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 cur_state_id = 2;
    if (has_cur_state_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state_id());
    }

    // optional int32 cur_state_status = 3;
    if (has_cur_state_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state_status());
    }

    // optional int32 cur_state_time = 4;
    if (has_cur_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouSyncNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouSyncNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouSyncNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouSyncNotify::MergeFrom(const Fest_XiYouSyncNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_cur_state_id()) {
      set_cur_state_id(from.cur_state_id());
    }
    if (from.has_cur_state_status()) {
      set_cur_state_status(from.cur_state_status());
    }
    if (from.has_cur_state_time()) {
      set_cur_state_time(from.cur_state_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouSyncNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouSyncNotify::CopyFrom(const Fest_XiYouSyncNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouSyncNotify::IsInitialized() const {

  return true;
}

void Fest_XiYouSyncNotify::Swap(Fest_XiYouSyncNotify* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(cur_state_id_, other->cur_state_id_);
    std::swap(cur_state_status_, other->cur_state_status_);
    std::swap(cur_state_time_, other->cur_state_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouSyncNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouSyncNotify_descriptor_;
  metadata.reflection = Fest_XiYouSyncNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouSyncLogic::kCurStateFieldNumber;
const int Fest_XiYouSyncLogic::kZidFieldNumber;
const int Fest_XiYouSyncLogic::kLogicIdFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouSyncLogic::Fest_XiYouSyncLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouSyncLogic::InitAsDefaultInstance() {
}

Fest_XiYouSyncLogic::Fest_XiYouSyncLogic(const Fest_XiYouSyncLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouSyncLogic::SharedCtor() {
  _cached_size_ = 0;
  cur_state_ = 0;
  zid_ = 0;
  logic_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouSyncLogic::~Fest_XiYouSyncLogic() {
  SharedDtor();
}

void Fest_XiYouSyncLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouSyncLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouSyncLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouSyncLogic_descriptor_;
}

const Fest_XiYouSyncLogic& Fest_XiYouSyncLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouSyncLogic* Fest_XiYouSyncLogic::default_instance_ = NULL;

Fest_XiYouSyncLogic* Fest_XiYouSyncLogic::New() const {
  return new Fest_XiYouSyncLogic;
}

void Fest_XiYouSyncLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_state_ = 0;
    zid_ = 0;
    logic_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouSyncLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logic_id;
        break;
      }

      // optional int32 logic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouSyncLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_state = 1;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_state(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  // optional int32 logic_id = 3;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logic_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouSyncLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_state = 1;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_state(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  // optional int32 logic_id = 3;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logic_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouSyncLogic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_state = 1;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional int32 logic_id = 3;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logic_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouSyncLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouSyncLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouSyncLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouSyncLogic::MergeFrom(const Fest_XiYouSyncLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouSyncLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouSyncLogic::CopyFrom(const Fest_XiYouSyncLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouSyncLogic::IsInitialized() const {

  return true;
}

void Fest_XiYouSyncLogic::Swap(Fest_XiYouSyncLogic* other) {
  if (other != this) {
    std::swap(cur_state_, other->cur_state_);
    std::swap(zid_, other->zid_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouSyncLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouSyncLogic_descriptor_;
  metadata.reflection = Fest_XiYouSyncLogic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouSyncFinish::kGameIdFieldNumber;
const int Fest_XiYouSyncFinish::kReadyIdFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouSyncFinish::Fest_XiYouSyncFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouSyncFinish::InitAsDefaultInstance() {
}

Fest_XiYouSyncFinish::Fest_XiYouSyncFinish(const Fest_XiYouSyncFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouSyncFinish::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0;
  ready_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouSyncFinish::~Fest_XiYouSyncFinish() {
  SharedDtor();
}

void Fest_XiYouSyncFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouSyncFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouSyncFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouSyncFinish_descriptor_;
}

const Fest_XiYouSyncFinish& Fest_XiYouSyncFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouSyncFinish* Fest_XiYouSyncFinish::default_instance_ = NULL;

Fest_XiYouSyncFinish* Fest_XiYouSyncFinish::New() const {
  return new Fest_XiYouSyncFinish;
}

void Fest_XiYouSyncFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0;
    ready_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouSyncFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready_id;
        break;
      }

      // optional int32 ready_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_id_)));
          set_has_ready_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouSyncFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  // optional int32 ready_id = 2;
  if (has_ready_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ready_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouSyncFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_id(), target);
  }

  // optional int32 ready_id = 2;
  if (has_ready_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ready_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouSyncFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 ready_id = 2;
    if (has_ready_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouSyncFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouSyncFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouSyncFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouSyncFinish::MergeFrom(const Fest_XiYouSyncFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_ready_id()) {
      set_ready_id(from.ready_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouSyncFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouSyncFinish::CopyFrom(const Fest_XiYouSyncFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouSyncFinish::IsInitialized() const {

  return true;
}

void Fest_XiYouSyncFinish::Swap(Fest_XiYouSyncFinish* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(ready_id_, other->ready_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouSyncFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouSyncFinish_descriptor_;
  metadata.reflection = Fest_XiYouSyncFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_XiYouSyncForceClose::kReadyIdFieldNumber;
const int Fest_XiYouSyncForceClose::kCurStateFieldNumber;
#endif  // !_MSC_VER

Fest_XiYouSyncForceClose::Fest_XiYouSyncForceClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_XiYouSyncForceClose::InitAsDefaultInstance() {
}

Fest_XiYouSyncForceClose::Fest_XiYouSyncForceClose(const Fest_XiYouSyncForceClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_XiYouSyncForceClose::SharedCtor() {
  _cached_size_ = 0;
  ready_id_ = 0;
  cur_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_XiYouSyncForceClose::~Fest_XiYouSyncForceClose() {
  SharedDtor();
}

void Fest_XiYouSyncForceClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_XiYouSyncForceClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_XiYouSyncForceClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_XiYouSyncForceClose_descriptor_;
}

const Fest_XiYouSyncForceClose& Fest_XiYouSyncForceClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_XiYouSyncForceClose* Fest_XiYouSyncForceClose::default_instance_ = NULL;

Fest_XiYouSyncForceClose* Fest_XiYouSyncForceClose::New() const {
  return new Fest_XiYouSyncForceClose;
}

void Fest_XiYouSyncForceClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ready_id_ = 0;
    cur_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_XiYouSyncForceClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ready_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_id_)));
          set_has_ready_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_state;
        break;
      }

      // optional int32 cur_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_XiYouSyncForceClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ready_id = 1;
  if (has_ready_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ready_id(), output);
  }

  // optional int32 cur_state = 2;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_XiYouSyncForceClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ready_id = 1;
  if (has_ready_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ready_id(), target);
  }

  // optional int32 cur_state = 2;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_XiYouSyncForceClose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ready_id = 1;
    if (has_ready_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready_id());
    }

    // optional int32 cur_state = 2;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_XiYouSyncForceClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_XiYouSyncForceClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_XiYouSyncForceClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_XiYouSyncForceClose::MergeFrom(const Fest_XiYouSyncForceClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready_id()) {
      set_ready_id(from.ready_id());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_XiYouSyncForceClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_XiYouSyncForceClose::CopyFrom(const Fest_XiYouSyncForceClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_XiYouSyncForceClose::IsInitialized() const {

  return true;
}

void Fest_XiYouSyncForceClose::Swap(Fest_XiYouSyncForceClose* other) {
  if (other != this) {
    std::swap(ready_id_, other->ready_id_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_XiYouSyncForceClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_XiYouSyncForceClose_descriptor_;
  metadata.reflection = Fest_XiYouSyncForceClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DayTotalRechargeFetchReq::kTemplateIdFieldNumber;
const int Fest_DayTotalRechargeFetchReq::kIdFieldNumber;
#endif  // !_MSC_VER

Fest_DayTotalRechargeFetchReq::Fest_DayTotalRechargeFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DayTotalRechargeFetchReq::InitAsDefaultInstance() {
}

Fest_DayTotalRechargeFetchReq::Fest_DayTotalRechargeFetchReq(const Fest_DayTotalRechargeFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DayTotalRechargeFetchReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DayTotalRechargeFetchReq::~Fest_DayTotalRechargeFetchReq() {
  SharedDtor();
}

void Fest_DayTotalRechargeFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DayTotalRechargeFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DayTotalRechargeFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DayTotalRechargeFetchReq_descriptor_;
}

const Fest_DayTotalRechargeFetchReq& Fest_DayTotalRechargeFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DayTotalRechargeFetchReq* Fest_DayTotalRechargeFetchReq::default_instance_ = NULL;

Fest_DayTotalRechargeFetchReq* Fest_DayTotalRechargeFetchReq::New() const {
  return new Fest_DayTotalRechargeFetchReq;
}

void Fest_DayTotalRechargeFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DayTotalRechargeFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DayTotalRechargeFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DayTotalRechargeFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DayTotalRechargeFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DayTotalRechargeFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DayTotalRechargeFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DayTotalRechargeFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DayTotalRechargeFetchReq::MergeFrom(const Fest_DayTotalRechargeFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DayTotalRechargeFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DayTotalRechargeFetchReq::CopyFrom(const Fest_DayTotalRechargeFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DayTotalRechargeFetchReq::IsInitialized() const {

  return true;
}

void Fest_DayTotalRechargeFetchReq::Swap(Fest_DayTotalRechargeFetchReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DayTotalRechargeFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DayTotalRechargeFetchReq_descriptor_;
  metadata.reflection = Fest_DayTotalRechargeFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DayTotalRechargeFetchRsp::kTemplateIdFieldNumber;
const int Fest_DayTotalRechargeFetchRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Fest_DayTotalRechargeFetchRsp::Fest_DayTotalRechargeFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DayTotalRechargeFetchRsp::InitAsDefaultInstance() {
}

Fest_DayTotalRechargeFetchRsp::Fest_DayTotalRechargeFetchRsp(const Fest_DayTotalRechargeFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DayTotalRechargeFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DayTotalRechargeFetchRsp::~Fest_DayTotalRechargeFetchRsp() {
  SharedDtor();
}

void Fest_DayTotalRechargeFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DayTotalRechargeFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DayTotalRechargeFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DayTotalRechargeFetchRsp_descriptor_;
}

const Fest_DayTotalRechargeFetchRsp& Fest_DayTotalRechargeFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DayTotalRechargeFetchRsp* Fest_DayTotalRechargeFetchRsp::default_instance_ = NULL;

Fest_DayTotalRechargeFetchRsp* Fest_DayTotalRechargeFetchRsp::New() const {
  return new Fest_DayTotalRechargeFetchRsp;
}

void Fest_DayTotalRechargeFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DayTotalRechargeFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DayTotalRechargeFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DayTotalRechargeFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DayTotalRechargeFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DayTotalRechargeFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DayTotalRechargeFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DayTotalRechargeFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DayTotalRechargeFetchRsp::MergeFrom(const Fest_DayTotalRechargeFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DayTotalRechargeFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DayTotalRechargeFetchRsp::CopyFrom(const Fest_DayTotalRechargeFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DayTotalRechargeFetchRsp::IsInitialized() const {

  return true;
}

void Fest_DayTotalRechargeFetchRsp::Swap(Fest_DayTotalRechargeFetchRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DayTotalRechargeFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DayTotalRechargeFetchRsp_descriptor_;
  metadata.reflection = Fest_DayTotalRechargeFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_DayTotalRechargeNotify::kTemplateIdFieldNumber;
const int Fest_DayTotalRechargeNotify::kRechargeFieldNumber;
const int Fest_DayTotalRechargeNotify::kFetchLstFieldNumber;
#endif  // !_MSC_VER

Fest_DayTotalRechargeNotify::Fest_DayTotalRechargeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_DayTotalRechargeNotify::InitAsDefaultInstance() {
}

Fest_DayTotalRechargeNotify::Fest_DayTotalRechargeNotify(const Fest_DayTotalRechargeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_DayTotalRechargeNotify::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_DayTotalRechargeNotify::~Fest_DayTotalRechargeNotify() {
  SharedDtor();
}

void Fest_DayTotalRechargeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_DayTotalRechargeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_DayTotalRechargeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_DayTotalRechargeNotify_descriptor_;
}

const Fest_DayTotalRechargeNotify& Fest_DayTotalRechargeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_DayTotalRechargeNotify* Fest_DayTotalRechargeNotify::default_instance_ = NULL;

Fest_DayTotalRechargeNotify* Fest_DayTotalRechargeNotify::New() const {
  return new Fest_DayTotalRechargeNotify;
}

void Fest_DayTotalRechargeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    recharge_ = 0u;
  }
  fetch_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_DayTotalRechargeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch_lst;
        break;
      }

      // repeated int32 fetch_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_fetch_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_DayTotalRechargeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recharge(), output);
  }

  // repeated int32 fetch_lst = 3;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->fetch_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_DayTotalRechargeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recharge(), target);
  }

  // repeated int32 fetch_lst = 3;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->fetch_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_DayTotalRechargeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

  }
  // repeated int32 fetch_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch_lst(i));
    }
    total_size += 1 * this->fetch_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_DayTotalRechargeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_DayTotalRechargeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_DayTotalRechargeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_DayTotalRechargeNotify::MergeFrom(const Fest_DayTotalRechargeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_lst_.MergeFrom(from.fetch_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_DayTotalRechargeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_DayTotalRechargeNotify::CopyFrom(const Fest_DayTotalRechargeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_DayTotalRechargeNotify::IsInitialized() const {

  return true;
}

void Fest_DayTotalRechargeNotify::Swap(Fest_DayTotalRechargeNotify* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(recharge_, other->recharge_);
    fetch_lst_.Swap(&other->fetch_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_DayTotalRechargeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_DayTotalRechargeNotify_descriptor_;
  metadata.reflection = Fest_DayTotalRechargeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_LoginRewardFetchReq::kTemplateIdFieldNumber;
const int Fest_LoginRewardFetchReq::kDayFieldNumber;
#endif  // !_MSC_VER

Fest_LoginRewardFetchReq::Fest_LoginRewardFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_LoginRewardFetchReq::InitAsDefaultInstance() {
}

Fest_LoginRewardFetchReq::Fest_LoginRewardFetchReq(const Fest_LoginRewardFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_LoginRewardFetchReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_LoginRewardFetchReq::~Fest_LoginRewardFetchReq() {
  SharedDtor();
}

void Fest_LoginRewardFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_LoginRewardFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_LoginRewardFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_LoginRewardFetchReq_descriptor_;
}

const Fest_LoginRewardFetchReq& Fest_LoginRewardFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_LoginRewardFetchReq* Fest_LoginRewardFetchReq::default_instance_ = NULL;

Fest_LoginRewardFetchReq* Fest_LoginRewardFetchReq::New() const {
  return new Fest_LoginRewardFetchReq;
}

void Fest_LoginRewardFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_LoginRewardFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional int32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_LoginRewardFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_LoginRewardFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_LoginRewardFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_LoginRewardFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_LoginRewardFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_LoginRewardFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_LoginRewardFetchReq::MergeFrom(const Fest_LoginRewardFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_LoginRewardFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_LoginRewardFetchReq::CopyFrom(const Fest_LoginRewardFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_LoginRewardFetchReq::IsInitialized() const {

  return true;
}

void Fest_LoginRewardFetchReq::Swap(Fest_LoginRewardFetchReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_LoginRewardFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_LoginRewardFetchReq_descriptor_;
  metadata.reflection = Fest_LoginRewardFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_LoginRewardFetchRsp::kTemplateIdFieldNumber;
const int Fest_LoginRewardFetchRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Fest_LoginRewardFetchRsp::Fest_LoginRewardFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_LoginRewardFetchRsp::InitAsDefaultInstance() {
}

Fest_LoginRewardFetchRsp::Fest_LoginRewardFetchRsp(const Fest_LoginRewardFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_LoginRewardFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_LoginRewardFetchRsp::~Fest_LoginRewardFetchRsp() {
  SharedDtor();
}

void Fest_LoginRewardFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_LoginRewardFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_LoginRewardFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_LoginRewardFetchRsp_descriptor_;
}

const Fest_LoginRewardFetchRsp& Fest_LoginRewardFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_LoginRewardFetchRsp* Fest_LoginRewardFetchRsp::default_instance_ = NULL;

Fest_LoginRewardFetchRsp* Fest_LoginRewardFetchRsp::New() const {
  return new Fest_LoginRewardFetchRsp;
}

void Fest_LoginRewardFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_LoginRewardFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_LoginRewardFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_LoginRewardFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_LoginRewardFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_LoginRewardFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_LoginRewardFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_LoginRewardFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_LoginRewardFetchRsp::MergeFrom(const Fest_LoginRewardFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_LoginRewardFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_LoginRewardFetchRsp::CopyFrom(const Fest_LoginRewardFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_LoginRewardFetchRsp::IsInitialized() const {

  return true;
}

void Fest_LoginRewardFetchRsp::Swap(Fest_LoginRewardFetchRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_LoginRewardFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_LoginRewardFetchRsp_descriptor_;
  metadata.reflection = Fest_LoginRewardFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_LoginRewardNotify::kTemplateIdFieldNumber;
const int Fest_LoginRewardNotify::kFetchFieldNumber;
#endif  // !_MSC_VER

Fest_LoginRewardNotify::Fest_LoginRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_LoginRewardNotify::InitAsDefaultInstance() {
}

Fest_LoginRewardNotify::Fest_LoginRewardNotify(const Fest_LoginRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_LoginRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_LoginRewardNotify::~Fest_LoginRewardNotify() {
  SharedDtor();
}

void Fest_LoginRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_LoginRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_LoginRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_LoginRewardNotify_descriptor_;
}

const Fest_LoginRewardNotify& Fest_LoginRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_LoginRewardNotify* Fest_LoginRewardNotify::default_instance_ = NULL;

Fest_LoginRewardNotify* Fest_LoginRewardNotify::New() const {
  return new Fest_LoginRewardNotify;
}

void Fest_LoginRewardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_LoginRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fetch;
        break;
      }

      // repeated .proto_ff.ComPair fetch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_LoginRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.ComPair fetch = 2;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_LoginRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.ComPair fetch = 2;
  for (int i = 0; i < this->fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_LoginRewardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.ComPair fetch = 2;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_LoginRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_LoginRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_LoginRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_LoginRewardNotify::MergeFrom(const Fest_LoginRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_.MergeFrom(from.fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_LoginRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_LoginRewardNotify::CopyFrom(const Fest_LoginRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_LoginRewardNotify::IsInitialized() const {

  return true;
}

void Fest_LoginRewardNotify::Swap(Fest_LoginRewardNotify* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    fetch_.Swap(&other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_LoginRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_LoginRewardNotify_descriptor_;
  metadata.reflection = Fest_LoginRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_TotalRechargeFetchReq::kTemplateIdFieldNumber;
const int Fest_TotalRechargeFetchReq::kIdFieldNumber;
#endif  // !_MSC_VER

Fest_TotalRechargeFetchReq::Fest_TotalRechargeFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_TotalRechargeFetchReq::InitAsDefaultInstance() {
}

Fest_TotalRechargeFetchReq::Fest_TotalRechargeFetchReq(const Fest_TotalRechargeFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_TotalRechargeFetchReq::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_TotalRechargeFetchReq::~Fest_TotalRechargeFetchReq() {
  SharedDtor();
}

void Fest_TotalRechargeFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_TotalRechargeFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_TotalRechargeFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_TotalRechargeFetchReq_descriptor_;
}

const Fest_TotalRechargeFetchReq& Fest_TotalRechargeFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_TotalRechargeFetchReq* Fest_TotalRechargeFetchReq::default_instance_ = NULL;

Fest_TotalRechargeFetchReq* Fest_TotalRechargeFetchReq::New() const {
  return new Fest_TotalRechargeFetchReq;
}

void Fest_TotalRechargeFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_TotalRechargeFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_TotalRechargeFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_TotalRechargeFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_TotalRechargeFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_TotalRechargeFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_TotalRechargeFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_TotalRechargeFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_TotalRechargeFetchReq::MergeFrom(const Fest_TotalRechargeFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_TotalRechargeFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_TotalRechargeFetchReq::CopyFrom(const Fest_TotalRechargeFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_TotalRechargeFetchReq::IsInitialized() const {

  return true;
}

void Fest_TotalRechargeFetchReq::Swap(Fest_TotalRechargeFetchReq* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_TotalRechargeFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_TotalRechargeFetchReq_descriptor_;
  metadata.reflection = Fest_TotalRechargeFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_TotalRechargeFetchRsp::kTemplateIdFieldNumber;
const int Fest_TotalRechargeFetchRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Fest_TotalRechargeFetchRsp::Fest_TotalRechargeFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_TotalRechargeFetchRsp::InitAsDefaultInstance() {
}

Fest_TotalRechargeFetchRsp::Fest_TotalRechargeFetchRsp(const Fest_TotalRechargeFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_TotalRechargeFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_TotalRechargeFetchRsp::~Fest_TotalRechargeFetchRsp() {
  SharedDtor();
}

void Fest_TotalRechargeFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_TotalRechargeFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_TotalRechargeFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_TotalRechargeFetchRsp_descriptor_;
}

const Fest_TotalRechargeFetchRsp& Fest_TotalRechargeFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_TotalRechargeFetchRsp* Fest_TotalRechargeFetchRsp::default_instance_ = NULL;

Fest_TotalRechargeFetchRsp* Fest_TotalRechargeFetchRsp::New() const {
  return new Fest_TotalRechargeFetchRsp;
}

void Fest_TotalRechargeFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_TotalRechargeFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_TotalRechargeFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_TotalRechargeFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_TotalRechargeFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_TotalRechargeFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_TotalRechargeFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_TotalRechargeFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_TotalRechargeFetchRsp::MergeFrom(const Fest_TotalRechargeFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_TotalRechargeFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_TotalRechargeFetchRsp::CopyFrom(const Fest_TotalRechargeFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_TotalRechargeFetchRsp::IsInitialized() const {

  return true;
}

void Fest_TotalRechargeFetchRsp::Swap(Fest_TotalRechargeFetchRsp* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_TotalRechargeFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_TotalRechargeFetchRsp_descriptor_;
  metadata.reflection = Fest_TotalRechargeFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fest_TotalRechargeNotify::kTemplateIdFieldNumber;
const int Fest_TotalRechargeNotify::kFetchLstFieldNumber;
const int Fest_TotalRechargeNotify::kTotalRechargeFieldNumber;
#endif  // !_MSC_VER

Fest_TotalRechargeNotify::Fest_TotalRechargeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fest_TotalRechargeNotify::InitAsDefaultInstance() {
}

Fest_TotalRechargeNotify::Fest_TotalRechargeNotify(const Fest_TotalRechargeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fest_TotalRechargeNotify::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  total_recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fest_TotalRechargeNotify::~Fest_TotalRechargeNotify() {
  SharedDtor();
}

void Fest_TotalRechargeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fest_TotalRechargeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fest_TotalRechargeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fest_TotalRechargeNotify_descriptor_;
}

const Fest_TotalRechargeNotify& Fest_TotalRechargeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fest_2eproto();
  return *default_instance_;
}

Fest_TotalRechargeNotify* Fest_TotalRechargeNotify::default_instance_ = NULL;

Fest_TotalRechargeNotify* Fest_TotalRechargeNotify::New() const {
  return new Fest_TotalRechargeNotify;
}

void Fest_TotalRechargeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    total_recharge_ = 0u;
  }
  fetch_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fest_TotalRechargeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetch_lst;
        break;
      }

      // repeated int32 fetch_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fetch_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetch_lst;
        if (input->ExpectTag(24)) goto parse_total_recharge;
        break;
      }

      // optional uint32 total_recharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fest_TotalRechargeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated int32 fetch_lst = 2;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fetch_lst(i), output);
  }

  // optional uint32 total_recharge = 3;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fest_TotalRechargeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated int32 fetch_lst = 2;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fetch_lst(i), target);
  }

  // optional uint32 total_recharge = 3;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fest_TotalRechargeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint32 total_recharge = 3;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

  }
  // repeated int32 fetch_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch_lst(i));
    }
    total_size += 1 * this->fetch_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fest_TotalRechargeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fest_TotalRechargeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fest_TotalRechargeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fest_TotalRechargeNotify::MergeFrom(const Fest_TotalRechargeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_lst_.MergeFrom(from.fetch_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fest_TotalRechargeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fest_TotalRechargeNotify::CopyFrom(const Fest_TotalRechargeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fest_TotalRechargeNotify::IsInitialized() const {

  return true;
}

void Fest_TotalRechargeNotify::Swap(Fest_TotalRechargeNotify* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    fetch_lst_.Swap(&other->fetch_lst_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fest_TotalRechargeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fest_TotalRechargeNotify_descriptor_;
  metadata.reflection = Fest_TotalRechargeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
