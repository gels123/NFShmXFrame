// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Market.proto

#ifndef PROTOBUF_E_5fMarket_2eproto__INCLUDED
#define PROTOBUF_E_5fMarket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fMarket_2eproto();
void protobuf_AssignDesc_E_5fMarket_2eproto();
void protobuf_ShutdownFile_E_5fMarket_2eproto();

class E_MarketMarket;
class Sheet_MarketMarket;
class E_MarketBig;
class Sheet_MarketBig;
class E_MarketSmall;
class Sheet_MarketSmall;
class E_MarketConstant;
class Sheet_MarketConstant;

// ===================================================================

class E_MarketMarket : public ::google::protobuf::Message {
 public:
  E_MarketMarket();
  virtual ~E_MarketMarket();

  E_MarketMarket(const E_MarketMarket& from);

  inline E_MarketMarket& operator=(const E_MarketMarket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarketMarket& default_instance();

  void Swap(E_MarketMarket* other);

  // implements Message ----------------------------------------------

  E_MarketMarket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarketMarket& from);
  void MergeFrom(const E_MarketMarket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_itemid = 1;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemidFieldNumber = 1;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_order = 3;
  inline bool has_m_order() const;
  inline void clear_m_order();
  static const int kMOrderFieldNumber = 3;
  inline ::google::protobuf::int32 m_order() const;
  inline void set_m_order(::google::protobuf::int32 value);

  // optional int32 m_readytime = 4;
  inline bool has_m_readytime() const;
  inline void clear_m_readytime();
  static const int kMReadytimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_readytime() const;
  inline void set_m_readytime(::google::protobuf::int32 value);

  // optional int32 m_sjtime = 5;
  inline bool has_m_sjtime() const;
  inline void clear_m_sjtime();
  static const int kMSjtimeFieldNumber = 5;
  inline ::google::protobuf::int32 m_sjtime() const;
  inline void set_m_sjtime(::google::protobuf::int32 value);

  // optional int32 m_endtime = 6;
  inline bool has_m_endtime() const;
  inline void clear_m_endtime();
  static const int kMEndtimeFieldNumber = 6;
  inline ::google::protobuf::int32 m_endtime() const;
  inline void set_m_endtime(::google::protobuf::int32 value);

  // optional int32 m_pricetype = 7;
  inline bool has_m_pricetype() const;
  inline void clear_m_pricetype();
  static const int kMPricetypeFieldNumber = 7;
  inline ::google::protobuf::int32 m_pricetype() const;
  inline void set_m_pricetype(::google::protobuf::int32 value);

  // optional int32 m_vietype = 8;
  inline bool has_m_vietype() const;
  inline void clear_m_vietype();
  static const int kMVietypeFieldNumber = 8;
  inline ::google::protobuf::int32 m_vietype() const;
  inline void set_m_vietype(::google::protobuf::int32 value);

  // optional int32 m_startprice = 9;
  inline bool has_m_startprice() const;
  inline void clear_m_startprice();
  static const int kMStartpriceFieldNumber = 9;
  inline ::google::protobuf::int32 m_startprice() const;
  inline void set_m_startprice(::google::protobuf::int32 value);

  // optional int32 m_onceprice = 10;
  inline bool has_m_onceprice() const;
  inline void clear_m_onceprice();
  static const int kMOncepriceFieldNumber = 10;
  inline ::google::protobuf::int32 m_onceprice() const;
  inline void set_m_onceprice(::google::protobuf::int32 value);

  // optional int32 m_directprice = 11;
  inline bool has_m_directprice() const;
  inline void clear_m_directprice();
  static const int kMDirectpriceFieldNumber = 11;
  inline ::google::protobuf::int32 m_directprice() const;
  inline void set_m_directprice(::google::protobuf::int32 value);

  // optional int32 m_gztype = 12;
  inline bool has_m_gztype() const;
  inline void clear_m_gztype();
  static const int kMGztypeFieldNumber = 12;
  inline ::google::protobuf::int32 m_gztype() const;
  inline void set_m_gztype(::google::protobuf::int32 value);

  // optional string m_gztutype = 13;
  inline bool has_m_gztutype() const;
  inline void clear_m_gztutype();
  static const int kMGztutypeFieldNumber = 13;
  inline const ::std::string& m_gztutype() const;
  inline void set_m_gztutype(const ::std::string& value);
  inline void set_m_gztutype(const char* value);
  inline void set_m_gztutype(const char* value, size_t size);
  inline ::std::string* mutable_m_gztutype();
  inline ::std::string* release_m_gztutype();
  inline void set_allocated_m_gztutype(::std::string* m_gztutype);

  // optional int32 m_recoverytype = 14;
  inline bool has_m_recoverytype() const;
  inline void clear_m_recoverytype();
  static const int kMRecoverytypeFieldNumber = 14;
  inline ::google::protobuf::int32 m_recoverytype() const;
  inline void set_m_recoverytype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarketMarket)
 private:
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_order();
  inline void clear_has_m_order();
  inline void set_has_m_readytime();
  inline void clear_has_m_readytime();
  inline void set_has_m_sjtime();
  inline void clear_has_m_sjtime();
  inline void set_has_m_endtime();
  inline void clear_has_m_endtime();
  inline void set_has_m_pricetype();
  inline void clear_has_m_pricetype();
  inline void set_has_m_vietype();
  inline void clear_has_m_vietype();
  inline void set_has_m_startprice();
  inline void clear_has_m_startprice();
  inline void set_has_m_onceprice();
  inline void clear_has_m_onceprice();
  inline void set_has_m_directprice();
  inline void clear_has_m_directprice();
  inline void set_has_m_gztype();
  inline void clear_has_m_gztype();
  inline void set_has_m_gztutype();
  inline void clear_has_m_gztutype();
  inline void set_has_m_recoverytype();
  inline void clear_has_m_recoverytype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_order_;
  ::google::protobuf::int32 m_readytime_;
  ::google::protobuf::int32 m_sjtime_;
  ::google::protobuf::int32 m_endtime_;
  ::google::protobuf::int32 m_pricetype_;
  ::google::protobuf::int32 m_vietype_;
  ::google::protobuf::int32 m_startprice_;
  ::google::protobuf::int32 m_onceprice_;
  ::google::protobuf::int32 m_directprice_;
  ::google::protobuf::int32 m_gztype_;
  ::std::string* m_gztutype_;
  ::google::protobuf::int32 m_recoverytype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static E_MarketMarket* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarketMarket : public ::google::protobuf::Message {
 public:
  Sheet_MarketMarket();
  virtual ~Sheet_MarketMarket();

  Sheet_MarketMarket(const Sheet_MarketMarket& from);

  inline Sheet_MarketMarket& operator=(const Sheet_MarketMarket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarketMarket& default_instance();

  void Swap(Sheet_MarketMarket* other);

  // implements Message ----------------------------------------------

  Sheet_MarketMarket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarketMarket& from);
  void MergeFrom(const Sheet_MarketMarket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarketMarket E_MarketMarket_List = 1;
  inline int e_marketmarket_list_size() const;
  inline void clear_e_marketmarket_list();
  static const int kEMarketMarketListFieldNumber = 1;
  inline const ::proto_ff::E_MarketMarket& e_marketmarket_list(int index) const;
  inline ::proto_ff::E_MarketMarket* mutable_e_marketmarket_list(int index);
  inline ::proto_ff::E_MarketMarket* add_e_marketmarket_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketMarket >&
      e_marketmarket_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketMarket >*
      mutable_e_marketmarket_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarketMarket)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketMarket > e_marketmarket_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarketMarket* default_instance_;
};
// -------------------------------------------------------------------

class E_MarketBig : public ::google::protobuf::Message {
 public:
  E_MarketBig();
  virtual ~E_MarketBig();

  E_MarketBig(const E_MarketBig& from);

  inline E_MarketBig& operator=(const E_MarketBig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarketBig& default_instance();

  void Swap(E_MarketBig* other);

  // implements Message ----------------------------------------------

  E_MarketBig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarketBig& from);
  void MergeFrom(const E_MarketBig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_bigname = 2;
  inline bool has_m_bigname() const;
  inline void clear_m_bigname();
  static const int kMBignameFieldNumber = 2;
  inline const ::std::string& m_bigname() const;
  inline void set_m_bigname(const ::std::string& value);
  inline void set_m_bigname(const char* value);
  inline void set_m_bigname(const char* value, size_t size);
  inline ::std::string* mutable_m_bigname();
  inline ::std::string* release_m_bigname();
  inline void set_allocated_m_bigname(::std::string* m_bigname);

  // optional int32 m_xb = 3;
  inline bool has_m_xb() const;
  inline void clear_m_xb();
  static const int kMXbFieldNumber = 3;
  inline ::google::protobuf::int32 m_xb() const;
  inline void set_m_xb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarketBig)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_bigname();
  inline void clear_has_m_bigname();
  inline void set_has_m_xb();
  inline void clear_has_m_xb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_bigname_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_xb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static E_MarketBig* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarketBig : public ::google::protobuf::Message {
 public:
  Sheet_MarketBig();
  virtual ~Sheet_MarketBig();

  Sheet_MarketBig(const Sheet_MarketBig& from);

  inline Sheet_MarketBig& operator=(const Sheet_MarketBig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarketBig& default_instance();

  void Swap(Sheet_MarketBig* other);

  // implements Message ----------------------------------------------

  Sheet_MarketBig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarketBig& from);
  void MergeFrom(const Sheet_MarketBig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarketBig E_MarketBig_List = 1;
  inline int e_marketbig_list_size() const;
  inline void clear_e_marketbig_list();
  static const int kEMarketBigListFieldNumber = 1;
  inline const ::proto_ff::E_MarketBig& e_marketbig_list(int index) const;
  inline ::proto_ff::E_MarketBig* mutable_e_marketbig_list(int index);
  inline ::proto_ff::E_MarketBig* add_e_marketbig_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketBig >&
      e_marketbig_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketBig >*
      mutable_e_marketbig_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarketBig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketBig > e_marketbig_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarketBig* default_instance_;
};
// -------------------------------------------------------------------

class E_MarketSmall : public ::google::protobuf::Message {
 public:
  E_MarketSmall();
  virtual ~E_MarketSmall();

  E_MarketSmall(const E_MarketSmall& from);

  inline E_MarketSmall& operator=(const E_MarketSmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarketSmall& default_instance();

  void Swap(E_MarketSmall* other);

  // implements Message ----------------------------------------------

  E_MarketSmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarketSmall& from);
  void MergeFrom(const E_MarketSmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_smallname = 2;
  inline bool has_m_smallname() const;
  inline void clear_m_smallname();
  static const int kMSmallnameFieldNumber = 2;
  inline const ::std::string& m_smallname() const;
  inline void set_m_smallname(const ::std::string& value);
  inline void set_m_smallname(const char* value);
  inline void set_m_smallname(const char* value, size_t size);
  inline ::std::string* mutable_m_smallname();
  inline ::std::string* release_m_smallname();
  inline void set_allocated_m_smallname(::std::string* m_smallname);

  // optional int32 m_openlevel = 3;
  inline bool has_m_openlevel() const;
  inline void clear_m_openlevel();
  static const int kMOpenlevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_openlevel() const;
  inline void set_m_openlevel(::google::protobuf::int32 value);

  // optional int32 m_bigid = 4;
  inline bool has_m_bigid() const;
  inline void clear_m_bigid();
  static const int kMBigidFieldNumber = 4;
  inline ::google::protobuf::int32 m_bigid() const;
  inline void set_m_bigid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarketSmall)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_smallname();
  inline void clear_has_m_smallname();
  inline void set_has_m_openlevel();
  inline void clear_has_m_openlevel();
  inline void set_has_m_bigid();
  inline void clear_has_m_bigid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_smallname_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_openlevel_;
  ::google::protobuf::int32 m_bigid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static E_MarketSmall* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarketSmall : public ::google::protobuf::Message {
 public:
  Sheet_MarketSmall();
  virtual ~Sheet_MarketSmall();

  Sheet_MarketSmall(const Sheet_MarketSmall& from);

  inline Sheet_MarketSmall& operator=(const Sheet_MarketSmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarketSmall& default_instance();

  void Swap(Sheet_MarketSmall* other);

  // implements Message ----------------------------------------------

  Sheet_MarketSmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarketSmall& from);
  void MergeFrom(const Sheet_MarketSmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarketSmall E_MarketSmall_List = 1;
  inline int e_marketsmall_list_size() const;
  inline void clear_e_marketsmall_list();
  static const int kEMarketSmallListFieldNumber = 1;
  inline const ::proto_ff::E_MarketSmall& e_marketsmall_list(int index) const;
  inline ::proto_ff::E_MarketSmall* mutable_e_marketsmall_list(int index);
  inline ::proto_ff::E_MarketSmall* add_e_marketsmall_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketSmall >&
      e_marketsmall_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketSmall >*
      mutable_e_marketsmall_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarketSmall)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketSmall > e_marketsmall_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarketSmall* default_instance_;
};
// -------------------------------------------------------------------

class E_MarketConstant : public ::google::protobuf::Message {
 public:
  E_MarketConstant();
  virtual ~E_MarketConstant();

  E_MarketConstant(const E_MarketConstant& from);

  inline E_MarketConstant& operator=(const E_MarketConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarketConstant& default_instance();

  void Swap(E_MarketConstant* other);

  // implements Message ----------------------------------------------

  E_MarketConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarketConstant& from);
  void MergeFrom(const E_MarketConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_taxrate = 2;
  inline bool has_m_taxrate() const;
  inline void clear_m_taxrate();
  static const int kMTaxrateFieldNumber = 2;
  inline ::google::protobuf::int32 m_taxrate() const;
  inline void set_m_taxrate(::google::protobuf::int32 value);

  // optional int32 m_bpselltime = 3;
  inline bool has_m_bpselltime() const;
  inline void clear_m_bpselltime();
  static const int kMBpselltimeFieldNumber = 3;
  inline ::google::protobuf::int32 m_bpselltime() const;
  inline void set_m_bpselltime(::google::protobuf::int32 value);

  // optional int32 m_sellnum = 4;
  inline bool has_m_sellnum() const;
  inline void clear_m_sellnum();
  static const int kMSellnumFieldNumber = 4;
  inline ::google::protobuf::int32 m_sellnum() const;
  inline void set_m_sellnum(::google::protobuf::int32 value);

  // optional int32 m_recyclenum = 5;
  inline bool has_m_recyclenum() const;
  inline void clear_m_recyclenum();
  static const int kMRecyclenumFieldNumber = 5;
  inline ::google::protobuf::int32 m_recyclenum() const;
  inline void set_m_recyclenum(::google::protobuf::int32 value);

  // optional int32 m_gz = 6;
  inline bool has_m_gz() const;
  inline void clear_m_gz();
  static const int kMGzFieldNumber = 6;
  inline ::google::protobuf::int32 m_gz() const;
  inline void set_m_gz(::google::protobuf::int32 value);

  // optional string m_epackagetype = 7;
  inline bool has_m_epackagetype() const;
  inline void clear_m_epackagetype();
  static const int kMEpackagetypeFieldNumber = 7;
  inline const ::std::string& m_epackagetype() const;
  inline void set_m_epackagetype(const ::std::string& value);
  inline void set_m_epackagetype(const char* value);
  inline void set_m_epackagetype(const char* value, size_t size);
  inline ::std::string* mutable_m_epackagetype();
  inline ::std::string* release_m_epackagetype();
  inline void set_allocated_m_epackagetype(::std::string* m_epackagetype);

  // optional int32 m_dh = 8;
  inline bool has_m_dh() const;
  inline void clear_m_dh();
  static const int kMDhFieldNumber = 8;
  inline ::google::protobuf::int32 m_dh() const;
  inline void set_m_dh(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarketConstant)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_taxrate();
  inline void clear_has_m_taxrate();
  inline void set_has_m_bpselltime();
  inline void clear_has_m_bpselltime();
  inline void set_has_m_sellnum();
  inline void clear_has_m_sellnum();
  inline void set_has_m_recyclenum();
  inline void clear_has_m_recyclenum();
  inline void set_has_m_gz();
  inline void clear_has_m_gz();
  inline void set_has_m_epackagetype();
  inline void clear_has_m_epackagetype();
  inline void set_has_m_dh();
  inline void clear_has_m_dh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_taxrate_;
  ::google::protobuf::int32 m_bpselltime_;
  ::google::protobuf::int32 m_sellnum_;
  ::google::protobuf::int32 m_recyclenum_;
  ::google::protobuf::int32 m_gz_;
  ::std::string* m_epackagetype_;
  ::google::protobuf::int32 m_dh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static E_MarketConstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarketConstant : public ::google::protobuf::Message {
 public:
  Sheet_MarketConstant();
  virtual ~Sheet_MarketConstant();

  Sheet_MarketConstant(const Sheet_MarketConstant& from);

  inline Sheet_MarketConstant& operator=(const Sheet_MarketConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarketConstant& default_instance();

  void Swap(Sheet_MarketConstant* other);

  // implements Message ----------------------------------------------

  Sheet_MarketConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarketConstant& from);
  void MergeFrom(const Sheet_MarketConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarketConstant E_MarketConstant_List = 1;
  inline int e_marketconstant_list_size() const;
  inline void clear_e_marketconstant_list();
  static const int kEMarketConstantListFieldNumber = 1;
  inline const ::proto_ff::E_MarketConstant& e_marketconstant_list(int index) const;
  inline ::proto_ff::E_MarketConstant* mutable_e_marketconstant_list(int index);
  inline ::proto_ff::E_MarketConstant* add_e_marketconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketConstant >&
      e_marketconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketConstant >*
      mutable_e_marketconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarketConstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketConstant > e_marketconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarket_2eproto();
  friend void protobuf_AssignDesc_E_5fMarket_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarket_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarketConstant* default_instance_;
};
// ===================================================================


// ===================================================================

// E_MarketMarket

// optional int32 m_itemid = 1;
inline bool E_MarketMarket::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarketMarket::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarketMarket::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarketMarket::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_MarketMarket::m_itemid() const {
  return m_itemid_;
}
inline void E_MarketMarket::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_type = 2;
inline bool E_MarketMarket::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarketMarket::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarketMarket::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarketMarket::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MarketMarket::m_type() const {
  return m_type_;
}
inline void E_MarketMarket::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_order = 3;
inline bool E_MarketMarket::has_m_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarketMarket::set_has_m_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarketMarket::clear_has_m_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarketMarket::clear_m_order() {
  m_order_ = 0;
  clear_has_m_order();
}
inline ::google::protobuf::int32 E_MarketMarket::m_order() const {
  return m_order_;
}
inline void E_MarketMarket::set_m_order(::google::protobuf::int32 value) {
  set_has_m_order();
  m_order_ = value;
}

// optional int32 m_readytime = 4;
inline bool E_MarketMarket::has_m_readytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarketMarket::set_has_m_readytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarketMarket::clear_has_m_readytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarketMarket::clear_m_readytime() {
  m_readytime_ = 0;
  clear_has_m_readytime();
}
inline ::google::protobuf::int32 E_MarketMarket::m_readytime() const {
  return m_readytime_;
}
inline void E_MarketMarket::set_m_readytime(::google::protobuf::int32 value) {
  set_has_m_readytime();
  m_readytime_ = value;
}

// optional int32 m_sjtime = 5;
inline bool E_MarketMarket::has_m_sjtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarketMarket::set_has_m_sjtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarketMarket::clear_has_m_sjtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarketMarket::clear_m_sjtime() {
  m_sjtime_ = 0;
  clear_has_m_sjtime();
}
inline ::google::protobuf::int32 E_MarketMarket::m_sjtime() const {
  return m_sjtime_;
}
inline void E_MarketMarket::set_m_sjtime(::google::protobuf::int32 value) {
  set_has_m_sjtime();
  m_sjtime_ = value;
}

// optional int32 m_endtime = 6;
inline bool E_MarketMarket::has_m_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarketMarket::set_has_m_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarketMarket::clear_has_m_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarketMarket::clear_m_endtime() {
  m_endtime_ = 0;
  clear_has_m_endtime();
}
inline ::google::protobuf::int32 E_MarketMarket::m_endtime() const {
  return m_endtime_;
}
inline void E_MarketMarket::set_m_endtime(::google::protobuf::int32 value) {
  set_has_m_endtime();
  m_endtime_ = value;
}

// optional int32 m_pricetype = 7;
inline bool E_MarketMarket::has_m_pricetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MarketMarket::set_has_m_pricetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MarketMarket::clear_has_m_pricetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MarketMarket::clear_m_pricetype() {
  m_pricetype_ = 0;
  clear_has_m_pricetype();
}
inline ::google::protobuf::int32 E_MarketMarket::m_pricetype() const {
  return m_pricetype_;
}
inline void E_MarketMarket::set_m_pricetype(::google::protobuf::int32 value) {
  set_has_m_pricetype();
  m_pricetype_ = value;
}

// optional int32 m_vietype = 8;
inline bool E_MarketMarket::has_m_vietype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MarketMarket::set_has_m_vietype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MarketMarket::clear_has_m_vietype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MarketMarket::clear_m_vietype() {
  m_vietype_ = 0;
  clear_has_m_vietype();
}
inline ::google::protobuf::int32 E_MarketMarket::m_vietype() const {
  return m_vietype_;
}
inline void E_MarketMarket::set_m_vietype(::google::protobuf::int32 value) {
  set_has_m_vietype();
  m_vietype_ = value;
}

// optional int32 m_startprice = 9;
inline bool E_MarketMarket::has_m_startprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MarketMarket::set_has_m_startprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MarketMarket::clear_has_m_startprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MarketMarket::clear_m_startprice() {
  m_startprice_ = 0;
  clear_has_m_startprice();
}
inline ::google::protobuf::int32 E_MarketMarket::m_startprice() const {
  return m_startprice_;
}
inline void E_MarketMarket::set_m_startprice(::google::protobuf::int32 value) {
  set_has_m_startprice();
  m_startprice_ = value;
}

// optional int32 m_onceprice = 10;
inline bool E_MarketMarket::has_m_onceprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MarketMarket::set_has_m_onceprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MarketMarket::clear_has_m_onceprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MarketMarket::clear_m_onceprice() {
  m_onceprice_ = 0;
  clear_has_m_onceprice();
}
inline ::google::protobuf::int32 E_MarketMarket::m_onceprice() const {
  return m_onceprice_;
}
inline void E_MarketMarket::set_m_onceprice(::google::protobuf::int32 value) {
  set_has_m_onceprice();
  m_onceprice_ = value;
}

// optional int32 m_directprice = 11;
inline bool E_MarketMarket::has_m_directprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MarketMarket::set_has_m_directprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MarketMarket::clear_has_m_directprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MarketMarket::clear_m_directprice() {
  m_directprice_ = 0;
  clear_has_m_directprice();
}
inline ::google::protobuf::int32 E_MarketMarket::m_directprice() const {
  return m_directprice_;
}
inline void E_MarketMarket::set_m_directprice(::google::protobuf::int32 value) {
  set_has_m_directprice();
  m_directprice_ = value;
}

// optional int32 m_gztype = 12;
inline bool E_MarketMarket::has_m_gztype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MarketMarket::set_has_m_gztype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MarketMarket::clear_has_m_gztype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MarketMarket::clear_m_gztype() {
  m_gztype_ = 0;
  clear_has_m_gztype();
}
inline ::google::protobuf::int32 E_MarketMarket::m_gztype() const {
  return m_gztype_;
}
inline void E_MarketMarket::set_m_gztype(::google::protobuf::int32 value) {
  set_has_m_gztype();
  m_gztype_ = value;
}

// optional string m_gztutype = 13;
inline bool E_MarketMarket::has_m_gztutype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MarketMarket::set_has_m_gztutype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MarketMarket::clear_has_m_gztutype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MarketMarket::clear_m_gztutype() {
  if (m_gztutype_ != &::google::protobuf::internal::kEmptyString) {
    m_gztutype_->clear();
  }
  clear_has_m_gztutype();
}
inline const ::std::string& E_MarketMarket::m_gztutype() const {
  return *m_gztutype_;
}
inline void E_MarketMarket::set_m_gztutype(const ::std::string& value) {
  set_has_m_gztutype();
  if (m_gztutype_ == &::google::protobuf::internal::kEmptyString) {
    m_gztutype_ = new ::std::string;
  }
  m_gztutype_->assign(value);
}
inline void E_MarketMarket::set_m_gztutype(const char* value) {
  set_has_m_gztutype();
  if (m_gztutype_ == &::google::protobuf::internal::kEmptyString) {
    m_gztutype_ = new ::std::string;
  }
  m_gztutype_->assign(value);
}
inline void E_MarketMarket::set_m_gztutype(const char* value, size_t size) {
  set_has_m_gztutype();
  if (m_gztutype_ == &::google::protobuf::internal::kEmptyString) {
    m_gztutype_ = new ::std::string;
  }
  m_gztutype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarketMarket::mutable_m_gztutype() {
  set_has_m_gztutype();
  if (m_gztutype_ == &::google::protobuf::internal::kEmptyString) {
    m_gztutype_ = new ::std::string;
  }
  return m_gztutype_;
}
inline ::std::string* E_MarketMarket::release_m_gztutype() {
  clear_has_m_gztutype();
  if (m_gztutype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_gztutype_;
    m_gztutype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarketMarket::set_allocated_m_gztutype(::std::string* m_gztutype) {
  if (m_gztutype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gztutype_;
  }
  if (m_gztutype) {
    set_has_m_gztutype();
    m_gztutype_ = m_gztutype;
  } else {
    clear_has_m_gztutype();
    m_gztutype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_recoverytype = 14;
inline bool E_MarketMarket::has_m_recoverytype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MarketMarket::set_has_m_recoverytype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MarketMarket::clear_has_m_recoverytype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MarketMarket::clear_m_recoverytype() {
  m_recoverytype_ = 0;
  clear_has_m_recoverytype();
}
inline ::google::protobuf::int32 E_MarketMarket::m_recoverytype() const {
  return m_recoverytype_;
}
inline void E_MarketMarket::set_m_recoverytype(::google::protobuf::int32 value) {
  set_has_m_recoverytype();
  m_recoverytype_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarketMarket

// repeated .proto_ff.E_MarketMarket E_MarketMarket_List = 1;
inline int Sheet_MarketMarket::e_marketmarket_list_size() const {
  return e_marketmarket_list_.size();
}
inline void Sheet_MarketMarket::clear_e_marketmarket_list() {
  e_marketmarket_list_.Clear();
}
inline const ::proto_ff::E_MarketMarket& Sheet_MarketMarket::e_marketmarket_list(int index) const {
  return e_marketmarket_list_.Get(index);
}
inline ::proto_ff::E_MarketMarket* Sheet_MarketMarket::mutable_e_marketmarket_list(int index) {
  return e_marketmarket_list_.Mutable(index);
}
inline ::proto_ff::E_MarketMarket* Sheet_MarketMarket::add_e_marketmarket_list() {
  return e_marketmarket_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketMarket >&
Sheet_MarketMarket::e_marketmarket_list() const {
  return e_marketmarket_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketMarket >*
Sheet_MarketMarket::mutable_e_marketmarket_list() {
  return &e_marketmarket_list_;
}

// -------------------------------------------------------------------

// E_MarketBig

// optional int32 m_id = 1;
inline bool E_MarketBig::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarketBig::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarketBig::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarketBig::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarketBig::m_id() const {
  return m_id_;
}
inline void E_MarketBig::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_bigname = 2;
inline bool E_MarketBig::has_m_bigname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarketBig::set_has_m_bigname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarketBig::clear_has_m_bigname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarketBig::clear_m_bigname() {
  if (m_bigname_ != &::google::protobuf::internal::kEmptyString) {
    m_bigname_->clear();
  }
  clear_has_m_bigname();
}
inline const ::std::string& E_MarketBig::m_bigname() const {
  return *m_bigname_;
}
inline void E_MarketBig::set_m_bigname(const ::std::string& value) {
  set_has_m_bigname();
  if (m_bigname_ == &::google::protobuf::internal::kEmptyString) {
    m_bigname_ = new ::std::string;
  }
  m_bigname_->assign(value);
}
inline void E_MarketBig::set_m_bigname(const char* value) {
  set_has_m_bigname();
  if (m_bigname_ == &::google::protobuf::internal::kEmptyString) {
    m_bigname_ = new ::std::string;
  }
  m_bigname_->assign(value);
}
inline void E_MarketBig::set_m_bigname(const char* value, size_t size) {
  set_has_m_bigname();
  if (m_bigname_ == &::google::protobuf::internal::kEmptyString) {
    m_bigname_ = new ::std::string;
  }
  m_bigname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarketBig::mutable_m_bigname() {
  set_has_m_bigname();
  if (m_bigname_ == &::google::protobuf::internal::kEmptyString) {
    m_bigname_ = new ::std::string;
  }
  return m_bigname_;
}
inline ::std::string* E_MarketBig::release_m_bigname() {
  clear_has_m_bigname();
  if (m_bigname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_bigname_;
    m_bigname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarketBig::set_allocated_m_bigname(::std::string* m_bigname) {
  if (m_bigname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_bigname_;
  }
  if (m_bigname) {
    set_has_m_bigname();
    m_bigname_ = m_bigname;
  } else {
    clear_has_m_bigname();
    m_bigname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_xb = 3;
inline bool E_MarketBig::has_m_xb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarketBig::set_has_m_xb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarketBig::clear_has_m_xb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarketBig::clear_m_xb() {
  m_xb_ = 0;
  clear_has_m_xb();
}
inline ::google::protobuf::int32 E_MarketBig::m_xb() const {
  return m_xb_;
}
inline void E_MarketBig::set_m_xb(::google::protobuf::int32 value) {
  set_has_m_xb();
  m_xb_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarketBig

// repeated .proto_ff.E_MarketBig E_MarketBig_List = 1;
inline int Sheet_MarketBig::e_marketbig_list_size() const {
  return e_marketbig_list_.size();
}
inline void Sheet_MarketBig::clear_e_marketbig_list() {
  e_marketbig_list_.Clear();
}
inline const ::proto_ff::E_MarketBig& Sheet_MarketBig::e_marketbig_list(int index) const {
  return e_marketbig_list_.Get(index);
}
inline ::proto_ff::E_MarketBig* Sheet_MarketBig::mutable_e_marketbig_list(int index) {
  return e_marketbig_list_.Mutable(index);
}
inline ::proto_ff::E_MarketBig* Sheet_MarketBig::add_e_marketbig_list() {
  return e_marketbig_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketBig >&
Sheet_MarketBig::e_marketbig_list() const {
  return e_marketbig_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketBig >*
Sheet_MarketBig::mutable_e_marketbig_list() {
  return &e_marketbig_list_;
}

// -------------------------------------------------------------------

// E_MarketSmall

// optional int32 m_id = 1;
inline bool E_MarketSmall::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarketSmall::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarketSmall::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarketSmall::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarketSmall::m_id() const {
  return m_id_;
}
inline void E_MarketSmall::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_smallname = 2;
inline bool E_MarketSmall::has_m_smallname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarketSmall::set_has_m_smallname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarketSmall::clear_has_m_smallname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarketSmall::clear_m_smallname() {
  if (m_smallname_ != &::google::protobuf::internal::kEmptyString) {
    m_smallname_->clear();
  }
  clear_has_m_smallname();
}
inline const ::std::string& E_MarketSmall::m_smallname() const {
  return *m_smallname_;
}
inline void E_MarketSmall::set_m_smallname(const ::std::string& value) {
  set_has_m_smallname();
  if (m_smallname_ == &::google::protobuf::internal::kEmptyString) {
    m_smallname_ = new ::std::string;
  }
  m_smallname_->assign(value);
}
inline void E_MarketSmall::set_m_smallname(const char* value) {
  set_has_m_smallname();
  if (m_smallname_ == &::google::protobuf::internal::kEmptyString) {
    m_smallname_ = new ::std::string;
  }
  m_smallname_->assign(value);
}
inline void E_MarketSmall::set_m_smallname(const char* value, size_t size) {
  set_has_m_smallname();
  if (m_smallname_ == &::google::protobuf::internal::kEmptyString) {
    m_smallname_ = new ::std::string;
  }
  m_smallname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarketSmall::mutable_m_smallname() {
  set_has_m_smallname();
  if (m_smallname_ == &::google::protobuf::internal::kEmptyString) {
    m_smallname_ = new ::std::string;
  }
  return m_smallname_;
}
inline ::std::string* E_MarketSmall::release_m_smallname() {
  clear_has_m_smallname();
  if (m_smallname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smallname_;
    m_smallname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarketSmall::set_allocated_m_smallname(::std::string* m_smallname) {
  if (m_smallname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smallname_;
  }
  if (m_smallname) {
    set_has_m_smallname();
    m_smallname_ = m_smallname;
  } else {
    clear_has_m_smallname();
    m_smallname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_openlevel = 3;
inline bool E_MarketSmall::has_m_openlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarketSmall::set_has_m_openlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarketSmall::clear_has_m_openlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarketSmall::clear_m_openlevel() {
  m_openlevel_ = 0;
  clear_has_m_openlevel();
}
inline ::google::protobuf::int32 E_MarketSmall::m_openlevel() const {
  return m_openlevel_;
}
inline void E_MarketSmall::set_m_openlevel(::google::protobuf::int32 value) {
  set_has_m_openlevel();
  m_openlevel_ = value;
}

// optional int32 m_bigid = 4;
inline bool E_MarketSmall::has_m_bigid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarketSmall::set_has_m_bigid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarketSmall::clear_has_m_bigid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarketSmall::clear_m_bigid() {
  m_bigid_ = 0;
  clear_has_m_bigid();
}
inline ::google::protobuf::int32 E_MarketSmall::m_bigid() const {
  return m_bigid_;
}
inline void E_MarketSmall::set_m_bigid(::google::protobuf::int32 value) {
  set_has_m_bigid();
  m_bigid_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarketSmall

// repeated .proto_ff.E_MarketSmall E_MarketSmall_List = 1;
inline int Sheet_MarketSmall::e_marketsmall_list_size() const {
  return e_marketsmall_list_.size();
}
inline void Sheet_MarketSmall::clear_e_marketsmall_list() {
  e_marketsmall_list_.Clear();
}
inline const ::proto_ff::E_MarketSmall& Sheet_MarketSmall::e_marketsmall_list(int index) const {
  return e_marketsmall_list_.Get(index);
}
inline ::proto_ff::E_MarketSmall* Sheet_MarketSmall::mutable_e_marketsmall_list(int index) {
  return e_marketsmall_list_.Mutable(index);
}
inline ::proto_ff::E_MarketSmall* Sheet_MarketSmall::add_e_marketsmall_list() {
  return e_marketsmall_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketSmall >&
Sheet_MarketSmall::e_marketsmall_list() const {
  return e_marketsmall_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketSmall >*
Sheet_MarketSmall::mutable_e_marketsmall_list() {
  return &e_marketsmall_list_;
}

// -------------------------------------------------------------------

// E_MarketConstant

// optional int32 m_id = 1;
inline bool E_MarketConstant::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarketConstant::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarketConstant::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarketConstant::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarketConstant::m_id() const {
  return m_id_;
}
inline void E_MarketConstant::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_taxrate = 2;
inline bool E_MarketConstant::has_m_taxrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarketConstant::set_has_m_taxrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarketConstant::clear_has_m_taxrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarketConstant::clear_m_taxrate() {
  m_taxrate_ = 0;
  clear_has_m_taxrate();
}
inline ::google::protobuf::int32 E_MarketConstant::m_taxrate() const {
  return m_taxrate_;
}
inline void E_MarketConstant::set_m_taxrate(::google::protobuf::int32 value) {
  set_has_m_taxrate();
  m_taxrate_ = value;
}

// optional int32 m_bpselltime = 3;
inline bool E_MarketConstant::has_m_bpselltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarketConstant::set_has_m_bpselltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarketConstant::clear_has_m_bpselltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarketConstant::clear_m_bpselltime() {
  m_bpselltime_ = 0;
  clear_has_m_bpselltime();
}
inline ::google::protobuf::int32 E_MarketConstant::m_bpselltime() const {
  return m_bpselltime_;
}
inline void E_MarketConstant::set_m_bpselltime(::google::protobuf::int32 value) {
  set_has_m_bpselltime();
  m_bpselltime_ = value;
}

// optional int32 m_sellnum = 4;
inline bool E_MarketConstant::has_m_sellnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarketConstant::set_has_m_sellnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarketConstant::clear_has_m_sellnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarketConstant::clear_m_sellnum() {
  m_sellnum_ = 0;
  clear_has_m_sellnum();
}
inline ::google::protobuf::int32 E_MarketConstant::m_sellnum() const {
  return m_sellnum_;
}
inline void E_MarketConstant::set_m_sellnum(::google::protobuf::int32 value) {
  set_has_m_sellnum();
  m_sellnum_ = value;
}

// optional int32 m_recyclenum = 5;
inline bool E_MarketConstant::has_m_recyclenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarketConstant::set_has_m_recyclenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarketConstant::clear_has_m_recyclenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarketConstant::clear_m_recyclenum() {
  m_recyclenum_ = 0;
  clear_has_m_recyclenum();
}
inline ::google::protobuf::int32 E_MarketConstant::m_recyclenum() const {
  return m_recyclenum_;
}
inline void E_MarketConstant::set_m_recyclenum(::google::protobuf::int32 value) {
  set_has_m_recyclenum();
  m_recyclenum_ = value;
}

// optional int32 m_gz = 6;
inline bool E_MarketConstant::has_m_gz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarketConstant::set_has_m_gz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarketConstant::clear_has_m_gz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarketConstant::clear_m_gz() {
  m_gz_ = 0;
  clear_has_m_gz();
}
inline ::google::protobuf::int32 E_MarketConstant::m_gz() const {
  return m_gz_;
}
inline void E_MarketConstant::set_m_gz(::google::protobuf::int32 value) {
  set_has_m_gz();
  m_gz_ = value;
}

// optional string m_epackagetype = 7;
inline bool E_MarketConstant::has_m_epackagetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MarketConstant::set_has_m_epackagetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MarketConstant::clear_has_m_epackagetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MarketConstant::clear_m_epackagetype() {
  if (m_epackagetype_ != &::google::protobuf::internal::kEmptyString) {
    m_epackagetype_->clear();
  }
  clear_has_m_epackagetype();
}
inline const ::std::string& E_MarketConstant::m_epackagetype() const {
  return *m_epackagetype_;
}
inline void E_MarketConstant::set_m_epackagetype(const ::std::string& value) {
  set_has_m_epackagetype();
  if (m_epackagetype_ == &::google::protobuf::internal::kEmptyString) {
    m_epackagetype_ = new ::std::string;
  }
  m_epackagetype_->assign(value);
}
inline void E_MarketConstant::set_m_epackagetype(const char* value) {
  set_has_m_epackagetype();
  if (m_epackagetype_ == &::google::protobuf::internal::kEmptyString) {
    m_epackagetype_ = new ::std::string;
  }
  m_epackagetype_->assign(value);
}
inline void E_MarketConstant::set_m_epackagetype(const char* value, size_t size) {
  set_has_m_epackagetype();
  if (m_epackagetype_ == &::google::protobuf::internal::kEmptyString) {
    m_epackagetype_ = new ::std::string;
  }
  m_epackagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarketConstant::mutable_m_epackagetype() {
  set_has_m_epackagetype();
  if (m_epackagetype_ == &::google::protobuf::internal::kEmptyString) {
    m_epackagetype_ = new ::std::string;
  }
  return m_epackagetype_;
}
inline ::std::string* E_MarketConstant::release_m_epackagetype() {
  clear_has_m_epackagetype();
  if (m_epackagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_epackagetype_;
    m_epackagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarketConstant::set_allocated_m_epackagetype(::std::string* m_epackagetype) {
  if (m_epackagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_epackagetype_;
  }
  if (m_epackagetype) {
    set_has_m_epackagetype();
    m_epackagetype_ = m_epackagetype;
  } else {
    clear_has_m_epackagetype();
    m_epackagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_dh = 8;
inline bool E_MarketConstant::has_m_dh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MarketConstant::set_has_m_dh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MarketConstant::clear_has_m_dh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MarketConstant::clear_m_dh() {
  m_dh_ = 0;
  clear_has_m_dh();
}
inline ::google::protobuf::int32 E_MarketConstant::m_dh() const {
  return m_dh_;
}
inline void E_MarketConstant::set_m_dh(::google::protobuf::int32 value) {
  set_has_m_dh();
  m_dh_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarketConstant

// repeated .proto_ff.E_MarketConstant E_MarketConstant_List = 1;
inline int Sheet_MarketConstant::e_marketconstant_list_size() const {
  return e_marketconstant_list_.size();
}
inline void Sheet_MarketConstant::clear_e_marketconstant_list() {
  e_marketconstant_list_.Clear();
}
inline const ::proto_ff::E_MarketConstant& Sheet_MarketConstant::e_marketconstant_list(int index) const {
  return e_marketconstant_list_.Get(index);
}
inline ::proto_ff::E_MarketConstant* Sheet_MarketConstant::mutable_e_marketconstant_list(int index) {
  return e_marketconstant_list_.Mutable(index);
}
inline ::proto_ff::E_MarketConstant* Sheet_MarketConstant::add_e_marketconstant_list() {
  return e_marketconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketConstant >&
Sheet_MarketConstant::e_marketconstant_list() const {
  return e_marketconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarketConstant >*
Sheet_MarketConstant::mutable_e_marketconstant_list() {
  return &e_marketconstant_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fMarket_2eproto__INCLUDED
