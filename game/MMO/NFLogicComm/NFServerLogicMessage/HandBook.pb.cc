// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HandBook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HandBook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CLHandBookInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandBookActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandBookLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookLevelUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookLevelUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandBookStarUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookStarUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookStarUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookStarUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandBookDecomposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookDecomposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookDecomposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookDecomposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandleBookFettersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandleBookFettersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandleBookFettersRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandleBookFettersRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandleBookFettersActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandleBookFettersActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandleBookFettersActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandleBookFettersActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandBookEmployInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookEmployInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookEmployInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookEmployInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLHandBookEmployActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLHandBookEmployActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCHandBookEmployActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCHandBookEmployActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHandBookEmployStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHandBookEmployStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHandBookTableStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHandBookTableStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBeastInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBeastInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHandBookBeastChangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHandBookBeastChangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastEquipDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastEquipDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBeastEquipDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBeastEquipDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastEquipUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastEquipUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBeastEquipUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBeastEquipUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastEquipStrongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastEquipStrongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBeastEquipStrongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBeastEquipStrongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastEquipStrongQualityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastEquipStrongQualityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBeastEquipStrongQualityRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBeastEquipStrongQualityRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastEnterBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastEnterBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastEnterBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastEnterBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBeastQuitBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBeastQuitBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBeastQuitBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBeastQuitBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHandBookBattleSlotUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHandBookBattleSlotUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHandBookBattleSlotUnlockRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHandBookBattleSlotUnlockRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HandBook_2eproto() {
  protobuf_AddDesc_HandBook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HandBook.proto");
  GOOGLE_CHECK(file != NULL);
  CLHandBookInfoReq_descriptor_ = file->message_type(0);
  static const int CLHandBookInfoReq_offsets_[1] = {
  };
  CLHandBookInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookInfoReq_descriptor_,
      CLHandBookInfoReq::default_instance_,
      CLHandBookInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookInfoReq));
  LCHandBookInfoRsp_descriptor_ = file->message_type(1);
  static const int LCHandBookInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookInfoRsp, info_),
  };
  LCHandBookInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookInfoRsp_descriptor_,
      LCHandBookInfoRsp::default_instance_,
      LCHandBookInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookInfoRsp));
  CLHandBookActiveReq_descriptor_ = file->message_type(2);
  static const int CLHandBookActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookActiveReq, id_),
  };
  CLHandBookActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookActiveReq_descriptor_,
      CLHandBookActiveReq::default_instance_,
      CLHandBookActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookActiveReq));
  LCHandBookActiveRsp_descriptor_ = file->message_type(3);
  static const int LCHandBookActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookActiveRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookActiveRsp, data_),
  };
  LCHandBookActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookActiveRsp_descriptor_,
      LCHandBookActiveRsp::default_instance_,
      LCHandBookActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookActiveRsp));
  CLHandBookLevelUpReq_descriptor_ = file->message_type(4);
  static const int CLHandBookLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookLevelUpReq, id_),
  };
  CLHandBookLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookLevelUpReq_descriptor_,
      CLHandBookLevelUpReq::default_instance_,
      CLHandBookLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookLevelUpReq));
  LCHandBookLevelUpRsp_descriptor_ = file->message_type(5);
  static const int LCHandBookLevelUpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookLevelUpRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookLevelUpRsp, data_),
  };
  LCHandBookLevelUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookLevelUpRsp_descriptor_,
      LCHandBookLevelUpRsp::default_instance_,
      LCHandBookLevelUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookLevelUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookLevelUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookLevelUpRsp));
  CLHandBookStarUpReq_descriptor_ = file->message_type(6);
  static const int CLHandBookStarUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookStarUpReq, id_),
  };
  CLHandBookStarUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookStarUpReq_descriptor_,
      CLHandBookStarUpReq::default_instance_,
      CLHandBookStarUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookStarUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookStarUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookStarUpReq));
  LCHandBookStarUpRsp_descriptor_ = file->message_type(7);
  static const int LCHandBookStarUpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookStarUpRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookStarUpRsp, data_),
  };
  LCHandBookStarUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookStarUpRsp_descriptor_,
      LCHandBookStarUpRsp::default_instance_,
      LCHandBookStarUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookStarUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookStarUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookStarUpRsp));
  CLHandBookDecomposeReq_descriptor_ = file->message_type(8);
  static const int CLHandBookDecomposeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookDecomposeReq, gridlist_),
  };
  CLHandBookDecomposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookDecomposeReq_descriptor_,
      CLHandBookDecomposeReq::default_instance_,
      CLHandBookDecomposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookDecomposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookDecomposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookDecomposeReq));
  LCHandBookDecomposeRsp_descriptor_ = file->message_type(9);
  static const int LCHandBookDecomposeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookDecomposeRsp, ret_code_),
  };
  LCHandBookDecomposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookDecomposeRsp_descriptor_,
      LCHandBookDecomposeRsp::default_instance_,
      LCHandBookDecomposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookDecomposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookDecomposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookDecomposeRsp));
  CLHandleBookFettersReq_descriptor_ = file->message_type(10);
  static const int CLHandleBookFettersReq_offsets_[1] = {
  };
  CLHandleBookFettersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandleBookFettersReq_descriptor_,
      CLHandleBookFettersReq::default_instance_,
      CLHandleBookFettersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandleBookFettersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandleBookFettersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandleBookFettersReq));
  LCHandleBookFettersRsp_descriptor_ = file->message_type(11);
  static const int LCHandleBookFettersRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersRsp, fellters_),
  };
  LCHandleBookFettersRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandleBookFettersRsp_descriptor_,
      LCHandleBookFettersRsp::default_instance_,
      LCHandleBookFettersRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandleBookFettersRsp));
  CLHandleBookFettersActiveReq_descriptor_ = file->message_type(12);
  static const int CLHandleBookFettersActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandleBookFettersActiveReq, id_),
  };
  CLHandleBookFettersActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandleBookFettersActiveReq_descriptor_,
      CLHandleBookFettersActiveReq::default_instance_,
      CLHandleBookFettersActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandleBookFettersActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandleBookFettersActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandleBookFettersActiveReq));
  LCHandleBookFettersActiveRsp_descriptor_ = file->message_type(13);
  static const int LCHandleBookFettersActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersActiveRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersActiveRsp, id_),
  };
  LCHandleBookFettersActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandleBookFettersActiveRsp_descriptor_,
      LCHandleBookFettersActiveRsp::default_instance_,
      LCHandleBookFettersActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandleBookFettersActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandleBookFettersActiveRsp));
  CLHandBookEmployInfoReq_descriptor_ = file->message_type(14);
  static const int CLHandBookEmployInfoReq_offsets_[1] = {
  };
  CLHandBookEmployInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookEmployInfoReq_descriptor_,
      CLHandBookEmployInfoReq::default_instance_,
      CLHandBookEmployInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookEmployInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookEmployInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookEmployInfoReq));
  LCHandBookEmployInfoRsp_descriptor_ = file->message_type(15);
  static const int LCHandBookEmployInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployInfoRsp, employs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployInfoRsp, tables_),
  };
  LCHandBookEmployInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookEmployInfoRsp_descriptor_,
      LCHandBookEmployInfoRsp::default_instance_,
      LCHandBookEmployInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookEmployInfoRsp));
  CLHandBookEmployActiveReq_descriptor_ = file->message_type(16);
  static const int CLHandBookEmployActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookEmployActiveReq, id_),
  };
  CLHandBookEmployActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLHandBookEmployActiveReq_descriptor_,
      CLHandBookEmployActiveReq::default_instance_,
      CLHandBookEmployActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookEmployActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLHandBookEmployActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLHandBookEmployActiveReq));
  LCHandBookEmployActiveRsp_descriptor_ = file->message_type(17);
  static const int LCHandBookEmployActiveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployActiveRsp, ret_code_),
  };
  LCHandBookEmployActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCHandBookEmployActiveRsp_descriptor_,
      LCHandBookEmployActiveRsp::default_instance_,
      LCHandBookEmployActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCHandBookEmployActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCHandBookEmployActiveRsp));
  NotifyHandBookEmployStatusChange_descriptor_ = file->message_type(18);
  static const int NotifyHandBookEmployStatusChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookEmployStatusChange, info_),
  };
  NotifyHandBookEmployStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHandBookEmployStatusChange_descriptor_,
      NotifyHandBookEmployStatusChange::default_instance_,
      NotifyHandBookEmployStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookEmployStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookEmployStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHandBookEmployStatusChange));
  NotifyHandBookTableStatusChange_descriptor_ = file->message_type(19);
  static const int NotifyHandBookTableStatusChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookTableStatusChange, info_),
  };
  NotifyHandBookTableStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHandBookTableStatusChange_descriptor_,
      NotifyHandBookTableStatusChange::default_instance_,
      NotifyHandBookTableStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookTableStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookTableStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHandBookTableStatusChange));
  CGHandBookBeastInfoReq_descriptor_ = file->message_type(20);
  static const int CGHandBookBeastInfoReq_offsets_[1] = {
  };
  CGHandBookBeastInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastInfoReq_descriptor_,
      CGHandBookBeastInfoReq::default_instance_,
      CGHandBookBeastInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastInfoReq));
  GCHandBookBeastInfoRsp_descriptor_ = file->message_type(21);
  static const int GCHandBookBeastInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastInfoRsp, beasts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastInfoRsp, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastInfoRsp, beast_priv_id_),
  };
  GCHandBookBeastInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBeastInfoRsp_descriptor_,
      GCHandBookBeastInfoRsp::default_instance_,
      GCHandBookBeastInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBeastInfoRsp));
  NotifyHandBookBeastChangeInfo_descriptor_ = file->message_type(22);
  static const int NotifyHandBookBeastChangeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookBeastChangeInfo, beast_),
  };
  NotifyHandBookBeastChangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHandBookBeastChangeInfo_descriptor_,
      NotifyHandBookBeastChangeInfo::default_instance_,
      NotifyHandBookBeastChangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookBeastChangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHandBookBeastChangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHandBookBeastChangeInfo));
  CGHandBookBeastEquipDressReq_descriptor_ = file->message_type(23);
  static const int CGHandBookBeastEquipDressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipDressReq, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipDressReq, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipDressReq, type_),
  };
  CGHandBookBeastEquipDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastEquipDressReq_descriptor_,
      CGHandBookBeastEquipDressReq::default_instance_,
      CGHandBookBeastEquipDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastEquipDressReq));
  GCHandBookBeastEquipDressRsp_descriptor_ = file->message_type(24);
  static const int GCHandBookBeastEquipDressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipDressRsp, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipDressRsp, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipDressRsp, type_),
  };
  GCHandBookBeastEquipDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBeastEquipDressRsp_descriptor_,
      GCHandBookBeastEquipDressRsp::default_instance_,
      GCHandBookBeastEquipDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBeastEquipDressRsp));
  CGHandBookBeastEquipUnDressReq_descriptor_ = file->message_type(25);
  static const int CGHandBookBeastEquipUnDressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipUnDressReq, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipUnDressReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipUnDressReq, type_),
  };
  CGHandBookBeastEquipUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastEquipUnDressReq_descriptor_,
      CGHandBookBeastEquipUnDressReq::default_instance_,
      CGHandBookBeastEquipUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastEquipUnDressReq));
  GCHandBookBeastEquipUnDressRsp_descriptor_ = file->message_type(26);
  static const int GCHandBookBeastEquipUnDressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipUnDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipUnDressRsp, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipUnDressRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipUnDressRsp, type_),
  };
  GCHandBookBeastEquipUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBeastEquipUnDressRsp_descriptor_,
      GCHandBookBeastEquipUnDressRsp::default_instance_,
      GCHandBookBeastEquipUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBeastEquipUnDressRsp));
  CGHandBookBeastEquipStrongReq_descriptor_ = file->message_type(27);
  static const int CGHandBookBeastEquipStrongReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongReq, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongReq, gridlist_),
  };
  CGHandBookBeastEquipStrongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastEquipStrongReq_descriptor_,
      CGHandBookBeastEquipStrongReq::default_instance_,
      CGHandBookBeastEquipStrongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastEquipStrongReq));
  GCHandBookBeastEquipStrongRsp_descriptor_ = file->message_type(28);
  static const int GCHandBookBeastEquipStrongRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongRsp, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongRsp, slot_pos_),
  };
  GCHandBookBeastEquipStrongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBeastEquipStrongRsp_descriptor_,
      GCHandBookBeastEquipStrongRsp::default_instance_,
      GCHandBookBeastEquipStrongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBeastEquipStrongRsp));
  CGHandBookBeastEquipStrongQualityReq_descriptor_ = file->message_type(29);
  static const int CGHandBookBeastEquipStrongQualityReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongQualityReq, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongQualityReq, slot_pos_),
  };
  CGHandBookBeastEquipStrongQualityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastEquipStrongQualityReq_descriptor_,
      CGHandBookBeastEquipStrongQualityReq::default_instance_,
      CGHandBookBeastEquipStrongQualityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongQualityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEquipStrongQualityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastEquipStrongQualityReq));
  GCHandBookBeastEquipStrongQualityRsp_descriptor_ = file->message_type(30);
  static const int GCHandBookBeastEquipStrongQualityRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongQualityRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongQualityRsp, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongQualityRsp, slot_pos_),
  };
  GCHandBookBeastEquipStrongQualityRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBeastEquipStrongQualityRsp_descriptor_,
      GCHandBookBeastEquipStrongQualityRsp::default_instance_,
      GCHandBookBeastEquipStrongQualityRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongQualityRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastEquipStrongQualityRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBeastEquipStrongQualityRsp));
  CGHandBookBeastEnterBattleReq_descriptor_ = file->message_type(31);
  static const int CGHandBookBeastEnterBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleReq, beast_id_),
  };
  CGHandBookBeastEnterBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastEnterBattleReq_descriptor_,
      CGHandBookBeastEnterBattleReq::default_instance_,
      CGHandBookBeastEnterBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastEnterBattleReq));
  CGHandBookBeastEnterBattleRsp_descriptor_ = file->message_type(32);
  static const int CGHandBookBeastEnterBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleRsp, slot_data_),
  };
  CGHandBookBeastEnterBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastEnterBattleRsp_descriptor_,
      CGHandBookBeastEnterBattleRsp::default_instance_,
      CGHandBookBeastEnterBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastEnterBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastEnterBattleRsp));
  CGHandBookBeastQuitBattleReq_descriptor_ = file->message_type(33);
  static const int CGHandBookBeastQuitBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastQuitBattleReq, battle_slot_),
  };
  CGHandBookBeastQuitBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBeastQuitBattleReq_descriptor_,
      CGHandBookBeastQuitBattleReq::default_instance_,
      CGHandBookBeastQuitBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastQuitBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBeastQuitBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBeastQuitBattleReq));
  GCHandBookBeastQuitBattleRsp_descriptor_ = file->message_type(34);
  static const int GCHandBookBeastQuitBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastQuitBattleRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastQuitBattleRsp, slot_data_),
  };
  GCHandBookBeastQuitBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBeastQuitBattleRsp_descriptor_,
      GCHandBookBeastQuitBattleRsp::default_instance_,
      GCHandBookBeastQuitBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastQuitBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBeastQuitBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBeastQuitBattleRsp));
  CGHandBookBattleSlotUnlockReq_descriptor_ = file->message_type(35);
  static const int CGHandBookBattleSlotUnlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBattleSlotUnlockReq, battle_slot_),
  };
  CGHandBookBattleSlotUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHandBookBattleSlotUnlockReq_descriptor_,
      CGHandBookBattleSlotUnlockReq::default_instance_,
      CGHandBookBattleSlotUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBattleSlotUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHandBookBattleSlotUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHandBookBattleSlotUnlockReq));
  GCHandBookBattleSlotUnlockRsp_descriptor_ = file->message_type(36);
  static const int GCHandBookBattleSlotUnlockRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBattleSlotUnlockRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBattleSlotUnlockRsp, slot_data_),
  };
  GCHandBookBattleSlotUnlockRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHandBookBattleSlotUnlockRsp_descriptor_,
      GCHandBookBattleSlotUnlockRsp::default_instance_,
      GCHandBookBattleSlotUnlockRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBattleSlotUnlockRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHandBookBattleSlotUnlockRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHandBookBattleSlotUnlockRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HandBook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookInfoReq_descriptor_, &CLHandBookInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookInfoRsp_descriptor_, &LCHandBookInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookActiveReq_descriptor_, &CLHandBookActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookActiveRsp_descriptor_, &LCHandBookActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookLevelUpReq_descriptor_, &CLHandBookLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookLevelUpRsp_descriptor_, &LCHandBookLevelUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookStarUpReq_descriptor_, &CLHandBookStarUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookStarUpRsp_descriptor_, &LCHandBookStarUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookDecomposeReq_descriptor_, &CLHandBookDecomposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookDecomposeRsp_descriptor_, &LCHandBookDecomposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandleBookFettersReq_descriptor_, &CLHandleBookFettersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandleBookFettersRsp_descriptor_, &LCHandleBookFettersRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandleBookFettersActiveReq_descriptor_, &CLHandleBookFettersActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandleBookFettersActiveRsp_descriptor_, &LCHandleBookFettersActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookEmployInfoReq_descriptor_, &CLHandBookEmployInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookEmployInfoRsp_descriptor_, &LCHandBookEmployInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLHandBookEmployActiveReq_descriptor_, &CLHandBookEmployActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCHandBookEmployActiveRsp_descriptor_, &LCHandBookEmployActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHandBookEmployStatusChange_descriptor_, &NotifyHandBookEmployStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHandBookTableStatusChange_descriptor_, &NotifyHandBookTableStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastInfoReq_descriptor_, &CGHandBookBeastInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBeastInfoRsp_descriptor_, &GCHandBookBeastInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHandBookBeastChangeInfo_descriptor_, &NotifyHandBookBeastChangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastEquipDressReq_descriptor_, &CGHandBookBeastEquipDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBeastEquipDressRsp_descriptor_, &GCHandBookBeastEquipDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastEquipUnDressReq_descriptor_, &CGHandBookBeastEquipUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBeastEquipUnDressRsp_descriptor_, &GCHandBookBeastEquipUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastEquipStrongReq_descriptor_, &CGHandBookBeastEquipStrongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBeastEquipStrongRsp_descriptor_, &GCHandBookBeastEquipStrongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastEquipStrongQualityReq_descriptor_, &CGHandBookBeastEquipStrongQualityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBeastEquipStrongQualityRsp_descriptor_, &GCHandBookBeastEquipStrongQualityRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastEnterBattleReq_descriptor_, &CGHandBookBeastEnterBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastEnterBattleRsp_descriptor_, &CGHandBookBeastEnterBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBeastQuitBattleReq_descriptor_, &CGHandBookBeastQuitBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBeastQuitBattleRsp_descriptor_, &GCHandBookBeastQuitBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHandBookBattleSlotUnlockReq_descriptor_, &CGHandBookBattleSlotUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHandBookBattleSlotUnlockRsp_descriptor_, &GCHandBookBattleSlotUnlockRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HandBook_2eproto() {
  delete CLHandBookInfoReq::default_instance_;
  delete CLHandBookInfoReq_reflection_;
  delete LCHandBookInfoRsp::default_instance_;
  delete LCHandBookInfoRsp_reflection_;
  delete CLHandBookActiveReq::default_instance_;
  delete CLHandBookActiveReq_reflection_;
  delete LCHandBookActiveRsp::default_instance_;
  delete LCHandBookActiveRsp_reflection_;
  delete CLHandBookLevelUpReq::default_instance_;
  delete CLHandBookLevelUpReq_reflection_;
  delete LCHandBookLevelUpRsp::default_instance_;
  delete LCHandBookLevelUpRsp_reflection_;
  delete CLHandBookStarUpReq::default_instance_;
  delete CLHandBookStarUpReq_reflection_;
  delete LCHandBookStarUpRsp::default_instance_;
  delete LCHandBookStarUpRsp_reflection_;
  delete CLHandBookDecomposeReq::default_instance_;
  delete CLHandBookDecomposeReq_reflection_;
  delete LCHandBookDecomposeRsp::default_instance_;
  delete LCHandBookDecomposeRsp_reflection_;
  delete CLHandleBookFettersReq::default_instance_;
  delete CLHandleBookFettersReq_reflection_;
  delete LCHandleBookFettersRsp::default_instance_;
  delete LCHandleBookFettersRsp_reflection_;
  delete CLHandleBookFettersActiveReq::default_instance_;
  delete CLHandleBookFettersActiveReq_reflection_;
  delete LCHandleBookFettersActiveRsp::default_instance_;
  delete LCHandleBookFettersActiveRsp_reflection_;
  delete CLHandBookEmployInfoReq::default_instance_;
  delete CLHandBookEmployInfoReq_reflection_;
  delete LCHandBookEmployInfoRsp::default_instance_;
  delete LCHandBookEmployInfoRsp_reflection_;
  delete CLHandBookEmployActiveReq::default_instance_;
  delete CLHandBookEmployActiveReq_reflection_;
  delete LCHandBookEmployActiveRsp::default_instance_;
  delete LCHandBookEmployActiveRsp_reflection_;
  delete NotifyHandBookEmployStatusChange::default_instance_;
  delete NotifyHandBookEmployStatusChange_reflection_;
  delete NotifyHandBookTableStatusChange::default_instance_;
  delete NotifyHandBookTableStatusChange_reflection_;
  delete CGHandBookBeastInfoReq::default_instance_;
  delete CGHandBookBeastInfoReq_reflection_;
  delete GCHandBookBeastInfoRsp::default_instance_;
  delete GCHandBookBeastInfoRsp_reflection_;
  delete NotifyHandBookBeastChangeInfo::default_instance_;
  delete NotifyHandBookBeastChangeInfo_reflection_;
  delete CGHandBookBeastEquipDressReq::default_instance_;
  delete CGHandBookBeastEquipDressReq_reflection_;
  delete GCHandBookBeastEquipDressRsp::default_instance_;
  delete GCHandBookBeastEquipDressRsp_reflection_;
  delete CGHandBookBeastEquipUnDressReq::default_instance_;
  delete CGHandBookBeastEquipUnDressReq_reflection_;
  delete GCHandBookBeastEquipUnDressRsp::default_instance_;
  delete GCHandBookBeastEquipUnDressRsp_reflection_;
  delete CGHandBookBeastEquipStrongReq::default_instance_;
  delete CGHandBookBeastEquipStrongReq_reflection_;
  delete GCHandBookBeastEquipStrongRsp::default_instance_;
  delete GCHandBookBeastEquipStrongRsp_reflection_;
  delete CGHandBookBeastEquipStrongQualityReq::default_instance_;
  delete CGHandBookBeastEquipStrongQualityReq_reflection_;
  delete GCHandBookBeastEquipStrongQualityRsp::default_instance_;
  delete GCHandBookBeastEquipStrongQualityRsp_reflection_;
  delete CGHandBookBeastEnterBattleReq::default_instance_;
  delete CGHandBookBeastEnterBattleReq_reflection_;
  delete CGHandBookBeastEnterBattleRsp::default_instance_;
  delete CGHandBookBeastEnterBattleRsp_reflection_;
  delete CGHandBookBeastQuitBattleReq::default_instance_;
  delete CGHandBookBeastQuitBattleReq_reflection_;
  delete GCHandBookBeastQuitBattleRsp::default_instance_;
  delete GCHandBookBeastQuitBattleRsp_reflection_;
  delete CGHandBookBattleSlotUnlockReq::default_instance_;
  delete CGHandBookBattleSlotUnlockReq_reflection_;
  delete GCHandBookBattleSlotUnlockRsp::default_instance_;
  delete GCHandBookBattleSlotUnlockRsp_reflection_;
}

void protobuf_AddDesc_HandBook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016HandBook.proto\022\010proto_ff\032\tCom.proto\032\017C"
    "omDefine.proto\"\023\n\021CLHandBookInfoReq\";\n\021L"
    "CHandBookInfoRsp\022&\n\004info\030\001 \003(\0132\030.proto_f"
    "f.HandBookPBInfo\"!\n\023CLHandBookActiveReq\022"
    "\n\n\002id\030\001 \001(\004\"O\n\023LCHandBookActiveRsp\022\020\n\010re"
    "t_code\030\001 \001(\005\022&\n\004data\030\002 \001(\0132\030.proto_ff.Ha"
    "ndBookPBInfo\"\"\n\024CLHandBookLevelUpReq\022\n\n\002"
    "id\030\001 \001(\004\"P\n\024LCHandBookLevelUpRsp\022\020\n\010ret_"
    "code\030\001 \001(\005\022&\n\004data\030\002 \001(\0132\030.proto_ff.Hand"
    "BookPBInfo\"!\n\023CLHandBookStarUpReq\022\n\n\002id\030"
    "\001 \001(\004\"O\n\023LCHandBookStarUpRsp\022\020\n\010ret_code"
    "\030\001 \001(\005\022&\n\004data\030\002 \001(\0132\030.proto_ff.HandBook"
    "PBInfo\"*\n\026CLHandBookDecomposeReq\022\020\n\010grid"
    "list\030\001 \003(\r\"*\n\026LCHandBookDecomposeRsp\022\020\n\010"
    "ret_code\030\001 \001(\005\"\030\n\026CLHandleBookFettersReq"
    "\"*\n\026LCHandleBookFettersRsp\022\020\n\010fellters\030\001"
    " \003(\004\"*\n\034CLHandleBookFettersActiveReq\022\n\n\002"
    "id\030\001 \001(\004\"<\n\034LCHandleBookFettersActiveRsp"
    "\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\004\"\031\n\027CLHand"
    "BookEmployInfoReq\"y\n\027LCHandBookEmployInf"
    "oRsp\022/\n\007employs\030\001 \003(\0132\036.proto_ff.HandBoo"
    "kEmployPBInfo\022-\n\006tables\030\002 \003(\0132\035.proto_ff"
    ".HandBookTablePBInfo\"\'\n\031CLHandBookEmploy"
    "ActiveReq\022\n\n\002id\030\001 \001(\004\"-\n\031LCHandBookEmplo"
    "yActiveRsp\022\020\n\010ret_code\030\001 \001(\005\"P\n NotifyHa"
    "ndBookEmployStatusChange\022,\n\004info\030\001 \001(\0132\036"
    ".proto_ff.HandBookEmployPBInfo\"N\n\037Notify"
    "HandBookTableStatusChange\022+\n\004info\030\001 \001(\0132"
    "\035.proto_ff.HandBookTablePBInfo\"\030\n\026CGHand"
    "BookBeastInfoReq\"\224\001\n\026GCHandBookBeastInfo"
    "Rsp\022-\n\006beasts\030\001 \003(\0132\035.proto_ff.HandBookB"
    "eastPBData\0224\n\005slots\030\002 \003(\0132%.proto_ff.Han"
    "dBookBeastBattleSlotData\022\025\n\rbeast_priv_i"
    "d\030\003 \001(\004\"M\n\035NotifyHandBookBeastChangeInfo"
    "\022,\n\005beast\030\001 \001(\0132\035.proto_ff.HandBookBeast"
    "PBData\"O\n\034CGHandBookBeastEquipDressReq\022\020"
    "\n\010beast_id\030\001 \001(\004\022\017\n\007bag_pos\030\002 \003(\005\022\014\n\004typ"
    "e\030\003 \001(\r\"a\n\034GCHandBookBeastEquipDressRsp\022"
    "\020\n\010ret_code\030\001 \001(\005\022\020\n\010beast_id\030\002 \001(\004\022\017\n\007b"
    "ag_pos\030\003 \001(\005\022\014\n\004type\030\004 \001(\r\"R\n\036CGHandBook"
    "BeastEquipUnDressReq\022\020\n\010beast_id\030\001 \001(\004\022\020"
    "\n\010slot_pos\030\002 \001(\005\022\014\n\004type\030\003 \001(\r\"d\n\036GCHand"
    "BookBeastEquipUnDressRsp\022\020\n\010ret_code\030\001 \001"
    "(\005\022\020\n\010beast_id\030\002 \001(\004\022\020\n\010slot_pos\030\003 \001(\005\022\014"
    "\n\004type\030\004 \001(\r\"U\n\035CGHandBookBeastEquipStro"
    "ngReq\022\020\n\010beast_id\030\001 \001(\004\022\020\n\010slot_pos\030\002 \001("
    "\005\022\020\n\010gridlist\030\003 \003(\r\"U\n\035GCHandBookBeastEq"
    "uipStrongRsp\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010beast_"
    "id\030\002 \001(\004\022\020\n\010slot_pos\030\003 \001(\005\"J\n$CGHandBook"
    "BeastEquipStrongQualityReq\022\020\n\010beast_id\030\001"
    " \001(\004\022\020\n\010slot_pos\030\002 \001(\005\"\\\n$GCHandBookBeas"
    "tEquipStrongQualityRsp\022\020\n\010ret_code\030\001 \001(\005"
    "\022\020\n\010beast_id\030\002 \001(\004\022\020\n\010slot_pos\030\003 \001(\005\"1\n\035"
    "CGHandBookBeastEnterBattleReq\022\020\n\010beast_i"
    "d\030\001 \001(\004\"k\n\035CGHandBookBeastEnterBattleRsp"
    "\022\020\n\010ret_code\030\001 \001(\005\0228\n\tslot_data\030\002 \001(\0132%."
    "proto_ff.HandBookBeastBattleSlotData\"3\n\034"
    "CGHandBookBeastQuitBattleReq\022\023\n\013battle_s"
    "lot\030\001 \001(\r\"j\n\034GCHandBookBeastQuitBattleRs"
    "p\022\020\n\010ret_code\030\001 \001(\005\0228\n\tslot_data\030\002 \001(\0132%"
    ".proto_ff.HandBookBeastBattleSlotData\"4\n"
    "\035CGHandBookBattleSlotUnlockReq\022\023\n\013battle"
    "_slot\030\001 \001(\r\"k\n\035GCHandBookBattleSlotUnloc"
    "kRsp\022\020\n\010ret_code\030\001 \001(\005\0228\n\tslot_data\030\002 \001("
    "\0132%.proto_ff.HandBookBeastBattleSlotData", 2600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HandBook.proto", &protobuf_RegisterTypes);
  CLHandBookInfoReq::default_instance_ = new CLHandBookInfoReq();
  LCHandBookInfoRsp::default_instance_ = new LCHandBookInfoRsp();
  CLHandBookActiveReq::default_instance_ = new CLHandBookActiveReq();
  LCHandBookActiveRsp::default_instance_ = new LCHandBookActiveRsp();
  CLHandBookLevelUpReq::default_instance_ = new CLHandBookLevelUpReq();
  LCHandBookLevelUpRsp::default_instance_ = new LCHandBookLevelUpRsp();
  CLHandBookStarUpReq::default_instance_ = new CLHandBookStarUpReq();
  LCHandBookStarUpRsp::default_instance_ = new LCHandBookStarUpRsp();
  CLHandBookDecomposeReq::default_instance_ = new CLHandBookDecomposeReq();
  LCHandBookDecomposeRsp::default_instance_ = new LCHandBookDecomposeRsp();
  CLHandleBookFettersReq::default_instance_ = new CLHandleBookFettersReq();
  LCHandleBookFettersRsp::default_instance_ = new LCHandleBookFettersRsp();
  CLHandleBookFettersActiveReq::default_instance_ = new CLHandleBookFettersActiveReq();
  LCHandleBookFettersActiveRsp::default_instance_ = new LCHandleBookFettersActiveRsp();
  CLHandBookEmployInfoReq::default_instance_ = new CLHandBookEmployInfoReq();
  LCHandBookEmployInfoRsp::default_instance_ = new LCHandBookEmployInfoRsp();
  CLHandBookEmployActiveReq::default_instance_ = new CLHandBookEmployActiveReq();
  LCHandBookEmployActiveRsp::default_instance_ = new LCHandBookEmployActiveRsp();
  NotifyHandBookEmployStatusChange::default_instance_ = new NotifyHandBookEmployStatusChange();
  NotifyHandBookTableStatusChange::default_instance_ = new NotifyHandBookTableStatusChange();
  CGHandBookBeastInfoReq::default_instance_ = new CGHandBookBeastInfoReq();
  GCHandBookBeastInfoRsp::default_instance_ = new GCHandBookBeastInfoRsp();
  NotifyHandBookBeastChangeInfo::default_instance_ = new NotifyHandBookBeastChangeInfo();
  CGHandBookBeastEquipDressReq::default_instance_ = new CGHandBookBeastEquipDressReq();
  GCHandBookBeastEquipDressRsp::default_instance_ = new GCHandBookBeastEquipDressRsp();
  CGHandBookBeastEquipUnDressReq::default_instance_ = new CGHandBookBeastEquipUnDressReq();
  GCHandBookBeastEquipUnDressRsp::default_instance_ = new GCHandBookBeastEquipUnDressRsp();
  CGHandBookBeastEquipStrongReq::default_instance_ = new CGHandBookBeastEquipStrongReq();
  GCHandBookBeastEquipStrongRsp::default_instance_ = new GCHandBookBeastEquipStrongRsp();
  CGHandBookBeastEquipStrongQualityReq::default_instance_ = new CGHandBookBeastEquipStrongQualityReq();
  GCHandBookBeastEquipStrongQualityRsp::default_instance_ = new GCHandBookBeastEquipStrongQualityRsp();
  CGHandBookBeastEnterBattleReq::default_instance_ = new CGHandBookBeastEnterBattleReq();
  CGHandBookBeastEnterBattleRsp::default_instance_ = new CGHandBookBeastEnterBattleRsp();
  CGHandBookBeastQuitBattleReq::default_instance_ = new CGHandBookBeastQuitBattleReq();
  GCHandBookBeastQuitBattleRsp::default_instance_ = new GCHandBookBeastQuitBattleRsp();
  CGHandBookBattleSlotUnlockReq::default_instance_ = new CGHandBookBattleSlotUnlockReq();
  GCHandBookBattleSlotUnlockRsp::default_instance_ = new GCHandBookBattleSlotUnlockRsp();
  CLHandBookInfoReq::default_instance_->InitAsDefaultInstance();
  LCHandBookInfoRsp::default_instance_->InitAsDefaultInstance();
  CLHandBookActiveReq::default_instance_->InitAsDefaultInstance();
  LCHandBookActiveRsp::default_instance_->InitAsDefaultInstance();
  CLHandBookLevelUpReq::default_instance_->InitAsDefaultInstance();
  LCHandBookLevelUpRsp::default_instance_->InitAsDefaultInstance();
  CLHandBookStarUpReq::default_instance_->InitAsDefaultInstance();
  LCHandBookStarUpRsp::default_instance_->InitAsDefaultInstance();
  CLHandBookDecomposeReq::default_instance_->InitAsDefaultInstance();
  LCHandBookDecomposeRsp::default_instance_->InitAsDefaultInstance();
  CLHandleBookFettersReq::default_instance_->InitAsDefaultInstance();
  LCHandleBookFettersRsp::default_instance_->InitAsDefaultInstance();
  CLHandleBookFettersActiveReq::default_instance_->InitAsDefaultInstance();
  LCHandleBookFettersActiveRsp::default_instance_->InitAsDefaultInstance();
  CLHandBookEmployInfoReq::default_instance_->InitAsDefaultInstance();
  LCHandBookEmployInfoRsp::default_instance_->InitAsDefaultInstance();
  CLHandBookEmployActiveReq::default_instance_->InitAsDefaultInstance();
  LCHandBookEmployActiveRsp::default_instance_->InitAsDefaultInstance();
  NotifyHandBookEmployStatusChange::default_instance_->InitAsDefaultInstance();
  NotifyHandBookTableStatusChange::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastInfoReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBeastInfoRsp::default_instance_->InitAsDefaultInstance();
  NotifyHandBookBeastChangeInfo::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastEquipDressReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBeastEquipDressRsp::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastEquipUnDressReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBeastEquipUnDressRsp::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastEquipStrongReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBeastEquipStrongRsp::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastEquipStrongQualityReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBeastEquipStrongQualityRsp::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastEnterBattleReq::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastEnterBattleRsp::default_instance_->InitAsDefaultInstance();
  CGHandBookBeastQuitBattleReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBeastQuitBattleRsp::default_instance_->InitAsDefaultInstance();
  CGHandBookBattleSlotUnlockReq::default_instance_->InitAsDefaultInstance();
  GCHandBookBattleSlotUnlockRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HandBook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HandBook_2eproto {
  StaticDescriptorInitializer_HandBook_2eproto() {
    protobuf_AddDesc_HandBook_2eproto();
  }
} static_descriptor_initializer_HandBook_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLHandBookInfoReq::CLHandBookInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookInfoReq::InitAsDefaultInstance() {
}

CLHandBookInfoReq::CLHandBookInfoReq(const CLHandBookInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookInfoReq::~CLHandBookInfoReq() {
  SharedDtor();
}

void CLHandBookInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookInfoReq_descriptor_;
}

const CLHandBookInfoReq& CLHandBookInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookInfoReq* CLHandBookInfoReq::default_instance_ = NULL;

CLHandBookInfoReq* CLHandBookInfoReq::New() const {
  return new CLHandBookInfoReq;
}

void CLHandBookInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLHandBookInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookInfoReq::MergeFrom(const CLHandBookInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookInfoReq::CopyFrom(const CLHandBookInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookInfoReq::IsInitialized() const {

  return true;
}

void CLHandBookInfoReq::Swap(CLHandBookInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookInfoReq_descriptor_;
  metadata.reflection = CLHandBookInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

LCHandBookInfoRsp::LCHandBookInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookInfoRsp::InitAsDefaultInstance() {
}

LCHandBookInfoRsp::LCHandBookInfoRsp(const LCHandBookInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookInfoRsp::~LCHandBookInfoRsp() {
  SharedDtor();
}

void LCHandBookInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCHandBookInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookInfoRsp_descriptor_;
}

const LCHandBookInfoRsp& LCHandBookInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookInfoRsp* LCHandBookInfoRsp::default_instance_ = NULL;

LCHandBookInfoRsp* LCHandBookInfoRsp::New() const {
  return new LCHandBookInfoRsp;
}

void LCHandBookInfoRsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.HandBookPBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.HandBookPBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.HandBookPBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.HandBookPBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookInfoRsp::MergeFrom(const LCHandBookInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookInfoRsp::CopyFrom(const LCHandBookInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookInfoRsp::IsInitialized() const {

  return true;
}

void LCHandBookInfoRsp::Swap(LCHandBookInfoRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookInfoRsp_descriptor_;
  metadata.reflection = LCHandBookInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLHandBookActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLHandBookActiveReq::CLHandBookActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookActiveReq::InitAsDefaultInstance() {
}

CLHandBookActiveReq::CLHandBookActiveReq(const CLHandBookActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookActiveReq::~CLHandBookActiveReq() {
  SharedDtor();
}

void CLHandBookActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookActiveReq_descriptor_;
}

const CLHandBookActiveReq& CLHandBookActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookActiveReq* CLHandBookActiveReq::default_instance_ = NULL;

CLHandBookActiveReq* CLHandBookActiveReq::New() const {
  return new CLHandBookActiveReq;
}

void CLHandBookActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLHandBookActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookActiveReq::MergeFrom(const CLHandBookActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookActiveReq::CopyFrom(const CLHandBookActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookActiveReq::IsInitialized() const {

  return true;
}

void CLHandBookActiveReq::Swap(CLHandBookActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookActiveReq_descriptor_;
  metadata.reflection = CLHandBookActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookActiveRsp::kRetCodeFieldNumber;
const int LCHandBookActiveRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCHandBookActiveRsp::LCHandBookActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookActiveRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::HandBookPBInfo*>(&::proto_ff::HandBookPBInfo::default_instance());
}

LCHandBookActiveRsp::LCHandBookActiveRsp(const LCHandBookActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookActiveRsp::~LCHandBookActiveRsp() {
  SharedDtor();
}

void LCHandBookActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCHandBookActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookActiveRsp_descriptor_;
}

const LCHandBookActiveRsp& LCHandBookActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookActiveRsp* LCHandBookActiveRsp::default_instance_ = NULL;

LCHandBookActiveRsp* LCHandBookActiveRsp::New() const {
  return new LCHandBookActiveRsp;
}

void LCHandBookActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::HandBookPBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.HandBookPBInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.HandBookPBInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.HandBookPBInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.HandBookPBInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookActiveRsp::MergeFrom(const LCHandBookActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::HandBookPBInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookActiveRsp::CopyFrom(const LCHandBookActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookActiveRsp::IsInitialized() const {

  return true;
}

void LCHandBookActiveRsp::Swap(LCHandBookActiveRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookActiveRsp_descriptor_;
  metadata.reflection = LCHandBookActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLHandBookLevelUpReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLHandBookLevelUpReq::CLHandBookLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookLevelUpReq::InitAsDefaultInstance() {
}

CLHandBookLevelUpReq::CLHandBookLevelUpReq(const CLHandBookLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookLevelUpReq::~CLHandBookLevelUpReq() {
  SharedDtor();
}

void CLHandBookLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookLevelUpReq_descriptor_;
}

const CLHandBookLevelUpReq& CLHandBookLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookLevelUpReq* CLHandBookLevelUpReq::default_instance_ = NULL;

CLHandBookLevelUpReq* CLHandBookLevelUpReq::New() const {
  return new CLHandBookLevelUpReq;
}

void CLHandBookLevelUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLHandBookLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookLevelUpReq::MergeFrom(const CLHandBookLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookLevelUpReq::CopyFrom(const CLHandBookLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookLevelUpReq::IsInitialized() const {

  return true;
}

void CLHandBookLevelUpReq::Swap(CLHandBookLevelUpReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookLevelUpReq_descriptor_;
  metadata.reflection = CLHandBookLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookLevelUpRsp::kRetCodeFieldNumber;
const int LCHandBookLevelUpRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCHandBookLevelUpRsp::LCHandBookLevelUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookLevelUpRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::HandBookPBInfo*>(&::proto_ff::HandBookPBInfo::default_instance());
}

LCHandBookLevelUpRsp::LCHandBookLevelUpRsp(const LCHandBookLevelUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookLevelUpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookLevelUpRsp::~LCHandBookLevelUpRsp() {
  SharedDtor();
}

void LCHandBookLevelUpRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCHandBookLevelUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookLevelUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookLevelUpRsp_descriptor_;
}

const LCHandBookLevelUpRsp& LCHandBookLevelUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookLevelUpRsp* LCHandBookLevelUpRsp::default_instance_ = NULL;

LCHandBookLevelUpRsp* LCHandBookLevelUpRsp::New() const {
  return new LCHandBookLevelUpRsp;
}

void LCHandBookLevelUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::HandBookPBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookLevelUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.HandBookPBInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookLevelUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.HandBookPBInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookLevelUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.HandBookPBInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookLevelUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.HandBookPBInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookLevelUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookLevelUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookLevelUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookLevelUpRsp::MergeFrom(const LCHandBookLevelUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::HandBookPBInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookLevelUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookLevelUpRsp::CopyFrom(const LCHandBookLevelUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookLevelUpRsp::IsInitialized() const {

  return true;
}

void LCHandBookLevelUpRsp::Swap(LCHandBookLevelUpRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookLevelUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookLevelUpRsp_descriptor_;
  metadata.reflection = LCHandBookLevelUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLHandBookStarUpReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLHandBookStarUpReq::CLHandBookStarUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookStarUpReq::InitAsDefaultInstance() {
}

CLHandBookStarUpReq::CLHandBookStarUpReq(const CLHandBookStarUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookStarUpReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookStarUpReq::~CLHandBookStarUpReq() {
  SharedDtor();
}

void CLHandBookStarUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookStarUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookStarUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookStarUpReq_descriptor_;
}

const CLHandBookStarUpReq& CLHandBookStarUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookStarUpReq* CLHandBookStarUpReq::default_instance_ = NULL;

CLHandBookStarUpReq* CLHandBookStarUpReq::New() const {
  return new CLHandBookStarUpReq;
}

void CLHandBookStarUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookStarUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLHandBookStarUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookStarUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookStarUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookStarUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookStarUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookStarUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookStarUpReq::MergeFrom(const CLHandBookStarUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookStarUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookStarUpReq::CopyFrom(const CLHandBookStarUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookStarUpReq::IsInitialized() const {

  return true;
}

void CLHandBookStarUpReq::Swap(CLHandBookStarUpReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookStarUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookStarUpReq_descriptor_;
  metadata.reflection = CLHandBookStarUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookStarUpRsp::kRetCodeFieldNumber;
const int LCHandBookStarUpRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCHandBookStarUpRsp::LCHandBookStarUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookStarUpRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::HandBookPBInfo*>(&::proto_ff::HandBookPBInfo::default_instance());
}

LCHandBookStarUpRsp::LCHandBookStarUpRsp(const LCHandBookStarUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookStarUpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookStarUpRsp::~LCHandBookStarUpRsp() {
  SharedDtor();
}

void LCHandBookStarUpRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCHandBookStarUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookStarUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookStarUpRsp_descriptor_;
}

const LCHandBookStarUpRsp& LCHandBookStarUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookStarUpRsp* LCHandBookStarUpRsp::default_instance_ = NULL;

LCHandBookStarUpRsp* LCHandBookStarUpRsp::New() const {
  return new LCHandBookStarUpRsp;
}

void LCHandBookStarUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::HandBookPBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookStarUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.HandBookPBInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookStarUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.HandBookPBInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookStarUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.HandBookPBInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookStarUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.HandBookPBInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookStarUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookStarUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookStarUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookStarUpRsp::MergeFrom(const LCHandBookStarUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::HandBookPBInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookStarUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookStarUpRsp::CopyFrom(const LCHandBookStarUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookStarUpRsp::IsInitialized() const {

  return true;
}

void LCHandBookStarUpRsp::Swap(LCHandBookStarUpRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookStarUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookStarUpRsp_descriptor_;
  metadata.reflection = LCHandBookStarUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLHandBookDecomposeReq::kGridlistFieldNumber;
#endif  // !_MSC_VER

CLHandBookDecomposeReq::CLHandBookDecomposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookDecomposeReq::InitAsDefaultInstance() {
}

CLHandBookDecomposeReq::CLHandBookDecomposeReq(const CLHandBookDecomposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookDecomposeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookDecomposeReq::~CLHandBookDecomposeReq() {
  SharedDtor();
}

void CLHandBookDecomposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookDecomposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookDecomposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookDecomposeReq_descriptor_;
}

const CLHandBookDecomposeReq& CLHandBookDecomposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookDecomposeReq* CLHandBookDecomposeReq::default_instance_ = NULL;

CLHandBookDecomposeReq* CLHandBookDecomposeReq::New() const {
  return new CLHandBookDecomposeReq;
}

void CLHandBookDecomposeReq::Clear() {
  gridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookDecomposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 gridlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_gridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_gridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLHandBookDecomposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 gridlist = 1;
  for (int i = 0; i < this->gridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->gridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookDecomposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 gridlist = 1;
  for (int i = 0; i < this->gridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->gridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookDecomposeReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 gridlist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridlist(i));
    }
    total_size += 1 * this->gridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookDecomposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookDecomposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookDecomposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookDecomposeReq::MergeFrom(const CLHandBookDecomposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridlist_.MergeFrom(from.gridlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookDecomposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookDecomposeReq::CopyFrom(const CLHandBookDecomposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookDecomposeReq::IsInitialized() const {

  return true;
}

void CLHandBookDecomposeReq::Swap(CLHandBookDecomposeReq* other) {
  if (other != this) {
    gridlist_.Swap(&other->gridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookDecomposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookDecomposeReq_descriptor_;
  metadata.reflection = CLHandBookDecomposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookDecomposeRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

LCHandBookDecomposeRsp::LCHandBookDecomposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookDecomposeRsp::InitAsDefaultInstance() {
}

LCHandBookDecomposeRsp::LCHandBookDecomposeRsp(const LCHandBookDecomposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookDecomposeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookDecomposeRsp::~LCHandBookDecomposeRsp() {
  SharedDtor();
}

void LCHandBookDecomposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCHandBookDecomposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookDecomposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookDecomposeRsp_descriptor_;
}

const LCHandBookDecomposeRsp& LCHandBookDecomposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookDecomposeRsp* LCHandBookDecomposeRsp::default_instance_ = NULL;

LCHandBookDecomposeRsp* LCHandBookDecomposeRsp::New() const {
  return new LCHandBookDecomposeRsp;
}

void LCHandBookDecomposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookDecomposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookDecomposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookDecomposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookDecomposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookDecomposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookDecomposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookDecomposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookDecomposeRsp::MergeFrom(const LCHandBookDecomposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookDecomposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookDecomposeRsp::CopyFrom(const LCHandBookDecomposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookDecomposeRsp::IsInitialized() const {

  return true;
}

void LCHandBookDecomposeRsp::Swap(LCHandBookDecomposeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookDecomposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookDecomposeRsp_descriptor_;
  metadata.reflection = LCHandBookDecomposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLHandleBookFettersReq::CLHandleBookFettersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandleBookFettersReq::InitAsDefaultInstance() {
}

CLHandleBookFettersReq::CLHandleBookFettersReq(const CLHandleBookFettersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandleBookFettersReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandleBookFettersReq::~CLHandleBookFettersReq() {
  SharedDtor();
}

void CLHandleBookFettersReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandleBookFettersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandleBookFettersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandleBookFettersReq_descriptor_;
}

const CLHandleBookFettersReq& CLHandleBookFettersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandleBookFettersReq* CLHandleBookFettersReq::default_instance_ = NULL;

CLHandleBookFettersReq* CLHandleBookFettersReq::New() const {
  return new CLHandleBookFettersReq;
}

void CLHandleBookFettersReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandleBookFettersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLHandleBookFettersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandleBookFettersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandleBookFettersReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandleBookFettersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandleBookFettersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandleBookFettersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandleBookFettersReq::MergeFrom(const CLHandleBookFettersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandleBookFettersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandleBookFettersReq::CopyFrom(const CLHandleBookFettersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandleBookFettersReq::IsInitialized() const {

  return true;
}

void CLHandleBookFettersReq::Swap(CLHandleBookFettersReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandleBookFettersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandleBookFettersReq_descriptor_;
  metadata.reflection = CLHandleBookFettersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandleBookFettersRsp::kFelltersFieldNumber;
#endif  // !_MSC_VER

LCHandleBookFettersRsp::LCHandleBookFettersRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandleBookFettersRsp::InitAsDefaultInstance() {
}

LCHandleBookFettersRsp::LCHandleBookFettersRsp(const LCHandleBookFettersRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandleBookFettersRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandleBookFettersRsp::~LCHandleBookFettersRsp() {
  SharedDtor();
}

void LCHandleBookFettersRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCHandleBookFettersRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandleBookFettersRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandleBookFettersRsp_descriptor_;
}

const LCHandleBookFettersRsp& LCHandleBookFettersRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandleBookFettersRsp* LCHandleBookFettersRsp::default_instance_ = NULL;

LCHandleBookFettersRsp* LCHandleBookFettersRsp::New() const {
  return new LCHandleBookFettersRsp;
}

void LCHandleBookFettersRsp::Clear() {
  fellters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandleBookFettersRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 fellters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fellters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_fellters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fellters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fellters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandleBookFettersRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 fellters = 1;
  for (int i = 0; i < this->fellters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->fellters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandleBookFettersRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 fellters = 1;
  for (int i = 0; i < this->fellters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->fellters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandleBookFettersRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 fellters = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fellters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fellters(i));
    }
    total_size += 1 * this->fellters_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandleBookFettersRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandleBookFettersRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandleBookFettersRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandleBookFettersRsp::MergeFrom(const LCHandleBookFettersRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fellters_.MergeFrom(from.fellters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandleBookFettersRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandleBookFettersRsp::CopyFrom(const LCHandleBookFettersRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandleBookFettersRsp::IsInitialized() const {

  return true;
}

void LCHandleBookFettersRsp::Swap(LCHandleBookFettersRsp* other) {
  if (other != this) {
    fellters_.Swap(&other->fellters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandleBookFettersRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandleBookFettersRsp_descriptor_;
  metadata.reflection = LCHandleBookFettersRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLHandleBookFettersActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLHandleBookFettersActiveReq::CLHandleBookFettersActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandleBookFettersActiveReq::InitAsDefaultInstance() {
}

CLHandleBookFettersActiveReq::CLHandleBookFettersActiveReq(const CLHandleBookFettersActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandleBookFettersActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandleBookFettersActiveReq::~CLHandleBookFettersActiveReq() {
  SharedDtor();
}

void CLHandleBookFettersActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandleBookFettersActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandleBookFettersActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandleBookFettersActiveReq_descriptor_;
}

const CLHandleBookFettersActiveReq& CLHandleBookFettersActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandleBookFettersActiveReq* CLHandleBookFettersActiveReq::default_instance_ = NULL;

CLHandleBookFettersActiveReq* CLHandleBookFettersActiveReq::New() const {
  return new CLHandleBookFettersActiveReq;
}

void CLHandleBookFettersActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandleBookFettersActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLHandleBookFettersActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandleBookFettersActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandleBookFettersActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandleBookFettersActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandleBookFettersActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandleBookFettersActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandleBookFettersActiveReq::MergeFrom(const CLHandleBookFettersActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandleBookFettersActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandleBookFettersActiveReq::CopyFrom(const CLHandleBookFettersActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandleBookFettersActiveReq::IsInitialized() const {

  return true;
}

void CLHandleBookFettersActiveReq::Swap(CLHandleBookFettersActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandleBookFettersActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandleBookFettersActiveReq_descriptor_;
  metadata.reflection = CLHandleBookFettersActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandleBookFettersActiveRsp::kRetCodeFieldNumber;
const int LCHandleBookFettersActiveRsp::kIdFieldNumber;
#endif  // !_MSC_VER

LCHandleBookFettersActiveRsp::LCHandleBookFettersActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandleBookFettersActiveRsp::InitAsDefaultInstance() {
}

LCHandleBookFettersActiveRsp::LCHandleBookFettersActiveRsp(const LCHandleBookFettersActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandleBookFettersActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandleBookFettersActiveRsp::~LCHandleBookFettersActiveRsp() {
  SharedDtor();
}

void LCHandleBookFettersActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCHandleBookFettersActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandleBookFettersActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandleBookFettersActiveRsp_descriptor_;
}

const LCHandleBookFettersActiveRsp& LCHandleBookFettersActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandleBookFettersActiveRsp* LCHandleBookFettersActiveRsp::default_instance_ = NULL;

LCHandleBookFettersActiveRsp* LCHandleBookFettersActiveRsp::New() const {
  return new LCHandleBookFettersActiveRsp;
}

void LCHandleBookFettersActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandleBookFettersActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandleBookFettersActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandleBookFettersActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandleBookFettersActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandleBookFettersActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandleBookFettersActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandleBookFettersActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandleBookFettersActiveRsp::MergeFrom(const LCHandleBookFettersActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandleBookFettersActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandleBookFettersActiveRsp::CopyFrom(const LCHandleBookFettersActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandleBookFettersActiveRsp::IsInitialized() const {

  return true;
}

void LCHandleBookFettersActiveRsp::Swap(LCHandleBookFettersActiveRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandleBookFettersActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandleBookFettersActiveRsp_descriptor_;
  metadata.reflection = LCHandleBookFettersActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLHandBookEmployInfoReq::CLHandBookEmployInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookEmployInfoReq::InitAsDefaultInstance() {
}

CLHandBookEmployInfoReq::CLHandBookEmployInfoReq(const CLHandBookEmployInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookEmployInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookEmployInfoReq::~CLHandBookEmployInfoReq() {
  SharedDtor();
}

void CLHandBookEmployInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookEmployInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookEmployInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookEmployInfoReq_descriptor_;
}

const CLHandBookEmployInfoReq& CLHandBookEmployInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookEmployInfoReq* CLHandBookEmployInfoReq::default_instance_ = NULL;

CLHandBookEmployInfoReq* CLHandBookEmployInfoReq::New() const {
  return new CLHandBookEmployInfoReq;
}

void CLHandBookEmployInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookEmployInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLHandBookEmployInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookEmployInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookEmployInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookEmployInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookEmployInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookEmployInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookEmployInfoReq::MergeFrom(const CLHandBookEmployInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookEmployInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookEmployInfoReq::CopyFrom(const CLHandBookEmployInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookEmployInfoReq::IsInitialized() const {

  return true;
}

void CLHandBookEmployInfoReq::Swap(CLHandBookEmployInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookEmployInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookEmployInfoReq_descriptor_;
  metadata.reflection = CLHandBookEmployInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookEmployInfoRsp::kEmploysFieldNumber;
const int LCHandBookEmployInfoRsp::kTablesFieldNumber;
#endif  // !_MSC_VER

LCHandBookEmployInfoRsp::LCHandBookEmployInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookEmployInfoRsp::InitAsDefaultInstance() {
}

LCHandBookEmployInfoRsp::LCHandBookEmployInfoRsp(const LCHandBookEmployInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookEmployInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookEmployInfoRsp::~LCHandBookEmployInfoRsp() {
  SharedDtor();
}

void LCHandBookEmployInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCHandBookEmployInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookEmployInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookEmployInfoRsp_descriptor_;
}

const LCHandBookEmployInfoRsp& LCHandBookEmployInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookEmployInfoRsp* LCHandBookEmployInfoRsp::default_instance_ = NULL;

LCHandBookEmployInfoRsp* LCHandBookEmployInfoRsp::New() const {
  return new LCHandBookEmployInfoRsp;
}

void LCHandBookEmployInfoRsp::Clear() {
  employs_.Clear();
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookEmployInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.HandBookEmployPBInfo employs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_employs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_employs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_employs;
        if (input->ExpectTag(18)) goto parse_tables;
        break;
      }

      // repeated .proto_ff.HandBookTablePBInfo tables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookEmployInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.HandBookEmployPBInfo employs = 1;
  for (int i = 0; i < this->employs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->employs(i), output);
  }

  // repeated .proto_ff.HandBookTablePBInfo tables = 2;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookEmployInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.HandBookEmployPBInfo employs = 1;
  for (int i = 0; i < this->employs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->employs(i), target);
  }

  // repeated .proto_ff.HandBookTablePBInfo tables = 2;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookEmployInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.HandBookEmployPBInfo employs = 1;
  total_size += 1 * this->employs_size();
  for (int i = 0; i < this->employs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->employs(i));
  }

  // repeated .proto_ff.HandBookTablePBInfo tables = 2;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookEmployInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookEmployInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookEmployInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookEmployInfoRsp::MergeFrom(const LCHandBookEmployInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  employs_.MergeFrom(from.employs_);
  tables_.MergeFrom(from.tables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookEmployInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookEmployInfoRsp::CopyFrom(const LCHandBookEmployInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookEmployInfoRsp::IsInitialized() const {

  return true;
}

void LCHandBookEmployInfoRsp::Swap(LCHandBookEmployInfoRsp* other) {
  if (other != this) {
    employs_.Swap(&other->employs_);
    tables_.Swap(&other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookEmployInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookEmployInfoRsp_descriptor_;
  metadata.reflection = LCHandBookEmployInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLHandBookEmployActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLHandBookEmployActiveReq::CLHandBookEmployActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLHandBookEmployActiveReq::InitAsDefaultInstance() {
}

CLHandBookEmployActiveReq::CLHandBookEmployActiveReq(const CLHandBookEmployActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLHandBookEmployActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLHandBookEmployActiveReq::~CLHandBookEmployActiveReq() {
  SharedDtor();
}

void CLHandBookEmployActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLHandBookEmployActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLHandBookEmployActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLHandBookEmployActiveReq_descriptor_;
}

const CLHandBookEmployActiveReq& CLHandBookEmployActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CLHandBookEmployActiveReq* CLHandBookEmployActiveReq::default_instance_ = NULL;

CLHandBookEmployActiveReq* CLHandBookEmployActiveReq::New() const {
  return new CLHandBookEmployActiveReq;
}

void CLHandBookEmployActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLHandBookEmployActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLHandBookEmployActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLHandBookEmployActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLHandBookEmployActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLHandBookEmployActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLHandBookEmployActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLHandBookEmployActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLHandBookEmployActiveReq::MergeFrom(const CLHandBookEmployActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLHandBookEmployActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLHandBookEmployActiveReq::CopyFrom(const CLHandBookEmployActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLHandBookEmployActiveReq::IsInitialized() const {

  return true;
}

void CLHandBookEmployActiveReq::Swap(CLHandBookEmployActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLHandBookEmployActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLHandBookEmployActiveReq_descriptor_;
  metadata.reflection = CLHandBookEmployActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCHandBookEmployActiveRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

LCHandBookEmployActiveRsp::LCHandBookEmployActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCHandBookEmployActiveRsp::InitAsDefaultInstance() {
}

LCHandBookEmployActiveRsp::LCHandBookEmployActiveRsp(const LCHandBookEmployActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCHandBookEmployActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCHandBookEmployActiveRsp::~LCHandBookEmployActiveRsp() {
  SharedDtor();
}

void LCHandBookEmployActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCHandBookEmployActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCHandBookEmployActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCHandBookEmployActiveRsp_descriptor_;
}

const LCHandBookEmployActiveRsp& LCHandBookEmployActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

LCHandBookEmployActiveRsp* LCHandBookEmployActiveRsp::default_instance_ = NULL;

LCHandBookEmployActiveRsp* LCHandBookEmployActiveRsp::New() const {
  return new LCHandBookEmployActiveRsp;
}

void LCHandBookEmployActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCHandBookEmployActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCHandBookEmployActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCHandBookEmployActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCHandBookEmployActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCHandBookEmployActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCHandBookEmployActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCHandBookEmployActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCHandBookEmployActiveRsp::MergeFrom(const LCHandBookEmployActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCHandBookEmployActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCHandBookEmployActiveRsp::CopyFrom(const LCHandBookEmployActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCHandBookEmployActiveRsp::IsInitialized() const {

  return true;
}

void LCHandBookEmployActiveRsp::Swap(LCHandBookEmployActiveRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCHandBookEmployActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCHandBookEmployActiveRsp_descriptor_;
  metadata.reflection = LCHandBookEmployActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHandBookEmployStatusChange::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyHandBookEmployStatusChange::NotifyHandBookEmployStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHandBookEmployStatusChange::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::HandBookEmployPBInfo*>(&::proto_ff::HandBookEmployPBInfo::default_instance());
}

NotifyHandBookEmployStatusChange::NotifyHandBookEmployStatusChange(const NotifyHandBookEmployStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHandBookEmployStatusChange::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHandBookEmployStatusChange::~NotifyHandBookEmployStatusChange() {
  SharedDtor();
}

void NotifyHandBookEmployStatusChange::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifyHandBookEmployStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHandBookEmployStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHandBookEmployStatusChange_descriptor_;
}

const NotifyHandBookEmployStatusChange& NotifyHandBookEmployStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

NotifyHandBookEmployStatusChange* NotifyHandBookEmployStatusChange::default_instance_ = NULL;

NotifyHandBookEmployStatusChange* NotifyHandBookEmployStatusChange::New() const {
  return new NotifyHandBookEmployStatusChange;
}

void NotifyHandBookEmployStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::HandBookEmployPBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHandBookEmployStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HandBookEmployPBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHandBookEmployStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HandBookEmployPBInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHandBookEmployStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HandBookEmployPBInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHandBookEmployStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HandBookEmployPBInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHandBookEmployStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHandBookEmployStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHandBookEmployStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHandBookEmployStatusChange::MergeFrom(const NotifyHandBookEmployStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::HandBookEmployPBInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHandBookEmployStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHandBookEmployStatusChange::CopyFrom(const NotifyHandBookEmployStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHandBookEmployStatusChange::IsInitialized() const {

  return true;
}

void NotifyHandBookEmployStatusChange::Swap(NotifyHandBookEmployStatusChange* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHandBookEmployStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHandBookEmployStatusChange_descriptor_;
  metadata.reflection = NotifyHandBookEmployStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHandBookTableStatusChange::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyHandBookTableStatusChange::NotifyHandBookTableStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHandBookTableStatusChange::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::HandBookTablePBInfo*>(&::proto_ff::HandBookTablePBInfo::default_instance());
}

NotifyHandBookTableStatusChange::NotifyHandBookTableStatusChange(const NotifyHandBookTableStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHandBookTableStatusChange::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHandBookTableStatusChange::~NotifyHandBookTableStatusChange() {
  SharedDtor();
}

void NotifyHandBookTableStatusChange::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifyHandBookTableStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHandBookTableStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHandBookTableStatusChange_descriptor_;
}

const NotifyHandBookTableStatusChange& NotifyHandBookTableStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

NotifyHandBookTableStatusChange* NotifyHandBookTableStatusChange::default_instance_ = NULL;

NotifyHandBookTableStatusChange* NotifyHandBookTableStatusChange::New() const {
  return new NotifyHandBookTableStatusChange;
}

void NotifyHandBookTableStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::HandBookTablePBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHandBookTableStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HandBookTablePBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHandBookTableStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HandBookTablePBInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHandBookTableStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HandBookTablePBInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHandBookTableStatusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HandBookTablePBInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHandBookTableStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHandBookTableStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHandBookTableStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHandBookTableStatusChange::MergeFrom(const NotifyHandBookTableStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::HandBookTablePBInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHandBookTableStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHandBookTableStatusChange::CopyFrom(const NotifyHandBookTableStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHandBookTableStatusChange::IsInitialized() const {

  return true;
}

void NotifyHandBookTableStatusChange::Swap(NotifyHandBookTableStatusChange* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHandBookTableStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHandBookTableStatusChange_descriptor_;
  metadata.reflection = NotifyHandBookTableStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGHandBookBeastInfoReq::CGHandBookBeastInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastInfoReq::InitAsDefaultInstance() {
}

CGHandBookBeastInfoReq::CGHandBookBeastInfoReq(const CGHandBookBeastInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastInfoReq::~CGHandBookBeastInfoReq() {
  SharedDtor();
}

void CGHandBookBeastInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastInfoReq_descriptor_;
}

const CGHandBookBeastInfoReq& CGHandBookBeastInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastInfoReq* CGHandBookBeastInfoReq::default_instance_ = NULL;

CGHandBookBeastInfoReq* CGHandBookBeastInfoReq::New() const {
  return new CGHandBookBeastInfoReq;
}

void CGHandBookBeastInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGHandBookBeastInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastInfoReq::MergeFrom(const CGHandBookBeastInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastInfoReq::CopyFrom(const CGHandBookBeastInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastInfoReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastInfoReq::Swap(CGHandBookBeastInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastInfoReq_descriptor_;
  metadata.reflection = CGHandBookBeastInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBeastInfoRsp::kBeastsFieldNumber;
const int GCHandBookBeastInfoRsp::kSlotsFieldNumber;
const int GCHandBookBeastInfoRsp::kBeastPrivIdFieldNumber;
#endif  // !_MSC_VER

GCHandBookBeastInfoRsp::GCHandBookBeastInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBeastInfoRsp::InitAsDefaultInstance() {
}

GCHandBookBeastInfoRsp::GCHandBookBeastInfoRsp(const GCHandBookBeastInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBeastInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  beast_priv_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBeastInfoRsp::~GCHandBookBeastInfoRsp() {
  SharedDtor();
}

void GCHandBookBeastInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHandBookBeastInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBeastInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBeastInfoRsp_descriptor_;
}

const GCHandBookBeastInfoRsp& GCHandBookBeastInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBeastInfoRsp* GCHandBookBeastInfoRsp::default_instance_ = NULL;

GCHandBookBeastInfoRsp* GCHandBookBeastInfoRsp::New() const {
  return new GCHandBookBeastInfoRsp;
}

void GCHandBookBeastInfoRsp::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    beast_priv_id_ = GOOGLE_ULONGLONG(0);
  }
  beasts_.Clear();
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBeastInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.HandBookBeastPBData beasts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beasts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beasts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_beasts;
        if (input->ExpectTag(18)) goto parse_slots;
        break;
      }

      // repeated .proto_ff.HandBookBeastBattleSlotData slots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slots;
        if (input->ExpectTag(24)) goto parse_beast_priv_id;
        break;
      }

      // optional uint64 beast_priv_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_priv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_priv_id_)));
          set_has_beast_priv_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBeastInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.HandBookBeastPBData beasts = 1;
  for (int i = 0; i < this->beasts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beasts(i), output);
  }

  // repeated .proto_ff.HandBookBeastBattleSlotData slots = 2;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slots(i), output);
  }

  // optional uint64 beast_priv_id = 3;
  if (has_beast_priv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->beast_priv_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBeastInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.HandBookBeastPBData beasts = 1;
  for (int i = 0; i < this->beasts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beasts(i), target);
  }

  // repeated .proto_ff.HandBookBeastBattleSlotData slots = 2;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slots(i), target);
  }

  // optional uint64 beast_priv_id = 3;
  if (has_beast_priv_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->beast_priv_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBeastInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 beast_priv_id = 3;
    if (has_beast_priv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_priv_id());
    }

  }
  // repeated .proto_ff.HandBookBeastPBData beasts = 1;
  total_size += 1 * this->beasts_size();
  for (int i = 0; i < this->beasts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beasts(i));
  }

  // repeated .proto_ff.HandBookBeastBattleSlotData slots = 2;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBeastInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBeastInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBeastInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBeastInfoRsp::MergeFrom(const GCHandBookBeastInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  beasts_.MergeFrom(from.beasts_);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_beast_priv_id()) {
      set_beast_priv_id(from.beast_priv_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBeastInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBeastInfoRsp::CopyFrom(const GCHandBookBeastInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBeastInfoRsp::IsInitialized() const {

  for (int i = 0; i < beasts_size(); i++) {
    if (!this->beasts(i).IsInitialized()) return false;
  }
  return true;
}

void GCHandBookBeastInfoRsp::Swap(GCHandBookBeastInfoRsp* other) {
  if (other != this) {
    beasts_.Swap(&other->beasts_);
    slots_.Swap(&other->slots_);
    std::swap(beast_priv_id_, other->beast_priv_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBeastInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBeastInfoRsp_descriptor_;
  metadata.reflection = GCHandBookBeastInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHandBookBeastChangeInfo::kBeastFieldNumber;
#endif  // !_MSC_VER

NotifyHandBookBeastChangeInfo::NotifyHandBookBeastChangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHandBookBeastChangeInfo::InitAsDefaultInstance() {
  beast_ = const_cast< ::proto_ff::HandBookBeastPBData*>(&::proto_ff::HandBookBeastPBData::default_instance());
}

NotifyHandBookBeastChangeInfo::NotifyHandBookBeastChangeInfo(const NotifyHandBookBeastChangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHandBookBeastChangeInfo::SharedCtor() {
  _cached_size_ = 0;
  beast_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHandBookBeastChangeInfo::~NotifyHandBookBeastChangeInfo() {
  SharedDtor();
}

void NotifyHandBookBeastChangeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete beast_;
  }
}

void NotifyHandBookBeastChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHandBookBeastChangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHandBookBeastChangeInfo_descriptor_;
}

const NotifyHandBookBeastChangeInfo& NotifyHandBookBeastChangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

NotifyHandBookBeastChangeInfo* NotifyHandBookBeastChangeInfo::default_instance_ = NULL;

NotifyHandBookBeastChangeInfo* NotifyHandBookBeastChangeInfo::New() const {
  return new NotifyHandBookBeastChangeInfo;
}

void NotifyHandBookBeastChangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beast()) {
      if (beast_ != NULL) beast_->::proto_ff::HandBookBeastPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHandBookBeastChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HandBookBeastPBData beast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHandBookBeastChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HandBookBeastPBData beast = 1;
  if (has_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHandBookBeastChangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HandBookBeastPBData beast = 1;
  if (has_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHandBookBeastChangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HandBookBeastPBData beast = 1;
    if (has_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHandBookBeastChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHandBookBeastChangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHandBookBeastChangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHandBookBeastChangeInfo::MergeFrom(const NotifyHandBookBeastChangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast()) {
      mutable_beast()->::proto_ff::HandBookBeastPBData::MergeFrom(from.beast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHandBookBeastChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHandBookBeastChangeInfo::CopyFrom(const NotifyHandBookBeastChangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHandBookBeastChangeInfo::IsInitialized() const {

  if (has_beast()) {
    if (!this->beast().IsInitialized()) return false;
  }
  return true;
}

void NotifyHandBookBeastChangeInfo::Swap(NotifyHandBookBeastChangeInfo* other) {
  if (other != this) {
    std::swap(beast_, other->beast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHandBookBeastChangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHandBookBeastChangeInfo_descriptor_;
  metadata.reflection = NotifyHandBookBeastChangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastEquipDressReq::kBeastIdFieldNumber;
const int CGHandBookBeastEquipDressReq::kBagPosFieldNumber;
const int CGHandBookBeastEquipDressReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastEquipDressReq::CGHandBookBeastEquipDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastEquipDressReq::InitAsDefaultInstance() {
}

CGHandBookBeastEquipDressReq::CGHandBookBeastEquipDressReq(const CGHandBookBeastEquipDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastEquipDressReq::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastEquipDressReq::~CGHandBookBeastEquipDressReq() {
  SharedDtor();
}

void CGHandBookBeastEquipDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastEquipDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastEquipDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastEquipDressReq_descriptor_;
}

const CGHandBookBeastEquipDressReq& CGHandBookBeastEquipDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastEquipDressReq* CGHandBookBeastEquipDressReq::default_instance_ = NULL;

CGHandBookBeastEquipDressReq* CGHandBookBeastEquipDressReq::New() const {
  return new CGHandBookBeastEquipDressReq;
}

void CGHandBookBeastEquipDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastEquipDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bag_pos;
        break;
      }

      // repeated int32 bag_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bag_pos;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastEquipDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beast_id(), output);
  }

  // repeated int32 bag_pos = 2;
  for (int i = 0; i < this->bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->bag_pos(i), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastEquipDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beast_id(), target);
  }

  // repeated int32 bag_pos = 2;
  for (int i = 0; i < this->bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->bag_pos(i), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastEquipDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated int32 bag_pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bag_pos(i));
    }
    total_size += 1 * this->bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastEquipDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastEquipDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastEquipDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastEquipDressReq::MergeFrom(const CGHandBookBeastEquipDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  bag_pos_.MergeFrom(from.bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastEquipDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastEquipDressReq::CopyFrom(const CGHandBookBeastEquipDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastEquipDressReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastEquipDressReq::Swap(CGHandBookBeastEquipDressReq* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    bag_pos_.Swap(&other->bag_pos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastEquipDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastEquipDressReq_descriptor_;
  metadata.reflection = CGHandBookBeastEquipDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBeastEquipDressRsp::kRetCodeFieldNumber;
const int GCHandBookBeastEquipDressRsp::kBeastIdFieldNumber;
const int GCHandBookBeastEquipDressRsp::kBagPosFieldNumber;
const int GCHandBookBeastEquipDressRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GCHandBookBeastEquipDressRsp::GCHandBookBeastEquipDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBeastEquipDressRsp::InitAsDefaultInstance() {
}

GCHandBookBeastEquipDressRsp::GCHandBookBeastEquipDressRsp(const GCHandBookBeastEquipDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBeastEquipDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  bag_pos_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBeastEquipDressRsp::~GCHandBookBeastEquipDressRsp() {
  SharedDtor();
}

void GCHandBookBeastEquipDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHandBookBeastEquipDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBeastEquipDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBeastEquipDressRsp_descriptor_;
}

const GCHandBookBeastEquipDressRsp& GCHandBookBeastEquipDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBeastEquipDressRsp* GCHandBookBeastEquipDressRsp::default_instance_ = NULL;

GCHandBookBeastEquipDressRsp* GCHandBookBeastEquipDressRsp::New() const {
  return new GCHandBookBeastEquipDressRsp;
}

void GCHandBookBeastEquipDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    beast_id_ = GOOGLE_ULONGLONG(0);
    bag_pos_ = 0;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBeastEquipDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_id;
        break;
      }

      // optional uint64 beast_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBeastEquipDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->beast_id(), output);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bag_pos(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBeastEquipDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->beast_id(), target);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bag_pos(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBeastEquipDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 beast_id = 2;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 bag_pos = 3;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBeastEquipDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBeastEquipDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBeastEquipDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBeastEquipDressRsp::MergeFrom(const GCHandBookBeastEquipDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBeastEquipDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBeastEquipDressRsp::CopyFrom(const GCHandBookBeastEquipDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBeastEquipDressRsp::IsInitialized() const {

  return true;
}

void GCHandBookBeastEquipDressRsp::Swap(GCHandBookBeastEquipDressRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(beast_id_, other->beast_id_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBeastEquipDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBeastEquipDressRsp_descriptor_;
  metadata.reflection = GCHandBookBeastEquipDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastEquipUnDressReq::kBeastIdFieldNumber;
const int CGHandBookBeastEquipUnDressReq::kSlotPosFieldNumber;
const int CGHandBookBeastEquipUnDressReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastEquipUnDressReq::CGHandBookBeastEquipUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastEquipUnDressReq::InitAsDefaultInstance() {
}

CGHandBookBeastEquipUnDressReq::CGHandBookBeastEquipUnDressReq(const CGHandBookBeastEquipUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastEquipUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  slot_pos_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastEquipUnDressReq::~CGHandBookBeastEquipUnDressReq() {
  SharedDtor();
}

void CGHandBookBeastEquipUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastEquipUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastEquipUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastEquipUnDressReq_descriptor_;
}

const CGHandBookBeastEquipUnDressReq& CGHandBookBeastEquipUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastEquipUnDressReq* CGHandBookBeastEquipUnDressReq::default_instance_ = NULL;

CGHandBookBeastEquipUnDressReq* CGHandBookBeastEquipUnDressReq::New() const {
  return new CGHandBookBeastEquipUnDressReq;
}

void CGHandBookBeastEquipUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_ULONGLONG(0);
    slot_pos_ = 0;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastEquipUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastEquipUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beast_id(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastEquipUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beast_id(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastEquipUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastEquipUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastEquipUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastEquipUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastEquipUnDressReq::MergeFrom(const CGHandBookBeastEquipUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastEquipUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastEquipUnDressReq::CopyFrom(const CGHandBookBeastEquipUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastEquipUnDressReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastEquipUnDressReq::Swap(CGHandBookBeastEquipUnDressReq* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastEquipUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastEquipUnDressReq_descriptor_;
  metadata.reflection = CGHandBookBeastEquipUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBeastEquipUnDressRsp::kRetCodeFieldNumber;
const int GCHandBookBeastEquipUnDressRsp::kBeastIdFieldNumber;
const int GCHandBookBeastEquipUnDressRsp::kSlotPosFieldNumber;
const int GCHandBookBeastEquipUnDressRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GCHandBookBeastEquipUnDressRsp::GCHandBookBeastEquipUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBeastEquipUnDressRsp::InitAsDefaultInstance() {
}

GCHandBookBeastEquipUnDressRsp::GCHandBookBeastEquipUnDressRsp(const GCHandBookBeastEquipUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBeastEquipUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  slot_pos_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBeastEquipUnDressRsp::~GCHandBookBeastEquipUnDressRsp() {
  SharedDtor();
}

void GCHandBookBeastEquipUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHandBookBeastEquipUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBeastEquipUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBeastEquipUnDressRsp_descriptor_;
}

const GCHandBookBeastEquipUnDressRsp& GCHandBookBeastEquipUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBeastEquipUnDressRsp* GCHandBookBeastEquipUnDressRsp::default_instance_ = NULL;

GCHandBookBeastEquipUnDressRsp* GCHandBookBeastEquipUnDressRsp::New() const {
  return new GCHandBookBeastEquipUnDressRsp;
}

void GCHandBookBeastEquipUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    beast_id_ = GOOGLE_ULONGLONG(0);
    slot_pos_ = 0;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBeastEquipUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_id;
        break;
      }

      // optional uint64 beast_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBeastEquipUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->beast_id(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBeastEquipUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->beast_id(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBeastEquipUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 beast_id = 2;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBeastEquipUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBeastEquipUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBeastEquipUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBeastEquipUnDressRsp::MergeFrom(const GCHandBookBeastEquipUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBeastEquipUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBeastEquipUnDressRsp::CopyFrom(const GCHandBookBeastEquipUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBeastEquipUnDressRsp::IsInitialized() const {

  return true;
}

void GCHandBookBeastEquipUnDressRsp::Swap(GCHandBookBeastEquipUnDressRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(beast_id_, other->beast_id_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBeastEquipUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBeastEquipUnDressRsp_descriptor_;
  metadata.reflection = GCHandBookBeastEquipUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastEquipStrongReq::kBeastIdFieldNumber;
const int CGHandBookBeastEquipStrongReq::kSlotPosFieldNumber;
const int CGHandBookBeastEquipStrongReq::kGridlistFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastEquipStrongReq::CGHandBookBeastEquipStrongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastEquipStrongReq::InitAsDefaultInstance() {
}

CGHandBookBeastEquipStrongReq::CGHandBookBeastEquipStrongReq(const CGHandBookBeastEquipStrongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastEquipStrongReq::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastEquipStrongReq::~CGHandBookBeastEquipStrongReq() {
  SharedDtor();
}

void CGHandBookBeastEquipStrongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastEquipStrongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastEquipStrongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastEquipStrongReq_descriptor_;
}

const CGHandBookBeastEquipStrongReq& CGHandBookBeastEquipStrongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastEquipStrongReq* CGHandBookBeastEquipStrongReq::default_instance_ = NULL;

CGHandBookBeastEquipStrongReq* CGHandBookBeastEquipStrongReq::New() const {
  return new CGHandBookBeastEquipStrongReq;
}

void CGHandBookBeastEquipStrongReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_ULONGLONG(0);
    slot_pos_ = 0;
  }
  gridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastEquipStrongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridlist;
        break;
      }

      // repeated uint32 gridlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastEquipStrongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beast_id(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // repeated uint32 gridlist = 3;
  for (int i = 0; i < this->gridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastEquipStrongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beast_id(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // repeated uint32 gridlist = 3;
  for (int i = 0; i < this->gridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastEquipStrongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  // repeated uint32 gridlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridlist(i));
    }
    total_size += 1 * this->gridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastEquipStrongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastEquipStrongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastEquipStrongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastEquipStrongReq::MergeFrom(const CGHandBookBeastEquipStrongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridlist_.MergeFrom(from.gridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastEquipStrongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastEquipStrongReq::CopyFrom(const CGHandBookBeastEquipStrongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastEquipStrongReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastEquipStrongReq::Swap(CGHandBookBeastEquipStrongReq* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(slot_pos_, other->slot_pos_);
    gridlist_.Swap(&other->gridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastEquipStrongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastEquipStrongReq_descriptor_;
  metadata.reflection = CGHandBookBeastEquipStrongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBeastEquipStrongRsp::kRetCodeFieldNumber;
const int GCHandBookBeastEquipStrongRsp::kBeastIdFieldNumber;
const int GCHandBookBeastEquipStrongRsp::kSlotPosFieldNumber;
#endif  // !_MSC_VER

GCHandBookBeastEquipStrongRsp::GCHandBookBeastEquipStrongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBeastEquipStrongRsp::InitAsDefaultInstance() {
}

GCHandBookBeastEquipStrongRsp::GCHandBookBeastEquipStrongRsp(const GCHandBookBeastEquipStrongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBeastEquipStrongRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBeastEquipStrongRsp::~GCHandBookBeastEquipStrongRsp() {
  SharedDtor();
}

void GCHandBookBeastEquipStrongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHandBookBeastEquipStrongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBeastEquipStrongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBeastEquipStrongRsp_descriptor_;
}

const GCHandBookBeastEquipStrongRsp& GCHandBookBeastEquipStrongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBeastEquipStrongRsp* GCHandBookBeastEquipStrongRsp::default_instance_ = NULL;

GCHandBookBeastEquipStrongRsp* GCHandBookBeastEquipStrongRsp::New() const {
  return new GCHandBookBeastEquipStrongRsp;
}

void GCHandBookBeastEquipStrongRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    beast_id_ = GOOGLE_ULONGLONG(0);
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBeastEquipStrongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_id;
        break;
      }

      // optional uint64 beast_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBeastEquipStrongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->beast_id(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBeastEquipStrongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->beast_id(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBeastEquipStrongRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 beast_id = 2;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBeastEquipStrongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBeastEquipStrongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBeastEquipStrongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBeastEquipStrongRsp::MergeFrom(const GCHandBookBeastEquipStrongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBeastEquipStrongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBeastEquipStrongRsp::CopyFrom(const GCHandBookBeastEquipStrongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBeastEquipStrongRsp::IsInitialized() const {

  return true;
}

void GCHandBookBeastEquipStrongRsp::Swap(GCHandBookBeastEquipStrongRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(beast_id_, other->beast_id_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBeastEquipStrongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBeastEquipStrongRsp_descriptor_;
  metadata.reflection = GCHandBookBeastEquipStrongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastEquipStrongQualityReq::kBeastIdFieldNumber;
const int CGHandBookBeastEquipStrongQualityReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastEquipStrongQualityReq::CGHandBookBeastEquipStrongQualityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastEquipStrongQualityReq::InitAsDefaultInstance() {
}

CGHandBookBeastEquipStrongQualityReq::CGHandBookBeastEquipStrongQualityReq(const CGHandBookBeastEquipStrongQualityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastEquipStrongQualityReq::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastEquipStrongQualityReq::~CGHandBookBeastEquipStrongQualityReq() {
  SharedDtor();
}

void CGHandBookBeastEquipStrongQualityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastEquipStrongQualityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastEquipStrongQualityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastEquipStrongQualityReq_descriptor_;
}

const CGHandBookBeastEquipStrongQualityReq& CGHandBookBeastEquipStrongQualityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastEquipStrongQualityReq* CGHandBookBeastEquipStrongQualityReq::default_instance_ = NULL;

CGHandBookBeastEquipStrongQualityReq* CGHandBookBeastEquipStrongQualityReq::New() const {
  return new CGHandBookBeastEquipStrongQualityReq;
}

void CGHandBookBeastEquipStrongQualityReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_ULONGLONG(0);
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastEquipStrongQualityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastEquipStrongQualityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beast_id(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastEquipStrongQualityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beast_id(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastEquipStrongQualityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastEquipStrongQualityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastEquipStrongQualityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastEquipStrongQualityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastEquipStrongQualityReq::MergeFrom(const CGHandBookBeastEquipStrongQualityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastEquipStrongQualityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastEquipStrongQualityReq::CopyFrom(const CGHandBookBeastEquipStrongQualityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastEquipStrongQualityReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastEquipStrongQualityReq::Swap(CGHandBookBeastEquipStrongQualityReq* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastEquipStrongQualityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastEquipStrongQualityReq_descriptor_;
  metadata.reflection = CGHandBookBeastEquipStrongQualityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBeastEquipStrongQualityRsp::kRetCodeFieldNumber;
const int GCHandBookBeastEquipStrongQualityRsp::kBeastIdFieldNumber;
const int GCHandBookBeastEquipStrongQualityRsp::kSlotPosFieldNumber;
#endif  // !_MSC_VER

GCHandBookBeastEquipStrongQualityRsp::GCHandBookBeastEquipStrongQualityRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBeastEquipStrongQualityRsp::InitAsDefaultInstance() {
}

GCHandBookBeastEquipStrongQualityRsp::GCHandBookBeastEquipStrongQualityRsp(const GCHandBookBeastEquipStrongQualityRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBeastEquipStrongQualityRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBeastEquipStrongQualityRsp::~GCHandBookBeastEquipStrongQualityRsp() {
  SharedDtor();
}

void GCHandBookBeastEquipStrongQualityRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHandBookBeastEquipStrongQualityRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBeastEquipStrongQualityRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBeastEquipStrongQualityRsp_descriptor_;
}

const GCHandBookBeastEquipStrongQualityRsp& GCHandBookBeastEquipStrongQualityRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBeastEquipStrongQualityRsp* GCHandBookBeastEquipStrongQualityRsp::default_instance_ = NULL;

GCHandBookBeastEquipStrongQualityRsp* GCHandBookBeastEquipStrongQualityRsp::New() const {
  return new GCHandBookBeastEquipStrongQualityRsp;
}

void GCHandBookBeastEquipStrongQualityRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    beast_id_ = GOOGLE_ULONGLONG(0);
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBeastEquipStrongQualityRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_id;
        break;
      }

      // optional uint64 beast_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBeastEquipStrongQualityRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->beast_id(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBeastEquipStrongQualityRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 beast_id = 2;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->beast_id(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBeastEquipStrongQualityRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 beast_id = 2;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBeastEquipStrongQualityRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBeastEquipStrongQualityRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBeastEquipStrongQualityRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBeastEquipStrongQualityRsp::MergeFrom(const GCHandBookBeastEquipStrongQualityRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBeastEquipStrongQualityRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBeastEquipStrongQualityRsp::CopyFrom(const GCHandBookBeastEquipStrongQualityRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBeastEquipStrongQualityRsp::IsInitialized() const {

  return true;
}

void GCHandBookBeastEquipStrongQualityRsp::Swap(GCHandBookBeastEquipStrongQualityRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(beast_id_, other->beast_id_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBeastEquipStrongQualityRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBeastEquipStrongQualityRsp_descriptor_;
  metadata.reflection = GCHandBookBeastEquipStrongQualityRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastEnterBattleReq::kBeastIdFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastEnterBattleReq::CGHandBookBeastEnterBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastEnterBattleReq::InitAsDefaultInstance() {
}

CGHandBookBeastEnterBattleReq::CGHandBookBeastEnterBattleReq(const CGHandBookBeastEnterBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastEnterBattleReq::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastEnterBattleReq::~CGHandBookBeastEnterBattleReq() {
  SharedDtor();
}

void CGHandBookBeastEnterBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastEnterBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastEnterBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastEnterBattleReq_descriptor_;
}

const CGHandBookBeastEnterBattleReq& CGHandBookBeastEnterBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastEnterBattleReq* CGHandBookBeastEnterBattleReq::default_instance_ = NULL;

CGHandBookBeastEnterBattleReq* CGHandBookBeastEnterBattleReq::New() const {
  return new CGHandBookBeastEnterBattleReq;
}

void CGHandBookBeastEnterBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastEnterBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastEnterBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->beast_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastEnterBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->beast_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastEnterBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->beast_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastEnterBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastEnterBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastEnterBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastEnterBattleReq::MergeFrom(const CGHandBookBeastEnterBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastEnterBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastEnterBattleReq::CopyFrom(const CGHandBookBeastEnterBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastEnterBattleReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastEnterBattleReq::Swap(CGHandBookBeastEnterBattleReq* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastEnterBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastEnterBattleReq_descriptor_;
  metadata.reflection = CGHandBookBeastEnterBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastEnterBattleRsp::kRetCodeFieldNumber;
const int CGHandBookBeastEnterBattleRsp::kSlotDataFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastEnterBattleRsp::CGHandBookBeastEnterBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastEnterBattleRsp::InitAsDefaultInstance() {
  slot_data_ = const_cast< ::proto_ff::HandBookBeastBattleSlotData*>(&::proto_ff::HandBookBeastBattleSlotData::default_instance());
}

CGHandBookBeastEnterBattleRsp::CGHandBookBeastEnterBattleRsp(const CGHandBookBeastEnterBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastEnterBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  slot_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastEnterBattleRsp::~CGHandBookBeastEnterBattleRsp() {
  SharedDtor();
}

void CGHandBookBeastEnterBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete slot_data_;
  }
}

void CGHandBookBeastEnterBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastEnterBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastEnterBattleRsp_descriptor_;
}

const CGHandBookBeastEnterBattleRsp& CGHandBookBeastEnterBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastEnterBattleRsp* CGHandBookBeastEnterBattleRsp::default_instance_ = NULL;

CGHandBookBeastEnterBattleRsp* CGHandBookBeastEnterBattleRsp::New() const {
  return new CGHandBookBeastEnterBattleRsp;
}

void CGHandBookBeastEnterBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_slot_data()) {
      if (slot_data_ != NULL) slot_data_->::proto_ff::HandBookBeastBattleSlotData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastEnterBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slot_data;
        break;
      }

      // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastEnterBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
  if (has_slot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slot_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastEnterBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
  if (has_slot_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slot_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastEnterBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
    if (has_slot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastEnterBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastEnterBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastEnterBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastEnterBattleRsp::MergeFrom(const CGHandBookBeastEnterBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_slot_data()) {
      mutable_slot_data()->::proto_ff::HandBookBeastBattleSlotData::MergeFrom(from.slot_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastEnterBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastEnterBattleRsp::CopyFrom(const CGHandBookBeastEnterBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastEnterBattleRsp::IsInitialized() const {

  return true;
}

void CGHandBookBeastEnterBattleRsp::Swap(CGHandBookBeastEnterBattleRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(slot_data_, other->slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastEnterBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastEnterBattleRsp_descriptor_;
  metadata.reflection = CGHandBookBeastEnterBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBeastQuitBattleReq::kBattleSlotFieldNumber;
#endif  // !_MSC_VER

CGHandBookBeastQuitBattleReq::CGHandBookBeastQuitBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBeastQuitBattleReq::InitAsDefaultInstance() {
}

CGHandBookBeastQuitBattleReq::CGHandBookBeastQuitBattleReq(const CGHandBookBeastQuitBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBeastQuitBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battle_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBeastQuitBattleReq::~CGHandBookBeastQuitBattleReq() {
  SharedDtor();
}

void CGHandBookBeastQuitBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBeastQuitBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBeastQuitBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBeastQuitBattleReq_descriptor_;
}

const CGHandBookBeastQuitBattleReq& CGHandBookBeastQuitBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBeastQuitBattleReq* CGHandBookBeastQuitBattleReq::default_instance_ = NULL;

CGHandBookBeastQuitBattleReq* CGHandBookBeastQuitBattleReq::New() const {
  return new CGHandBookBeastQuitBattleReq;
}

void CGHandBookBeastQuitBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBeastQuitBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battle_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_slot_)));
          set_has_battle_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBeastQuitBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 battle_slot = 1;
  if (has_battle_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBeastQuitBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 battle_slot = 1;
  if (has_battle_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBeastQuitBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 battle_slot = 1;
    if (has_battle_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBeastQuitBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBeastQuitBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBeastQuitBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBeastQuitBattleReq::MergeFrom(const CGHandBookBeastQuitBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_slot()) {
      set_battle_slot(from.battle_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBeastQuitBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBeastQuitBattleReq::CopyFrom(const CGHandBookBeastQuitBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBeastQuitBattleReq::IsInitialized() const {

  return true;
}

void CGHandBookBeastQuitBattleReq::Swap(CGHandBookBeastQuitBattleReq* other) {
  if (other != this) {
    std::swap(battle_slot_, other->battle_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBeastQuitBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBeastQuitBattleReq_descriptor_;
  metadata.reflection = CGHandBookBeastQuitBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBeastQuitBattleRsp::kRetCodeFieldNumber;
const int GCHandBookBeastQuitBattleRsp::kSlotDataFieldNumber;
#endif  // !_MSC_VER

GCHandBookBeastQuitBattleRsp::GCHandBookBeastQuitBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBeastQuitBattleRsp::InitAsDefaultInstance() {
  slot_data_ = const_cast< ::proto_ff::HandBookBeastBattleSlotData*>(&::proto_ff::HandBookBeastBattleSlotData::default_instance());
}

GCHandBookBeastQuitBattleRsp::GCHandBookBeastQuitBattleRsp(const GCHandBookBeastQuitBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBeastQuitBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  slot_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBeastQuitBattleRsp::~GCHandBookBeastQuitBattleRsp() {
  SharedDtor();
}

void GCHandBookBeastQuitBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete slot_data_;
  }
}

void GCHandBookBeastQuitBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBeastQuitBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBeastQuitBattleRsp_descriptor_;
}

const GCHandBookBeastQuitBattleRsp& GCHandBookBeastQuitBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBeastQuitBattleRsp* GCHandBookBeastQuitBattleRsp::default_instance_ = NULL;

GCHandBookBeastQuitBattleRsp* GCHandBookBeastQuitBattleRsp::New() const {
  return new GCHandBookBeastQuitBattleRsp;
}

void GCHandBookBeastQuitBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_slot_data()) {
      if (slot_data_ != NULL) slot_data_->::proto_ff::HandBookBeastBattleSlotData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBeastQuitBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slot_data;
        break;
      }

      // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBeastQuitBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
  if (has_slot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slot_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBeastQuitBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
  if (has_slot_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slot_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBeastQuitBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
    if (has_slot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBeastQuitBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBeastQuitBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBeastQuitBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBeastQuitBattleRsp::MergeFrom(const GCHandBookBeastQuitBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_slot_data()) {
      mutable_slot_data()->::proto_ff::HandBookBeastBattleSlotData::MergeFrom(from.slot_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBeastQuitBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBeastQuitBattleRsp::CopyFrom(const GCHandBookBeastQuitBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBeastQuitBattleRsp::IsInitialized() const {

  return true;
}

void GCHandBookBeastQuitBattleRsp::Swap(GCHandBookBeastQuitBattleRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(slot_data_, other->slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBeastQuitBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBeastQuitBattleRsp_descriptor_;
  metadata.reflection = GCHandBookBeastQuitBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHandBookBattleSlotUnlockReq::kBattleSlotFieldNumber;
#endif  // !_MSC_VER

CGHandBookBattleSlotUnlockReq::CGHandBookBattleSlotUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGHandBookBattleSlotUnlockReq::InitAsDefaultInstance() {
}

CGHandBookBattleSlotUnlockReq::CGHandBookBattleSlotUnlockReq(const CGHandBookBattleSlotUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGHandBookBattleSlotUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  battle_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHandBookBattleSlotUnlockReq::~CGHandBookBattleSlotUnlockReq() {
  SharedDtor();
}

void CGHandBookBattleSlotUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHandBookBattleSlotUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHandBookBattleSlotUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHandBookBattleSlotUnlockReq_descriptor_;
}

const CGHandBookBattleSlotUnlockReq& CGHandBookBattleSlotUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

CGHandBookBattleSlotUnlockReq* CGHandBookBattleSlotUnlockReq::default_instance_ = NULL;

CGHandBookBattleSlotUnlockReq* CGHandBookBattleSlotUnlockReq::New() const {
  return new CGHandBookBattleSlotUnlockReq;
}

void CGHandBookBattleSlotUnlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHandBookBattleSlotUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battle_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_slot_)));
          set_has_battle_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGHandBookBattleSlotUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 battle_slot = 1;
  if (has_battle_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGHandBookBattleSlotUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 battle_slot = 1;
  if (has_battle_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGHandBookBattleSlotUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 battle_slot = 1;
    if (has_battle_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHandBookBattleSlotUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHandBookBattleSlotUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHandBookBattleSlotUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHandBookBattleSlotUnlockReq::MergeFrom(const CGHandBookBattleSlotUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_slot()) {
      set_battle_slot(from.battle_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHandBookBattleSlotUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHandBookBattleSlotUnlockReq::CopyFrom(const CGHandBookBattleSlotUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandBookBattleSlotUnlockReq::IsInitialized() const {

  return true;
}

void CGHandBookBattleSlotUnlockReq::Swap(CGHandBookBattleSlotUnlockReq* other) {
  if (other != this) {
    std::swap(battle_slot_, other->battle_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHandBookBattleSlotUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHandBookBattleSlotUnlockReq_descriptor_;
  metadata.reflection = CGHandBookBattleSlotUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHandBookBattleSlotUnlockRsp::kRetCodeFieldNumber;
const int GCHandBookBattleSlotUnlockRsp::kSlotDataFieldNumber;
#endif  // !_MSC_VER

GCHandBookBattleSlotUnlockRsp::GCHandBookBattleSlotUnlockRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCHandBookBattleSlotUnlockRsp::InitAsDefaultInstance() {
  slot_data_ = const_cast< ::proto_ff::HandBookBeastBattleSlotData*>(&::proto_ff::HandBookBeastBattleSlotData::default_instance());
}

GCHandBookBattleSlotUnlockRsp::GCHandBookBattleSlotUnlockRsp(const GCHandBookBattleSlotUnlockRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCHandBookBattleSlotUnlockRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  slot_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHandBookBattleSlotUnlockRsp::~GCHandBookBattleSlotUnlockRsp() {
  SharedDtor();
}

void GCHandBookBattleSlotUnlockRsp::SharedDtor() {
  if (this != default_instance_) {
    delete slot_data_;
  }
}

void GCHandBookBattleSlotUnlockRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHandBookBattleSlotUnlockRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHandBookBattleSlotUnlockRsp_descriptor_;
}

const GCHandBookBattleSlotUnlockRsp& GCHandBookBattleSlotUnlockRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HandBook_2eproto();
  return *default_instance_;
}

GCHandBookBattleSlotUnlockRsp* GCHandBookBattleSlotUnlockRsp::default_instance_ = NULL;

GCHandBookBattleSlotUnlockRsp* GCHandBookBattleSlotUnlockRsp::New() const {
  return new GCHandBookBattleSlotUnlockRsp;
}

void GCHandBookBattleSlotUnlockRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_slot_data()) {
      if (slot_data_ != NULL) slot_data_->::proto_ff::HandBookBeastBattleSlotData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHandBookBattleSlotUnlockRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slot_data;
        break;
      }

      // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCHandBookBattleSlotUnlockRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
  if (has_slot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slot_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCHandBookBattleSlotUnlockRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
  if (has_slot_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slot_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCHandBookBattleSlotUnlockRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.HandBookBeastBattleSlotData slot_data = 2;
    if (has_slot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHandBookBattleSlotUnlockRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHandBookBattleSlotUnlockRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHandBookBattleSlotUnlockRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHandBookBattleSlotUnlockRsp::MergeFrom(const GCHandBookBattleSlotUnlockRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_slot_data()) {
      mutable_slot_data()->::proto_ff::HandBookBeastBattleSlotData::MergeFrom(from.slot_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHandBookBattleSlotUnlockRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHandBookBattleSlotUnlockRsp::CopyFrom(const GCHandBookBattleSlotUnlockRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandBookBattleSlotUnlockRsp::IsInitialized() const {

  return true;
}

void GCHandBookBattleSlotUnlockRsp::Swap(GCHandBookBattleSlotUnlockRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(slot_data_, other->slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHandBookBattleSlotUnlockRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHandBookBattleSlotUnlockRsp_descriptor_;
  metadata.reflection = GCHandBookBattleSlotUnlockRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
