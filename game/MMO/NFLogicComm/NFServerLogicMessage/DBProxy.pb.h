// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProxy.proto

#ifndef PROTOBUF_DBProxy_2eproto__INCLUDED
#define PROTOBUF_DBProxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DBProxy_2eproto();
void protobuf_AssignDesc_DBProxy_2eproto();
void protobuf_ShutdownFile_DBProxy_2eproto();

class RoleReliveProto;
class RoleDBBaseData;
class BagItemsDBData;
class BagDBSimpleData;
class RoleDBUnitBagData;
class RoleDBBagData;
class RoleDBEquipData;
class RoleDBTaskData;
class GrowPartEntryDBInfo;
class GrowPartDBData;
class GrowDBData;
class DayUseItemData;
class CharacterArenaData;
class MiniDBData;
class FacadeDataInfo;
class MountDataInfo;
class DeityDataInfo;
class FacadeDBData;
class SkillDBInfo;
class SkillDBPos;
class SkillDBAdvPos;
class SkillDBAdvInfo;
class SkillDBGroup;
class PetSkillCdDB;
class SkillDBTalentProto;
class SkillDBTalent;
class SkillDBData;
class GodRelicsActivityData;
class MiniActivityDBData;
class DupRecord;
class DupGroupData;
class DupTowerDBRecordEntry;
class DupTowerDBRecord;
class DupTowerDBData;
class GhostDBData;
class MoyuDBData;
class YaoTaDBData;
class DupDBData;
class GhostDupRankDB;
class BuffDBInfo;
class BuffDBCdInfo;
class BuffDBShieldInfo;
class BuffDBData;
class BossSimpleInfoDB;
class BossDBData;
class VipDBData;
class AttrDBData;
class PetDBRecord;
class PetGrowDB;
class PetDBData;
class MallDBInfo;
class MallDBData;
class ConvoyData;
class ArmorDBData;
class AssistDBData;
class TitleDBData;
class GodEvilCondDBProto;
class GodEvilMultCondDBProto;
class GodEvilTaskDBProto;
class GodEvilDBData;
class PayDBData;
class FactionDBSalary;
class FactionDBDinner;
class FactionDBSkillProto;
class FactionDBSkill;
class FactionDBGuard;
class RoleFactionDBData;
class RoleBestEQDBData;
class AncientDBData;
class RoleEmblemDBInfo;
class Role1v1DBInfo;
class RolePvpDBData;
class RoleMarryExpress;
class RoleMarryDBData;
class EncylopediaDBData;
class GVBPData;
class ChargeDBData;
class GiftCondDBProto;
class GiftZeroDBProto;
class GiftZeroLogDBProto;
class GiftDBData;
class FestSimpleDBProto;
class FestShopDBProto;
class FestSignDBProto;
class FestGoldStoreDBProto;
class FestDigEggTaskDBProto;
class FestDigEggDBProto;
class FestCandleDBProto;
class FestBtDragonDBProto;
class FestRTurnableRechargeDBProto;
class FestDailyTotalRechargeDBProto;
class FestTurnableDBProto;
class FestDonateDBProto;
class FestOnlineDBProto;
class FestCollectWordDBProto;
class FestBossFirstDB;
class FMarryRoleDB;
class DayTotalRechargeDBProto;
class TotalRechargeDBProto;
class LoginRewardDBProto;
class DayFetchInfo;
class GearFetchInfo;
class ContiRechargeDBProto;
class ShopProto;
class LimitSaleDBProto;
class MysteryDBProto;
class TaskProto;
class FestShootSunDBProto;
class FestDetailDBProto;
class FestDBData;
class ShadowDBProto;
class HaloDBProto;
class DragonDBData;
class RoleDBTurnData;
class GMADbData;
class SoulDBData;
class MoFaDBData;
class RuneDBData;
class RoleDBData;
class RedWaitDBProto;
class RedTriggerDBProto;
class RoleRedDBData;
class RedFetchDBProto;
class RedFetchListDBProto;
class RedSendDBProto;
class RedDBData;
class RoleMirrorData;
class FactionMemDBProto;
class FactionMultMemDBProto;
class FactionApplyDBProto;
class FactionMultApplyDBProto;
class FactionRecordDBProto;
class FactionMutRecordDBProto;
class FactionDBBase;
class FactionBeastHarmDBProto;
class FactionBeastDBData;
class FactionGuardHarmDBProto;
class FactionGuardDBData;
class FactionMoyu;
class FactionMagRecordDBData;
class FactionDBData;
class FactionAllDBData;
class FactionDBMoyuRankEntry;
class FactionDBMoyuRank;
class FactionDBMoyuRankDB;
class RoleListDBReq;
class RoleListDBRsp;
class CreateRoleDBReq;
class CreateRoleDBRsp;
class RoleInfoDBReq;
class RoleInfoDBRsp;
class RoleInfoUpdateDBReq;
class RoleChgNameDBReq;
class RoleChgNameDBRsp;
class RoleSimpleListDBReq;
class RoleSimpleListDBRsp;
class CreatureTransLogicDBReq;
class CreatureTransLogicDBRsp;
class NewMailDBInfo;
class MailDBOperateInfo;
class SaveMailDBReq;
class SaveMailDBRsp;
class CharacterMailDBRequest;
class CharacterMailDBResponse;
class MaxMailIDRequest;
class MaxMailIDResponse;
class DeleteCharacterMail;
class ZoneMailSaveRsp;
class ZoneMailTransCharacterMailReq;
class ZoneMailTransCharacterMailRsp;
class WebMailDBDataReq;
class WebMailDBDataRsp;
class FriendDBInfo;
class FriendDBRequest;
class FriendDBResponse;
class AllFriendDBRequest;
class AllFriendDBResponse;
class SaveFriendDBRequest;
class DelteFriendDBRequest;
class GlobalDBRequst;
class GlobalDBEntry;
class GlobalDBResponse;
class GlobalDBSetRequest;
class GlobalDBSetResponse;
class GlobalComData;
class GlobalYaotaDupDBEntry;
class GlobalYaotaDupDBData;
class GlobalFieldBossDBData;
class ActDBProto;
class ActDBReq;
class ActDBRsp;
class ActSaveDBReq;
class AllArenaDBRequest;
class ArenaDBInfo;
class ArenaMoreDBInfo;
class AllArenaDBResponse;
class SaveArenaDBRequest;
class DeleteArenaDBRequest;
class RoleMirrorDBReq;
class RoleMirrorDBRsp;
class FactionDataDBReq;
class FactionDataDBRsp;
class FactionSaveDBReq;
class FactionDelDBReq;
class FactionRedDBReq;
class FactionRedDBRsp;
class FactionRedSaveDBReq;
class FactionRedDelDBReq;
class RoleRedDBReq;
class RoleRedDBRsp;
class ComLoadDBReq;
class ComLoadDBRsp;
class ComLoadAllDBReq;
class ComDBProto;
class ComLoadAllDBRsp;
class ComSaveDBReq;
class ComDelDBReq;
class MarryApply;
class MarrySimpleInfo;
class MarryDBLoadReq;
class MarryDBLoadRsp;
class MarryDBSaveReq;
class AnswerRankDBProto;
class AnswerDBData;
class GuardRankDBProto;
class GuardDBData;
class Rank1v1DBProto;
class Act1v1DBData;
class RaceFactionDBProto;
class RaceMatchDBProto;
class RaceDBProto;
class WarRankDBProto;
class FactionWarDBData;
class DigEggLogDBProto;
class FestDigEggLogDBProto;
class FestDigEggLogDBData;
class FestRTurnableLogDBData;
class FestDonateDBData;
class FestDrawPizeLogDBData;
class GoodsDB;
class LoadGoodsReq;
class MarketDBLoadRsp;
class MarketSaveReq;
class MarketDelReq;
class CandleHarmDBProto;
class CandleDBData;

enum RoleMirrorData_Type {
  RoleMirrorData_Type_Role = 1,
  RoleMirrorData_Type_Rebot = 2,
  RoleMirrorData_Type_TeamRole = 3,
  RoleMirrorData_Type_TeamRebot = 4
};
bool RoleMirrorData_Type_IsValid(int value);
const RoleMirrorData_Type RoleMirrorData_Type_Type_MIN = RoleMirrorData_Type_Role;
const RoleMirrorData_Type RoleMirrorData_Type_Type_MAX = RoleMirrorData_Type_TeamRebot;
const int RoleMirrorData_Type_Type_ARRAYSIZE = RoleMirrorData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleMirrorData_Type_descriptor();
inline const ::std::string& RoleMirrorData_Type_Name(RoleMirrorData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleMirrorData_Type_descriptor(), value);
}
inline bool RoleMirrorData_Type_Parse(
    const ::std::string& name, RoleMirrorData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleMirrorData_Type>(
    RoleMirrorData_Type_descriptor(), name, value);
}
// ===================================================================

class RoleReliveProto : public ::google::protobuf::Message {
 public:
  RoleReliveProto();
  virtual ~RoleReliveProto();

  RoleReliveProto(const RoleReliveProto& from);

  inline RoleReliveProto& operator=(const RoleReliveProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleReliveProto& default_instance();

  void Swap(RoleReliveProto* other);

  // implements Message ----------------------------------------------

  RoleReliveProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleReliveProto& from);
  void MergeFrom(const RoleReliveProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tired_time = 1;
  inline bool has_tired_time() const;
  inline void clear_tired_time();
  static const int kTiredTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 tired_time() const;
  inline void set_tired_time(::google::protobuf::uint64 value);

  // optional int32 relive_num = 2;
  inline bool has_relive_num() const;
  inline void clear_relive_num();
  static const int kReliveNumFieldNumber = 2;
  inline ::google::protobuf::int32 relive_num() const;
  inline void set_relive_num(::google::protobuf::int32 value);

  // optional int32 is_tired = 3;
  inline bool has_is_tired() const;
  inline void clear_is_tired();
  static const int kIsTiredFieldNumber = 3;
  inline ::google::protobuf::int32 is_tired() const;
  inline void set_is_tired(::google::protobuf::int32 value);

  // optional uint64 mapid = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // optional int32 map_relive_num = 5;
  inline bool has_map_relive_num() const;
  inline void clear_map_relive_num();
  static const int kMapReliveNumFieldNumber = 5;
  inline ::google::protobuf::int32 map_relive_num() const;
  inline void set_map_relive_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleReliveProto)
 private:
  inline void set_has_tired_time();
  inline void clear_has_tired_time();
  inline void set_has_relive_num();
  inline void clear_has_relive_num();
  inline void set_has_is_tired();
  inline void clear_has_is_tired();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_map_relive_num();
  inline void clear_has_map_relive_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tired_time_;
  ::google::protobuf::int32 relive_num_;
  ::google::protobuf::int32 is_tired_;
  ::google::protobuf::uint64 mapid_;
  ::google::protobuf::int32 map_relive_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleReliveProto* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBBaseData : public ::google::protobuf::Message {
 public:
  RoleDBBaseData();
  virtual ~RoleDBBaseData();

  RoleDBBaseData(const RoleDBBaseData& from);

  inline RoleDBBaseData& operator=(const RoleDBBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBBaseData& default_instance();

  void Swap(RoleDBBaseData* other);

  // implements Message ----------------------------------------------

  RoleDBBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBBaseData& from);
  void MergeFrom(const RoleDBBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 prof = 2;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 2;
  inline ::google::protobuf::uint32 prof() const;
  inline void set_prof(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required int64 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // required int64 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int64 hp() const;
  inline void set_hp(::google::protobuf::int64 value);

  // required int64 fight = 6;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 6;
  inline ::google::protobuf::int64 fight() const;
  inline void set_fight(::google::protobuf::int64 value);

  // required uint64 createTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // required uint64 loginTime = 8;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 logintime() const;
  inline void set_logintime(::google::protobuf::uint64 value);

  // required uint64 logoutTime = 9;
  inline bool has_logouttime() const;
  inline void clear_logouttime();
  static const int kLogoutTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 logouttime() const;
  inline void set_logouttime(::google::protobuf::uint64 value);

  // required uint64 enter_scene_id = 10;
  inline bool has_enter_scene_id() const;
  inline void clear_enter_scene_id();
  static const int kEnterSceneIdFieldNumber = 10;
  inline ::google::protobuf::uint64 enter_scene_id() const;
  inline void set_enter_scene_id(::google::protobuf::uint64 value);

  // required uint64 enter_map_id = 11;
  inline bool has_enter_map_id() const;
  inline void clear_enter_map_id();
  static const int kEnterMapIdFieldNumber = 11;
  inline ::google::protobuf::uint64 enter_map_id() const;
  inline void set_enter_map_id(::google::protobuf::uint64 value);

  // required float enterposx = 12;
  inline bool has_enterposx() const;
  inline void clear_enterposx();
  static const int kEnterposxFieldNumber = 12;
  inline float enterposx() const;
  inline void set_enterposx(float value);

  // required float enterposy = 13;
  inline bool has_enterposy() const;
  inline void clear_enterposy();
  static const int kEnterposyFieldNumber = 13;
  inline float enterposy() const;
  inline void set_enterposy(float value);

  // required float enterposz = 14;
  inline bool has_enterposz() const;
  inline void clear_enterposz();
  static const int kEnterposzFieldNumber = 14;
  inline float enterposz() const;
  inline void set_enterposz(float value);

  // optional uint64 lastsceneid = 15;
  inline bool has_lastsceneid() const;
  inline void clear_lastsceneid();
  static const int kLastsceneidFieldNumber = 15;
  inline ::google::protobuf::uint64 lastsceneid() const;
  inline void set_lastsceneid(::google::protobuf::uint64 value);

  // optional uint64 lastmapid = 16;
  inline bool has_lastmapid() const;
  inline void clear_lastmapid();
  static const int kLastmapidFieldNumber = 16;
  inline ::google::protobuf::uint64 lastmapid() const;
  inline void set_lastmapid(::google::protobuf::uint64 value);

  // optional float lastposx = 17;
  inline bool has_lastposx() const;
  inline void clear_lastposx();
  static const int kLastposxFieldNumber = 17;
  inline float lastposx() const;
  inline void set_lastposx(float value);

  // optional float lastposy = 18;
  inline bool has_lastposy() const;
  inline void clear_lastposy();
  static const int kLastposyFieldNumber = 18;
  inline float lastposy() const;
  inline void set_lastposy(float value);

  // optional float lastposz = 19;
  inline bool has_lastposz() const;
  inline void clear_lastposz();
  static const int kLastposzFieldNumber = 19;
  inline float lastposz() const;
  inline void set_lastposz(float value);

  // optional .proto_ff.RoleFacadeProto facade = 20;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 20;
  inline const ::proto_ff::RoleFacadeProto& facade() const;
  inline ::proto_ff::RoleFacadeProto* mutable_facade();
  inline ::proto_ff::RoleFacadeProto* release_facade();
  inline void set_allocated_facade(::proto_ff::RoleFacadeProto* facade);

  // optional uint32 vip_level = 21;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 21;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional int32 state = 22;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 22;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional uint64 hanguptime = 23;
  inline bool has_hanguptime() const;
  inline void clear_hanguptime();
  static const int kHanguptimeFieldNumber = 23;
  inline ::google::protobuf::uint64 hanguptime() const;
  inline void set_hanguptime(::google::protobuf::uint64 value);

  // optional .proto_ff.RoleReliveProto relive = 24;
  inline bool has_relive() const;
  inline void clear_relive();
  static const int kReliveFieldNumber = 24;
  inline const ::proto_ff::RoleReliveProto& relive() const;
  inline ::proto_ff::RoleReliveProto* mutable_relive();
  inline ::proto_ff::RoleReliveProto* release_relive();
  inline void set_allocated_relive(::proto_ff::RoleReliveProto* relive);

  // optional int64 gold = 25;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 25;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 dia = 26;
  inline bool has_dia() const;
  inline void clear_dia();
  static const int kDiaFieldNumber = 26;
  inline ::google::protobuf::int64 dia() const;
  inline void set_dia(::google::protobuf::int64 value);

  // optional int64 bdia = 27;
  inline bool has_bdia() const;
  inline void clear_bdia();
  static const int kBdiaFieldNumber = 27;
  inline ::google::protobuf::int64 bdia() const;
  inline void set_bdia(::google::protobuf::int64 value);

  // optional int64 magic = 28;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 28;
  inline ::google::protobuf::int64 magic() const;
  inline void set_magic(::google::protobuf::int64 value);

  // optional int64 prestige = 29;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 29;
  inline ::google::protobuf::int64 prestige() const;
  inline void set_prestige(::google::protobuf::int64 value);

  // optional int32 contri = 30;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 30;
  inline ::google::protobuf::int32 contri() const;
  inline void set_contri(::google::protobuf::int32 value);

  // optional int64 arenacoin = 31;
  inline bool has_arenacoin() const;
  inline void clear_arenacoin();
  static const int kArenacoinFieldNumber = 31;
  inline ::google::protobuf::int64 arenacoin() const;
  inline void set_arenacoin(::google::protobuf::int64 value);

  // optional int64 godevil_exp = 32;
  inline bool has_godevil_exp() const;
  inline void clear_godevil_exp();
  static const int kGodevilExpFieldNumber = 32;
  inline ::google::protobuf::int64 godevil_exp() const;
  inline void set_godevil_exp(::google::protobuf::int64 value);

  // optional int32 godevil_level = 33;
  inline bool has_godevil_level() const;
  inline void clear_godevil_level();
  static const int kGodevilLevelFieldNumber = 33;
  inline ::google::protobuf::int32 godevil_level() const;
  inline void set_godevil_level(::google::protobuf::int32 value);

  // optional uint32 login_day = 34;
  inline bool has_login_day() const;
  inline void clear_login_day();
  static const int kLoginDayFieldNumber = 34;
  inline ::google::protobuf::uint32 login_day() const;
  inline void set_login_day(::google::protobuf::uint32 value);

  // optional uint64 login_day_time = 35;
  inline bool has_login_day_time() const;
  inline void clear_login_day_time();
  static const int kLoginDayTimeFieldNumber = 35;
  inline ::google::protobuf::uint64 login_day_time() const;
  inline void set_login_day_time(::google::protobuf::uint64 value);

  // optional int64 best_aq = 36;
  inline bool has_best_aq() const;
  inline void clear_best_aq();
  static const int kBestAqFieldNumber = 36;
  inline ::google::protobuf::int64 best_aq() const;
  inline void set_best_aq(::google::protobuf::int64 value);

  // optional int64 best_lj = 37;
  inline bool has_best_lj() const;
  inline void clear_best_lj();
  static const int kBestLjFieldNumber = 37;
  inline ::google::protobuf::int64 best_lj() const;
  inline void set_best_lj(::google::protobuf::int64 value);

  // optional uint32 day_prestige = 38;
  inline bool has_day_prestige() const;
  inline void clear_day_prestige();
  static const int kDayPrestigeFieldNumber = 38;
  inline ::google::protobuf::uint32 day_prestige() const;
  inline void set_day_prestige(::google::protobuf::uint32 value);

  // optional uint64 prestige_time = 39;
  inline bool has_prestige_time() const;
  inline void clear_prestige_time();
  static const int kPrestigeTimeFieldNumber = 39;
  inline ::google::protobuf::uint64 prestige_time() const;
  inline void set_prestige_time(::google::protobuf::uint64 value);

  // optional uint32 pt_stage = 40;
  inline bool has_pt_stage() const;
  inline void clear_pt_stage();
  static const int kPtStageFieldNumber = 40;
  inline ::google::protobuf::uint32 pt_stage() const;
  inline void set_pt_stage(::google::protobuf::uint32 value);

  // optional string guide = 41;
  inline bool has_guide() const;
  inline void clear_guide();
  static const int kGuideFieldNumber = 41;
  inline const ::std::string& guide() const;
  inline void set_guide(const ::std::string& value);
  inline void set_guide(const char* value);
  inline void set_guide(const char* value, size_t size);
  inline ::std::string* mutable_guide();
  inline ::std::string* release_guide();
  inline void set_allocated_guide(::std::string* guide);

  // optional int64 battlepass_xiance = 42;
  inline bool has_battlepass_xiance() const;
  inline void clear_battlepass_xiance();
  static const int kBattlepassXianceFieldNumber = 42;
  inline ::google::protobuf::int64 battlepass_xiance() const;
  inline void set_battlepass_xiance(::google::protobuf::int64 value);

  // optional int64 battlepass_baoding = 43;
  inline bool has_battlepass_baoding() const;
  inline void clear_battlepass_baoding();
  static const int kBattlepassBaodingFieldNumber = 43;
  inline ::google::protobuf::int64 battlepass_baoding() const;
  inline void set_battlepass_baoding(::google::protobuf::int64 value);

  // optional int64 findtreasure_shengfu = 44;
  inline bool has_findtreasure_shengfu() const;
  inline void clear_findtreasure_shengfu();
  static const int kFindtreasureShengfuFieldNumber = 44;
  inline ::google::protobuf::int64 findtreasure_shengfu() const;
  inline void set_findtreasure_shengfu(::google::protobuf::int64 value);

  // optional int64 findtreasure_battlesoul = 45;
  inline bool has_findtreasure_battlesoul() const;
  inline void clear_findtreasure_battlesoul();
  static const int kFindtreasureBattlesoulFieldNumber = 45;
  inline ::google::protobuf::int64 findtreasure_battlesoul() const;
  inline void set_findtreasure_battlesoul(::google::protobuf::int64 value);

  // optional int64 holybeast_build = 46;
  inline bool has_holybeast_build() const;
  inline void clear_holybeast_build();
  static const int kHolybeastBuildFieldNumber = 46;
  inline ::google::protobuf::int64 holybeast_build() const;
  inline void set_holybeast_build(::google::protobuf::int64 value);

  // optional int64 magic_sum = 47;
  inline bool has_magic_sum() const;
  inline void clear_magic_sum();
  static const int kMagicSumFieldNumber = 47;
  inline ::google::protobuf::int64 magic_sum() const;
  inline void set_magic_sum(::google::protobuf::int64 value);

  // optional int32 subpack_type = 48;
  inline bool has_subpack_type() const;
  inline void clear_subpack_type();
  static const int kSubpackTypeFieldNumber = 48;
  inline ::google::protobuf::int32 subpack_type() const;
  inline void set_subpack_type(::google::protobuf::int32 value);

  // optional int32 subpack_fetch = 49;
  inline bool has_subpack_fetch() const;
  inline void clear_subpack_fetch();
  static const int kSubpackFetchFieldNumber = 49;
  inline ::google::protobuf::int32 subpack_fetch() const;
  inline void set_subpack_fetch(::google::protobuf::int32 value);

  // optional uint64 hunling = 50;
  inline bool has_hunling() const;
  inline void clear_hunling();
  static const int kHunlingFieldNumber = 50;
  inline ::google::protobuf::uint64 hunling() const;
  inline void set_hunling(::google::protobuf::uint64 value);

  // optional int32 fuwen_money = 51;
  inline bool has_fuwen_money() const;
  inline void clear_fuwen_money();
  static const int kFuwenMoneyFieldNumber = 51;
  inline ::google::protobuf::int32 fuwen_money() const;
  inline void set_fuwen_money(::google::protobuf::int32 value);

  // optional int32 hunjing = 52;
  inline bool has_hunjing() const;
  inline void clear_hunjing();
  static const int kHunjingFieldNumber = 52;
  inline ::google::protobuf::int32 hunjing() const;
  inline void set_hunjing(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBBaseData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_logouttime();
  inline void clear_has_logouttime();
  inline void set_has_enter_scene_id();
  inline void clear_has_enter_scene_id();
  inline void set_has_enter_map_id();
  inline void clear_has_enter_map_id();
  inline void set_has_enterposx();
  inline void clear_has_enterposx();
  inline void set_has_enterposy();
  inline void clear_has_enterposy();
  inline void set_has_enterposz();
  inline void clear_has_enterposz();
  inline void set_has_lastsceneid();
  inline void clear_has_lastsceneid();
  inline void set_has_lastmapid();
  inline void clear_has_lastmapid();
  inline void set_has_lastposx();
  inline void clear_has_lastposx();
  inline void set_has_lastposy();
  inline void clear_has_lastposy();
  inline void set_has_lastposz();
  inline void clear_has_lastposz();
  inline void set_has_facade();
  inline void clear_has_facade();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_hanguptime();
  inline void clear_has_hanguptime();
  inline void set_has_relive();
  inline void clear_has_relive();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_dia();
  inline void clear_has_dia();
  inline void set_has_bdia();
  inline void clear_has_bdia();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_arenacoin();
  inline void clear_has_arenacoin();
  inline void set_has_godevil_exp();
  inline void clear_has_godevil_exp();
  inline void set_has_godevil_level();
  inline void clear_has_godevil_level();
  inline void set_has_login_day();
  inline void clear_has_login_day();
  inline void set_has_login_day_time();
  inline void clear_has_login_day_time();
  inline void set_has_best_aq();
  inline void clear_has_best_aq();
  inline void set_has_best_lj();
  inline void clear_has_best_lj();
  inline void set_has_day_prestige();
  inline void clear_has_day_prestige();
  inline void set_has_prestige_time();
  inline void clear_has_prestige_time();
  inline void set_has_pt_stage();
  inline void clear_has_pt_stage();
  inline void set_has_guide();
  inline void clear_has_guide();
  inline void set_has_battlepass_xiance();
  inline void clear_has_battlepass_xiance();
  inline void set_has_battlepass_baoding();
  inline void clear_has_battlepass_baoding();
  inline void set_has_findtreasure_shengfu();
  inline void clear_has_findtreasure_shengfu();
  inline void set_has_findtreasure_battlesoul();
  inline void clear_has_findtreasure_battlesoul();
  inline void set_has_holybeast_build();
  inline void clear_has_holybeast_build();
  inline void set_has_magic_sum();
  inline void clear_has_magic_sum();
  inline void set_has_subpack_type();
  inline void clear_has_subpack_type();
  inline void set_has_subpack_fetch();
  inline void clear_has_subpack_fetch();
  inline void set_has_hunling();
  inline void clear_has_hunling();
  inline void set_has_fuwen_money();
  inline void clear_has_fuwen_money();
  inline void set_has_hunjing();
  inline void clear_has_hunjing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 prof_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 hp_;
  ::google::protobuf::int64 fight_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 logintime_;
  ::google::protobuf::uint64 logouttime_;
  ::google::protobuf::uint64 enter_scene_id_;
  ::google::protobuf::uint64 enter_map_id_;
  float enterposx_;
  float enterposy_;
  ::google::protobuf::uint64 lastsceneid_;
  float enterposz_;
  float lastposx_;
  ::google::protobuf::uint64 lastmapid_;
  float lastposy_;
  float lastposz_;
  ::proto_ff::RoleFacadeProto* facade_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint64 hanguptime_;
  ::proto_ff::RoleReliveProto* relive_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 dia_;
  ::google::protobuf::int64 bdia_;
  ::google::protobuf::int64 magic_;
  ::google::protobuf::int64 prestige_;
  ::google::protobuf::int64 arenacoin_;
  ::google::protobuf::int32 contri_;
  ::google::protobuf::int32 godevil_level_;
  ::google::protobuf::int64 godevil_exp_;
  ::google::protobuf::uint64 login_day_time_;
  ::google::protobuf::int64 best_aq_;
  ::google::protobuf::uint32 login_day_;
  ::google::protobuf::uint32 day_prestige_;
  ::google::protobuf::int64 best_lj_;
  ::google::protobuf::uint64 prestige_time_;
  ::std::string* guide_;
  ::google::protobuf::int64 battlepass_xiance_;
  ::google::protobuf::int64 battlepass_baoding_;
  ::google::protobuf::int64 findtreasure_shengfu_;
  ::google::protobuf::uint32 pt_stage_;
  ::google::protobuf::int32 subpack_type_;
  ::google::protobuf::int64 findtreasure_battlesoul_;
  ::google::protobuf::int64 holybeast_build_;
  ::google::protobuf::int64 magic_sum_;
  ::google::protobuf::uint64 hunling_;
  ::google::protobuf::int32 subpack_fetch_;
  ::google::protobuf::int32 fuwen_money_;
  ::google::protobuf::int32 hunjing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(52 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBBaseData* default_instance_;
};
// -------------------------------------------------------------------

class BagItemsDBData : public ::google::protobuf::Message {
 public:
  BagItemsDBData();
  virtual ~BagItemsDBData();

  BagItemsDBData(const BagItemsDBData& from);

  inline BagItemsDBData& operator=(const BagItemsDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BagItemsDBData& default_instance();

  void Swap(BagItemsDBData* other);

  // implements Message ----------------------------------------------

  BagItemsDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BagItemsDBData& from);
  void MergeFrom(const BagItemsDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ItemProtoInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::ItemProtoInfo& data(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_data(int index);
  inline ::proto_ff::ItemProtoInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_data();

  // optional int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.BagItemsDBData)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > data_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BagItemsDBData* default_instance_;
};
// -------------------------------------------------------------------

class BagDBSimpleData : public ::google::protobuf::Message {
 public:
  BagDBSimpleData();
  virtual ~BagDBSimpleData();

  BagDBSimpleData(const BagDBSimpleData& from);

  inline BagDBSimpleData& operator=(const BagDBSimpleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BagDBSimpleData& default_instance();

  void Swap(BagDBSimpleData* other);

  // implements Message ----------------------------------------------

  BagDBSimpleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BagDBSimpleData& from);
  void MergeFrom(const BagDBSimpleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 package_type = 1;
  inline bool has_package_type() const;
  inline void clear_package_type();
  static const int kPackageTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 package_type() const;
  inline void set_package_type(::google::protobuf::uint32 value);

  // optional uint32 expand_num = 2;
  inline bool has_expand_num() const;
  inline void clear_expand_num();
  static const int kExpandNumFieldNumber = 2;
  inline ::google::protobuf::uint32 expand_num() const;
  inline void set_expand_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.BagDBSimpleData)
 private:
  inline void set_has_package_type();
  inline void clear_has_package_type();
  inline void set_has_expand_num();
  inline void clear_has_expand_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 package_type_;
  ::google::protobuf::uint32 expand_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BagDBSimpleData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBUnitBagData : public ::google::protobuf::Message {
 public:
  RoleDBUnitBagData();
  virtual ~RoleDBUnitBagData();

  RoleDBUnitBagData(const RoleDBUnitBagData& from);

  inline RoleDBUnitBagData& operator=(const RoleDBUnitBagData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBUnitBagData& default_instance();

  void Swap(RoleDBUnitBagData* other);

  // implements Message ----------------------------------------------

  RoleDBUnitBagData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBUnitBagData& from);
  void MergeFrom(const RoleDBUnitBagData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // optional .proto_ff.BagDBSimpleData simple = 2;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 2;
  inline const ::proto_ff::BagDBSimpleData& simple() const;
  inline ::proto_ff::BagDBSimpleData* mutable_simple();
  inline ::proto_ff::BagDBSimpleData* release_simple();
  inline void set_allocated_simple(::proto_ff::BagDBSimpleData* simple);

  // repeated .proto_ff.BagItemsDBData parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::proto_ff::BagItemsDBData& parts(int index) const;
  inline ::proto_ff::BagItemsDBData* mutable_parts(int index);
  inline ::proto_ff::BagItemsDBData* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BagItemsDBData >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BagItemsDBData >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBUnitBagData)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::proto_ff::BagDBSimpleData* simple_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::BagItemsDBData > parts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBUnitBagData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBBagData : public ::google::protobuf::Message {
 public:
  RoleDBBagData();
  virtual ~RoleDBBagData();

  RoleDBBagData(const RoleDBBagData& from);

  inline RoleDBBagData& operator=(const RoleDBBagData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBBagData& default_instance();

  void Swap(RoleDBBagData* other);

  // implements Message ----------------------------------------------

  RoleDBBagData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBBagData& from);
  void MergeFrom(const RoleDBBagData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  inline int bags_size() const;
  inline void clear_bags();
  static const int kBagsFieldNumber = 1;
  inline const ::proto_ff::RoleDBUnitBagData& bags(int index) const;
  inline ::proto_ff::RoleDBUnitBagData* mutable_bags(int index);
  inline ::proto_ff::RoleDBUnitBagData* add_bags();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleDBUnitBagData >&
      bags() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleDBUnitBagData >*
      mutable_bags();

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBBagData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleDBUnitBagData > bags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBBagData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBEquipData : public ::google::protobuf::Message {
 public:
  RoleDBEquipData();
  virtual ~RoleDBEquipData();

  RoleDBEquipData(const RoleDBEquipData& from);

  inline RoleDBEquipData& operator=(const RoleDBEquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBEquipData& default_instance();

  void Swap(RoleDBEquipData* other);

  // implements Message ----------------------------------------------

  RoleDBEquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBEquipData& from);
  void MergeFrom(const RoleDBEquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.EquipInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::proto_ff::EquipInfo& infos(int index) const;
  inline ::proto_ff::EquipInfo* mutable_infos(int index);
  inline ::proto_ff::EquipInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipInfo >*
      mutable_infos();

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  inline int lv_attr_size() const;
  inline void clear_lv_attr();
  static const int kLvAttrFieldNumber = 2;
  inline const ::proto_ff::EquipLvAttrInfo& lv_attr(int index) const;
  inline ::proto_ff::EquipLvAttrInfo* mutable_lv_attr(int index);
  inline ::proto_ff::EquipLvAttrInfo* add_lv_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipLvAttrInfo >&
      lv_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipLvAttrInfo >*
      mutable_lv_attr();

  // optional uint32 stove_level = 3;
  inline bool has_stove_level() const;
  inline void clear_stove_level();
  static const int kStoveLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 stove_level() const;
  inline void set_stove_level(::google::protobuf::uint32 value);

  // optional uint64 stove_exp = 4;
  inline bool has_stove_exp() const;
  inline void clear_stove_exp();
  static const int kStoveExpFieldNumber = 4;
  inline ::google::protobuf::uint64 stove_exp() const;
  inline void set_stove_exp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBEquipData)
 private:
  inline void set_has_stove_level();
  inline void clear_has_stove_level();
  inline void set_has_stove_exp();
  inline void clear_has_stove_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipInfo > infos_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipLvAttrInfo > lv_attr_;
  ::google::protobuf::uint64 stove_exp_;
  ::google::protobuf::uint32 stove_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBEquipData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBTaskData : public ::google::protobuf::Message {
 public:
  RoleDBTaskData();
  virtual ~RoleDBTaskData();

  RoleDBTaskData(const RoleDBTaskData& from);

  inline RoleDBTaskData& operator=(const RoleDBTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBTaskData& default_instance();

  void Swap(RoleDBTaskData* other);

  // implements Message ----------------------------------------------

  RoleDBTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBTaskData& from);
  void MergeFrom(const RoleDBTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBTaskData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBTaskData* default_instance_;
};
// -------------------------------------------------------------------

class GrowPartEntryDBInfo : public ::google::protobuf::Message {
 public:
  GrowPartEntryDBInfo();
  virtual ~GrowPartEntryDBInfo();

  GrowPartEntryDBInfo(const GrowPartEntryDBInfo& from);

  inline GrowPartEntryDBInfo& operator=(const GrowPartEntryDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowPartEntryDBInfo& default_instance();

  void Swap(GrowPartEntryDBInfo* other);

  // implements Message ----------------------------------------------

  GrowPartEntryDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowPartEntryDBInfo& from);
  void MergeFrom(const GrowPartEntryDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GrowPartEntryDBInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GrowPartEntryDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class GrowPartDBData : public ::google::protobuf::Message {
 public:
  GrowPartDBData();
  virtual ~GrowPartDBData();

  GrowPartDBData(const GrowPartDBData& from);

  inline GrowPartDBData& operator=(const GrowPartDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowPartDBData& default_instance();

  void Swap(GrowPartDBData* other);

  // implements Message ----------------------------------------------

  GrowPartDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowPartDBData& from);
  void MergeFrom(const GrowPartDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 2;
  inline const ::proto_ff::GrowPartEntryDBInfo& entrys(int index) const;
  inline ::proto_ff::GrowPartEntryDBInfo* mutable_entrys(int index);
  inline ::proto_ff::GrowPartEntryDBInfo* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartEntryDBInfo >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartEntryDBInfo >*
      mutable_entrys();

  // optional int64 curId = 3;
  inline bool has_curid() const;
  inline void clear_curid();
  static const int kCurIdFieldNumber = 3;
  inline ::google::protobuf::int64 curid() const;
  inline void set_curid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GrowPartDBData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_curid();
  inline void clear_has_curid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartEntryDBInfo > entrys_;
  ::google::protobuf::int64 curid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GrowPartDBData* default_instance_;
};
// -------------------------------------------------------------------

class GrowDBData : public ::google::protobuf::Message {
 public:
  GrowDBData();
  virtual ~GrowDBData();

  GrowDBData(const GrowDBData& from);

  inline GrowDBData& operator=(const GrowDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowDBData& default_instance();

  void Swap(GrowDBData* other);

  // implements Message ----------------------------------------------

  GrowDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowDBData& from);
  void MergeFrom(const GrowDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GrowPartDBData parts = 1;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 1;
  inline const ::proto_ff::GrowPartDBData& parts(int index) const;
  inline ::proto_ff::GrowPartDBData* mutable_parts(int index);
  inline ::proto_ff::GrowPartDBData* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartDBData >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartDBData >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:proto_ff.GrowDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartDBData > parts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GrowDBData* default_instance_;
};
// -------------------------------------------------------------------

class DayUseItemData : public ::google::protobuf::Message {
 public:
  DayUseItemData();
  virtual ~DayUseItemData();

  DayUseItemData(const DayUseItemData& from);

  inline DayUseItemData& operator=(const DayUseItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayUseItemData& default_instance();

  void Swap(DayUseItemData* other);

  // implements Message ----------------------------------------------

  DayUseItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayUseItemData& from);
  void MergeFrom(const DayUseItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair64 info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair64& info(int index) const;
  inline ::proto_ff::ComPair64* mutable_info(int index);
  inline ::proto_ff::ComPair64* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.DayUseItemData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DayUseItemData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterArenaData : public ::google::protobuf::Message {
 public:
  CharacterArenaData();
  virtual ~CharacterArenaData();

  CharacterArenaData(const CharacterArenaData& from);

  inline CharacterArenaData& operator=(const CharacterArenaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterArenaData& default_instance();

  void Swap(CharacterArenaData* other);

  // implements Message ----------------------------------------------

  CharacterArenaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterArenaData& from);
  void MergeFrom(const CharacterArenaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 challengeTimes = 1;
  inline bool has_challengetimes() const;
  inline void clear_challengetimes();
  static const int kChallengeTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 challengetimes() const;
  inline void set_challengetimes(::google::protobuf::uint32 value);

  // optional uint64 updateTime = 2;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // optional uint32 historyRankId = 3 [default = 20001];
  inline bool has_historyrankid() const;
  inline void clear_historyrankid();
  static const int kHistoryRankIdFieldNumber = 3;
  inline ::google::protobuf::uint32 historyrankid() const;
  inline void set_historyrankid(::google::protobuf::uint32 value);

  // optional uint32 buyChallengeTimes = 4;
  inline bool has_buychallengetimes() const;
  inline void clear_buychallengetimes();
  static const int kBuyChallengeTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 buychallengetimes() const;
  inline void set_buychallengetimes(::google::protobuf::uint32 value);

  // repeated .proto_ff.ArenaChallResult result = 5;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline const ::proto_ff::ArenaChallResult& result(int index) const;
  inline ::proto_ff::ArenaChallResult* mutable_result(int index);
  inline ::proto_ff::ArenaChallResult* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaChallResult >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaChallResult >*
      mutable_result();

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  inline int chall_reward_size() const;
  inline void clear_chall_reward();
  static const int kChallRewardFieldNumber = 7;
  inline const ::proto_ff::ChallArenaReward& chall_reward(int index) const;
  inline ::proto_ff::ChallArenaReward* mutable_chall_reward(int index);
  inline ::proto_ff::ChallArenaReward* add_chall_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ChallArenaReward >&
      chall_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ChallArenaReward >*
      mutable_chall_reward();

  // optional int32 allChallengeTimes = 8;
  inline bool has_allchallengetimes() const;
  inline void clear_allchallengetimes();
  static const int kAllChallengeTimesFieldNumber = 8;
  inline ::google::protobuf::int32 allchallengetimes() const;
  inline void set_allchallengetimes(::google::protobuf::int32 value);

  // optional int32 rank_id = 9;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 9;
  inline ::google::protobuf::int32 rank_id() const;
  inline void set_rank_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CharacterArenaData)
 private:
  inline void set_has_challengetimes();
  inline void clear_has_challengetimes();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_historyrankid();
  inline void clear_has_historyrankid();
  inline void set_has_buychallengetimes();
  inline void clear_has_buychallengetimes();
  inline void set_has_allchallengetimes();
  inline void clear_has_allchallengetimes();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::uint32 challengetimes_;
  ::google::protobuf::uint32 historyrankid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaChallResult > result_;
  ::google::protobuf::uint32 buychallengetimes_;
  ::google::protobuf::int32 allchallengetimes_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ChallArenaReward > chall_reward_;
  ::google::protobuf::int32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CharacterArenaData* default_instance_;
};
// -------------------------------------------------------------------

class MiniDBData : public ::google::protobuf::Message {
 public:
  MiniDBData();
  virtual ~MiniDBData();

  MiniDBData(const MiniDBData& from);

  inline MiniDBData& operator=(const MiniDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiniDBData& default_instance();

  void Swap(MiniDBData* other);

  // implements Message ----------------------------------------------

  MiniDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiniDBData& from);
  void MergeFrom(const MiniDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lastTime = 1;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint64 value);

  // optional .proto_ff.DayUseItemData useItem = 2;
  inline bool has_useitem() const;
  inline void clear_useitem();
  static const int kUseItemFieldNumber = 2;
  inline const ::proto_ff::DayUseItemData& useitem() const;
  inline ::proto_ff::DayUseItemData* mutable_useitem();
  inline ::proto_ff::DayUseItemData* release_useitem();
  inline void set_allocated_useitem(::proto_ff::DayUseItemData* useitem);

  // optional .proto_ff.CharacterArenaData arena_data = 3;
  inline bool has_arena_data() const;
  inline void clear_arena_data();
  static const int kArenaDataFieldNumber = 3;
  inline const ::proto_ff::CharacterArenaData& arena_data() const;
  inline ::proto_ff::CharacterArenaData* mutable_arena_data();
  inline ::proto_ff::CharacterArenaData* release_arena_data();
  inline void set_allocated_arena_data(::proto_ff::CharacterArenaData* arena_data);

  // repeated .proto_ff.ComPair64 use_item_add_attr = 4;
  inline int use_item_add_attr_size() const;
  inline void clear_use_item_add_attr();
  static const int kUseItemAddAttrFieldNumber = 4;
  inline const ::proto_ff::ComPair64& use_item_add_attr(int index) const;
  inline ::proto_ff::ComPair64* mutable_use_item_add_attr(int index);
  inline ::proto_ff::ComPair64* add_use_item_add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      use_item_add_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_use_item_add_attr();

  // @@protoc_insertion_point(class_scope:proto_ff.MiniDBData)
 private:
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_useitem();
  inline void clear_has_useitem();
  inline void set_has_arena_data();
  inline void clear_has_arena_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 lasttime_;
  ::proto_ff::DayUseItemData* useitem_;
  ::proto_ff::CharacterArenaData* arena_data_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > use_item_add_attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MiniDBData* default_instance_;
};
// -------------------------------------------------------------------

class FacadeDataInfo : public ::google::protobuf::Message {
 public:
  FacadeDataInfo();
  virtual ~FacadeDataInfo();

  FacadeDataInfo(const FacadeDataInfo& from);

  inline FacadeDataInfo& operator=(const FacadeDataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FacadeDataInfo& default_instance();

  void Swap(FacadeDataInfo* other);

  // implements Message ----------------------------------------------

  FacadeDataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FacadeDataInfo& from);
  void MergeFrom(const FacadeDataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 facade_type = 1;
  inline bool has_facade_type() const;
  inline void clear_facade_type();
  static const int kFacadeTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 facade_type() const;
  inline void set_facade_type(::google::protobuf::uint32 value);

  // optional uint64 facade_id = 2;
  inline bool has_facade_id() const;
  inline void clear_facade_id();
  static const int kFacadeIdFieldNumber = 2;
  inline ::google::protobuf::uint64 facade_id() const;
  inline void set_facade_id(::google::protobuf::uint64 value);

  // optional uint32 facade_lev = 3;
  inline bool has_facade_lev() const;
  inline void clear_facade_lev();
  static const int kFacadeLevFieldNumber = 3;
  inline ::google::protobuf::uint32 facade_lev() const;
  inline void set_facade_lev(::google::protobuf::uint32 value);

  // optional uint64 facade_exp = 4;
  inline bool has_facade_exp() const;
  inline void clear_facade_exp();
  static const int kFacadeExpFieldNumber = 4;
  inline ::google::protobuf::uint64 facade_exp() const;
  inline void set_facade_exp(::google::protobuf::uint64 value);

  // optional bool use_soul_item = 5;
  inline bool has_use_soul_item() const;
  inline void clear_use_soul_item();
  static const int kUseSoulItemFieldNumber = 5;
  inline bool use_soul_item() const;
  inline void set_use_soul_item(bool value);

  // optional bool use_facade = 6;
  inline bool has_use_facade() const;
  inline void clear_use_facade();
  static const int kUseFacadeFieldNumber = 6;
  inline bool use_facade() const;
  inline void set_use_facade(bool value);

  // optional uint64 equip_fantasy_id = 7;
  inline bool has_equip_fantasy_id() const;
  inline void clear_equip_fantasy_id();
  static const int kEquipFantasyIdFieldNumber = 7;
  inline ::google::protobuf::uint64 equip_fantasy_id() const;
  inline void set_equip_fantasy_id(::google::protobuf::uint64 value);

  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  inline int fantasy_map_size() const;
  inline void clear_fantasy_map();
  static const int kFantasyMapFieldNumber = 8;
  inline const ::proto_ff::FacadeFantasyData& fantasy_map(int index) const;
  inline ::proto_ff::FacadeFantasyData* mutable_fantasy_map(int index);
  inline ::proto_ff::FacadeFantasyData* add_fantasy_map();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFantasyData >&
      fantasy_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFantasyData >*
      mutable_fantasy_map();

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  inline int fragment_map_size() const;
  inline void clear_fragment_map();
  static const int kFragmentMapFieldNumber = 9;
  inline const ::proto_ff::FacadeFragmentData& fragment_map(int index) const;
  inline ::proto_ff::FacadeFragmentData* mutable_fragment_map(int index);
  inline ::proto_ff::FacadeFragmentData* add_fragment_map();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFragmentData >&
      fragment_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFragmentData >*
      mutable_fragment_map();

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  inline int skill_data_size() const;
  inline void clear_skill_data();
  static const int kSkillDataFieldNumber = 10;
  inline const ::proto_ff::FacadeSkillData& skill_data(int index) const;
  inline ::proto_ff::FacadeSkillData* mutable_skill_data(int index);
  inline ::proto_ff::FacadeSkillData* add_skill_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeSkillData >&
      skill_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeSkillData >*
      mutable_skill_data();

  // optional .proto_ff.FacadeSoulData soul_data = 11;
  inline bool has_soul_data() const;
  inline void clear_soul_data();
  static const int kSoulDataFieldNumber = 11;
  inline const ::proto_ff::FacadeSoulData& soul_data() const;
  inline ::proto_ff::FacadeSoulData* mutable_soul_data();
  inline ::proto_ff::FacadeSoulData* release_soul_data();
  inline void set_allocated_soul_data(::proto_ff::FacadeSoulData* soul_data);

  // @@protoc_insertion_point(class_scope:proto_ff.FacadeDataInfo)
 private:
  inline void set_has_facade_type();
  inline void clear_has_facade_type();
  inline void set_has_facade_id();
  inline void clear_has_facade_id();
  inline void set_has_facade_lev();
  inline void clear_has_facade_lev();
  inline void set_has_facade_exp();
  inline void clear_has_facade_exp();
  inline void set_has_use_soul_item();
  inline void clear_has_use_soul_item();
  inline void set_has_use_facade();
  inline void clear_has_use_facade();
  inline void set_has_equip_fantasy_id();
  inline void clear_has_equip_fantasy_id();
  inline void set_has_soul_data();
  inline void clear_has_soul_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 facade_id_;
  ::google::protobuf::uint32 facade_type_;
  ::google::protobuf::uint32 facade_lev_;
  ::google::protobuf::uint64 facade_exp_;
  ::google::protobuf::uint64 equip_fantasy_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFantasyData > fantasy_map_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFragmentData > fragment_map_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeSkillData > skill_data_;
  ::proto_ff::FacadeSoulData* soul_data_;
  bool use_soul_item_;
  bool use_facade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FacadeDataInfo* default_instance_;
};
// -------------------------------------------------------------------

class MountDataInfo : public ::google::protobuf::Message {
 public:
  MountDataInfo();
  virtual ~MountDataInfo();

  MountDataInfo(const MountDataInfo& from);

  inline MountDataInfo& operator=(const MountDataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MountDataInfo& default_instance();

  void Swap(MountDataInfo* other);

  // implements Message ----------------------------------------------

  MountDataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountDataInfo& from);
  void MergeFrom(const MountDataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mount_id = 1;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mount_id() const;
  inline void set_mount_id(::google::protobuf::uint64 value);

  // optional uint32 mount_lev = 2;
  inline bool has_mount_lev() const;
  inline void clear_mount_lev();
  static const int kMountLevFieldNumber = 2;
  inline ::google::protobuf::uint32 mount_lev() const;
  inline void set_mount_lev(::google::protobuf::uint32 value);

  // optional uint64 mount_exp = 3;
  inline bool has_mount_exp() const;
  inline void clear_mount_exp();
  static const int kMountExpFieldNumber = 3;
  inline ::google::protobuf::uint64 mount_exp() const;
  inline void set_mount_exp(::google::protobuf::uint64 value);

  // optional bool use_facade = 4;
  inline bool has_use_facade() const;
  inline void clear_use_facade();
  static const int kUseFacadeFieldNumber = 4;
  inline bool use_facade() const;
  inline void set_use_facade(bool value);

  // optional uint64 equip_fantasy_id = 5;
  inline bool has_equip_fantasy_id() const;
  inline void clear_equip_fantasy_id();
  static const int kEquipFantasyIdFieldNumber = 5;
  inline ::google::protobuf::uint64 equip_fantasy_id() const;
  inline void set_equip_fantasy_id(::google::protobuf::uint64 value);

  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  inline int fantasy_map_size() const;
  inline void clear_fantasy_map();
  static const int kFantasyMapFieldNumber = 6;
  inline const ::proto_ff::MountFantasyData& fantasy_map(int index) const;
  inline ::proto_ff::MountFantasyData* mutable_fantasy_map(int index);
  inline ::proto_ff::MountFantasyData* add_fantasy_map();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFantasyData >&
      fantasy_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFantasyData >*
      mutable_fantasy_map();

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  inline int fragment_map_size() const;
  inline void clear_fragment_map();
  static const int kFragmentMapFieldNumber = 7;
  inline const ::proto_ff::MountFragmentData& fragment_map(int index) const;
  inline ::proto_ff::MountFragmentData* mutable_fragment_map(int index);
  inline ::proto_ff::MountFragmentData* add_fragment_map();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFragmentData >&
      fragment_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFragmentData >*
      mutable_fragment_map();

  // repeated .proto_ff.MountSkillData skill_data = 8;
  inline int skill_data_size() const;
  inline void clear_skill_data();
  static const int kSkillDataFieldNumber = 8;
  inline const ::proto_ff::MountSkillData& skill_data(int index) const;
  inline ::proto_ff::MountSkillData* mutable_skill_data(int index);
  inline ::proto_ff::MountSkillData* add_skill_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountSkillData >&
      skill_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountSkillData >*
      mutable_skill_data();

  // repeated .proto_ff.MountKunData kun_data = 9;
  inline int kun_data_size() const;
  inline void clear_kun_data();
  static const int kKunDataFieldNumber = 9;
  inline const ::proto_ff::MountKunData& kun_data(int index) const;
  inline ::proto_ff::MountKunData* mutable_kun_data(int index);
  inline ::proto_ff::MountKunData* add_kun_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunData >&
      kun_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunData >*
      mutable_kun_data();

  // repeated .proto_ff.MountBloodData blood_data = 10;
  inline int blood_data_size() const;
  inline void clear_blood_data();
  static const int kBloodDataFieldNumber = 10;
  inline const ::proto_ff::MountBloodData& blood_data(int index) const;
  inline ::proto_ff::MountBloodData* mutable_blood_data(int index);
  inline ::proto_ff::MountBloodData* add_blood_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBloodData >&
      blood_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBloodData >*
      mutable_blood_data();

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  inline int baby_slot_data_size() const;
  inline void clear_baby_slot_data();
  static const int kBabySlotDataFieldNumber = 11;
  inline const ::proto_ff::MountBabySlotData& baby_slot_data(int index) const;
  inline ::proto_ff::MountBabySlotData* mutable_baby_slot_data(int index);
  inline ::proto_ff::MountBabySlotData* add_baby_slot_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBabySlotData >&
      baby_slot_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBabySlotData >*
      mutable_baby_slot_data();

  // optional uint32 ride_state = 12;
  inline bool has_ride_state() const;
  inline void clear_ride_state();
  static const int kRideStateFieldNumber = 12;
  inline ::google::protobuf::uint32 ride_state() const;
  inline void set_ride_state(::google::protobuf::uint32 value);

  // optional uint64 mount_model_id = 13;
  inline bool has_mount_model_id() const;
  inline void clear_mount_model_id();
  static const int kMountModelIdFieldNumber = 13;
  inline ::google::protobuf::uint64 mount_model_id() const;
  inline void set_mount_model_id(::google::protobuf::uint64 value);

  // optional uint64 last_mount_model_id = 14;
  inline bool has_last_mount_model_id() const;
  inline void clear_last_mount_model_id();
  static const int kLastMountModelIdFieldNumber = 14;
  inline ::google::protobuf::uint64 last_mount_model_id() const;
  inline void set_last_mount_model_id(::google::protobuf::uint64 value);

  // repeated .proto_ff.MountKunChangeData kun_change_data = 15;
  inline int kun_change_data_size() const;
  inline void clear_kun_change_data();
  static const int kKunChangeDataFieldNumber = 15;
  inline const ::proto_ff::MountKunChangeData& kun_change_data(int index) const;
  inline ::proto_ff::MountKunChangeData* mutable_kun_change_data(int index);
  inline ::proto_ff::MountKunChangeData* add_kun_change_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunChangeData >&
      kun_change_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunChangeData >*
      mutable_kun_change_data();

  // optional uint64 equip_kun_id = 16;
  inline bool has_equip_kun_id() const;
  inline void clear_equip_kun_id();
  static const int kEquipKunIdFieldNumber = 16;
  inline ::google::protobuf::uint64 equip_kun_id() const;
  inline void set_equip_kun_id(::google::protobuf::uint64 value);

  // optional uint64 equip_kun_change_id = 17;
  inline bool has_equip_kun_change_id() const;
  inline void clear_equip_kun_change_id();
  static const int kEquipKunChangeIdFieldNumber = 17;
  inline ::google::protobuf::uint64 equip_kun_change_id() const;
  inline void set_equip_kun_change_id(::google::protobuf::uint64 value);

  // repeated .proto_ff.MountFairyLand fairy_land = 18;
  inline int fairy_land_size() const;
  inline void clear_fairy_land();
  static const int kFairyLandFieldNumber = 18;
  inline const ::proto_ff::MountFairyLand& fairy_land(int index) const;
  inline ::proto_ff::MountFairyLand* mutable_fairy_land(int index);
  inline ::proto_ff::MountFairyLand* add_fairy_land();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairyLand >&
      fairy_land() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairyLand >*
      mutable_fairy_land();

  // repeated .proto_ff.MountFairySlot fairy_slot = 19;
  inline int fairy_slot_size() const;
  inline void clear_fairy_slot();
  static const int kFairySlotFieldNumber = 19;
  inline const ::proto_ff::MountFairySlot& fairy_slot(int index) const;
  inline ::proto_ff::MountFairySlot* mutable_fairy_slot(int index);
  inline ::proto_ff::MountFairySlot* add_fairy_slot();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairySlot >&
      fairy_slot() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairySlot >*
      mutable_fairy_slot();

  // optional uint64 cur_fairy_land = 20;
  inline bool has_cur_fairy_land() const;
  inline void clear_cur_fairy_land();
  static const int kCurFairyLandFieldNumber = 20;
  inline ::google::protobuf::uint64 cur_fairy_land() const;
  inline void set_cur_fairy_land(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MountDataInfo)
 private:
  inline void set_has_mount_id();
  inline void clear_has_mount_id();
  inline void set_has_mount_lev();
  inline void clear_has_mount_lev();
  inline void set_has_mount_exp();
  inline void clear_has_mount_exp();
  inline void set_has_use_facade();
  inline void clear_has_use_facade();
  inline void set_has_equip_fantasy_id();
  inline void clear_has_equip_fantasy_id();
  inline void set_has_ride_state();
  inline void clear_has_ride_state();
  inline void set_has_mount_model_id();
  inline void clear_has_mount_model_id();
  inline void set_has_last_mount_model_id();
  inline void clear_has_last_mount_model_id();
  inline void set_has_equip_kun_id();
  inline void clear_has_equip_kun_id();
  inline void set_has_equip_kun_change_id();
  inline void clear_has_equip_kun_change_id();
  inline void set_has_cur_fairy_land();
  inline void clear_has_cur_fairy_land();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mount_id_;
  ::google::protobuf::uint64 mount_exp_;
  ::google::protobuf::uint32 mount_lev_;
  bool use_facade_;
  ::google::protobuf::uint64 equip_fantasy_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFantasyData > fantasy_map_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFragmentData > fragment_map_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountSkillData > skill_data_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunData > kun_data_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBloodData > blood_data_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBabySlotData > baby_slot_data_;
  ::google::protobuf::uint64 mount_model_id_;
  ::google::protobuf::uint64 last_mount_model_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunChangeData > kun_change_data_;
  ::google::protobuf::uint64 equip_kun_id_;
  ::google::protobuf::uint64 equip_kun_change_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairyLand > fairy_land_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairySlot > fairy_slot_;
  ::google::protobuf::uint64 cur_fairy_land_;
  ::google::protobuf::uint32 ride_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MountDataInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeityDataInfo : public ::google::protobuf::Message {
 public:
  DeityDataInfo();
  virtual ~DeityDataInfo();

  DeityDataInfo(const DeityDataInfo& from);

  inline DeityDataInfo& operator=(const DeityDataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeityDataInfo& default_instance();

  void Swap(DeityDataInfo* other);

  // implements Message ----------------------------------------------

  DeityDataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeityDataInfo& from);
  void MergeFrom(const DeityDataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 deity_id = 1;
  inline bool has_deity_id() const;
  inline void clear_deity_id();
  static const int kDeityIdFieldNumber = 1;
  inline ::google::protobuf::uint64 deity_id() const;
  inline void set_deity_id(::google::protobuf::uint64 value);

  // optional uint32 deity_lev = 2;
  inline bool has_deity_lev() const;
  inline void clear_deity_lev();
  static const int kDeityLevFieldNumber = 2;
  inline ::google::protobuf::uint32 deity_lev() const;
  inline void set_deity_lev(::google::protobuf::uint32 value);

  // optional uint64 deity_exp = 3;
  inline bool has_deity_exp() const;
  inline void clear_deity_exp();
  static const int kDeityExpFieldNumber = 3;
  inline ::google::protobuf::uint64 deity_exp() const;
  inline void set_deity_exp(::google::protobuf::uint64 value);

  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  inline int fantasy_map_size() const;
  inline void clear_fantasy_map();
  static const int kFantasyMapFieldNumber = 4;
  inline const ::proto_ff::DeityFantasyData& fantasy_map(int index) const;
  inline ::proto_ff::DeityFantasyData* mutable_fantasy_map(int index);
  inline ::proto_ff::DeityFantasyData* add_fantasy_map();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFantasyData >&
      fantasy_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFantasyData >*
      mutable_fantasy_map();

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  inline int fragment_map_size() const;
  inline void clear_fragment_map();
  static const int kFragmentMapFieldNumber = 5;
  inline const ::proto_ff::DeityFragmentData& fragment_map(int index) const;
  inline ::proto_ff::DeityFragmentData* mutable_fragment_map(int index);
  inline ::proto_ff::DeityFragmentData* add_fragment_map();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFragmentData >&
      fragment_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFragmentData >*
      mutable_fragment_map();

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  inline int skill_data_size() const;
  inline void clear_skill_data();
  static const int kSkillDataFieldNumber = 6;
  inline const ::proto_ff::DeitySkillData& skill_data(int index) const;
  inline ::proto_ff::DeitySkillData* mutable_skill_data(int index);
  inline ::proto_ff::DeitySkillData* add_skill_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeitySkillData >&
      skill_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeitySkillData >*
      mutable_skill_data();

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  inline int battle_data_size() const;
  inline void clear_battle_data();
  static const int kBattleDataFieldNumber = 7;
  inline const ::proto_ff::DeityBattleSlotData& battle_data(int index) const;
  inline ::proto_ff::DeityBattleSlotData* mutable_battle_data(int index);
  inline ::proto_ff::DeityBattleSlotData* add_battle_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityBattleSlotData >&
      battle_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityBattleSlotData >*
      mutable_battle_data();

  // @@protoc_insertion_point(class_scope:proto_ff.DeityDataInfo)
 private:
  inline void set_has_deity_id();
  inline void clear_has_deity_id();
  inline void set_has_deity_lev();
  inline void clear_has_deity_lev();
  inline void set_has_deity_exp();
  inline void clear_has_deity_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 deity_id_;
  ::google::protobuf::uint64 deity_exp_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFantasyData > fantasy_map_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFragmentData > fragment_map_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DeitySkillData > skill_data_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityBattleSlotData > battle_data_;
  ::google::protobuf::uint32 deity_lev_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DeityDataInfo* default_instance_;
};
// -------------------------------------------------------------------

class FacadeDBData : public ::google::protobuf::Message {
 public:
  FacadeDBData();
  virtual ~FacadeDBData();

  FacadeDBData(const FacadeDBData& from);

  inline FacadeDBData& operator=(const FacadeDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FacadeDBData& default_instance();

  void Swap(FacadeDBData* other);

  // implements Message ----------------------------------------------

  FacadeDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FacadeDBData& from);
  void MergeFrom(const FacadeDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FacadeDataInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FacadeDataInfo& data(int index) const;
  inline ::proto_ff::FacadeDataInfo* mutable_data(int index);
  inline ::proto_ff::FacadeDataInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeDataInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeDataInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FacadeDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeDataInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FacadeDBData* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBInfo : public ::google::protobuf::Message {
 public:
  SkillDBInfo();
  virtual ~SkillDBInfo();

  SkillDBInfo(const SkillDBInfo& from);

  inline SkillDBInfo& operator=(const SkillDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBInfo& default_instance();

  void Swap(SkillDBInfo* other);

  // implements Message ----------------------------------------------

  SkillDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBInfo& from);
  void MergeFrom(const SkillDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint64 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint64 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 wakeup = 3;
  inline bool has_wakeup() const;
  inline void clear_wakeup();
  static const int kWakeupFieldNumber = 3;
  inline ::google::protobuf::int32 wakeup() const;
  inline void set_wakeup(::google::protobuf::int32 value);

  // optional int64 use_msc = 4;
  inline bool has_use_msc() const;
  inline void clear_use_msc();
  static const int kUseMscFieldNumber = 4;
  inline ::google::protobuf::int64 use_msc() const;
  inline void set_use_msc(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBInfo)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_wakeup();
  inline void clear_has_wakeup();
  inline void set_has_use_msc();
  inline void clear_has_use_msc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 skill_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 wakeup_;
  ::google::protobuf::int64 use_msc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBPos : public ::google::protobuf::Message {
 public:
  SkillDBPos();
  virtual ~SkillDBPos();

  SkillDBPos(const SkillDBPos& from);

  inline SkillDBPos& operator=(const SkillDBPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBPos& default_instance();

  void Swap(SkillDBPos* other);

  // implements Message ----------------------------------------------

  SkillDBPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBPos& from);
  void MergeFrom(const SkillDBPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint64 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint64 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional int32 use = 3;
  inline bool has_use() const;
  inline void clear_use();
  static const int kUseFieldNumber = 3;
  inline ::google::protobuf::int32 use() const;
  inline void set_use(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBPos)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_use();
  inline void clear_has_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 skill_id_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::int32 use_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBPos* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBAdvPos : public ::google::protobuf::Message {
 public:
  SkillDBAdvPos();
  virtual ~SkillDBAdvPos();

  SkillDBAdvPos(const SkillDBAdvPos& from);

  inline SkillDBAdvPos& operator=(const SkillDBAdvPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBAdvPos& default_instance();

  void Swap(SkillDBAdvPos* other);

  // implements Message ----------------------------------------------

  SkillDBAdvPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBAdvPos& from);
  void MergeFrom(const SkillDBAdvPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 advance = 2;
  inline bool has_advance() const;
  inline void clear_advance();
  static const int kAdvanceFieldNumber = 2;
  inline ::google::protobuf::uint32 advance() const;
  inline void set_advance(::google::protobuf::uint32 value);

  // optional uint32 unlock = 3;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnlockFieldNumber = 3;
  inline ::google::protobuf::uint32 unlock() const;
  inline void set_unlock(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBAdvPos)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_advance();
  inline void clear_has_advance();
  inline void set_has_unlock();
  inline void clear_has_unlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 advance_;
  ::google::protobuf::uint32 unlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBAdvPos* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBAdvInfo : public ::google::protobuf::Message {
 public:
  SkillDBAdvInfo();
  virtual ~SkillDBAdvInfo();

  SkillDBAdvInfo(const SkillDBAdvInfo& from);

  inline SkillDBAdvInfo& operator=(const SkillDBAdvInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBAdvInfo& default_instance();

  void Swap(SkillDBAdvInfo* other);

  // implements Message ----------------------------------------------

  SkillDBAdvInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBAdvInfo& from);
  void MergeFrom(const SkillDBAdvInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 advance = 1;
  inline bool has_advance() const;
  inline void clear_advance();
  static const int kAdvanceFieldNumber = 1;
  inline ::google::protobuf::int32 advance() const;
  inline void set_advance(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBAdvInfo)
 private:
  inline void set_has_advance();
  inline void clear_has_advance();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 advance_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBAdvInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBGroup : public ::google::protobuf::Message {
 public:
  SkillDBGroup();
  virtual ~SkillDBGroup();

  SkillDBGroup(const SkillDBGroup& from);

  inline SkillDBGroup& operator=(const SkillDBGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBGroup& default_instance();

  void Swap(SkillDBGroup* other);

  // implements Message ----------------------------------------------

  SkillDBGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBGroup& from);
  void MergeFrom(const SkillDBGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 group = 1;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional int32 chg = 2;
  inline bool has_chg() const;
  inline void clear_chg();
  static const int kChgFieldNumber = 2;
  inline ::google::protobuf::int32 chg() const;
  inline void set_chg(::google::protobuf::int32 value);

  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  inline int pos_lst_size() const;
  inline void clear_pos_lst();
  static const int kPosLstFieldNumber = 3;
  inline const ::proto_ff::SkillDBPos& pos_lst(int index) const;
  inline ::proto_ff::SkillDBPos* mutable_pos_lst(int index);
  inline ::proto_ff::SkillDBPos* add_pos_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBPos >&
      pos_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBPos >*
      mutable_pos_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBGroup)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_chg();
  inline void clear_has_chg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_;
  ::google::protobuf::int32 chg_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBPos > pos_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBGroup* default_instance_;
};
// -------------------------------------------------------------------

class PetSkillCdDB : public ::google::protobuf::Message {
 public:
  PetSkillCdDB();
  virtual ~PetSkillCdDB();

  PetSkillCdDB(const PetSkillCdDB& from);

  inline PetSkillCdDB& operator=(const PetSkillCdDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetSkillCdDB& default_instance();

  void Swap(PetSkillCdDB* other);

  // implements Message ----------------------------------------------

  PetSkillCdDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetSkillCdDB& from);
  void MergeFrom(const PetSkillCdDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint64 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint64 value);

  // optional uint64 use_msec = 2;
  inline bool has_use_msec() const;
  inline void clear_use_msec();
  static const int kUseMsecFieldNumber = 2;
  inline ::google::protobuf::uint64 use_msec() const;
  inline void set_use_msec(::google::protobuf::uint64 value);

  // optional int64 pet_instid = 3;
  inline bool has_pet_instid() const;
  inline void clear_pet_instid();
  static const int kPetInstidFieldNumber = 3;
  inline ::google::protobuf::int64 pet_instid() const;
  inline void set_pet_instid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PetSkillCdDB)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_use_msec();
  inline void clear_has_use_msec();
  inline void set_has_pet_instid();
  inline void clear_has_pet_instid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 skill_id_;
  ::google::protobuf::uint64 use_msec_;
  ::google::protobuf::int64 pet_instid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static PetSkillCdDB* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBTalentProto : public ::google::protobuf::Message {
 public:
  SkillDBTalentProto();
  virtual ~SkillDBTalentProto();

  SkillDBTalentProto(const SkillDBTalentProto& from);

  inline SkillDBTalentProto& operator=(const SkillDBTalentProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBTalentProto& default_instance();

  void Swap(SkillDBTalentProto* other);

  // implements Message ----------------------------------------------

  SkillDBTalentProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBTalentProto& from);
  void MergeFrom(const SkillDBTalentProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBTalentProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBTalentProto* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBTalent : public ::google::protobuf::Message {
 public:
  SkillDBTalent();
  virtual ~SkillDBTalent();

  SkillDBTalent(const SkillDBTalent& from);

  inline SkillDBTalent& operator=(const SkillDBTalent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBTalent& default_instance();

  void Swap(SkillDBTalent* other);

  // implements Message ----------------------------------------------

  SkillDBTalent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBTalent& from);
  void MergeFrom(const SkillDBTalent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.SkillDBTalentProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::SkillDBTalentProto& info(int index) const;
  inline ::proto_ff::SkillDBTalentProto* mutable_info(int index);
  inline ::proto_ff::SkillDBTalentProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBTalentProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBTalentProto >*
      mutable_info();

  // optional uint32 cnt = 2;
  inline bool has_cnt() const;
  inline void clear_cnt();
  static const int kCntFieldNumber = 2;
  inline ::google::protobuf::uint32 cnt() const;
  inline void set_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBTalent)
 private:
  inline void set_has_cnt();
  inline void clear_has_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBTalentProto > info_;
  ::google::protobuf::uint32 cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBTalent* default_instance_;
};
// -------------------------------------------------------------------

class SkillDBData : public ::google::protobuf::Message {
 public:
  SkillDBData();
  virtual ~SkillDBData();

  SkillDBData(const SkillDBData& from);

  inline SkillDBData& operator=(const SkillDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDBData& default_instance();

  void Swap(SkillDBData* other);

  // implements Message ----------------------------------------------

  SkillDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDBData& from);
  void MergeFrom(const SkillDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::SkillDBInfo& info_lst(int index) const;
  inline ::proto_ff::SkillDBInfo* mutable_info_lst(int index);
  inline ::proto_ff::SkillDBInfo* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBInfo >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBInfo >*
      mutable_info_lst();

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  inline int group_lst_size() const;
  inline void clear_group_lst();
  static const int kGroupLstFieldNumber = 2;
  inline const ::proto_ff::SkillDBGroup& group_lst(int index) const;
  inline ::proto_ff::SkillDBGroup* mutable_group_lst(int index);
  inline ::proto_ff::SkillDBGroup* add_group_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBGroup >&
      group_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBGroup >*
      mutable_group_lst();

  // optional uint32 group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint64 last_group = 4;
  inline bool has_last_group() const;
  inline void clear_last_group();
  static const int kLastGroupFieldNumber = 4;
  inline ::google::protobuf::uint64 last_group() const;
  inline void set_last_group(::google::protobuf::uint64 value);

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  inline int adv_pos_size() const;
  inline void clear_adv_pos();
  static const int kAdvPosFieldNumber = 5;
  inline const ::proto_ff::SkillDBAdvPos& adv_pos(int index) const;
  inline ::proto_ff::SkillDBAdvPos* mutable_adv_pos(int index);
  inline ::proto_ff::SkillDBAdvPos* add_adv_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvPos >&
      adv_pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvPos >*
      mutable_adv_pos();

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  inline int adv_info_size() const;
  inline void clear_adv_info();
  static const int kAdvInfoFieldNumber = 6;
  inline const ::proto_ff::SkillDBAdvInfo& adv_info(int index) const;
  inline ::proto_ff::SkillDBAdvInfo* mutable_adv_info(int index);
  inline ::proto_ff::SkillDBAdvInfo* add_adv_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvInfo >&
      adv_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvInfo >*
      mutable_adv_info();

  // optional uint32 cur_advpos = 7;
  inline bool has_cur_advpos() const;
  inline void clear_cur_advpos();
  static const int kCurAdvposFieldNumber = 7;
  inline ::google::protobuf::uint32 cur_advpos() const;
  inline void set_cur_advpos(::google::protobuf::uint32 value);

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  inline int pet_cd_size() const;
  inline void clear_pet_cd();
  static const int kPetCdFieldNumber = 8;
  inline const ::proto_ff::PetSkillCdDB& pet_cd(int index) const;
  inline ::proto_ff::PetSkillCdDB* mutable_pet_cd(int index);
  inline ::proto_ff::PetSkillCdDB* add_pet_cd();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetSkillCdDB >&
      pet_cd() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetSkillCdDB >*
      mutable_pet_cd();

  // optional .proto_ff.SkillDBTalent talent = 9;
  inline bool has_talent() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 9;
  inline const ::proto_ff::SkillDBTalent& talent() const;
  inline ::proto_ff::SkillDBTalent* mutable_talent();
  inline ::proto_ff::SkillDBTalent* release_talent();
  inline void set_allocated_talent(::proto_ff::SkillDBTalent* talent);

  // optional uint32 anger_value = 10;
  inline bool has_anger_value() const;
  inline void clear_anger_value();
  static const int kAngerValueFieldNumber = 10;
  inline ::google::protobuf::uint32 anger_value() const;
  inline void set_anger_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SkillDBData)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_last_group();
  inline void clear_has_last_group();
  inline void set_has_cur_advpos();
  inline void clear_has_cur_advpos();
  inline void set_has_talent();
  inline void clear_has_talent();
  inline void set_has_anger_value();
  inline void clear_has_anger_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBInfo > info_lst_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBGroup > group_lst_;
  ::google::protobuf::uint64 last_group_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvPos > adv_pos_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 cur_advpos_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvInfo > adv_info_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::PetSkillCdDB > pet_cd_;
  ::proto_ff::SkillDBTalent* talent_;
  ::google::protobuf::uint32 anger_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SkillDBData* default_instance_;
};
// -------------------------------------------------------------------

class GodRelicsActivityData : public ::google::protobuf::Message {
 public:
  GodRelicsActivityData();
  virtual ~GodRelicsActivityData();

  GodRelicsActivityData(const GodRelicsActivityData& from);

  inline GodRelicsActivityData& operator=(const GodRelicsActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GodRelicsActivityData& default_instance();

  void Swap(GodRelicsActivityData* other);

  // implements Message ----------------------------------------------

  GodRelicsActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodRelicsActivityData& from);
  void MergeFrom(const GodRelicsActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  inline int group_data_size() const;
  inline void clear_group_data();
  static const int kGroupDataFieldNumber = 1;
  inline const ::proto_ff::GodRelicsTaskGroupEntry& group_data(int index) const;
  inline ::proto_ff::GodRelicsTaskGroupEntry* mutable_group_data(int index);
  inline ::proto_ff::GodRelicsTaskGroupEntry* add_group_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GodRelicsTaskGroupEntry >&
      group_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GodRelicsTaskGroupEntry >*
      mutable_group_data();

  // optional int64 cur_group_id = 2;
  inline bool has_cur_group_id() const;
  inline void clear_cur_group_id();
  static const int kCurGroupIdFieldNumber = 2;
  inline ::google::protobuf::int64 cur_group_id() const;
  inline void set_cur_group_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GodRelicsActivityData)
 private:
  inline void set_has_cur_group_id();
  inline void clear_has_cur_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GodRelicsTaskGroupEntry > group_data_;
  ::google::protobuf::int64 cur_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GodRelicsActivityData* default_instance_;
};
// -------------------------------------------------------------------

class MiniActivityDBData : public ::google::protobuf::Message {
 public:
  MiniActivityDBData();
  virtual ~MiniActivityDBData();

  MiniActivityDBData(const MiniActivityDBData& from);

  inline MiniActivityDBData& operator=(const MiniActivityDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiniActivityDBData& default_instance();

  void Swap(MiniActivityDBData* other);

  // implements Message ----------------------------------------------

  MiniActivityDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiniActivityDBData& from);
  void MergeFrom(const MiniActivityDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
  inline bool has_god_relics_data() const;
  inline void clear_god_relics_data();
  static const int kGodRelicsDataFieldNumber = 1;
  inline const ::proto_ff::GodRelicsActivityData& god_relics_data() const;
  inline ::proto_ff::GodRelicsActivityData* mutable_god_relics_data();
  inline ::proto_ff::GodRelicsActivityData* release_god_relics_data();
  inline void set_allocated_god_relics_data(::proto_ff::GodRelicsActivityData* god_relics_data);

  // optional .proto_ff.DailyTaskAllData daily_data = 2;
  inline bool has_daily_data() const;
  inline void clear_daily_data();
  static const int kDailyDataFieldNumber = 2;
  inline const ::proto_ff::DailyTaskAllData& daily_data() const;
  inline ::proto_ff::DailyTaskAllData* mutable_daily_data();
  inline ::proto_ff::DailyTaskAllData* release_daily_data();
  inline void set_allocated_daily_data(::proto_ff::DailyTaskAllData* daily_data);

  // @@protoc_insertion_point(class_scope:proto_ff.MiniActivityDBData)
 private:
  inline void set_has_god_relics_data();
  inline void clear_has_god_relics_data();
  inline void set_has_daily_data();
  inline void clear_has_daily_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::GodRelicsActivityData* god_relics_data_;
  ::proto_ff::DailyTaskAllData* daily_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MiniActivityDBData* default_instance_;
};
// -------------------------------------------------------------------

class DupRecord : public ::google::protobuf::Message {
 public:
  DupRecord();
  virtual ~DupRecord();

  DupRecord(const DupRecord& from);

  inline DupRecord& operator=(const DupRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DupRecord& default_instance();

  void Swap(DupRecord* other);

  // implements Message ----------------------------------------------

  DupRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DupRecord& from);
  void MergeFrom(const DupRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dupId = 1;
  inline bool has_dupid() const;
  inline void clear_dupid();
  static const int kDupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dupid() const;
  inline void set_dupid(::google::protobuf::uint64 value);

  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DupRecord)
 private:
  inline void set_has_dupid();
  inline void clear_has_dupid();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dupid_;
  ::google::protobuf::int32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DupRecord* default_instance_;
};
// -------------------------------------------------------------------

class DupGroupData : public ::google::protobuf::Message {
 public:
  DupGroupData();
  virtual ~DupGroupData();

  DupGroupData(const DupGroupData& from);

  inline DupGroupData& operator=(const DupGroupData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DupGroupData& default_instance();

  void Swap(DupGroupData* other);

  // implements Message ----------------------------------------------

  DupGroupData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DupGroupData& from);
  void MergeFrom(const DupGroupData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group = 1;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 enterNum = 2;
  inline bool has_enternum() const;
  inline void clear_enternum();
  static const int kEnterNumFieldNumber = 2;
  inline ::google::protobuf::int32 enternum() const;
  inline void set_enternum(::google::protobuf::int32 value);

  // optional int32 buyNum = 3;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 3;
  inline ::google::protobuf::int32 buynum() const;
  inline void set_buynum(::google::protobuf::int32 value);

  // optional int32 useNum = 4;
  inline bool has_usenum() const;
  inline void clear_usenum();
  static const int kUseNumFieldNumber = 4;
  inline ::google::protobuf::int32 usenum() const;
  inline void set_usenum(::google::protobuf::int32 value);

  // optional uint64 lastFresh = 5;
  inline bool has_lastfresh() const;
  inline void clear_lastfresh();
  static const int kLastFreshFieldNumber = 5;
  inline ::google::protobuf::uint64 lastfresh() const;
  inline void set_lastfresh(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DupGroupData)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_enternum();
  inline void clear_has_enternum();
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_usenum();
  inline void clear_has_usenum();
  inline void set_has_lastfresh();
  inline void clear_has_lastfresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 enternum_;
  ::google::protobuf::int32 buynum_;
  ::google::protobuf::int32 usenum_;
  ::google::protobuf::uint64 lastfresh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DupGroupData* default_instance_;
};
// -------------------------------------------------------------------

class DupTowerDBRecordEntry : public ::google::protobuf::Message {
 public:
  DupTowerDBRecordEntry();
  virtual ~DupTowerDBRecordEntry();

  DupTowerDBRecordEntry(const DupTowerDBRecordEntry& from);

  inline DupTowerDBRecordEntry& operator=(const DupTowerDBRecordEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DupTowerDBRecordEntry& default_instance();

  void Swap(DupTowerDBRecordEntry* other);

  // implements Message ----------------------------------------------

  DupTowerDBRecordEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DupTowerDBRecordEntry& from);
  void MergeFrom(const DupTowerDBRecordEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DupTowerDBRecordEntry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DupTowerDBRecordEntry* default_instance_;
};
// -------------------------------------------------------------------

class DupTowerDBRecord : public ::google::protobuf::Message {
 public:
  DupTowerDBRecord();
  virtual ~DupTowerDBRecord();

  DupTowerDBRecord(const DupTowerDBRecord& from);

  inline DupTowerDBRecord& operator=(const DupTowerDBRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DupTowerDBRecord& default_instance();

  void Swap(DupTowerDBRecord* other);

  // implements Message ----------------------------------------------

  DupTowerDBRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DupTowerDBRecord& from);
  void MergeFrom(const DupTowerDBRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 2;
  inline const ::proto_ff::DupTowerDBRecordEntry& entrys(int index) const;
  inline ::proto_ff::DupTowerDBRecordEntry* mutable_entrys(int index);
  inline ::proto_ff::DupTowerDBRecordEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecordEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecordEntry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:proto_ff.DupTowerDBRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecordEntry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DupTowerDBRecord* default_instance_;
};
// -------------------------------------------------------------------

class DupTowerDBData : public ::google::protobuf::Message {
 public:
  DupTowerDBData();
  virtual ~DupTowerDBData();

  DupTowerDBData(const DupTowerDBData& from);

  inline DupTowerDBData& operator=(const DupTowerDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DupTowerDBData& default_instance();

  void Swap(DupTowerDBData* other);

  // implements Message ----------------------------------------------

  DupTowerDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DupTowerDBData& from);
  void MergeFrom(const DupTowerDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline ::google::protobuf::uint64 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint64 value);
  inline void add_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.DupTowerDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DupTowerDBData* default_instance_;
};
// -------------------------------------------------------------------

class GhostDBData : public ::google::protobuf::Message {
 public:
  GhostDBData();
  virtual ~GhostDBData();

  GhostDBData(const GhostDBData& from);

  inline GhostDBData& operator=(const GhostDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostDBData& default_instance();

  void Swap(GhostDBData* other);

  // implements Message ----------------------------------------------

  GhostDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GhostDBData& from);
  void MergeFrom(const GhostDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 wave = 1;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 1;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // repeated int32 recv_ids = 3;
  inline int recv_ids_size() const;
  inline void clear_recv_ids();
  static const int kRecvIdsFieldNumber = 3;
  inline ::google::protobuf::int32 recv_ids(int index) const;
  inline void set_recv_ids(int index, ::google::protobuf::int32 value);
  inline void add_recv_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.GhostDBData)
 private:
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wave_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GhostDBData* default_instance_;
};
// -------------------------------------------------------------------

class MoyuDBData : public ::google::protobuf::Message {
 public:
  MoyuDBData();
  virtual ~MoyuDBData();

  MoyuDBData(const MoyuDBData& from);

  inline MoyuDBData& operator=(const MoyuDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoyuDBData& default_instance();

  void Swap(MoyuDBData* other);

  // implements Message ----------------------------------------------

  MoyuDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoyuDBData& from);
  void MergeFrom(const MoyuDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 recv_layer = 1;
  inline int recv_layer_size() const;
  inline void clear_recv_layer();
  static const int kRecvLayerFieldNumber = 1;
  inline ::google::protobuf::int32 recv_layer(int index) const;
  inline void set_recv_layer(int index, ::google::protobuf::int32 value);
  inline void add_recv_layer(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_layer() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_layer();

  // optional uint64 day_harm = 2;
  inline bool has_day_harm() const;
  inline void clear_day_harm();
  static const int kDayHarmFieldNumber = 2;
  inline ::google::protobuf::uint64 day_harm() const;
  inline void set_day_harm(::google::protobuf::uint64 value);

  // optional uint64 week_harm = 3;
  inline bool has_week_harm() const;
  inline void clear_week_harm();
  static const int kWeekHarmFieldNumber = 3;
  inline ::google::protobuf::uint64 week_harm() const;
  inline void set_week_harm(::google::protobuf::uint64 value);

  // optional uint64 last_day_harm = 4;
  inline bool has_last_day_harm() const;
  inline void clear_last_day_harm();
  static const int kLastDayHarmFieldNumber = 4;
  inline ::google::protobuf::uint64 last_day_harm() const;
  inline void set_last_day_harm(::google::protobuf::uint64 value);

  // optional uint64 last_week_harm = 5;
  inline bool has_last_week_harm() const;
  inline void clear_last_week_harm();
  static const int kLastWeekHarmFieldNumber = 5;
  inline ::google::protobuf::uint64 last_week_harm() const;
  inline void set_last_week_harm(::google::protobuf::uint64 value);

  // optional uint64 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MoyuDBData)
 private:
  inline void set_has_day_harm();
  inline void clear_has_day_harm();
  inline void set_has_week_harm();
  inline void clear_has_week_harm();
  inline void set_has_last_day_harm();
  inline void clear_has_last_day_harm();
  inline void set_has_last_week_harm();
  inline void clear_has_last_week_harm();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_layer_;
  ::google::protobuf::uint64 day_harm_;
  ::google::protobuf::uint64 week_harm_;
  ::google::protobuf::uint64 last_day_harm_;
  ::google::protobuf::uint64 last_week_harm_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MoyuDBData* default_instance_;
};
// -------------------------------------------------------------------

class YaoTaDBData : public ::google::protobuf::Message {
 public:
  YaoTaDBData();
  virtual ~YaoTaDBData();

  YaoTaDBData(const YaoTaDBData& from);

  inline YaoTaDBData& operator=(const YaoTaDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YaoTaDBData& default_instance();

  void Swap(YaoTaDBData* other);

  // implements Message ----------------------------------------------

  YaoTaDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YaoTaDBData& from);
  void MergeFrom(const YaoTaDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pass_ids = 1;
  inline int pass_ids_size() const;
  inline void clear_pass_ids();
  static const int kPassIdsFieldNumber = 1;
  inline ::google::protobuf::int32 pass_ids(int index) const;
  inline void set_pass_ids(int index, ::google::protobuf::int32 value);
  inline void add_pass_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pass_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pass_ids();

  // repeated int32 first_pass_ids = 2;
  inline int first_pass_ids_size() const;
  inline void clear_first_pass_ids();
  static const int kFirstPassIdsFieldNumber = 2;
  inline ::google::protobuf::int32 first_pass_ids(int index) const;
  inline void set_first_pass_ids(int index, ::google::protobuf::int32 value);
  inline void add_first_pass_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_pass_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_pass_ids();

  // optional uint64 pass_time_point = 3;
  inline bool has_pass_time_point() const;
  inline void clear_pass_time_point();
  static const int kPassTimePointFieldNumber = 3;
  inline ::google::protobuf::uint64 pass_time_point() const;
  inline void set_pass_time_point(::google::protobuf::uint64 value);

  // optional int32 pass_duration = 4;
  inline bool has_pass_duration() const;
  inline void clear_pass_duration();
  static const int kPassDurationFieldNumber = 4;
  inline ::google::protobuf::int32 pass_duration() const;
  inline void set_pass_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.YaoTaDBData)
 private:
  inline void set_has_pass_time_point();
  inline void clear_has_pass_time_point();
  inline void set_has_pass_duration();
  inline void clear_has_pass_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pass_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_pass_ids_;
  ::google::protobuf::uint64 pass_time_point_;
  ::google::protobuf::int32 pass_duration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static YaoTaDBData* default_instance_;
};
// -------------------------------------------------------------------

class DupDBData : public ::google::protobuf::Message {
 public:
  DupDBData();
  virtual ~DupDBData();

  DupDBData(const DupDBData& from);

  inline DupDBData& operator=(const DupDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DupDBData& default_instance();

  void Swap(DupDBData* other);

  // implements Message ----------------------------------------------

  DupDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DupDBData& from);
  void MergeFrom(const DupDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.DupRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::proto_ff::DupRecord& record(int index) const;
  inline ::proto_ff::DupRecord* mutable_record(int index);
  inline ::proto_ff::DupRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupRecord >*
      mutable_record();

  // repeated .proto_ff.DupGroupData groups = 2;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 2;
  inline const ::proto_ff::DupGroupData& groups(int index) const;
  inline ::proto_ff::DupGroupData* mutable_groups(int index);
  inline ::proto_ff::DupGroupData* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupGroupData >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupGroupData >*
      mutable_groups();

  // optional .proto_ff.DupTowerDBData tower = 3;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 3;
  inline const ::proto_ff::DupTowerDBData& tower() const;
  inline ::proto_ff::DupTowerDBData* mutable_tower();
  inline ::proto_ff::DupTowerDBData* release_tower();
  inline void set_allocated_tower(::proto_ff::DupTowerDBData* tower);

  // optional .proto_ff.GhostDBData ghost = 4;
  inline bool has_ghost() const;
  inline void clear_ghost();
  static const int kGhostFieldNumber = 4;
  inline const ::proto_ff::GhostDBData& ghost() const;
  inline ::proto_ff::GhostDBData* mutable_ghost();
  inline ::proto_ff::GhostDBData* release_ghost();
  inline void set_allocated_ghost(::proto_ff::GhostDBData* ghost);

  // optional .proto_ff.MoyuDBData moyu = 5;
  inline bool has_moyu() const;
  inline void clear_moyu();
  static const int kMoyuFieldNumber = 5;
  inline const ::proto_ff::MoyuDBData& moyu() const;
  inline ::proto_ff::MoyuDBData* mutable_moyu();
  inline ::proto_ff::MoyuDBData* release_moyu();
  inline void set_allocated_moyu(::proto_ff::MoyuDBData* moyu);

  // optional .proto_ff.YaoTaDBData yaota = 6;
  inline bool has_yaota() const;
  inline void clear_yaota();
  static const int kYaotaFieldNumber = 6;
  inline const ::proto_ff::YaoTaDBData& yaota() const;
  inline ::proto_ff::YaoTaDBData* mutable_yaota();
  inline ::proto_ff::YaoTaDBData* release_yaota();
  inline void set_allocated_yaota(::proto_ff::YaoTaDBData* yaota);

  // @@protoc_insertion_point(class_scope:proto_ff.DupDBData)
 private:
  inline void set_has_tower();
  inline void clear_has_tower();
  inline void set_has_ghost();
  inline void clear_has_ghost();
  inline void set_has_moyu();
  inline void clear_has_moyu();
  inline void set_has_yaota();
  inline void clear_has_yaota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::DupRecord > record_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DupGroupData > groups_;
  ::proto_ff::DupTowerDBData* tower_;
  ::proto_ff::GhostDBData* ghost_;
  ::proto_ff::MoyuDBData* moyu_;
  ::proto_ff::YaoTaDBData* yaota_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DupDBData* default_instance_;
};
// -------------------------------------------------------------------

class GhostDupRankDB : public ::google::protobuf::Message {
 public:
  GhostDupRankDB();
  virtual ~GhostDupRankDB();

  GhostDupRankDB(const GhostDupRankDB& from);

  inline GhostDupRankDB& operator=(const GhostDupRankDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostDupRankDB& default_instance();

  void Swap(GhostDupRankDB* other);

  // implements Message ----------------------------------------------

  GhostDupRankDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GhostDupRankDB& from);
  void MergeFrom(const GhostDupRankDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 1;
  inline const ::proto_ff::GHostDupRankInfo& ranks(int index) const;
  inline ::proto_ff::GHostDupRankInfo* mutable_ranks(int index);
  inline ::proto_ff::GHostDupRankInfo* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GHostDupRankInfo >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GHostDupRankInfo >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:proto_ff.GhostDupRankDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GHostDupRankInfo > ranks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GhostDupRankDB* default_instance_;
};
// -------------------------------------------------------------------

class BuffDBInfo : public ::google::protobuf::Message {
 public:
  BuffDBInfo();
  virtual ~BuffDBInfo();

  BuffDBInfo(const BuffDBInfo& from);

  inline BuffDBInfo& operator=(const BuffDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDBInfo& default_instance();

  void Swap(BuffDBInfo* other);

  // implements Message ----------------------------------------------

  BuffDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDBInfo& from);
  void MergeFrom(const BuffDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 buffid = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 1;
  inline ::google::protobuf::uint64 buffid() const;
  inline void set_buffid(::google::protobuf::uint64 value);

  // optional uint64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // optional uint64 skillid = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 3;
  inline ::google::protobuf::uint64 skillid() const;
  inline void set_skillid(::google::protobuf::uint64 value);

  // optional uint32 skilllev = 4;
  inline bool has_skilllev() const;
  inline void clear_skilllev();
  static const int kSkilllevFieldNumber = 4;
  inline ::google::protobuf::uint32 skilllev() const;
  inline void set_skilllev(::google::protobuf::uint32 value);

  // optional bool is_forever = 5;
  inline bool has_is_forever() const;
  inline void clear_is_forever();
  static const int kIsForeverFieldNumber = 5;
  inline bool is_forever() const;
  inline void set_is_forever(bool value);

  // optional int64 startmsec = 6;
  inline bool has_startmsec() const;
  inline void clear_startmsec();
  static const int kStartmsecFieldNumber = 6;
  inline ::google::protobuf::int64 startmsec() const;
  inline void set_startmsec(::google::protobuf::int64 value);

  // optional bool is_effect = 7;
  inline bool has_is_effect() const;
  inline void clear_is_effect();
  static const int kIsEffectFieldNumber = 7;
  inline bool is_effect() const;
  inline void set_is_effect(bool value);

  // optional int64 param1 = 8;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 8;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 9;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 9;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // optional int64 extramsec = 10;
  inline bool has_extramsec() const;
  inline void clear_extramsec();
  static const int kExtramsecFieldNumber = 10;
  inline ::google::protobuf::int64 extramsec() const;
  inline void set_extramsec(::google::protobuf::int64 value);

  // optional int32 is_end = 11;
  inline bool has_is_end() const;
  inline void clear_is_end();
  static const int kIsEndFieldNumber = 11;
  inline ::google::protobuf::int32 is_end() const;
  inline void set_is_end(::google::protobuf::int32 value);

  // optional int64 param3 = 12;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 12;
  inline ::google::protobuf::int64 param3() const;
  inline void set_param3(::google::protobuf::int64 value);

  // optional int64 param4 = 13;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 13;
  inline ::google::protobuf::int64 param4() const;
  inline void set_param4(::google::protobuf::int64 value);

  // optional int64 param5 = 14;
  inline bool has_param5() const;
  inline void clear_param5();
  static const int kParam5FieldNumber = 14;
  inline ::google::protobuf::int64 param5() const;
  inline void set_param5(::google::protobuf::int64 value);

  // optional int64 param6 = 15;
  inline bool has_param6() const;
  inline void clear_param6();
  static const int kParam6FieldNumber = 15;
  inline ::google::protobuf::int64 param6() const;
  inline void set_param6(::google::protobuf::int64 value);

  // optional int64 param7 = 16;
  inline bool has_param7() const;
  inline void clear_param7();
  static const int kParam7FieldNumber = 16;
  inline ::google::protobuf::int64 param7() const;
  inline void set_param7(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.BuffDBInfo)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllev();
  inline void clear_has_skilllev();
  inline void set_has_is_forever();
  inline void clear_has_is_forever();
  inline void set_has_startmsec();
  inline void clear_has_startmsec();
  inline void set_has_is_effect();
  inline void clear_has_is_effect();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_extramsec();
  inline void clear_has_extramsec();
  inline void set_has_is_end();
  inline void clear_has_is_end();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();
  inline void set_has_param5();
  inline void clear_has_param5();
  inline void set_has_param6();
  inline void clear_has_param6();
  inline void set_has_param7();
  inline void clear_has_param7();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 buffid_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 skillid_;
  ::google::protobuf::uint32 skilllev_;
  bool is_forever_;
  bool is_effect_;
  ::google::protobuf::int64 startmsec_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int64 extramsec_;
  ::google::protobuf::int64 param3_;
  ::google::protobuf::int64 param4_;
  ::google::protobuf::int64 param5_;
  ::google::protobuf::int64 param6_;
  ::google::protobuf::int64 param7_;
  ::google::protobuf::int32 is_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BuffDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuffDBCdInfo : public ::google::protobuf::Message {
 public:
  BuffDBCdInfo();
  virtual ~BuffDBCdInfo();

  BuffDBCdInfo(const BuffDBCdInfo& from);

  inline BuffDBCdInfo& operator=(const BuffDBCdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDBCdInfo& default_instance();

  void Swap(BuffDBCdInfo* other);

  // implements Message ----------------------------------------------

  BuffDBCdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDBCdInfo& from);
  void MergeFrom(const BuffDBCdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 buffid = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 1;
  inline ::google::protobuf::uint64 buffid() const;
  inline void set_buffid(::google::protobuf::uint64 value);

  // optional uint64 lastmsec = 2;
  inline bool has_lastmsec() const;
  inline void clear_lastmsec();
  static const int kLastmsecFieldNumber = 2;
  inline ::google::protobuf::uint64 lastmsec() const;
  inline void set_lastmsec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.BuffDBCdInfo)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_lastmsec();
  inline void clear_has_lastmsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 buffid_;
  ::google::protobuf::uint64 lastmsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BuffDBCdInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuffDBShieldInfo : public ::google::protobuf::Message {
 public:
  BuffDBShieldInfo();
  virtual ~BuffDBShieldInfo();

  BuffDBShieldInfo(const BuffDBShieldInfo& from);

  inline BuffDBShieldInfo& operator=(const BuffDBShieldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDBShieldInfo& default_instance();

  void Swap(BuffDBShieldInfo* other);

  // implements Message ----------------------------------------------

  BuffDBShieldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDBShieldInfo& from);
  void MergeFrom(const BuffDBShieldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 god_shield = 1;
  inline bool has_god_shield() const;
  inline void clear_god_shield();
  static const int kGodShieldFieldNumber = 1;
  inline ::google::protobuf::int64 god_shield() const;
  inline void set_god_shield(::google::protobuf::int64 value);

  // optional int64 mag_shield = 2;
  inline bool has_mag_shield() const;
  inline void clear_mag_shield();
  static const int kMagShieldFieldNumber = 2;
  inline ::google::protobuf::int64 mag_shield() const;
  inline void set_mag_shield(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.BuffDBShieldInfo)
 private:
  inline void set_has_god_shield();
  inline void clear_has_god_shield();
  inline void set_has_mag_shield();
  inline void clear_has_mag_shield();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 god_shield_;
  ::google::protobuf::int64 mag_shield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BuffDBShieldInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuffDBData : public ::google::protobuf::Message {
 public:
  BuffDBData();
  virtual ~BuffDBData();

  BuffDBData(const BuffDBData& from);

  inline BuffDBData& operator=(const BuffDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDBData& default_instance();

  void Swap(BuffDBData* other);

  // implements Message ----------------------------------------------

  BuffDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDBData& from);
  void MergeFrom(const BuffDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::BuffDBInfo& info_lst(int index) const;
  inline ::proto_ff::BuffDBInfo* mutable_info_lst(int index);
  inline ::proto_ff::BuffDBInfo* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBInfo >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBInfo >*
      mutable_info_lst();

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  inline int cd_lst_size() const;
  inline void clear_cd_lst();
  static const int kCdLstFieldNumber = 2;
  inline const ::proto_ff::BuffDBCdInfo& cd_lst(int index) const;
  inline ::proto_ff::BuffDBCdInfo* mutable_cd_lst(int index);
  inline ::proto_ff::BuffDBCdInfo* add_cd_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBCdInfo >&
      cd_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBCdInfo >*
      mutable_cd_lst();

  // optional .proto_ff.BuffDBShieldInfo shield = 3;
  inline bool has_shield() const;
  inline void clear_shield();
  static const int kShieldFieldNumber = 3;
  inline const ::proto_ff::BuffDBShieldInfo& shield() const;
  inline ::proto_ff::BuffDBShieldInfo* mutable_shield();
  inline ::proto_ff::BuffDBShieldInfo* release_shield();
  inline void set_allocated_shield(::proto_ff::BuffDBShieldInfo* shield);

  // @@protoc_insertion_point(class_scope:proto_ff.BuffDBData)
 private:
  inline void set_has_shield();
  inline void clear_has_shield();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBInfo > info_lst_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBCdInfo > cd_lst_;
  ::proto_ff::BuffDBShieldInfo* shield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BuffDBData* default_instance_;
};
// -------------------------------------------------------------------

class BossSimpleInfoDB : public ::google::protobuf::Message {
 public:
  BossSimpleInfoDB();
  virtual ~BossSimpleInfoDB();

  BossSimpleInfoDB(const BossSimpleInfoDB& from);

  inline BossSimpleInfoDB& operator=(const BossSimpleInfoDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossSimpleInfoDB& default_instance();

  void Swap(BossSimpleInfoDB* other);

  // implements Message ----------------------------------------------

  BossSimpleInfoDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossSimpleInfoDB& from);
  void MergeFrom(const BossSimpleInfoDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 boss_type = 1;
  inline bool has_boss_type() const;
  inline void clear_boss_type();
  static const int kBossTypeFieldNumber = 1;
  inline ::google::protobuf::int32 boss_type() const;
  inline void set_boss_type(::google::protobuf::int32 value);

  // optional int32 cur_num = 2;
  inline bool has_cur_num() const;
  inline void clear_cur_num();
  static const int kCurNumFieldNumber = 2;
  inline ::google::protobuf::int32 cur_num() const;
  inline void set_cur_num(::google::protobuf::int32 value);

  // optional int32 back_num = 4;
  inline bool has_back_num() const;
  inline void clear_back_num();
  static const int kBackNumFieldNumber = 4;
  inline ::google::protobuf::int32 back_num() const;
  inline void set_back_num(::google::protobuf::int32 value);

  // optional int32 back_max_num = 5;
  inline bool has_back_max_num() const;
  inline void clear_back_max_num();
  static const int kBackMaxNumFieldNumber = 5;
  inline ::google::protobuf::int32 back_max_num() const;
  inline void set_back_max_num(::google::protobuf::int32 value);

  // optional int32 enter_num = 6;
  inline bool has_enter_num() const;
  inline void clear_enter_num();
  static const int kEnterNumFieldNumber = 6;
  inline ::google::protobuf::int32 enter_num() const;
  inline void set_enter_num(::google::protobuf::int32 value);

  // optional int32 use_item_num = 7;
  inline bool has_use_item_num() const;
  inline void clear_use_item_num();
  static const int kUseItemNumFieldNumber = 7;
  inline ::google::protobuf::int32 use_item_num() const;
  inline void set_use_item_num(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair groupInfo = 8;
  inline int groupinfo_size() const;
  inline void clear_groupinfo();
  static const int kGroupInfoFieldNumber = 8;
  inline const ::proto_ff::ComPair& groupinfo(int index) const;
  inline ::proto_ff::ComPair* mutable_groupinfo(int index);
  inline ::proto_ff::ComPair* add_groupinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      groupinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_groupinfo();

  // @@protoc_insertion_point(class_scope:proto_ff.BossSimpleInfoDB)
 private:
  inline void set_has_boss_type();
  inline void clear_has_boss_type();
  inline void set_has_cur_num();
  inline void clear_has_cur_num();
  inline void set_has_back_num();
  inline void clear_has_back_num();
  inline void set_has_back_max_num();
  inline void clear_has_back_max_num();
  inline void set_has_enter_num();
  inline void clear_has_enter_num();
  inline void set_has_use_item_num();
  inline void clear_has_use_item_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 boss_type_;
  ::google::protobuf::int32 cur_num_;
  ::google::protobuf::int32 back_num_;
  ::google::protobuf::int32 back_max_num_;
  ::google::protobuf::int32 enter_num_;
  ::google::protobuf::int32 use_item_num_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > groupinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BossSimpleInfoDB* default_instance_;
};
// -------------------------------------------------------------------

class BossDBData : public ::google::protobuf::Message {
 public:
  BossDBData();
  virtual ~BossDBData();

  BossDBData(const BossDBData& from);

  inline BossDBData& operator=(const BossDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDBData& default_instance();

  void Swap(BossDBData* other);

  // implements Message ----------------------------------------------

  BossDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDBData& from);
  void MergeFrom(const BossDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::proto_ff::BossSimpleInfoDB& infos(int index) const;
  inline ::proto_ff::BossSimpleInfoDB* mutable_infos(int index);
  inline ::proto_ff::BossSimpleInfoDB* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BossSimpleInfoDB >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BossSimpleInfoDB >*
      mutable_infos();

  // optional uint64 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint64 value);

  // repeated int64 attents = 3;
  inline int attents_size() const;
  inline void clear_attents();
  static const int kAttentsFieldNumber = 3;
  inline ::google::protobuf::int64 attents(int index) const;
  inline void set_attents(int index, ::google::protobuf::int64 value);
  inline void add_attents(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      attents() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_attents();

  // @@protoc_insertion_point(class_scope:proto_ff.BossDBData)
 private:
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::BossSimpleInfoDB > infos_;
  ::google::protobuf::uint64 lasttime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > attents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static BossDBData* default_instance_;
};
// -------------------------------------------------------------------

class VipDBData : public ::google::protobuf::Message {
 public:
  VipDBData();
  virtual ~VipDBData();

  VipDBData(const VipDBData& from);

  inline VipDBData& operator=(const VipDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipDBData& default_instance();

  void Swap(VipDBData* other);

  // implements Message ----------------------------------------------

  VipDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipDBData& from);
  void MergeFrom(const VipDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vipExp = 1;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipExpFieldNumber = 1;
  inline ::google::protobuf::int32 vipexp() const;
  inline void set_vipexp(::google::protobuf::int32 value);

  // optional int32 expDiamond = 2;
  inline bool has_expdiamond() const;
  inline void clear_expdiamond();
  static const int kExpDiamondFieldNumber = 2;
  inline ::google::protobuf::int32 expdiamond() const;
  inline void set_expdiamond(::google::protobuf::int32 value);

  // repeated int32 privilege_ids = 3;
  inline int privilege_ids_size() const;
  inline void clear_privilege_ids();
  static const int kPrivilegeIdsFieldNumber = 3;
  inline ::google::protobuf::int32 privilege_ids(int index) const;
  inline void set_privilege_ids(int index, ::google::protobuf::int32 value);
  inline void add_privilege_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      privilege_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_privilege_ids();

  // optional int32 vip_hide = 4;
  inline bool has_vip_hide() const;
  inline void clear_vip_hide();
  static const int kVipHideFieldNumber = 4;
  inline ::google::protobuf::int32 vip_hide() const;
  inline void set_vip_hide(::google::protobuf::int32 value);

  // optional int32 active_type = 5;
  inline bool has_active_type() const;
  inline void clear_active_type();
  static const int kActiveTypeFieldNumber = 5;
  inline ::google::protobuf::int32 active_type() const;
  inline void set_active_type(::google::protobuf::int32 value);

  // optional uint64 outtime = 6;
  inline bool has_outtime() const;
  inline void clear_outtime();
  static const int kOuttimeFieldNumber = 6;
  inline ::google::protobuf::uint64 outtime() const;
  inline void set_outtime(::google::protobuf::uint64 value);

  // optional uint64 last_recv_day_gift_time = 7;
  inline bool has_last_recv_day_gift_time() const;
  inline void clear_last_recv_day_gift_time();
  static const int kLastRecvDayGiftTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 last_recv_day_gift_time() const;
  inline void set_last_recv_day_gift_time(::google::protobuf::uint64 value);

  // repeated int32 lv_gift = 8;
  inline int lv_gift_size() const;
  inline void clear_lv_gift();
  static const int kLvGiftFieldNumber = 8;
  inline ::google::protobuf::int32 lv_gift(int index) const;
  inline void set_lv_gift(int index, ::google::protobuf::int32 value);
  inline void add_lv_gift(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lv_gift() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lv_gift();

  // optional int32 zero_state = 9;
  inline bool has_zero_state() const;
  inline void clear_zero_state();
  static const int kZeroStateFieldNumber = 9;
  inline ::google::protobuf::int32 zero_state() const;
  inline void set_zero_state(::google::protobuf::int32 value);

  // optional int32 recv_zero = 10;
  inline bool has_recv_zero() const;
  inline void clear_recv_zero();
  static const int kRecvZeroFieldNumber = 10;
  inline ::google::protobuf::int32 recv_zero() const;
  inline void set_recv_zero(::google::protobuf::int32 value);

  // optional uint64 add_exp = 11;
  inline bool has_add_exp() const;
  inline void clear_add_exp();
  static const int kAddExpFieldNumber = 11;
  inline ::google::protobuf::uint64 add_exp() const;
  inline void set_add_exp(::google::protobuf::uint64 value);

  // optional int32 recv_exp = 12;
  inline bool has_recv_exp() const;
  inline void clear_recv_exp();
  static const int kRecvExpFieldNumber = 12;
  inline ::google::protobuf::int32 recv_exp() const;
  inline void set_recv_exp(::google::protobuf::int32 value);

  // optional uint64 refresh_time = 13;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint64 value);

  // optional uint64 active_time = 14;
  inline bool has_active_time() const;
  inline void clear_active_time();
  static const int kActiveTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 active_time() const;
  inline void set_active_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.VipDBData)
 private:
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_expdiamond();
  inline void clear_has_expdiamond();
  inline void set_has_vip_hide();
  inline void clear_has_vip_hide();
  inline void set_has_active_type();
  inline void clear_has_active_type();
  inline void set_has_outtime();
  inline void clear_has_outtime();
  inline void set_has_last_recv_day_gift_time();
  inline void clear_has_last_recv_day_gift_time();
  inline void set_has_zero_state();
  inline void clear_has_zero_state();
  inline void set_has_recv_zero();
  inline void clear_has_recv_zero();
  inline void set_has_add_exp();
  inline void clear_has_add_exp();
  inline void set_has_recv_exp();
  inline void clear_has_recv_exp();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_active_time();
  inline void clear_has_active_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 vipexp_;
  ::google::protobuf::int32 expdiamond_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > privilege_ids_;
  ::google::protobuf::int32 vip_hide_;
  ::google::protobuf::int32 active_type_;
  ::google::protobuf::uint64 outtime_;
  ::google::protobuf::uint64 last_recv_day_gift_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lv_gift_;
  ::google::protobuf::int32 zero_state_;
  ::google::protobuf::int32 recv_zero_;
  ::google::protobuf::uint64 add_exp_;
  ::google::protobuf::uint64 refresh_time_;
  ::google::protobuf::uint64 active_time_;
  ::google::protobuf::int32 recv_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static VipDBData* default_instance_;
};
// -------------------------------------------------------------------

class AttrDBData : public ::google::protobuf::Message {
 public:
  AttrDBData();
  virtual ~AttrDBData();

  AttrDBData(const AttrDBData& from);

  inline AttrDBData& operator=(const AttrDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrDBData& default_instance();

  void Swap(AttrDBData* other);

  // implements Message ----------------------------------------------

  AttrDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttrDBData& from);
  void MergeFrom(const AttrDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Attr64 attr_lst = 1;
  inline int attr_lst_size() const;
  inline void clear_attr_lst();
  static const int kAttrLstFieldNumber = 1;
  inline const ::proto_ff::Attr64& attr_lst(int index) const;
  inline ::proto_ff::Attr64* mutable_attr_lst(int index);
  inline ::proto_ff::Attr64* add_attr_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
      attr_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
      mutable_attr_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.AttrDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 > attr_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AttrDBData* default_instance_;
};
// -------------------------------------------------------------------

class PetDBRecord : public ::google::protobuf::Message {
 public:
  PetDBRecord();
  virtual ~PetDBRecord();

  PetDBRecord(const PetDBRecord& from);

  inline PetDBRecord& operator=(const PetDBRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetDBRecord& default_instance();

  void Swap(PetDBRecord* other);

  // implements Message ----------------------------------------------

  PetDBRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetDBRecord& from);
  void MergeFrom(const PetDBRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instId = 1;
  inline bool has_instid() const;
  inline void clear_instid();
  static const int kInstIdFieldNumber = 1;
  inline ::google::protobuf::int32 instid() const;
  inline void set_instid(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair64 costItem = 2;
  inline int costitem_size() const;
  inline void clear_costitem();
  static const int kCostItemFieldNumber = 2;
  inline const ::proto_ff::ComPair64& costitem(int index) const;
  inline ::proto_ff::ComPair64* mutable_costitem(int index);
  inline ::proto_ff::ComPair64* add_costitem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      costitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_costitem();

  // repeated .proto_ff.ComPair64 costPet = 3;
  inline int costpet_size() const;
  inline void clear_costpet();
  static const int kCostPetFieldNumber = 3;
  inline const ::proto_ff::ComPair64& costpet(int index) const;
  inline ::proto_ff::ComPair64* mutable_costpet(int index);
  inline ::proto_ff::ComPair64* add_costpet();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      costpet() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_costpet();

  // @@protoc_insertion_point(class_scope:proto_ff.PetDBRecord)
 private:
  inline void set_has_instid();
  inline void clear_has_instid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > costitem_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > costpet_;
  ::google::protobuf::int32 instid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static PetDBRecord* default_instance_;
};
// -------------------------------------------------------------------

class PetGrowDB : public ::google::protobuf::Message {
 public:
  PetGrowDB();
  virtual ~PetGrowDB();

  PetGrowDB(const PetGrowDB& from);

  inline PetGrowDB& operator=(const PetGrowDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetGrowDB& default_instance();

  void Swap(PetGrowDB* other);

  // implements Message ----------------------------------------------

  PetGrowDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetGrowDB& from);
  void MergeFrom(const PetGrowDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cfgid = 1;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 1;
  inline ::google::protobuf::int32 cfgid() const;
  inline void set_cfgid(::google::protobuf::int32 value);

  // optional int32 stronglv = 2;
  inline bool has_stronglv() const;
  inline void clear_stronglv();
  static const int kStronglvFieldNumber = 2;
  inline ::google::protobuf::int32 stronglv() const;
  inline void set_stronglv(::google::protobuf::int32 value);

  // optional int32 starlv = 3;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarlvFieldNumber = 3;
  inline ::google::protobuf::int32 starlv() const;
  inline void set_starlv(::google::protobuf::int32 value);

  // optional int32 starindex = 4;
  inline bool has_starindex() const;
  inline void clear_starindex();
  static const int kStarindexFieldNumber = 4;
  inline ::google::protobuf::int32 starindex() const;
  inline void set_starindex(::google::protobuf::int32 value);

  // optional int32 failnum = 5;
  inline bool has_failnum() const;
  inline void clear_failnum();
  static const int kFailnumFieldNumber = 5;
  inline ::google::protobuf::int32 failnum() const;
  inline void set_failnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PetGrowDB)
 private:
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_stronglv();
  inline void clear_has_stronglv();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_starindex();
  inline void clear_has_starindex();
  inline void set_has_failnum();
  inline void clear_has_failnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cfgid_;
  ::google::protobuf::int32 stronglv_;
  ::google::protobuf::int32 starlv_;
  ::google::protobuf::int32 starindex_;
  ::google::protobuf::int32 failnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static PetGrowDB* default_instance_;
};
// -------------------------------------------------------------------

class PetDBData : public ::google::protobuf::Message {
 public:
  PetDBData();
  virtual ~PetDBData();

  PetDBData(const PetDBData& from);

  inline PetDBData& operator=(const PetDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetDBData& default_instance();

  void Swap(PetDBData* other);

  // implements Message ----------------------------------------------

  PetDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetDBData& from);
  void MergeFrom(const PetDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fetter = 1;
  inline int fetter_size() const;
  inline void clear_fetter();
  static const int kFetterFieldNumber = 1;
  inline ::google::protobuf::int32 fetter(int index) const;
  inline void set_fetter(int index, ::google::protobuf::int32 value);
  inline void add_fetter(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetter();

  // repeated .proto_ff.PetInfo pets = 2;
  inline int pets_size() const;
  inline void clear_pets();
  static const int kPetsFieldNumber = 2;
  inline const ::proto_ff::PetInfo& pets(int index) const;
  inline ::proto_ff::PetInfo* mutable_pets(int index);
  inline ::proto_ff::PetInfo* add_pets();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetInfo >&
      pets() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetInfo >*
      mutable_pets();

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  inline int hatchs_size() const;
  inline void clear_hatchs();
  static const int kHatchsFieldNumber = 3;
  inline const ::proto_ff::PetHatchInfo& hatchs(int index) const;
  inline ::proto_ff::PetHatchInfo* mutable_hatchs(int index);
  inline ::proto_ff::PetHatchInfo* add_hatchs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetHatchInfo >&
      hatchs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetHatchInfo >*
      mutable_hatchs();

  // repeated .proto_ff.PetDBRecord records = 4;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 4;
  inline const ::proto_ff::PetDBRecord& records(int index) const;
  inline ::proto_ff::PetDBRecord* mutable_records(int index);
  inline ::proto_ff::PetDBRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetDBRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetDBRecord >*
      mutable_records();

  // repeated int64 cfgids = 5;
  inline int cfgids_size() const;
  inline void clear_cfgids();
  static const int kCfgidsFieldNumber = 5;
  inline ::google::protobuf::int64 cfgids(int index) const;
  inline void set_cfgids(int index, ::google::protobuf::int64 value);
  inline void add_cfgids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      cfgids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_cfgids();

  // repeated .proto_ff.PetGrowDB grows = 6;
  inline int grows_size() const;
  inline void clear_grows();
  static const int kGrowsFieldNumber = 6;
  inline const ::proto_ff::PetGrowDB& grows(int index) const;
  inline ::proto_ff::PetGrowDB* mutable_grows(int index);
  inline ::proto_ff::PetGrowDB* add_grows();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetGrowDB >&
      grows() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetGrowDB >*
      mutable_grows();

  // optional .proto_ff.PetYaoHunModule yaohun = 7;
  inline bool has_yaohun() const;
  inline void clear_yaohun();
  static const int kYaohunFieldNumber = 7;
  inline const ::proto_ff::PetYaoHunModule& yaohun() const;
  inline ::proto_ff::PetYaoHunModule* mutable_yaohun();
  inline ::proto_ff::PetYaoHunModule* release_yaohun();
  inline void set_allocated_yaohun(::proto_ff::PetYaoHunModule* yaohun);

  // @@protoc_insertion_point(class_scope:proto_ff.PetDBData)
 private:
  inline void set_has_yaohun();
  inline void clear_has_yaohun();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetter_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::PetInfo > pets_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::PetHatchInfo > hatchs_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::PetDBRecord > records_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > cfgids_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::PetGrowDB > grows_;
  ::proto_ff::PetYaoHunModule* yaohun_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static PetDBData* default_instance_;
};
// -------------------------------------------------------------------

class MallDBInfo : public ::google::protobuf::Message {
 public:
  MallDBInfo();
  virtual ~MallDBInfo();

  MallDBInfo(const MallDBInfo& from);

  inline MallDBInfo& operator=(const MallDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallDBInfo& default_instance();

  void Swap(MallDBInfo* other);

  // implements Message ----------------------------------------------

  MallDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MallDBInfo& from);
  void MergeFrom(const MallDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MallDBInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MallDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class MallDBData : public ::google::protobuf::Message {
 public:
  MallDBData();
  virtual ~MallDBData();

  MallDBData(const MallDBData& from);

  inline MallDBData& operator=(const MallDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallDBData& default_instance();

  void Swap(MallDBData* other);

  // implements Message ----------------------------------------------

  MallDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MallDBData& from);
  void MergeFrom(const MallDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.MallDBInfo day = 1;
  inline int day_size() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline const ::proto_ff::MallDBInfo& day(int index) const;
  inline ::proto_ff::MallDBInfo* mutable_day(int index);
  inline ::proto_ff::MallDBInfo* add_day();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >&
      day() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >*
      mutable_day();

  // repeated .proto_ff.MallDBInfo week = 2;
  inline int week_size() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 2;
  inline const ::proto_ff::MallDBInfo& week(int index) const;
  inline ::proto_ff::MallDBInfo* mutable_week(int index);
  inline ::proto_ff::MallDBInfo* add_week();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >&
      week() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >*
      mutable_week();

  // repeated .proto_ff.MallDBInfo forever = 3;
  inline int forever_size() const;
  inline void clear_forever();
  static const int kForeverFieldNumber = 3;
  inline const ::proto_ff::MallDBInfo& forever(int index) const;
  inline ::proto_ff::MallDBInfo* mutable_forever(int index);
  inline ::proto_ff::MallDBInfo* add_forever();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >&
      forever() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >*
      mutable_forever();

  // @@protoc_insertion_point(class_scope:proto_ff.MallDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo > day_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo > week_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo > forever_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MallDBData* default_instance_;
};
// -------------------------------------------------------------------

class ConvoyData : public ::google::protobuf::Message {
 public:
  ConvoyData();
  virtual ~ConvoyData();

  ConvoyData(const ConvoyData& from);

  inline ConvoyData& operator=(const ConvoyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvoyData& default_instance();

  void Swap(ConvoyData* other);

  // implements Message ----------------------------------------------

  ConvoyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvoyData& from);
  void MergeFrom(const ConvoyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 daynum = 1;
  inline bool has_daynum() const;
  inline void clear_daynum();
  static const int kDaynumFieldNumber = 1;
  inline ::google::protobuf::int32 daynum() const;
  inline void set_daynum(::google::protobuf::int32 value);

  // optional int32 escortid = 2;
  inline bool has_escortid() const;
  inline void clear_escortid();
  static const int kEscortidFieldNumber = 2;
  inline ::google::protobuf::int32 escortid() const;
  inline void set_escortid(::google::protobuf::int32 value);

  // optional uint64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional int32 freeNum = 4;
  inline bool has_freenum() const;
  inline void clear_freenum();
  static const int kFreeNumFieldNumber = 4;
  inline ::google::protobuf::int32 freenum() const;
  inline void set_freenum(::google::protobuf::int32 value);

  // optional int32 genEscortId = 5;
  inline bool has_genescortid() const;
  inline void clear_genescortid();
  static const int kGenEscortIdFieldNumber = 5;
  inline ::google::protobuf::int32 genescortid() const;
  inline void set_genescortid(::google::protobuf::int32 value);

  // optional uint64 resetTime = 6;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ConvoyData)
 private:
  inline void set_has_daynum();
  inline void clear_has_daynum();
  inline void set_has_escortid();
  inline void clear_has_escortid();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_freenum();
  inline void clear_has_freenum();
  inline void set_has_genescortid();
  inline void clear_has_genescortid();
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 daynum_;
  ::google::protobuf::int32 escortid_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::int32 freenum_;
  ::google::protobuf::int32 genescortid_;
  ::google::protobuf::uint64 resettime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ConvoyData* default_instance_;
};
// -------------------------------------------------------------------

class ArmorDBData : public ::google::protobuf::Message {
 public:
  ArmorDBData();
  virtual ~ArmorDBData();

  ArmorDBData(const ArmorDBData& from);

  inline ArmorDBData& operator=(const ArmorDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArmorDBData& default_instance();

  void Swap(ArmorDBData* other);

  // implements Message ----------------------------------------------

  ArmorDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArmorDBData& from);
  void MergeFrom(const ArmorDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ArmorInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::proto_ff::ArmorInfo& infos(int index) const;
  inline ::proto_ff::ArmorInfo* mutable_infos(int index);
  inline ::proto_ff::ArmorInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArmorInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArmorInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:proto_ff.ArmorDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ArmorInfo > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ArmorDBData* default_instance_;
};
// -------------------------------------------------------------------

class AssistDBData : public ::google::protobuf::Message {
 public:
  AssistDBData();
  virtual ~AssistDBData();

  AssistDBData(const AssistDBData& from);

  inline AssistDBData& operator=(const AssistDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssistDBData& default_instance();

  void Swap(AssistDBData* other);

  // implements Message ----------------------------------------------

  AssistDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssistDBData& from);
  void MergeFrom(const AssistDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 resetTime = 1;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // optional int32 dayPrestige = 2;
  inline bool has_dayprestige() const;
  inline void clear_dayprestige();
  static const int kDayPrestigeFieldNumber = 2;
  inline ::google::protobuf::int32 dayprestige() const;
  inline void set_dayprestige(::google::protobuf::int32 value);

  // optional int32 sendNum = 3;
  inline bool has_sendnum() const;
  inline void clear_sendnum();
  static const int kSendNumFieldNumber = 3;
  inline ::google::protobuf::int32 sendnum() const;
  inline void set_sendnum(::google::protobuf::int32 value);

  // optional int32 helpNum = 4;
  inline bool has_helpnum() const;
  inline void clear_helpnum();
  static const int kHelpNumFieldNumber = 4;
  inline ::google::protobuf::int32 helpnum() const;
  inline void set_helpnum(::google::protobuf::int32 value);

  // optional int32 allSendNum = 5;
  inline bool has_allsendnum() const;
  inline void clear_allsendnum();
  static const int kAllSendNumFieldNumber = 5;
  inline ::google::protobuf::int32 allsendnum() const;
  inline void set_allsendnum(::google::protobuf::int32 value);

  // optional int32 allHelpNum = 6;
  inline bool has_allhelpnum() const;
  inline void clear_allhelpnum();
  static const int kAllHelpNumFieldNumber = 6;
  inline ::google::protobuf::int32 allhelpnum() const;
  inline void set_allhelpnum(::google::protobuf::int32 value);

  // optional int32 recvSendGiftNum = 7;
  inline bool has_recvsendgiftnum() const;
  inline void clear_recvsendgiftnum();
  static const int kRecvSendGiftNumFieldNumber = 7;
  inline ::google::protobuf::int32 recvsendgiftnum() const;
  inline void set_recvsendgiftnum(::google::protobuf::int32 value);

  // optional int32 recvHelpGiftNum = 8;
  inline bool has_recvhelpgiftnum() const;
  inline void clear_recvhelpgiftnum();
  static const int kRecvHelpGiftNumFieldNumber = 8;
  inline ::google::protobuf::int32 recvhelpgiftnum() const;
  inline void set_recvhelpgiftnum(::google::protobuf::int32 value);

  // repeated int32 rewardIds = 9;
  inline int rewardids_size() const;
  inline void clear_rewardids();
  static const int kRewardIdsFieldNumber = 9;
  inline ::google::protobuf::int32 rewardids(int index) const;
  inline void set_rewardids(int index, ::google::protobuf::int32 value);
  inline void add_rewardids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rewardids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rewardids();

  // repeated .proto_ff.ComPair64 thanksInfo = 10;
  inline int thanksinfo_size() const;
  inline void clear_thanksinfo();
  static const int kThanksInfoFieldNumber = 10;
  inline const ::proto_ff::ComPair64& thanksinfo(int index) const;
  inline ::proto_ff::ComPair64* mutable_thanksinfo(int index);
  inline ::proto_ff::ComPair64* add_thanksinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      thanksinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_thanksinfo();

  // @@protoc_insertion_point(class_scope:proto_ff.AssistDBData)
 private:
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_dayprestige();
  inline void clear_has_dayprestige();
  inline void set_has_sendnum();
  inline void clear_has_sendnum();
  inline void set_has_helpnum();
  inline void clear_has_helpnum();
  inline void set_has_allsendnum();
  inline void clear_has_allsendnum();
  inline void set_has_allhelpnum();
  inline void clear_has_allhelpnum();
  inline void set_has_recvsendgiftnum();
  inline void clear_has_recvsendgiftnum();
  inline void set_has_recvhelpgiftnum();
  inline void clear_has_recvhelpgiftnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::int32 dayprestige_;
  ::google::protobuf::int32 sendnum_;
  ::google::protobuf::int32 helpnum_;
  ::google::protobuf::int32 allsendnum_;
  ::google::protobuf::int32 allhelpnum_;
  ::google::protobuf::int32 recvsendgiftnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rewardids_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > thanksinfo_;
  ::google::protobuf::int32 recvhelpgiftnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AssistDBData* default_instance_;
};
// -------------------------------------------------------------------

class TitleDBData : public ::google::protobuf::Message {
 public:
  TitleDBData();
  virtual ~TitleDBData();

  TitleDBData(const TitleDBData& from);

  inline TitleDBData& operator=(const TitleDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TitleDBData& default_instance();

  void Swap(TitleDBData* other);

  // implements Message ----------------------------------------------

  TitleDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TitleDBData& from);
  void MergeFrom(const TitleDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cur_wearing_title = 1;
  inline bool has_cur_wearing_title() const;
  inline void clear_cur_wearing_title();
  static const int kCurWearingTitleFieldNumber = 1;
  inline ::google::protobuf::uint64 cur_wearing_title() const;
  inline void set_cur_wearing_title(::google::protobuf::uint64 value);

  // repeated .proto_ff.TitleInfo data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto_ff::TitleInfo& data(int index) const;
  inline ::proto_ff::TitleInfo* mutable_data(int index);
  inline ::proto_ff::TitleInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TitleInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TitleInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.TitleDBData)
 private:
  inline void set_has_cur_wearing_title();
  inline void clear_has_cur_wearing_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cur_wearing_title_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::TitleInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static TitleDBData* default_instance_;
};
// -------------------------------------------------------------------

class GodEvilCondDBProto : public ::google::protobuf::Message {
 public:
  GodEvilCondDBProto();
  virtual ~GodEvilCondDBProto();

  GodEvilCondDBProto(const GodEvilCondDBProto& from);

  inline GodEvilCondDBProto& operator=(const GodEvilCondDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GodEvilCondDBProto& default_instance();

  void Swap(GodEvilCondDBProto* other);

  // implements Message ----------------------------------------------

  GodEvilCondDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodEvilCondDBProto& from);
  void MergeFrom(const GodEvilCondDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 cur = 3;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 3;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GodEvilCondDBProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cur();
  inline void clear_has_cur();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cur_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GodEvilCondDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GodEvilMultCondDBProto : public ::google::protobuf::Message {
 public:
  GodEvilMultCondDBProto();
  virtual ~GodEvilMultCondDBProto();

  GodEvilMultCondDBProto(const GodEvilMultCondDBProto& from);

  inline GodEvilMultCondDBProto& operator=(const GodEvilMultCondDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GodEvilMultCondDBProto& default_instance();

  void Swap(GodEvilMultCondDBProto* other);

  // implements Message ----------------------------------------------

  GodEvilMultCondDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodEvilMultCondDBProto& from);
  void MergeFrom(const GodEvilMultCondDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GodEvilCondDBProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::GodEvilCondDBProto& lst(int index) const;
  inline ::proto_ff::GodEvilCondDBProto* mutable_lst(int index);
  inline ::proto_ff::GodEvilCondDBProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GodEvilCondDBProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GodEvilCondDBProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.GodEvilMultCondDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GodEvilCondDBProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GodEvilMultCondDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GodEvilTaskDBProto : public ::google::protobuf::Message {
 public:
  GodEvilTaskDBProto();
  virtual ~GodEvilTaskDBProto();

  GodEvilTaskDBProto(const GodEvilTaskDBProto& from);

  inline GodEvilTaskDBProto& operator=(const GodEvilTaskDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GodEvilTaskDBProto& default_instance();

  void Swap(GodEvilTaskDBProto* other);

  // implements Message ----------------------------------------------

  GodEvilTaskDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodEvilTaskDBProto& from);
  void MergeFrom(const GodEvilTaskDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional .proto_ff.GodEvilMultCondDBProto cond = 2;
  inline bool has_cond() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 2;
  inline const ::proto_ff::GodEvilMultCondDBProto& cond() const;
  inline ::proto_ff::GodEvilMultCondDBProto* mutable_cond();
  inline ::proto_ff::GodEvilMultCondDBProto* release_cond();
  inline void set_allocated_cond(::proto_ff::GodEvilMultCondDBProto* cond);

  // optional int32 finish = 3;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 3;
  inline ::google::protobuf::int32 finish() const;
  inline void set_finish(::google::protobuf::int32 value);

  // optional int32 accept = 4;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 4;
  inline ::google::protobuf::int32 accept() const;
  inline void set_accept(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GodEvilTaskDBProto)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_cond();
  inline void clear_has_cond();
  inline void set_has_finish();
  inline void clear_has_finish();
  inline void set_has_accept();
  inline void clear_has_accept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::GodEvilMultCondDBProto* cond_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 finish_;
  ::google::protobuf::int32 accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GodEvilTaskDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GodEvilDBData : public ::google::protobuf::Message {
 public:
  GodEvilDBData();
  virtual ~GodEvilDBData();

  GodEvilDBData(const GodEvilDBData& from);

  inline GodEvilDBData& operator=(const GodEvilDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GodEvilDBData& default_instance();

  void Swap(GodEvilDBData* other);

  // implements Message ----------------------------------------------

  GodEvilDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodEvilDBData& from);
  void MergeFrom(const GodEvilDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fetch = 1;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 1;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // optional .proto_ff.GodEvilTaskDBProto task = 2;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 2;
  inline const ::proto_ff::GodEvilTaskDBProto& task() const;
  inline ::proto_ff::GodEvilTaskDBProto* mutable_task();
  inline ::proto_ff::GodEvilTaskDBProto* release_task();
  inline void set_allocated_task(::proto_ff::GodEvilTaskDBProto* task);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 last_time = 4;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 last_time() const;
  inline void set_last_time(::google::protobuf::uint64 value);

  // optional int32 vessel_lev = 5;
  inline bool has_vessel_lev() const;
  inline void clear_vessel_lev();
  static const int kVesselLevFieldNumber = 5;
  inline ::google::protobuf::int32 vessel_lev() const;
  inline void set_vessel_lev(::google::protobuf::int32 value);

  // optional int32 mirror_lev = 6;
  inline bool has_mirror_lev() const;
  inline void clear_mirror_lev();
  static const int kMirrorLevFieldNumber = 6;
  inline ::google::protobuf::int32 mirror_lev() const;
  inline void set_mirror_lev(::google::protobuf::int32 value);

  // optional int64 extra_exp = 7;
  inline bool has_extra_exp() const;
  inline void clear_extra_exp();
  static const int kExtraExpFieldNumber = 7;
  inline ::google::protobuf::int64 extra_exp() const;
  inline void set_extra_exp(::google::protobuf::int64 value);

  // repeated .proto_ff.ItemProtoInfo equip = 8;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 8;
  inline const ::proto_ff::ItemProtoInfo& equip(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_equip(int index);
  inline ::proto_ff::ItemProtoInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_equip();

  // repeated .proto_ff.ItemProtoInfo dress = 9;
  inline int dress_size() const;
  inline void clear_dress();
  static const int kDressFieldNumber = 9;
  inline const ::proto_ff::ItemProtoInfo& dress(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_dress(int index);
  inline ::proto_ff::ItemProtoInfo* add_dress();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      dress() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_dress();

  // @@protoc_insertion_point(class_scope:proto_ff.GodEvilDBData)
 private:
  inline void set_has_fetch();
  inline void clear_has_fetch();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_vessel_lev();
  inline void clear_has_vessel_lev();
  inline void set_has_mirror_lev();
  inline void clear_has_mirror_lev();
  inline void set_has_extra_exp();
  inline void clear_has_extra_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::GodEvilTaskDBProto* task_;
  ::google::protobuf::int32 fetch_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 last_time_;
  ::google::protobuf::int32 vessel_lev_;
  ::google::protobuf::int32 mirror_lev_;
  ::google::protobuf::int64 extra_exp_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > equip_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > dress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GodEvilDBData* default_instance_;
};
// -------------------------------------------------------------------

class PayDBData : public ::google::protobuf::Message {
 public:
  PayDBData();
  virtual ~PayDBData();

  PayDBData(const PayDBData& from);

  inline PayDBData& operator=(const PayDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayDBData& default_instance();

  void Swap(PayDBData* other);

  // implements Message ----------------------------------------------

  PayDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayDBData& from);
  void MergeFrom(const PayDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 db_id = 1;
  inline int db_id_size() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  inline ::google::protobuf::uint32 db_id(int index) const;
  inline void set_db_id(int index, ::google::protobuf::uint32 value);
  inline void add_db_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      db_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_db_id();

  // repeated bytes product = 2;
  inline int product_size() const;
  inline void clear_product();
  static const int kProductFieldNumber = 2;
  inline const ::std::string& product(int index) const;
  inline ::std::string* mutable_product(int index);
  inline void set_product(int index, const ::std::string& value);
  inline void set_product(int index, const char* value);
  inline void set_product(int index, const void* value, size_t size);
  inline ::std::string* add_product();
  inline void add_product(const ::std::string& value);
  inline void add_product(const char* value);
  inline void add_product(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& product() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_product();

  // optional uint32 relrmb = 3;
  inline bool has_relrmb() const;
  inline void clear_relrmb();
  static const int kRelrmbFieldNumber = 3;
  inline ::google::protobuf::uint32 relrmb() const;
  inline void set_relrmb(::google::protobuf::uint32 value);

  // optional uint32 rmb = 4;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 4;
  inline ::google::protobuf::uint32 rmb() const;
  inline void set_rmb(::google::protobuf::uint32 value);

  // optional uint32 fakermb = 5;
  inline bool has_fakermb() const;
  inline void clear_fakermb();
  static const int kFakermbFieldNumber = 5;
  inline ::google::protobuf::uint32 fakermb() const;
  inline void set_fakermb(::google::protobuf::uint32 value);

  // optional uint32 todayrmb = 6;
  inline bool has_todayrmb() const;
  inline void clear_todayrmb();
  static const int kTodayrmbFieldNumber = 6;
  inline ::google::protobuf::uint32 todayrmb() const;
  inline void set_todayrmb(::google::protobuf::uint32 value);

  // optional uint64 todaytime = 7;
  inline bool has_todaytime() const;
  inline void clear_todaytime();
  static const int kTodaytimeFieldNumber = 7;
  inline ::google::protobuf::uint64 todaytime() const;
  inline void set_todaytime(::google::protobuf::uint64 value);

  // optional uint32 sdkrmb = 8;
  inline bool has_sdkrmb() const;
  inline void clear_sdkrmb();
  static const int kSdkrmbFieldNumber = 8;
  inline ::google::protobuf::uint32 sdkrmb() const;
  inline void set_sdkrmb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PayDBData)
 private:
  inline void set_has_relrmb();
  inline void clear_has_relrmb();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_fakermb();
  inline void clear_has_fakermb();
  inline void set_has_todayrmb();
  inline void clear_has_todayrmb();
  inline void set_has_todaytime();
  inline void clear_has_todaytime();
  inline void set_has_sdkrmb();
  inline void clear_has_sdkrmb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > db_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> product_;
  ::google::protobuf::uint32 relrmb_;
  ::google::protobuf::uint32 rmb_;
  ::google::protobuf::uint32 fakermb_;
  ::google::protobuf::uint32 todayrmb_;
  ::google::protobuf::uint64 todaytime_;
  ::google::protobuf::uint32 sdkrmb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static PayDBData* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBSalary : public ::google::protobuf::Message {
 public:
  FactionDBSalary();
  virtual ~FactionDBSalary();

  FactionDBSalary(const FactionDBSalary& from);

  inline FactionDBSalary& operator=(const FactionDBSalary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBSalary& default_instance();

  void Swap(FactionDBSalary* other);

  // implements Message ----------------------------------------------

  FactionDBSalary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBSalary& from);
  void MergeFrom(const FactionDBSalary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBSalary)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBSalary* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBDinner : public ::google::protobuf::Message {
 public:
  FactionDBDinner();
  virtual ~FactionDBDinner();

  FactionDBDinner(const FactionDBDinner& from);

  inline FactionDBDinner& operator=(const FactionDBDinner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBDinner& default_instance();

  void Swap(FactionDBDinner* other);

  // implements Message ----------------------------------------------

  FactionDBDinner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBDinner& from);
  void MergeFrom(const FactionDBDinner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 trans = 1;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 1;
  inline ::google::protobuf::int32 trans() const;
  inline void set_trans(::google::protobuf::int32 value);

  // optional int32 meat = 2;
  inline bool has_meat() const;
  inline void clear_meat();
  static const int kMeatFieldNumber = 2;
  inline ::google::protobuf::int32 meat() const;
  inline void set_meat(::google::protobuf::int32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 contri = 4;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 4;
  inline ::google::protobuf::uint32 contri() const;
  inline void set_contri(::google::protobuf::uint32 value);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 trans_time = 6;
  inline bool has_trans_time() const;
  inline void clear_trans_time();
  static const int kTransTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 trans_time() const;
  inline void set_trans_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBDinner)
 private:
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_meat();
  inline void clear_has_meat();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_trans_time();
  inline void clear_has_trans_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 trans_;
  ::google::protobuf::int32 meat_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 contri_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 trans_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBDinner* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBSkillProto : public ::google::protobuf::Message {
 public:
  FactionDBSkillProto();
  virtual ~FactionDBSkillProto();

  FactionDBSkillProto(const FactionDBSkillProto& from);

  inline FactionDBSkillProto& operator=(const FactionDBSkillProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBSkillProto& default_instance();

  void Swap(FactionDBSkillProto* other);

  // implements Message ----------------------------------------------

  FactionDBSkillProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBSkillProto& from);
  void MergeFrom(const FactionDBSkillProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBSkillProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBSkillProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBSkill : public ::google::protobuf::Message {
 public:
  FactionDBSkill();
  virtual ~FactionDBSkill();

  FactionDBSkill(const FactionDBSkill& from);

  inline FactionDBSkill& operator=(const FactionDBSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBSkill& default_instance();

  void Swap(FactionDBSkill* other);

  // implements Message ----------------------------------------------

  FactionDBSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBSkill& from);
  void MergeFrom(const FactionDBSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionDBSkillProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionDBSkillProto& info(int index) const;
  inline ::proto_ff::FactionDBSkillProto* mutable_info(int index);
  inline ::proto_ff::FactionDBSkillProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSkillProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSkillProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBSkill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSkillProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBSkill* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBGuard : public ::google::protobuf::Message {
 public:
  FactionDBGuard();
  virtual ~FactionDBGuard();

  FactionDBGuard(const FactionDBGuard& from);

  inline FactionDBGuard& operator=(const FactionDBGuard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBGuard& default_instance();

  void Swap(FactionDBGuard* other);

  // implements Message ----------------------------------------------

  FactionDBGuard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBGuard& from);
  void MergeFrom(const FactionDBGuard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 contri = 2;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 2;
  inline ::google::protobuf::uint32 contri() const;
  inline void set_contri(::google::protobuf::uint32 value);

  // optional uint64 cur_encouragement_gold_count = 3;
  inline bool has_cur_encouragement_gold_count() const;
  inline void clear_cur_encouragement_gold_count();
  static const int kCurEncouragementGoldCountFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_encouragement_gold_count() const;
  inline void set_cur_encouragement_gold_count(::google::protobuf::uint64 value);

  // optional uint64 cur_encouragement_diamond_count = 4;
  inline bool has_cur_encouragement_diamond_count() const;
  inline void clear_cur_encouragement_diamond_count();
  static const int kCurEncouragementDiamondCountFieldNumber = 4;
  inline ::google::protobuf::uint64 cur_encouragement_diamond_count() const;
  inline void set_cur_encouragement_diamond_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBGuard)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_cur_encouragement_gold_count();
  inline void clear_has_cur_encouragement_gold_count();
  inline void set_has_cur_encouragement_diamond_count();
  inline void clear_has_cur_encouragement_diamond_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 contri_;
  ::google::protobuf::uint64 cur_encouragement_gold_count_;
  ::google::protobuf::uint64 cur_encouragement_diamond_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBGuard* default_instance_;
};
// -------------------------------------------------------------------

class RoleFactionDBData : public ::google::protobuf::Message {
 public:
  RoleFactionDBData();
  virtual ~RoleFactionDBData();

  RoleFactionDBData(const RoleFactionDBData& from);

  inline RoleFactionDBData& operator=(const RoleFactionDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleFactionDBData& default_instance();

  void Swap(RoleFactionDBData* other);

  // implements Message ----------------------------------------------

  RoleFactionDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleFactionDBData& from);
  void MergeFrom(const RoleFactionDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 donate_num = 1;
  inline bool has_donate_num() const;
  inline void clear_donate_num();
  static const int kDonateNumFieldNumber = 1;
  inline ::google::protobuf::int32 donate_num() const;
  inline void set_donate_num(::google::protobuf::int32 value);

  // optional uint64 donate_fresh = 2;
  inline bool has_donate_fresh() const;
  inline void clear_donate_fresh();
  static const int kDonateFreshFieldNumber = 2;
  inline ::google::protobuf::uint64 donate_fresh() const;
  inline void set_donate_fresh(::google::protobuf::uint64 value);

  // repeated .proto_ff.FactionDBSalary salary = 3;
  inline int salary_size() const;
  inline void clear_salary();
  static const int kSalaryFieldNumber = 3;
  inline const ::proto_ff::FactionDBSalary& salary(int index) const;
  inline ::proto_ff::FactionDBSalary* mutable_salary(int index);
  inline ::proto_ff::FactionDBSalary* add_salary();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSalary >&
      salary() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSalary >*
      mutable_salary();

  // optional uint64 salary_fresh = 4;
  inline bool has_salary_fresh() const;
  inline void clear_salary_fresh();
  static const int kSalaryFreshFieldNumber = 4;
  inline ::google::protobuf::uint64 salary_fresh() const;
  inline void set_salary_fresh(::google::protobuf::uint64 value);

  // optional .proto_ff.FactionDBDinner dinner = 5;
  inline bool has_dinner() const;
  inline void clear_dinner();
  static const int kDinnerFieldNumber = 5;
  inline const ::proto_ff::FactionDBDinner& dinner() const;
  inline ::proto_ff::FactionDBDinner* mutable_dinner();
  inline ::proto_ff::FactionDBDinner* release_dinner();
  inline void set_allocated_dinner(::proto_ff::FactionDBDinner* dinner);

  // optional .proto_ff.FactionDBSkill skill = 6;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 6;
  inline const ::proto_ff::FactionDBSkill& skill() const;
  inline ::proto_ff::FactionDBSkill* mutable_skill();
  inline ::proto_ff::FactionDBSkill* release_skill();
  inline void set_allocated_skill(::proto_ff::FactionDBSkill* skill);

  // optional .proto_ff.FactionDBGuard guard = 7;
  inline bool has_guard() const;
  inline void clear_guard();
  static const int kGuardFieldNumber = 7;
  inline const ::proto_ff::FactionDBGuard& guard() const;
  inline ::proto_ff::FactionDBGuard* mutable_guard();
  inline ::proto_ff::FactionDBGuard* release_guard();
  inline void set_allocated_guard(::proto_ff::FactionDBGuard* guard);

  // optional int32 fetch_war = 8;
  inline bool has_fetch_war() const;
  inline void clear_fetch_war();
  static const int kFetchWarFieldNumber = 8;
  inline ::google::protobuf::int32 fetch_war() const;
  inline void set_fetch_war(::google::protobuf::int32 value);

  // optional uint64 fetch_time = 9;
  inline bool has_fetch_time() const;
  inline void clear_fetch_time();
  static const int kFetchTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 fetch_time() const;
  inline void set_fetch_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleFactionDBData)
 private:
  inline void set_has_donate_num();
  inline void clear_has_donate_num();
  inline void set_has_donate_fresh();
  inline void clear_has_donate_fresh();
  inline void set_has_salary_fresh();
  inline void clear_has_salary_fresh();
  inline void set_has_dinner();
  inline void clear_has_dinner();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_guard();
  inline void clear_has_guard();
  inline void set_has_fetch_war();
  inline void clear_has_fetch_war();
  inline void set_has_fetch_time();
  inline void clear_has_fetch_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 donate_fresh_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSalary > salary_;
  ::google::protobuf::uint64 salary_fresh_;
  ::google::protobuf::int32 donate_num_;
  ::google::protobuf::int32 fetch_war_;
  ::proto_ff::FactionDBDinner* dinner_;
  ::proto_ff::FactionDBSkill* skill_;
  ::proto_ff::FactionDBGuard* guard_;
  ::google::protobuf::uint64 fetch_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleFactionDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleBestEQDBData : public ::google::protobuf::Message {
 public:
  RoleBestEQDBData();
  virtual ~RoleBestEQDBData();

  RoleBestEQDBData(const RoleBestEQDBData& from);

  inline RoleBestEQDBData& operator=(const RoleBestEQDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleBestEQDBData& default_instance();

  void Swap(RoleBestEQDBData* other);

  // implements Message ----------------------------------------------

  RoleBestEQDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleBestEQDBData& from);
  void MergeFrom(const RoleBestEQDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  inline int slots_size() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 1;
  inline const ::proto_ff::BestEQSlotInfo& slots(int index) const;
  inline ::proto_ff::BestEQSlotInfo* mutable_slots(int index);
  inline ::proto_ff::BestEQSlotInfo* add_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >&
      slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >*
      mutable_slots();

  // repeated .proto_ff.BestEQTask tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::proto_ff::BestEQTask& tasks(int index) const;
  inline ::proto_ff::BestEQTask* mutable_tasks(int index);
  inline ::proto_ff::BestEQTask* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQTask >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQTask >*
      mutable_tasks();

  // @@protoc_insertion_point(class_scope:proto_ff.RoleBestEQDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo > slots_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQTask > tasks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleBestEQDBData* default_instance_;
};
// -------------------------------------------------------------------

class AncientDBData : public ::google::protobuf::Message {
 public:
  AncientDBData();
  virtual ~AncientDBData();

  AncientDBData(const AncientDBData& from);

  inline AncientDBData& operator=(const AncientDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AncientDBData& default_instance();

  void Swap(AncientDBData* other);

  // implements Message ----------------------------------------------

  AncientDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AncientDBData& from);
  void MergeFrom(const AncientDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 unlock_star_id = 1;
  inline bool has_unlock_star_id() const;
  inline void clear_unlock_star_id();
  static const int kUnlockStarIdFieldNumber = 1;
  inline ::google::protobuf::int32 unlock_star_id() const;
  inline void set_unlock_star_id(::google::protobuf::int32 value);

  // repeated .proto_ff.AncientInfo infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::proto_ff::AncientInfo& infos(int index) const;
  inline ::proto_ff::AncientInfo* mutable_infos(int index);
  inline ::proto_ff::AncientInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::AncientInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::AncientInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:proto_ff.AncientDBData)
 private:
  inline void set_has_unlock_star_id();
  inline void clear_has_unlock_star_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::AncientInfo > infos_;
  ::google::protobuf::int32 unlock_star_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AncientDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleEmblemDBInfo : public ::google::protobuf::Message {
 public:
  RoleEmblemDBInfo();
  virtual ~RoleEmblemDBInfo();

  RoleEmblemDBInfo(const RoleEmblemDBInfo& from);

  inline RoleEmblemDBInfo& operator=(const RoleEmblemDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleEmblemDBInfo& default_instance();

  void Swap(RoleEmblemDBInfo* other);

  // implements Message ----------------------------------------------

  RoleEmblemDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleEmblemDBInfo& from);
  void MergeFrom(const RoleEmblemDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleEmblemDBInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleEmblemDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class Role1v1DBInfo : public ::google::protobuf::Message {
 public:
  Role1v1DBInfo();
  virtual ~Role1v1DBInfo();

  Role1v1DBInfo(const Role1v1DBInfo& from);

  inline Role1v1DBInfo& operator=(const Role1v1DBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Role1v1DBInfo& default_instance();

  void Swap(Role1v1DBInfo* other);

  // implements Message ----------------------------------------------

  Role1v1DBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Role1v1DBInfo& from);
  void MergeFrom(const Role1v1DBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 match_num = 2;
  inline bool has_match_num() const;
  inline void clear_match_num();
  static const int kMatchNumFieldNumber = 2;
  inline ::google::protobuf::int32 match_num() const;
  inline void set_match_num(::google::protobuf::int32 value);

  // optional int32 win_num = 3;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 conti_num = 4;
  inline bool has_conti_num() const;
  inline void clear_conti_num();
  static const int kContiNumFieldNumber = 4;
  inline ::google::protobuf::int32 conti_num() const;
  inline void set_conti_num(::google::protobuf::int32 value);

  // optional int32 reward_num = 5;
  inline bool has_reward_num() const;
  inline void clear_reward_num();
  static const int kRewardNumFieldNumber = 5;
  inline ::google::protobuf::int32 reward_num() const;
  inline void set_reward_num(::google::protobuf::int32 value);

  // repeated int32 already_fetch = 6;
  inline int already_fetch_size() const;
  inline void clear_already_fetch();
  static const int kAlreadyFetchFieldNumber = 6;
  inline ::google::protobuf::int32 already_fetch(int index) const;
  inline void set_already_fetch(int index, ::google::protobuf::int32 value);
  inline void add_already_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      already_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_already_fetch();

  // optional uint64 reward_time = 7;
  inline bool has_reward_time() const;
  inline void clear_reward_time();
  static const int kRewardTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 reward_time() const;
  inline void set_reward_time(::google::protobuf::uint64 value);

  // optional uint64 reset_time = 8;
  inline bool has_reset_time() const;
  inline void clear_reset_time();
  static const int kResetTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 reset_time() const;
  inline void set_reset_time(::google::protobuf::uint64 value);

  // optional int32 cur_conti_num = 9;
  inline bool has_cur_conti_num() const;
  inline void clear_cur_conti_num();
  static const int kCurContiNumFieldNumber = 9;
  inline ::google::protobuf::int32 cur_conti_num() const;
  inline void set_cur_conti_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Role1v1DBInfo)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_match_num();
  inline void clear_has_match_num();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_conti_num();
  inline void clear_has_conti_num();
  inline void set_has_reward_num();
  inline void clear_has_reward_num();
  inline void set_has_reward_time();
  inline void clear_has_reward_time();
  inline void set_has_reset_time();
  inline void clear_has_reset_time();
  inline void set_has_cur_conti_num();
  inline void clear_has_cur_conti_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 match_num_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 conti_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > already_fetch_;
  ::google::protobuf::uint64 reward_time_;
  ::google::protobuf::int32 reward_num_;
  ::google::protobuf::int32 cur_conti_num_;
  ::google::protobuf::uint64 reset_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static Role1v1DBInfo* default_instance_;
};
// -------------------------------------------------------------------

class RolePvpDBData : public ::google::protobuf::Message {
 public:
  RolePvpDBData();
  virtual ~RolePvpDBData();

  RolePvpDBData(const RolePvpDBData& from);

  inline RolePvpDBData& operator=(const RolePvpDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RolePvpDBData& default_instance();

  void Swap(RolePvpDBData* other);

  // implements Message ----------------------------------------------

  RolePvpDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RolePvpDBData& from);
  void MergeFrom(const RolePvpDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pkmode = 1;
  inline bool has_pkmode() const;
  inline void clear_pkmode();
  static const int kPkmodeFieldNumber = 1;
  inline ::google::protobuf::int32 pkmode() const;
  inline void set_pkmode(::google::protobuf::int32 value);

  // optional int32 chg_time = 2;
  inline bool has_chg_time() const;
  inline void clear_chg_time();
  static const int kChgTimeFieldNumber = 2;
  inline ::google::protobuf::int32 chg_time() const;
  inline void set_chg_time(::google::protobuf::int32 value);

  // optional int32 killvalue = 3;
  inline bool has_killvalue() const;
  inline void clear_killvalue();
  static const int kKillvalueFieldNumber = 3;
  inline ::google::protobuf::int32 killvalue() const;
  inline void set_killvalue(::google::protobuf::int32 value);

  // optional int32 onlinesec = 4;
  inline bool has_onlinesec() const;
  inline void clear_onlinesec();
  static const int kOnlinesecFieldNumber = 4;
  inline ::google::protobuf::int32 onlinesec() const;
  inline void set_onlinesec(::google::protobuf::int32 value);

  // repeated .proto_ff.RoleEmblemDBInfo emblem = 5;
  inline int emblem_size() const;
  inline void clear_emblem();
  static const int kEmblemFieldNumber = 5;
  inline const ::proto_ff::RoleEmblemDBInfo& emblem(int index) const;
  inline ::proto_ff::RoleEmblemDBInfo* mutable_emblem(int index);
  inline ::proto_ff::RoleEmblemDBInfo* add_emblem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleEmblemDBInfo >&
      emblem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleEmblemDBInfo >*
      mutable_emblem();

  // optional .proto_ff.Role1v1DBInfo pk1v1 = 6;
  inline bool has_pk1v1() const;
  inline void clear_pk1v1();
  static const int kPk1V1FieldNumber = 6;
  inline const ::proto_ff::Role1v1DBInfo& pk1v1() const;
  inline ::proto_ff::Role1v1DBInfo* mutable_pk1v1();
  inline ::proto_ff::Role1v1DBInfo* release_pk1v1();
  inline void set_allocated_pk1v1(::proto_ff::Role1v1DBInfo* pk1v1);

  // @@protoc_insertion_point(class_scope:proto_ff.RolePvpDBData)
 private:
  inline void set_has_pkmode();
  inline void clear_has_pkmode();
  inline void set_has_chg_time();
  inline void clear_has_chg_time();
  inline void set_has_killvalue();
  inline void clear_has_killvalue();
  inline void set_has_onlinesec();
  inline void clear_has_onlinesec();
  inline void set_has_pk1v1();
  inline void clear_has_pk1v1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pkmode_;
  ::google::protobuf::int32 chg_time_;
  ::google::protobuf::int32 killvalue_;
  ::google::protobuf::int32 onlinesec_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleEmblemDBInfo > emblem_;
  ::proto_ff::Role1v1DBInfo* pk1v1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RolePvpDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleMarryExpress : public ::google::protobuf::Message {
 public:
  RoleMarryExpress();
  virtual ~RoleMarryExpress();

  RoleMarryExpress(const RoleMarryExpress& from);

  inline RoleMarryExpress& operator=(const RoleMarryExpress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleMarryExpress& default_instance();

  void Swap(RoleMarryExpress* other);

  // implements Message ----------------------------------------------

  RoleMarryExpress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleMarryExpress& from);
  void MergeFrom(const RoleMarryExpress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline ::google::protobuf::uint64 item() const;
  inline void set_item(::google::protobuf::uint64 value);

  // optional int32 text_id = 3;
  inline bool has_text_id() const;
  inline void clear_text_id();
  static const int kTextIdFieldNumber = 3;
  inline ::google::protobuf::int32 text_id() const;
  inline void set_text_id(::google::protobuf::int32 value);

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleMarryExpress)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_text_id();
  inline void clear_has_text_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 item_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 text_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleMarryExpress* default_instance_;
};
// -------------------------------------------------------------------

class RoleMarryDBData : public ::google::protobuf::Message {
 public:
  RoleMarryDBData();
  virtual ~RoleMarryDBData();

  RoleMarryDBData(const RoleMarryDBData& from);

  inline RoleMarryDBData& operator=(const RoleMarryDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleMarryDBData& default_instance();

  void Swap(RoleMarryDBData* other);

  // implements Message ----------------------------------------------

  RoleMarryDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleMarryDBData& from);
  void MergeFrom(const RoleMarryDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.MarrySelfInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::MarrySelfInfo& info() const;
  inline ::proto_ff::MarrySelfInfo* mutable_info();
  inline ::proto_ff::MarrySelfInfo* release_info();
  inline void set_allocated_info(::proto_ff::MarrySelfInfo* info);

  // repeated .proto_ff.RoleMarryExpress toSlef = 2;
  inline int toslef_size() const;
  inline void clear_toslef();
  static const int kToSlefFieldNumber = 2;
  inline const ::proto_ff::RoleMarryExpress& toslef(int index) const;
  inline ::proto_ff::RoleMarryExpress* mutable_toslef(int index);
  inline ::proto_ff::RoleMarryExpress* add_toslef();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >&
      toslef() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >*
      mutable_toslef();

  // repeated .proto_ff.RoleMarryExpress toOther = 3;
  inline int toother_size() const;
  inline void clear_toother();
  static const int kToOtherFieldNumber = 3;
  inline const ::proto_ff::RoleMarryExpress& toother(int index) const;
  inline ::proto_ff::RoleMarryExpress* mutable_toother(int index);
  inline ::proto_ff::RoleMarryExpress* add_toother();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >&
      toother() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >*
      mutable_toother();

  // optional .proto_ff.WeddingDupRoleInfo dup_record = 4;
  inline bool has_dup_record() const;
  inline void clear_dup_record();
  static const int kDupRecordFieldNumber = 4;
  inline const ::proto_ff::WeddingDupRoleInfo& dup_record() const;
  inline ::proto_ff::WeddingDupRoleInfo* mutable_dup_record();
  inline ::proto_ff::WeddingDupRoleInfo* release_dup_record();
  inline void set_allocated_dup_record(::proto_ff::WeddingDupRoleInfo* dup_record);

  // optional uint64 lastTime = 5;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleMarryDBData)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_dup_record();
  inline void clear_has_dup_record();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::MarrySelfInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress > toslef_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress > toother_;
  ::proto_ff::WeddingDupRoleInfo* dup_record_;
  ::google::protobuf::uint64 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleMarryDBData* default_instance_;
};
// -------------------------------------------------------------------

class EncylopediaDBData : public ::google::protobuf::Message {
 public:
  EncylopediaDBData();
  virtual ~EncylopediaDBData();

  EncylopediaDBData(const EncylopediaDBData& from);

  inline EncylopediaDBData& operator=(const EncylopediaDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncylopediaDBData& default_instance();

  void Swap(EncylopediaDBData* other);

  // implements Message ----------------------------------------------

  EncylopediaDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncylopediaDBData& from);
  void MergeFrom(const EncylopediaDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.HandBookPBData hand_book = 1;
  inline bool has_hand_book() const;
  inline void clear_hand_book();
  static const int kHandBookFieldNumber = 1;
  inline const ::proto_ff::HandBookPBData& hand_book() const;
  inline ::proto_ff::HandBookPBData* mutable_hand_book();
  inline ::proto_ff::HandBookPBData* release_hand_book();
  inline void set_allocated_hand_book(::proto_ff::HandBookPBData* hand_book);

  // @@protoc_insertion_point(class_scope:proto_ff.EncylopediaDBData)
 private:
  inline void set_has_hand_book();
  inline void clear_has_hand_book();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::HandBookPBData* hand_book_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static EncylopediaDBData* default_instance_;
};
// -------------------------------------------------------------------

class GVBPData : public ::google::protobuf::Message {
 public:
  GVBPData();
  virtual ~GVBPData();

  GVBPData(const GVBPData& from);

  inline GVBPData& operator=(const GVBPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GVBPData& default_instance();

  void Swap(GVBPData* other);

  // implements Message ----------------------------------------------

  GVBPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GVBPData& from);
  void MergeFrom(const GVBPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 rewards_state = 1;
  inline int rewards_state_size() const;
  inline void clear_rewards_state();
  static const int kRewardsStateFieldNumber = 1;
  inline ::google::protobuf::uint32 rewards_state(int index) const;
  inline void set_rewards_state(int index, ::google::protobuf::uint32 value);
  inline void add_rewards_state(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewards_state() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewards_state();

  // optional uint32 daily_score = 2;
  inline bool has_daily_score() const;
  inline void clear_daily_score();
  static const int kDailyScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 daily_score() const;
  inline void set_daily_score(::google::protobuf::uint32 value);

  // optional uint64 record_time = 3;
  inline bool has_record_time() const;
  inline void clear_record_time();
  static const int kRecordTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 record_time() const;
  inline void set_record_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GVBPData)
 private:
  inline void set_has_daily_score();
  inline void clear_has_daily_score();
  inline void set_has_record_time();
  inline void clear_has_record_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewards_state_;
  ::google::protobuf::uint64 record_time_;
  ::google::protobuf::uint32 daily_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GVBPData* default_instance_;
};
// -------------------------------------------------------------------

class ChargeDBData : public ::google::protobuf::Message {
 public:
  ChargeDBData();
  virtual ~ChargeDBData();

  ChargeDBData(const ChargeDBData& from);

  inline ChargeDBData& operator=(const ChargeDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeDBData& default_instance();

  void Swap(ChargeDBData* other);

  // implements Message ----------------------------------------------

  ChargeDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeDBData& from);
  void MergeFrom(const ChargeDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 first_rmb = 1;
  inline bool has_first_rmb() const;
  inline void clear_first_rmb();
  static const int kFirstRmbFieldNumber = 1;
  inline ::google::protobuf::int32 first_rmb() const;
  inline void set_first_rmb(::google::protobuf::int32 value);

  // repeated int32 first_fetch = 2;
  inline int first_fetch_size() const;
  inline void clear_first_fetch();
  static const int kFirstFetchFieldNumber = 2;
  inline ::google::protobuf::int32 first_fetch(int index) const;
  inline void set_first_fetch(int index, ::google::protobuf::int32 value);
  inline void add_first_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_fetch();

  // optional int32 dia_rmb = 3;
  inline bool has_dia_rmb() const;
  inline void clear_dia_rmb();
  static const int kDiaRmbFieldNumber = 3;
  inline ::google::protobuf::int32 dia_rmb() const;
  inline void set_dia_rmb(::google::protobuf::int32 value);

  // repeated int32 dia_fetch = 4;
  inline int dia_fetch_size() const;
  inline void clear_dia_fetch();
  static const int kDiaFetchFieldNumber = 4;
  inline ::google::protobuf::int32 dia_fetch(int index) const;
  inline void set_dia_fetch(int index, ::google::protobuf::int32 value);
  inline void add_dia_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dia_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dia_fetch();

  // optional int32 star_rmb = 5;
  inline bool has_star_rmb() const;
  inline void clear_star_rmb();
  static const int kStarRmbFieldNumber = 5;
  inline ::google::protobuf::int32 star_rmb() const;
  inline void set_star_rmb(::google::protobuf::int32 value);

  // repeated int32 star_fetch = 6;
  inline int star_fetch_size() const;
  inline void clear_star_fetch();
  static const int kStarFetchFieldNumber = 6;
  inline ::google::protobuf::int32 star_fetch(int index) const;
  inline void set_star_fetch(int index, ::google::protobuf::int32 value);
  inline void add_star_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      star_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_star_fetch();

  // optional int32 king_rmb = 7;
  inline bool has_king_rmb() const;
  inline void clear_king_rmb();
  static const int kKingRmbFieldNumber = 7;
  inline ::google::protobuf::int32 king_rmb() const;
  inline void set_king_rmb(::google::protobuf::int32 value);

  // repeated int32 king_fetch = 8;
  inline int king_fetch_size() const;
  inline void clear_king_fetch();
  static const int kKingFetchFieldNumber = 8;
  inline ::google::protobuf::int32 king_fetch(int index) const;
  inline void set_king_fetch(int index, ::google::protobuf::int32 value);
  inline void add_king_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      king_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_king_fetch();

  // optional int32 second_rmb = 9;
  inline bool has_second_rmb() const;
  inline void clear_second_rmb();
  static const int kSecondRmbFieldNumber = 9;
  inline ::google::protobuf::int32 second_rmb() const;
  inline void set_second_rmb(::google::protobuf::int32 value);

  // repeated int32 second_fetch = 10;
  inline int second_fetch_size() const;
  inline void clear_second_fetch();
  static const int kSecondFetchFieldNumber = 10;
  inline ::google::protobuf::int32 second_fetch(int index) const;
  inline void set_second_fetch(int index, ::google::protobuf::int32 value);
  inline void add_second_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      second_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_second_fetch();

  // optional int32 open_total = 11;
  inline bool has_open_total() const;
  inline void clear_open_total();
  static const int kOpenTotalFieldNumber = 11;
  inline ::google::protobuf::int32 open_total() const;
  inline void set_open_total(::google::protobuf::int32 value);

  // repeated int32 open_total_fetch = 12;
  inline int open_total_fetch_size() const;
  inline void clear_open_total_fetch();
  static const int kOpenTotalFetchFieldNumber = 12;
  inline ::google::protobuf::int32 open_total_fetch(int index) const;
  inline void set_open_total_fetch(int index, ::google::protobuf::int32 value);
  inline void add_open_total_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      open_total_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_open_total_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.ChargeDBData)
 private:
  inline void set_has_first_rmb();
  inline void clear_has_first_rmb();
  inline void set_has_dia_rmb();
  inline void clear_has_dia_rmb();
  inline void set_has_star_rmb();
  inline void clear_has_star_rmb();
  inline void set_has_king_rmb();
  inline void clear_has_king_rmb();
  inline void set_has_second_rmb();
  inline void clear_has_second_rmb();
  inline void set_has_open_total();
  inline void clear_has_open_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_fetch_;
  ::google::protobuf::int32 first_rmb_;
  ::google::protobuf::int32 dia_rmb_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dia_fetch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > star_fetch_;
  ::google::protobuf::int32 star_rmb_;
  ::google::protobuf::int32 king_rmb_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > king_fetch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > second_fetch_;
  ::google::protobuf::int32 second_rmb_;
  ::google::protobuf::int32 open_total_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > open_total_fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ChargeDBData* default_instance_;
};
// -------------------------------------------------------------------

class GiftCondDBProto : public ::google::protobuf::Message {
 public:
  GiftCondDBProto();
  virtual ~GiftCondDBProto();

  GiftCondDBProto(const GiftCondDBProto& from);

  inline GiftCondDBProto& operator=(const GiftCondDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiftCondDBProto& default_instance();

  void Swap(GiftCondDBProto* other);

  // implements Message ----------------------------------------------

  GiftCondDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiftCondDBProto& from);
  void MergeFrom(const GiftCondDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 buy = 3;
  inline bool has_buy() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 3;
  inline ::google::protobuf::int32 buy() const;
  inline void set_buy(::google::protobuf::int32 value);

  // optional int32 close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline ::google::protobuf::int32 close() const;
  inline void set_close(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GiftCondDBProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_buy();
  inline void clear_has_buy();
  inline void set_has_close();
  inline void clear_has_close();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 buy_;
  ::google::protobuf::int32 close_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GiftCondDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GiftZeroDBProto : public ::google::protobuf::Message {
 public:
  GiftZeroDBProto();
  virtual ~GiftZeroDBProto();

  GiftZeroDBProto(const GiftZeroDBProto& from);

  inline GiftZeroDBProto& operator=(const GiftZeroDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiftZeroDBProto& default_instance();

  void Swap(GiftZeroDBProto* other);

  // implements Message ----------------------------------------------

  GiftZeroDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiftZeroDBProto& from);
  void MergeFrom(const GiftZeroDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 buy = 2;
  inline bool has_buy() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 2;
  inline ::google::protobuf::int32 buy() const;
  inline void set_buy(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GiftZeroDBProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buy();
  inline void clear_has_buy();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 buy_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GiftZeroDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GiftZeroLogDBProto : public ::google::protobuf::Message {
 public:
  GiftZeroLogDBProto();
  virtual ~GiftZeroLogDBProto();

  GiftZeroLogDBProto(const GiftZeroLogDBProto& from);

  inline GiftZeroLogDBProto& operator=(const GiftZeroLogDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiftZeroLogDBProto& default_instance();

  void Swap(GiftZeroLogDBProto* other);

  // implements Message ----------------------------------------------

  GiftZeroLogDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiftZeroLogDBProto& from);
  void MergeFrom(const GiftZeroLogDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GiftZeroLogDBProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GiftZeroLogDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GiftDBData : public ::google::protobuf::Message {
 public:
  GiftDBData();
  virtual ~GiftDBData();

  GiftDBData(const GiftDBData& from);

  inline GiftDBData& operator=(const GiftDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiftDBData& default_instance();

  void Swap(GiftDBData* other);

  // implements Message ----------------------------------------------

  GiftDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiftDBData& from);
  void MergeFrom(const GiftDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GiftCondDBProto cond = 1;
  inline int cond_size() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 1;
  inline const ::proto_ff::GiftCondDBProto& cond(int index) const;
  inline ::proto_ff::GiftCondDBProto* mutable_cond(int index);
  inline ::proto_ff::GiftCondDBProto* add_cond();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftCondDBProto >&
      cond() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftCondDBProto >*
      mutable_cond();

  // repeated .proto_ff.GiftZeroDBProto zero = 2;
  inline int zero_size() const;
  inline void clear_zero();
  static const int kZeroFieldNumber = 2;
  inline const ::proto_ff::GiftZeroDBProto& zero(int index) const;
  inline ::proto_ff::GiftZeroDBProto* mutable_zero(int index);
  inline ::proto_ff::GiftZeroDBProto* add_zero();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroDBProto >&
      zero() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroDBProto >*
      mutable_zero();

  // repeated .proto_ff.GiftZeroLogDBProto zero_log = 3;
  inline int zero_log_size() const;
  inline void clear_zero_log();
  static const int kZeroLogFieldNumber = 3;
  inline const ::proto_ff::GiftZeroLogDBProto& zero_log(int index) const;
  inline ::proto_ff::GiftZeroLogDBProto* mutable_zero_log(int index);
  inline ::proto_ff::GiftZeroLogDBProto* add_zero_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroLogDBProto >&
      zero_log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroLogDBProto >*
      mutable_zero_log();

  // @@protoc_insertion_point(class_scope:proto_ff.GiftDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftCondDBProto > cond_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroDBProto > zero_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroLogDBProto > zero_log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GiftDBData* default_instance_;
};
// -------------------------------------------------------------------

class FestSimpleDBProto : public ::google::protobuf::Message {
 public:
  FestSimpleDBProto();
  virtual ~FestSimpleDBProto();

  FestSimpleDBProto(const FestSimpleDBProto& from);

  inline FestSimpleDBProto& operator=(const FestSimpleDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestSimpleDBProto& default_instance();

  void Swap(FestSimpleDBProto* other);

  // implements Message ----------------------------------------------

  FestSimpleDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestSimpleDBProto& from);
  void MergeFrom(const FestSimpleDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FestSimpleDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestSimpleDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShopDBProto : public ::google::protobuf::Message {
 public:
  FestShopDBProto();
  virtual ~FestShopDBProto();

  FestShopDBProto(const FestShopDBProto& from);

  inline FestShopDBProto& operator=(const FestShopDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShopDBProto& default_instance();

  void Swap(FestShopDBProto* other);

  // implements Message ----------------------------------------------

  FestShopDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShopDBProto& from);
  void MergeFrom(const FestShopDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair& info(int index) const;
  inline ::proto_ff::ComPair* mutable_info(int index);
  inline ::proto_ff::ComPair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestShopDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestShopDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestSignDBProto : public ::google::protobuf::Message {
 public:
  FestSignDBProto();
  virtual ~FestSignDBProto();

  FestSignDBProto(const FestSignDBProto& from);

  inline FestSignDBProto& operator=(const FestSignDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestSignDBProto& default_instance();

  void Swap(FestSignDBProto* other);

  // implements Message ----------------------------------------------

  FestSignDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestSignDBProto& from);
  void MergeFrom(const FestSignDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 is_sign = 1;
  inline bool has_is_sign() const;
  inline void clear_is_sign();
  static const int kIsSignFieldNumber = 1;
  inline ::google::protobuf::int32 is_sign() const;
  inline void set_is_sign(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestSignDBProto)
 private:
  inline void set_has_is_sign();
  inline void clear_has_is_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 is_sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestSignDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestGoldStoreDBProto : public ::google::protobuf::Message {
 public:
  FestGoldStoreDBProto();
  virtual ~FestGoldStoreDBProto();

  FestGoldStoreDBProto(const FestGoldStoreDBProto& from);

  inline FestGoldStoreDBProto& operator=(const FestGoldStoreDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestGoldStoreDBProto& default_instance();

  void Swap(FestGoldStoreDBProto* other);

  // implements Message ----------------------------------------------

  FestGoldStoreDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestGoldStoreDBProto& from);
  void MergeFrom(const FestGoldStoreDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair& info(int index) const;
  inline ::proto_ff::ComPair* mutable_info(int index);
  inline ::proto_ff::ComPair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestGoldStoreDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestGoldStoreDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggTaskDBProto : public ::google::protobuf::Message {
 public:
  FestDigEggTaskDBProto();
  virtual ~FestDigEggTaskDBProto();

  FestDigEggTaskDBProto(const FestDigEggTaskDBProto& from);

  inline FestDigEggTaskDBProto& operator=(const FestDigEggTaskDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggTaskDBProto& default_instance();

  void Swap(FestDigEggTaskDBProto* other);

  // implements Message ----------------------------------------------

  FestDigEggTaskDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggTaskDBProto& from);
  void MergeFrom(const FestDigEggTaskDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggTaskDBProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggTaskDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggDBProto : public ::google::protobuf::Message {
 public:
  FestDigEggDBProto();
  virtual ~FestDigEggDBProto();

  FestDigEggDBProto(const FestDigEggDBProto& from);

  inline FestDigEggDBProto& operator=(const FestDigEggDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggDBProto& default_instance();

  void Swap(FestDigEggDBProto* other);

  // implements Message ----------------------------------------------

  FestDigEggDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggDBProto& from);
  void MergeFrom(const FestDigEggDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair id_lst = 1;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 1;
  inline const ::proto_ff::ComPair& id_lst(int index) const;
  inline ::proto_ff::ComPair* mutable_id_lst(int index);
  inline ::proto_ff::ComPair* add_id_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      id_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_id_lst();

  // optional int32 free = 2;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 2;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 auto_time = 4;
  inline bool has_auto_time() const;
  inline void clear_auto_time();
  static const int kAutoTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 auto_time() const;
  inline void set_auto_time(::google::protobuf::uint64 value);

  // repeated .proto_ff.FestDigEggTaskDBProto task = 5;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 5;
  inline const ::proto_ff::FestDigEggTaskDBProto& task(int index) const;
  inline ::proto_ff::FestDigEggTaskDBProto* mutable_task(int index);
  inline ::proto_ff::FestDigEggTaskDBProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskDBProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskDBProto >*
      mutable_task();

  // optional uint64 task_time = 6;
  inline bool has_task_time() const;
  inline void clear_task_time();
  static const int kTaskTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 task_time() const;
  inline void set_task_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggDBProto)
 private:
  inline void set_has_free();
  inline void clear_has_free();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_auto_time();
  inline void clear_has_auto_time();
  inline void set_has_task_time();
  inline void clear_has_task_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > id_lst_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 auto_time_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskDBProto > task_;
  ::google::protobuf::uint64 task_time_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestCandleDBProto : public ::google::protobuf::Message {
 public:
  FestCandleDBProto();
  virtual ~FestCandleDBProto();

  FestCandleDBProto(const FestCandleDBProto& from);

  inline FestCandleDBProto& operator=(const FestCandleDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCandleDBProto& default_instance();

  void Swap(FestCandleDBProto* other);

  // implements Message ----------------------------------------------

  FestCandleDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCandleDBProto& from);
  void MergeFrom(const FestCandleDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id_lst = 1;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 1;
  inline ::google::protobuf::int32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::int32 value);
  inline void add_id_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_lst();

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCandleDBProto)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_lst_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int64 harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestCandleDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestBtDragonDBProto : public ::google::protobuf::Message {
 public:
  FestBtDragonDBProto();
  virtual ~FestBtDragonDBProto();

  FestBtDragonDBProto(const FestBtDragonDBProto& from);

  inline FestBtDragonDBProto& operator=(const FestBtDragonDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestBtDragonDBProto& default_instance();

  void Swap(FestBtDragonDBProto* other);

  // implements Message ----------------------------------------------

  FestBtDragonDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestBtDragonDBProto& from);
  void MergeFrom(const FestBtDragonDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FestBtDragonDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestBtDragonDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestRTurnableRechargeDBProto : public ::google::protobuf::Message {
 public:
  FestRTurnableRechargeDBProto();
  virtual ~FestRTurnableRechargeDBProto();

  FestRTurnableRechargeDBProto(const FestRTurnableRechargeDBProto& from);

  inline FestRTurnableRechargeDBProto& operator=(const FestRTurnableRechargeDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRTurnableRechargeDBProto& default_instance();

  void Swap(FestRTurnableRechargeDBProto* other);

  // implements Message ----------------------------------------------

  FestRTurnableRechargeDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRTurnableRechargeDBProto& from);
  void MergeFrom(const FestRTurnableRechargeDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestRTurnableRechargeOneProto& info(int index) const;
  inline ::proto_ff::FestRTurnableRechargeOneProto* mutable_info(int index);
  inline ::proto_ff::FestRTurnableRechargeOneProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestRTurnableRechargeDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestRTurnableRechargeDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDailyTotalRechargeDBProto : public ::google::protobuf::Message {
 public:
  FestDailyTotalRechargeDBProto();
  virtual ~FestDailyTotalRechargeDBProto();

  FestDailyTotalRechargeDBProto(const FestDailyTotalRechargeDBProto& from);

  inline FestDailyTotalRechargeDBProto& operator=(const FestDailyTotalRechargeDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDailyTotalRechargeDBProto& default_instance();

  void Swap(FestDailyTotalRechargeDBProto* other);

  // implements Message ----------------------------------------------

  FestDailyTotalRechargeDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDailyTotalRechargeDBProto& from);
  void MergeFrom(const FestDailyTotalRechargeDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDailyTotalRechargeOneProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestDailyTotalRechargeOneProto& info(int index) const;
  inline ::proto_ff::FestDailyTotalRechargeOneProto* mutable_info(int index);
  inline ::proto_ff::FestDailyTotalRechargeOneProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >*
      mutable_info();

  // optional uint32 total_recharge = 2;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // optional uint64 flush_time = 3;
  inline bool has_flush_time() const;
  inline void clear_flush_time();
  static const int kFlushTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 flush_time() const;
  inline void set_flush_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDailyTotalRechargeDBProto)
 private:
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_flush_time();
  inline void clear_has_flush_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto > info_;
  ::google::protobuf::uint64 flush_time_;
  ::google::protobuf::uint32 total_recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDailyTotalRechargeDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestTurnableDBProto : public ::google::protobuf::Message {
 public:
  FestTurnableDBProto();
  virtual ~FestTurnableDBProto();

  FestTurnableDBProto(const FestTurnableDBProto& from);

  inline FestTurnableDBProto& operator=(const FestTurnableDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestTurnableDBProto& default_instance();

  void Swap(FestTurnableDBProto* other);

  // implements Message ----------------------------------------------

  FestTurnableDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestTurnableDBProto& from);
  void MergeFrom(const FestTurnableDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::proto_ff::FestTurnableTaskProto& task(int index) const;
  inline ::proto_ff::FestTurnableTaskProto* mutable_task(int index);
  inline ::proto_ff::FestTurnableTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >*
      mutable_task();

  // optional uint32 left_num = 2;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 2;
  inline ::google::protobuf::uint32 left_num() const;
  inline void set_left_num(::google::protobuf::uint32 value);

  // optional uint64 flush_time = 3;
  inline bool has_flush_time() const;
  inline void clear_flush_time();
  static const int kFlushTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 flush_time() const;
  inline void set_flush_time(::google::protobuf::uint64 value);

  // repeated int32 chou_jiang_ids = 5;
  inline int chou_jiang_ids_size() const;
  inline void clear_chou_jiang_ids();
  static const int kChouJiangIdsFieldNumber = 5;
  inline ::google::protobuf::int32 chou_jiang_ids(int index) const;
  inline void set_chou_jiang_ids(int index, ::google::protobuf::int32 value);
  inline void add_chou_jiang_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chou_jiang_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chou_jiang_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.FestTurnableDBProto)
 private:
  inline void set_has_left_num();
  inline void clear_has_left_num();
  inline void set_has_flush_time();
  inline void clear_has_flush_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto > task_;
  ::google::protobuf::uint64 flush_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chou_jiang_ids_;
  ::google::protobuf::uint32 left_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestTurnableDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateDBProto : public ::google::protobuf::Message {
 public:
  FestDonateDBProto();
  virtual ~FestDonateDBProto();

  FestDonateDBProto(const FestDonateDBProto& from);

  inline FestDonateDBProto& operator=(const FestDonateDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateDBProto& default_instance();

  void Swap(FestDonateDBProto* other);

  // implements Message ----------------------------------------------

  FestDonateDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateDBProto& from);
  void MergeFrom(const FestDonateDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDonateSingleProto single = 1;
  inline int single_size() const;
  inline void clear_single();
  static const int kSingleFieldNumber = 1;
  inline const ::proto_ff::FestDonateSingleProto& single(int index) const;
  inline ::proto_ff::FestDonateSingleProto* mutable_single(int index);
  inline ::proto_ff::FestDonateSingleProto* add_single();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >&
      single() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >*
      mutable_single();

  // repeated .proto_ff.FestDonateServerProto server = 2;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline const ::proto_ff::FestDonateServerProto& server(int index) const;
  inline ::proto_ff::FestDonateServerProto* mutable_server(int index);
  inline ::proto_ff::FestDonateServerProto* add_server();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >&
      server() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >*
      mutable_server();

  // optional uint32 single_num = 3;
  inline bool has_single_num() const;
  inline void clear_single_num();
  static const int kSingleNumFieldNumber = 3;
  inline ::google::protobuf::uint32 single_num() const;
  inline void set_single_num(::google::protobuf::uint32 value);

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 4;
  inline const ::proto_ff::FestDonateTaskProto& task(int index) const;
  inline ::proto_ff::FestDonateTaskProto* mutable_task(int index);
  inline ::proto_ff::FestDonateTaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >*
      mutable_task();

  // optional uint64 flush_time = 5;
  inline bool has_flush_time() const;
  inline void clear_flush_time();
  static const int kFlushTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 flush_time() const;
  inline void set_flush_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateDBProto)
 private:
  inline void set_has_single_num();
  inline void clear_has_single_num();
  inline void set_has_flush_time();
  inline void clear_has_flush_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto > single_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto > server_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto > task_;
  ::google::protobuf::uint64 flush_time_;
  ::google::protobuf::uint32 single_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDonateDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestOnlineDBProto : public ::google::protobuf::Message {
 public:
  FestOnlineDBProto();
  virtual ~FestOnlineDBProto();

  FestOnlineDBProto(const FestOnlineDBProto& from);

  inline FestOnlineDBProto& operator=(const FestOnlineDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestOnlineDBProto& default_instance();

  void Swap(FestOnlineDBProto* other);

  // implements Message ----------------------------------------------

  FestOnlineDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestOnlineDBProto& from);
  void MergeFrom(const FestOnlineDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestOnlineOneProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FestOnlineOneProto& data(int index) const;
  inline ::proto_ff::FestOnlineOneProto* mutable_data(int index);
  inline ::proto_ff::FestOnlineOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >*
      mutable_data();

  // optional uint64 flush_time = 2;
  inline bool has_flush_time() const;
  inline void clear_flush_time();
  static const int kFlushTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 flush_time() const;
  inline void set_flush_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestOnlineDBProto)
 private:
  inline void set_has_flush_time();
  inline void clear_has_flush_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto > data_;
  ::google::protobuf::uint64 flush_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestOnlineDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestCollectWordDBProto : public ::google::protobuf::Message {
 public:
  FestCollectWordDBProto();
  virtual ~FestCollectWordDBProto();

  FestCollectWordDBProto(const FestCollectWordDBProto& from);

  inline FestCollectWordDBProto& operator=(const FestCollectWordDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestCollectWordDBProto& default_instance();

  void Swap(FestCollectWordDBProto* other);

  // implements Message ----------------------------------------------

  FestCollectWordDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestCollectWordDBProto& from);
  void MergeFrom(const FestCollectWordDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FestCollectWordOneProto& data(int index) const;
  inline ::proto_ff::FestCollectWordOneProto* mutable_data(int index);
  inline ::proto_ff::FestCollectWordOneProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >*
      mutable_data();

  // optional uint64 flush_time = 2;
  inline bool has_flush_time() const;
  inline void clear_flush_time();
  static const int kFlushTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 flush_time() const;
  inline void set_flush_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestCollectWordDBProto)
 private:
  inline void set_has_flush_time();
  inline void clear_has_flush_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto > data_;
  ::google::protobuf::uint64 flush_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestCollectWordDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestBossFirstDB : public ::google::protobuf::Message {
 public:
  FestBossFirstDB();
  virtual ~FestBossFirstDB();

  FestBossFirstDB(const FestBossFirstDB& from);

  inline FestBossFirstDB& operator=(const FestBossFirstDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestBossFirstDB& default_instance();

  void Swap(FestBossFirstDB* other);

  // implements Message ----------------------------------------------

  FestBossFirstDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestBossFirstDB& from);
  void MergeFrom(const FestBossFirstDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 recv_kill_ids = 1;
  inline int recv_kill_ids_size() const;
  inline void clear_recv_kill_ids();
  static const int kRecvKillIdsFieldNumber = 1;
  inline ::google::protobuf::int32 recv_kill_ids(int index) const;
  inline void set_recv_kill_ids(int index, ::google::protobuf::int32 value);
  inline void add_recv_kill_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_kill_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_kill_ids();

  // repeated int32 recv_red_ids = 2;
  inline int recv_red_ids_size() const;
  inline void clear_recv_red_ids();
  static const int kRecvRedIdsFieldNumber = 2;
  inline ::google::protobuf::int32 recv_red_ids(int index) const;
  inline void set_recv_red_ids(int index, ::google::protobuf::int32 value);
  inline void add_recv_red_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_red_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_red_ids();

  // repeated int32 m_kills_ids = 3;
  inline int m_kills_ids_size() const;
  inline void clear_m_kills_ids();
  static const int kMKillsIdsFieldNumber = 3;
  inline ::google::protobuf::int32 m_kills_ids(int index) const;
  inline void set_m_kills_ids(int index, ::google::protobuf::int32 value);
  inline void add_m_kills_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_kills_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_kills_ids();

  // @@protoc_insertion_point(class_scope:proto_ff.FestBossFirstDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_kill_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_red_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_kills_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestBossFirstDB* default_instance_;
};
// -------------------------------------------------------------------

class FMarryRoleDB : public ::google::protobuf::Message {
 public:
  FMarryRoleDB();
  virtual ~FMarryRoleDB();

  FMarryRoleDB(const FMarryRoleDB& from);

  inline FMarryRoleDB& operator=(const FMarryRoleDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMarryRoleDB& default_instance();

  void Swap(FMarryRoleDB* other);

  // implements Message ----------------------------------------------

  FMarryRoleDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FMarryRoleDB& from);
  void MergeFrom(const FMarryRoleDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FMarryTask tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::proto_ff::FMarryTask& tasks(int index) const;
  inline ::proto_ff::FMarryTask* mutable_tasks(int index);
  inline ::proto_ff::FMarryTask* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >*
      mutable_tasks();

  // repeated int32 process_ids = 2;
  inline int process_ids_size() const;
  inline void clear_process_ids();
  static const int kProcessIdsFieldNumber = 2;
  inline ::google::protobuf::int32 process_ids(int index) const;
  inline void set_process_ids(int index, ::google::protobuf::int32 value);
  inline void add_process_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      process_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_process_ids();

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FMarryRoleDB)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask > tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > process_ids_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FMarryRoleDB* default_instance_;
};
// -------------------------------------------------------------------

class DayTotalRechargeDBProto : public ::google::protobuf::Message {
 public:
  DayTotalRechargeDBProto();
  virtual ~DayTotalRechargeDBProto();

  DayTotalRechargeDBProto(const DayTotalRechargeDBProto& from);

  inline DayTotalRechargeDBProto& operator=(const DayTotalRechargeDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayTotalRechargeDBProto& default_instance();

  void Swap(DayTotalRechargeDBProto* other);

  // implements Message ----------------------------------------------

  DayTotalRechargeDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayTotalRechargeDBProto& from);
  void MergeFrom(const DayTotalRechargeDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fetch_lst = 1;
  inline int fetch_lst_size() const;
  inline void clear_fetch_lst();
  static const int kFetchLstFieldNumber = 1;
  inline ::google::protobuf::int32 fetch_lst(int index) const;
  inline void set_fetch_lst(int index, ::google::protobuf::int32 value);
  inline void add_fetch_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_lst();

  // optional uint32 recharge = 2;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 recharge() const;
  inline void set_recharge(::google::protobuf::uint32 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 reset_time = 4;
  inline bool has_reset_time() const;
  inline void clear_reset_time();
  static const int kResetTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 reset_time() const;
  inline void set_reset_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DayTotalRechargeDBProto)
 private:
  inline void set_has_recharge();
  inline void clear_has_recharge();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_reset_time();
  inline void clear_has_reset_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_lst_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 reset_time_;
  ::google::protobuf::uint32 recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DayTotalRechargeDBProto* default_instance_;
};
// -------------------------------------------------------------------

class TotalRechargeDBProto : public ::google::protobuf::Message {
 public:
  TotalRechargeDBProto();
  virtual ~TotalRechargeDBProto();

  TotalRechargeDBProto(const TotalRechargeDBProto& from);

  inline TotalRechargeDBProto& operator=(const TotalRechargeDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TotalRechargeDBProto& default_instance();

  void Swap(TotalRechargeDBProto* other);

  // implements Message ----------------------------------------------

  TotalRechargeDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TotalRechargeDBProto& from);
  void MergeFrom(const TotalRechargeDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fetch_lst = 1;
  inline int fetch_lst_size() const;
  inline void clear_fetch_lst();
  static const int kFetchLstFieldNumber = 1;
  inline ::google::protobuf::int32 fetch_lst(int index) const;
  inline void set_fetch_lst(int index, ::google::protobuf::int32 value);
  inline void add_fetch_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch_lst();

  // optional uint32 recharge = 2;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 recharge() const;
  inline void set_recharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.TotalRechargeDBProto)
 private:
  inline void set_has_recharge();
  inline void clear_has_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_lst_;
  ::google::protobuf::uint32 recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static TotalRechargeDBProto* default_instance_;
};
// -------------------------------------------------------------------

class LoginRewardDBProto : public ::google::protobuf::Message {
 public:
  LoginRewardDBProto();
  virtual ~LoginRewardDBProto();

  LoginRewardDBProto(const LoginRewardDBProto& from);

  inline LoginRewardDBProto& operator=(const LoginRewardDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRewardDBProto& default_instance();

  void Swap(LoginRewardDBProto* other);

  // implements Message ----------------------------------------------

  LoginRewardDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRewardDBProto& from);
  void MergeFrom(const LoginRewardDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair fetch = 1;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 1;
  inline const ::proto_ff::ComPair& fetch(int index) const;
  inline ::proto_ff::ComPair* mutable_fetch(int index);
  inline ::proto_ff::ComPair* add_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.LoginRewardDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static LoginRewardDBProto* default_instance_;
};
// -------------------------------------------------------------------

class DayFetchInfo : public ::google::protobuf::Message {
 public:
  DayFetchInfo();
  virtual ~DayFetchInfo();

  DayFetchInfo(const DayFetchInfo& from);

  inline DayFetchInfo& operator=(const DayFetchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayFetchInfo& default_instance();

  void Swap(DayFetchInfo* other);

  // implements Message ----------------------------------------------

  DayFetchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayFetchInfo& from);
  void MergeFrom(const DayFetchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // repeated int32 gear_lst = 2;
  inline int gear_lst_size() const;
  inline void clear_gear_lst();
  static const int kGearLstFieldNumber = 2;
  inline ::google::protobuf::int32 gear_lst(int index) const;
  inline void set_gear_lst(int index, ::google::protobuf::int32 value);
  inline void add_gear_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gear_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gear_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.DayFetchInfo)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gear_lst_;
  ::google::protobuf::int32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DayFetchInfo* default_instance_;
};
// -------------------------------------------------------------------

class GearFetchInfo : public ::google::protobuf::Message {
 public:
  GearFetchInfo();
  virtual ~GearFetchInfo();

  GearFetchInfo(const GearFetchInfo& from);

  inline GearFetchInfo& operator=(const GearFetchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GearFetchInfo& default_instance();

  void Swap(GearFetchInfo* other);

  // implements Message ----------------------------------------------

  GearFetchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GearFetchInfo& from);
  void MergeFrom(const GearFetchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gear = 1;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 1;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // repeated int32 day_lst = 2;
  inline int day_lst_size() const;
  inline void clear_day_lst();
  static const int kDayLstFieldNumber = 2;
  inline ::google::protobuf::int32 day_lst(int index) const;
  inline void set_day_lst(int index, ::google::protobuf::int32 value);
  inline void add_day_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      day_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_day_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.GearFetchInfo)
 private:
  inline void set_has_gear();
  inline void clear_has_gear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > day_lst_;
  ::google::protobuf::int32 gear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GearFetchInfo* default_instance_;
};
// -------------------------------------------------------------------

class ContiRechargeDBProto : public ::google::protobuf::Message {
 public:
  ContiRechargeDBProto();
  virtual ~ContiRechargeDBProto();

  ContiRechargeDBProto(const ContiRechargeDBProto& from);

  inline ContiRechargeDBProto& operator=(const ContiRechargeDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContiRechargeDBProto& default_instance();

  void Swap(ContiRechargeDBProto* other);

  // implements Message ----------------------------------------------

  ContiRechargeDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContiRechargeDBProto& from);
  void MergeFrom(const ContiRechargeDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 recharge = 1;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 1;
  inline ::google::protobuf::uint32 recharge() const;
  inline void set_recharge(::google::protobuf::uint32 value);

  // optional int32 supplement = 2;
  inline bool has_supplement() const;
  inline void clear_supplement();
  static const int kSupplementFieldNumber = 2;
  inline ::google::protobuf::int32 supplement() const;
  inline void set_supplement(::google::protobuf::int32 value);

  // repeated .proto_ff.DayFetchInfo day_fetch = 3;
  inline int day_fetch_size() const;
  inline void clear_day_fetch();
  static const int kDayFetchFieldNumber = 3;
  inline const ::proto_ff::DayFetchInfo& day_fetch(int index) const;
  inline ::proto_ff::DayFetchInfo* mutable_day_fetch(int index);
  inline ::proto_ff::DayFetchInfo* add_day_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DayFetchInfo >&
      day_fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DayFetchInfo >*
      mutable_day_fetch();

  // repeated .proto_ff.GearFetchInfo gear_fetch = 4;
  inline int gear_fetch_size() const;
  inline void clear_gear_fetch();
  static const int kGearFetchFieldNumber = 4;
  inline const ::proto_ff::GearFetchInfo& gear_fetch(int index) const;
  inline ::proto_ff::GearFetchInfo* mutable_gear_fetch(int index);
  inline ::proto_ff::GearFetchInfo* add_gear_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GearFetchInfo >&
      gear_fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GearFetchInfo >*
      mutable_gear_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.ContiRechargeDBProto)
 private:
  inline void set_has_recharge();
  inline void clear_has_recharge();
  inline void set_has_supplement();
  inline void clear_has_supplement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 recharge_;
  ::google::protobuf::int32 supplement_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DayFetchInfo > day_fetch_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::GearFetchInfo > gear_fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ContiRechargeDBProto* default_instance_;
};
// -------------------------------------------------------------------

class ShopProto : public ::google::protobuf::Message {
 public:
  ShopProto();
  virtual ~ShopProto();

  ShopProto(const ShopProto& from);

  inline ShopProto& operator=(const ShopProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopProto& default_instance();

  void Swap(ShopProto* other);

  // implements Message ----------------------------------------------

  ShopProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopProto& from);
  void MergeFrom(const ShopProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // repeated int32 fetch = 3;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch(int index) const;
  inline void set_fetch(int index, ::google::protobuf::int32 value);
  inline void add_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch();

  // repeated .proto_ff.ComPair buy = 4;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 4;
  inline const ::proto_ff::ComPair& buy(int index) const;
  inline ::proto_ff::ComPair* mutable_buy(int index);
  inline ::proto_ff::ComPair* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.ShopProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ShopProto* default_instance_;
};
// -------------------------------------------------------------------

class LimitSaleDBProto : public ::google::protobuf::Message {
 public:
  LimitSaleDBProto();
  virtual ~LimitSaleDBProto();

  LimitSaleDBProto(const LimitSaleDBProto& from);

  inline LimitSaleDBProto& operator=(const LimitSaleDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitSaleDBProto& default_instance();

  void Swap(LimitSaleDBProto* other);

  // implements Message ----------------------------------------------

  LimitSaleDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimitSaleDBProto& from);
  void MergeFrom(const LimitSaleDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ShopProto shop = 1;
  inline int shop_size() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 1;
  inline const ::proto_ff::ShopProto& shop(int index) const;
  inline ::proto_ff::ShopProto* mutable_shop(int index);
  inline ::proto_ff::ShopProto* add_shop();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ShopProto >&
      shop() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ShopProto >*
      mutable_shop();

  // optional uint64 fresh_time = 2;
  inline bool has_fresh_time() const;
  inline void clear_fresh_time();
  static const int kFreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 fresh_time() const;
  inline void set_fresh_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LimitSaleDBProto)
 private:
  inline void set_has_fresh_time();
  inline void clear_has_fresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ShopProto > shop_;
  ::google::protobuf::uint64 fresh_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static LimitSaleDBProto* default_instance_;
};
// -------------------------------------------------------------------

class MysteryDBProto : public ::google::protobuf::Message {
 public:
  MysteryDBProto();
  virtual ~MysteryDBProto();

  MysteryDBProto(const MysteryDBProto& from);

  inline MysteryDBProto& operator=(const MysteryDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysteryDBProto& default_instance();

  void Swap(MysteryDBProto* other);

  // implements Message ----------------------------------------------

  MysteryDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysteryDBProto& from);
  void MergeFrom(const MysteryDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline ::google::protobuf::int32 openid() const;
  inline void set_openid(::google::protobuf::int32 value);

  // optional int32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair buy = 3;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 3;
  inline const ::proto_ff::ComPair& buy(int index) const;
  inline ::proto_ff::ComPair* mutable_buy(int index);
  inline ::proto_ff::ComPair* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_buy();

  // @@protoc_insertion_point(class_scope:proto_ff.MysteryDBProto)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 openid_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MysteryDBProto* default_instance_;
};
// -------------------------------------------------------------------

class TaskProto : public ::google::protobuf::Message {
 public:
  TaskProto();
  virtual ~TaskProto();

  TaskProto(const TaskProto& from);

  inline TaskProto& operator=(const TaskProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskProto& default_instance();

  void Swap(TaskProto* other);

  // implements Message ----------------------------------------------

  TaskProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskProto& from);
  void MergeFrom(const TaskProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.TaskProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static TaskProto* default_instance_;
};
// -------------------------------------------------------------------

class FestShootSunDBProto : public ::google::protobuf::Message {
 public:
  FestShootSunDBProto();
  virtual ~FestShootSunDBProto();

  FestShootSunDBProto(const FestShootSunDBProto& from);

  inline FestShootSunDBProto& operator=(const FestShootSunDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestShootSunDBProto& default_instance();

  void Swap(FestShootSunDBProto* other);

  // implements Message ----------------------------------------------

  FestShootSunDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestShootSunDBProto& from);
  void MergeFrom(const FestShootSunDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair id_lst = 1;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 1;
  inline const ::proto_ff::ComPair& id_lst(int index) const;
  inline ::proto_ff::ComPair* mutable_id_lst(int index);
  inline ::proto_ff::ComPair* add_id_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      id_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_id_lst();

  // optional int32 free = 2;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 2;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // optional uint64 free_time = 3;
  inline bool has_free_time() const;
  inline void clear_free_time();
  static const int kFreeTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 free_time() const;
  inline void set_free_time(::google::protobuf::uint64 value);

  // optional uint64 auto_time = 4;
  inline bool has_auto_time() const;
  inline void clear_auto_time();
  static const int kAutoTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 auto_time() const;
  inline void set_auto_time(::google::protobuf::uint64 value);

  // repeated .proto_ff.TaskProto task = 5;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 5;
  inline const ::proto_ff::TaskProto& task(int index) const;
  inline ::proto_ff::TaskProto* mutable_task(int index);
  inline ::proto_ff::TaskProto* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TaskProto >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TaskProto >*
      mutable_task();

  // optional uint64 task_time = 6;
  inline bool has_task_time() const;
  inline void clear_task_time();
  static const int kTaskTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 task_time() const;
  inline void set_task_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FestShootSunDBProto)
 private:
  inline void set_has_free();
  inline void clear_has_free();
  inline void set_has_free_time();
  inline void clear_has_free_time();
  inline void set_has_auto_time();
  inline void clear_has_auto_time();
  inline void set_has_task_time();
  inline void clear_has_task_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > id_lst_;
  ::google::protobuf::uint64 free_time_;
  ::google::protobuf::uint64 auto_time_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::TaskProto > task_;
  ::google::protobuf::uint64 task_time_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestShootSunDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDetailDBProto : public ::google::protobuf::Message {
 public:
  FestDetailDBProto();
  virtual ~FestDetailDBProto();

  FestDetailDBProto(const FestDetailDBProto& from);

  inline FestDetailDBProto& operator=(const FestDetailDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDetailDBProto& default_instance();

  void Swap(FestDetailDBProto* other);

  // implements Message ----------------------------------------------

  FestDetailDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDetailDBProto& from);
  void MergeFrom(const FestDetailDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // required int32 period = 2;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 period() const;
  inline void set_period(::google::protobuf::int32 value);

  // required uint64 begintime = 3;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 3;
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // optional .proto_ff.FestShopDBProto shop = 4;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 4;
  inline const ::proto_ff::FestShopDBProto& shop() const;
  inline ::proto_ff::FestShopDBProto* mutable_shop();
  inline ::proto_ff::FestShopDBProto* release_shop();
  inline void set_allocated_shop(::proto_ff::FestShopDBProto* shop);

  // optional .proto_ff.FestDailyTotalRechargeDBProto daily_total_recharge = 5;
  inline bool has_daily_total_recharge() const;
  inline void clear_daily_total_recharge();
  static const int kDailyTotalRechargeFieldNumber = 5;
  inline const ::proto_ff::FestDailyTotalRechargeDBProto& daily_total_recharge() const;
  inline ::proto_ff::FestDailyTotalRechargeDBProto* mutable_daily_total_recharge();
  inline ::proto_ff::FestDailyTotalRechargeDBProto* release_daily_total_recharge();
  inline void set_allocated_daily_total_recharge(::proto_ff::FestDailyTotalRechargeDBProto* daily_total_recharge);

  // optional .proto_ff.FestSignDBProto sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::proto_ff::FestSignDBProto& sign() const;
  inline ::proto_ff::FestSignDBProto* mutable_sign();
  inline ::proto_ff::FestSignDBProto* release_sign();
  inline void set_allocated_sign(::proto_ff::FestSignDBProto* sign);

  // optional .proto_ff.FestGoldStoreDBProto gold_store = 7;
  inline bool has_gold_store() const;
  inline void clear_gold_store();
  static const int kGoldStoreFieldNumber = 7;
  inline const ::proto_ff::FestGoldStoreDBProto& gold_store() const;
  inline ::proto_ff::FestGoldStoreDBProto* mutable_gold_store();
  inline ::proto_ff::FestGoldStoreDBProto* release_gold_store();
  inline void set_allocated_gold_store(::proto_ff::FestGoldStoreDBProto* gold_store);

  // optional .proto_ff.FestDigEggDBProto dig_egg = 8;
  inline bool has_dig_egg() const;
  inline void clear_dig_egg();
  static const int kDigEggFieldNumber = 8;
  inline const ::proto_ff::FestDigEggDBProto& dig_egg() const;
  inline ::proto_ff::FestDigEggDBProto* mutable_dig_egg();
  inline ::proto_ff::FestDigEggDBProto* release_dig_egg();
  inline void set_allocated_dig_egg(::proto_ff::FestDigEggDBProto* dig_egg);

  // optional .proto_ff.FestRTurnableRechargeDBProto rturnable_recharge = 9;
  inline bool has_rturnable_recharge() const;
  inline void clear_rturnable_recharge();
  static const int kRturnableRechargeFieldNumber = 9;
  inline const ::proto_ff::FestRTurnableRechargeDBProto& rturnable_recharge() const;
  inline ::proto_ff::FestRTurnableRechargeDBProto* mutable_rturnable_recharge();
  inline ::proto_ff::FestRTurnableRechargeDBProto* release_rturnable_recharge();
  inline void set_allocated_rturnable_recharge(::proto_ff::FestRTurnableRechargeDBProto* rturnable_recharge);

  // optional .proto_ff.FestTurnableDBProto turntable = 10;
  inline bool has_turntable() const;
  inline void clear_turntable();
  static const int kTurntableFieldNumber = 10;
  inline const ::proto_ff::FestTurnableDBProto& turntable() const;
  inline ::proto_ff::FestTurnableDBProto* mutable_turntable();
  inline ::proto_ff::FestTurnableDBProto* release_turntable();
  inline void set_allocated_turntable(::proto_ff::FestTurnableDBProto* turntable);

  // optional .proto_ff.FestDonateDBProto donate = 11;
  inline bool has_donate() const;
  inline void clear_donate();
  static const int kDonateFieldNumber = 11;
  inline const ::proto_ff::FestDonateDBProto& donate() const;
  inline ::proto_ff::FestDonateDBProto* mutable_donate();
  inline ::proto_ff::FestDonateDBProto* release_donate();
  inline void set_allocated_donate(::proto_ff::FestDonateDBProto* donate);

  // optional .proto_ff.FestOnlineDBProto online = 12;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 12;
  inline const ::proto_ff::FestOnlineDBProto& online() const;
  inline ::proto_ff::FestOnlineDBProto* mutable_online();
  inline ::proto_ff::FestOnlineDBProto* release_online();
  inline void set_allocated_online(::proto_ff::FestOnlineDBProto* online);

  // optional .proto_ff.FestCollectWordDBProto collect_word = 13;
  inline bool has_collect_word() const;
  inline void clear_collect_word();
  static const int kCollectWordFieldNumber = 13;
  inline const ::proto_ff::FestCollectWordDBProto& collect_word() const;
  inline ::proto_ff::FestCollectWordDBProto* mutable_collect_word();
  inline ::proto_ff::FestCollectWordDBProto* release_collect_word();
  inline void set_allocated_collect_word(::proto_ff::FestCollectWordDBProto* collect_word);

  // optional .proto_ff.DrawPizeProto draw_pize = 14;
  inline bool has_draw_pize() const;
  inline void clear_draw_pize();
  static const int kDrawPizeFieldNumber = 14;
  inline const ::proto_ff::DrawPizeProto& draw_pize() const;
  inline ::proto_ff::DrawPizeProto* mutable_draw_pize();
  inline ::proto_ff::DrawPizeProto* release_draw_pize();
  inline void set_allocated_draw_pize(::proto_ff::DrawPizeProto* draw_pize);

  // optional .proto_ff.FestRankDBData server_rank = 15;
  inline bool has_server_rank() const;
  inline void clear_server_rank();
  static const int kServerRankFieldNumber = 15;
  inline const ::proto_ff::FestRankDBData& server_rank() const;
  inline ::proto_ff::FestRankDBData* mutable_server_rank();
  inline ::proto_ff::FestRankDBData* release_server_rank();
  inline void set_allocated_server_rank(::proto_ff::FestRankDBData* server_rank);

  // optional .proto_ff.FestBossFirstDB boss = 16;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 16;
  inline const ::proto_ff::FestBossFirstDB& boss() const;
  inline ::proto_ff::FestBossFirstDB* mutable_boss();
  inline ::proto_ff::FestBossFirstDB* release_boss();
  inline void set_allocated_boss(::proto_ff::FestBossFirstDB* boss);

  // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 17;
  inline bool has_hui_meng_xi_you() const;
  inline void clear_hui_meng_xi_you();
  static const int kHuiMengXiYouFieldNumber = 17;
  inline const ::proto_ff::FestHuiMengXiYouData& hui_meng_xi_you() const;
  inline ::proto_ff::FestHuiMengXiYouData* mutable_hui_meng_xi_you();
  inline ::proto_ff::FestHuiMengXiYouData* release_hui_meng_xi_you();
  inline void set_allocated_hui_meng_xi_you(::proto_ff::FestHuiMengXiYouData* hui_meng_xi_you);

  // optional .proto_ff.FestBtDragonDBProto bt_dragon = 18;
  inline bool has_bt_dragon() const;
  inline void clear_bt_dragon();
  static const int kBtDragonFieldNumber = 18;
  inline const ::proto_ff::FestBtDragonDBProto& bt_dragon() const;
  inline ::proto_ff::FestBtDragonDBProto* mutable_bt_dragon();
  inline ::proto_ff::FestBtDragonDBProto* release_bt_dragon();
  inline void set_allocated_bt_dragon(::proto_ff::FestBtDragonDBProto* bt_dragon);

  // optional .proto_ff.FestCandleDBProto candle = 19;
  inline bool has_candle() const;
  inline void clear_candle();
  static const int kCandleFieldNumber = 19;
  inline const ::proto_ff::FestCandleDBProto& candle() const;
  inline ::proto_ff::FestCandleDBProto* mutable_candle();
  inline ::proto_ff::FestCandleDBProto* release_candle();
  inline void set_allocated_candle(::proto_ff::FestCandleDBProto* candle);

  // optional .proto_ff.FMarryRoleDB marry = 20;
  inline bool has_marry() const;
  inline void clear_marry();
  static const int kMarryFieldNumber = 20;
  inline const ::proto_ff::FMarryRoleDB& marry() const;
  inline ::proto_ff::FMarryRoleDB* mutable_marry();
  inline ::proto_ff::FMarryRoleDB* release_marry();
  inline void set_allocated_marry(::proto_ff::FMarryRoleDB* marry);

  // optional .proto_ff.DayTotalRechargeDBProto day_total_recharge = 21;
  inline bool has_day_total_recharge() const;
  inline void clear_day_total_recharge();
  static const int kDayTotalRechargeFieldNumber = 21;
  inline const ::proto_ff::DayTotalRechargeDBProto& day_total_recharge() const;
  inline ::proto_ff::DayTotalRechargeDBProto* mutable_day_total_recharge();
  inline ::proto_ff::DayTotalRechargeDBProto* release_day_total_recharge();
  inline void set_allocated_day_total_recharge(::proto_ff::DayTotalRechargeDBProto* day_total_recharge);

  // optional .proto_ff.TotalRechargeDBProto total_recharge = 22;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 22;
  inline const ::proto_ff::TotalRechargeDBProto& total_recharge() const;
  inline ::proto_ff::TotalRechargeDBProto* mutable_total_recharge();
  inline ::proto_ff::TotalRechargeDBProto* release_total_recharge();
  inline void set_allocated_total_recharge(::proto_ff::TotalRechargeDBProto* total_recharge);

  // optional .proto_ff.LoginRewardDBProto login = 23;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 23;
  inline const ::proto_ff::LoginRewardDBProto& login() const;
  inline ::proto_ff::LoginRewardDBProto* mutable_login();
  inline ::proto_ff::LoginRewardDBProto* release_login();
  inline void set_allocated_login(::proto_ff::LoginRewardDBProto* login);

  // optional .proto_ff.ContiRechargeDBProto conti_recharge = 24;
  inline bool has_conti_recharge() const;
  inline void clear_conti_recharge();
  static const int kContiRechargeFieldNumber = 24;
  inline const ::proto_ff::ContiRechargeDBProto& conti_recharge() const;
  inline ::proto_ff::ContiRechargeDBProto* mutable_conti_recharge();
  inline ::proto_ff::ContiRechargeDBProto* release_conti_recharge();
  inline void set_allocated_conti_recharge(::proto_ff::ContiRechargeDBProto* conti_recharge);

  // optional .proto_ff.LimitSaleDBProto limit_sale = 25;
  inline bool has_limit_sale() const;
  inline void clear_limit_sale();
  static const int kLimitSaleFieldNumber = 25;
  inline const ::proto_ff::LimitSaleDBProto& limit_sale() const;
  inline ::proto_ff::LimitSaleDBProto* mutable_limit_sale();
  inline ::proto_ff::LimitSaleDBProto* release_limit_sale();
  inline void set_allocated_limit_sale(::proto_ff::LimitSaleDBProto* limit_sale);

  // optional .proto_ff.MysteryDBProto mystery = 26;
  inline bool has_mystery() const;
  inline void clear_mystery();
  static const int kMysteryFieldNumber = 26;
  inline const ::proto_ff::MysteryDBProto& mystery() const;
  inline ::proto_ff::MysteryDBProto* mutable_mystery();
  inline ::proto_ff::MysteryDBProto* release_mystery();
  inline void set_allocated_mystery(::proto_ff::MysteryDBProto* mystery);

  // optional .proto_ff.FestShootSunDBProto shoot_sun = 27;
  inline bool has_shoot_sun() const;
  inline void clear_shoot_sun();
  static const int kShootSunFieldNumber = 27;
  inline const ::proto_ff::FestShootSunDBProto& shoot_sun() const;
  inline ::proto_ff::FestShootSunDBProto* mutable_shoot_sun();
  inline ::proto_ff::FestShootSunDBProto* release_shoot_sun();
  inline void set_allocated_shoot_sun(::proto_ff::FestShootSunDBProto* shoot_sun);

  // optional .proto_ff.FestRechargePrizeDBData recharge_prize = 28;
  inline bool has_recharge_prize() const;
  inline void clear_recharge_prize();
  static const int kRechargePrizeFieldNumber = 28;
  inline const ::proto_ff::FestRechargePrizeDBData& recharge_prize() const;
  inline ::proto_ff::FestRechargePrizeDBData* mutable_recharge_prize();
  inline ::proto_ff::FestRechargePrizeDBData* release_recharge_prize();
  inline void set_allocated_recharge_prize(::proto_ff::FestRechargePrizeDBData* recharge_prize);

  // @@protoc_insertion_point(class_scope:proto_ff.FestDetailDBProto)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_shop();
  inline void clear_has_shop();
  inline void set_has_daily_total_recharge();
  inline void clear_has_daily_total_recharge();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_gold_store();
  inline void clear_has_gold_store();
  inline void set_has_dig_egg();
  inline void clear_has_dig_egg();
  inline void set_has_rturnable_recharge();
  inline void clear_has_rturnable_recharge();
  inline void set_has_turntable();
  inline void clear_has_turntable();
  inline void set_has_donate();
  inline void clear_has_donate();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_collect_word();
  inline void clear_has_collect_word();
  inline void set_has_draw_pize();
  inline void clear_has_draw_pize();
  inline void set_has_server_rank();
  inline void clear_has_server_rank();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_hui_meng_xi_you();
  inline void clear_has_hui_meng_xi_you();
  inline void set_has_bt_dragon();
  inline void clear_has_bt_dragon();
  inline void set_has_candle();
  inline void clear_has_candle();
  inline void set_has_marry();
  inline void clear_has_marry();
  inline void set_has_day_total_recharge();
  inline void clear_has_day_total_recharge();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_conti_recharge();
  inline void clear_has_conti_recharge();
  inline void set_has_limit_sale();
  inline void clear_has_limit_sale();
  inline void set_has_mystery();
  inline void clear_has_mystery();
  inline void set_has_shoot_sun();
  inline void clear_has_shoot_sun();
  inline void set_has_recharge_prize();
  inline void clear_has_recharge_prize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 period_;
  ::google::protobuf::uint64 begintime_;
  ::proto_ff::FestShopDBProto* shop_;
  ::proto_ff::FestDailyTotalRechargeDBProto* daily_total_recharge_;
  ::proto_ff::FestSignDBProto* sign_;
  ::proto_ff::FestGoldStoreDBProto* gold_store_;
  ::proto_ff::FestDigEggDBProto* dig_egg_;
  ::proto_ff::FestRTurnableRechargeDBProto* rturnable_recharge_;
  ::proto_ff::FestTurnableDBProto* turntable_;
  ::proto_ff::FestDonateDBProto* donate_;
  ::proto_ff::FestOnlineDBProto* online_;
  ::proto_ff::FestCollectWordDBProto* collect_word_;
  ::proto_ff::DrawPizeProto* draw_pize_;
  ::proto_ff::FestRankDBData* server_rank_;
  ::proto_ff::FestBossFirstDB* boss_;
  ::proto_ff::FestHuiMengXiYouData* hui_meng_xi_you_;
  ::proto_ff::FestBtDragonDBProto* bt_dragon_;
  ::proto_ff::FestCandleDBProto* candle_;
  ::proto_ff::FMarryRoleDB* marry_;
  ::proto_ff::DayTotalRechargeDBProto* day_total_recharge_;
  ::proto_ff::TotalRechargeDBProto* total_recharge_;
  ::proto_ff::LoginRewardDBProto* login_;
  ::proto_ff::ContiRechargeDBProto* conti_recharge_;
  ::proto_ff::LimitSaleDBProto* limit_sale_;
  ::proto_ff::MysteryDBProto* mystery_;
  ::proto_ff::FestShootSunDBProto* shoot_sun_;
  ::proto_ff::FestRechargePrizeDBData* recharge_prize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDetailDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDBData : public ::google::protobuf::Message {
 public:
  FestDBData();
  virtual ~FestDBData();

  FestDBData(const FestDBData& from);

  inline FestDBData& operator=(const FestDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDBData& default_instance();

  void Swap(FestDBData* other);

  // implements Message ----------------------------------------------

  FestDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDBData& from);
  void MergeFrom(const FestDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDetailDBProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestDetailDBProto& info(int index) const;
  inline ::proto_ff::FestDetailDBProto* mutable_info(int index);
  inline ::proto_ff::FestDetailDBProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailDBProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailDBProto >*
      mutable_info();

  // repeated int32 close = 2;
  inline int close_size() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 2;
  inline ::google::protobuf::int32 close(int index) const;
  inline void set_close(int index, ::google::protobuf::int32 value);
  inline void add_close(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      close() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_close();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailDBProto > info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > close_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDBData* default_instance_;
};
// -------------------------------------------------------------------

class ShadowDBProto : public ::google::protobuf::Message {
 public:
  ShadowDBProto();
  virtual ~ShadowDBProto();

  ShadowDBProto(const ShadowDBProto& from);

  inline ShadowDBProto& operator=(const ShadowDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShadowDBProto& default_instance();

  void Swap(ShadowDBProto* other);

  // implements Message ----------------------------------------------

  ShadowDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShadowDBProto& from);
  void MergeFrom(const ShadowDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lev = 1;
  inline bool has_lev() const;
  inline void clear_lev();
  static const int kLevFieldNumber = 1;
  inline ::google::protobuf::int32 lev() const;
  inline void set_lev(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 lucky = 4;
  inline bool has_lucky() const;
  inline void clear_lucky();
  static const int kLuckyFieldNumber = 4;
  inline ::google::protobuf::int32 lucky() const;
  inline void set_lucky(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair frag = 5;
  inline int frag_size() const;
  inline void clear_frag();
  static const int kFragFieldNumber = 5;
  inline const ::proto_ff::ComPair& frag(int index) const;
  inline ::proto_ff::ComPair* mutable_frag(int index);
  inline ::proto_ff::ComPair* add_frag();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      frag() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_frag();

  // optional int32 curstar = 6;
  inline bool has_curstar() const;
  inline void clear_curstar();
  static const int kCurstarFieldNumber = 6;
  inline ::google::protobuf::int32 curstar() const;
  inline void set_curstar(::google::protobuf::int32 value);

  // repeated .proto_ff.ComPair64 skill = 7;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 7;
  inline const ::proto_ff::ComPair64& skill(int index) const;
  inline ::proto_ff::ComPair64* mutable_skill(int index);
  inline ::proto_ff::ComPair64* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
      mutable_skill();

  // @@protoc_insertion_point(class_scope:proto_ff.ShadowDBProto)
 private:
  inline void set_has_lev();
  inline void clear_has_lev();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_lucky();
  inline void clear_has_lucky();
  inline void set_has_curstar();
  inline void clear_has_curstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lev_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 lucky_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > frag_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 > skill_;
  ::google::protobuf::int32 curstar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ShadowDBProto* default_instance_;
};
// -------------------------------------------------------------------

class HaloDBProto : public ::google::protobuf::Message {
 public:
  HaloDBProto();
  virtual ~HaloDBProto();

  HaloDBProto(const HaloDBProto& from);

  inline HaloDBProto& operator=(const HaloDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HaloDBProto& default_instance();

  void Swap(HaloDBProto* other);

  // implements Message ----------------------------------------------

  HaloDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HaloDBProto& from);
  void MergeFrom(const HaloDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComPair info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ComPair& info(int index) const;
  inline ::proto_ff::ComPair* mutable_info(int index);
  inline ::proto_ff::ComPair* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_info();

  // optional int32 curid = 2;
  inline bool has_curid() const;
  inline void clear_curid();
  static const int kCuridFieldNumber = 2;
  inline ::google::protobuf::int32 curid() const;
  inline void set_curid(::google::protobuf::int32 value);

  // optional int32 curstar = 3;
  inline bool has_curstar() const;
  inline void clear_curstar();
  static const int kCurstarFieldNumber = 3;
  inline ::google::protobuf::int32 curstar() const;
  inline void set_curstar(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.HaloDBProto)
 private:
  inline void set_has_curid();
  inline void clear_has_curid();
  inline void set_has_curstar();
  inline void clear_has_curstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > info_;
  ::google::protobuf::int32 curid_;
  ::google::protobuf::int32 curstar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static HaloDBProto* default_instance_;
};
// -------------------------------------------------------------------

class DragonDBData : public ::google::protobuf::Message {
 public:
  DragonDBData();
  virtual ~DragonDBData();

  DragonDBData(const DragonDBData& from);

  inline DragonDBData& operator=(const DragonDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DragonDBData& default_instance();

  void Swap(DragonDBData* other);

  // implements Message ----------------------------------------------

  DragonDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DragonDBData& from);
  void MergeFrom(const DragonDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.ShadowDBProto shadow = 1;
  inline bool has_shadow() const;
  inline void clear_shadow();
  static const int kShadowFieldNumber = 1;
  inline const ::proto_ff::ShadowDBProto& shadow() const;
  inline ::proto_ff::ShadowDBProto* mutable_shadow();
  inline ::proto_ff::ShadowDBProto* release_shadow();
  inline void set_allocated_shadow(::proto_ff::ShadowDBProto* shadow);

  // optional .proto_ff.HaloDBProto halo = 2;
  inline bool has_halo() const;
  inline void clear_halo();
  static const int kHaloFieldNumber = 2;
  inline const ::proto_ff::HaloDBProto& halo() const;
  inline ::proto_ff::HaloDBProto* mutable_halo();
  inline ::proto_ff::HaloDBProto* release_halo();
  inline void set_allocated_halo(::proto_ff::HaloDBProto* halo);

  // @@protoc_insertion_point(class_scope:proto_ff.DragonDBData)
 private:
  inline void set_has_shadow();
  inline void clear_has_shadow();
  inline void set_has_halo();
  inline void clear_has_halo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::ShadowDBProto* shadow_;
  ::proto_ff::HaloDBProto* halo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DragonDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBTurnData : public ::google::protobuf::Message {
 public:
  RoleDBTurnData();
  virtual ~RoleDBTurnData();

  RoleDBTurnData(const RoleDBTurnData& from);

  inline RoleDBTurnData& operator=(const RoleDBTurnData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBTurnData& default_instance();

  void Swap(RoleDBTurnData* other);

  // implements Message ----------------------------------------------

  RoleDBTurnData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBTurnData& from);
  void MergeFrom(const RoleDBTurnData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.TurnEntry entrys = 1;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 1;
  inline const ::proto_ff::TurnEntry& entrys(int index) const;
  inline ::proto_ff::TurnEntry* mutable_entrys(int index);
  inline ::proto_ff::TurnEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnEntry >*
      mutable_entrys();

  // optional .proto_ff.TurnSimple simple = 2;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 2;
  inline const ::proto_ff::TurnSimple& simple() const;
  inline ::proto_ff::TurnSimple* mutable_simple();
  inline ::proto_ff::TurnSimple* release_simple();
  inline void set_allocated_simple(::proto_ff::TurnSimple* simple);

  // repeated .proto_ff.TurnHelper helper = 3;
  inline int helper_size() const;
  inline void clear_helper();
  static const int kHelperFieldNumber = 3;
  inline const ::proto_ff::TurnHelper& helper(int index) const;
  inline ::proto_ff::TurnHelper* mutable_helper(int index);
  inline ::proto_ff::TurnHelper* add_helper();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnHelper >&
      helper() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnHelper >*
      mutable_helper();

  // optional uint64 refresh_time = 4;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint64 value);

  // repeated .proto_ff.TurnTask tasks = 5;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 5;
  inline const ::proto_ff::TurnTask& tasks(int index) const;
  inline ::proto_ff::TurnTask* mutable_tasks(int index);
  inline ::proto_ff::TurnTask* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnTask >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnTask >*
      mutable_tasks();

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBTurnData)
 private:
  inline void set_has_simple();
  inline void clear_has_simple();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnEntry > entrys_;
  ::proto_ff::TurnSimple* simple_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnHelper > helper_;
  ::google::protobuf::uint64 refresh_time_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnTask > tasks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBTurnData* default_instance_;
};
// -------------------------------------------------------------------

class GMADbData : public ::google::protobuf::Message {
 public:
  GMADbData();
  virtual ~GMADbData();

  GMADbData(const GMADbData& from);

  inline GMADbData& operator=(const GMADbData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMADbData& default_instance();

  void Swap(GMADbData* other);

  // implements Message ----------------------------------------------

  GMADbData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMADbData& from);
  void MergeFrom(const GMADbData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 remainTime = 1;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // optional uint32 freeTimeRemain = 2;
  inline bool has_freetimeremain() const;
  inline void clear_freetimeremain();
  static const int kFreeTimeRemainFieldNumber = 2;
  inline ::google::protobuf::uint32 freetimeremain() const;
  inline void set_freetimeremain(::google::protobuf::uint32 value);

  // optional uint32 freeTime = 3;
  inline bool has_freetime() const;
  inline void clear_freetime();
  static const int kFreeTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 freetime() const;
  inline void set_freetime(::google::protobuf::uint32 value);

  // optional uint32 privilege = 4;
  inline bool has_privilege() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 4;
  inline ::google::protobuf::uint32 privilege() const;
  inline void set_privilege(::google::protobuf::uint32 value);

  // optional uint64 recvFreeTimePrev = 5;
  inline bool has_recvfreetimeprev() const;
  inline void clear_recvfreetimeprev();
  static const int kRecvFreeTimePrevFieldNumber = 5;
  inline ::google::protobuf::uint64 recvfreetimeprev() const;
  inline void set_recvfreetimeprev(::google::protobuf::uint64 value);

  // optional int64 expTotal = 6;
  inline bool has_exptotal() const;
  inline void clear_exptotal();
  static const int kExpTotalFieldNumber = 6;
  inline ::google::protobuf::int64 exptotal() const;
  inline void set_exptotal(::google::protobuf::int64 value);

  // optional int64 expAccumulate = 7;
  inline bool has_expaccumulate() const;
  inline void clear_expaccumulate();
  static const int kExpAccumulateFieldNumber = 7;
  inline ::google::protobuf::int64 expaccumulate() const;
  inline void set_expaccumulate(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GMADbData)
 private:
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_freetimeremain();
  inline void clear_has_freetimeremain();
  inline void set_has_freetime();
  inline void clear_has_freetime();
  inline void set_has_privilege();
  inline void clear_has_privilege();
  inline void set_has_recvfreetimeprev();
  inline void clear_has_recvfreetimeprev();
  inline void set_has_exptotal();
  inline void clear_has_exptotal();
  inline void set_has_expaccumulate();
  inline void clear_has_expaccumulate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 remaintime_;
  ::google::protobuf::uint32 freetimeremain_;
  ::google::protobuf::uint32 freetime_;
  ::google::protobuf::uint32 privilege_;
  ::google::protobuf::uint64 recvfreetimeprev_;
  ::google::protobuf::int64 exptotal_;
  ::google::protobuf::int64 expaccumulate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GMADbData* default_instance_;
};
// -------------------------------------------------------------------

class SoulDBData : public ::google::protobuf::Message {
 public:
  SoulDBData();
  virtual ~SoulDBData();

  SoulDBData(const SoulDBData& from);

  inline SoulDBData& operator=(const SoulDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoulDBData& default_instance();

  void Swap(SoulDBData* other);

  // implements Message ----------------------------------------------

  SoulDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoulDBData& from);
  void MergeFrom(const SoulDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.SoulEntry entry = 1;
  inline bool has_entry() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::proto_ff::SoulEntry& entry() const;
  inline ::proto_ff::SoulEntry* mutable_entry();
  inline ::proto_ff::SoulEntry* release_entry();
  inline void set_allocated_entry(::proto_ff::SoulEntry* entry);

  // optional .proto_ff.SoulPool pool = 2;
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 2;
  inline const ::proto_ff::SoulPool& pool() const;
  inline ::proto_ff::SoulPool* mutable_pool();
  inline ::proto_ff::SoulPool* release_pool();
  inline void set_allocated_pool(::proto_ff::SoulPool* pool);

  // repeated .proto_ff.ComPair tasks = 3;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 3;
  inline const ::proto_ff::ComPair& tasks(int index) const;
  inline ::proto_ff::ComPair* mutable_tasks(int index);
  inline ::proto_ff::ComPair* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_tasks();

  // repeated .proto_ff.SoulSpirit spirits_list = 4;
  inline int spirits_list_size() const;
  inline void clear_spirits_list();
  static const int kSpiritsListFieldNumber = 4;
  inline const ::proto_ff::SoulSpirit& spirits_list(int index) const;
  inline ::proto_ff::SoulSpirit* mutable_spirits_list(int index);
  inline ::proto_ff::SoulSpirit* add_spirits_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulSpirit >&
      spirits_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulSpirit >*
      mutable_spirits_list();

  // repeated .proto_ff.SoulBone bone_list = 5;
  inline int bone_list_size() const;
  inline void clear_bone_list();
  static const int kBoneListFieldNumber = 5;
  inline const ::proto_ff::SoulBone& bone_list(int index) const;
  inline ::proto_ff::SoulBone* mutable_bone_list(int index);
  inline ::proto_ff::SoulBone* add_bone_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulBone >&
      bone_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulBone >*
      mutable_bone_list();

  // repeated .proto_ff.SoulGuwen guwen_list = 6;
  inline int guwen_list_size() const;
  inline void clear_guwen_list();
  static const int kGuwenListFieldNumber = 6;
  inline const ::proto_ff::SoulGuwen& guwen_list(int index) const;
  inline ::proto_ff::SoulGuwen* mutable_guwen_list(int index);
  inline ::proto_ff::SoulGuwen* add_guwen_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulGuwen >&
      guwen_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulGuwen >*
      mutable_guwen_list();

  // @@protoc_insertion_point(class_scope:proto_ff.SoulDBData)
 private:
  inline void set_has_entry();
  inline void clear_has_entry();
  inline void set_has_pool();
  inline void clear_has_pool();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::SoulEntry* entry_;
  ::proto_ff::SoulPool* pool_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > tasks_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulSpirit > spirits_list_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulBone > bone_list_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulGuwen > guwen_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SoulDBData* default_instance_;
};
// -------------------------------------------------------------------

class MoFaDBData : public ::google::protobuf::Message {
 public:
  MoFaDBData();
  virtual ~MoFaDBData();

  MoFaDBData(const MoFaDBData& from);

  inline MoFaDBData& operator=(const MoFaDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoFaDBData& default_instance();

  void Swap(MoFaDBData* other);

  // implements Message ----------------------------------------------

  MoFaDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoFaDBData& from);
  void MergeFrom(const MoFaDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.MoFaEquipInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::MoFaEquipInfo& data(int index) const;
  inline ::proto_ff::MoFaEquipInfo* mutable_data(int index);
  inline ::proto_ff::MoFaEquipInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MoFaEquipInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MoFaEquipInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.MoFaDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::MoFaEquipInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MoFaDBData* default_instance_;
};
// -------------------------------------------------------------------

class RuneDBData : public ::google::protobuf::Message {
 public:
  RuneDBData();
  virtual ~RuneDBData();

  RuneDBData(const RuneDBData& from);

  inline RuneDBData& operator=(const RuneDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuneDBData& default_instance();

  void Swap(RuneDBData* other);

  // implements Message ----------------------------------------------

  RuneDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RuneDBData& from);
  void MergeFrom(const RuneDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RuneEntry entrys = 1;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 1;
  inline const ::proto_ff::RuneEntry& entrys(int index) const;
  inline ::proto_ff::RuneEntry* mutable_entrys(int index);
  inline ::proto_ff::RuneEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RuneEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RuneEntry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:proto_ff.RuneDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RuneEntry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RuneDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBData : public ::google::protobuf::Message {
 public:
  RoleDBData();
  virtual ~RoleDBData();

  RoleDBData(const RoleDBData& from);

  inline RoleDBData& operator=(const RoleDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBData& default_instance();

  void Swap(RoleDBData* other);

  // implements Message ----------------------------------------------

  RoleDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBData& from);
  void MergeFrom(const RoleDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleDBBaseData base = 4;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 4;
  inline const ::proto_ff::RoleDBBaseData& base() const;
  inline ::proto_ff::RoleDBBaseData* mutable_base();
  inline ::proto_ff::RoleDBBaseData* release_base();
  inline void set_allocated_base(::proto_ff::RoleDBBaseData* base);

  // optional .proto_ff.RoleDBBagData bag = 5;
  inline bool has_bag() const;
  inline void clear_bag();
  static const int kBagFieldNumber = 5;
  inline const ::proto_ff::RoleDBBagData& bag() const;
  inline ::proto_ff::RoleDBBagData* mutable_bag();
  inline ::proto_ff::RoleDBBagData* release_bag();
  inline void set_allocated_bag(::proto_ff::RoleDBBagData* bag);

  // optional .proto_ff.RoleDBEquipData equip = 6;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 6;
  inline const ::proto_ff::RoleDBEquipData& equip() const;
  inline ::proto_ff::RoleDBEquipData* mutable_equip();
  inline ::proto_ff::RoleDBEquipData* release_equip();
  inline void set_allocated_equip(::proto_ff::RoleDBEquipData* equip);

  // optional .proto_ff.CharacterDBTaskData task = 7;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 7;
  inline const ::proto_ff::CharacterDBTaskData& task() const;
  inline ::proto_ff::CharacterDBTaskData* mutable_task();
  inline ::proto_ff::CharacterDBTaskData* release_task();
  inline void set_allocated_task(::proto_ff::CharacterDBTaskData* task);

  // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
  inline bool has_unlockinfo() const;
  inline void clear_unlockinfo();
  static const int kUnlockinfoFieldNumber = 8;
  inline const ::proto_ff::FunctionUnlockInfo& unlockinfo() const;
  inline ::proto_ff::FunctionUnlockInfo* mutable_unlockinfo();
  inline ::proto_ff::FunctionUnlockInfo* release_unlockinfo();
  inline void set_allocated_unlockinfo(::proto_ff::FunctionUnlockInfo* unlockinfo);

  // optional .proto_ff.GrowDBData grow = 9;
  inline bool has_grow() const;
  inline void clear_grow();
  static const int kGrowFieldNumber = 9;
  inline const ::proto_ff::GrowDBData& grow() const;
  inline ::proto_ff::GrowDBData* mutable_grow();
  inline ::proto_ff::GrowDBData* release_grow();
  inline void set_allocated_grow(::proto_ff::GrowDBData* grow);

  // optional .proto_ff.MiniDBData mini = 10;
  inline bool has_mini() const;
  inline void clear_mini();
  static const int kMiniFieldNumber = 10;
  inline const ::proto_ff::MiniDBData& mini() const;
  inline ::proto_ff::MiniDBData* mutable_mini();
  inline ::proto_ff::MiniDBData* release_mini();
  inline void set_allocated_mini(::proto_ff::MiniDBData* mini);

  // optional .proto_ff.FacadeDBData facade = 11;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 11;
  inline const ::proto_ff::FacadeDBData& facade() const;
  inline ::proto_ff::FacadeDBData* mutable_facade();
  inline ::proto_ff::FacadeDBData* release_facade();
  inline void set_allocated_facade(::proto_ff::FacadeDBData* facade);

  // optional .proto_ff.SkillDBData skill = 12;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 12;
  inline const ::proto_ff::SkillDBData& skill() const;
  inline ::proto_ff::SkillDBData* mutable_skill();
  inline ::proto_ff::SkillDBData* release_skill();
  inline void set_allocated_skill(::proto_ff::SkillDBData* skill);

  // optional .proto_ff.MiniActivityDBData mini_activity = 13;
  inline bool has_mini_activity() const;
  inline void clear_mini_activity();
  static const int kMiniActivityFieldNumber = 13;
  inline const ::proto_ff::MiniActivityDBData& mini_activity() const;
  inline ::proto_ff::MiniActivityDBData* mutable_mini_activity();
  inline ::proto_ff::MiniActivityDBData* release_mini_activity();
  inline void set_allocated_mini_activity(::proto_ff::MiniActivityDBData* mini_activity);

  // optional .proto_ff.DupDBData dup = 14;
  inline bool has_dup() const;
  inline void clear_dup();
  static const int kDupFieldNumber = 14;
  inline const ::proto_ff::DupDBData& dup() const;
  inline ::proto_ff::DupDBData* mutable_dup();
  inline ::proto_ff::DupDBData* release_dup();
  inline void set_allocated_dup(::proto_ff::DupDBData* dup);

  // optional .proto_ff.BuffDBData buff = 15;
  inline bool has_buff() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 15;
  inline const ::proto_ff::BuffDBData& buff() const;
  inline ::proto_ff::BuffDBData* mutable_buff();
  inline ::proto_ff::BuffDBData* release_buff();
  inline void set_allocated_buff(::proto_ff::BuffDBData* buff);

  // optional .proto_ff.BossDBData boss = 16;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 16;
  inline const ::proto_ff::BossDBData& boss() const;
  inline ::proto_ff::BossDBData* mutable_boss();
  inline ::proto_ff::BossDBData* release_boss();
  inline void set_allocated_boss(::proto_ff::BossDBData* boss);

  // optional .proto_ff.VipDBData vip = 17;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 17;
  inline const ::proto_ff::VipDBData& vip() const;
  inline ::proto_ff::VipDBData* mutable_vip();
  inline ::proto_ff::VipDBData* release_vip();
  inline void set_allocated_vip(::proto_ff::VipDBData* vip);

  // optional .proto_ff.AttrDBData attr = 18;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 18;
  inline const ::proto_ff::AttrDBData& attr() const;
  inline ::proto_ff::AttrDBData* mutable_attr();
  inline ::proto_ff::AttrDBData* release_attr();
  inline void set_allocated_attr(::proto_ff::AttrDBData* attr);

  // optional .proto_ff.MountDataInfo mount = 19;
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 19;
  inline const ::proto_ff::MountDataInfo& mount() const;
  inline ::proto_ff::MountDataInfo* mutable_mount();
  inline ::proto_ff::MountDataInfo* release_mount();
  inline void set_allocated_mount(::proto_ff::MountDataInfo* mount);

  // optional .proto_ff.DeityDataInfo deity = 20;
  inline bool has_deity() const;
  inline void clear_deity();
  static const int kDeityFieldNumber = 20;
  inline const ::proto_ff::DeityDataInfo& deity() const;
  inline ::proto_ff::DeityDataInfo* mutable_deity();
  inline ::proto_ff::DeityDataInfo* release_deity();
  inline void set_allocated_deity(::proto_ff::DeityDataInfo* deity);

  // optional .proto_ff.PetDBData pet = 21;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 21;
  inline const ::proto_ff::PetDBData& pet() const;
  inline ::proto_ff::PetDBData* mutable_pet();
  inline ::proto_ff::PetDBData* release_pet();
  inline void set_allocated_pet(::proto_ff::PetDBData* pet);

  // optional .proto_ff.MallDBData mall = 22;
  inline bool has_mall() const;
  inline void clear_mall();
  static const int kMallFieldNumber = 22;
  inline const ::proto_ff::MallDBData& mall() const;
  inline ::proto_ff::MallDBData* mutable_mall();
  inline ::proto_ff::MallDBData* release_mall();
  inline void set_allocated_mall(::proto_ff::MallDBData* mall);

  // optional .proto_ff.ConvoyData convoy = 23;
  inline bool has_convoy() const;
  inline void clear_convoy();
  static const int kConvoyFieldNumber = 23;
  inline const ::proto_ff::ConvoyData& convoy() const;
  inline ::proto_ff::ConvoyData* mutable_convoy();
  inline ::proto_ff::ConvoyData* release_convoy();
  inline void set_allocated_convoy(::proto_ff::ConvoyData* convoy);

  // optional .proto_ff.ArmorDBData armor = 24;
  inline bool has_armor() const;
  inline void clear_armor();
  static const int kArmorFieldNumber = 24;
  inline const ::proto_ff::ArmorDBData& armor() const;
  inline ::proto_ff::ArmorDBData* mutable_armor();
  inline ::proto_ff::ArmorDBData* release_armor();
  inline void set_allocated_armor(::proto_ff::ArmorDBData* armor);

  // optional .proto_ff.AssistDBData assist = 25;
  inline bool has_assist() const;
  inline void clear_assist();
  static const int kAssistFieldNumber = 25;
  inline const ::proto_ff::AssistDBData& assist() const;
  inline ::proto_ff::AssistDBData* mutable_assist();
  inline ::proto_ff::AssistDBData* release_assist();
  inline void set_allocated_assist(::proto_ff::AssistDBData* assist);

  // optional .proto_ff.TitleDBData title = 26;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 26;
  inline const ::proto_ff::TitleDBData& title() const;
  inline ::proto_ff::TitleDBData* mutable_title();
  inline ::proto_ff::TitleDBData* release_title();
  inline void set_allocated_title(::proto_ff::TitleDBData* title);

  // optional .proto_ff.GodEvilDBData godevil = 27;
  inline bool has_godevil() const;
  inline void clear_godevil();
  static const int kGodevilFieldNumber = 27;
  inline const ::proto_ff::GodEvilDBData& godevil() const;
  inline ::proto_ff::GodEvilDBData* mutable_godevil();
  inline ::proto_ff::GodEvilDBData* release_godevil();
  inline void set_allocated_godevil(::proto_ff::GodEvilDBData* godevil);

  // optional .proto_ff.OccupationMissionData occupatoin = 28;
  inline bool has_occupatoin() const;
  inline void clear_occupatoin();
  static const int kOccupatoinFieldNumber = 28;
  inline const ::proto_ff::OccupationMissionData& occupatoin() const;
  inline ::proto_ff::OccupationMissionData* mutable_occupatoin();
  inline ::proto_ff::OccupationMissionData* release_occupatoin();
  inline void set_allocated_occupatoin(::proto_ff::OccupationMissionData* occupatoin);

  // optional .proto_ff.PayDBData pay = 29;
  inline bool has_pay() const;
  inline void clear_pay();
  static const int kPayFieldNumber = 29;
  inline const ::proto_ff::PayDBData& pay() const;
  inline ::proto_ff::PayDBData* mutable_pay();
  inline ::proto_ff::PayDBData* release_pay();
  inline void set_allocated_pay(::proto_ff::PayDBData* pay);

  // optional .proto_ff.RoleFactionDBData role_faction = 30;
  inline bool has_role_faction() const;
  inline void clear_role_faction();
  static const int kRoleFactionFieldNumber = 30;
  inline const ::proto_ff::RoleFactionDBData& role_faction() const;
  inline ::proto_ff::RoleFactionDBData* mutable_role_faction();
  inline ::proto_ff::RoleFactionDBData* release_role_faction();
  inline void set_allocated_role_faction(::proto_ff::RoleFactionDBData* role_faction);

  // optional .proto_ff.RoleBestEQDBData best_equip = 31;
  inline bool has_best_equip() const;
  inline void clear_best_equip();
  static const int kBestEquipFieldNumber = 31;
  inline const ::proto_ff::RoleBestEQDBData& best_equip() const;
  inline ::proto_ff::RoleBestEQDBData* mutable_best_equip();
  inline ::proto_ff::RoleBestEQDBData* release_best_equip();
  inline void set_allocated_best_equip(::proto_ff::RoleBestEQDBData* best_equip);

  // optional .proto_ff.AchievementData achievement = 32;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 32;
  inline const ::proto_ff::AchievementData& achievement() const;
  inline ::proto_ff::AchievementData* mutable_achievement();
  inline ::proto_ff::AchievementData* release_achievement();
  inline void set_allocated_achievement(::proto_ff::AchievementData* achievement);

  // optional .proto_ff.AncientDBData ancient = 33;
  inline bool has_ancient() const;
  inline void clear_ancient();
  static const int kAncientFieldNumber = 33;
  inline const ::proto_ff::AncientDBData& ancient() const;
  inline ::proto_ff::AncientDBData* mutable_ancient();
  inline ::proto_ff::AncientDBData* release_ancient();
  inline void set_allocated_ancient(::proto_ff::AncientDBData* ancient);

  // optional .proto_ff.RolePvpDBData pvp = 34;
  inline bool has_pvp() const;
  inline void clear_pvp();
  static const int kPvpFieldNumber = 34;
  inline const ::proto_ff::RolePvpDBData& pvp() const;
  inline ::proto_ff::RolePvpDBData* mutable_pvp();
  inline ::proto_ff::RolePvpDBData* release_pvp();
  inline void set_allocated_pvp(::proto_ff::RolePvpDBData* pvp);

  // optional .proto_ff.PracticeTrueDBData ptdata = 35;
  inline bool has_ptdata() const;
  inline void clear_ptdata();
  static const int kPtdataFieldNumber = 35;
  inline const ::proto_ff::PracticeTrueDBData& ptdata() const;
  inline ::proto_ff::PracticeTrueDBData* mutable_ptdata();
  inline ::proto_ff::PracticeTrueDBData* release_ptdata();
  inline void set_allocated_ptdata(::proto_ff::PracticeTrueDBData* ptdata);

  // optional .proto_ff.RoleMarryDBData role_marry = 36;
  inline bool has_role_marry() const;
  inline void clear_role_marry();
  static const int kRoleMarryFieldNumber = 36;
  inline const ::proto_ff::RoleMarryDBData& role_marry() const;
  inline ::proto_ff::RoleMarryDBData* mutable_role_marry();
  inline ::proto_ff::RoleMarryDBData* release_role_marry();
  inline void set_allocated_role_marry(::proto_ff::RoleMarryDBData* role_marry);

  // optional .proto_ff.EncylopediaDBData encylopeddia = 37;
  inline bool has_encylopeddia() const;
  inline void clear_encylopeddia();
  static const int kEncylopeddiaFieldNumber = 37;
  inline const ::proto_ff::EncylopediaDBData& encylopeddia() const;
  inline ::proto_ff::EncylopediaDBData* mutable_encylopeddia();
  inline ::proto_ff::EncylopediaDBData* release_encylopeddia();
  inline void set_allocated_encylopeddia(::proto_ff::EncylopediaDBData* encylopeddia);

  // optional .proto_ff.GVBPData gvb_pdata = 38;
  inline bool has_gvb_pdata() const;
  inline void clear_gvb_pdata();
  static const int kGvbPdataFieldNumber = 38;
  inline const ::proto_ff::GVBPData& gvb_pdata() const;
  inline ::proto_ff::GVBPData* mutable_gvb_pdata();
  inline ::proto_ff::GVBPData* release_gvb_pdata();
  inline void set_allocated_gvb_pdata(::proto_ff::GVBPData* gvb_pdata);

  // optional .proto_ff.PSDatas psdatas = 39;
  inline bool has_psdatas() const;
  inline void clear_psdatas();
  static const int kPsdatasFieldNumber = 39;
  inline const ::proto_ff::PSDatas& psdatas() const;
  inline ::proto_ff::PSDatas* mutable_psdatas();
  inline ::proto_ff::PSDatas* release_psdatas();
  inline void set_allocated_psdatas(::proto_ff::PSDatas* psdatas);

  // optional .proto_ff.DragonSoulData dragon_soul = 40;
  inline bool has_dragon_soul() const;
  inline void clear_dragon_soul();
  static const int kDragonSoulFieldNumber = 40;
  inline const ::proto_ff::DragonSoulData& dragon_soul() const;
  inline ::proto_ff::DragonSoulData* mutable_dragon_soul();
  inline ::proto_ff::DragonSoulData* release_dragon_soul();
  inline void set_allocated_dragon_soul(::proto_ff::DragonSoulData* dragon_soul);

  // optional .proto_ff.WelfarePBData welfare = 41;
  inline bool has_welfare() const;
  inline void clear_welfare();
  static const int kWelfareFieldNumber = 41;
  inline const ::proto_ff::WelfarePBData& welfare() const;
  inline ::proto_ff::WelfarePBData* mutable_welfare();
  inline ::proto_ff::WelfarePBData* release_welfare();
  inline void set_allocated_welfare(::proto_ff::WelfarePBData* welfare);

  // optional .proto_ff.DailyWelfarePBData daily_welfare = 42;
  inline bool has_daily_welfare() const;
  inline void clear_daily_welfare();
  static const int kDailyWelfareFieldNumber = 42;
  inline const ::proto_ff::DailyWelfarePBData& daily_welfare() const;
  inline ::proto_ff::DailyWelfarePBData* mutable_daily_welfare();
  inline ::proto_ff::DailyWelfarePBData* release_daily_welfare();
  inline void set_allocated_daily_welfare(::proto_ff::DailyWelfarePBData* daily_welfare);

  // optional .proto_ff.ChargeDBData charge = 43;
  inline bool has_charge() const;
  inline void clear_charge();
  static const int kChargeFieldNumber = 43;
  inline const ::proto_ff::ChargeDBData& charge() const;
  inline ::proto_ff::ChargeDBData* mutable_charge();
  inline ::proto_ff::ChargeDBData* release_charge();
  inline void set_allocated_charge(::proto_ff::ChargeDBData* charge);

  // optional .proto_ff.GiftDBData gift = 44;
  inline bool has_gift() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 44;
  inline const ::proto_ff::GiftDBData& gift() const;
  inline ::proto_ff::GiftDBData* mutable_gift();
  inline ::proto_ff::GiftDBData* release_gift();
  inline void set_allocated_gift(::proto_ff::GiftDBData* gift);

  // optional .proto_ff.FindTreatureDBData find_treature = 45;
  inline bool has_find_treature() const;
  inline void clear_find_treature();
  static const int kFindTreatureFieldNumber = 45;
  inline const ::proto_ff::FindTreatureDBData& find_treature() const;
  inline ::proto_ff::FindTreatureDBData* mutable_find_treature();
  inline ::proto_ff::FindTreatureDBData* release_find_treature();
  inline void set_allocated_find_treature(::proto_ff::FindTreatureDBData* find_treature);

  // optional .proto_ff.FestDBData fest = 46;
  inline bool has_fest() const;
  inline void clear_fest();
  static const int kFestFieldNumber = 46;
  inline const ::proto_ff::FestDBData& fest() const;
  inline ::proto_ff::FestDBData* mutable_fest();
  inline ::proto_ff::FestDBData* release_fest();
  inline void set_allocated_fest(::proto_ff::FestDBData* fest);

  // optional .proto_ff.DragonDBData dragon = 47;
  inline bool has_dragon() const;
  inline void clear_dragon();
  static const int kDragonFieldNumber = 47;
  inline const ::proto_ff::DragonDBData& dragon() const;
  inline ::proto_ff::DragonDBData* mutable_dragon();
  inline ::proto_ff::DragonDBData* release_dragon();
  inline void set_allocated_dragon(::proto_ff::DragonDBData* dragon);

  // optional .proto_ff.StarData star = 48;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 48;
  inline const ::proto_ff::StarData& star() const;
  inline ::proto_ff::StarData* mutable_star();
  inline ::proto_ff::StarData* release_star();
  inline void set_allocated_star(::proto_ff::StarData* star);

  // optional int32 change = 49;
  inline bool has_change() const;
  inline void clear_change();
  static const int kChangeFieldNumber = 49;
  inline ::google::protobuf::int32 change() const;
  inline void set_change(::google::protobuf::int32 value);

  // optional .proto_ff.RoleDBTurnData turn = 50;
  inline bool has_turn() const;
  inline void clear_turn();
  static const int kTurnFieldNumber = 50;
  inline const ::proto_ff::RoleDBTurnData& turn() const;
  inline ::proto_ff::RoleDBTurnData* mutable_turn();
  inline ::proto_ff::RoleDBTurnData* release_turn();
  inline void set_allocated_turn(::proto_ff::RoleDBTurnData* turn);

  // optional .proto_ff.GMADbData gma_datas = 51;
  inline bool has_gma_datas() const;
  inline void clear_gma_datas();
  static const int kGmaDatasFieldNumber = 51;
  inline const ::proto_ff::GMADbData& gma_datas() const;
  inline ::proto_ff::GMADbData* mutable_gma_datas();
  inline ::proto_ff::GMADbData* release_gma_datas();
  inline void set_allocated_gma_datas(::proto_ff::GMADbData* gma_datas);

  // optional .proto_ff.SoulDBData soul = 52;
  inline bool has_soul() const;
  inline void clear_soul();
  static const int kSoulFieldNumber = 52;
  inline const ::proto_ff::SoulDBData& soul() const;
  inline ::proto_ff::SoulDBData* mutable_soul();
  inline ::proto_ff::SoulDBData* release_soul();
  inline void set_allocated_soul(::proto_ff::SoulDBData* soul);

  // optional .proto_ff.MoFaDBData mofa = 53;
  inline bool has_mofa() const;
  inline void clear_mofa();
  static const int kMofaFieldNumber = 53;
  inline const ::proto_ff::MoFaDBData& mofa() const;
  inline ::proto_ff::MoFaDBData* mutable_mofa();
  inline ::proto_ff::MoFaDBData* release_mofa();
  inline void set_allocated_mofa(::proto_ff::MoFaDBData* mofa);

  // optional .proto_ff.RuneDBData rune = 54;
  inline bool has_rune() const;
  inline void clear_rune();
  static const int kRuneFieldNumber = 54;
  inline const ::proto_ff::RuneDBData& rune() const;
  inline ::proto_ff::RuneDBData* mutable_rune();
  inline ::proto_ff::RuneDBData* release_rune();
  inline void set_allocated_rune(::proto_ff::RuneDBData* rune);

  // optional .proto_ff.NGDbDatas ng_datas = 55;
  inline bool has_ng_datas() const;
  inline void clear_ng_datas();
  static const int kNgDatasFieldNumber = 55;
  inline const ::proto_ff::NGDbDatas& ng_datas() const;
  inline ::proto_ff::NGDbDatas* mutable_ng_datas();
  inline ::proto_ff::NGDbDatas* release_ng_datas();
  inline void set_allocated_ng_datas(::proto_ff::NGDbDatas* ng_datas);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBData)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_bag();
  inline void clear_has_bag();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_unlockinfo();
  inline void clear_has_unlockinfo();
  inline void set_has_grow();
  inline void clear_has_grow();
  inline void set_has_mini();
  inline void clear_has_mini();
  inline void set_has_facade();
  inline void clear_has_facade();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_mini_activity();
  inline void clear_has_mini_activity();
  inline void set_has_dup();
  inline void clear_has_dup();
  inline void set_has_buff();
  inline void clear_has_buff();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_mount();
  inline void clear_has_mount();
  inline void set_has_deity();
  inline void clear_has_deity();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_mall();
  inline void clear_has_mall();
  inline void set_has_convoy();
  inline void clear_has_convoy();
  inline void set_has_armor();
  inline void clear_has_armor();
  inline void set_has_assist();
  inline void clear_has_assist();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_godevil();
  inline void clear_has_godevil();
  inline void set_has_occupatoin();
  inline void clear_has_occupatoin();
  inline void set_has_pay();
  inline void clear_has_pay();
  inline void set_has_role_faction();
  inline void clear_has_role_faction();
  inline void set_has_best_equip();
  inline void clear_has_best_equip();
  inline void set_has_achievement();
  inline void clear_has_achievement();
  inline void set_has_ancient();
  inline void clear_has_ancient();
  inline void set_has_pvp();
  inline void clear_has_pvp();
  inline void set_has_ptdata();
  inline void clear_has_ptdata();
  inline void set_has_role_marry();
  inline void clear_has_role_marry();
  inline void set_has_encylopeddia();
  inline void clear_has_encylopeddia();
  inline void set_has_gvb_pdata();
  inline void clear_has_gvb_pdata();
  inline void set_has_psdatas();
  inline void clear_has_psdatas();
  inline void set_has_dragon_soul();
  inline void clear_has_dragon_soul();
  inline void set_has_welfare();
  inline void clear_has_welfare();
  inline void set_has_daily_welfare();
  inline void clear_has_daily_welfare();
  inline void set_has_charge();
  inline void clear_has_charge();
  inline void set_has_gift();
  inline void clear_has_gift();
  inline void set_has_find_treature();
  inline void clear_has_find_treature();
  inline void set_has_fest();
  inline void clear_has_fest();
  inline void set_has_dragon();
  inline void clear_has_dragon();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_change();
  inline void clear_has_change();
  inline void set_has_turn();
  inline void clear_has_turn();
  inline void set_has_gma_datas();
  inline void clear_has_gma_datas();
  inline void set_has_soul();
  inline void clear_has_soul();
  inline void set_has_mofa();
  inline void clear_has_mofa();
  inline void set_has_rune();
  inline void clear_has_rune();
  inline void set_has_ng_datas();
  inline void clear_has_ng_datas();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::RoleDBBaseData* base_;
  ::proto_ff::RoleDBBagData* bag_;
  ::proto_ff::RoleDBEquipData* equip_;
  ::proto_ff::CharacterDBTaskData* task_;
  ::proto_ff::FunctionUnlockInfo* unlockinfo_;
  ::proto_ff::GrowDBData* grow_;
  ::proto_ff::MiniDBData* mini_;
  ::proto_ff::FacadeDBData* facade_;
  ::proto_ff::SkillDBData* skill_;
  ::proto_ff::MiniActivityDBData* mini_activity_;
  ::proto_ff::DupDBData* dup_;
  ::proto_ff::BuffDBData* buff_;
  ::proto_ff::BossDBData* boss_;
  ::proto_ff::VipDBData* vip_;
  ::proto_ff::AttrDBData* attr_;
  ::proto_ff::MountDataInfo* mount_;
  ::proto_ff::DeityDataInfo* deity_;
  ::proto_ff::PetDBData* pet_;
  ::proto_ff::MallDBData* mall_;
  ::proto_ff::ConvoyData* convoy_;
  ::proto_ff::ArmorDBData* armor_;
  ::proto_ff::AssistDBData* assist_;
  ::proto_ff::TitleDBData* title_;
  ::proto_ff::GodEvilDBData* godevil_;
  ::proto_ff::OccupationMissionData* occupatoin_;
  ::proto_ff::PayDBData* pay_;
  ::proto_ff::RoleFactionDBData* role_faction_;
  ::proto_ff::RoleBestEQDBData* best_equip_;
  ::proto_ff::AchievementData* achievement_;
  ::proto_ff::AncientDBData* ancient_;
  ::proto_ff::RolePvpDBData* pvp_;
  ::proto_ff::PracticeTrueDBData* ptdata_;
  ::proto_ff::RoleMarryDBData* role_marry_;
  ::proto_ff::EncylopediaDBData* encylopeddia_;
  ::proto_ff::GVBPData* gvb_pdata_;
  ::proto_ff::PSDatas* psdatas_;
  ::proto_ff::DragonSoulData* dragon_soul_;
  ::proto_ff::WelfarePBData* welfare_;
  ::proto_ff::DailyWelfarePBData* daily_welfare_;
  ::proto_ff::ChargeDBData* charge_;
  ::proto_ff::GiftDBData* gift_;
  ::proto_ff::FindTreatureDBData* find_treature_;
  ::proto_ff::FestDBData* fest_;
  ::proto_ff::DragonDBData* dragon_;
  ::proto_ff::StarData* star_;
  ::proto_ff::RoleDBTurnData* turn_;
  ::proto_ff::GMADbData* gma_datas_;
  ::proto_ff::SoulDBData* soul_;
  ::proto_ff::MoFaDBData* mofa_;
  ::proto_ff::RuneDBData* rune_;
  ::proto_ff::NGDbDatas* ng_datas_;
  ::google::protobuf::int32 change_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(55 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleDBData* default_instance_;
};
// -------------------------------------------------------------------

class RedWaitDBProto : public ::google::protobuf::Message {
 public:
  RedWaitDBProto();
  virtual ~RedWaitDBProto();

  RedWaitDBProto(const RedWaitDBProto& from);

  inline RedWaitDBProto& operator=(const RedWaitDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedWaitDBProto& default_instance();

  void Swap(RedWaitDBProto* other);

  // implements Message ----------------------------------------------

  RedWaitDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedWaitDBProto& from);
  void MergeFrom(const RedWaitDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional int32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::int32 cfgid() const;
  inline void set_cfgid(::google::protobuf::int32 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedWaitDBProto)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::int32 cfgid_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RedWaitDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RedTriggerDBProto : public ::google::protobuf::Message {
 public:
  RedTriggerDBProto();
  virtual ~RedTriggerDBProto();

  RedTriggerDBProto(const RedTriggerDBProto& from);

  inline RedTriggerDBProto& operator=(const RedTriggerDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedTriggerDBProto& default_instance();

  void Swap(RedTriggerDBProto* other);

  // implements Message ----------------------------------------------

  RedTriggerDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedTriggerDBProto& from);
  void MergeFrom(const RedTriggerDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cfgid = 1;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 1;
  inline ::google::protobuf::int32 cfgid() const;
  inline void set_cfgid(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedTriggerDBProto)
 private:
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cfgid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RedTriggerDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RoleRedDBData : public ::google::protobuf::Message {
 public:
  RoleRedDBData();
  virtual ~RoleRedDBData();

  RoleRedDBData(const RoleRedDBData& from);

  inline RoleRedDBData& operator=(const RoleRedDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRedDBData& default_instance();

  void Swap(RoleRedDBData* other);

  // implements Message ----------------------------------------------

  RoleRedDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRedDBData& from);
  void MergeFrom(const RoleRedDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bdia = 1;
  inline bool has_bdia() const;
  inline void clear_bdia();
  static const int kBdiaFieldNumber = 1;
  inline ::google::protobuf::uint32 bdia() const;
  inline void set_bdia(::google::protobuf::uint32 value);

  // optional uint32 magic = 2;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 2;
  inline ::google::protobuf::uint32 magic() const;
  inline void set_magic(::google::protobuf::uint32 value);

  // optional uint32 todaynum = 3;
  inline bool has_todaynum() const;
  inline void clear_todaynum();
  static const int kTodaynumFieldNumber = 3;
  inline ::google::protobuf::uint32 todaynum() const;
  inline void set_todaynum(::google::protobuf::uint32 value);

  // optional uint32 todaymagic = 4;
  inline bool has_todaymagic() const;
  inline void clear_todaymagic();
  static const int kTodaymagicFieldNumber = 4;
  inline ::google::protobuf::uint32 todaymagic() const;
  inline void set_todaymagic(::google::protobuf::uint32 value);

  // optional uint32 todaybdia = 5;
  inline bool has_todaybdia() const;
  inline void clear_todaybdia();
  static const int kTodaybdiaFieldNumber = 5;
  inline ::google::protobuf::uint32 todaybdia() const;
  inline void set_todaybdia(::google::protobuf::uint32 value);

  // optional uint64 freshtime = 6;
  inline bool has_freshtime() const;
  inline void clear_freshtime();
  static const int kFreshtimeFieldNumber = 6;
  inline ::google::protobuf::uint64 freshtime() const;
  inline void set_freshtime(::google::protobuf::uint64 value);

  // repeated int32 send_lst = 7;
  inline int send_lst_size() const;
  inline void clear_send_lst();
  static const int kSendLstFieldNumber = 7;
  inline ::google::protobuf::int32 send_lst(int index) const;
  inline void set_send_lst(int index, ::google::protobuf::int32 value);
  inline void add_send_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      send_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_send_lst();

  // repeated .proto_ff.RedWaitDBProto wait_lst = 8;
  inline int wait_lst_size() const;
  inline void clear_wait_lst();
  static const int kWaitLstFieldNumber = 8;
  inline const ::proto_ff::RedWaitDBProto& wait_lst(int index) const;
  inline ::proto_ff::RedWaitDBProto* mutable_wait_lst(int index);
  inline ::proto_ff::RedWaitDBProto* add_wait_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >&
      wait_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >*
      mutable_wait_lst();

  // optional uint64 cid = 9;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 9;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 10;
  inline int trigger_lst_size() const;
  inline void clear_trigger_lst();
  static const int kTriggerLstFieldNumber = 10;
  inline const ::proto_ff::RedTriggerDBProto& trigger_lst(int index) const;
  inline ::proto_ff::RedTriggerDBProto* mutable_trigger_lst(int index);
  inline ::proto_ff::RedTriggerDBProto* add_trigger_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >&
      trigger_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >*
      mutable_trigger_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.RoleRedDBData)
 private:
  inline void set_has_bdia();
  inline void clear_has_bdia();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_todaynum();
  inline void clear_has_todaynum();
  inline void set_has_todaymagic();
  inline void clear_has_todaymagic();
  inline void set_has_todaybdia();
  inline void clear_has_todaybdia();
  inline void set_has_freshtime();
  inline void clear_has_freshtime();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bdia_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 todaynum_;
  ::google::protobuf::uint32 todaymagic_;
  ::google::protobuf::uint64 freshtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > send_lst_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto > wait_lst_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto > trigger_lst_;
  ::google::protobuf::uint32 todaybdia_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleRedDBData* default_instance_;
};
// -------------------------------------------------------------------

class RedFetchDBProto : public ::google::protobuf::Message {
 public:
  RedFetchDBProto();
  virtual ~RedFetchDBProto();

  RedFetchDBProto(const RedFetchDBProto& from);

  inline RedFetchDBProto& operator=(const RedFetchDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedFetchDBProto& default_instance();

  void Swap(RedFetchDBProto* other);

  // implements Message ----------------------------------------------

  RedFetchDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedFetchDBProto& from);
  void MergeFrom(const RedFetchDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedFetchDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RedFetchDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RedFetchListDBProto : public ::google::protobuf::Message {
 public:
  RedFetchListDBProto();
  virtual ~RedFetchListDBProto();

  RedFetchListDBProto(const RedFetchListDBProto& from);

  inline RedFetchListDBProto& operator=(const RedFetchListDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedFetchListDBProto& default_instance();

  void Swap(RedFetchListDBProto* other);

  // implements Message ----------------------------------------------

  RedFetchListDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedFetchListDBProto& from);
  void MergeFrom(const RedFetchListDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedFetchDBProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RedFetchDBProto& info(int index) const;
  inline ::proto_ff::RedFetchDBProto* mutable_info(int index);
  inline ::proto_ff::RedFetchDBProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchDBProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchDBProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.RedFetchListDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchDBProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RedFetchListDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RedSendDBProto : public ::google::protobuf::Message {
 public:
  RedSendDBProto();
  virtual ~RedSendDBProto();

  RedSendDBProto(const RedSendDBProto& from);

  inline RedSendDBProto& operator=(const RedSendDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedSendDBProto& default_instance();

  void Swap(RedSendDBProto* other);

  // implements Message ----------------------------------------------

  RedSendDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedSendDBProto& from);
  void MergeFrom(const RedSendDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional int32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::int32 cfgid() const;
  inline void set_cfgid(::google::protobuf::int32 value);

  // optional uint64 sender = 3;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 3;
  inline ::google::protobuf::uint64 sender() const;
  inline void set_sender(::google::protobuf::uint64 value);

  // optional uint64 sendtime = 4;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendtimeFieldNumber = 4;
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // optional bytes word = 5;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 5;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // optional int32 finish = 6;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 6;
  inline ::google::protobuf::int32 finish() const;
  inline void set_finish(::google::protobuf::int32 value);

  // optional .proto_ff.RedFetchListDBProto fetch = 7;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 7;
  inline const ::proto_ff::RedFetchListDBProto& fetch() const;
  inline ::proto_ff::RedFetchListDBProto* mutable_fetch();
  inline ::proto_ff::RedFetchListDBProto* release_fetch();
  inline void set_allocated_fetch(::proto_ff::RedFetchListDBProto* fetch);

  // @@protoc_insertion_point(class_scope:proto_ff.RedSendDBProto)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_finish();
  inline void clear_has_finish();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::int32 cfgid_;
  ::google::protobuf::uint64 sender_;
  ::google::protobuf::uint64 sendtime_;
  ::std::string* word_;
  ::proto_ff::RedFetchListDBProto* fetch_;
  ::google::protobuf::int32 finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RedSendDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RedDBData : public ::google::protobuf::Message {
 public:
  RedDBData();
  virtual ~RedDBData();

  RedDBData(const RedDBData& from);

  inline RedDBData& operator=(const RedDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDBData& default_instance();

  void Swap(RedDBData* other);

  // implements Message ----------------------------------------------

  RedDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDBData& from);
  void MergeFrom(const RedDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedWaitDBProto wait = 1;
  inline int wait_size() const;
  inline void clear_wait();
  static const int kWaitFieldNumber = 1;
  inline const ::proto_ff::RedWaitDBProto& wait(int index) const;
  inline ::proto_ff::RedWaitDBProto* mutable_wait(int index);
  inline ::proto_ff::RedWaitDBProto* add_wait();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >&
      wait() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >*
      mutable_wait();

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 2;
  inline int trigger_lst_size() const;
  inline void clear_trigger_lst();
  static const int kTriggerLstFieldNumber = 2;
  inline const ::proto_ff::RedTriggerDBProto& trigger_lst(int index) const;
  inline ::proto_ff::RedTriggerDBProto* mutable_trigger_lst(int index);
  inline ::proto_ff::RedTriggerDBProto* add_trigger_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >&
      trigger_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >*
      mutable_trigger_lst();

  // optional uint64 freshtime = 3;
  inline bool has_freshtime() const;
  inline void clear_freshtime();
  static const int kFreshtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 freshtime() const;
  inline void set_freshtime(::google::protobuf::uint64 value);

  // repeated .proto_ff.RedSendDBProto send = 4;
  inline int send_size() const;
  inline void clear_send();
  static const int kSendFieldNumber = 4;
  inline const ::proto_ff::RedSendDBProto& send(int index) const;
  inline ::proto_ff::RedSendDBProto* mutable_send(int index);
  inline ::proto_ff::RedSendDBProto* add_send();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSendDBProto >&
      send() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSendDBProto >*
      mutable_send();

  // optional uint32 faction_id = 5;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedDBData)
 private:
  inline void set_has_freshtime();
  inline void clear_has_freshtime();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto > wait_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto > trigger_lst_;
  ::google::protobuf::uint64 freshtime_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSendDBProto > send_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RedDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleMirrorData : public ::google::protobuf::Message {
 public:
  RoleMirrorData();
  virtual ~RoleMirrorData();

  RoleMirrorData(const RoleMirrorData& from);

  inline RoleMirrorData& operator=(const RoleMirrorData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleMirrorData& default_instance();

  void Swap(RoleMirrorData* other);

  // implements Message ----------------------------------------------

  RoleMirrorData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleMirrorData& from);
  void MergeFrom(const RoleMirrorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoleMirrorData_Type Type;
  static const Type Role = RoleMirrorData_Type_Role;
  static const Type Rebot = RoleMirrorData_Type_Rebot;
  static const Type TeamRole = RoleMirrorData_Type_TeamRole;
  static const Type TeamRebot = RoleMirrorData_Type_TeamRebot;
  static inline bool Type_IsValid(int value) {
    return RoleMirrorData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RoleMirrorData_Type_Type_MIN;
  static const Type Type_MAX =
    RoleMirrorData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RoleMirrorData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RoleMirrorData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RoleMirrorData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RoleMirrorData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint32 teamid = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 3;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional .proto_ff.AttrDBData attr = 5;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 5;
  inline const ::proto_ff::AttrDBData& attr() const;
  inline ::proto_ff::AttrDBData* mutable_attr();
  inline ::proto_ff::AttrDBData* release_attr();
  inline void set_allocated_attr(::proto_ff::AttrDBData* attr);

  // optional .proto_ff.SkillDBData skill = 6;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 6;
  inline const ::proto_ff::SkillDBData& skill() const;
  inline ::proto_ff::SkillDBData* mutable_skill();
  inline ::proto_ff::SkillDBData* release_skill();
  inline void set_allocated_skill(::proto_ff::SkillDBData* skill);

  // optional .proto_ff.RoleDBBaseData base = 7;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 7;
  inline const ::proto_ff::RoleDBBaseData& base() const;
  inline ::proto_ff::RoleDBBaseData* mutable_base();
  inline ::proto_ff::RoleDBBaseData* release_base();
  inline void set_allocated_base(::proto_ff::RoleDBBaseData* base);

  // optional .proto_ff.RoleDBEquipData equip = 8;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 8;
  inline const ::proto_ff::RoleDBEquipData& equip() const;
  inline ::proto_ff::RoleDBEquipData* mutable_equip();
  inline ::proto_ff::RoleDBEquipData* release_equip();
  inline void set_allocated_equip(::proto_ff::RoleDBEquipData* equip);

  // repeated .proto_ff.BestEQEquipInfo beast_equips = 9;
  inline int beast_equips_size() const;
  inline void clear_beast_equips();
  static const int kBeastEquipsFieldNumber = 9;
  inline const ::proto_ff::BestEQEquipInfo& beast_equips(int index) const;
  inline ::proto_ff::BestEQEquipInfo* mutable_beast_equips(int index);
  inline ::proto_ff::BestEQEquipInfo* add_beast_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQEquipInfo >&
      beast_equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQEquipInfo >*
      mutable_beast_equips();

  // repeated .proto_ff.BestEQSlotInfo beast_slots = 10;
  inline int beast_slots_size() const;
  inline void clear_beast_slots();
  static const int kBeastSlotsFieldNumber = 10;
  inline const ::proto_ff::BestEQSlotInfo& beast_slots(int index) const;
  inline ::proto_ff::BestEQSlotInfo* mutable_beast_slots(int index);
  inline ::proto_ff::BestEQSlotInfo* add_beast_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >&
      beast_slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >*
      mutable_beast_slots();

  // optional int32 campid = 11;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 11;
  inline ::google::protobuf::int32 campid() const;
  inline void set_campid(::google::protobuf::int32 value);

  // optional int32 relive = 12;
  inline bool has_relive() const;
  inline void clear_relive();
  static const int kReliveFieldNumber = 12;
  inline ::google::protobuf::int32 relive() const;
  inline void set_relive(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleMirrorData)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_relive();
  inline void clear_has_relive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 teamid_;
  ::proto_ff::AttrDBData* attr_;
  ::proto_ff::SkillDBData* skill_;
  ::proto_ff::RoleDBBaseData* base_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 campid_;
  ::proto_ff::RoleDBEquipData* equip_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQEquipInfo > beast_equips_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo > beast_slots_;
  ::google::protobuf::int32 relive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleMirrorData* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemDBProto : public ::google::protobuf::Message {
 public:
  FactionMemDBProto();
  virtual ~FactionMemDBProto();

  FactionMemDBProto(const FactionMemDBProto& from);

  inline FactionMemDBProto& operator=(const FactionMemDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemDBProto& default_instance();

  void Swap(FactionMemDBProto* other);

  // implements Message ----------------------------------------------

  FactionMemDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemDBProto& from);
  void MergeFrom(const FactionMemDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 duty = 2;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 2;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional uint64 join_time = 3;
  inline bool has_join_time() const;
  inline void clear_join_time();
  static const int kJoinTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 join_time() const;
  inline void set_join_time(::google::protobuf::uint64 value);

  // optional uint32 total_contri = 4;
  inline bool has_total_contri() const;
  inline void clear_total_contri();
  static const int kTotalContriFieldNumber = 4;
  inline ::google::protobuf::uint32 total_contri() const;
  inline void set_total_contri(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_join_time();
  inline void clear_has_join_time();
  inline void set_has_total_contri();
  inline void clear_has_total_contri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 join_time_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint32 total_contri_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionMemDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMultMemDBProto : public ::google::protobuf::Message {
 public:
  FactionMultMemDBProto();
  virtual ~FactionMultMemDBProto();

  FactionMultMemDBProto(const FactionMultMemDBProto& from);

  inline FactionMultMemDBProto& operator=(const FactionMultMemDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMultMemDBProto& default_instance();

  void Swap(FactionMultMemDBProto* other);

  // implements Message ----------------------------------------------

  FactionMultMemDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMultMemDBProto& from);
  void MergeFrom(const FactionMultMemDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  inline int mem_lst_size() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 1;
  inline const ::proto_ff::FactionMemDBProto& mem_lst(int index) const;
  inline ::proto_ff::FactionMemDBProto* mutable_mem_lst(int index);
  inline ::proto_ff::FactionMemDBProto* add_mem_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemDBProto >&
      mem_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemDBProto >*
      mutable_mem_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMultMemDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemDBProto > mem_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionMultMemDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionApplyDBProto : public ::google::protobuf::Message {
 public:
  FactionApplyDBProto();
  virtual ~FactionApplyDBProto();

  FactionApplyDBProto(const FactionApplyDBProto& from);

  inline FactionApplyDBProto& operator=(const FactionApplyDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionApplyDBProto& default_instance();

  void Swap(FactionApplyDBProto* other);

  // implements Message ----------------------------------------------

  FactionApplyDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionApplyDBProto& from);
  void MergeFrom(const FactionApplyDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionApplyDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionApplyDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMultApplyDBProto : public ::google::protobuf::Message {
 public:
  FactionMultApplyDBProto();
  virtual ~FactionMultApplyDBProto();

  FactionMultApplyDBProto(const FactionMultApplyDBProto& from);

  inline FactionMultApplyDBProto& operator=(const FactionMultApplyDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMultApplyDBProto& default_instance();

  void Swap(FactionMultApplyDBProto* other);

  // implements Message ----------------------------------------------

  FactionMultApplyDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMultApplyDBProto& from);
  void MergeFrom(const FactionMultApplyDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  inline int apply_lst_size() const;
  inline void clear_apply_lst();
  static const int kApplyLstFieldNumber = 1;
  inline const ::proto_ff::FactionApplyDBProto& apply_lst(int index) const;
  inline ::proto_ff::FactionApplyDBProto* mutable_apply_lst(int index);
  inline ::proto_ff::FactionApplyDBProto* add_apply_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyDBProto >&
      apply_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyDBProto >*
      mutable_apply_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMultApplyDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyDBProto > apply_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionMultApplyDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionRecordDBProto : public ::google::protobuf::Message {
 public:
  FactionRecordDBProto();
  virtual ~FactionRecordDBProto();

  FactionRecordDBProto(const FactionRecordDBProto& from);

  inline FactionRecordDBProto& operator=(const FactionRecordDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRecordDBProto& default_instance();

  void Swap(FactionRecordDBProto* other);

  // implements Message ----------------------------------------------

  FactionRecordDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRecordDBProto& from);
  void MergeFrom(const FactionRecordDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional int64 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRecordDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int32 op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionRecordDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMutRecordDBProto : public ::google::protobuf::Message {
 public:
  FactionMutRecordDBProto();
  virtual ~FactionMutRecordDBProto();

  FactionMutRecordDBProto(const FactionMutRecordDBProto& from);

  inline FactionMutRecordDBProto& operator=(const FactionMutRecordDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMutRecordDBProto& default_instance();

  void Swap(FactionMutRecordDBProto* other);

  // implements Message ----------------------------------------------

  FactionMutRecordDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMutRecordDBProto& from);
  void MergeFrom(const FactionMutRecordDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  inline int record_lst_size() const;
  inline void clear_record_lst();
  static const int kRecordLstFieldNumber = 1;
  inline const ::proto_ff::FactionRecordDBProto& record_lst(int index) const;
  inline ::proto_ff::FactionRecordDBProto* mutable_record_lst(int index);
  inline ::proto_ff::FactionRecordDBProto* add_record_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordDBProto >&
      record_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordDBProto >*
      mutable_record_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMutRecordDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordDBProto > record_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionMutRecordDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBBase : public ::google::protobuf::Message {
 public:
  FactionDBBase();
  virtual ~FactionDBBase();

  FactionDBBase(const FactionDBBase& from);

  inline FactionDBBase& operator=(const FactionDBBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBBase& default_instance();

  void Swap(FactionDBBase* other);

  // implements Message ----------------------------------------------

  FactionDBBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBBase& from);
  void MergeFrom(const FactionDBBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 leader_id = 3;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);

  // optional uint64 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional bytes notice = 5;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 5;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 last_notice_time = 6;
  inline bool has_last_notice_time() const;
  inline void clear_last_notice_time();
  static const int kLastNoticeTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 last_notice_time() const;
  inline void set_last_notice_time(::google::protobuf::uint64 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // optional uint64 create_time = 9;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // optional uint64 proxy_id = 10;
  inline bool has_proxy_id() const;
  inline void clear_proxy_id();
  static const int kProxyIdFieldNumber = 10;
  inline ::google::protobuf::uint64 proxy_id() const;
  inline void set_proxy_id(::google::protobuf::uint64 value);

  // optional uint64 proxy_time = 11;
  inline bool has_proxy_time() const;
  inline void clear_proxy_time();
  static const int kProxyTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 proxy_time() const;
  inline void set_proxy_time(::google::protobuf::uint64 value);

  // optional int32 grade = 12;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 12;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional .proto_ff.FactionMultMemDBProto member = 13;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 13;
  inline const ::proto_ff::FactionMultMemDBProto& member() const;
  inline ::proto_ff::FactionMultMemDBProto* mutable_member();
  inline ::proto_ff::FactionMultMemDBProto* release_member();
  inline void set_allocated_member(::proto_ff::FactionMultMemDBProto* member);

  // optional .proto_ff.FactionMultApplyDBProto apply = 14;
  inline bool has_apply() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 14;
  inline const ::proto_ff::FactionMultApplyDBProto& apply() const;
  inline ::proto_ff::FactionMultApplyDBProto* mutable_apply();
  inline ::proto_ff::FactionMultApplyDBProto* release_apply();
  inline void set_allocated_apply(::proto_ff::FactionMultApplyDBProto* apply);

  // optional .proto_ff.FactionMutRecordDBProto record = 15;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 15;
  inline const ::proto_ff::FactionMutRecordDBProto& record() const;
  inline ::proto_ff::FactionMutRecordDBProto* mutable_record();
  inline ::proto_ff::FactionMutRecordDBProto* release_record();
  inline void set_allocated_record(::proto_ff::FactionMutRecordDBProto* record);

  // optional int32 apply_type = 16;
  inline bool has_apply_type() const;
  inline void clear_apply_type();
  static const int kApplyTypeFieldNumber = 16;
  inline ::google::protobuf::int32 apply_type() const;
  inline void set_apply_type(::google::protobuf::int32 value);

  // optional int32 apply_lev = 17;
  inline bool has_apply_lev() const;
  inline void clear_apply_lev();
  static const int kApplyLevFieldNumber = 17;
  inline ::google::protobuf::int32 apply_lev() const;
  inline void set_apply_lev(::google::protobuf::int32 value);

  // optional uint64 apply_fight = 18;
  inline bool has_apply_fight() const;
  inline void clear_apply_fight();
  static const int kApplyFightFieldNumber = 18;
  inline ::google::protobuf::uint64 apply_fight() const;
  inline void set_apply_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBBase)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_last_notice_time();
  inline void clear_has_last_notice_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_proxy_id();
  inline void clear_has_proxy_id();
  inline void set_has_proxy_time();
  inline void clear_has_proxy_time();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_apply();
  inline void clear_has_apply();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_apply_type();
  inline void clear_has_apply_type();
  inline void set_has_apply_lev();
  inline void clear_has_apply_lev();
  inline void set_has_apply_fight();
  inline void clear_has_apply_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 level_;
  ::std::string* notice_;
  ::google::protobuf::uint64 last_notice_time_;
  ::google::protobuf::uint64 exp_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::uint64 proxy_id_;
  ::google::protobuf::uint64 proxy_time_;
  ::proto_ff::FactionMultMemDBProto* member_;
  ::proto_ff::FactionMultApplyDBProto* apply_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 apply_type_;
  ::proto_ff::FactionMutRecordDBProto* record_;
  ::google::protobuf::uint64 apply_fight_;
  ::google::protobuf::int32 apply_lev_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBBase* default_instance_;
};
// -------------------------------------------------------------------

class FactionBeastHarmDBProto : public ::google::protobuf::Message {
 public:
  FactionBeastHarmDBProto();
  virtual ~FactionBeastHarmDBProto();

  FactionBeastHarmDBProto(const FactionBeastHarmDBProto& from);

  inline FactionBeastHarmDBProto& operator=(const FactionBeastHarmDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionBeastHarmDBProto& default_instance();

  void Swap(FactionBeastHarmDBProto* other);

  // implements Message ----------------------------------------------

  FactionBeastHarmDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionBeastHarmDBProto& from);
  void MergeFrom(const FactionBeastHarmDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int64 harm = 2;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 2;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionBeastHarmDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int64 harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionBeastHarmDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionBeastDBData : public ::google::protobuf::Message {
 public:
  FactionBeastDBData();
  virtual ~FactionBeastDBData();

  FactionBeastDBData(const FactionBeastDBData& from);

  inline FactionBeastDBData& operator=(const FactionBeastDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionBeastDBData& default_instance();

  void Swap(FactionBeastDBData* other);

  // implements Message ----------------------------------------------

  FactionBeastDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionBeastDBData& from);
  void MergeFrom(const FactionBeastDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionBeastHarmDBProto harm = 1;
  inline int harm_size() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 1;
  inline const ::proto_ff::FactionBeastHarmDBProto& harm(int index) const;
  inline ::proto_ff::FactionBeastHarmDBProto* mutable_harm(int index);
  inline ::proto_ff::FactionBeastHarmDBProto* add_harm();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastHarmDBProto >&
      harm() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastHarmDBProto >*
      mutable_harm();

  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional int32 is_open = 3;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 3;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);

  // optional uint32 tribute = 4;
  inline bool has_tribute() const;
  inline void clear_tribute();
  static const int kTributeFieldNumber = 4;
  inline ::google::protobuf::uint32 tribute() const;
  inline void set_tribute(::google::protobuf::uint32 value);

  // optional uint32 today_count = 5;
  inline bool has_today_count() const;
  inline void clear_today_count();
  static const int kTodayCountFieldNumber = 5;
  inline ::google::protobuf::uint32 today_count() const;
  inline void set_today_count(::google::protobuf::uint32 value);

  // optional uint64 today_fresh = 6;
  inline bool has_today_fresh() const;
  inline void clear_today_fresh();
  static const int kTodayFreshFieldNumber = 6;
  inline ::google::protobuf::uint64 today_fresh() const;
  inline void set_today_fresh(::google::protobuf::uint64 value);

  // optional uint32 week_count = 7;
  inline bool has_week_count() const;
  inline void clear_week_count();
  static const int kWeekCountFieldNumber = 7;
  inline ::google::protobuf::uint32 week_count() const;
  inline void set_week_count(::google::protobuf::uint32 value);

  // optional uint64 week_fresh = 8;
  inline bool has_week_fresh() const;
  inline void clear_week_fresh();
  static const int kWeekFreshFieldNumber = 8;
  inline ::google::protobuf::uint64 week_fresh() const;
  inline void set_week_fresh(::google::protobuf::uint64 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 opentime = 10;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpentimeFieldNumber = 10;
  inline ::google::protobuf::uint64 opentime() const;
  inline void set_opentime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionBeastDBData)
 private:
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_tribute();
  inline void clear_has_tribute();
  inline void set_has_today_count();
  inline void clear_has_today_count();
  inline void set_has_today_fresh();
  inline void clear_has_today_fresh();
  inline void set_has_week_count();
  inline void clear_has_week_count();
  inline void set_has_week_fresh();
  inline void clear_has_week_fresh();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastHarmDBProto > harm_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::int32 is_open_;
  ::google::protobuf::uint32 tribute_;
  ::google::protobuf::uint32 today_count_;
  ::google::protobuf::uint64 today_fresh_;
  ::google::protobuf::uint64 week_fresh_;
  ::google::protobuf::uint32 week_count_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 opentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionBeastDBData* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardHarmDBProto : public ::google::protobuf::Message {
 public:
  FactionGuardHarmDBProto();
  virtual ~FactionGuardHarmDBProto();

  FactionGuardHarmDBProto(const FactionGuardHarmDBProto& from);

  inline FactionGuardHarmDBProto& operator=(const FactionGuardHarmDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardHarmDBProto& default_instance();

  void Swap(FactionGuardHarmDBProto* other);

  // implements Message ----------------------------------------------

  FactionGuardHarmDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardHarmDBProto& from);
  void MergeFrom(const FactionGuardHarmDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardHarmDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int64 harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardHarmDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardDBData : public ::google::protobuf::Message {
 public:
  FactionGuardDBData();
  virtual ~FactionGuardDBData();

  FactionGuardDBData(const FactionGuardDBData& from);

  inline FactionGuardDBData& operator=(const FactionGuardDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardDBData& default_instance();

  void Swap(FactionGuardDBData* other);

  // implements Message ----------------------------------------------

  FactionGuardDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardDBData& from);
  void MergeFrom(const FactionGuardDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionGuardHarmDBProto harm = 1;
  inline int harm_size() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 1;
  inline const ::proto_ff::FactionGuardHarmDBProto& harm(int index) const;
  inline ::proto_ff::FactionGuardHarmDBProto* mutable_harm(int index);
  inline ::proto_ff::FactionGuardHarmDBProto* add_harm();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >&
      harm() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >*
      mutable_harm();

  // repeated .proto_ff.FactionGuardHarmDBProto old_harm = 2;
  inline int old_harm_size() const;
  inline void clear_old_harm();
  static const int kOldHarmFieldNumber = 2;
  inline const ::proto_ff::FactionGuardHarmDBProto& old_harm(int index) const;
  inline ::proto_ff::FactionGuardHarmDBProto* mutable_old_harm(int index);
  inline ::proto_ff::FactionGuardHarmDBProto* add_old_harm();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >&
      old_harm() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >*
      mutable_old_harm();

  // optional bool can_enter = 3;
  inline bool has_can_enter() const;
  inline void clear_can_enter();
  static const int kCanEnterFieldNumber = 3;
  inline bool can_enter() const;
  inline void set_can_enter(bool value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardDBData)
 private:
  inline void set_has_can_enter();
  inline void clear_has_can_enter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto > harm_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto > old_harm_;
  bool can_enter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardDBData* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyu : public ::google::protobuf::Message {
 public:
  FactionMoyu();
  virtual ~FactionMoyu();

  FactionMoyu(const FactionMoyu& from);

  inline FactionMoyu& operator=(const FactionMoyu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyu& default_instance();

  void Swap(FactionMoyu* other);

  // implements Message ----------------------------------------------

  FactionMoyu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyu& from);
  void MergeFrom(const FactionMoyu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 week_harm = 1;
  inline bool has_week_harm() const;
  inline void clear_week_harm();
  static const int kWeekHarmFieldNumber = 1;
  inline ::google::protobuf::uint64 week_harm() const;
  inline void set_week_harm(::google::protobuf::uint64 value);

  // optional uint64 last_week_harm = 2;
  inline bool has_last_week_harm() const;
  inline void clear_last_week_harm();
  static const int kLastWeekHarmFieldNumber = 2;
  inline ::google::protobuf::uint64 last_week_harm() const;
  inline void set_last_week_harm(::google::protobuf::uint64 value);

  // optional int32 cur_layer = 3;
  inline bool has_cur_layer() const;
  inline void clear_cur_layer();
  static const int kCurLayerFieldNumber = 3;
  inline ::google::protobuf::int32 cur_layer() const;
  inline void set_cur_layer(::google::protobuf::int32 value);

  // optional uint64 cur_hp = 4;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 4;
  inline ::google::protobuf::uint64 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint64 value);

  // optional uint64 max_hp = 5;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 5;
  inline ::google::protobuf::uint64 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint64 value);

  // optional uint64 harm_time = 6;
  inline bool has_harm_time() const;
  inline void clear_harm_time();
  static const int kHarmTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 harm_time() const;
  inline void set_harm_time(::google::protobuf::uint64 value);

  // optional uint64 refresh_time = 7;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint64 value);

  // optional int32 pass_layer = 8;
  inline bool has_pass_layer() const;
  inline void clear_pass_layer();
  static const int kPassLayerFieldNumber = 8;
  inline ::google::protobuf::int32 pass_layer() const;
  inline void set_pass_layer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyu)
 private:
  inline void set_has_week_harm();
  inline void clear_has_week_harm();
  inline void set_has_last_week_harm();
  inline void clear_has_last_week_harm();
  inline void set_has_cur_layer();
  inline void clear_has_cur_layer();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_harm_time();
  inline void clear_has_harm_time();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_pass_layer();
  inline void clear_has_pass_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 week_harm_;
  ::google::protobuf::uint64 last_week_harm_;
  ::google::protobuf::uint64 cur_hp_;
  ::google::protobuf::uint64 max_hp_;
  ::google::protobuf::int32 cur_layer_;
  ::google::protobuf::int32 pass_layer_;
  ::google::protobuf::uint64 harm_time_;
  ::google::protobuf::uint64 refresh_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyu* default_instance_;
};
// -------------------------------------------------------------------

class FactionMagRecordDBData : public ::google::protobuf::Message {
 public:
  FactionMagRecordDBData();
  virtual ~FactionMagRecordDBData();

  FactionMagRecordDBData(const FactionMagRecordDBData& from);

  inline FactionMagRecordDBData& operator=(const FactionMagRecordDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMagRecordDBData& default_instance();

  void Swap(FactionMagRecordDBData* other);

  // implements Message ----------------------------------------------

  FactionMagRecordDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMagRecordDBData& from);
  void MergeFrom(const FactionMagRecordDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mag_id = 1;
  inline bool has_mag_id() const;
  inline void clear_mag_id();
  static const int kMagIdFieldNumber = 1;
  inline ::google::protobuf::int32 mag_id() const;
  inline void set_mag_id(::google::protobuf::int32 value);

  // optional int32 lamp_id = 2;
  inline bool has_lamp_id() const;
  inline void clear_lamp_id();
  static const int kLampIdFieldNumber = 2;
  inline ::google::protobuf::int32 lamp_id() const;
  inline void set_lamp_id(::google::protobuf::int32 value);

  // optional int32 guard_id = 3;
  inline bool has_guard_id() const;
  inline void clear_guard_id();
  static const int kGuardIdFieldNumber = 3;
  inline ::google::protobuf::int32 guard_id() const;
  inline void set_guard_id(::google::protobuf::int32 value);

  // optional int32 reel_id = 4;
  inline bool has_reel_id() const;
  inline void clear_reel_id();
  static const int kReelIdFieldNumber = 4;
  inline ::google::protobuf::int32 reel_id() const;
  inline void set_reel_id(::google::protobuf::int32 value);

  // optional int32 point = 5;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 5;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMagRecordDBData)
 private:
  inline void set_has_mag_id();
  inline void clear_has_mag_id();
  inline void set_has_lamp_id();
  inline void clear_has_lamp_id();
  inline void set_has_guard_id();
  inline void clear_has_guard_id();
  inline void set_has_reel_id();
  inline void clear_has_reel_id();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mag_id_;
  ::google::protobuf::int32 lamp_id_;
  ::google::protobuf::int32 guard_id_;
  ::google::protobuf::int32 reel_id_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionMagRecordDBData* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBData : public ::google::protobuf::Message {
 public:
  FactionDBData();
  virtual ~FactionDBData();

  FactionDBData(const FactionDBData& from);

  inline FactionDBData& operator=(const FactionDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBData& default_instance();

  void Swap(FactionDBData* other);

  // implements Message ----------------------------------------------

  FactionDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBData& from);
  void MergeFrom(const FactionDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionBeastDBData beast = 1;
  inline bool has_beast() const;
  inline void clear_beast();
  static const int kBeastFieldNumber = 1;
  inline const ::proto_ff::FactionBeastDBData& beast() const;
  inline ::proto_ff::FactionBeastDBData* mutable_beast();
  inline ::proto_ff::FactionBeastDBData* release_beast();
  inline void set_allocated_beast(::proto_ff::FactionBeastDBData* beast);

  // optional .proto_ff.FactionGuardDBData guard = 2;
  inline bool has_guard() const;
  inline void clear_guard();
  static const int kGuardFieldNumber = 2;
  inline const ::proto_ff::FactionGuardDBData& guard() const;
  inline ::proto_ff::FactionGuardDBData* mutable_guard();
  inline ::proto_ff::FactionGuardDBData* release_guard();
  inline void set_allocated_guard(::proto_ff::FactionGuardDBData* guard);

  // optional .proto_ff.FactionMoyu moyu = 3;
  inline bool has_moyu() const;
  inline void clear_moyu();
  static const int kMoyuFieldNumber = 3;
  inline const ::proto_ff::FactionMoyu& moyu() const;
  inline ::proto_ff::FactionMoyu* mutable_moyu();
  inline ::proto_ff::FactionMoyu* release_moyu();
  inline void set_allocated_moyu(::proto_ff::FactionMoyu* moyu);

  // optional .proto_ff.FactionMagRecordDBData mag_record = 4;
  inline bool has_mag_record() const;
  inline void clear_mag_record();
  static const int kMagRecordFieldNumber = 4;
  inline const ::proto_ff::FactionMagRecordDBData& mag_record() const;
  inline ::proto_ff::FactionMagRecordDBData* mutable_mag_record();
  inline ::proto_ff::FactionMagRecordDBData* release_mag_record();
  inline void set_allocated_mag_record(::proto_ff::FactionMagRecordDBData* mag_record);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBData)
 private:
  inline void set_has_beast();
  inline void clear_has_beast();
  inline void set_has_guard();
  inline void clear_has_guard();
  inline void set_has_moyu();
  inline void clear_has_moyu();
  inline void set_has_mag_record();
  inline void clear_has_mag_record();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionBeastDBData* beast_;
  ::proto_ff::FactionGuardDBData* guard_;
  ::proto_ff::FactionMoyu* moyu_;
  ::proto_ff::FactionMagRecordDBData* mag_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBData* default_instance_;
};
// -------------------------------------------------------------------

class FactionAllDBData : public ::google::protobuf::Message {
 public:
  FactionAllDBData();
  virtual ~FactionAllDBData();

  FactionAllDBData(const FactionAllDBData& from);

  inline FactionAllDBData& operator=(const FactionAllDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionAllDBData& default_instance();

  void Swap(FactionAllDBData* other);

  // implements Message ----------------------------------------------

  FactionAllDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionAllDBData& from);
  void MergeFrom(const FactionAllDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional .proto_ff.FactionDBBase base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::proto_ff::FactionDBBase& base() const;
  inline ::proto_ff::FactionDBBase* mutable_base();
  inline ::proto_ff::FactionDBBase* release_base();
  inline void set_allocated_base(::proto_ff::FactionDBBase* base);

  // optional .proto_ff.FactionDBData data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::proto_ff::FactionDBData& data() const;
  inline ::proto_ff::FactionDBData* mutable_data();
  inline ::proto_ff::FactionDBData* release_data();
  inline void set_allocated_data(::proto_ff::FactionDBData* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionAllDBData)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionDBBase* base_;
  ::proto_ff::FactionDBData* data_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionAllDBData* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBMoyuRankEntry : public ::google::protobuf::Message {
 public:
  FactionDBMoyuRankEntry();
  virtual ~FactionDBMoyuRankEntry();

  FactionDBMoyuRankEntry(const FactionDBMoyuRankEntry& from);

  inline FactionDBMoyuRankEntry& operator=(const FactionDBMoyuRankEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBMoyuRankEntry& default_instance();

  void Swap(FactionDBMoyuRankEntry* other);

  // implements Message ----------------------------------------------

  FactionDBMoyuRankEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBMoyuRankEntry& from);
  void MergeFrom(const FactionDBMoyuRankEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 harm = 4;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 4;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional uint64 harm_time = 5;
  inline bool has_harm_time() const;
  inline void clear_harm_time();
  static const int kHarmTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 harm_time() const;
  inline void set_harm_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBMoyuRankEntry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_harm_time();
  inline void clear_has_harm_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::uint64 harm_time_;
  ::google::protobuf::int32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBMoyuRankEntry* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBMoyuRank : public ::google::protobuf::Message {
 public:
  FactionDBMoyuRank();
  virtual ~FactionDBMoyuRank();

  FactionDBMoyuRank(const FactionDBMoyuRank& from);

  inline FactionDBMoyuRank& operator=(const FactionDBMoyuRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBMoyuRank& default_instance();

  void Swap(FactionDBMoyuRank* other);

  // implements Message ----------------------------------------------

  FactionDBMoyuRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBMoyuRank& from);
  void MergeFrom(const FactionDBMoyuRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // repeated .proto_ff.FactionDBMoyuRankEntry rank = 3;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline const ::proto_ff::FactionDBMoyuRankEntry& rank(int index) const;
  inline ::proto_ff::FactionDBMoyuRankEntry* mutable_rank(int index);
  inline ::proto_ff::FactionDBMoyuRankEntry* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRankEntry >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRankEntry >*
      mutable_rank();

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBMoyuRank)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRankEntry > rank_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBMoyuRank* default_instance_;
};
// -------------------------------------------------------------------

class FactionDBMoyuRankDB : public ::google::protobuf::Message {
 public:
  FactionDBMoyuRankDB();
  virtual ~FactionDBMoyuRankDB();

  FactionDBMoyuRankDB(const FactionDBMoyuRankDB& from);

  inline FactionDBMoyuRankDB& operator=(const FactionDBMoyuRankDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDBMoyuRankDB& default_instance();

  void Swap(FactionDBMoyuRankDB* other);

  // implements Message ----------------------------------------------

  FactionDBMoyuRankDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDBMoyuRankDB& from);
  void MergeFrom(const FactionDBMoyuRankDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionDBMoyuRank infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::proto_ff::FactionDBMoyuRank& infos(int index) const;
  inline ::proto_ff::FactionDBMoyuRank* mutable_infos(int index);
  inline ::proto_ff::FactionDBMoyuRank* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRank >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRank >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDBMoyuRankDB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRank > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDBMoyuRankDB* default_instance_;
};
// -------------------------------------------------------------------

class RoleListDBReq : public ::google::protobuf::Message {
 public:
  RoleListDBReq();
  virtual ~RoleListDBReq();

  RoleListDBReq(const RoleListDBReq& from);

  inline RoleListDBReq& operator=(const RoleListDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleListDBReq& default_instance();

  void Swap(RoleListDBReq* other);

  // implements Message ----------------------------------------------

  RoleListDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleListDBReq& from);
  void MergeFrom(const RoleListDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 reqid = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 1;
  inline ::google::protobuf::uint64 reqid() const;
  inline void set_reqid(::google::protobuf::uint64 value);

  // required uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 gateid = 3;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 3;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 born_zid = 4;
  inline bool has_born_zid() const;
  inline void clear_born_zid();
  static const int kBornZidFieldNumber = 4;
  inline ::google::protobuf::uint32 born_zid() const;
  inline void set_born_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleListDBReq)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_born_zid();
  inline void clear_has_born_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 born_zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleListDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleListDBRsp : public ::google::protobuf::Message {
 public:
  RoleListDBRsp();
  virtual ~RoleListDBRsp();

  RoleListDBRsp(const RoleListDBRsp& from);

  inline RoleListDBRsp& operator=(const RoleListDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleListDBRsp& default_instance();

  void Swap(RoleListDBRsp* other);

  // implements Message ----------------------------------------------

  RoleListDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleListDBRsp& from);
  void MergeFrom(const RoleListDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 reqid = 2;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 2;
  inline ::google::protobuf::uint64 reqid() const;
  inline void set_reqid(::google::protobuf::uint64 value);

  // required uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 gateid = 4;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 4;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  inline int role_lst_size() const;
  inline void clear_role_lst();
  static const int kRoleLstFieldNumber = 5;
  inline const ::proto_ff::RoleListDBProto& role_lst(int index) const;
  inline ::proto_ff::RoleListDBProto* mutable_role_lst(int index);
  inline ::proto_ff::RoleListDBProto* add_role_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleListDBProto >&
      role_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleListDBProto >*
      mutable_role_lst();

  // optional uint32 regnum = 6;
  inline bool has_regnum() const;
  inline void clear_regnum();
  static const int kRegnumFieldNumber = 6;
  inline ::google::protobuf::uint32 regnum() const;
  inline void set_regnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleListDBRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_regnum();
  inline void clear_has_regnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleListDBProto > role_lst_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 regnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleListDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoleDBReq : public ::google::protobuf::Message {
 public:
  CreateRoleDBReq();
  virtual ~CreateRoleDBReq();

  CreateRoleDBReq(const CreateRoleDBReq& from);

  inline CreateRoleDBReq& operator=(const CreateRoleDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleDBReq& default_instance();

  void Swap(CreateRoleDBReq* other);

  // implements Message ----------------------------------------------

  CreateRoleDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoleDBReq& from);
  void MergeFrom(const CreateRoleDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 reqid = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 1;
  inline ::google::protobuf::uint64 reqid() const;
  inline void set_reqid(::google::protobuf::uint64 value);

  // required uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required uint32 gateid = 3;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 3;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required .proto_ff.RoleDBData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::proto_ff::RoleDBData& data() const;
  inline ::proto_ff::RoleDBData* mutable_data();
  inline ::proto_ff::RoleDBData* release_data();
  inline void set_allocated_data(::proto_ff::RoleDBData* data);

  // optional uint32 uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 6;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 6;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional uint32 zone_mid = 7;
  inline bool has_zone_mid() const;
  inline void clear_zone_mid();
  static const int kZoneMidFieldNumber = 7;
  inline ::google::protobuf::uint32 zone_mid() const;
  inline void set_zone_mid(::google::protobuf::uint32 value);

  // optional uint32 born_zid = 8;
  inline bool has_born_zid() const;
  inline void clear_born_zid();
  static const int kBornZidFieldNumber = 8;
  inline ::google::protobuf::uint32 born_zid() const;
  inline void set_born_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CreateRoleDBReq)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_zone_mid();
  inline void clear_has_zone_mid();
  inline void set_has_born_zid();
  inline void clear_has_born_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 gateid_;
  ::proto_ff::RoleDBData* data_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 zone_mid_;
  ::google::protobuf::uint32 born_zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleDBReq* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoleDBRsp : public ::google::protobuf::Message {
 public:
  CreateRoleDBRsp();
  virtual ~CreateRoleDBRsp();

  CreateRoleDBRsp(const CreateRoleDBRsp& from);

  inline CreateRoleDBRsp& operator=(const CreateRoleDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleDBRsp& default_instance();

  void Swap(CreateRoleDBRsp* other);

  // implements Message ----------------------------------------------

  CreateRoleDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoleDBRsp& from);
  void MergeFrom(const CreateRoleDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 reqid = 2;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 2;
  inline ::google::protobuf::uint64 reqid() const;
  inline void set_reqid(::google::protobuf::uint64 value);

  // required uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 gateid = 4;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 4;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleListDBProto info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::proto_ff::RoleListDBProto& info() const;
  inline ::proto_ff::RoleListDBProto* mutable_info();
  inline ::proto_ff::RoleListDBProto* release_info();
  inline void set_allocated_info(::proto_ff::RoleListDBProto* info);

  // optional uint32 born_zid = 6;
  inline bool has_born_zid() const;
  inline void clear_born_zid();
  static const int kBornZidFieldNumber = 6;
  inline ::google::protobuf::uint32 born_zid() const;
  inline void set_born_zid(::google::protobuf::uint32 value);

  // optional .proto_ff.CenterRoleProto simple = 7;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 7;
  inline const ::proto_ff::CenterRoleProto& simple() const;
  inline ::proto_ff::CenterRoleProto* mutable_simple();
  inline ::proto_ff::CenterRoleProto* release_simple();
  inline void set_allocated_simple(::proto_ff::CenterRoleProto* simple);

  // @@protoc_insertion_point(class_scope:proto_ff.CreateRoleDBRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_born_zid();
  inline void clear_has_born_zid();
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::RoleListDBProto* info_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 born_zid_;
  ::proto_ff::CenterRoleProto* simple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class RoleInfoDBReq : public ::google::protobuf::Message {
 public:
  RoleInfoDBReq();
  virtual ~RoleInfoDBReq();

  RoleInfoDBReq(const RoleInfoDBReq& from);

  inline RoleInfoDBReq& operator=(const RoleInfoDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfoDBReq& default_instance();

  void Swap(RoleInfoDBReq* other);

  // implements Message ----------------------------------------------

  RoleInfoDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfoDBReq& from);
  void MergeFrom(const RoleInfoDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 reqid = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 1;
  inline ::google::protobuf::uint64 reqid() const;
  inline void set_reqid(::google::protobuf::uint64 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 change = 3;
  inline bool has_change() const;
  inline void clear_change();
  static const int kChangeFieldNumber = 3;
  inline ::google::protobuf::int32 change() const;
  inline void set_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleInfoDBReq)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_change();
  inline void clear_has_change();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 change_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleInfoDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleInfoDBRsp : public ::google::protobuf::Message {
 public:
  RoleInfoDBRsp();
  virtual ~RoleInfoDBRsp();

  RoleInfoDBRsp(const RoleInfoDBRsp& from);

  inline RoleInfoDBRsp& operator=(const RoleInfoDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfoDBRsp& default_instance();

  void Swap(RoleInfoDBRsp* other);

  // implements Message ----------------------------------------------

  RoleInfoDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfoDBRsp& from);
  void MergeFrom(const RoleInfoDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 reqid = 2;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 2;
  inline ::google::protobuf::uint64 reqid() const;
  inline void set_reqid(::google::protobuf::uint64 value);

  // required uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 change = 4;
  inline bool has_change() const;
  inline void clear_change();
  static const int kChangeFieldNumber = 4;
  inline ::google::protobuf::int32 change() const;
  inline void set_change(::google::protobuf::int32 value);

  // optional .proto_ff.RoleDBData info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::proto_ff::RoleDBData& info() const;
  inline ::proto_ff::RoleDBData* mutable_info();
  inline ::proto_ff::RoleDBData* release_info();
  inline void set_allocated_info(::proto_ff::RoleDBData* info);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleInfoDBRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_change();
  inline void clear_has_change();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 change_;
  ::google::protobuf::uint64 cid_;
  ::proto_ff::RoleDBData* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleInfoDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class RoleInfoUpdateDBReq : public ::google::protobuf::Message {
 public:
  RoleInfoUpdateDBReq();
  virtual ~RoleInfoUpdateDBReq();

  RoleInfoUpdateDBReq(const RoleInfoUpdateDBReq& from);

  inline RoleInfoUpdateDBReq& operator=(const RoleInfoUpdateDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfoUpdateDBReq& default_instance();

  void Swap(RoleInfoUpdateDBReq* other);

  // implements Message ----------------------------------------------

  RoleInfoUpdateDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfoUpdateDBReq& from);
  void MergeFrom(const RoleInfoUpdateDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleDBData info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::proto_ff::RoleDBData& info() const;
  inline ::proto_ff::RoleDBData* mutable_info();
  inline ::proto_ff::RoleDBData* release_info();
  inline void set_allocated_info(::proto_ff::RoleDBData* info);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleInfoUpdateDBReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::proto_ff::RoleDBData* info_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleInfoUpdateDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleChgNameDBReq : public ::google::protobuf::Message {
 public:
  RoleChgNameDBReq();
  virtual ~RoleChgNameDBReq();

  RoleChgNameDBReq(const RoleChgNameDBReq& from);

  inline RoleChgNameDBReq& operator=(const RoleChgNameDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleChgNameDBReq& default_instance();

  void Swap(RoleChgNameDBReq* other);

  // implements Message ----------------------------------------------

  RoleChgNameDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleChgNameDBReq& from);
  void MergeFrom(const RoleChgNameDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleChgNameDBReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleChgNameDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleChgNameDBRsp : public ::google::protobuf::Message {
 public:
  RoleChgNameDBRsp();
  virtual ~RoleChgNameDBRsp();

  RoleChgNameDBRsp(const RoleChgNameDBRsp& from);

  inline RoleChgNameDBRsp& operator=(const RoleChgNameDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleChgNameDBRsp& default_instance();

  void Swap(RoleChgNameDBRsp* other);

  // implements Message ----------------------------------------------

  RoleChgNameDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleChgNameDBRsp& from);
  void MergeFrom(const RoleChgNameDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleChgNameDBRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleChgNameDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class RoleSimpleListDBReq : public ::google::protobuf::Message {
 public:
  RoleSimpleListDBReq();
  virtual ~RoleSimpleListDBReq();

  RoleSimpleListDBReq(const RoleSimpleListDBReq& from);

  inline RoleSimpleListDBReq& operator=(const RoleSimpleListDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSimpleListDBReq& default_instance();

  void Swap(RoleSimpleListDBReq* other);

  // implements Message ----------------------------------------------

  RoleSimpleListDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSimpleListDBReq& from);
  void MergeFrom(const RoleSimpleListDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.RoleSimpleListDBReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleSimpleListDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleSimpleListDBRsp : public ::google::protobuf::Message {
 public:
  RoleSimpleListDBRsp();
  virtual ~RoleSimpleListDBRsp();

  RoleSimpleListDBRsp(const RoleSimpleListDBRsp& from);

  inline RoleSimpleListDBRsp& operator=(const RoleSimpleListDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSimpleListDBRsp& default_instance();

  void Swap(RoleSimpleListDBRsp* other);

  // implements Message ----------------------------------------------

  RoleSimpleListDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSimpleListDBRsp& from);
  void MergeFrom(const RoleSimpleListDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .proto_ff.CenterRoleProto info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::CenterRoleProto& info(int index) const;
  inline ::proto_ff::CenterRoleProto* mutable_info(int index);
  inline ::proto_ff::CenterRoleProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CenterRoleProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CenterRoleProto >*
      mutable_info();

  // optional int32 finish_flag = 3;
  inline bool has_finish_flag() const;
  inline void clear_finish_flag();
  static const int kFinishFlagFieldNumber = 3;
  inline ::google::protobuf::int32 finish_flag() const;
  inline void set_finish_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleSimpleListDBRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_finish_flag();
  inline void clear_has_finish_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::CenterRoleProto > info_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 finish_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleSimpleListDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class CreatureTransLogicDBReq : public ::google::protobuf::Message {
 public:
  CreatureTransLogicDBReq();
  virtual ~CreatureTransLogicDBReq();

  CreatureTransLogicDBReq(const CreatureTransLogicDBReq& from);

  inline CreatureTransLogicDBReq& operator=(const CreatureTransLogicDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureTransLogicDBReq& default_instance();

  void Swap(CreatureTransLogicDBReq* other);

  // implements Message ----------------------------------------------

  CreatureTransLogicDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureTransLogicDBReq& from);
  void MergeFrom(const CreatureTransLogicDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes trans_data = 1;
  inline bool has_trans_data() const;
  inline void clear_trans_data();
  static const int kTransDataFieldNumber = 1;
  inline const ::std::string& trans_data() const;
  inline void set_trans_data(const ::std::string& value);
  inline void set_trans_data(const char* value);
  inline void set_trans_data(const void* value, size_t size);
  inline ::std::string* mutable_trans_data();
  inline ::std::string* release_trans_data();
  inline void set_allocated_trans_data(::std::string* trans_data);

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureTransLogicDBReq)
 private:
  inline void set_has_trans_data();
  inline void clear_has_trans_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* trans_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CreatureTransLogicDBReq* default_instance_;
};
// -------------------------------------------------------------------

class CreatureTransLogicDBRsp : public ::google::protobuf::Message {
 public:
  CreatureTransLogicDBRsp();
  virtual ~CreatureTransLogicDBRsp();

  CreatureTransLogicDBRsp(const CreatureTransLogicDBRsp& from);

  inline CreatureTransLogicDBRsp& operator=(const CreatureTransLogicDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureTransLogicDBRsp& default_instance();

  void Swap(CreatureTransLogicDBRsp* other);

  // implements Message ----------------------------------------------

  CreatureTransLogicDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureTransLogicDBRsp& from);
  void MergeFrom(const CreatureTransLogicDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureTransLogicDBRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CreatureTransLogicDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class NewMailDBInfo : public ::google::protobuf::Message {
 public:
  NewMailDBInfo();
  virtual ~NewMailDBInfo();

  NewMailDBInfo(const NewMailDBInfo& from);

  inline NewMailDBInfo& operator=(const NewMailDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMailDBInfo& default_instance();

  void Swap(NewMailDBInfo* other);

  // implements Message ----------------------------------------------

  NewMailDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewMailDBInfo& from);
  void MergeFrom(const NewMailDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.MailInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::MailInfo& data(int index) const;
  inline ::proto_ff::MailInfo* mutable_data(int index);
  inline ::proto_ff::MailInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >*
      mutable_data();

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NewMailDBInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo > data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static NewMailDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class MailDBOperateInfo : public ::google::protobuf::Message {
 public:
  MailDBOperateInfo();
  virtual ~MailDBOperateInfo();

  MailDBOperateInfo(const MailDBOperateInfo& from);

  inline MailDBOperateInfo& operator=(const MailDBOperateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailDBOperateInfo& default_instance();

  void Swap(MailDBOperateInfo* other);

  // implements Message ----------------------------------------------

  MailDBOperateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailDBOperateInfo& from);
  void MergeFrom(const MailDBOperateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 mid_lst = 1;
  inline int mid_lst_size() const;
  inline void clear_mid_lst();
  static const int kMidLstFieldNumber = 1;
  inline ::google::protobuf::uint32 mid_lst(int index) const;
  inline void set_mid_lst(int index, ::google::protobuf::uint32 value);
  inline void add_mid_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mid_lst();

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MailDBOperateInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mid_lst_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MailDBOperateInfo* default_instance_;
};
// -------------------------------------------------------------------

class SaveMailDBReq : public ::google::protobuf::Message {
 public:
  SaveMailDBReq();
  virtual ~SaveMailDBReq();

  SaveMailDBReq(const SaveMailDBReq& from);

  inline SaveMailDBReq& operator=(const SaveMailDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveMailDBReq& default_instance();

  void Swap(SaveMailDBReq* other);

  // implements Message ----------------------------------------------

  SaveMailDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveMailDBReq& from);
  void MergeFrom(const SaveMailDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .proto_ff.NewMailDBInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::NewMailDBInfo& info() const;
  inline ::proto_ff::NewMailDBInfo* mutable_info();
  inline ::proto_ff::NewMailDBInfo* release_info();
  inline void set_allocated_info(::proto_ff::NewMailDBInfo* info);

  // optional .proto_ff.MailDBOperateInfo del = 3;
  inline bool has_del() const;
  inline void clear_del();
  static const int kDelFieldNumber = 3;
  inline const ::proto_ff::MailDBOperateInfo& del() const;
  inline ::proto_ff::MailDBOperateInfo* mutable_del();
  inline ::proto_ff::MailDBOperateInfo* release_del();
  inline void set_allocated_del(::proto_ff::MailDBOperateInfo* del);

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 4;
  inline const ::proto_ff::MailDBOperateInfo& fetch() const;
  inline ::proto_ff::MailDBOperateInfo* mutable_fetch();
  inline ::proto_ff::MailDBOperateInfo* release_fetch();
  inline void set_allocated_fetch(::proto_ff::MailDBOperateInfo* fetch);

  // optional .proto_ff.MailDBOperateInfo read = 5;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 5;
  inline const ::proto_ff::MailDBOperateInfo& read() const;
  inline ::proto_ff::MailDBOperateInfo* mutable_read();
  inline ::proto_ff::MailDBOperateInfo* release_read();
  inline void set_allocated_read(::proto_ff::MailDBOperateInfo* read);

  // optional int32 notify = 6;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 6;
  inline ::google::protobuf::int32 notify() const;
  inline void set_notify(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SaveMailDBReq)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_del();
  inline void clear_has_del();
  inline void set_has_fetch();
  inline void clear_has_fetch();
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_notify();
  inline void clear_has_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::proto_ff::NewMailDBInfo* info_;
  ::proto_ff::MailDBOperateInfo* del_;
  ::proto_ff::MailDBOperateInfo* fetch_;
  ::proto_ff::MailDBOperateInfo* read_;
  ::google::protobuf::int32 notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SaveMailDBReq* default_instance_;
};
// -------------------------------------------------------------------

class SaveMailDBRsp : public ::google::protobuf::Message {
 public:
  SaveMailDBRsp();
  virtual ~SaveMailDBRsp();

  SaveMailDBRsp(const SaveMailDBRsp& from);

  inline SaveMailDBRsp& operator=(const SaveMailDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveMailDBRsp& default_instance();

  void Swap(SaveMailDBRsp* other);

  // implements Message ----------------------------------------------

  SaveMailDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveMailDBRsp& from);
  void MergeFrom(const SaveMailDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .proto_ff.NewMailDBInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::NewMailDBInfo& info() const;
  inline ::proto_ff::NewMailDBInfo* mutable_info();
  inline ::proto_ff::NewMailDBInfo* release_info();
  inline void set_allocated_info(::proto_ff::NewMailDBInfo* info);

  // optional .proto_ff.MailDBOperateInfo del = 3;
  inline bool has_del() const;
  inline void clear_del();
  static const int kDelFieldNumber = 3;
  inline const ::proto_ff::MailDBOperateInfo& del() const;
  inline ::proto_ff::MailDBOperateInfo* mutable_del();
  inline ::proto_ff::MailDBOperateInfo* release_del();
  inline void set_allocated_del(::proto_ff::MailDBOperateInfo* del);

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 4;
  inline const ::proto_ff::MailDBOperateInfo& fetch() const;
  inline ::proto_ff::MailDBOperateInfo* mutable_fetch();
  inline ::proto_ff::MailDBOperateInfo* release_fetch();
  inline void set_allocated_fetch(::proto_ff::MailDBOperateInfo* fetch);

  // optional .proto_ff.MailDBOperateInfo read = 5;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 5;
  inline const ::proto_ff::MailDBOperateInfo& read() const;
  inline ::proto_ff::MailDBOperateInfo* mutable_read();
  inline ::proto_ff::MailDBOperateInfo* release_read();
  inline void set_allocated_read(::proto_ff::MailDBOperateInfo* read);

  // optional int32 notify = 6;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 6;
  inline ::google::protobuf::int32 notify() const;
  inline void set_notify(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SaveMailDBRsp)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_del();
  inline void clear_has_del();
  inline void set_has_fetch();
  inline void clear_has_fetch();
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_notify();
  inline void clear_has_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::proto_ff::NewMailDBInfo* info_;
  ::proto_ff::MailDBOperateInfo* del_;
  ::proto_ff::MailDBOperateInfo* fetch_;
  ::proto_ff::MailDBOperateInfo* read_;
  ::google::protobuf::int32 notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SaveMailDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMailDBRequest : public ::google::protobuf::Message {
 public:
  CharacterMailDBRequest();
  virtual ~CharacterMailDBRequest();

  CharacterMailDBRequest(const CharacterMailDBRequest& from);

  inline CharacterMailDBRequest& operator=(const CharacterMailDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMailDBRequest& default_instance();

  void Swap(CharacterMailDBRequest* other);

  // implements Message ----------------------------------------------

  CharacterMailDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMailDBRequest& from);
  void MergeFrom(const CharacterMailDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zone_mail_flag = 2;
  inline bool has_zone_mail_flag() const;
  inline void clear_zone_mail_flag();
  static const int kZoneMailFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_mail_flag() const;
  inline void set_zone_mail_flag(::google::protobuf::uint32 value);

  // optional int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional uint32 reqid = 4;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 4;
  inline ::google::protobuf::uint32 reqid() const;
  inline void set_reqid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CharacterMailDBRequest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zone_mail_flag();
  inline void clear_has_zone_mail_flag();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_reqid();
  inline void clear_has_reqid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zone_mail_flag_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::uint32 reqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CharacterMailDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMailDBResponse : public ::google::protobuf::Message {
 public:
  CharacterMailDBResponse();
  virtual ~CharacterMailDBResponse();

  CharacterMailDBResponse(const CharacterMailDBResponse& from);

  inline CharacterMailDBResponse& operator=(const CharacterMailDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMailDBResponse& default_instance();

  void Swap(CharacterMailDBResponse* other);

  // implements Message ----------------------------------------------

  CharacterMailDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMailDBResponse& from);
  void MergeFrom(const CharacterMailDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .proto_ff.MailInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::MailInfo& info(int index) const;
  inline ::proto_ff::MailInfo* mutable_info(int index);
  inline ::proto_ff::MailInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >*
      mutable_info();

  // optional uint32 zoneMailId = 3;
  inline bool has_zonemailid() const;
  inline void clear_zonemailid();
  static const int kZoneMailIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zonemailid() const;
  inline void set_zonemailid(::google::protobuf::uint32 value);

  // optional int32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional uint32 reqid = 5;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 5;
  inline ::google::protobuf::uint32 reqid() const;
  inline void set_reqid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CharacterMailDBResponse)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zonemailid();
  inline void clear_has_zonemailid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_reqid();
  inline void clear_has_reqid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo > info_;
  ::google::protobuf::uint32 zonemailid_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::uint32 reqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CharacterMailDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class MaxMailIDRequest : public ::google::protobuf::Message {
 public:
  MaxMailIDRequest();
  virtual ~MaxMailIDRequest();

  MaxMailIDRequest(const MaxMailIDRequest& from);

  inline MaxMailIDRequest& operator=(const MaxMailIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxMailIDRequest& default_instance();

  void Swap(MaxMailIDRequest* other);

  // implements Message ----------------------------------------------

  MaxMailIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxMailIDRequest& from);
  void MergeFrom(const MaxMailIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.MaxMailIDRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MaxMailIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class MaxMailIDResponse : public ::google::protobuf::Message {
 public:
  MaxMailIDResponse();
  virtual ~MaxMailIDResponse();

  MaxMailIDResponse(const MaxMailIDResponse& from);

  inline MaxMailIDResponse& operator=(const MaxMailIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxMailIDResponse& default_instance();

  void Swap(MaxMailIDResponse* other);

  // implements Message ----------------------------------------------

  MaxMailIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxMailIDResponse& from);
  void MergeFrom(const MaxMailIDResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 maxZoneMailId = 1;
  inline bool has_maxzonemailid() const;
  inline void clear_maxzonemailid();
  static const int kMaxZoneMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 maxzonemailid() const;
  inline void set_maxzonemailid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MaxMailIDResponse)
 private:
  inline void set_has_maxzonemailid();
  inline void clear_has_maxzonemailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 maxzonemailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MaxMailIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCharacterMail : public ::google::protobuf::Message {
 public:
  DeleteCharacterMail();
  virtual ~DeleteCharacterMail();

  DeleteCharacterMail(const DeleteCharacterMail& from);

  inline DeleteCharacterMail& operator=(const DeleteCharacterMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCharacterMail& default_instance();

  void Swap(DeleteCharacterMail* other);

  // implements Message ----------------------------------------------

  DeleteCharacterMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCharacterMail& from);
  void MergeFrom(const DeleteCharacterMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DeleteCharacterMail)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DeleteCharacterMail* default_instance_;
};
// -------------------------------------------------------------------

class ZoneMailSaveRsp : public ::google::protobuf::Message {
 public:
  ZoneMailSaveRsp();
  virtual ~ZoneMailSaveRsp();

  ZoneMailSaveRsp(const ZoneMailSaveRsp& from);

  inline ZoneMailSaveRsp& operator=(const ZoneMailSaveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneMailSaveRsp& default_instance();

  void Swap(ZoneMailSaveRsp* other);

  // implements Message ----------------------------------------------

  ZoneMailSaveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneMailSaveRsp& from);
  void MergeFrom(const ZoneMailSaveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ZoneMailSaveRsp)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ZoneMailSaveRsp* default_instance_;
};
// -------------------------------------------------------------------

class ZoneMailTransCharacterMailReq : public ::google::protobuf::Message {
 public:
  ZoneMailTransCharacterMailReq();
  virtual ~ZoneMailTransCharacterMailReq();

  ZoneMailTransCharacterMailReq(const ZoneMailTransCharacterMailReq& from);

  inline ZoneMailTransCharacterMailReq& operator=(const ZoneMailTransCharacterMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneMailTransCharacterMailReq& default_instance();

  void Swap(ZoneMailTransCharacterMailReq* other);

  // implements Message ----------------------------------------------

  ZoneMailTransCharacterMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneMailTransCharacterMailReq& from);
  void MergeFrom(const ZoneMailTransCharacterMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint64 createtime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 3;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ZoneMailTransCharacterMailReq)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint32 mailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ZoneMailTransCharacterMailReq* default_instance_;
};
// -------------------------------------------------------------------

class ZoneMailTransCharacterMailRsp : public ::google::protobuf::Message {
 public:
  ZoneMailTransCharacterMailRsp();
  virtual ~ZoneMailTransCharacterMailRsp();

  ZoneMailTransCharacterMailRsp(const ZoneMailTransCharacterMailRsp& from);

  inline ZoneMailTransCharacterMailRsp& operator=(const ZoneMailTransCharacterMailRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneMailTransCharacterMailRsp& default_instance();

  void Swap(ZoneMailTransCharacterMailRsp* other);

  // implements Message ----------------------------------------------

  ZoneMailTransCharacterMailRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneMailTransCharacterMailRsp& from);
  void MergeFrom(const ZoneMailTransCharacterMailRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // repeated .proto_ff.MailInfo data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto_ff::MailInfo& data(int index) const;
  inline ::proto_ff::MailInfo* mutable_data(int index);
  inline ::proto_ff::MailInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >*
      mutable_data();

  // required uint32 max_zone_mailid = 3;
  inline bool has_max_zone_mailid() const;
  inline void clear_max_zone_mailid();
  static const int kMaxZoneMailidFieldNumber = 3;
  inline ::google::protobuf::uint32 max_zone_mailid() const;
  inline void set_max_zone_mailid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ZoneMailTransCharacterMailRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_max_zone_mailid();
  inline void clear_has_max_zone_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo > data_;
  ::google::protobuf::uint32 max_zone_mailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ZoneMailTransCharacterMailRsp* default_instance_;
};
// -------------------------------------------------------------------

class WebMailDBDataReq : public ::google::protobuf::Message {
 public:
  WebMailDBDataReq();
  virtual ~WebMailDBDataReq();

  WebMailDBDataReq(const WebMailDBDataReq& from);

  inline WebMailDBDataReq& operator=(const WebMailDBDataReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebMailDBDataReq& default_instance();

  void Swap(WebMailDBDataReq* other);

  // implements Message ----------------------------------------------

  WebMailDBDataReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebMailDBDataReq& from);
  void MergeFrom(const WebMailDBDataReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 pernum = 3;
  inline bool has_pernum() const;
  inline void clear_pernum();
  static const int kPernumFieldNumber = 3;
  inline ::google::protobuf::uint32 pernum() const;
  inline void set_pernum(::google::protobuf::uint32 value);

  // optional uint32 curpage = 4;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurpageFieldNumber = 4;
  inline ::google::protobuf::uint32 curpage() const;
  inline void set_curpage(::google::protobuf::uint32 value);

  // repeated uint32 id_lst = 5;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 5;
  inline ::google::protobuf::uint32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::uint32 value);
  inline void add_id_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_lst();

  // required bytes webId = 6;
  inline bool has_webid() const;
  inline void clear_webid();
  static const int kWebIdFieldNumber = 6;
  inline const ::std::string& webid() const;
  inline void set_webid(const ::std::string& value);
  inline void set_webid(const char* value);
  inline void set_webid(const void* value, size_t size);
  inline ::std::string* mutable_webid();
  inline ::std::string* release_webid();
  inline void set_allocated_webid(::std::string* webid);

  // @@protoc_insertion_point(class_scope:proto_ff.WebMailDBDataReq)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_pernum();
  inline void clear_has_pernum();
  inline void set_has_curpage();
  inline void clear_has_curpage();
  inline void set_has_webid();
  inline void clear_has_webid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 op_type_;
  ::google::protobuf::uint32 pernum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_lst_;
  ::std::string* webid_;
  ::google::protobuf::uint32 curpage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static WebMailDBDataReq* default_instance_;
};
// -------------------------------------------------------------------

class WebMailDBDataRsp : public ::google::protobuf::Message {
 public:
  WebMailDBDataRsp();
  virtual ~WebMailDBDataRsp();

  WebMailDBDataRsp(const WebMailDBDataRsp& from);

  inline WebMailDBDataRsp& operator=(const WebMailDBDataRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebMailDBDataRsp& default_instance();

  void Swap(WebMailDBDataRsp* other);

  // implements Message ----------------------------------------------

  WebMailDBDataRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebMailDBDataRsp& from);
  void MergeFrom(const WebMailDBDataRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 curpage = 3;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurpageFieldNumber = 3;
  inline ::google::protobuf::uint32 curpage() const;
  inline void set_curpage(::google::protobuf::uint32 value);

  // optional uint32 totalcount = 4;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalcountFieldNumber = 4;
  inline ::google::protobuf::uint32 totalcount() const;
  inline void set_totalcount(::google::protobuf::uint32 value);

  // repeated uint32 id_lst = 5;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 5;
  inline ::google::protobuf::uint32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::uint32 value);
  inline void add_id_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_lst();

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 6;
  inline const ::proto_ff::WebMailDataProto& info_lst(int index) const;
  inline ::proto_ff::WebMailDataProto* mutable_info_lst(int index);
  inline ::proto_ff::WebMailDataProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WebMailDataProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WebMailDataProto >*
      mutable_info_lst();

  // required bytes webId = 7;
  inline bool has_webid() const;
  inline void clear_webid();
  static const int kWebIdFieldNumber = 7;
  inline const ::std::string& webid() const;
  inline void set_webid(const ::std::string& value);
  inline void set_webid(const char* value);
  inline void set_webid(const void* value, size_t size);
  inline ::std::string* mutable_webid();
  inline ::std::string* release_webid();
  inline void set_allocated_webid(::std::string* webid);

  // @@protoc_insertion_point(class_scope:proto_ff.WebMailDBDataRsp)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_curpage();
  inline void clear_has_curpage();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_webid();
  inline void clear_has_webid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 op_type_;
  ::google::protobuf::uint32 curpage_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_lst_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::WebMailDataProto > info_lst_;
  ::std::string* webid_;
  ::google::protobuf::uint32 totalcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static WebMailDBDataRsp* default_instance_;
};
// -------------------------------------------------------------------

class FriendDBInfo : public ::google::protobuf::Message {
 public:
  FriendDBInfo();
  virtual ~FriendDBInfo();

  FriendDBInfo(const FriendDBInfo& from);

  inline FriendDBInfo& operator=(const FriendDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDBInfo& default_instance();

  void Swap(FriendDBInfo* other);

  // implements Message ----------------------------------------------

  FriendDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDBInfo& from);
  void MergeFrom(const FriendDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .proto_ff.RelationDBInfo data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto_ff::RelationDBInfo& data() const;
  inline ::proto_ff::RelationDBInfo* mutable_data();
  inline ::proto_ff::RelationDBInfo* release_data();
  inline void set_allocated_data(::proto_ff::RelationDBInfo* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FriendDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::proto_ff::RelationDBInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FriendDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendDBRequest : public ::google::protobuf::Message {
 public:
  FriendDBRequest();
  virtual ~FriendDBRequest();

  FriendDBRequest(const FriendDBRequest& from);

  inline FriendDBRequest& operator=(const FriendDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDBRequest& default_instance();

  void Swap(FriendDBRequest* other);

  // implements Message ----------------------------------------------

  FriendDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDBRequest& from);
  void MergeFrom(const FriendDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated uint64 dstid_lst = 2;
  inline int dstid_lst_size() const;
  inline void clear_dstid_lst();
  static const int kDstidLstFieldNumber = 2;
  inline ::google::protobuf::uint64 dstid_lst(int index) const;
  inline void set_dstid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_dstid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      dstid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_dstid_lst();

  // optional uint32 operate_type = 3;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 query_times = 5;
  inline bool has_query_times() const;
  inline void clear_query_times();
  static const int kQueryTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 query_times() const;
  inline void set_query_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FriendDBRequest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_query_times();
  inline void clear_has_query_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > dstid_lst_;
  ::std::string* data_;
  ::google::protobuf::uint32 operate_type_;
  ::google::protobuf::uint32 query_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FriendDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendDBResponse : public ::google::protobuf::Message {
 public:
  FriendDBResponse();
  virtual ~FriendDBResponse();

  FriendDBResponse(const FriendDBResponse& from);

  inline FriendDBResponse& operator=(const FriendDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDBResponse& default_instance();

  void Swap(FriendDBResponse* other);

  // implements Message ----------------------------------------------

  FriendDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDBResponse& from);
  void MergeFrom(const FriendDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional uint64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 operate_type = 3;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 4;
  inline const ::proto_ff::FriendDBInfo& info_lst(int index) const;
  inline ::proto_ff::FriendDBInfo* mutable_info_lst(int index);
  inline ::proto_ff::FriendDBInfo* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >*
      mutable_info_lst();

  // repeated uint64 last_lst = 5;
  inline int last_lst_size() const;
  inline void clear_last_lst();
  static const int kLastLstFieldNumber = 5;
  inline ::google::protobuf::uint64 last_lst(int index) const;
  inline void set_last_lst(int index, ::google::protobuf::uint64 value);
  inline void add_last_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      last_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_last_lst();

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 query_times = 7;
  inline bool has_query_times() const;
  inline void clear_query_times();
  static const int kQueryTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 query_times() const;
  inline void set_query_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FriendDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_query_times();
  inline void clear_has_query_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 operate_type_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo > info_lst_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > last_lst_;
  ::std::string* data_;
  ::google::protobuf::uint32 query_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FriendDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllFriendDBRequest : public ::google::protobuf::Message {
 public:
  AllFriendDBRequest();
  virtual ~AllFriendDBRequest();

  AllFriendDBRequest(const AllFriendDBRequest& from);

  inline AllFriendDBRequest& operator=(const AllFriendDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllFriendDBRequest& default_instance();

  void Swap(AllFriendDBRequest* other);

  // implements Message ----------------------------------------------

  AllFriendDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllFriendDBRequest& from);
  void MergeFrom(const AllFriendDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.AllFriendDBRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AllFriendDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllFriendDBResponse : public ::google::protobuf::Message {
 public:
  AllFriendDBResponse();
  virtual ~AllFriendDBResponse();

  AllFriendDBResponse(const AllFriendDBResponse& from);

  inline AllFriendDBResponse& operator=(const AllFriendDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllFriendDBResponse& default_instance();

  void Swap(AllFriendDBResponse* other);

  // implements Message ----------------------------------------------

  AllFriendDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllFriendDBResponse& from);
  void MergeFrom(const AllFriendDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .proto_ff.FriendDBInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::proto_ff::FriendDBInfo& info(int index) const;
  inline ::proto_ff::FriendDBInfo* mutable_info(int index);
  inline ::proto_ff::FriendDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.AllFriendDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AllFriendDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class SaveFriendDBRequest : public ::google::protobuf::Message {
 public:
  SaveFriendDBRequest();
  virtual ~SaveFriendDBRequest();

  SaveFriendDBRequest(const SaveFriendDBRequest& from);

  inline SaveFriendDBRequest& operator=(const SaveFriendDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFriendDBRequest& default_instance();

  void Swap(SaveFriendDBRequest* other);

  // implements Message ----------------------------------------------

  SaveFriendDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveFriendDBRequest& from);
  void MergeFrom(const SaveFriendDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FriendDBInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FriendDBInfo& info(int index) const;
  inline ::proto_ff::FriendDBInfo* mutable_info(int index);
  inline ::proto_ff::FriendDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.SaveFriendDBRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SaveFriendDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class DelteFriendDBRequest : public ::google::protobuf::Message {
 public:
  DelteFriendDBRequest();
  virtual ~DelteFriendDBRequest();

  DelteFriendDBRequest(const DelteFriendDBRequest& from);

  inline DelteFriendDBRequest& operator=(const DelteFriendDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelteFriendDBRequest& default_instance();

  void Swap(DelteFriendDBRequest* other);

  // implements Message ----------------------------------------------

  DelteFriendDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelteFriendDBRequest& from);
  void MergeFrom(const DelteFriendDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DelteFriendDBRequest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DelteFriendDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBRequst : public ::google::protobuf::Message {
 public:
  GlobalDBRequst();
  virtual ~GlobalDBRequst();

  GlobalDBRequst(const GlobalDBRequst& from);

  inline GlobalDBRequst& operator=(const GlobalDBRequst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBRequst& default_instance();

  void Swap(GlobalDBRequst* other);

  // implements Message ----------------------------------------------

  GlobalDBRequst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBRequst& from);
  void MergeFrom(const GlobalDBRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalDBRequst)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBRequst* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBEntry : public ::google::protobuf::Message {
 public:
  GlobalDBEntry();
  virtual ~GlobalDBEntry();

  GlobalDBEntry(const GlobalDBEntry& from);

  inline GlobalDBEntry& operator=(const GlobalDBEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBEntry& default_instance();

  void Swap(GlobalDBEntry* other);

  // implements Message ----------------------------------------------

  GlobalDBEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBEntry& from);
  void MergeFrom(const GlobalDBEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalDBEntry)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBEntry* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBResponse : public ::google::protobuf::Message {
 public:
  GlobalDBResponse();
  virtual ~GlobalDBResponse();

  GlobalDBResponse(const GlobalDBResponse& from);

  inline GlobalDBResponse& operator=(const GlobalDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBResponse& default_instance();

  void Swap(GlobalDBResponse* other);

  // implements Message ----------------------------------------------

  GlobalDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBResponse& from);
  void MergeFrom(const GlobalDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GlobalDBEntry entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::proto_ff::GlobalDBEntry& entry(int index) const;
  inline ::proto_ff::GlobalDBEntry* mutable_entry(int index);
  inline ::proto_ff::GlobalDBEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalDBEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalDBEntry >*
      mutable_entry();

  // optional int32 isfinish = 2;
  inline bool has_isfinish() const;
  inline void clear_isfinish();
  static const int kIsfinishFieldNumber = 2;
  inline ::google::protobuf::int32 isfinish() const;
  inline void set_isfinish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalDBResponse)
 private:
  inline void set_has_isfinish();
  inline void clear_has_isfinish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalDBEntry > entry_;
  ::google::protobuf::int32 isfinish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBSetRequest : public ::google::protobuf::Message {
 public:
  GlobalDBSetRequest();
  virtual ~GlobalDBSetRequest();

  GlobalDBSetRequest(const GlobalDBSetRequest& from);

  inline GlobalDBSetRequest& operator=(const GlobalDBSetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBSetRequest& default_instance();

  void Swap(GlobalDBSetRequest* other);

  // implements Message ----------------------------------------------

  GlobalDBSetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBSetRequest& from);
  void MergeFrom(const GlobalDBSetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalDBSetRequest)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBSetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBSetResponse : public ::google::protobuf::Message {
 public:
  GlobalDBSetResponse();
  virtual ~GlobalDBSetResponse();

  GlobalDBSetResponse(const GlobalDBSetResponse& from);

  inline GlobalDBSetResponse& operator=(const GlobalDBSetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBSetResponse& default_instance();

  void Swap(GlobalDBSetResponse* other);

  // implements Message ----------------------------------------------

  GlobalDBSetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBSetResponse& from);
  void MergeFrom(const GlobalDBSetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalDBSetResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBSetResponse* default_instance_;
};
// -------------------------------------------------------------------

class GlobalComData : public ::google::protobuf::Message {
 public:
  GlobalComData();
  virtual ~GlobalComData();

  GlobalComData(const GlobalComData& from);

  inline GlobalComData& operator=(const GlobalComData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalComData& default_instance();

  void Swap(GlobalComData* other);

  // implements Message ----------------------------------------------

  GlobalComData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalComData& from);
  void MergeFrom(const GlobalComData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  inline int towerdupreward_size() const;
  inline void clear_towerdupreward();
  static const int kTowerDupRewardFieldNumber = 1;
  inline const ::proto_ff::DupTowerDBRecord& towerdupreward(int index) const;
  inline ::proto_ff::DupTowerDBRecord* mutable_towerdupreward(int index);
  inline ::proto_ff::DupTowerDBRecord* add_towerdupreward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecord >&
      towerdupreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecord >*
      mutable_towerdupreward();

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalComData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecord > towerdupreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalComData* default_instance_;
};
// -------------------------------------------------------------------

class GlobalYaotaDupDBEntry : public ::google::protobuf::Message {
 public:
  GlobalYaotaDupDBEntry();
  virtual ~GlobalYaotaDupDBEntry();

  GlobalYaotaDupDBEntry(const GlobalYaotaDupDBEntry& from);

  inline GlobalYaotaDupDBEntry& operator=(const GlobalYaotaDupDBEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalYaotaDupDBEntry& default_instance();

  void Swap(GlobalYaotaDupDBEntry* other);

  // implements Message ----------------------------------------------

  GlobalYaotaDupDBEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalYaotaDupDBEntry& from);
  void MergeFrom(const GlobalYaotaDupDBEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dupid = 1;
  inline bool has_dupid() const;
  inline void clear_dupid();
  static const int kDupidFieldNumber = 1;
  inline ::google::protobuf::int32 dupid() const;
  inline void set_dupid(::google::protobuf::int32 value);

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::RolePlayerMiniInfo& info(int index) const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_info(int index);
  inline ::proto_ff::RolePlayerMiniInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
      mutable_info();

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalYaotaDupDBEntry)
 private:
  inline void set_has_dupid();
  inline void clear_has_dupid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo > info_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 dupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalYaotaDupDBEntry* default_instance_;
};
// -------------------------------------------------------------------

class GlobalYaotaDupDBData : public ::google::protobuf::Message {
 public:
  GlobalYaotaDupDBData();
  virtual ~GlobalYaotaDupDBData();

  GlobalYaotaDupDBData(const GlobalYaotaDupDBData& from);

  inline GlobalYaotaDupDBData& operator=(const GlobalYaotaDupDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalYaotaDupDBData& default_instance();

  void Swap(GlobalYaotaDupDBData* other);

  // implements Message ----------------------------------------------

  GlobalYaotaDupDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalYaotaDupDBData& from);
  void MergeFrom(const GlobalYaotaDupDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GlobalYaotaDupDBEntry entrys = 3;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 3;
  inline const ::proto_ff::GlobalYaotaDupDBEntry& entrys(int index) const;
  inline ::proto_ff::GlobalYaotaDupDBEntry* mutable_entrys(int index);
  inline ::proto_ff::GlobalYaotaDupDBEntry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalYaotaDupDBEntry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalYaotaDupDBEntry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalYaotaDupDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalYaotaDupDBEntry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalYaotaDupDBData* default_instance_;
};
// -------------------------------------------------------------------

class GlobalFieldBossDBData : public ::google::protobuf::Message {
 public:
  GlobalFieldBossDBData();
  virtual ~GlobalFieldBossDBData();

  GlobalFieldBossDBData(const GlobalFieldBossDBData& from);

  inline GlobalFieldBossDBData& operator=(const GlobalFieldBossDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalFieldBossDBData& default_instance();

  void Swap(GlobalFieldBossDBData* other);

  // implements Message ----------------------------------------------

  GlobalFieldBossDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalFieldBossDBData& from);
  void MergeFrom(const GlobalFieldBossDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestBossProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FestBossProto& info(int index) const;
  inline ::proto_ff::FestBossProto* mutable_info(int index);
  inline ::proto_ff::FestBossProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.GlobalFieldBossDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GlobalFieldBossDBData* default_instance_;
};
// -------------------------------------------------------------------

class ActDBProto : public ::google::protobuf::Message {
 public:
  ActDBProto();
  virtual ~ActDBProto();

  ActDBProto(const ActDBProto& from);

  inline ActDBProto& operator=(const ActDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActDBProto& default_instance();

  void Swap(ActDBProto* other);

  // implements Message ----------------------------------------------

  ActDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActDBProto& from);
  void MergeFrom(const ActDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 actid = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActidFieldNumber = 1;
  inline ::google::protobuf::uint64 actid() const;
  inline void set_actid(::google::protobuf::uint64 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint64 finishtime = 3;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ActDBProto)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 actid_;
  ::google::protobuf::uint64 finishtime_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ActDBProto* default_instance_;
};
// -------------------------------------------------------------------

class ActDBReq : public ::google::protobuf::Message {
 public:
  ActDBReq();
  virtual ~ActDBReq();

  ActDBReq(const ActDBReq& from);

  inline ActDBReq& operator=(const ActDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActDBReq& default_instance();

  void Swap(ActDBReq* other);

  // implements Message ----------------------------------------------

  ActDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActDBReq& from);
  void MergeFrom(const ActDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.ActDBReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ActDBReq* default_instance_;
};
// -------------------------------------------------------------------

class ActDBRsp : public ::google::protobuf::Message {
 public:
  ActDBRsp();
  virtual ~ActDBRsp();

  ActDBRsp(const ActDBRsp& from);

  inline ActDBRsp& operator=(const ActDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActDBRsp& default_instance();

  void Swap(ActDBRsp* other);

  // implements Message ----------------------------------------------

  ActDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActDBRsp& from);
  void MergeFrom(const ActDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ActDBProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::ActDBProto& lst(int index) const;
  inline ::proto_ff::ActDBProto* mutable_lst(int index);
  inline ::proto_ff::ActDBProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.ActDBRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ActDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class ActSaveDBReq : public ::google::protobuf::Message {
 public:
  ActSaveDBReq();
  virtual ~ActSaveDBReq();

  ActSaveDBReq(const ActSaveDBReq& from);

  inline ActSaveDBReq& operator=(const ActSaveDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActSaveDBReq& default_instance();

  void Swap(ActSaveDBReq* other);

  // implements Message ----------------------------------------------

  ActSaveDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActSaveDBReq& from);
  void MergeFrom(const ActSaveDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ActDBProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::ActDBProto& lst(int index) const;
  inline ::proto_ff::ActDBProto* mutable_lst(int index);
  inline ::proto_ff::ActDBProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.ActSaveDBReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ActSaveDBReq* default_instance_;
};
// -------------------------------------------------------------------

class AllArenaDBRequest : public ::google::protobuf::Message {
 public:
  AllArenaDBRequest();
  virtual ~AllArenaDBRequest();

  AllArenaDBRequest(const AllArenaDBRequest& from);

  inline AllArenaDBRequest& operator=(const AllArenaDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllArenaDBRequest& default_instance();

  void Swap(AllArenaDBRequest* other);

  // implements Message ----------------------------------------------

  AllArenaDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllArenaDBRequest& from);
  void MergeFrom(const AllArenaDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 retnum = 2;
  inline bool has_retnum() const;
  inline void clear_retnum();
  static const int kRetnumFieldNumber = 2;
  inline ::google::protobuf::int32 retnum() const;
  inline void set_retnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.AllArenaDBRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_retnum();
  inline void clear_has_retnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 retnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AllArenaDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArenaDBInfo : public ::google::protobuf::Message {
 public:
  ArenaDBInfo();
  virtual ~ArenaDBInfo();

  ArenaDBInfo(const ArenaDBInfo& from);

  inline ArenaDBInfo& operator=(const ArenaDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaDBInfo& default_instance();

  void Swap(ArenaDBInfo* other);

  // implements Message ----------------------------------------------

  ArenaDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaDBInfo& from);
  void MergeFrom(const ArenaDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 rankId = 2;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ArenaDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_rankid();
  inline void clear_has_rankid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 rankid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ArenaDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class ArenaMoreDBInfo : public ::google::protobuf::Message {
 public:
  ArenaMoreDBInfo();
  virtual ~ArenaMoreDBInfo();

  ArenaMoreDBInfo(const ArenaMoreDBInfo& from);

  inline ArenaMoreDBInfo& operator=(const ArenaMoreDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaMoreDBInfo& default_instance();

  void Swap(ArenaMoreDBInfo* other);

  // implements Message ----------------------------------------------

  ArenaMoreDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaMoreDBInfo& from);
  void MergeFrom(const ArenaMoreDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ArenaDBInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ArenaDBInfo& info(int index) const;
  inline ::proto_ff::ArenaDBInfo* mutable_info(int index);
  inline ::proto_ff::ArenaDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >*
      mutable_info();

  // optional uint32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional uint32 giveReward = 3;
  inline bool has_givereward() const;
  inline void clear_givereward();
  static const int kGiveRewardFieldNumber = 3;
  inline ::google::protobuf::uint32 givereward() const;
  inline void set_givereward(::google::protobuf::uint32 value);

  // optional uint32 max_rank = 4;
  inline bool has_max_rank() const;
  inline void clear_max_rank();
  static const int kMaxRankFieldNumber = 4;
  inline ::google::protobuf::uint32 max_rank() const;
  inline void set_max_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ArenaMoreDBInfo)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_givereward();
  inline void clear_has_givereward();
  inline void set_has_max_rank();
  inline void clear_has_max_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo > info_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 givereward_;
  ::google::protobuf::uint32 max_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ArenaMoreDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllArenaDBResponse : public ::google::protobuf::Message {
 public:
  AllArenaDBResponse();
  virtual ~AllArenaDBResponse();

  AllArenaDBResponse(const AllArenaDBResponse& from);

  inline AllArenaDBResponse& operator=(const AllArenaDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllArenaDBResponse& default_instance();

  void Swap(AllArenaDBResponse* other);

  // implements Message ----------------------------------------------

  AllArenaDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllArenaDBResponse& from);
  void MergeFrom(const AllArenaDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .proto_ff.ArenaDBInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::proto_ff::ArenaDBInfo& info(int index) const;
  inline ::proto_ff::ArenaDBInfo* mutable_info(int index);
  inline ::proto_ff::ArenaDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.AllArenaDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AllArenaDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class SaveArenaDBRequest : public ::google::protobuf::Message {
 public:
  SaveArenaDBRequest();
  virtual ~SaveArenaDBRequest();

  SaveArenaDBRequest(const SaveArenaDBRequest& from);

  inline SaveArenaDBRequest& operator=(const SaveArenaDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveArenaDBRequest& default_instance();

  void Swap(SaveArenaDBRequest* other);

  // implements Message ----------------------------------------------

  SaveArenaDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveArenaDBRequest& from);
  void MergeFrom(const SaveArenaDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ArenaDBInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ArenaDBInfo& info(int index) const;
  inline ::proto_ff::ArenaDBInfo* mutable_info(int index);
  inline ::proto_ff::ArenaDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.SaveArenaDBRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static SaveArenaDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteArenaDBRequest : public ::google::protobuf::Message {
 public:
  DeleteArenaDBRequest();
  virtual ~DeleteArenaDBRequest();

  DeleteArenaDBRequest(const DeleteArenaDBRequest& from);

  inline DeleteArenaDBRequest& operator=(const DeleteArenaDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteArenaDBRequest& default_instance();

  void Swap(DeleteArenaDBRequest* other);

  // implements Message ----------------------------------------------

  DeleteArenaDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteArenaDBRequest& from);
  void MergeFrom(const DeleteArenaDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DeleteArenaDBRequest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DeleteArenaDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoleMirrorDBReq : public ::google::protobuf::Message {
 public:
  RoleMirrorDBReq();
  virtual ~RoleMirrorDBReq();

  RoleMirrorDBReq(const RoleMirrorDBReq& from);

  inline RoleMirrorDBReq& operator=(const RoleMirrorDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleMirrorDBReq& default_instance();

  void Swap(RoleMirrorDBReq* other);

  // implements Message ----------------------------------------------

  RoleMirrorDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleMirrorDBReq& from);
  void MergeFrom(const RoleMirrorDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required int64 int_param = 2;
  inline bool has_int_param() const;
  inline void clear_int_param();
  static const int kIntParamFieldNumber = 2;
  inline ::google::protobuf::int64 int_param() const;
  inline void set_int_param(::google::protobuf::int64 value);

  // required bytes str_param = 3;
  inline bool has_str_param() const;
  inline void clear_str_param();
  static const int kStrParamFieldNumber = 3;
  inline const ::std::string& str_param() const;
  inline void set_str_param(const ::std::string& value);
  inline void set_str_param(const char* value);
  inline void set_str_param(const void* value, size_t size);
  inline ::std::string* mutable_str_param();
  inline ::std::string* release_str_param();
  inline void set_allocated_str_param(::std::string* str_param);

  // required uint32 reqtype = 4;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 reqtype() const;
  inline void set_reqtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleMirrorDBReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_int_param();
  inline void clear_has_int_param();
  inline void set_has_str_param();
  inline void clear_has_str_param();
  inline void set_has_reqtype();
  inline void clear_has_reqtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int64 int_param_;
  ::std::string* str_param_;
  ::google::protobuf::uint32 reqtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleMirrorDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleMirrorDBRsp : public ::google::protobuf::Message {
 public:
  RoleMirrorDBRsp();
  virtual ~RoleMirrorDBRsp();

  RoleMirrorDBRsp(const RoleMirrorDBRsp& from);

  inline RoleMirrorDBRsp& operator=(const RoleMirrorDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleMirrorDBRsp& default_instance();

  void Swap(RoleMirrorDBRsp* other);

  // implements Message ----------------------------------------------

  RoleMirrorDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleMirrorDBRsp& from);
  void MergeFrom(const RoleMirrorDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required int64 int_param = 3;
  inline bool has_int_param() const;
  inline void clear_int_param();
  static const int kIntParamFieldNumber = 3;
  inline ::google::protobuf::int64 int_param() const;
  inline void set_int_param(::google::protobuf::int64 value);

  // required bytes str_param = 4;
  inline bool has_str_param() const;
  inline void clear_str_param();
  static const int kStrParamFieldNumber = 4;
  inline const ::std::string& str_param() const;
  inline void set_str_param(const ::std::string& value);
  inline void set_str_param(const char* value);
  inline void set_str_param(const void* value, size_t size);
  inline ::std::string* mutable_str_param();
  inline ::std::string* release_str_param();
  inline void set_allocated_str_param(::std::string* str_param);

  // required uint32 reqtype = 5;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqtypeFieldNumber = 5;
  inline ::google::protobuf::uint32 reqtype() const;
  inline void set_reqtype(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleMirrorData data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::proto_ff::RoleMirrorData& data() const;
  inline ::proto_ff::RoleMirrorData* mutable_data();
  inline ::proto_ff::RoleMirrorData* release_data();
  inline void set_allocated_data(::proto_ff::RoleMirrorData* data);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleMirrorDBRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_int_param();
  inline void clear_has_int_param();
  inline void set_has_str_param();
  inline void clear_has_str_param();
  inline void set_has_reqtype();
  inline void clear_has_reqtype();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int64 int_param_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 reqtype_;
  ::std::string* str_param_;
  ::proto_ff::RoleMirrorData* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleMirrorDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionDataDBReq : public ::google::protobuf::Message {
 public:
  FactionDataDBReq();
  virtual ~FactionDataDBReq();

  FactionDataDBReq(const FactionDataDBReq& from);

  inline FactionDataDBReq& operator=(const FactionDataDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDataDBReq& default_instance();

  void Swap(FactionDataDBReq* other);

  // implements Message ----------------------------------------------

  FactionDataDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDataDBReq& from);
  void MergeFrom(const FactionDataDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDataDBReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDataDBReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionDataDBRsp : public ::google::protobuf::Message {
 public:
  FactionDataDBRsp();
  virtual ~FactionDataDBRsp();

  FactionDataDBRsp(const FactionDataDBRsp& from);

  inline FactionDataDBRsp& operator=(const FactionDataDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDataDBRsp& default_instance();

  void Swap(FactionDataDBRsp* other);

  // implements Message ----------------------------------------------

  FactionDataDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDataDBRsp& from);
  void MergeFrom(const FactionDataDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  inline int data_lst_size() const;
  inline void clear_data_lst();
  static const int kDataLstFieldNumber = 1;
  inline const ::proto_ff::FactionAllDBData& data_lst(int index) const;
  inline ::proto_ff::FactionAllDBData* mutable_data_lst(int index);
  inline ::proto_ff::FactionAllDBData* add_data_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAllDBData >&
      data_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAllDBData >*
      mutable_data_lst();

  // optional int32 finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline ::google::protobuf::int32 finish() const;
  inline void set_finish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDataDBRsp)
 private:
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAllDBData > data_lst_;
  ::google::protobuf::int32 finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDataDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionSaveDBReq : public ::google::protobuf::Message {
 public:
  FactionSaveDBReq();
  virtual ~FactionSaveDBReq();

  FactionSaveDBReq(const FactionSaveDBReq& from);

  inline FactionSaveDBReq& operator=(const FactionSaveDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSaveDBReq& default_instance();

  void Swap(FactionSaveDBReq* other);

  // implements Message ----------------------------------------------

  FactionSaveDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSaveDBReq& from);
  void MergeFrom(const FactionSaveDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionAllDBData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FactionAllDBData& data() const;
  inline ::proto_ff::FactionAllDBData* mutable_data();
  inline ::proto_ff::FactionAllDBData* release_data();
  inline void set_allocated_data(::proto_ff::FactionAllDBData* data);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSaveDBReq)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionAllDBData* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionSaveDBReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionDelDBReq : public ::google::protobuf::Message {
 public:
  FactionDelDBReq();
  virtual ~FactionDelDBReq();

  FactionDelDBReq(const FactionDelDBReq& from);

  inline FactionDelDBReq& operator=(const FactionDelDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDelDBReq& default_instance();

  void Swap(FactionDelDBReq* other);

  // implements Message ----------------------------------------------

  FactionDelDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDelDBReq& from);
  void MergeFrom(const FactionDelDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDelDBReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionDelDBReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionRedDBReq : public ::google::protobuf::Message {
 public:
  FactionRedDBReq();
  virtual ~FactionRedDBReq();

  FactionRedDBReq(const FactionRedDBReq& from);

  inline FactionRedDBReq& operator=(const FactionRedDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRedDBReq& default_instance();

  void Swap(FactionRedDBReq* other);

  // implements Message ----------------------------------------------

  FactionRedDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRedDBReq& from);
  void MergeFrom(const FactionRedDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRedDBReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionRedDBReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionRedDBRsp : public ::google::protobuf::Message {
 public:
  FactionRedDBRsp();
  virtual ~FactionRedDBRsp();

  FactionRedDBRsp(const FactionRedDBRsp& from);

  inline FactionRedDBRsp& operator=(const FactionRedDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRedDBRsp& default_instance();

  void Swap(FactionRedDBRsp* other);

  // implements Message ----------------------------------------------

  FactionRedDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRedDBRsp& from);
  void MergeFrom(const FactionRedDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedDBData data_lst = 1;
  inline int data_lst_size() const;
  inline void clear_data_lst();
  static const int kDataLstFieldNumber = 1;
  inline const ::proto_ff::RedDBData& data_lst(int index) const;
  inline ::proto_ff::RedDBData* mutable_data_lst(int index);
  inline ::proto_ff::RedDBData* add_data_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDBData >&
      data_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDBData >*
      mutable_data_lst();

  // optional int32 finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline ::google::protobuf::int32 finish() const;
  inline void set_finish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRedDBRsp)
 private:
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDBData > data_lst_;
  ::google::protobuf::int32 finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionRedDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionRedSaveDBReq : public ::google::protobuf::Message {
 public:
  FactionRedSaveDBReq();
  virtual ~FactionRedSaveDBReq();

  FactionRedSaveDBReq(const FactionRedSaveDBReq& from);

  inline FactionRedSaveDBReq& operator=(const FactionRedSaveDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRedSaveDBReq& default_instance();

  void Swap(FactionRedSaveDBReq* other);

  // implements Message ----------------------------------------------

  FactionRedSaveDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRedSaveDBReq& from);
  void MergeFrom(const FactionRedSaveDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required .proto_ff.RedDBData data0 = 2;
  inline bool has_data0() const;
  inline void clear_data0();
  static const int kData0FieldNumber = 2;
  inline const ::proto_ff::RedDBData& data0() const;
  inline ::proto_ff::RedDBData* mutable_data0();
  inline ::proto_ff::RedDBData* release_data0();
  inline void set_allocated_data0(::proto_ff::RedDBData* data0);

  // required .proto_ff.RedDBData data1 = 3;
  inline bool has_data1() const;
  inline void clear_data1();
  static const int kData1FieldNumber = 3;
  inline const ::proto_ff::RedDBData& data1() const;
  inline ::proto_ff::RedDBData* mutable_data1();
  inline ::proto_ff::RedDBData* release_data1();
  inline void set_allocated_data1(::proto_ff::RedDBData* data1);

  // required .proto_ff.RedDBData data2 = 4;
  inline bool has_data2() const;
  inline void clear_data2();
  static const int kData2FieldNumber = 4;
  inline const ::proto_ff::RedDBData& data2() const;
  inline ::proto_ff::RedDBData* mutable_data2();
  inline ::proto_ff::RedDBData* release_data2();
  inline void set_allocated_data2(::proto_ff::RedDBData* data2);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRedSaveDBReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_data0();
  inline void clear_has_data0();
  inline void set_has_data1();
  inline void clear_has_data1();
  inline void set_has_data2();
  inline void clear_has_data2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RedDBData* data0_;
  ::proto_ff::RedDBData* data1_;
  ::proto_ff::RedDBData* data2_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionRedSaveDBReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionRedDelDBReq : public ::google::protobuf::Message {
 public:
  FactionRedDelDBReq();
  virtual ~FactionRedDelDBReq();

  FactionRedDelDBReq(const FactionRedDelDBReq& from);

  inline FactionRedDelDBReq& operator=(const FactionRedDelDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRedDelDBReq& default_instance();

  void Swap(FactionRedDelDBReq* other);

  // implements Message ----------------------------------------------

  FactionRedDelDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRedDelDBReq& from);
  void MergeFrom(const FactionRedDelDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRedDelDBReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionRedDelDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleRedDBReq : public ::google::protobuf::Message {
 public:
  RoleRedDBReq();
  virtual ~RoleRedDBReq();

  RoleRedDBReq(const RoleRedDBReq& from);

  inline RoleRedDBReq& operator=(const RoleRedDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRedDBReq& default_instance();

  void Swap(RoleRedDBReq* other);

  // implements Message ----------------------------------------------

  RoleRedDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRedDBReq& from);
  void MergeFrom(const RoleRedDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.RoleRedDBReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleRedDBReq* default_instance_;
};
// -------------------------------------------------------------------

class RoleRedDBRsp : public ::google::protobuf::Message {
 public:
  RoleRedDBRsp();
  virtual ~RoleRedDBRsp();

  RoleRedDBRsp(const RoleRedDBRsp& from);

  inline RoleRedDBRsp& operator=(const RoleRedDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRedDBRsp& default_instance();

  void Swap(RoleRedDBRsp* other);

  // implements Message ----------------------------------------------

  RoleRedDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRedDBRsp& from);
  void MergeFrom(const RoleRedDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RoleRedDBData data_lst = 1;
  inline int data_lst_size() const;
  inline void clear_data_lst();
  static const int kDataLstFieldNumber = 1;
  inline const ::proto_ff::RoleRedDBData& data_lst(int index) const;
  inline ::proto_ff::RoleRedDBData* mutable_data_lst(int index);
  inline ::proto_ff::RoleRedDBData* add_data_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleRedDBData >&
      data_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleRedDBData >*
      mutable_data_lst();

  // optional int32 finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline ::google::protobuf::int32 finish() const;
  inline void set_finish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleRedDBRsp)
 private:
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleRedDBData > data_lst_;
  ::google::protobuf::int32 finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RoleRedDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class ComLoadDBReq : public ::google::protobuf::Message {
 public:
  ComLoadDBReq();
  virtual ~ComLoadDBReq();

  ComLoadDBReq(const ComLoadDBReq& from);

  inline ComLoadDBReq& operator=(const ComLoadDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComLoadDBReq& default_instance();

  void Swap(ComLoadDBReq* other);

  // implements Message ----------------------------------------------

  ComLoadDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComLoadDBReq& from);
  void MergeFrom(const ComLoadDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required bytes table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required uint32 cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ComLoadDBReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* table_name_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComLoadDBReq* default_instance_;
};
// -------------------------------------------------------------------

class ComLoadDBRsp : public ::google::protobuf::Message {
 public:
  ComLoadDBRsp();
  virtual ~ComLoadDBRsp();

  ComLoadDBRsp(const ComLoadDBRsp& from);

  inline ComLoadDBRsp& operator=(const ComLoadDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComLoadDBRsp& default_instance();

  void Swap(ComLoadDBRsp* other);

  // implements Message ----------------------------------------------

  ComLoadDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComLoadDBRsp& from);
  void MergeFrom(const ComLoadDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto_ff.ComLoadDBRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComLoadDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class ComLoadAllDBReq : public ::google::protobuf::Message {
 public:
  ComLoadAllDBReq();
  virtual ~ComLoadAllDBReq();

  ComLoadAllDBReq(const ComLoadAllDBReq& from);

  inline ComLoadAllDBReq& operator=(const ComLoadAllDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComLoadAllDBReq& default_instance();

  void Swap(ComLoadAllDBReq* other);

  // implements Message ----------------------------------------------

  ComLoadAllDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComLoadAllDBReq& from);
  void MergeFrom(const ComLoadAllDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ComLoadAllDBReq)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComLoadAllDBReq* default_instance_;
};
// -------------------------------------------------------------------

class ComDBProto : public ::google::protobuf::Message {
 public:
  ComDBProto();
  virtual ~ComDBProto();

  ComDBProto(const ComDBProto& from);

  inline ComDBProto& operator=(const ComDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComDBProto& default_instance();

  void Swap(ComDBProto* other);

  // implements Message ----------------------------------------------

  ComDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComDBProto& from);
  void MergeFrom(const ComDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto_ff.ComDBProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComDBProto* default_instance_;
};
// -------------------------------------------------------------------

class ComLoadAllDBRsp : public ::google::protobuf::Message {
 public:
  ComLoadAllDBRsp();
  virtual ~ComLoadAllDBRsp();

  ComLoadAllDBRsp(const ComLoadAllDBRsp& from);

  inline ComLoadAllDBRsp& operator=(const ComLoadAllDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComLoadAllDBRsp& default_instance();

  void Swap(ComLoadAllDBRsp* other);

  // implements Message ----------------------------------------------

  ComLoadAllDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComLoadAllDBRsp& from);
  void MergeFrom(const ComLoadAllDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ComDBProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::ComDBProto& data(int index) const;
  inline ::proto_ff::ComDBProto* mutable_data(int index);
  inline ::proto_ff::ComDBProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComDBProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComDBProto >*
      mutable_data();

  // required int32 is_finish = 2;
  inline bool has_is_finish() const;
  inline void clear_is_finish();
  static const int kIsFinishFieldNumber = 2;
  inline ::google::protobuf::int32 is_finish() const;
  inline void set_is_finish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ComLoadAllDBRsp)
 private:
  inline void set_has_is_finish();
  inline void clear_has_is_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComDBProto > data_;
  ::google::protobuf::int32 is_finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComLoadAllDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class ComSaveDBReq : public ::google::protobuf::Message {
 public:
  ComSaveDBReq();
  virtual ~ComSaveDBReq();

  ComSaveDBReq(const ComSaveDBReq& from);

  inline ComSaveDBReq& operator=(const ComSaveDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComSaveDBReq& default_instance();

  void Swap(ComSaveDBReq* other);

  // implements Message ----------------------------------------------

  ComSaveDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComSaveDBReq& from);
  void MergeFrom(const ComSaveDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required bytes table_name = 3;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:proto_ff.ComSaveDBReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* data_;
  ::std::string* table_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComSaveDBReq* default_instance_;
};
// -------------------------------------------------------------------

class ComDelDBReq : public ::google::protobuf::Message {
 public:
  ComDelDBReq();
  virtual ~ComDelDBReq();

  ComDelDBReq(const ComDelDBReq& from);

  inline ComDelDBReq& operator=(const ComDelDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComDelDBReq& default_instance();

  void Swap(ComDelDBReq* other);

  // implements Message ----------------------------------------------

  ComDelDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComDelDBReq& from);
  void MergeFrom(const ComDelDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // repeated uint64 id_lst = 2;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 2;
  inline ::google::protobuf::uint64 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::uint64 value);
  inline void add_id_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_id_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.ComDelDBReq)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > id_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static ComDelDBReq* default_instance_;
};
// -------------------------------------------------------------------

class MarryApply : public ::google::protobuf::Message {
 public:
  MarryApply();
  virtual ~MarryApply();

  MarryApply(const MarryApply& from);

  inline MarryApply& operator=(const MarryApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryApply& default_instance();

  void Swap(MarryApply* other);

  // implements Message ----------------------------------------------

  MarryApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryApply& from);
  void MergeFrom(const MarryApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 apply_dst_id = 1;
  inline bool has_apply_dst_id() const;
  inline void clear_apply_dst_id();
  static const int kApplyDstIdFieldNumber = 1;
  inline ::google::protobuf::uint64 apply_dst_id() const;
  inline void set_apply_dst_id(::google::protobuf::uint64 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 gear = 3;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 3;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MarryApply)
 private:
  inline void set_has_apply_dst_id();
  inline void clear_has_apply_dst_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_gear();
  inline void clear_has_gear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 apply_dst_id_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 gear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarryApply* default_instance_;
};
// -------------------------------------------------------------------

class MarrySimpleInfo : public ::google::protobuf::Message {
 public:
  MarrySimpleInfo();
  virtual ~MarrySimpleInfo();

  MarrySimpleInfo(const MarrySimpleInfo& from);

  inline MarrySimpleInfo& operator=(const MarrySimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarrySimpleInfo& default_instance();

  void Swap(MarrySimpleInfo* other);

  // implements Message ----------------------------------------------

  MarrySimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarrySimpleInfo& from);
  void MergeFrom(const MarrySimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::uint64 m_id() const;
  inline void set_m_id(::google::protobuf::uint64 value);

  // optional uint64 dst_id = 2;
  inline bool has_dst_id() const;
  inline void clear_dst_id();
  static const int kDstIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dst_id() const;
  inline void set_dst_id(::google::protobuf::uint64 value);

  // optional uint32 marry_id = 3;
  inline bool has_marry_id() const;
  inline void clear_marry_id();
  static const int kMarryIdFieldNumber = 3;
  inline ::google::protobuf::uint32 marry_id() const;
  inline void set_marry_id(::google::protobuf::uint32 value);

  // optional .proto_ff.MarryBrief brief = 4;
  inline bool has_brief() const;
  inline void clear_brief();
  static const int kBriefFieldNumber = 4;
  inline const ::proto_ff::MarryBrief& brief() const;
  inline ::proto_ff::MarryBrief* mutable_brief();
  inline ::proto_ff::MarryBrief* release_brief();
  inline void set_allocated_brief(::proto_ff::MarryBrief* brief);

  // optional .proto_ff.MarryApply apply = 5;
  inline bool has_apply() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 5;
  inline const ::proto_ff::MarryApply& apply() const;
  inline ::proto_ff::MarryApply* mutable_apply();
  inline ::proto_ff::MarryApply* release_apply();
  inline void set_allocated_apply(::proto_ff::MarryApply* apply);

  // optional int32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MarrySimpleInfo)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_dst_id();
  inline void clear_has_dst_id();
  inline void set_has_marry_id();
  inline void clear_has_marry_id();
  inline void set_has_brief();
  inline void clear_has_brief();
  inline void set_has_apply();
  inline void clear_has_apply();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 m_id_;
  ::google::protobuf::uint64 dst_id_;
  ::proto_ff::MarryBrief* brief_;
  ::google::protobuf::uint32 marry_id_;
  ::google::protobuf::int32 state_;
  ::proto_ff::MarryApply* apply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarrySimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

class MarryDBLoadReq : public ::google::protobuf::Message {
 public:
  MarryDBLoadReq();
  virtual ~MarryDBLoadReq();

  MarryDBLoadReq(const MarryDBLoadReq& from);

  inline MarryDBLoadReq& operator=(const MarryDBLoadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryDBLoadReq& default_instance();

  void Swap(MarryDBLoadReq* other);

  // implements Message ----------------------------------------------

  MarryDBLoadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryDBLoadReq& from);
  void MergeFrom(const MarryDBLoadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MarryDBLoadReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarryDBLoadReq* default_instance_;
};
// -------------------------------------------------------------------

class MarryDBLoadRsp : public ::google::protobuf::Message {
 public:
  MarryDBLoadRsp();
  virtual ~MarryDBLoadRsp();

  MarryDBLoadRsp(const MarryDBLoadRsp& from);

  inline MarryDBLoadRsp& operator=(const MarryDBLoadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryDBLoadRsp& default_instance();

  void Swap(MarryDBLoadRsp* other);

  // implements Message ----------------------------------------------

  MarryDBLoadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryDBLoadRsp& from);
  void MergeFrom(const MarryDBLoadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .proto_ff.MarrySimpleInfo simple = 3;
  inline int simple_size() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 3;
  inline const ::proto_ff::MarrySimpleInfo& simple(int index) const;
  inline ::proto_ff::MarrySimpleInfo* mutable_simple(int index);
  inline ::proto_ff::MarrySimpleInfo* add_simple();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MarrySimpleInfo >&
      simple() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MarrySimpleInfo >*
      mutable_simple();

  // @@protoc_insertion_point(class_scope:proto_ff.MarryDBLoadRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::MarrySimpleInfo > simple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarryDBLoadRsp* default_instance_;
};
// -------------------------------------------------------------------

class MarryDBSaveReq : public ::google::protobuf::Message {
 public:
  MarryDBSaveReq();
  virtual ~MarryDBSaveReq();

  MarryDBSaveReq(const MarryDBSaveReq& from);

  inline MarryDBSaveReq& operator=(const MarryDBSaveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryDBSaveReq& default_instance();

  void Swap(MarryDBSaveReq* other);

  // implements Message ----------------------------------------------

  MarryDBSaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryDBSaveReq& from);
  void MergeFrom(const MarryDBSaveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.MarrySimpleInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::MarrySimpleInfo& info() const;
  inline ::proto_ff::MarrySimpleInfo* mutable_info();
  inline ::proto_ff::MarrySimpleInfo* release_info();
  inline void set_allocated_info(::proto_ff::MarrySimpleInfo* info);

  // @@protoc_insertion_point(class_scope:proto_ff.MarryDBSaveReq)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::MarrySimpleInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarryDBSaveReq* default_instance_;
};
// -------------------------------------------------------------------

class AnswerRankDBProto : public ::google::protobuf::Message {
 public:
  AnswerRankDBProto();
  virtual ~AnswerRankDBProto();

  AnswerRankDBProto(const AnswerRankDBProto& from);

  inline AnswerRankDBProto& operator=(const AnswerRankDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnswerRankDBProto& default_instance();

  void Swap(AnswerRankDBProto* other);

  // implements Message ----------------------------------------------

  AnswerRankDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnswerRankDBProto& from);
  void MergeFrom(const AnswerRankDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.AnswerRankDBProto)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 factionid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AnswerRankDBProto* default_instance_;
};
// -------------------------------------------------------------------

class AnswerDBData : public ::google::protobuf::Message {
 public:
  AnswerDBData();
  virtual ~AnswerDBData();

  AnswerDBData(const AnswerDBData& from);

  inline AnswerDBData& operator=(const AnswerDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnswerDBData& default_instance();

  void Swap(AnswerDBData* other);

  // implements Message ----------------------------------------------

  AnswerDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnswerDBData& from);
  void MergeFrom(const AnswerDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.AnswerRankDBProto rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::AnswerRankDBProto& rank(int index) const;
  inline ::proto_ff::AnswerRankDBProto* mutable_rank(int index);
  inline ::proto_ff::AnswerRankDBProto* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::AnswerRankDBProto >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::AnswerRankDBProto >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:proto_ff.AnswerDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::AnswerRankDBProto > rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static AnswerDBData* default_instance_;
};
// -------------------------------------------------------------------

class GuardRankDBProto : public ::google::protobuf::Message {
 public:
  GuardRankDBProto();
  virtual ~GuardRankDBProto();

  GuardRankDBProto(const GuardRankDBProto& from);

  inline GuardRankDBProto& operator=(const GuardRankDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuardRankDBProto& default_instance();

  void Swap(GuardRankDBProto* other);

  // implements Message ----------------------------------------------

  GuardRankDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuardRankDBProto& from);
  void MergeFrom(const GuardRankDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint32 zid = 5;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 5;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GuardRankDBProto)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 factionid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GuardRankDBProto* default_instance_;
};
// -------------------------------------------------------------------

class GuardDBData : public ::google::protobuf::Message {
 public:
  GuardDBData();
  virtual ~GuardDBData();

  GuardDBData(const GuardDBData& from);

  inline GuardDBData& operator=(const GuardDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuardDBData& default_instance();

  void Swap(GuardDBData* other);

  // implements Message ----------------------------------------------

  GuardDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuardDBData& from);
  void MergeFrom(const GuardDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GuardRankDBProto old_rank = 1;
  inline int old_rank_size() const;
  inline void clear_old_rank();
  static const int kOldRankFieldNumber = 1;
  inline const ::proto_ff::GuardRankDBProto& old_rank(int index) const;
  inline ::proto_ff::GuardRankDBProto* mutable_old_rank(int index);
  inline ::proto_ff::GuardRankDBProto* add_old_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >&
      old_rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >*
      mutable_old_rank();

  // repeated .proto_ff.GuardRankDBProto cur_rank = 2;
  inline int cur_rank_size() const;
  inline void clear_cur_rank();
  static const int kCurRankFieldNumber = 2;
  inline const ::proto_ff::GuardRankDBProto& cur_rank(int index) const;
  inline ::proto_ff::GuardRankDBProto* mutable_cur_rank(int index);
  inline ::proto_ff::GuardRankDBProto* add_cur_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >&
      cur_rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >*
      mutable_cur_rank();

  // @@protoc_insertion_point(class_scope:proto_ff.GuardDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto > old_rank_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto > cur_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GuardDBData* default_instance_;
};
// -------------------------------------------------------------------

class Rank1v1DBProto : public ::google::protobuf::Message {
 public:
  Rank1v1DBProto();
  virtual ~Rank1v1DBProto();

  Rank1v1DBProto(const Rank1v1DBProto& from);

  inline Rank1v1DBProto& operator=(const Rank1v1DBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank1v1DBProto& default_instance();

  void Swap(Rank1v1DBProto* other);

  // implements Message ----------------------------------------------

  Rank1v1DBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank1v1DBProto& from);
  void MergeFrom(const Rank1v1DBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional uint64 fight = 5;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 5;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional uint32 zid = 6;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 6;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional uint64 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 match_num = 9;
  inline bool has_match_num() const;
  inline void clear_match_num();
  static const int kMatchNumFieldNumber = 9;
  inline ::google::protobuf::int32 match_num() const;
  inline void set_match_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Rank1v1DBProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_match_num();
  inline void clear_has_match_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 prof_;
  ::std::string* name_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 match_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static Rank1v1DBProto* default_instance_;
};
// -------------------------------------------------------------------

class Act1v1DBData : public ::google::protobuf::Message {
 public:
  Act1v1DBData();
  virtual ~Act1v1DBData();

  Act1v1DBData(const Act1v1DBData& from);

  inline Act1v1DBData& operator=(const Act1v1DBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Act1v1DBData& default_instance();

  void Swap(Act1v1DBData* other);

  // implements Message ----------------------------------------------

  Act1v1DBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Act1v1DBData& from);
  void MergeFrom(const Act1v1DBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Rank1v1DBProto rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::Rank1v1DBProto& rank(int index) const;
  inline ::proto_ff::Rank1v1DBProto* mutable_rank(int index);
  inline ::proto_ff::Rank1v1DBProto* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Rank1v1DBProto >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Rank1v1DBProto >*
      mutable_rank();

  // optional uint64 reset_time = 2;
  inline bool has_reset_time() const;
  inline void clear_reset_time();
  static const int kResetTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 reset_time() const;
  inline void set_reset_time(::google::protobuf::uint64 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Act1v1DBData)
 private:
  inline void set_has_reset_time();
  inline void clear_has_reset_time();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Rank1v1DBProto > rank_;
  ::google::protobuf::uint64 reset_time_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static Act1v1DBData* default_instance_;
};
// -------------------------------------------------------------------

class RaceFactionDBProto : public ::google::protobuf::Message {
 public:
  RaceFactionDBProto();
  virtual ~RaceFactionDBProto();

  RaceFactionDBProto(const RaceFactionDBProto& from);

  inline RaceFactionDBProto& operator=(const RaceFactionDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceFactionDBProto& default_instance();

  void Swap(RaceFactionDBProto* other);

  // implements Message ----------------------------------------------

  RaceFactionDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceFactionDBProto& from);
  void MergeFrom(const RaceFactionDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RaceFactionDBProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint64 fight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RaceFactionDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceMatchDBProto : public ::google::protobuf::Message {
 public:
  RaceMatchDBProto();
  virtual ~RaceMatchDBProto();

  RaceMatchDBProto(const RaceMatchDBProto& from);

  inline RaceMatchDBProto& operator=(const RaceMatchDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceMatchDBProto& default_instance();

  void Swap(RaceMatchDBProto* other);

  // implements Message ----------------------------------------------

  RaceMatchDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceMatchDBProto& from);
  void MergeFrom(const RaceMatchDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id1 = 1;
  inline bool has_faction_id1() const;
  inline void clear_faction_id1();
  static const int kFactionId1FieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id1() const;
  inline void set_faction_id1(::google::protobuf::uint32 value);

  // optional uint32 faction_id2 = 2;
  inline bool has_faction_id2() const;
  inline void clear_faction_id2();
  static const int kFactionId2FieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id2() const;
  inline void set_faction_id2(::google::protobuf::uint32 value);

  // optional uint32 faction_id = 3;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RaceMatchDBProto)
 private:
  inline void set_has_faction_id1();
  inline void clear_has_faction_id1();
  inline void set_has_faction_id2();
  inline void clear_has_faction_id2();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id1_;
  ::google::protobuf::uint32 faction_id2_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RaceMatchDBProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceDBProto : public ::google::protobuf::Message {
 public:
  RaceDBProto();
  virtual ~RaceDBProto();

  RaceDBProto(const RaceDBProto& from);

  inline RaceDBProto& operator=(const RaceDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceDBProto& default_instance();

  void Swap(RaceDBProto* other);

  // implements Message ----------------------------------------------

  RaceDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceDBProto& from);
  void MergeFrom(const RaceDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 race = 1;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 1;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // repeated .proto_ff.RaceFactionDBProto info_lst = 2;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 2;
  inline const ::proto_ff::RaceFactionDBProto& info_lst(int index) const;
  inline ::proto_ff::RaceFactionDBProto* mutable_info_lst(int index);
  inline ::proto_ff::RaceFactionDBProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionDBProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionDBProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.RaceDBProto)
 private:
  inline void set_has_race();
  inline void clear_has_race();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionDBProto > info_lst_;
  ::google::protobuf::int32 race_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static RaceDBProto* default_instance_;
};
// -------------------------------------------------------------------

class WarRankDBProto : public ::google::protobuf::Message {
 public:
  WarRankDBProto();
  virtual ~WarRankDBProto();

  WarRankDBProto(const WarRankDBProto& from);

  inline WarRankDBProto& operator=(const WarRankDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarRankDBProto& default_instance();

  void Swap(WarRankDBProto* other);

  // implements Message ----------------------------------------------

  WarRankDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarRankDBProto& from);
  void MergeFrom(const WarRankDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.WarRankDBProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static WarRankDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionWarDBData : public ::google::protobuf::Message {
 public:
  FactionWarDBData();
  virtual ~FactionWarDBData();

  FactionWarDBData(const FactionWarDBData& from);

  inline FactionWarDBData& operator=(const FactionWarDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWarDBData& default_instance();

  void Swap(FactionWarDBData* other);

  // implements Message ----------------------------------------------

  FactionWarDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWarDBData& from);
  void MergeFrom(const FactionWarDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RaceDBProto race = 1;
  inline int race_size() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 1;
  inline const ::proto_ff::RaceDBProto& race(int index) const;
  inline ::proto_ff::RaceDBProto* mutable_race(int index);
  inline ::proto_ff::RaceDBProto* add_race();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceDBProto >&
      race() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceDBProto >*
      mutable_race();

  // repeated .proto_ff.WarRankDBProto rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::proto_ff::WarRankDBProto& rank(int index) const;
  inline ::proto_ff::WarRankDBProto* mutable_rank(int index);
  inline ::proto_ff::WarRankDBProto* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankDBProto >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankDBProto >*
      mutable_rank();

  // optional uint32 win_id = 3;
  inline bool has_win_id() const;
  inline void clear_win_id();
  static const int kWinIdFieldNumber = 3;
  inline ::google::protobuf::uint32 win_id() const;
  inline void set_win_id(::google::protobuf::uint32 value);

  // optional bytes win_name = 4;
  inline bool has_win_name() const;
  inline void clear_win_name();
  static const int kWinNameFieldNumber = 4;
  inline const ::std::string& win_name() const;
  inline void set_win_name(const ::std::string& value);
  inline void set_win_name(const char* value);
  inline void set_win_name(const void* value, size_t size);
  inline ::std::string* mutable_win_name();
  inline ::std::string* release_win_name();
  inline void set_allocated_win_name(::std::string* win_name);

  // optional int32 win_num = 5;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 5;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional uint32 win_zid = 6;
  inline bool has_win_zid() const;
  inline void clear_win_zid();
  static const int kWinZidFieldNumber = 6;
  inline ::google::protobuf::uint32 win_zid() const;
  inline void set_win_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWarDBData)
 private:
  inline void set_has_win_id();
  inline void clear_has_win_id();
  inline void set_has_win_name();
  inline void clear_has_win_name();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_win_zid();
  inline void clear_has_win_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceDBProto > race_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankDBProto > rank_;
  ::std::string* win_name_;
  ::google::protobuf::uint32 win_id_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::uint32 win_zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FactionWarDBData* default_instance_;
};
// -------------------------------------------------------------------

class DigEggLogDBProto : public ::google::protobuf::Message {
 public:
  DigEggLogDBProto();
  virtual ~DigEggLogDBProto();

  DigEggLogDBProto(const DigEggLogDBProto& from);

  inline DigEggLogDBProto& operator=(const DigEggLogDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DigEggLogDBProto& default_instance();

  void Swap(DigEggLogDBProto* other);

  // implements Message ----------------------------------------------

  DigEggLogDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DigEggLogDBProto& from);
  void MergeFrom(const DigEggLogDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DigEggLogDBProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static DigEggLogDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggLogDBProto : public ::google::protobuf::Message {
 public:
  FestDigEggLogDBProto();
  virtual ~FestDigEggLogDBProto();

  FestDigEggLogDBProto(const FestDigEggLogDBProto& from);

  inline FestDigEggLogDBProto& operator=(const FestDigEggLogDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggLogDBProto& default_instance();

  void Swap(FestDigEggLogDBProto* other);

  // implements Message ----------------------------------------------

  FestDigEggLogDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggLogDBProto& from);
  void MergeFrom(const FestDigEggLogDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // repeated .proto_ff.DigEggLogDBProto info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::DigEggLogDBProto& info(int index) const;
  inline ::proto_ff::DigEggLogDBProto* mutable_info(int index);
  inline ::proto_ff::DigEggLogDBProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DigEggLogDBProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DigEggLogDBProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggLogDBProto)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::DigEggLogDBProto > info_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggLogDBProto* default_instance_;
};
// -------------------------------------------------------------------

class FestDigEggLogDBData : public ::google::protobuf::Message {
 public:
  FestDigEggLogDBData();
  virtual ~FestDigEggLogDBData();

  FestDigEggLogDBData(const FestDigEggLogDBData& from);

  inline FestDigEggLogDBData& operator=(const FestDigEggLogDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDigEggLogDBData& default_instance();

  void Swap(FestDigEggLogDBData* other);

  // implements Message ----------------------------------------------

  FestDigEggLogDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDigEggLogDBData& from);
  void MergeFrom(const FestDigEggLogDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDigEggLogDBProto log = 1;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::proto_ff::FestDigEggLogDBProto& log(int index) const;
  inline ::proto_ff::FestDigEggLogDBProto* mutable_log(int index);
  inline ::proto_ff::FestDigEggLogDBProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogDBProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogDBProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDigEggLogDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogDBProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDigEggLogDBData* default_instance_;
};
// -------------------------------------------------------------------

class FestRTurnableLogDBData : public ::google::protobuf::Message {
 public:
  FestRTurnableLogDBData();
  virtual ~FestRTurnableLogDBData();

  FestRTurnableLogDBData(const FestRTurnableLogDBData& from);

  inline FestRTurnableLogDBData& operator=(const FestRTurnableLogDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestRTurnableLogDBData& default_instance();

  void Swap(FestRTurnableLogDBData* other);

  // implements Message ----------------------------------------------

  FestRTurnableLogDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestRTurnableLogDBData& from);
  void MergeFrom(const FestRTurnableLogDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestRTurnableLogDBProto log = 1;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::proto_ff::FestRTurnableLogDBProto& log(int index) const;
  inline ::proto_ff::FestRTurnableLogDBProto* mutable_log(int index);
  inline ::proto_ff::FestRTurnableLogDBProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableLogDBProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableLogDBProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.FestRTurnableLogDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableLogDBProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestRTurnableLogDBData* default_instance_;
};
// -------------------------------------------------------------------

class FestDonateDBData : public ::google::protobuf::Message {
 public:
  FestDonateDBData();
  virtual ~FestDonateDBData();

  FestDonateDBData(const FestDonateDBData& from);

  inline FestDonateDBData& operator=(const FestDonateDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDonateDBData& default_instance();

  void Swap(FestDonateDBData* other);

  // implements Message ----------------------------------------------

  FestDonateDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDonateDBData& from);
  void MergeFrom(const FestDonateDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.DonateServerDBProto data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::DonateServerDBProto& data(int index) const;
  inline ::proto_ff::DonateServerDBProto* mutable_data(int index);
  inline ::proto_ff::DonateServerDBProto* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DonateServerDBProto >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DonateServerDBProto >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDonateDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::DonateServerDBProto > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDonateDBData* default_instance_;
};
// -------------------------------------------------------------------

class FestDrawPizeLogDBData : public ::google::protobuf::Message {
 public:
  FestDrawPizeLogDBData();
  virtual ~FestDrawPizeLogDBData();

  FestDrawPizeLogDBData(const FestDrawPizeLogDBData& from);

  inline FestDrawPizeLogDBData& operator=(const FestDrawPizeLogDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestDrawPizeLogDBData& default_instance();

  void Swap(FestDrawPizeLogDBData* other);

  // implements Message ----------------------------------------------

  FestDrawPizeLogDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestDrawPizeLogDBData& from);
  void MergeFrom(const FestDrawPizeLogDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FestDrawPizeLogDBProto log = 1;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::proto_ff::FestDrawPizeLogDBProto& log(int index) const;
  inline ::proto_ff::FestDrawPizeLogDBProto* mutable_log(int index);
  inline ::proto_ff::FestDrawPizeLogDBProto* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDrawPizeLogDBProto >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDrawPizeLogDBProto >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:proto_ff.FestDrawPizeLogDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDrawPizeLogDBProto > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static FestDrawPizeLogDBData* default_instance_;
};
// -------------------------------------------------------------------

class GoodsDB : public ::google::protobuf::Message {
 public:
  GoodsDB();
  virtual ~GoodsDB();

  GoodsDB(const GoodsDB& from);

  inline GoodsDB& operator=(const GoodsDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsDB& default_instance();

  void Swap(GoodsDB* other);

  // implements Message ----------------------------------------------

  GoodsDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsDB& from);
  void MergeFrom(const GoodsDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // optional int32 market_type = 2;
  inline bool has_market_type() const;
  inline void clear_market_type();
  static const int kMarketTypeFieldNumber = 2;
  inline ::google::protobuf::int32 market_type() const;
  inline void set_market_type(::google::protobuf::int32 value);

  // optional uint64 market_owner = 3;
  inline bool has_market_owner() const;
  inline void clear_market_owner();
  static const int kMarketOwnerFieldNumber = 3;
  inline ::google::protobuf::uint64 market_owner() const;
  inline void set_market_owner(::google::protobuf::uint64 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 start_time = 5;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional uint64 vie_id = 7;
  inline bool has_vie_id() const;
  inline void clear_vie_id();
  static const int kVieIdFieldNumber = 7;
  inline ::google::protobuf::uint64 vie_id() const;
  inline void set_vie_id(::google::protobuf::uint64 value);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 isdelete = 9;
  inline bool has_isdelete() const;
  inline void clear_isdelete();
  static const int kIsdeleteFieldNumber = 9;
  inline ::google::protobuf::int32 isdelete() const;
  inline void set_isdelete(::google::protobuf::int32 value);

  // optional uint64 cmpt_time = 10;
  inline bool has_cmpt_time() const;
  inline void clear_cmpt_time();
  static const int kCmptTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 cmpt_time() const;
  inline void set_cmpt_time(::google::protobuf::uint64 value);

  // optional int32 cur_price = 11;
  inline bool has_cur_price() const;
  inline void clear_cur_price();
  static const int kCurPriceFieldNumber = 11;
  inline ::google::protobuf::int32 cur_price() const;
  inline void set_cur_price(::google::protobuf::int32 value);

  // optional int32 cmpt_price = 12;
  inline bool has_cmpt_price() const;
  inline void clear_cmpt_price();
  static const int kCmptPriceFieldNumber = 12;
  inline ::google::protobuf::int32 cmpt_price() const;
  inline void set_cmpt_price(::google::protobuf::int32 value);

  // optional uint64 buyer_id = 13;
  inline bool has_buyer_id() const;
  inline void clear_buyer_id();
  static const int kBuyerIdFieldNumber = 13;
  inline ::google::protobuf::uint64 buyer_id() const;
  inline void set_buyer_id(::google::protobuf::uint64 value);

  // optional uint64 vie_time = 14;
  inline bool has_vie_time() const;
  inline void clear_vie_time();
  static const int kVieTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 vie_time() const;
  inline void set_vie_time(::google::protobuf::uint64 value);

  // optional .proto_ff.ItemProtoInfo item_data = 15;
  inline bool has_item_data() const;
  inline void clear_item_data();
  static const int kItemDataFieldNumber = 15;
  inline const ::proto_ff::ItemProtoInfo& item_data() const;
  inline ::proto_ff::ItemProtoInfo* mutable_item_data();
  inline ::proto_ff::ItemProtoInfo* release_item_data();
  inline void set_allocated_item_data(::proto_ff::ItemProtoInfo* item_data);

  // optional int32 item_price = 16;
  inline bool has_item_price() const;
  inline void clear_item_price();
  static const int kItemPriceFieldNumber = 16;
  inline ::google::protobuf::int32 item_price() const;
  inline void set_item_price(::google::protobuf::int32 value);

  // optional bytes take_list = 17;
  inline bool has_take_list() const;
  inline void clear_take_list();
  static const int kTakeListFieldNumber = 17;
  inline const ::std::string& take_list() const;
  inline void set_take_list(const ::std::string& value);
  inline void set_take_list(const char* value);
  inline void set_take_list(const void* value, size_t size);
  inline ::std::string* mutable_take_list();
  inline ::std::string* release_take_list();
  inline void set_allocated_take_list(::std::string* take_list);

  // optional bytes vie_list = 18;
  inline bool has_vie_list() const;
  inline void clear_vie_list();
  static const int kVieListFieldNumber = 18;
  inline const ::std::string& vie_list() const;
  inline void set_vie_list(const ::std::string& value);
  inline void set_vie_list(const char* value);
  inline void set_vie_list(const void* value, size_t size);
  inline ::std::string* mutable_vie_list();
  inline ::std::string* release_vie_list();
  inline void set_allocated_vie_list(::std::string* vie_list);

  // optional uint64 ready_time = 19;
  inline bool has_ready_time() const;
  inline void clear_ready_time();
  static const int kReadyTimeFieldNumber = 19;
  inline ::google::protobuf::uint64 ready_time() const;
  inline void set_ready_time(::google::protobuf::uint64 value);

  // optional int32 is_take = 20;
  inline bool has_is_take() const;
  inline void clear_is_take();
  static const int kIsTakeFieldNumber = 20;
  inline ::google::protobuf::int32 is_take() const;
  inline void set_is_take(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GoodsDB)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_market_type();
  inline void clear_has_market_type();
  inline void set_has_market_owner();
  inline void clear_has_market_owner();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_vie_id();
  inline void clear_has_vie_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_isdelete();
  inline void clear_has_isdelete();
  inline void set_has_cmpt_time();
  inline void clear_has_cmpt_time();
  inline void set_has_cur_price();
  inline void clear_has_cur_price();
  inline void set_has_cmpt_price();
  inline void clear_has_cmpt_price();
  inline void set_has_buyer_id();
  inline void clear_has_buyer_id();
  inline void set_has_vie_time();
  inline void clear_has_vie_time();
  inline void set_has_item_data();
  inline void clear_has_item_data();
  inline void set_has_item_price();
  inline void clear_has_item_price();
  inline void set_has_take_list();
  inline void clear_has_take_list();
  inline void set_has_vie_list();
  inline void clear_has_vie_list();
  inline void set_has_ready_time();
  inline void clear_has_ready_time();
  inline void set_has_is_take();
  inline void clear_has_is_take();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 order_id_;
  ::google::protobuf::uint64 market_owner_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::int32 market_type_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 vie_id_;
  ::google::protobuf::uint64 cmpt_time_;
  ::google::protobuf::int32 isdelete_;
  ::google::protobuf::int32 cur_price_;
  ::google::protobuf::uint64 buyer_id_;
  ::google::protobuf::uint64 vie_time_;
  ::google::protobuf::int32 cmpt_price_;
  ::google::protobuf::int32 item_price_;
  ::proto_ff::ItemProtoInfo* item_data_;
  ::std::string* take_list_;
  ::std::string* vie_list_;
  ::google::protobuf::uint64 ready_time_;
  ::google::protobuf::int32 is_take_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static GoodsDB* default_instance_;
};
// -------------------------------------------------------------------

class LoadGoodsReq : public ::google::protobuf::Message {
 public:
  LoadGoodsReq();
  virtual ~LoadGoodsReq();

  LoadGoodsReq(const LoadGoodsReq& from);

  inline LoadGoodsReq& operator=(const LoadGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadGoodsReq& default_instance();

  void Swap(LoadGoodsReq* other);

  // implements Message ----------------------------------------------

  LoadGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadGoodsReq& from);
  void MergeFrom(const LoadGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LoadGoodsReq)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 start_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static LoadGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

class MarketDBLoadRsp : public ::google::protobuf::Message {
 public:
  MarketDBLoadRsp();
  virtual ~MarketDBLoadRsp();

  MarketDBLoadRsp(const MarketDBLoadRsp& from);

  inline MarketDBLoadRsp& operator=(const MarketDBLoadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketDBLoadRsp& default_instance();

  void Swap(MarketDBLoadRsp* other);

  // implements Message ----------------------------------------------

  MarketDBLoadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketDBLoadRsp& from);
  void MergeFrom(const MarketDBLoadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GoodsDB infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::proto_ff::GoodsDB& infos(int index) const;
  inline ::proto_ff::GoodsDB* mutable_infos(int index);
  inline ::proto_ff::GoodsDB* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GoodsDB >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GoodsDB >*
      mutable_infos();

  // optional int32 is_finish = 2;
  inline bool has_is_finish() const;
  inline void clear_is_finish();
  static const int kIsFinishFieldNumber = 2;
  inline ::google::protobuf::int32 is_finish() const;
  inline void set_is_finish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MarketDBLoadRsp)
 private:
  inline void set_has_is_finish();
  inline void clear_has_is_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GoodsDB > infos_;
  ::google::protobuf::int32 is_finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarketDBLoadRsp* default_instance_;
};
// -------------------------------------------------------------------

class MarketSaveReq : public ::google::protobuf::Message {
 public:
  MarketSaveReq();
  virtual ~MarketSaveReq();

  MarketSaveReq(const MarketSaveReq& from);

  inline MarketSaveReq& operator=(const MarketSaveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketSaveReq& default_instance();

  void Swap(MarketSaveReq* other);

  // implements Message ----------------------------------------------

  MarketSaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketSaveReq& from);
  void MergeFrom(const MarketSaveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.GoodsDB info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::GoodsDB& info() const;
  inline ::proto_ff::GoodsDB* mutable_info();
  inline ::proto_ff::GoodsDB* release_info();
  inline void set_allocated_info(::proto_ff::GoodsDB* info);

  // @@protoc_insertion_point(class_scope:proto_ff.MarketSaveReq)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::GoodsDB* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarketSaveReq* default_instance_;
};
// -------------------------------------------------------------------

class MarketDelReq : public ::google::protobuf::Message {
 public:
  MarketDelReq();
  virtual ~MarketDelReq();

  MarketDelReq(const MarketDelReq& from);

  inline MarketDelReq& operator=(const MarketDelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketDelReq& default_instance();

  void Swap(MarketDelReq* other);

  // implements Message ----------------------------------------------

  MarketDelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketDelReq& from);
  void MergeFrom(const MarketDelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MarketDelReq)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 order_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static MarketDelReq* default_instance_;
};
// -------------------------------------------------------------------

class CandleHarmDBProto : public ::google::protobuf::Message {
 public:
  CandleHarmDBProto();
  virtual ~CandleHarmDBProto();

  CandleHarmDBProto(const CandleHarmDBProto& from);

  inline CandleHarmDBProto& operator=(const CandleHarmDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CandleHarmDBProto& default_instance();

  void Swap(CandleHarmDBProto* other);

  // implements Message ----------------------------------------------

  CandleHarmDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CandleHarmDBProto& from);
  void MergeFrom(const CandleHarmDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CandleHarmDBProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CandleHarmDBProto* default_instance_;
};
// -------------------------------------------------------------------

class CandleDBData : public ::google::protobuf::Message {
 public:
  CandleDBData();
  virtual ~CandleDBData();

  CandleDBData(const CandleDBData& from);

  inline CandleDBData& operator=(const CandleDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CandleDBData& default_instance();

  void Swap(CandleDBData* other);

  // implements Message ----------------------------------------------

  CandleDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CandleDBData& from);
  void MergeFrom(const CandleDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .proto_ff.CandleHarmDBProto ham = 2;
  inline int ham_size() const;
  inline void clear_ham();
  static const int kHamFieldNumber = 2;
  inline const ::proto_ff::CandleHarmDBProto& ham(int index) const;
  inline ::proto_ff::CandleHarmDBProto* mutable_ham(int index);
  inline ::proto_ff::CandleHarmDBProto* add_ham();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CandleHarmDBProto >&
      ham() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CandleHarmDBProto >*
      mutable_ham();

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CandleDBData)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::CandleHarmDBProto > ham_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy_2eproto();
  friend void protobuf_AssignDesc_DBProxy_2eproto();
  friend void protobuf_ShutdownFile_DBProxy_2eproto();

  void InitAsDefaultInstance();
  static CandleDBData* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleReliveProto

// optional uint64 tired_time = 1;
inline bool RoleReliveProto::has_tired_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleReliveProto::set_has_tired_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleReliveProto::clear_has_tired_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleReliveProto::clear_tired_time() {
  tired_time_ = GOOGLE_ULONGLONG(0);
  clear_has_tired_time();
}
inline ::google::protobuf::uint64 RoleReliveProto::tired_time() const {
  return tired_time_;
}
inline void RoleReliveProto::set_tired_time(::google::protobuf::uint64 value) {
  set_has_tired_time();
  tired_time_ = value;
}

// optional int32 relive_num = 2;
inline bool RoleReliveProto::has_relive_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleReliveProto::set_has_relive_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleReliveProto::clear_has_relive_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleReliveProto::clear_relive_num() {
  relive_num_ = 0;
  clear_has_relive_num();
}
inline ::google::protobuf::int32 RoleReliveProto::relive_num() const {
  return relive_num_;
}
inline void RoleReliveProto::set_relive_num(::google::protobuf::int32 value) {
  set_has_relive_num();
  relive_num_ = value;
}

// optional int32 is_tired = 3;
inline bool RoleReliveProto::has_is_tired() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleReliveProto::set_has_is_tired() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleReliveProto::clear_has_is_tired() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleReliveProto::clear_is_tired() {
  is_tired_ = 0;
  clear_has_is_tired();
}
inline ::google::protobuf::int32 RoleReliveProto::is_tired() const {
  return is_tired_;
}
inline void RoleReliveProto::set_is_tired(::google::protobuf::int32 value) {
  set_has_is_tired();
  is_tired_ = value;
}

// optional uint64 mapid = 4;
inline bool RoleReliveProto::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleReliveProto::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleReliveProto::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleReliveProto::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 RoleReliveProto::mapid() const {
  return mapid_;
}
inline void RoleReliveProto::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 map_relive_num = 5;
inline bool RoleReliveProto::has_map_relive_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleReliveProto::set_has_map_relive_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleReliveProto::clear_has_map_relive_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleReliveProto::clear_map_relive_num() {
  map_relive_num_ = 0;
  clear_has_map_relive_num();
}
inline ::google::protobuf::int32 RoleReliveProto::map_relive_num() const {
  return map_relive_num_;
}
inline void RoleReliveProto::set_map_relive_num(::google::protobuf::int32 value) {
  set_has_map_relive_num();
  map_relive_num_ = value;
}

// -------------------------------------------------------------------

// RoleDBBaseData

// required bytes name = 1;
inline bool RoleDBBaseData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBBaseData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBBaseData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBBaseData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleDBBaseData::name() const {
  return *name_;
}
inline void RoleDBBaseData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleDBBaseData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleDBBaseData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleDBBaseData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleDBBaseData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleDBBaseData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 prof = 2;
inline bool RoleDBBaseData::has_prof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBBaseData::set_has_prof() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBBaseData::clear_has_prof() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBBaseData::clear_prof() {
  prof_ = 0u;
  clear_has_prof();
}
inline ::google::protobuf::uint32 RoleDBBaseData::prof() const {
  return prof_;
}
inline void RoleDBBaseData::set_prof(::google::protobuf::uint32 value) {
  set_has_prof();
  prof_ = value;
}

// required uint32 level = 3;
inline bool RoleDBBaseData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDBBaseData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDBBaseData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDBBaseData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RoleDBBaseData::level() const {
  return level_;
}
inline void RoleDBBaseData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required int64 exp = 4;
inline bool RoleDBBaseData::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBBaseData::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBBaseData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBBaseData::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 RoleDBBaseData::exp() const {
  return exp_;
}
inline void RoleDBBaseData::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// required int64 hp = 5;
inline bool RoleDBBaseData::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleDBBaseData::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleDBBaseData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleDBBaseData::clear_hp() {
  hp_ = GOOGLE_LONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::int64 RoleDBBaseData::hp() const {
  return hp_;
}
inline void RoleDBBaseData::set_hp(::google::protobuf::int64 value) {
  set_has_hp();
  hp_ = value;
}

// required int64 fight = 6;
inline bool RoleDBBaseData::has_fight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleDBBaseData::set_has_fight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleDBBaseData::clear_has_fight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleDBBaseData::clear_fight() {
  fight_ = GOOGLE_LONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::int64 RoleDBBaseData::fight() const {
  return fight_;
}
inline void RoleDBBaseData::set_fight(::google::protobuf::int64 value) {
  set_has_fight();
  fight_ = value;
}

// required uint64 createTime = 7;
inline bool RoleDBBaseData::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleDBBaseData::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleDBBaseData::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleDBBaseData::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 RoleDBBaseData::createtime() const {
  return createtime_;
}
inline void RoleDBBaseData::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required uint64 loginTime = 8;
inline bool RoleDBBaseData::has_logintime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleDBBaseData::set_has_logintime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleDBBaseData::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleDBBaseData::clear_logintime() {
  logintime_ = GOOGLE_ULONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::uint64 RoleDBBaseData::logintime() const {
  return logintime_;
}
inline void RoleDBBaseData::set_logintime(::google::protobuf::uint64 value) {
  set_has_logintime();
  logintime_ = value;
}

// required uint64 logoutTime = 9;
inline bool RoleDBBaseData::has_logouttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleDBBaseData::set_has_logouttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleDBBaseData::clear_has_logouttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleDBBaseData::clear_logouttime() {
  logouttime_ = GOOGLE_ULONGLONG(0);
  clear_has_logouttime();
}
inline ::google::protobuf::uint64 RoleDBBaseData::logouttime() const {
  return logouttime_;
}
inline void RoleDBBaseData::set_logouttime(::google::protobuf::uint64 value) {
  set_has_logouttime();
  logouttime_ = value;
}

// required uint64 enter_scene_id = 10;
inline bool RoleDBBaseData::has_enter_scene_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleDBBaseData::set_has_enter_scene_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleDBBaseData::clear_has_enter_scene_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleDBBaseData::clear_enter_scene_id() {
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_scene_id();
}
inline ::google::protobuf::uint64 RoleDBBaseData::enter_scene_id() const {
  return enter_scene_id_;
}
inline void RoleDBBaseData::set_enter_scene_id(::google::protobuf::uint64 value) {
  set_has_enter_scene_id();
  enter_scene_id_ = value;
}

// required uint64 enter_map_id = 11;
inline bool RoleDBBaseData::has_enter_map_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleDBBaseData::set_has_enter_map_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleDBBaseData::clear_has_enter_map_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleDBBaseData::clear_enter_map_id() {
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_map_id();
}
inline ::google::protobuf::uint64 RoleDBBaseData::enter_map_id() const {
  return enter_map_id_;
}
inline void RoleDBBaseData::set_enter_map_id(::google::protobuf::uint64 value) {
  set_has_enter_map_id();
  enter_map_id_ = value;
}

// required float enterposx = 12;
inline bool RoleDBBaseData::has_enterposx() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleDBBaseData::set_has_enterposx() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleDBBaseData::clear_has_enterposx() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleDBBaseData::clear_enterposx() {
  enterposx_ = 0;
  clear_has_enterposx();
}
inline float RoleDBBaseData::enterposx() const {
  return enterposx_;
}
inline void RoleDBBaseData::set_enterposx(float value) {
  set_has_enterposx();
  enterposx_ = value;
}

// required float enterposy = 13;
inline bool RoleDBBaseData::has_enterposy() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleDBBaseData::set_has_enterposy() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleDBBaseData::clear_has_enterposy() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleDBBaseData::clear_enterposy() {
  enterposy_ = 0;
  clear_has_enterposy();
}
inline float RoleDBBaseData::enterposy() const {
  return enterposy_;
}
inline void RoleDBBaseData::set_enterposy(float value) {
  set_has_enterposy();
  enterposy_ = value;
}

// required float enterposz = 14;
inline bool RoleDBBaseData::has_enterposz() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleDBBaseData::set_has_enterposz() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleDBBaseData::clear_has_enterposz() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleDBBaseData::clear_enterposz() {
  enterposz_ = 0;
  clear_has_enterposz();
}
inline float RoleDBBaseData::enterposz() const {
  return enterposz_;
}
inline void RoleDBBaseData::set_enterposz(float value) {
  set_has_enterposz();
  enterposz_ = value;
}

// optional uint64 lastsceneid = 15;
inline bool RoleDBBaseData::has_lastsceneid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleDBBaseData::set_has_lastsceneid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleDBBaseData::clear_has_lastsceneid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleDBBaseData::clear_lastsceneid() {
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_lastsceneid();
}
inline ::google::protobuf::uint64 RoleDBBaseData::lastsceneid() const {
  return lastsceneid_;
}
inline void RoleDBBaseData::set_lastsceneid(::google::protobuf::uint64 value) {
  set_has_lastsceneid();
  lastsceneid_ = value;
}

// optional uint64 lastmapid = 16;
inline bool RoleDBBaseData::has_lastmapid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleDBBaseData::set_has_lastmapid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleDBBaseData::clear_has_lastmapid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleDBBaseData::clear_lastmapid() {
  lastmapid_ = GOOGLE_ULONGLONG(0);
  clear_has_lastmapid();
}
inline ::google::protobuf::uint64 RoleDBBaseData::lastmapid() const {
  return lastmapid_;
}
inline void RoleDBBaseData::set_lastmapid(::google::protobuf::uint64 value) {
  set_has_lastmapid();
  lastmapid_ = value;
}

// optional float lastposx = 17;
inline bool RoleDBBaseData::has_lastposx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleDBBaseData::set_has_lastposx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleDBBaseData::clear_has_lastposx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleDBBaseData::clear_lastposx() {
  lastposx_ = 0;
  clear_has_lastposx();
}
inline float RoleDBBaseData::lastposx() const {
  return lastposx_;
}
inline void RoleDBBaseData::set_lastposx(float value) {
  set_has_lastposx();
  lastposx_ = value;
}

// optional float lastposy = 18;
inline bool RoleDBBaseData::has_lastposy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoleDBBaseData::set_has_lastposy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoleDBBaseData::clear_has_lastposy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoleDBBaseData::clear_lastposy() {
  lastposy_ = 0;
  clear_has_lastposy();
}
inline float RoleDBBaseData::lastposy() const {
  return lastposy_;
}
inline void RoleDBBaseData::set_lastposy(float value) {
  set_has_lastposy();
  lastposy_ = value;
}

// optional float lastposz = 19;
inline bool RoleDBBaseData::has_lastposz() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoleDBBaseData::set_has_lastposz() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoleDBBaseData::clear_has_lastposz() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoleDBBaseData::clear_lastposz() {
  lastposz_ = 0;
  clear_has_lastposz();
}
inline float RoleDBBaseData::lastposz() const {
  return lastposz_;
}
inline void RoleDBBaseData::set_lastposz(float value) {
  set_has_lastposz();
  lastposz_ = value;
}

// optional .proto_ff.RoleFacadeProto facade = 20;
inline bool RoleDBBaseData::has_facade() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoleDBBaseData::set_has_facade() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoleDBBaseData::clear_has_facade() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoleDBBaseData::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
  clear_has_facade();
}
inline const ::proto_ff::RoleFacadeProto& RoleDBBaseData::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::RoleFacadeProto* RoleDBBaseData::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::RoleFacadeProto;
  return facade_;
}
inline ::proto_ff::RoleFacadeProto* RoleDBBaseData::release_facade() {
  clear_has_facade();
  ::proto_ff::RoleFacadeProto* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void RoleDBBaseData::set_allocated_facade(::proto_ff::RoleFacadeProto* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// optional uint32 vip_level = 21;
inline bool RoleDBBaseData::has_vip_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoleDBBaseData::set_has_vip_level() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoleDBBaseData::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoleDBBaseData::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 RoleDBBaseData::vip_level() const {
  return vip_level_;
}
inline void RoleDBBaseData::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 state = 22;
inline bool RoleDBBaseData::has_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoleDBBaseData::set_has_state() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoleDBBaseData::clear_has_state() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoleDBBaseData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 RoleDBBaseData::state() const {
  return state_;
}
inline void RoleDBBaseData::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional uint64 hanguptime = 23;
inline bool RoleDBBaseData::has_hanguptime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoleDBBaseData::set_has_hanguptime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RoleDBBaseData::clear_has_hanguptime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RoleDBBaseData::clear_hanguptime() {
  hanguptime_ = GOOGLE_ULONGLONG(0);
  clear_has_hanguptime();
}
inline ::google::protobuf::uint64 RoleDBBaseData::hanguptime() const {
  return hanguptime_;
}
inline void RoleDBBaseData::set_hanguptime(::google::protobuf::uint64 value) {
  set_has_hanguptime();
  hanguptime_ = value;
}

// optional .proto_ff.RoleReliveProto relive = 24;
inline bool RoleDBBaseData::has_relive() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoleDBBaseData::set_has_relive() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoleDBBaseData::clear_has_relive() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoleDBBaseData::clear_relive() {
  if (relive_ != NULL) relive_->::proto_ff::RoleReliveProto::Clear();
  clear_has_relive();
}
inline const ::proto_ff::RoleReliveProto& RoleDBBaseData::relive() const {
  return relive_ != NULL ? *relive_ : *default_instance_->relive_;
}
inline ::proto_ff::RoleReliveProto* RoleDBBaseData::mutable_relive() {
  set_has_relive();
  if (relive_ == NULL) relive_ = new ::proto_ff::RoleReliveProto;
  return relive_;
}
inline ::proto_ff::RoleReliveProto* RoleDBBaseData::release_relive() {
  clear_has_relive();
  ::proto_ff::RoleReliveProto* temp = relive_;
  relive_ = NULL;
  return temp;
}
inline void RoleDBBaseData::set_allocated_relive(::proto_ff::RoleReliveProto* relive) {
  delete relive_;
  relive_ = relive;
  if (relive) {
    set_has_relive();
  } else {
    clear_has_relive();
  }
}

// optional int64 gold = 25;
inline bool RoleDBBaseData::has_gold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RoleDBBaseData::set_has_gold() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RoleDBBaseData::clear_has_gold() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RoleDBBaseData::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 RoleDBBaseData::gold() const {
  return gold_;
}
inline void RoleDBBaseData::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 dia = 26;
inline bool RoleDBBaseData::has_dia() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoleDBBaseData::set_has_dia() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RoleDBBaseData::clear_has_dia() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RoleDBBaseData::clear_dia() {
  dia_ = GOOGLE_LONGLONG(0);
  clear_has_dia();
}
inline ::google::protobuf::int64 RoleDBBaseData::dia() const {
  return dia_;
}
inline void RoleDBBaseData::set_dia(::google::protobuf::int64 value) {
  set_has_dia();
  dia_ = value;
}

// optional int64 bdia = 27;
inline bool RoleDBBaseData::has_bdia() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RoleDBBaseData::set_has_bdia() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RoleDBBaseData::clear_has_bdia() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RoleDBBaseData::clear_bdia() {
  bdia_ = GOOGLE_LONGLONG(0);
  clear_has_bdia();
}
inline ::google::protobuf::int64 RoleDBBaseData::bdia() const {
  return bdia_;
}
inline void RoleDBBaseData::set_bdia(::google::protobuf::int64 value) {
  set_has_bdia();
  bdia_ = value;
}

// optional int64 magic = 28;
inline bool RoleDBBaseData::has_magic() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RoleDBBaseData::set_has_magic() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RoleDBBaseData::clear_has_magic() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RoleDBBaseData::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
  clear_has_magic();
}
inline ::google::protobuf::int64 RoleDBBaseData::magic() const {
  return magic_;
}
inline void RoleDBBaseData::set_magic(::google::protobuf::int64 value) {
  set_has_magic();
  magic_ = value;
}

// optional int64 prestige = 29;
inline bool RoleDBBaseData::has_prestige() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RoleDBBaseData::set_has_prestige() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RoleDBBaseData::clear_has_prestige() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RoleDBBaseData::clear_prestige() {
  prestige_ = GOOGLE_LONGLONG(0);
  clear_has_prestige();
}
inline ::google::protobuf::int64 RoleDBBaseData::prestige() const {
  return prestige_;
}
inline void RoleDBBaseData::set_prestige(::google::protobuf::int64 value) {
  set_has_prestige();
  prestige_ = value;
}

// optional int32 contri = 30;
inline bool RoleDBBaseData::has_contri() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RoleDBBaseData::set_has_contri() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RoleDBBaseData::clear_has_contri() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RoleDBBaseData::clear_contri() {
  contri_ = 0;
  clear_has_contri();
}
inline ::google::protobuf::int32 RoleDBBaseData::contri() const {
  return contri_;
}
inline void RoleDBBaseData::set_contri(::google::protobuf::int32 value) {
  set_has_contri();
  contri_ = value;
}

// optional int64 arenacoin = 31;
inline bool RoleDBBaseData::has_arenacoin() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RoleDBBaseData::set_has_arenacoin() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RoleDBBaseData::clear_has_arenacoin() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RoleDBBaseData::clear_arenacoin() {
  arenacoin_ = GOOGLE_LONGLONG(0);
  clear_has_arenacoin();
}
inline ::google::protobuf::int64 RoleDBBaseData::arenacoin() const {
  return arenacoin_;
}
inline void RoleDBBaseData::set_arenacoin(::google::protobuf::int64 value) {
  set_has_arenacoin();
  arenacoin_ = value;
}

// optional int64 godevil_exp = 32;
inline bool RoleDBBaseData::has_godevil_exp() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RoleDBBaseData::set_has_godevil_exp() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RoleDBBaseData::clear_has_godevil_exp() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RoleDBBaseData::clear_godevil_exp() {
  godevil_exp_ = GOOGLE_LONGLONG(0);
  clear_has_godevil_exp();
}
inline ::google::protobuf::int64 RoleDBBaseData::godevil_exp() const {
  return godevil_exp_;
}
inline void RoleDBBaseData::set_godevil_exp(::google::protobuf::int64 value) {
  set_has_godevil_exp();
  godevil_exp_ = value;
}

// optional int32 godevil_level = 33;
inline bool RoleDBBaseData::has_godevil_level() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RoleDBBaseData::set_has_godevil_level() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RoleDBBaseData::clear_has_godevil_level() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RoleDBBaseData::clear_godevil_level() {
  godevil_level_ = 0;
  clear_has_godevil_level();
}
inline ::google::protobuf::int32 RoleDBBaseData::godevil_level() const {
  return godevil_level_;
}
inline void RoleDBBaseData::set_godevil_level(::google::protobuf::int32 value) {
  set_has_godevil_level();
  godevil_level_ = value;
}

// optional uint32 login_day = 34;
inline bool RoleDBBaseData::has_login_day() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RoleDBBaseData::set_has_login_day() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RoleDBBaseData::clear_has_login_day() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RoleDBBaseData::clear_login_day() {
  login_day_ = 0u;
  clear_has_login_day();
}
inline ::google::protobuf::uint32 RoleDBBaseData::login_day() const {
  return login_day_;
}
inline void RoleDBBaseData::set_login_day(::google::protobuf::uint32 value) {
  set_has_login_day();
  login_day_ = value;
}

// optional uint64 login_day_time = 35;
inline bool RoleDBBaseData::has_login_day_time() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RoleDBBaseData::set_has_login_day_time() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RoleDBBaseData::clear_has_login_day_time() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RoleDBBaseData::clear_login_day_time() {
  login_day_time_ = GOOGLE_ULONGLONG(0);
  clear_has_login_day_time();
}
inline ::google::protobuf::uint64 RoleDBBaseData::login_day_time() const {
  return login_day_time_;
}
inline void RoleDBBaseData::set_login_day_time(::google::protobuf::uint64 value) {
  set_has_login_day_time();
  login_day_time_ = value;
}

// optional int64 best_aq = 36;
inline bool RoleDBBaseData::has_best_aq() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RoleDBBaseData::set_has_best_aq() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RoleDBBaseData::clear_has_best_aq() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RoleDBBaseData::clear_best_aq() {
  best_aq_ = GOOGLE_LONGLONG(0);
  clear_has_best_aq();
}
inline ::google::protobuf::int64 RoleDBBaseData::best_aq() const {
  return best_aq_;
}
inline void RoleDBBaseData::set_best_aq(::google::protobuf::int64 value) {
  set_has_best_aq();
  best_aq_ = value;
}

// optional int64 best_lj = 37;
inline bool RoleDBBaseData::has_best_lj() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RoleDBBaseData::set_has_best_lj() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RoleDBBaseData::clear_has_best_lj() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RoleDBBaseData::clear_best_lj() {
  best_lj_ = GOOGLE_LONGLONG(0);
  clear_has_best_lj();
}
inline ::google::protobuf::int64 RoleDBBaseData::best_lj() const {
  return best_lj_;
}
inline void RoleDBBaseData::set_best_lj(::google::protobuf::int64 value) {
  set_has_best_lj();
  best_lj_ = value;
}

// optional uint32 day_prestige = 38;
inline bool RoleDBBaseData::has_day_prestige() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RoleDBBaseData::set_has_day_prestige() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RoleDBBaseData::clear_has_day_prestige() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RoleDBBaseData::clear_day_prestige() {
  day_prestige_ = 0u;
  clear_has_day_prestige();
}
inline ::google::protobuf::uint32 RoleDBBaseData::day_prestige() const {
  return day_prestige_;
}
inline void RoleDBBaseData::set_day_prestige(::google::protobuf::uint32 value) {
  set_has_day_prestige();
  day_prestige_ = value;
}

// optional uint64 prestige_time = 39;
inline bool RoleDBBaseData::has_prestige_time() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void RoleDBBaseData::set_has_prestige_time() {
  _has_bits_[1] |= 0x00000040u;
}
inline void RoleDBBaseData::clear_has_prestige_time() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void RoleDBBaseData::clear_prestige_time() {
  prestige_time_ = GOOGLE_ULONGLONG(0);
  clear_has_prestige_time();
}
inline ::google::protobuf::uint64 RoleDBBaseData::prestige_time() const {
  return prestige_time_;
}
inline void RoleDBBaseData::set_prestige_time(::google::protobuf::uint64 value) {
  set_has_prestige_time();
  prestige_time_ = value;
}

// optional uint32 pt_stage = 40;
inline bool RoleDBBaseData::has_pt_stage() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RoleDBBaseData::set_has_pt_stage() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RoleDBBaseData::clear_has_pt_stage() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RoleDBBaseData::clear_pt_stage() {
  pt_stage_ = 0u;
  clear_has_pt_stage();
}
inline ::google::protobuf::uint32 RoleDBBaseData::pt_stage() const {
  return pt_stage_;
}
inline void RoleDBBaseData::set_pt_stage(::google::protobuf::uint32 value) {
  set_has_pt_stage();
  pt_stage_ = value;
}

// optional string guide = 41;
inline bool RoleDBBaseData::has_guide() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void RoleDBBaseData::set_has_guide() {
  _has_bits_[1] |= 0x00000100u;
}
inline void RoleDBBaseData::clear_has_guide() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void RoleDBBaseData::clear_guide() {
  if (guide_ != &::google::protobuf::internal::kEmptyString) {
    guide_->clear();
  }
  clear_has_guide();
}
inline const ::std::string& RoleDBBaseData::guide() const {
  return *guide_;
}
inline void RoleDBBaseData::set_guide(const ::std::string& value) {
  set_has_guide();
  if (guide_ == &::google::protobuf::internal::kEmptyString) {
    guide_ = new ::std::string;
  }
  guide_->assign(value);
}
inline void RoleDBBaseData::set_guide(const char* value) {
  set_has_guide();
  if (guide_ == &::google::protobuf::internal::kEmptyString) {
    guide_ = new ::std::string;
  }
  guide_->assign(value);
}
inline void RoleDBBaseData::set_guide(const char* value, size_t size) {
  set_has_guide();
  if (guide_ == &::google::protobuf::internal::kEmptyString) {
    guide_ = new ::std::string;
  }
  guide_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleDBBaseData::mutable_guide() {
  set_has_guide();
  if (guide_ == &::google::protobuf::internal::kEmptyString) {
    guide_ = new ::std::string;
  }
  return guide_;
}
inline ::std::string* RoleDBBaseData::release_guide() {
  clear_has_guide();
  if (guide_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guide_;
    guide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleDBBaseData::set_allocated_guide(::std::string* guide) {
  if (guide_ != &::google::protobuf::internal::kEmptyString) {
    delete guide_;
  }
  if (guide) {
    set_has_guide();
    guide_ = guide;
  } else {
    clear_has_guide();
    guide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 battlepass_xiance = 42;
inline bool RoleDBBaseData::has_battlepass_xiance() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void RoleDBBaseData::set_has_battlepass_xiance() {
  _has_bits_[1] |= 0x00000200u;
}
inline void RoleDBBaseData::clear_has_battlepass_xiance() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void RoleDBBaseData::clear_battlepass_xiance() {
  battlepass_xiance_ = GOOGLE_LONGLONG(0);
  clear_has_battlepass_xiance();
}
inline ::google::protobuf::int64 RoleDBBaseData::battlepass_xiance() const {
  return battlepass_xiance_;
}
inline void RoleDBBaseData::set_battlepass_xiance(::google::protobuf::int64 value) {
  set_has_battlepass_xiance();
  battlepass_xiance_ = value;
}

// optional int64 battlepass_baoding = 43;
inline bool RoleDBBaseData::has_battlepass_baoding() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void RoleDBBaseData::set_has_battlepass_baoding() {
  _has_bits_[1] |= 0x00000400u;
}
inline void RoleDBBaseData::clear_has_battlepass_baoding() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void RoleDBBaseData::clear_battlepass_baoding() {
  battlepass_baoding_ = GOOGLE_LONGLONG(0);
  clear_has_battlepass_baoding();
}
inline ::google::protobuf::int64 RoleDBBaseData::battlepass_baoding() const {
  return battlepass_baoding_;
}
inline void RoleDBBaseData::set_battlepass_baoding(::google::protobuf::int64 value) {
  set_has_battlepass_baoding();
  battlepass_baoding_ = value;
}

// optional int64 findtreasure_shengfu = 44;
inline bool RoleDBBaseData::has_findtreasure_shengfu() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void RoleDBBaseData::set_has_findtreasure_shengfu() {
  _has_bits_[1] |= 0x00000800u;
}
inline void RoleDBBaseData::clear_has_findtreasure_shengfu() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void RoleDBBaseData::clear_findtreasure_shengfu() {
  findtreasure_shengfu_ = GOOGLE_LONGLONG(0);
  clear_has_findtreasure_shengfu();
}
inline ::google::protobuf::int64 RoleDBBaseData::findtreasure_shengfu() const {
  return findtreasure_shengfu_;
}
inline void RoleDBBaseData::set_findtreasure_shengfu(::google::protobuf::int64 value) {
  set_has_findtreasure_shengfu();
  findtreasure_shengfu_ = value;
}

// optional int64 findtreasure_battlesoul = 45;
inline bool RoleDBBaseData::has_findtreasure_battlesoul() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void RoleDBBaseData::set_has_findtreasure_battlesoul() {
  _has_bits_[1] |= 0x00001000u;
}
inline void RoleDBBaseData::clear_has_findtreasure_battlesoul() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void RoleDBBaseData::clear_findtreasure_battlesoul() {
  findtreasure_battlesoul_ = GOOGLE_LONGLONG(0);
  clear_has_findtreasure_battlesoul();
}
inline ::google::protobuf::int64 RoleDBBaseData::findtreasure_battlesoul() const {
  return findtreasure_battlesoul_;
}
inline void RoleDBBaseData::set_findtreasure_battlesoul(::google::protobuf::int64 value) {
  set_has_findtreasure_battlesoul();
  findtreasure_battlesoul_ = value;
}

// optional int64 holybeast_build = 46;
inline bool RoleDBBaseData::has_holybeast_build() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void RoleDBBaseData::set_has_holybeast_build() {
  _has_bits_[1] |= 0x00002000u;
}
inline void RoleDBBaseData::clear_has_holybeast_build() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void RoleDBBaseData::clear_holybeast_build() {
  holybeast_build_ = GOOGLE_LONGLONG(0);
  clear_has_holybeast_build();
}
inline ::google::protobuf::int64 RoleDBBaseData::holybeast_build() const {
  return holybeast_build_;
}
inline void RoleDBBaseData::set_holybeast_build(::google::protobuf::int64 value) {
  set_has_holybeast_build();
  holybeast_build_ = value;
}

// optional int64 magic_sum = 47;
inline bool RoleDBBaseData::has_magic_sum() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void RoleDBBaseData::set_has_magic_sum() {
  _has_bits_[1] |= 0x00004000u;
}
inline void RoleDBBaseData::clear_has_magic_sum() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void RoleDBBaseData::clear_magic_sum() {
  magic_sum_ = GOOGLE_LONGLONG(0);
  clear_has_magic_sum();
}
inline ::google::protobuf::int64 RoleDBBaseData::magic_sum() const {
  return magic_sum_;
}
inline void RoleDBBaseData::set_magic_sum(::google::protobuf::int64 value) {
  set_has_magic_sum();
  magic_sum_ = value;
}

// optional int32 subpack_type = 48;
inline bool RoleDBBaseData::has_subpack_type() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void RoleDBBaseData::set_has_subpack_type() {
  _has_bits_[1] |= 0x00008000u;
}
inline void RoleDBBaseData::clear_has_subpack_type() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void RoleDBBaseData::clear_subpack_type() {
  subpack_type_ = 0;
  clear_has_subpack_type();
}
inline ::google::protobuf::int32 RoleDBBaseData::subpack_type() const {
  return subpack_type_;
}
inline void RoleDBBaseData::set_subpack_type(::google::protobuf::int32 value) {
  set_has_subpack_type();
  subpack_type_ = value;
}

// optional int32 subpack_fetch = 49;
inline bool RoleDBBaseData::has_subpack_fetch() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void RoleDBBaseData::set_has_subpack_fetch() {
  _has_bits_[1] |= 0x00010000u;
}
inline void RoleDBBaseData::clear_has_subpack_fetch() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void RoleDBBaseData::clear_subpack_fetch() {
  subpack_fetch_ = 0;
  clear_has_subpack_fetch();
}
inline ::google::protobuf::int32 RoleDBBaseData::subpack_fetch() const {
  return subpack_fetch_;
}
inline void RoleDBBaseData::set_subpack_fetch(::google::protobuf::int32 value) {
  set_has_subpack_fetch();
  subpack_fetch_ = value;
}

// optional uint64 hunling = 50;
inline bool RoleDBBaseData::has_hunling() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void RoleDBBaseData::set_has_hunling() {
  _has_bits_[1] |= 0x00020000u;
}
inline void RoleDBBaseData::clear_has_hunling() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void RoleDBBaseData::clear_hunling() {
  hunling_ = GOOGLE_ULONGLONG(0);
  clear_has_hunling();
}
inline ::google::protobuf::uint64 RoleDBBaseData::hunling() const {
  return hunling_;
}
inline void RoleDBBaseData::set_hunling(::google::protobuf::uint64 value) {
  set_has_hunling();
  hunling_ = value;
}

// optional int32 fuwen_money = 51;
inline bool RoleDBBaseData::has_fuwen_money() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void RoleDBBaseData::set_has_fuwen_money() {
  _has_bits_[1] |= 0x00040000u;
}
inline void RoleDBBaseData::clear_has_fuwen_money() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void RoleDBBaseData::clear_fuwen_money() {
  fuwen_money_ = 0;
  clear_has_fuwen_money();
}
inline ::google::protobuf::int32 RoleDBBaseData::fuwen_money() const {
  return fuwen_money_;
}
inline void RoleDBBaseData::set_fuwen_money(::google::protobuf::int32 value) {
  set_has_fuwen_money();
  fuwen_money_ = value;
}

// optional int32 hunjing = 52;
inline bool RoleDBBaseData::has_hunjing() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void RoleDBBaseData::set_has_hunjing() {
  _has_bits_[1] |= 0x00080000u;
}
inline void RoleDBBaseData::clear_has_hunjing() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void RoleDBBaseData::clear_hunjing() {
  hunjing_ = 0;
  clear_has_hunjing();
}
inline ::google::protobuf::int32 RoleDBBaseData::hunjing() const {
  return hunjing_;
}
inline void RoleDBBaseData::set_hunjing(::google::protobuf::int32 value) {
  set_has_hunjing();
  hunjing_ = value;
}

// -------------------------------------------------------------------

// BagItemsDBData

// repeated .proto_ff.ItemProtoInfo data = 1;
inline int BagItemsDBData::data_size() const {
  return data_.size();
}
inline void BagItemsDBData::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& BagItemsDBData::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* BagItemsDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* BagItemsDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
BagItemsDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
BagItemsDBData::mutable_data() {
  return &data_;
}

// optional int32 offset = 2;
inline bool BagItemsDBData::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BagItemsDBData::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BagItemsDBData::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BagItemsDBData::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 BagItemsDBData::offset() const {
  return offset_;
}
inline void BagItemsDBData::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// BagDBSimpleData

// optional uint32 package_type = 1;
inline bool BagDBSimpleData::has_package_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BagDBSimpleData::set_has_package_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BagDBSimpleData::clear_has_package_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BagDBSimpleData::clear_package_type() {
  package_type_ = 0u;
  clear_has_package_type();
}
inline ::google::protobuf::uint32 BagDBSimpleData::package_type() const {
  return package_type_;
}
inline void BagDBSimpleData::set_package_type(::google::protobuf::uint32 value) {
  set_has_package_type();
  package_type_ = value;
}

// optional uint32 expand_num = 2;
inline bool BagDBSimpleData::has_expand_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BagDBSimpleData::set_has_expand_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BagDBSimpleData::clear_has_expand_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BagDBSimpleData::clear_expand_num() {
  expand_num_ = 0u;
  clear_has_expand_num();
}
inline ::google::protobuf::uint32 BagDBSimpleData::expand_num() const {
  return expand_num_;
}
inline void BagDBSimpleData::set_expand_num(::google::protobuf::uint32 value) {
  set_has_expand_num();
  expand_num_ = value;
}

// -------------------------------------------------------------------

// RoleDBUnitBagData

// optional bytes table_name = 1;
inline bool RoleDBUnitBagData::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBUnitBagData::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBUnitBagData::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBUnitBagData::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RoleDBUnitBagData::table_name() const {
  return *table_name_;
}
inline void RoleDBUnitBagData::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RoleDBUnitBagData::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RoleDBUnitBagData::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleDBUnitBagData::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RoleDBUnitBagData::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleDBUnitBagData::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.BagDBSimpleData simple = 2;
inline bool RoleDBUnitBagData::has_simple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBUnitBagData::set_has_simple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBUnitBagData::clear_has_simple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBUnitBagData::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::BagDBSimpleData::Clear();
  clear_has_simple();
}
inline const ::proto_ff::BagDBSimpleData& RoleDBUnitBagData::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::BagDBSimpleData* RoleDBUnitBagData::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::BagDBSimpleData;
  return simple_;
}
inline ::proto_ff::BagDBSimpleData* RoleDBUnitBagData::release_simple() {
  clear_has_simple();
  ::proto_ff::BagDBSimpleData* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void RoleDBUnitBagData::set_allocated_simple(::proto_ff::BagDBSimpleData* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// repeated .proto_ff.BagItemsDBData parts = 3;
inline int RoleDBUnitBagData::parts_size() const {
  return parts_.size();
}
inline void RoleDBUnitBagData::clear_parts() {
  parts_.Clear();
}
inline const ::proto_ff::BagItemsDBData& RoleDBUnitBagData::parts(int index) const {
  return parts_.Get(index);
}
inline ::proto_ff::BagItemsDBData* RoleDBUnitBagData::mutable_parts(int index) {
  return parts_.Mutable(index);
}
inline ::proto_ff::BagItemsDBData* RoleDBUnitBagData::add_parts() {
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BagItemsDBData >&
RoleDBUnitBagData::parts() const {
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BagItemsDBData >*
RoleDBUnitBagData::mutable_parts() {
  return &parts_;
}

// -------------------------------------------------------------------

// RoleDBBagData

// repeated .proto_ff.RoleDBUnitBagData bags = 1;
inline int RoleDBBagData::bags_size() const {
  return bags_.size();
}
inline void RoleDBBagData::clear_bags() {
  bags_.Clear();
}
inline const ::proto_ff::RoleDBUnitBagData& RoleDBBagData::bags(int index) const {
  return bags_.Get(index);
}
inline ::proto_ff::RoleDBUnitBagData* RoleDBBagData::mutable_bags(int index) {
  return bags_.Mutable(index);
}
inline ::proto_ff::RoleDBUnitBagData* RoleDBBagData::add_bags() {
  return bags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleDBUnitBagData >&
RoleDBBagData::bags() const {
  return bags_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleDBUnitBagData >*
RoleDBBagData::mutable_bags() {
  return &bags_;
}

// -------------------------------------------------------------------

// RoleDBEquipData

// repeated .proto_ff.EquipInfo infos = 1;
inline int RoleDBEquipData::infos_size() const {
  return infos_.size();
}
inline void RoleDBEquipData::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::EquipInfo& RoleDBEquipData::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::EquipInfo* RoleDBEquipData::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::EquipInfo* RoleDBEquipData::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipInfo >&
RoleDBEquipData::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipInfo >*
RoleDBEquipData::mutable_infos() {
  return &infos_;
}

// repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
inline int RoleDBEquipData::lv_attr_size() const {
  return lv_attr_.size();
}
inline void RoleDBEquipData::clear_lv_attr() {
  lv_attr_.Clear();
}
inline const ::proto_ff::EquipLvAttrInfo& RoleDBEquipData::lv_attr(int index) const {
  return lv_attr_.Get(index);
}
inline ::proto_ff::EquipLvAttrInfo* RoleDBEquipData::mutable_lv_attr(int index) {
  return lv_attr_.Mutable(index);
}
inline ::proto_ff::EquipLvAttrInfo* RoleDBEquipData::add_lv_attr() {
  return lv_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipLvAttrInfo >&
RoleDBEquipData::lv_attr() const {
  return lv_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::EquipLvAttrInfo >*
RoleDBEquipData::mutable_lv_attr() {
  return &lv_attr_;
}

// optional uint32 stove_level = 3;
inline bool RoleDBEquipData::has_stove_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDBEquipData::set_has_stove_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDBEquipData::clear_has_stove_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDBEquipData::clear_stove_level() {
  stove_level_ = 0u;
  clear_has_stove_level();
}
inline ::google::protobuf::uint32 RoleDBEquipData::stove_level() const {
  return stove_level_;
}
inline void RoleDBEquipData::set_stove_level(::google::protobuf::uint32 value) {
  set_has_stove_level();
  stove_level_ = value;
}

// optional uint64 stove_exp = 4;
inline bool RoleDBEquipData::has_stove_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBEquipData::set_has_stove_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBEquipData::clear_has_stove_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBEquipData::clear_stove_exp() {
  stove_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_stove_exp();
}
inline ::google::protobuf::uint64 RoleDBEquipData::stove_exp() const {
  return stove_exp_;
}
inline void RoleDBEquipData::set_stove_exp(::google::protobuf::uint64 value) {
  set_has_stove_exp();
  stove_exp_ = value;
}

// -------------------------------------------------------------------

// RoleDBTaskData

// -------------------------------------------------------------------

// GrowPartEntryDBInfo

// optional int64 id = 1;
inline bool GrowPartEntryDBInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowPartEntryDBInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowPartEntryDBInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowPartEntryDBInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 GrowPartEntryDBInfo::id() const {
  return id_;
}
inline void GrowPartEntryDBInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 lv = 2;
inline bool GrowPartEntryDBInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowPartEntryDBInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowPartEntryDBInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowPartEntryDBInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 GrowPartEntryDBInfo::lv() const {
  return lv_;
}
inline void GrowPartEntryDBInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int64 time = 3;
inline bool GrowPartEntryDBInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GrowPartEntryDBInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GrowPartEntryDBInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GrowPartEntryDBInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 GrowPartEntryDBInfo::time() const {
  return time_;
}
inline void GrowPartEntryDBInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GrowPartDBData

// optional int32 type = 1;
inline bool GrowPartDBData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowPartDBData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowPartDBData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowPartDBData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GrowPartDBData::type() const {
  return type_;
}
inline void GrowPartDBData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
inline int GrowPartDBData::entrys_size() const {
  return entrys_.size();
}
inline void GrowPartDBData::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::GrowPartEntryDBInfo& GrowPartDBData::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::GrowPartEntryDBInfo* GrowPartDBData::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::GrowPartEntryDBInfo* GrowPartDBData::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartEntryDBInfo >&
GrowPartDBData::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartEntryDBInfo >*
GrowPartDBData::mutable_entrys() {
  return &entrys_;
}

// optional int64 curId = 3;
inline bool GrowPartDBData::has_curid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GrowPartDBData::set_has_curid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GrowPartDBData::clear_has_curid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GrowPartDBData::clear_curid() {
  curid_ = GOOGLE_LONGLONG(0);
  clear_has_curid();
}
inline ::google::protobuf::int64 GrowPartDBData::curid() const {
  return curid_;
}
inline void GrowPartDBData::set_curid(::google::protobuf::int64 value) {
  set_has_curid();
  curid_ = value;
}

// -------------------------------------------------------------------

// GrowDBData

// repeated .proto_ff.GrowPartDBData parts = 1;
inline int GrowDBData::parts_size() const {
  return parts_.size();
}
inline void GrowDBData::clear_parts() {
  parts_.Clear();
}
inline const ::proto_ff::GrowPartDBData& GrowDBData::parts(int index) const {
  return parts_.Get(index);
}
inline ::proto_ff::GrowPartDBData* GrowDBData::mutable_parts(int index) {
  return parts_.Mutable(index);
}
inline ::proto_ff::GrowPartDBData* GrowDBData::add_parts() {
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartDBData >&
GrowDBData::parts() const {
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GrowPartDBData >*
GrowDBData::mutable_parts() {
  return &parts_;
}

// -------------------------------------------------------------------

// DayUseItemData

// repeated .proto_ff.ComPair64 info = 1;
inline int DayUseItemData::info_size() const {
  return info_.size();
}
inline void DayUseItemData::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair64& DayUseItemData::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair64* DayUseItemData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair64* DayUseItemData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
DayUseItemData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
DayUseItemData::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// CharacterArenaData

// optional uint32 challengeTimes = 1;
inline bool CharacterArenaData::has_challengetimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterArenaData::set_has_challengetimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterArenaData::clear_has_challengetimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterArenaData::clear_challengetimes() {
  challengetimes_ = 0u;
  clear_has_challengetimes();
}
inline ::google::protobuf::uint32 CharacterArenaData::challengetimes() const {
  return challengetimes_;
}
inline void CharacterArenaData::set_challengetimes(::google::protobuf::uint32 value) {
  set_has_challengetimes();
  challengetimes_ = value;
}

// optional uint64 updateTime = 2;
inline bool CharacterArenaData::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterArenaData::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterArenaData::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterArenaData::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 CharacterArenaData::updatetime() const {
  return updatetime_;
}
inline void CharacterArenaData::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional uint32 historyRankId = 3 [default = 20001];
inline bool CharacterArenaData::has_historyrankid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterArenaData::set_has_historyrankid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterArenaData::clear_has_historyrankid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterArenaData::clear_historyrankid() {
  historyrankid_ = 20001u;
  clear_has_historyrankid();
}
inline ::google::protobuf::uint32 CharacterArenaData::historyrankid() const {
  return historyrankid_;
}
inline void CharacterArenaData::set_historyrankid(::google::protobuf::uint32 value) {
  set_has_historyrankid();
  historyrankid_ = value;
}

// optional uint32 buyChallengeTimes = 4;
inline bool CharacterArenaData::has_buychallengetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterArenaData::set_has_buychallengetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterArenaData::clear_has_buychallengetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterArenaData::clear_buychallengetimes() {
  buychallengetimes_ = 0u;
  clear_has_buychallengetimes();
}
inline ::google::protobuf::uint32 CharacterArenaData::buychallengetimes() const {
  return buychallengetimes_;
}
inline void CharacterArenaData::set_buychallengetimes(::google::protobuf::uint32 value) {
  set_has_buychallengetimes();
  buychallengetimes_ = value;
}

// repeated .proto_ff.ArenaChallResult result = 5;
inline int CharacterArenaData::result_size() const {
  return result_.size();
}
inline void CharacterArenaData::clear_result() {
  result_.Clear();
}
inline const ::proto_ff::ArenaChallResult& CharacterArenaData::result(int index) const {
  return result_.Get(index);
}
inline ::proto_ff::ArenaChallResult* CharacterArenaData::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::proto_ff::ArenaChallResult* CharacterArenaData::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaChallResult >&
CharacterArenaData::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaChallResult >*
CharacterArenaData::mutable_result() {
  return &result_;
}

// repeated .proto_ff.ChallArenaReward chall_reward = 7;
inline int CharacterArenaData::chall_reward_size() const {
  return chall_reward_.size();
}
inline void CharacterArenaData::clear_chall_reward() {
  chall_reward_.Clear();
}
inline const ::proto_ff::ChallArenaReward& CharacterArenaData::chall_reward(int index) const {
  return chall_reward_.Get(index);
}
inline ::proto_ff::ChallArenaReward* CharacterArenaData::mutable_chall_reward(int index) {
  return chall_reward_.Mutable(index);
}
inline ::proto_ff::ChallArenaReward* CharacterArenaData::add_chall_reward() {
  return chall_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ChallArenaReward >&
CharacterArenaData::chall_reward() const {
  return chall_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ChallArenaReward >*
CharacterArenaData::mutable_chall_reward() {
  return &chall_reward_;
}

// optional int32 allChallengeTimes = 8;
inline bool CharacterArenaData::has_allchallengetimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterArenaData::set_has_allchallengetimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterArenaData::clear_has_allchallengetimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterArenaData::clear_allchallengetimes() {
  allchallengetimes_ = 0;
  clear_has_allchallengetimes();
}
inline ::google::protobuf::int32 CharacterArenaData::allchallengetimes() const {
  return allchallengetimes_;
}
inline void CharacterArenaData::set_allchallengetimes(::google::protobuf::int32 value) {
  set_has_allchallengetimes();
  allchallengetimes_ = value;
}

// optional int32 rank_id = 9;
inline bool CharacterArenaData::has_rank_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterArenaData::set_has_rank_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterArenaData::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterArenaData::clear_rank_id() {
  rank_id_ = 0;
  clear_has_rank_id();
}
inline ::google::protobuf::int32 CharacterArenaData::rank_id() const {
  return rank_id_;
}
inline void CharacterArenaData::set_rank_id(::google::protobuf::int32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// -------------------------------------------------------------------

// MiniDBData

// optional uint64 lastTime = 1;
inline bool MiniDBData::has_lasttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MiniDBData::set_has_lasttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MiniDBData::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MiniDBData::clear_lasttime() {
  lasttime_ = GOOGLE_ULONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::uint64 MiniDBData::lasttime() const {
  return lasttime_;
}
inline void MiniDBData::set_lasttime(::google::protobuf::uint64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// optional .proto_ff.DayUseItemData useItem = 2;
inline bool MiniDBData::has_useitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiniDBData::set_has_useitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiniDBData::clear_has_useitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiniDBData::clear_useitem() {
  if (useitem_ != NULL) useitem_->::proto_ff::DayUseItemData::Clear();
  clear_has_useitem();
}
inline const ::proto_ff::DayUseItemData& MiniDBData::useitem() const {
  return useitem_ != NULL ? *useitem_ : *default_instance_->useitem_;
}
inline ::proto_ff::DayUseItemData* MiniDBData::mutable_useitem() {
  set_has_useitem();
  if (useitem_ == NULL) useitem_ = new ::proto_ff::DayUseItemData;
  return useitem_;
}
inline ::proto_ff::DayUseItemData* MiniDBData::release_useitem() {
  clear_has_useitem();
  ::proto_ff::DayUseItemData* temp = useitem_;
  useitem_ = NULL;
  return temp;
}
inline void MiniDBData::set_allocated_useitem(::proto_ff::DayUseItemData* useitem) {
  delete useitem_;
  useitem_ = useitem;
  if (useitem) {
    set_has_useitem();
  } else {
    clear_has_useitem();
  }
}

// optional .proto_ff.CharacterArenaData arena_data = 3;
inline bool MiniDBData::has_arena_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MiniDBData::set_has_arena_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MiniDBData::clear_has_arena_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MiniDBData::clear_arena_data() {
  if (arena_data_ != NULL) arena_data_->::proto_ff::CharacterArenaData::Clear();
  clear_has_arena_data();
}
inline const ::proto_ff::CharacterArenaData& MiniDBData::arena_data() const {
  return arena_data_ != NULL ? *arena_data_ : *default_instance_->arena_data_;
}
inline ::proto_ff::CharacterArenaData* MiniDBData::mutable_arena_data() {
  set_has_arena_data();
  if (arena_data_ == NULL) arena_data_ = new ::proto_ff::CharacterArenaData;
  return arena_data_;
}
inline ::proto_ff::CharacterArenaData* MiniDBData::release_arena_data() {
  clear_has_arena_data();
  ::proto_ff::CharacterArenaData* temp = arena_data_;
  arena_data_ = NULL;
  return temp;
}
inline void MiniDBData::set_allocated_arena_data(::proto_ff::CharacterArenaData* arena_data) {
  delete arena_data_;
  arena_data_ = arena_data;
  if (arena_data) {
    set_has_arena_data();
  } else {
    clear_has_arena_data();
  }
}

// repeated .proto_ff.ComPair64 use_item_add_attr = 4;
inline int MiniDBData::use_item_add_attr_size() const {
  return use_item_add_attr_.size();
}
inline void MiniDBData::clear_use_item_add_attr() {
  use_item_add_attr_.Clear();
}
inline const ::proto_ff::ComPair64& MiniDBData::use_item_add_attr(int index) const {
  return use_item_add_attr_.Get(index);
}
inline ::proto_ff::ComPair64* MiniDBData::mutable_use_item_add_attr(int index) {
  return use_item_add_attr_.Mutable(index);
}
inline ::proto_ff::ComPair64* MiniDBData::add_use_item_add_attr() {
  return use_item_add_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
MiniDBData::use_item_add_attr() const {
  return use_item_add_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
MiniDBData::mutable_use_item_add_attr() {
  return &use_item_add_attr_;
}

// -------------------------------------------------------------------

// FacadeDataInfo

// optional uint32 facade_type = 1;
inline bool FacadeDataInfo::has_facade_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FacadeDataInfo::set_has_facade_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FacadeDataInfo::clear_has_facade_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FacadeDataInfo::clear_facade_type() {
  facade_type_ = 0u;
  clear_has_facade_type();
}
inline ::google::protobuf::uint32 FacadeDataInfo::facade_type() const {
  return facade_type_;
}
inline void FacadeDataInfo::set_facade_type(::google::protobuf::uint32 value) {
  set_has_facade_type();
  facade_type_ = value;
}

// optional uint64 facade_id = 2;
inline bool FacadeDataInfo::has_facade_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FacadeDataInfo::set_has_facade_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FacadeDataInfo::clear_has_facade_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FacadeDataInfo::clear_facade_id() {
  facade_id_ = GOOGLE_ULONGLONG(0);
  clear_has_facade_id();
}
inline ::google::protobuf::uint64 FacadeDataInfo::facade_id() const {
  return facade_id_;
}
inline void FacadeDataInfo::set_facade_id(::google::protobuf::uint64 value) {
  set_has_facade_id();
  facade_id_ = value;
}

// optional uint32 facade_lev = 3;
inline bool FacadeDataInfo::has_facade_lev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FacadeDataInfo::set_has_facade_lev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FacadeDataInfo::clear_has_facade_lev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FacadeDataInfo::clear_facade_lev() {
  facade_lev_ = 0u;
  clear_has_facade_lev();
}
inline ::google::protobuf::uint32 FacadeDataInfo::facade_lev() const {
  return facade_lev_;
}
inline void FacadeDataInfo::set_facade_lev(::google::protobuf::uint32 value) {
  set_has_facade_lev();
  facade_lev_ = value;
}

// optional uint64 facade_exp = 4;
inline bool FacadeDataInfo::has_facade_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FacadeDataInfo::set_has_facade_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FacadeDataInfo::clear_has_facade_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FacadeDataInfo::clear_facade_exp() {
  facade_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_facade_exp();
}
inline ::google::protobuf::uint64 FacadeDataInfo::facade_exp() const {
  return facade_exp_;
}
inline void FacadeDataInfo::set_facade_exp(::google::protobuf::uint64 value) {
  set_has_facade_exp();
  facade_exp_ = value;
}

// optional bool use_soul_item = 5;
inline bool FacadeDataInfo::has_use_soul_item() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FacadeDataInfo::set_has_use_soul_item() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FacadeDataInfo::clear_has_use_soul_item() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FacadeDataInfo::clear_use_soul_item() {
  use_soul_item_ = false;
  clear_has_use_soul_item();
}
inline bool FacadeDataInfo::use_soul_item() const {
  return use_soul_item_;
}
inline void FacadeDataInfo::set_use_soul_item(bool value) {
  set_has_use_soul_item();
  use_soul_item_ = value;
}

// optional bool use_facade = 6;
inline bool FacadeDataInfo::has_use_facade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FacadeDataInfo::set_has_use_facade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FacadeDataInfo::clear_has_use_facade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FacadeDataInfo::clear_use_facade() {
  use_facade_ = false;
  clear_has_use_facade();
}
inline bool FacadeDataInfo::use_facade() const {
  return use_facade_;
}
inline void FacadeDataInfo::set_use_facade(bool value) {
  set_has_use_facade();
  use_facade_ = value;
}

// optional uint64 equip_fantasy_id = 7;
inline bool FacadeDataInfo::has_equip_fantasy_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FacadeDataInfo::set_has_equip_fantasy_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FacadeDataInfo::clear_has_equip_fantasy_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FacadeDataInfo::clear_equip_fantasy_id() {
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  clear_has_equip_fantasy_id();
}
inline ::google::protobuf::uint64 FacadeDataInfo::equip_fantasy_id() const {
  return equip_fantasy_id_;
}
inline void FacadeDataInfo::set_equip_fantasy_id(::google::protobuf::uint64 value) {
  set_has_equip_fantasy_id();
  equip_fantasy_id_ = value;
}

// repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
inline int FacadeDataInfo::fantasy_map_size() const {
  return fantasy_map_.size();
}
inline void FacadeDataInfo::clear_fantasy_map() {
  fantasy_map_.Clear();
}
inline const ::proto_ff::FacadeFantasyData& FacadeDataInfo::fantasy_map(int index) const {
  return fantasy_map_.Get(index);
}
inline ::proto_ff::FacadeFantasyData* FacadeDataInfo::mutable_fantasy_map(int index) {
  return fantasy_map_.Mutable(index);
}
inline ::proto_ff::FacadeFantasyData* FacadeDataInfo::add_fantasy_map() {
  return fantasy_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFantasyData >&
FacadeDataInfo::fantasy_map() const {
  return fantasy_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFantasyData >*
FacadeDataInfo::mutable_fantasy_map() {
  return &fantasy_map_;
}

// repeated .proto_ff.FacadeFragmentData fragment_map = 9;
inline int FacadeDataInfo::fragment_map_size() const {
  return fragment_map_.size();
}
inline void FacadeDataInfo::clear_fragment_map() {
  fragment_map_.Clear();
}
inline const ::proto_ff::FacadeFragmentData& FacadeDataInfo::fragment_map(int index) const {
  return fragment_map_.Get(index);
}
inline ::proto_ff::FacadeFragmentData* FacadeDataInfo::mutable_fragment_map(int index) {
  return fragment_map_.Mutable(index);
}
inline ::proto_ff::FacadeFragmentData* FacadeDataInfo::add_fragment_map() {
  return fragment_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFragmentData >&
FacadeDataInfo::fragment_map() const {
  return fragment_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeFragmentData >*
FacadeDataInfo::mutable_fragment_map() {
  return &fragment_map_;
}

// repeated .proto_ff.FacadeSkillData skill_data = 10;
inline int FacadeDataInfo::skill_data_size() const {
  return skill_data_.size();
}
inline void FacadeDataInfo::clear_skill_data() {
  skill_data_.Clear();
}
inline const ::proto_ff::FacadeSkillData& FacadeDataInfo::skill_data(int index) const {
  return skill_data_.Get(index);
}
inline ::proto_ff::FacadeSkillData* FacadeDataInfo::mutable_skill_data(int index) {
  return skill_data_.Mutable(index);
}
inline ::proto_ff::FacadeSkillData* FacadeDataInfo::add_skill_data() {
  return skill_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeSkillData >&
FacadeDataInfo::skill_data() const {
  return skill_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeSkillData >*
FacadeDataInfo::mutable_skill_data() {
  return &skill_data_;
}

// optional .proto_ff.FacadeSoulData soul_data = 11;
inline bool FacadeDataInfo::has_soul_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FacadeDataInfo::set_has_soul_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FacadeDataInfo::clear_has_soul_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FacadeDataInfo::clear_soul_data() {
  if (soul_data_ != NULL) soul_data_->::proto_ff::FacadeSoulData::Clear();
  clear_has_soul_data();
}
inline const ::proto_ff::FacadeSoulData& FacadeDataInfo::soul_data() const {
  return soul_data_ != NULL ? *soul_data_ : *default_instance_->soul_data_;
}
inline ::proto_ff::FacadeSoulData* FacadeDataInfo::mutable_soul_data() {
  set_has_soul_data();
  if (soul_data_ == NULL) soul_data_ = new ::proto_ff::FacadeSoulData;
  return soul_data_;
}
inline ::proto_ff::FacadeSoulData* FacadeDataInfo::release_soul_data() {
  clear_has_soul_data();
  ::proto_ff::FacadeSoulData* temp = soul_data_;
  soul_data_ = NULL;
  return temp;
}
inline void FacadeDataInfo::set_allocated_soul_data(::proto_ff::FacadeSoulData* soul_data) {
  delete soul_data_;
  soul_data_ = soul_data;
  if (soul_data) {
    set_has_soul_data();
  } else {
    clear_has_soul_data();
  }
}

// -------------------------------------------------------------------

// MountDataInfo

// optional uint64 mount_id = 1;
inline bool MountDataInfo::has_mount_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MountDataInfo::set_has_mount_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MountDataInfo::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MountDataInfo::clear_mount_id() {
  mount_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mount_id();
}
inline ::google::protobuf::uint64 MountDataInfo::mount_id() const {
  return mount_id_;
}
inline void MountDataInfo::set_mount_id(::google::protobuf::uint64 value) {
  set_has_mount_id();
  mount_id_ = value;
}

// optional uint32 mount_lev = 2;
inline bool MountDataInfo::has_mount_lev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MountDataInfo::set_has_mount_lev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MountDataInfo::clear_has_mount_lev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MountDataInfo::clear_mount_lev() {
  mount_lev_ = 0u;
  clear_has_mount_lev();
}
inline ::google::protobuf::uint32 MountDataInfo::mount_lev() const {
  return mount_lev_;
}
inline void MountDataInfo::set_mount_lev(::google::protobuf::uint32 value) {
  set_has_mount_lev();
  mount_lev_ = value;
}

// optional uint64 mount_exp = 3;
inline bool MountDataInfo::has_mount_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MountDataInfo::set_has_mount_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MountDataInfo::clear_has_mount_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MountDataInfo::clear_mount_exp() {
  mount_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_mount_exp();
}
inline ::google::protobuf::uint64 MountDataInfo::mount_exp() const {
  return mount_exp_;
}
inline void MountDataInfo::set_mount_exp(::google::protobuf::uint64 value) {
  set_has_mount_exp();
  mount_exp_ = value;
}

// optional bool use_facade = 4;
inline bool MountDataInfo::has_use_facade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MountDataInfo::set_has_use_facade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MountDataInfo::clear_has_use_facade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MountDataInfo::clear_use_facade() {
  use_facade_ = false;
  clear_has_use_facade();
}
inline bool MountDataInfo::use_facade() const {
  return use_facade_;
}
inline void MountDataInfo::set_use_facade(bool value) {
  set_has_use_facade();
  use_facade_ = value;
}

// optional uint64 equip_fantasy_id = 5;
inline bool MountDataInfo::has_equip_fantasy_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MountDataInfo::set_has_equip_fantasy_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MountDataInfo::clear_has_equip_fantasy_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MountDataInfo::clear_equip_fantasy_id() {
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  clear_has_equip_fantasy_id();
}
inline ::google::protobuf::uint64 MountDataInfo::equip_fantasy_id() const {
  return equip_fantasy_id_;
}
inline void MountDataInfo::set_equip_fantasy_id(::google::protobuf::uint64 value) {
  set_has_equip_fantasy_id();
  equip_fantasy_id_ = value;
}

// repeated .proto_ff.MountFantasyData fantasy_map = 6;
inline int MountDataInfo::fantasy_map_size() const {
  return fantasy_map_.size();
}
inline void MountDataInfo::clear_fantasy_map() {
  fantasy_map_.Clear();
}
inline const ::proto_ff::MountFantasyData& MountDataInfo::fantasy_map(int index) const {
  return fantasy_map_.Get(index);
}
inline ::proto_ff::MountFantasyData* MountDataInfo::mutable_fantasy_map(int index) {
  return fantasy_map_.Mutable(index);
}
inline ::proto_ff::MountFantasyData* MountDataInfo::add_fantasy_map() {
  return fantasy_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFantasyData >&
MountDataInfo::fantasy_map() const {
  return fantasy_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFantasyData >*
MountDataInfo::mutable_fantasy_map() {
  return &fantasy_map_;
}

// repeated .proto_ff.MountFragmentData fragment_map = 7;
inline int MountDataInfo::fragment_map_size() const {
  return fragment_map_.size();
}
inline void MountDataInfo::clear_fragment_map() {
  fragment_map_.Clear();
}
inline const ::proto_ff::MountFragmentData& MountDataInfo::fragment_map(int index) const {
  return fragment_map_.Get(index);
}
inline ::proto_ff::MountFragmentData* MountDataInfo::mutable_fragment_map(int index) {
  return fragment_map_.Mutable(index);
}
inline ::proto_ff::MountFragmentData* MountDataInfo::add_fragment_map() {
  return fragment_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFragmentData >&
MountDataInfo::fragment_map() const {
  return fragment_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFragmentData >*
MountDataInfo::mutable_fragment_map() {
  return &fragment_map_;
}

// repeated .proto_ff.MountSkillData skill_data = 8;
inline int MountDataInfo::skill_data_size() const {
  return skill_data_.size();
}
inline void MountDataInfo::clear_skill_data() {
  skill_data_.Clear();
}
inline const ::proto_ff::MountSkillData& MountDataInfo::skill_data(int index) const {
  return skill_data_.Get(index);
}
inline ::proto_ff::MountSkillData* MountDataInfo::mutable_skill_data(int index) {
  return skill_data_.Mutable(index);
}
inline ::proto_ff::MountSkillData* MountDataInfo::add_skill_data() {
  return skill_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountSkillData >&
MountDataInfo::skill_data() const {
  return skill_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountSkillData >*
MountDataInfo::mutable_skill_data() {
  return &skill_data_;
}

// repeated .proto_ff.MountKunData kun_data = 9;
inline int MountDataInfo::kun_data_size() const {
  return kun_data_.size();
}
inline void MountDataInfo::clear_kun_data() {
  kun_data_.Clear();
}
inline const ::proto_ff::MountKunData& MountDataInfo::kun_data(int index) const {
  return kun_data_.Get(index);
}
inline ::proto_ff::MountKunData* MountDataInfo::mutable_kun_data(int index) {
  return kun_data_.Mutable(index);
}
inline ::proto_ff::MountKunData* MountDataInfo::add_kun_data() {
  return kun_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunData >&
MountDataInfo::kun_data() const {
  return kun_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunData >*
MountDataInfo::mutable_kun_data() {
  return &kun_data_;
}

// repeated .proto_ff.MountBloodData blood_data = 10;
inline int MountDataInfo::blood_data_size() const {
  return blood_data_.size();
}
inline void MountDataInfo::clear_blood_data() {
  blood_data_.Clear();
}
inline const ::proto_ff::MountBloodData& MountDataInfo::blood_data(int index) const {
  return blood_data_.Get(index);
}
inline ::proto_ff::MountBloodData* MountDataInfo::mutable_blood_data(int index) {
  return blood_data_.Mutable(index);
}
inline ::proto_ff::MountBloodData* MountDataInfo::add_blood_data() {
  return blood_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBloodData >&
MountDataInfo::blood_data() const {
  return blood_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBloodData >*
MountDataInfo::mutable_blood_data() {
  return &blood_data_;
}

// repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
inline int MountDataInfo::baby_slot_data_size() const {
  return baby_slot_data_.size();
}
inline void MountDataInfo::clear_baby_slot_data() {
  baby_slot_data_.Clear();
}
inline const ::proto_ff::MountBabySlotData& MountDataInfo::baby_slot_data(int index) const {
  return baby_slot_data_.Get(index);
}
inline ::proto_ff::MountBabySlotData* MountDataInfo::mutable_baby_slot_data(int index) {
  return baby_slot_data_.Mutable(index);
}
inline ::proto_ff::MountBabySlotData* MountDataInfo::add_baby_slot_data() {
  return baby_slot_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBabySlotData >&
MountDataInfo::baby_slot_data() const {
  return baby_slot_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountBabySlotData >*
MountDataInfo::mutable_baby_slot_data() {
  return &baby_slot_data_;
}

// optional uint32 ride_state = 12;
inline bool MountDataInfo::has_ride_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MountDataInfo::set_has_ride_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MountDataInfo::clear_has_ride_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MountDataInfo::clear_ride_state() {
  ride_state_ = 0u;
  clear_has_ride_state();
}
inline ::google::protobuf::uint32 MountDataInfo::ride_state() const {
  return ride_state_;
}
inline void MountDataInfo::set_ride_state(::google::protobuf::uint32 value) {
  set_has_ride_state();
  ride_state_ = value;
}

// optional uint64 mount_model_id = 13;
inline bool MountDataInfo::has_mount_model_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MountDataInfo::set_has_mount_model_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MountDataInfo::clear_has_mount_model_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MountDataInfo::clear_mount_model_id() {
  mount_model_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mount_model_id();
}
inline ::google::protobuf::uint64 MountDataInfo::mount_model_id() const {
  return mount_model_id_;
}
inline void MountDataInfo::set_mount_model_id(::google::protobuf::uint64 value) {
  set_has_mount_model_id();
  mount_model_id_ = value;
}

// optional uint64 last_mount_model_id = 14;
inline bool MountDataInfo::has_last_mount_model_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MountDataInfo::set_has_last_mount_model_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MountDataInfo::clear_has_last_mount_model_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MountDataInfo::clear_last_mount_model_id() {
  last_mount_model_id_ = GOOGLE_ULONGLONG(0);
  clear_has_last_mount_model_id();
}
inline ::google::protobuf::uint64 MountDataInfo::last_mount_model_id() const {
  return last_mount_model_id_;
}
inline void MountDataInfo::set_last_mount_model_id(::google::protobuf::uint64 value) {
  set_has_last_mount_model_id();
  last_mount_model_id_ = value;
}

// repeated .proto_ff.MountKunChangeData kun_change_data = 15;
inline int MountDataInfo::kun_change_data_size() const {
  return kun_change_data_.size();
}
inline void MountDataInfo::clear_kun_change_data() {
  kun_change_data_.Clear();
}
inline const ::proto_ff::MountKunChangeData& MountDataInfo::kun_change_data(int index) const {
  return kun_change_data_.Get(index);
}
inline ::proto_ff::MountKunChangeData* MountDataInfo::mutable_kun_change_data(int index) {
  return kun_change_data_.Mutable(index);
}
inline ::proto_ff::MountKunChangeData* MountDataInfo::add_kun_change_data() {
  return kun_change_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunChangeData >&
MountDataInfo::kun_change_data() const {
  return kun_change_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountKunChangeData >*
MountDataInfo::mutable_kun_change_data() {
  return &kun_change_data_;
}

// optional uint64 equip_kun_id = 16;
inline bool MountDataInfo::has_equip_kun_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MountDataInfo::set_has_equip_kun_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MountDataInfo::clear_has_equip_kun_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MountDataInfo::clear_equip_kun_id() {
  equip_kun_id_ = GOOGLE_ULONGLONG(0);
  clear_has_equip_kun_id();
}
inline ::google::protobuf::uint64 MountDataInfo::equip_kun_id() const {
  return equip_kun_id_;
}
inline void MountDataInfo::set_equip_kun_id(::google::protobuf::uint64 value) {
  set_has_equip_kun_id();
  equip_kun_id_ = value;
}

// optional uint64 equip_kun_change_id = 17;
inline bool MountDataInfo::has_equip_kun_change_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MountDataInfo::set_has_equip_kun_change_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MountDataInfo::clear_has_equip_kun_change_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MountDataInfo::clear_equip_kun_change_id() {
  equip_kun_change_id_ = GOOGLE_ULONGLONG(0);
  clear_has_equip_kun_change_id();
}
inline ::google::protobuf::uint64 MountDataInfo::equip_kun_change_id() const {
  return equip_kun_change_id_;
}
inline void MountDataInfo::set_equip_kun_change_id(::google::protobuf::uint64 value) {
  set_has_equip_kun_change_id();
  equip_kun_change_id_ = value;
}

// repeated .proto_ff.MountFairyLand fairy_land = 18;
inline int MountDataInfo::fairy_land_size() const {
  return fairy_land_.size();
}
inline void MountDataInfo::clear_fairy_land() {
  fairy_land_.Clear();
}
inline const ::proto_ff::MountFairyLand& MountDataInfo::fairy_land(int index) const {
  return fairy_land_.Get(index);
}
inline ::proto_ff::MountFairyLand* MountDataInfo::mutable_fairy_land(int index) {
  return fairy_land_.Mutable(index);
}
inline ::proto_ff::MountFairyLand* MountDataInfo::add_fairy_land() {
  return fairy_land_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairyLand >&
MountDataInfo::fairy_land() const {
  return fairy_land_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairyLand >*
MountDataInfo::mutable_fairy_land() {
  return &fairy_land_;
}

// repeated .proto_ff.MountFairySlot fairy_slot = 19;
inline int MountDataInfo::fairy_slot_size() const {
  return fairy_slot_.size();
}
inline void MountDataInfo::clear_fairy_slot() {
  fairy_slot_.Clear();
}
inline const ::proto_ff::MountFairySlot& MountDataInfo::fairy_slot(int index) const {
  return fairy_slot_.Get(index);
}
inline ::proto_ff::MountFairySlot* MountDataInfo::mutable_fairy_slot(int index) {
  return fairy_slot_.Mutable(index);
}
inline ::proto_ff::MountFairySlot* MountDataInfo::add_fairy_slot() {
  return fairy_slot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairySlot >&
MountDataInfo::fairy_slot() const {
  return fairy_slot_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MountFairySlot >*
MountDataInfo::mutable_fairy_slot() {
  return &fairy_slot_;
}

// optional uint64 cur_fairy_land = 20;
inline bool MountDataInfo::has_cur_fairy_land() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MountDataInfo::set_has_cur_fairy_land() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MountDataInfo::clear_has_cur_fairy_land() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MountDataInfo::clear_cur_fairy_land() {
  cur_fairy_land_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_fairy_land();
}
inline ::google::protobuf::uint64 MountDataInfo::cur_fairy_land() const {
  return cur_fairy_land_;
}
inline void MountDataInfo::set_cur_fairy_land(::google::protobuf::uint64 value) {
  set_has_cur_fairy_land();
  cur_fairy_land_ = value;
}

// -------------------------------------------------------------------

// DeityDataInfo

// optional uint64 deity_id = 1;
inline bool DeityDataInfo::has_deity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeityDataInfo::set_has_deity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeityDataInfo::clear_has_deity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeityDataInfo::clear_deity_id() {
  deity_id_ = GOOGLE_ULONGLONG(0);
  clear_has_deity_id();
}
inline ::google::protobuf::uint64 DeityDataInfo::deity_id() const {
  return deity_id_;
}
inline void DeityDataInfo::set_deity_id(::google::protobuf::uint64 value) {
  set_has_deity_id();
  deity_id_ = value;
}

// optional uint32 deity_lev = 2;
inline bool DeityDataInfo::has_deity_lev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeityDataInfo::set_has_deity_lev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeityDataInfo::clear_has_deity_lev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeityDataInfo::clear_deity_lev() {
  deity_lev_ = 0u;
  clear_has_deity_lev();
}
inline ::google::protobuf::uint32 DeityDataInfo::deity_lev() const {
  return deity_lev_;
}
inline void DeityDataInfo::set_deity_lev(::google::protobuf::uint32 value) {
  set_has_deity_lev();
  deity_lev_ = value;
}

// optional uint64 deity_exp = 3;
inline bool DeityDataInfo::has_deity_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeityDataInfo::set_has_deity_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeityDataInfo::clear_has_deity_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeityDataInfo::clear_deity_exp() {
  deity_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_deity_exp();
}
inline ::google::protobuf::uint64 DeityDataInfo::deity_exp() const {
  return deity_exp_;
}
inline void DeityDataInfo::set_deity_exp(::google::protobuf::uint64 value) {
  set_has_deity_exp();
  deity_exp_ = value;
}

// repeated .proto_ff.DeityFantasyData fantasy_map = 4;
inline int DeityDataInfo::fantasy_map_size() const {
  return fantasy_map_.size();
}
inline void DeityDataInfo::clear_fantasy_map() {
  fantasy_map_.Clear();
}
inline const ::proto_ff::DeityFantasyData& DeityDataInfo::fantasy_map(int index) const {
  return fantasy_map_.Get(index);
}
inline ::proto_ff::DeityFantasyData* DeityDataInfo::mutable_fantasy_map(int index) {
  return fantasy_map_.Mutable(index);
}
inline ::proto_ff::DeityFantasyData* DeityDataInfo::add_fantasy_map() {
  return fantasy_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFantasyData >&
DeityDataInfo::fantasy_map() const {
  return fantasy_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFantasyData >*
DeityDataInfo::mutable_fantasy_map() {
  return &fantasy_map_;
}

// repeated .proto_ff.DeityFragmentData fragment_map = 5;
inline int DeityDataInfo::fragment_map_size() const {
  return fragment_map_.size();
}
inline void DeityDataInfo::clear_fragment_map() {
  fragment_map_.Clear();
}
inline const ::proto_ff::DeityFragmentData& DeityDataInfo::fragment_map(int index) const {
  return fragment_map_.Get(index);
}
inline ::proto_ff::DeityFragmentData* DeityDataInfo::mutable_fragment_map(int index) {
  return fragment_map_.Mutable(index);
}
inline ::proto_ff::DeityFragmentData* DeityDataInfo::add_fragment_map() {
  return fragment_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFragmentData >&
DeityDataInfo::fragment_map() const {
  return fragment_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityFragmentData >*
DeityDataInfo::mutable_fragment_map() {
  return &fragment_map_;
}

// repeated .proto_ff.DeitySkillData skill_data = 6;
inline int DeityDataInfo::skill_data_size() const {
  return skill_data_.size();
}
inline void DeityDataInfo::clear_skill_data() {
  skill_data_.Clear();
}
inline const ::proto_ff::DeitySkillData& DeityDataInfo::skill_data(int index) const {
  return skill_data_.Get(index);
}
inline ::proto_ff::DeitySkillData* DeityDataInfo::mutable_skill_data(int index) {
  return skill_data_.Mutable(index);
}
inline ::proto_ff::DeitySkillData* DeityDataInfo::add_skill_data() {
  return skill_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeitySkillData >&
DeityDataInfo::skill_data() const {
  return skill_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeitySkillData >*
DeityDataInfo::mutable_skill_data() {
  return &skill_data_;
}

// repeated .proto_ff.DeityBattleSlotData battle_data = 7;
inline int DeityDataInfo::battle_data_size() const {
  return battle_data_.size();
}
inline void DeityDataInfo::clear_battle_data() {
  battle_data_.Clear();
}
inline const ::proto_ff::DeityBattleSlotData& DeityDataInfo::battle_data(int index) const {
  return battle_data_.Get(index);
}
inline ::proto_ff::DeityBattleSlotData* DeityDataInfo::mutable_battle_data(int index) {
  return battle_data_.Mutable(index);
}
inline ::proto_ff::DeityBattleSlotData* DeityDataInfo::add_battle_data() {
  return battle_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityBattleSlotData >&
DeityDataInfo::battle_data() const {
  return battle_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeityBattleSlotData >*
DeityDataInfo::mutable_battle_data() {
  return &battle_data_;
}

// -------------------------------------------------------------------

// FacadeDBData

// repeated .proto_ff.FacadeDataInfo data = 1;
inline int FacadeDBData::data_size() const {
  return data_.size();
}
inline void FacadeDBData::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FacadeDataInfo& FacadeDBData::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FacadeDataInfo* FacadeDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FacadeDataInfo* FacadeDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeDataInfo >&
FacadeDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FacadeDataInfo >*
FacadeDBData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SkillDBInfo

// optional uint64 skill_id = 1;
inline bool SkillDBInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDBInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDBInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDBInfo::clear_skill_id() {
  skill_id_ = GOOGLE_ULONGLONG(0);
  clear_has_skill_id();
}
inline ::google::protobuf::uint64 SkillDBInfo::skill_id() const {
  return skill_id_;
}
inline void SkillDBInfo::set_skill_id(::google::protobuf::uint64 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 level = 2;
inline bool SkillDBInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SkillDBInfo::level() const {
  return level_;
}
inline void SkillDBInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 wakeup = 3;
inline bool SkillDBInfo::has_wakeup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillDBInfo::set_has_wakeup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillDBInfo::clear_has_wakeup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillDBInfo::clear_wakeup() {
  wakeup_ = 0;
  clear_has_wakeup();
}
inline ::google::protobuf::int32 SkillDBInfo::wakeup() const {
  return wakeup_;
}
inline void SkillDBInfo::set_wakeup(::google::protobuf::int32 value) {
  set_has_wakeup();
  wakeup_ = value;
}

// optional int64 use_msc = 4;
inline bool SkillDBInfo::has_use_msc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillDBInfo::set_has_use_msc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillDBInfo::clear_has_use_msc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillDBInfo::clear_use_msc() {
  use_msc_ = GOOGLE_LONGLONG(0);
  clear_has_use_msc();
}
inline ::google::protobuf::int64 SkillDBInfo::use_msc() const {
  return use_msc_;
}
inline void SkillDBInfo::set_use_msc(::google::protobuf::int64 value) {
  set_has_use_msc();
  use_msc_ = value;
}

// -------------------------------------------------------------------

// SkillDBPos

// optional uint64 skill_id = 1;
inline bool SkillDBPos::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDBPos::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDBPos::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDBPos::clear_skill_id() {
  skill_id_ = GOOGLE_ULONGLONG(0);
  clear_has_skill_id();
}
inline ::google::protobuf::uint64 SkillDBPos::skill_id() const {
  return skill_id_;
}
inline void SkillDBPos::set_skill_id(::google::protobuf::uint64 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 pos = 2;
inline bool SkillDBPos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBPos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBPos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBPos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SkillDBPos::pos() const {
  return pos_;
}
inline void SkillDBPos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 use = 3;
inline bool SkillDBPos::has_use() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillDBPos::set_has_use() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillDBPos::clear_has_use() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillDBPos::clear_use() {
  use_ = 0;
  clear_has_use();
}
inline ::google::protobuf::int32 SkillDBPos::use() const {
  return use_;
}
inline void SkillDBPos::set_use(::google::protobuf::int32 value) {
  set_has_use();
  use_ = value;
}

// -------------------------------------------------------------------

// SkillDBAdvPos

// optional uint32 pos = 1;
inline bool SkillDBAdvPos::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDBAdvPos::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDBAdvPos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDBAdvPos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SkillDBAdvPos::pos() const {
  return pos_;
}
inline void SkillDBAdvPos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 advance = 2;
inline bool SkillDBAdvPos::has_advance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBAdvPos::set_has_advance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBAdvPos::clear_has_advance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBAdvPos::clear_advance() {
  advance_ = 0u;
  clear_has_advance();
}
inline ::google::protobuf::uint32 SkillDBAdvPos::advance() const {
  return advance_;
}
inline void SkillDBAdvPos::set_advance(::google::protobuf::uint32 value) {
  set_has_advance();
  advance_ = value;
}

// optional uint32 unlock = 3;
inline bool SkillDBAdvPos::has_unlock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillDBAdvPos::set_has_unlock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillDBAdvPos::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillDBAdvPos::clear_unlock() {
  unlock_ = 0u;
  clear_has_unlock();
}
inline ::google::protobuf::uint32 SkillDBAdvPos::unlock() const {
  return unlock_;
}
inline void SkillDBAdvPos::set_unlock(::google::protobuf::uint32 value) {
  set_has_unlock();
  unlock_ = value;
}

// -------------------------------------------------------------------

// SkillDBAdvInfo

// optional int32 advance = 1;
inline bool SkillDBAdvInfo::has_advance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDBAdvInfo::set_has_advance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDBAdvInfo::clear_has_advance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDBAdvInfo::clear_advance() {
  advance_ = 0;
  clear_has_advance();
}
inline ::google::protobuf::int32 SkillDBAdvInfo::advance() const {
  return advance_;
}
inline void SkillDBAdvInfo::set_advance(::google::protobuf::int32 value) {
  set_has_advance();
  advance_ = value;
}

// optional int32 level = 2;
inline bool SkillDBAdvInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBAdvInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBAdvInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBAdvInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SkillDBAdvInfo::level() const {
  return level_;
}
inline void SkillDBAdvInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// SkillDBGroup

// optional uint32 group = 1;
inline bool SkillDBGroup::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDBGroup::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDBGroup::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDBGroup::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 SkillDBGroup::group() const {
  return group_;
}
inline void SkillDBGroup::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 chg = 2;
inline bool SkillDBGroup::has_chg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBGroup::set_has_chg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBGroup::clear_has_chg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBGroup::clear_chg() {
  chg_ = 0;
  clear_has_chg();
}
inline ::google::protobuf::int32 SkillDBGroup::chg() const {
  return chg_;
}
inline void SkillDBGroup::set_chg(::google::protobuf::int32 value) {
  set_has_chg();
  chg_ = value;
}

// repeated .proto_ff.SkillDBPos pos_lst = 3;
inline int SkillDBGroup::pos_lst_size() const {
  return pos_lst_.size();
}
inline void SkillDBGroup::clear_pos_lst() {
  pos_lst_.Clear();
}
inline const ::proto_ff::SkillDBPos& SkillDBGroup::pos_lst(int index) const {
  return pos_lst_.Get(index);
}
inline ::proto_ff::SkillDBPos* SkillDBGroup::mutable_pos_lst(int index) {
  return pos_lst_.Mutable(index);
}
inline ::proto_ff::SkillDBPos* SkillDBGroup::add_pos_lst() {
  return pos_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBPos >&
SkillDBGroup::pos_lst() const {
  return pos_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBPos >*
SkillDBGroup::mutable_pos_lst() {
  return &pos_lst_;
}

// -------------------------------------------------------------------

// PetSkillCdDB

// optional uint64 skill_id = 1;
inline bool PetSkillCdDB::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetSkillCdDB::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetSkillCdDB::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetSkillCdDB::clear_skill_id() {
  skill_id_ = GOOGLE_ULONGLONG(0);
  clear_has_skill_id();
}
inline ::google::protobuf::uint64 PetSkillCdDB::skill_id() const {
  return skill_id_;
}
inline void PetSkillCdDB::set_skill_id(::google::protobuf::uint64 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint64 use_msec = 2;
inline bool PetSkillCdDB::has_use_msec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetSkillCdDB::set_has_use_msec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetSkillCdDB::clear_has_use_msec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetSkillCdDB::clear_use_msec() {
  use_msec_ = GOOGLE_ULONGLONG(0);
  clear_has_use_msec();
}
inline ::google::protobuf::uint64 PetSkillCdDB::use_msec() const {
  return use_msec_;
}
inline void PetSkillCdDB::set_use_msec(::google::protobuf::uint64 value) {
  set_has_use_msec();
  use_msec_ = value;
}

// optional int64 pet_instid = 3;
inline bool PetSkillCdDB::has_pet_instid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetSkillCdDB::set_has_pet_instid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetSkillCdDB::clear_has_pet_instid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetSkillCdDB::clear_pet_instid() {
  pet_instid_ = GOOGLE_LONGLONG(0);
  clear_has_pet_instid();
}
inline ::google::protobuf::int64 PetSkillCdDB::pet_instid() const {
  return pet_instid_;
}
inline void PetSkillCdDB::set_pet_instid(::google::protobuf::int64 value) {
  set_has_pet_instid();
  pet_instid_ = value;
}

// -------------------------------------------------------------------

// SkillDBTalentProto

// optional int32 id = 1;
inline bool SkillDBTalentProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDBTalentProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDBTalentProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDBTalentProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SkillDBTalentProto::id() const {
  return id_;
}
inline void SkillDBTalentProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool SkillDBTalentProto::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBTalentProto::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBTalentProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBTalentProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SkillDBTalentProto::level() const {
  return level_;
}
inline void SkillDBTalentProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// SkillDBTalent

// repeated .proto_ff.SkillDBTalentProto info = 1;
inline int SkillDBTalent::info_size() const {
  return info_.size();
}
inline void SkillDBTalent::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::SkillDBTalentProto& SkillDBTalent::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::SkillDBTalentProto* SkillDBTalent::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::SkillDBTalentProto* SkillDBTalent::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBTalentProto >&
SkillDBTalent::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBTalentProto >*
SkillDBTalent::mutable_info() {
  return &info_;
}

// optional uint32 cnt = 2;
inline bool SkillDBTalent::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDBTalent::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDBTalent::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDBTalent::clear_cnt() {
  cnt_ = 0u;
  clear_has_cnt();
}
inline ::google::protobuf::uint32 SkillDBTalent::cnt() const {
  return cnt_;
}
inline void SkillDBTalent::set_cnt(::google::protobuf::uint32 value) {
  set_has_cnt();
  cnt_ = value;
}

// -------------------------------------------------------------------

// SkillDBData

// repeated .proto_ff.SkillDBInfo info_lst = 1;
inline int SkillDBData::info_lst_size() const {
  return info_lst_.size();
}
inline void SkillDBData::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::SkillDBInfo& SkillDBData::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::SkillDBInfo* SkillDBData::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::SkillDBInfo* SkillDBData::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBInfo >&
SkillDBData::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBInfo >*
SkillDBData::mutable_info_lst() {
  return &info_lst_;
}

// repeated .proto_ff.SkillDBGroup group_lst = 2;
inline int SkillDBData::group_lst_size() const {
  return group_lst_.size();
}
inline void SkillDBData::clear_group_lst() {
  group_lst_.Clear();
}
inline const ::proto_ff::SkillDBGroup& SkillDBData::group_lst(int index) const {
  return group_lst_.Get(index);
}
inline ::proto_ff::SkillDBGroup* SkillDBData::mutable_group_lst(int index) {
  return group_lst_.Mutable(index);
}
inline ::proto_ff::SkillDBGroup* SkillDBData::add_group_lst() {
  return group_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBGroup >&
SkillDBData::group_lst() const {
  return group_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBGroup >*
SkillDBData::mutable_group_lst() {
  return &group_lst_;
}

// optional uint32 group = 3;
inline bool SkillDBData::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillDBData::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillDBData::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillDBData::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 SkillDBData::group() const {
  return group_;
}
inline void SkillDBData::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional uint64 last_group = 4;
inline bool SkillDBData::has_last_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillDBData::set_has_last_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillDBData::clear_has_last_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillDBData::clear_last_group() {
  last_group_ = GOOGLE_ULONGLONG(0);
  clear_has_last_group();
}
inline ::google::protobuf::uint64 SkillDBData::last_group() const {
  return last_group_;
}
inline void SkillDBData::set_last_group(::google::protobuf::uint64 value) {
  set_has_last_group();
  last_group_ = value;
}

// repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
inline int SkillDBData::adv_pos_size() const {
  return adv_pos_.size();
}
inline void SkillDBData::clear_adv_pos() {
  adv_pos_.Clear();
}
inline const ::proto_ff::SkillDBAdvPos& SkillDBData::adv_pos(int index) const {
  return adv_pos_.Get(index);
}
inline ::proto_ff::SkillDBAdvPos* SkillDBData::mutable_adv_pos(int index) {
  return adv_pos_.Mutable(index);
}
inline ::proto_ff::SkillDBAdvPos* SkillDBData::add_adv_pos() {
  return adv_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvPos >&
SkillDBData::adv_pos() const {
  return adv_pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvPos >*
SkillDBData::mutable_adv_pos() {
  return &adv_pos_;
}

// repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
inline int SkillDBData::adv_info_size() const {
  return adv_info_.size();
}
inline void SkillDBData::clear_adv_info() {
  adv_info_.Clear();
}
inline const ::proto_ff::SkillDBAdvInfo& SkillDBData::adv_info(int index) const {
  return adv_info_.Get(index);
}
inline ::proto_ff::SkillDBAdvInfo* SkillDBData::mutable_adv_info(int index) {
  return adv_info_.Mutable(index);
}
inline ::proto_ff::SkillDBAdvInfo* SkillDBData::add_adv_info() {
  return adv_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvInfo >&
SkillDBData::adv_info() const {
  return adv_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SkillDBAdvInfo >*
SkillDBData::mutable_adv_info() {
  return &adv_info_;
}

// optional uint32 cur_advpos = 7;
inline bool SkillDBData::has_cur_advpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillDBData::set_has_cur_advpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillDBData::clear_has_cur_advpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillDBData::clear_cur_advpos() {
  cur_advpos_ = 0u;
  clear_has_cur_advpos();
}
inline ::google::protobuf::uint32 SkillDBData::cur_advpos() const {
  return cur_advpos_;
}
inline void SkillDBData::set_cur_advpos(::google::protobuf::uint32 value) {
  set_has_cur_advpos();
  cur_advpos_ = value;
}

// repeated .proto_ff.PetSkillCdDB pet_cd = 8;
inline int SkillDBData::pet_cd_size() const {
  return pet_cd_.size();
}
inline void SkillDBData::clear_pet_cd() {
  pet_cd_.Clear();
}
inline const ::proto_ff::PetSkillCdDB& SkillDBData::pet_cd(int index) const {
  return pet_cd_.Get(index);
}
inline ::proto_ff::PetSkillCdDB* SkillDBData::mutable_pet_cd(int index) {
  return pet_cd_.Mutable(index);
}
inline ::proto_ff::PetSkillCdDB* SkillDBData::add_pet_cd() {
  return pet_cd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetSkillCdDB >&
SkillDBData::pet_cd() const {
  return pet_cd_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetSkillCdDB >*
SkillDBData::mutable_pet_cd() {
  return &pet_cd_;
}

// optional .proto_ff.SkillDBTalent talent = 9;
inline bool SkillDBData::has_talent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillDBData::set_has_talent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillDBData::clear_has_talent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillDBData::clear_talent() {
  if (talent_ != NULL) talent_->::proto_ff::SkillDBTalent::Clear();
  clear_has_talent();
}
inline const ::proto_ff::SkillDBTalent& SkillDBData::talent() const {
  return talent_ != NULL ? *talent_ : *default_instance_->talent_;
}
inline ::proto_ff::SkillDBTalent* SkillDBData::mutable_talent() {
  set_has_talent();
  if (talent_ == NULL) talent_ = new ::proto_ff::SkillDBTalent;
  return talent_;
}
inline ::proto_ff::SkillDBTalent* SkillDBData::release_talent() {
  clear_has_talent();
  ::proto_ff::SkillDBTalent* temp = talent_;
  talent_ = NULL;
  return temp;
}
inline void SkillDBData::set_allocated_talent(::proto_ff::SkillDBTalent* talent) {
  delete talent_;
  talent_ = talent;
  if (talent) {
    set_has_talent();
  } else {
    clear_has_talent();
  }
}

// optional uint32 anger_value = 10;
inline bool SkillDBData::has_anger_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillDBData::set_has_anger_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillDBData::clear_has_anger_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillDBData::clear_anger_value() {
  anger_value_ = 0u;
  clear_has_anger_value();
}
inline ::google::protobuf::uint32 SkillDBData::anger_value() const {
  return anger_value_;
}
inline void SkillDBData::set_anger_value(::google::protobuf::uint32 value) {
  set_has_anger_value();
  anger_value_ = value;
}

// -------------------------------------------------------------------

// GodRelicsActivityData

// repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
inline int GodRelicsActivityData::group_data_size() const {
  return group_data_.size();
}
inline void GodRelicsActivityData::clear_group_data() {
  group_data_.Clear();
}
inline const ::proto_ff::GodRelicsTaskGroupEntry& GodRelicsActivityData::group_data(int index) const {
  return group_data_.Get(index);
}
inline ::proto_ff::GodRelicsTaskGroupEntry* GodRelicsActivityData::mutable_group_data(int index) {
  return group_data_.Mutable(index);
}
inline ::proto_ff::GodRelicsTaskGroupEntry* GodRelicsActivityData::add_group_data() {
  return group_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GodRelicsTaskGroupEntry >&
GodRelicsActivityData::group_data() const {
  return group_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GodRelicsTaskGroupEntry >*
GodRelicsActivityData::mutable_group_data() {
  return &group_data_;
}

// optional int64 cur_group_id = 2;
inline bool GodRelicsActivityData::has_cur_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GodRelicsActivityData::set_has_cur_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GodRelicsActivityData::clear_has_cur_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GodRelicsActivityData::clear_cur_group_id() {
  cur_group_id_ = GOOGLE_LONGLONG(0);
  clear_has_cur_group_id();
}
inline ::google::protobuf::int64 GodRelicsActivityData::cur_group_id() const {
  return cur_group_id_;
}
inline void GodRelicsActivityData::set_cur_group_id(::google::protobuf::int64 value) {
  set_has_cur_group_id();
  cur_group_id_ = value;
}

// -------------------------------------------------------------------

// MiniActivityDBData

// optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
inline bool MiniActivityDBData::has_god_relics_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MiniActivityDBData::set_has_god_relics_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MiniActivityDBData::clear_has_god_relics_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MiniActivityDBData::clear_god_relics_data() {
  if (god_relics_data_ != NULL) god_relics_data_->::proto_ff::GodRelicsActivityData::Clear();
  clear_has_god_relics_data();
}
inline const ::proto_ff::GodRelicsActivityData& MiniActivityDBData::god_relics_data() const {
  return god_relics_data_ != NULL ? *god_relics_data_ : *default_instance_->god_relics_data_;
}
inline ::proto_ff::GodRelicsActivityData* MiniActivityDBData::mutable_god_relics_data() {
  set_has_god_relics_data();
  if (god_relics_data_ == NULL) god_relics_data_ = new ::proto_ff::GodRelicsActivityData;
  return god_relics_data_;
}
inline ::proto_ff::GodRelicsActivityData* MiniActivityDBData::release_god_relics_data() {
  clear_has_god_relics_data();
  ::proto_ff::GodRelicsActivityData* temp = god_relics_data_;
  god_relics_data_ = NULL;
  return temp;
}
inline void MiniActivityDBData::set_allocated_god_relics_data(::proto_ff::GodRelicsActivityData* god_relics_data) {
  delete god_relics_data_;
  god_relics_data_ = god_relics_data;
  if (god_relics_data) {
    set_has_god_relics_data();
  } else {
    clear_has_god_relics_data();
  }
}

// optional .proto_ff.DailyTaskAllData daily_data = 2;
inline bool MiniActivityDBData::has_daily_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiniActivityDBData::set_has_daily_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiniActivityDBData::clear_has_daily_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiniActivityDBData::clear_daily_data() {
  if (daily_data_ != NULL) daily_data_->::proto_ff::DailyTaskAllData::Clear();
  clear_has_daily_data();
}
inline const ::proto_ff::DailyTaskAllData& MiniActivityDBData::daily_data() const {
  return daily_data_ != NULL ? *daily_data_ : *default_instance_->daily_data_;
}
inline ::proto_ff::DailyTaskAllData* MiniActivityDBData::mutable_daily_data() {
  set_has_daily_data();
  if (daily_data_ == NULL) daily_data_ = new ::proto_ff::DailyTaskAllData;
  return daily_data_;
}
inline ::proto_ff::DailyTaskAllData* MiniActivityDBData::release_daily_data() {
  clear_has_daily_data();
  ::proto_ff::DailyTaskAllData* temp = daily_data_;
  daily_data_ = NULL;
  return temp;
}
inline void MiniActivityDBData::set_allocated_daily_data(::proto_ff::DailyTaskAllData* daily_data) {
  delete daily_data_;
  daily_data_ = daily_data;
  if (daily_data) {
    set_has_daily_data();
  } else {
    clear_has_daily_data();
  }
}

// -------------------------------------------------------------------

// DupRecord

// optional uint64 dupId = 1;
inline bool DupRecord::has_dupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DupRecord::set_has_dupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DupRecord::clear_has_dupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DupRecord::clear_dupid() {
  dupid_ = GOOGLE_ULONGLONG(0);
  clear_has_dupid();
}
inline ::google::protobuf::uint64 DupRecord::dupid() const {
  return dupid_;
}
inline void DupRecord::set_dupid(::google::protobuf::uint64 value) {
  set_has_dupid();
  dupid_ = value;
}

// optional int32 star = 2;
inline bool DupRecord::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DupRecord::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DupRecord::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DupRecord::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 DupRecord::star() const {
  return star_;
}
inline void DupRecord::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// DupGroupData

// optional int32 group = 1;
inline bool DupGroupData::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DupGroupData::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DupGroupData::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DupGroupData::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 DupGroupData::group() const {
  return group_;
}
inline void DupGroupData::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 enterNum = 2;
inline bool DupGroupData::has_enternum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DupGroupData::set_has_enternum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DupGroupData::clear_has_enternum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DupGroupData::clear_enternum() {
  enternum_ = 0;
  clear_has_enternum();
}
inline ::google::protobuf::int32 DupGroupData::enternum() const {
  return enternum_;
}
inline void DupGroupData::set_enternum(::google::protobuf::int32 value) {
  set_has_enternum();
  enternum_ = value;
}

// optional int32 buyNum = 3;
inline bool DupGroupData::has_buynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DupGroupData::set_has_buynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DupGroupData::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DupGroupData::clear_buynum() {
  buynum_ = 0;
  clear_has_buynum();
}
inline ::google::protobuf::int32 DupGroupData::buynum() const {
  return buynum_;
}
inline void DupGroupData::set_buynum(::google::protobuf::int32 value) {
  set_has_buynum();
  buynum_ = value;
}

// optional int32 useNum = 4;
inline bool DupGroupData::has_usenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DupGroupData::set_has_usenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DupGroupData::clear_has_usenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DupGroupData::clear_usenum() {
  usenum_ = 0;
  clear_has_usenum();
}
inline ::google::protobuf::int32 DupGroupData::usenum() const {
  return usenum_;
}
inline void DupGroupData::set_usenum(::google::protobuf::int32 value) {
  set_has_usenum();
  usenum_ = value;
}

// optional uint64 lastFresh = 5;
inline bool DupGroupData::has_lastfresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DupGroupData::set_has_lastfresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DupGroupData::clear_has_lastfresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DupGroupData::clear_lastfresh() {
  lastfresh_ = GOOGLE_ULONGLONG(0);
  clear_has_lastfresh();
}
inline ::google::protobuf::uint64 DupGroupData::lastfresh() const {
  return lastfresh_;
}
inline void DupGroupData::set_lastfresh(::google::protobuf::uint64 value) {
  set_has_lastfresh();
  lastfresh_ = value;
}

// -------------------------------------------------------------------

// DupTowerDBRecordEntry

// optional bytes name = 1;
inline bool DupTowerDBRecordEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DupTowerDBRecordEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DupTowerDBRecordEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DupTowerDBRecordEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DupTowerDBRecordEntry::name() const {
  return *name_;
}
inline void DupTowerDBRecordEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DupTowerDBRecordEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DupTowerDBRecordEntry::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DupTowerDBRecordEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DupTowerDBRecordEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DupTowerDBRecordEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 time = 2;
inline bool DupTowerDBRecordEntry::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DupTowerDBRecordEntry::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DupTowerDBRecordEntry::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DupTowerDBRecordEntry::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 DupTowerDBRecordEntry::time() const {
  return time_;
}
inline void DupTowerDBRecordEntry::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 cid = 3;
inline bool DupTowerDBRecordEntry::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DupTowerDBRecordEntry::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DupTowerDBRecordEntry::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DupTowerDBRecordEntry::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 DupTowerDBRecordEntry::cid() const {
  return cid_;
}
inline void DupTowerDBRecordEntry::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// DupTowerDBRecord

// optional uint64 id = 1;
inline bool DupTowerDBRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DupTowerDBRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DupTowerDBRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DupTowerDBRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 DupTowerDBRecord::id() const {
  return id_;
}
inline void DupTowerDBRecord::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
inline int DupTowerDBRecord::entrys_size() const {
  return entrys_.size();
}
inline void DupTowerDBRecord::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::DupTowerDBRecordEntry& DupTowerDBRecord::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::DupTowerDBRecordEntry* DupTowerDBRecord::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::DupTowerDBRecordEntry* DupTowerDBRecord::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecordEntry >&
DupTowerDBRecord::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecordEntry >*
DupTowerDBRecord::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// DupTowerDBData

// repeated uint64 ids = 1;
inline int DupTowerDBData::ids_size() const {
  return ids_.size();
}
inline void DupTowerDBData::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint64 DupTowerDBData::ids(int index) const {
  return ids_.Get(index);
}
inline void DupTowerDBData::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
}
inline void DupTowerDBData::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DupTowerDBData::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DupTowerDBData::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// GhostDBData

// optional int32 wave = 1;
inline bool GhostDBData::has_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GhostDBData::set_has_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GhostDBData::clear_has_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GhostDBData::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 GhostDBData::wave() const {
  return wave_;
}
inline void GhostDBData::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// optional int32 time = 2;
inline bool GhostDBData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GhostDBData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GhostDBData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GhostDBData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 GhostDBData::time() const {
  return time_;
}
inline void GhostDBData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated int32 recv_ids = 3;
inline int GhostDBData::recv_ids_size() const {
  return recv_ids_.size();
}
inline void GhostDBData::clear_recv_ids() {
  recv_ids_.Clear();
}
inline ::google::protobuf::int32 GhostDBData::recv_ids(int index) const {
  return recv_ids_.Get(index);
}
inline void GhostDBData::set_recv_ids(int index, ::google::protobuf::int32 value) {
  recv_ids_.Set(index, value);
}
inline void GhostDBData::add_recv_ids(::google::protobuf::int32 value) {
  recv_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GhostDBData::recv_ids() const {
  return recv_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GhostDBData::mutable_recv_ids() {
  return &recv_ids_;
}

// -------------------------------------------------------------------

// MoyuDBData

// repeated int32 recv_layer = 1;
inline int MoyuDBData::recv_layer_size() const {
  return recv_layer_.size();
}
inline void MoyuDBData::clear_recv_layer() {
  recv_layer_.Clear();
}
inline ::google::protobuf::int32 MoyuDBData::recv_layer(int index) const {
  return recv_layer_.Get(index);
}
inline void MoyuDBData::set_recv_layer(int index, ::google::protobuf::int32 value) {
  recv_layer_.Set(index, value);
}
inline void MoyuDBData::add_recv_layer(::google::protobuf::int32 value) {
  recv_layer_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MoyuDBData::recv_layer() const {
  return recv_layer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MoyuDBData::mutable_recv_layer() {
  return &recv_layer_;
}

// optional uint64 day_harm = 2;
inline bool MoyuDBData::has_day_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoyuDBData::set_has_day_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoyuDBData::clear_has_day_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoyuDBData::clear_day_harm() {
  day_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_day_harm();
}
inline ::google::protobuf::uint64 MoyuDBData::day_harm() const {
  return day_harm_;
}
inline void MoyuDBData::set_day_harm(::google::protobuf::uint64 value) {
  set_has_day_harm();
  day_harm_ = value;
}

// optional uint64 week_harm = 3;
inline bool MoyuDBData::has_week_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoyuDBData::set_has_week_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoyuDBData::clear_has_week_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoyuDBData::clear_week_harm() {
  week_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_week_harm();
}
inline ::google::protobuf::uint64 MoyuDBData::week_harm() const {
  return week_harm_;
}
inline void MoyuDBData::set_week_harm(::google::protobuf::uint64 value) {
  set_has_week_harm();
  week_harm_ = value;
}

// optional uint64 last_day_harm = 4;
inline bool MoyuDBData::has_last_day_harm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoyuDBData::set_has_last_day_harm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoyuDBData::clear_has_last_day_harm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoyuDBData::clear_last_day_harm() {
  last_day_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_last_day_harm();
}
inline ::google::protobuf::uint64 MoyuDBData::last_day_harm() const {
  return last_day_harm_;
}
inline void MoyuDBData::set_last_day_harm(::google::protobuf::uint64 value) {
  set_has_last_day_harm();
  last_day_harm_ = value;
}

// optional uint64 last_week_harm = 5;
inline bool MoyuDBData::has_last_week_harm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoyuDBData::set_has_last_week_harm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoyuDBData::clear_has_last_week_harm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoyuDBData::clear_last_week_harm() {
  last_week_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_last_week_harm();
}
inline ::google::protobuf::uint64 MoyuDBData::last_week_harm() const {
  return last_week_harm_;
}
inline void MoyuDBData::set_last_week_harm(::google::protobuf::uint64 value) {
  set_has_last_week_harm();
  last_week_harm_ = value;
}

// optional uint64 time = 6;
inline bool MoyuDBData::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoyuDBData::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoyuDBData::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoyuDBData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 MoyuDBData::time() const {
  return time_;
}
inline void MoyuDBData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// YaoTaDBData

// repeated int32 pass_ids = 1;
inline int YaoTaDBData::pass_ids_size() const {
  return pass_ids_.size();
}
inline void YaoTaDBData::clear_pass_ids() {
  pass_ids_.Clear();
}
inline ::google::protobuf::int32 YaoTaDBData::pass_ids(int index) const {
  return pass_ids_.Get(index);
}
inline void YaoTaDBData::set_pass_ids(int index, ::google::protobuf::int32 value) {
  pass_ids_.Set(index, value);
}
inline void YaoTaDBData::add_pass_ids(::google::protobuf::int32 value) {
  pass_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
YaoTaDBData::pass_ids() const {
  return pass_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
YaoTaDBData::mutable_pass_ids() {
  return &pass_ids_;
}

// repeated int32 first_pass_ids = 2;
inline int YaoTaDBData::first_pass_ids_size() const {
  return first_pass_ids_.size();
}
inline void YaoTaDBData::clear_first_pass_ids() {
  first_pass_ids_.Clear();
}
inline ::google::protobuf::int32 YaoTaDBData::first_pass_ids(int index) const {
  return first_pass_ids_.Get(index);
}
inline void YaoTaDBData::set_first_pass_ids(int index, ::google::protobuf::int32 value) {
  first_pass_ids_.Set(index, value);
}
inline void YaoTaDBData::add_first_pass_ids(::google::protobuf::int32 value) {
  first_pass_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
YaoTaDBData::first_pass_ids() const {
  return first_pass_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
YaoTaDBData::mutable_first_pass_ids() {
  return &first_pass_ids_;
}

// optional uint64 pass_time_point = 3;
inline bool YaoTaDBData::has_pass_time_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YaoTaDBData::set_has_pass_time_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YaoTaDBData::clear_has_pass_time_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YaoTaDBData::clear_pass_time_point() {
  pass_time_point_ = GOOGLE_ULONGLONG(0);
  clear_has_pass_time_point();
}
inline ::google::protobuf::uint64 YaoTaDBData::pass_time_point() const {
  return pass_time_point_;
}
inline void YaoTaDBData::set_pass_time_point(::google::protobuf::uint64 value) {
  set_has_pass_time_point();
  pass_time_point_ = value;
}

// optional int32 pass_duration = 4;
inline bool YaoTaDBData::has_pass_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YaoTaDBData::set_has_pass_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YaoTaDBData::clear_has_pass_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YaoTaDBData::clear_pass_duration() {
  pass_duration_ = 0;
  clear_has_pass_duration();
}
inline ::google::protobuf::int32 YaoTaDBData::pass_duration() const {
  return pass_duration_;
}
inline void YaoTaDBData::set_pass_duration(::google::protobuf::int32 value) {
  set_has_pass_duration();
  pass_duration_ = value;
}

// -------------------------------------------------------------------

// DupDBData

// repeated .proto_ff.DupRecord record = 1;
inline int DupDBData::record_size() const {
  return record_.size();
}
inline void DupDBData::clear_record() {
  record_.Clear();
}
inline const ::proto_ff::DupRecord& DupDBData::record(int index) const {
  return record_.Get(index);
}
inline ::proto_ff::DupRecord* DupDBData::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::proto_ff::DupRecord* DupDBData::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupRecord >&
DupDBData::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupRecord >*
DupDBData::mutable_record() {
  return &record_;
}

// repeated .proto_ff.DupGroupData groups = 2;
inline int DupDBData::groups_size() const {
  return groups_.size();
}
inline void DupDBData::clear_groups() {
  groups_.Clear();
}
inline const ::proto_ff::DupGroupData& DupDBData::groups(int index) const {
  return groups_.Get(index);
}
inline ::proto_ff::DupGroupData* DupDBData::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::proto_ff::DupGroupData* DupDBData::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupGroupData >&
DupDBData::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupGroupData >*
DupDBData::mutable_groups() {
  return &groups_;
}

// optional .proto_ff.DupTowerDBData tower = 3;
inline bool DupDBData::has_tower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DupDBData::set_has_tower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DupDBData::clear_has_tower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DupDBData::clear_tower() {
  if (tower_ != NULL) tower_->::proto_ff::DupTowerDBData::Clear();
  clear_has_tower();
}
inline const ::proto_ff::DupTowerDBData& DupDBData::tower() const {
  return tower_ != NULL ? *tower_ : *default_instance_->tower_;
}
inline ::proto_ff::DupTowerDBData* DupDBData::mutable_tower() {
  set_has_tower();
  if (tower_ == NULL) tower_ = new ::proto_ff::DupTowerDBData;
  return tower_;
}
inline ::proto_ff::DupTowerDBData* DupDBData::release_tower() {
  clear_has_tower();
  ::proto_ff::DupTowerDBData* temp = tower_;
  tower_ = NULL;
  return temp;
}
inline void DupDBData::set_allocated_tower(::proto_ff::DupTowerDBData* tower) {
  delete tower_;
  tower_ = tower;
  if (tower) {
    set_has_tower();
  } else {
    clear_has_tower();
  }
}

// optional .proto_ff.GhostDBData ghost = 4;
inline bool DupDBData::has_ghost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DupDBData::set_has_ghost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DupDBData::clear_has_ghost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DupDBData::clear_ghost() {
  if (ghost_ != NULL) ghost_->::proto_ff::GhostDBData::Clear();
  clear_has_ghost();
}
inline const ::proto_ff::GhostDBData& DupDBData::ghost() const {
  return ghost_ != NULL ? *ghost_ : *default_instance_->ghost_;
}
inline ::proto_ff::GhostDBData* DupDBData::mutable_ghost() {
  set_has_ghost();
  if (ghost_ == NULL) ghost_ = new ::proto_ff::GhostDBData;
  return ghost_;
}
inline ::proto_ff::GhostDBData* DupDBData::release_ghost() {
  clear_has_ghost();
  ::proto_ff::GhostDBData* temp = ghost_;
  ghost_ = NULL;
  return temp;
}
inline void DupDBData::set_allocated_ghost(::proto_ff::GhostDBData* ghost) {
  delete ghost_;
  ghost_ = ghost;
  if (ghost) {
    set_has_ghost();
  } else {
    clear_has_ghost();
  }
}

// optional .proto_ff.MoyuDBData moyu = 5;
inline bool DupDBData::has_moyu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DupDBData::set_has_moyu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DupDBData::clear_has_moyu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DupDBData::clear_moyu() {
  if (moyu_ != NULL) moyu_->::proto_ff::MoyuDBData::Clear();
  clear_has_moyu();
}
inline const ::proto_ff::MoyuDBData& DupDBData::moyu() const {
  return moyu_ != NULL ? *moyu_ : *default_instance_->moyu_;
}
inline ::proto_ff::MoyuDBData* DupDBData::mutable_moyu() {
  set_has_moyu();
  if (moyu_ == NULL) moyu_ = new ::proto_ff::MoyuDBData;
  return moyu_;
}
inline ::proto_ff::MoyuDBData* DupDBData::release_moyu() {
  clear_has_moyu();
  ::proto_ff::MoyuDBData* temp = moyu_;
  moyu_ = NULL;
  return temp;
}
inline void DupDBData::set_allocated_moyu(::proto_ff::MoyuDBData* moyu) {
  delete moyu_;
  moyu_ = moyu;
  if (moyu) {
    set_has_moyu();
  } else {
    clear_has_moyu();
  }
}

// optional .proto_ff.YaoTaDBData yaota = 6;
inline bool DupDBData::has_yaota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DupDBData::set_has_yaota() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DupDBData::clear_has_yaota() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DupDBData::clear_yaota() {
  if (yaota_ != NULL) yaota_->::proto_ff::YaoTaDBData::Clear();
  clear_has_yaota();
}
inline const ::proto_ff::YaoTaDBData& DupDBData::yaota() const {
  return yaota_ != NULL ? *yaota_ : *default_instance_->yaota_;
}
inline ::proto_ff::YaoTaDBData* DupDBData::mutable_yaota() {
  set_has_yaota();
  if (yaota_ == NULL) yaota_ = new ::proto_ff::YaoTaDBData;
  return yaota_;
}
inline ::proto_ff::YaoTaDBData* DupDBData::release_yaota() {
  clear_has_yaota();
  ::proto_ff::YaoTaDBData* temp = yaota_;
  yaota_ = NULL;
  return temp;
}
inline void DupDBData::set_allocated_yaota(::proto_ff::YaoTaDBData* yaota) {
  delete yaota_;
  yaota_ = yaota;
  if (yaota) {
    set_has_yaota();
  } else {
    clear_has_yaota();
  }
}

// -------------------------------------------------------------------

// GhostDupRankDB

// repeated .proto_ff.GHostDupRankInfo ranks = 1;
inline int GhostDupRankDB::ranks_size() const {
  return ranks_.size();
}
inline void GhostDupRankDB::clear_ranks() {
  ranks_.Clear();
}
inline const ::proto_ff::GHostDupRankInfo& GhostDupRankDB::ranks(int index) const {
  return ranks_.Get(index);
}
inline ::proto_ff::GHostDupRankInfo* GhostDupRankDB::mutable_ranks(int index) {
  return ranks_.Mutable(index);
}
inline ::proto_ff::GHostDupRankInfo* GhostDupRankDB::add_ranks() {
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GHostDupRankInfo >&
GhostDupRankDB::ranks() const {
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GHostDupRankInfo >*
GhostDupRankDB::mutable_ranks() {
  return &ranks_;
}

// -------------------------------------------------------------------

// BuffDBInfo

// optional uint64 buffid = 1;
inline bool BuffDBInfo::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffDBInfo::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffDBInfo::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffDBInfo::clear_buffid() {
  buffid_ = GOOGLE_ULONGLONG(0);
  clear_has_buffid();
}
inline ::google::protobuf::uint64 BuffDBInfo::buffid() const {
  return buffid_;
}
inline void BuffDBInfo::set_buffid(::google::protobuf::uint64 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional uint64 index = 2;
inline bool BuffDBInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffDBInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffDBInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffDBInfo::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 BuffDBInfo::index() const {
  return index_;
}
inline void BuffDBInfo::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
}

// optional uint64 skillid = 3;
inline bool BuffDBInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffDBInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffDBInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffDBInfo::clear_skillid() {
  skillid_ = GOOGLE_ULONGLONG(0);
  clear_has_skillid();
}
inline ::google::protobuf::uint64 BuffDBInfo::skillid() const {
  return skillid_;
}
inline void BuffDBInfo::set_skillid(::google::protobuf::uint64 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skilllev = 4;
inline bool BuffDBInfo::has_skilllev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffDBInfo::set_has_skilllev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffDBInfo::clear_has_skilllev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffDBInfo::clear_skilllev() {
  skilllev_ = 0u;
  clear_has_skilllev();
}
inline ::google::protobuf::uint32 BuffDBInfo::skilllev() const {
  return skilllev_;
}
inline void BuffDBInfo::set_skilllev(::google::protobuf::uint32 value) {
  set_has_skilllev();
  skilllev_ = value;
}

// optional bool is_forever = 5;
inline bool BuffDBInfo::has_is_forever() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffDBInfo::set_has_is_forever() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffDBInfo::clear_has_is_forever() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffDBInfo::clear_is_forever() {
  is_forever_ = false;
  clear_has_is_forever();
}
inline bool BuffDBInfo::is_forever() const {
  return is_forever_;
}
inline void BuffDBInfo::set_is_forever(bool value) {
  set_has_is_forever();
  is_forever_ = value;
}

// optional int64 startmsec = 6;
inline bool BuffDBInfo::has_startmsec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffDBInfo::set_has_startmsec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffDBInfo::clear_has_startmsec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffDBInfo::clear_startmsec() {
  startmsec_ = GOOGLE_LONGLONG(0);
  clear_has_startmsec();
}
inline ::google::protobuf::int64 BuffDBInfo::startmsec() const {
  return startmsec_;
}
inline void BuffDBInfo::set_startmsec(::google::protobuf::int64 value) {
  set_has_startmsec();
  startmsec_ = value;
}

// optional bool is_effect = 7;
inline bool BuffDBInfo::has_is_effect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffDBInfo::set_has_is_effect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffDBInfo::clear_has_is_effect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffDBInfo::clear_is_effect() {
  is_effect_ = false;
  clear_has_is_effect();
}
inline bool BuffDBInfo::is_effect() const {
  return is_effect_;
}
inline void BuffDBInfo::set_is_effect(bool value) {
  set_has_is_effect();
  is_effect_ = value;
}

// optional int64 param1 = 8;
inline bool BuffDBInfo::has_param1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuffDBInfo::set_has_param1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuffDBInfo::clear_has_param1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuffDBInfo::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 BuffDBInfo::param1() const {
  return param1_;
}
inline void BuffDBInfo::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 9;
inline bool BuffDBInfo::has_param2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BuffDBInfo::set_has_param2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BuffDBInfo::clear_has_param2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BuffDBInfo::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 BuffDBInfo::param2() const {
  return param2_;
}
inline void BuffDBInfo::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// optional int64 extramsec = 10;
inline bool BuffDBInfo::has_extramsec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BuffDBInfo::set_has_extramsec() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BuffDBInfo::clear_has_extramsec() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BuffDBInfo::clear_extramsec() {
  extramsec_ = GOOGLE_LONGLONG(0);
  clear_has_extramsec();
}
inline ::google::protobuf::int64 BuffDBInfo::extramsec() const {
  return extramsec_;
}
inline void BuffDBInfo::set_extramsec(::google::protobuf::int64 value) {
  set_has_extramsec();
  extramsec_ = value;
}

// optional int32 is_end = 11;
inline bool BuffDBInfo::has_is_end() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BuffDBInfo::set_has_is_end() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BuffDBInfo::clear_has_is_end() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BuffDBInfo::clear_is_end() {
  is_end_ = 0;
  clear_has_is_end();
}
inline ::google::protobuf::int32 BuffDBInfo::is_end() const {
  return is_end_;
}
inline void BuffDBInfo::set_is_end(::google::protobuf::int32 value) {
  set_has_is_end();
  is_end_ = value;
}

// optional int64 param3 = 12;
inline bool BuffDBInfo::has_param3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BuffDBInfo::set_has_param3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BuffDBInfo::clear_has_param3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BuffDBInfo::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
  clear_has_param3();
}
inline ::google::protobuf::int64 BuffDBInfo::param3() const {
  return param3_;
}
inline void BuffDBInfo::set_param3(::google::protobuf::int64 value) {
  set_has_param3();
  param3_ = value;
}

// optional int64 param4 = 13;
inline bool BuffDBInfo::has_param4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BuffDBInfo::set_has_param4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BuffDBInfo::clear_has_param4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BuffDBInfo::clear_param4() {
  param4_ = GOOGLE_LONGLONG(0);
  clear_has_param4();
}
inline ::google::protobuf::int64 BuffDBInfo::param4() const {
  return param4_;
}
inline void BuffDBInfo::set_param4(::google::protobuf::int64 value) {
  set_has_param4();
  param4_ = value;
}

// optional int64 param5 = 14;
inline bool BuffDBInfo::has_param5() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BuffDBInfo::set_has_param5() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BuffDBInfo::clear_has_param5() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BuffDBInfo::clear_param5() {
  param5_ = GOOGLE_LONGLONG(0);
  clear_has_param5();
}
inline ::google::protobuf::int64 BuffDBInfo::param5() const {
  return param5_;
}
inline void BuffDBInfo::set_param5(::google::protobuf::int64 value) {
  set_has_param5();
  param5_ = value;
}

// optional int64 param6 = 15;
inline bool BuffDBInfo::has_param6() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BuffDBInfo::set_has_param6() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BuffDBInfo::clear_has_param6() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BuffDBInfo::clear_param6() {
  param6_ = GOOGLE_LONGLONG(0);
  clear_has_param6();
}
inline ::google::protobuf::int64 BuffDBInfo::param6() const {
  return param6_;
}
inline void BuffDBInfo::set_param6(::google::protobuf::int64 value) {
  set_has_param6();
  param6_ = value;
}

// optional int64 param7 = 16;
inline bool BuffDBInfo::has_param7() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BuffDBInfo::set_has_param7() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BuffDBInfo::clear_has_param7() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BuffDBInfo::clear_param7() {
  param7_ = GOOGLE_LONGLONG(0);
  clear_has_param7();
}
inline ::google::protobuf::int64 BuffDBInfo::param7() const {
  return param7_;
}
inline void BuffDBInfo::set_param7(::google::protobuf::int64 value) {
  set_has_param7();
  param7_ = value;
}

// -------------------------------------------------------------------

// BuffDBCdInfo

// optional uint64 buffid = 1;
inline bool BuffDBCdInfo::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffDBCdInfo::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffDBCdInfo::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffDBCdInfo::clear_buffid() {
  buffid_ = GOOGLE_ULONGLONG(0);
  clear_has_buffid();
}
inline ::google::protobuf::uint64 BuffDBCdInfo::buffid() const {
  return buffid_;
}
inline void BuffDBCdInfo::set_buffid(::google::protobuf::uint64 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional uint64 lastmsec = 2;
inline bool BuffDBCdInfo::has_lastmsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffDBCdInfo::set_has_lastmsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffDBCdInfo::clear_has_lastmsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffDBCdInfo::clear_lastmsec() {
  lastmsec_ = GOOGLE_ULONGLONG(0);
  clear_has_lastmsec();
}
inline ::google::protobuf::uint64 BuffDBCdInfo::lastmsec() const {
  return lastmsec_;
}
inline void BuffDBCdInfo::set_lastmsec(::google::protobuf::uint64 value) {
  set_has_lastmsec();
  lastmsec_ = value;
}

// -------------------------------------------------------------------

// BuffDBShieldInfo

// optional int64 god_shield = 1;
inline bool BuffDBShieldInfo::has_god_shield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffDBShieldInfo::set_has_god_shield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffDBShieldInfo::clear_has_god_shield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffDBShieldInfo::clear_god_shield() {
  god_shield_ = GOOGLE_LONGLONG(0);
  clear_has_god_shield();
}
inline ::google::protobuf::int64 BuffDBShieldInfo::god_shield() const {
  return god_shield_;
}
inline void BuffDBShieldInfo::set_god_shield(::google::protobuf::int64 value) {
  set_has_god_shield();
  god_shield_ = value;
}

// optional int64 mag_shield = 2;
inline bool BuffDBShieldInfo::has_mag_shield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffDBShieldInfo::set_has_mag_shield() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffDBShieldInfo::clear_has_mag_shield() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffDBShieldInfo::clear_mag_shield() {
  mag_shield_ = GOOGLE_LONGLONG(0);
  clear_has_mag_shield();
}
inline ::google::protobuf::int64 BuffDBShieldInfo::mag_shield() const {
  return mag_shield_;
}
inline void BuffDBShieldInfo::set_mag_shield(::google::protobuf::int64 value) {
  set_has_mag_shield();
  mag_shield_ = value;
}

// -------------------------------------------------------------------

// BuffDBData

// repeated .proto_ff.BuffDBInfo info_lst = 1;
inline int BuffDBData::info_lst_size() const {
  return info_lst_.size();
}
inline void BuffDBData::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::BuffDBInfo& BuffDBData::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::BuffDBInfo* BuffDBData::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::BuffDBInfo* BuffDBData::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBInfo >&
BuffDBData::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBInfo >*
BuffDBData::mutable_info_lst() {
  return &info_lst_;
}

// repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
inline int BuffDBData::cd_lst_size() const {
  return cd_lst_.size();
}
inline void BuffDBData::clear_cd_lst() {
  cd_lst_.Clear();
}
inline const ::proto_ff::BuffDBCdInfo& BuffDBData::cd_lst(int index) const {
  return cd_lst_.Get(index);
}
inline ::proto_ff::BuffDBCdInfo* BuffDBData::mutable_cd_lst(int index) {
  return cd_lst_.Mutable(index);
}
inline ::proto_ff::BuffDBCdInfo* BuffDBData::add_cd_lst() {
  return cd_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBCdInfo >&
BuffDBData::cd_lst() const {
  return cd_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BuffDBCdInfo >*
BuffDBData::mutable_cd_lst() {
  return &cd_lst_;
}

// optional .proto_ff.BuffDBShieldInfo shield = 3;
inline bool BuffDBData::has_shield() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffDBData::set_has_shield() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffDBData::clear_has_shield() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffDBData::clear_shield() {
  if (shield_ != NULL) shield_->::proto_ff::BuffDBShieldInfo::Clear();
  clear_has_shield();
}
inline const ::proto_ff::BuffDBShieldInfo& BuffDBData::shield() const {
  return shield_ != NULL ? *shield_ : *default_instance_->shield_;
}
inline ::proto_ff::BuffDBShieldInfo* BuffDBData::mutable_shield() {
  set_has_shield();
  if (shield_ == NULL) shield_ = new ::proto_ff::BuffDBShieldInfo;
  return shield_;
}
inline ::proto_ff::BuffDBShieldInfo* BuffDBData::release_shield() {
  clear_has_shield();
  ::proto_ff::BuffDBShieldInfo* temp = shield_;
  shield_ = NULL;
  return temp;
}
inline void BuffDBData::set_allocated_shield(::proto_ff::BuffDBShieldInfo* shield) {
  delete shield_;
  shield_ = shield;
  if (shield) {
    set_has_shield();
  } else {
    clear_has_shield();
  }
}

// -------------------------------------------------------------------

// BossSimpleInfoDB

// optional int32 boss_type = 1;
inline bool BossSimpleInfoDB::has_boss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossSimpleInfoDB::set_has_boss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossSimpleInfoDB::clear_has_boss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossSimpleInfoDB::clear_boss_type() {
  boss_type_ = 0;
  clear_has_boss_type();
}
inline ::google::protobuf::int32 BossSimpleInfoDB::boss_type() const {
  return boss_type_;
}
inline void BossSimpleInfoDB::set_boss_type(::google::protobuf::int32 value) {
  set_has_boss_type();
  boss_type_ = value;
}

// optional int32 cur_num = 2;
inline bool BossSimpleInfoDB::has_cur_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossSimpleInfoDB::set_has_cur_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossSimpleInfoDB::clear_has_cur_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossSimpleInfoDB::clear_cur_num() {
  cur_num_ = 0;
  clear_has_cur_num();
}
inline ::google::protobuf::int32 BossSimpleInfoDB::cur_num() const {
  return cur_num_;
}
inline void BossSimpleInfoDB::set_cur_num(::google::protobuf::int32 value) {
  set_has_cur_num();
  cur_num_ = value;
}

// optional int32 back_num = 4;
inline bool BossSimpleInfoDB::has_back_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossSimpleInfoDB::set_has_back_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossSimpleInfoDB::clear_has_back_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossSimpleInfoDB::clear_back_num() {
  back_num_ = 0;
  clear_has_back_num();
}
inline ::google::protobuf::int32 BossSimpleInfoDB::back_num() const {
  return back_num_;
}
inline void BossSimpleInfoDB::set_back_num(::google::protobuf::int32 value) {
  set_has_back_num();
  back_num_ = value;
}

// optional int32 back_max_num = 5;
inline bool BossSimpleInfoDB::has_back_max_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossSimpleInfoDB::set_has_back_max_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossSimpleInfoDB::clear_has_back_max_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossSimpleInfoDB::clear_back_max_num() {
  back_max_num_ = 0;
  clear_has_back_max_num();
}
inline ::google::protobuf::int32 BossSimpleInfoDB::back_max_num() const {
  return back_max_num_;
}
inline void BossSimpleInfoDB::set_back_max_num(::google::protobuf::int32 value) {
  set_has_back_max_num();
  back_max_num_ = value;
}

// optional int32 enter_num = 6;
inline bool BossSimpleInfoDB::has_enter_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossSimpleInfoDB::set_has_enter_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossSimpleInfoDB::clear_has_enter_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossSimpleInfoDB::clear_enter_num() {
  enter_num_ = 0;
  clear_has_enter_num();
}
inline ::google::protobuf::int32 BossSimpleInfoDB::enter_num() const {
  return enter_num_;
}
inline void BossSimpleInfoDB::set_enter_num(::google::protobuf::int32 value) {
  set_has_enter_num();
  enter_num_ = value;
}

// optional int32 use_item_num = 7;
inline bool BossSimpleInfoDB::has_use_item_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossSimpleInfoDB::set_has_use_item_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossSimpleInfoDB::clear_has_use_item_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossSimpleInfoDB::clear_use_item_num() {
  use_item_num_ = 0;
  clear_has_use_item_num();
}
inline ::google::protobuf::int32 BossSimpleInfoDB::use_item_num() const {
  return use_item_num_;
}
inline void BossSimpleInfoDB::set_use_item_num(::google::protobuf::int32 value) {
  set_has_use_item_num();
  use_item_num_ = value;
}

// repeated .proto_ff.ComPair groupInfo = 8;
inline int BossSimpleInfoDB::groupinfo_size() const {
  return groupinfo_.size();
}
inline void BossSimpleInfoDB::clear_groupinfo() {
  groupinfo_.Clear();
}
inline const ::proto_ff::ComPair& BossSimpleInfoDB::groupinfo(int index) const {
  return groupinfo_.Get(index);
}
inline ::proto_ff::ComPair* BossSimpleInfoDB::mutable_groupinfo(int index) {
  return groupinfo_.Mutable(index);
}
inline ::proto_ff::ComPair* BossSimpleInfoDB::add_groupinfo() {
  return groupinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
BossSimpleInfoDB::groupinfo() const {
  return groupinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
BossSimpleInfoDB::mutable_groupinfo() {
  return &groupinfo_;
}

// -------------------------------------------------------------------

// BossDBData

// repeated .proto_ff.BossSimpleInfoDB infos = 1;
inline int BossDBData::infos_size() const {
  return infos_.size();
}
inline void BossDBData::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::BossSimpleInfoDB& BossDBData::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::BossSimpleInfoDB* BossDBData::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::BossSimpleInfoDB* BossDBData::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BossSimpleInfoDB >&
BossDBData::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BossSimpleInfoDB >*
BossDBData::mutable_infos() {
  return &infos_;
}

// optional uint64 lastTime = 2;
inline bool BossDBData::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDBData::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDBData::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDBData::clear_lasttime() {
  lasttime_ = GOOGLE_ULONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::uint64 BossDBData::lasttime() const {
  return lasttime_;
}
inline void BossDBData::set_lasttime(::google::protobuf::uint64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// repeated int64 attents = 3;
inline int BossDBData::attents_size() const {
  return attents_.size();
}
inline void BossDBData::clear_attents() {
  attents_.Clear();
}
inline ::google::protobuf::int64 BossDBData::attents(int index) const {
  return attents_.Get(index);
}
inline void BossDBData::set_attents(int index, ::google::protobuf::int64 value) {
  attents_.Set(index, value);
}
inline void BossDBData::add_attents(::google::protobuf::int64 value) {
  attents_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BossDBData::attents() const {
  return attents_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BossDBData::mutable_attents() {
  return &attents_;
}

// -------------------------------------------------------------------

// VipDBData

// optional int32 vipExp = 1;
inline bool VipDBData::has_vipexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipDBData::set_has_vipexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipDBData::clear_has_vipexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipDBData::clear_vipexp() {
  vipexp_ = 0;
  clear_has_vipexp();
}
inline ::google::protobuf::int32 VipDBData::vipexp() const {
  return vipexp_;
}
inline void VipDBData::set_vipexp(::google::protobuf::int32 value) {
  set_has_vipexp();
  vipexp_ = value;
}

// optional int32 expDiamond = 2;
inline bool VipDBData::has_expdiamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VipDBData::set_has_expdiamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VipDBData::clear_has_expdiamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VipDBData::clear_expdiamond() {
  expdiamond_ = 0;
  clear_has_expdiamond();
}
inline ::google::protobuf::int32 VipDBData::expdiamond() const {
  return expdiamond_;
}
inline void VipDBData::set_expdiamond(::google::protobuf::int32 value) {
  set_has_expdiamond();
  expdiamond_ = value;
}

// repeated int32 privilege_ids = 3;
inline int VipDBData::privilege_ids_size() const {
  return privilege_ids_.size();
}
inline void VipDBData::clear_privilege_ids() {
  privilege_ids_.Clear();
}
inline ::google::protobuf::int32 VipDBData::privilege_ids(int index) const {
  return privilege_ids_.Get(index);
}
inline void VipDBData::set_privilege_ids(int index, ::google::protobuf::int32 value) {
  privilege_ids_.Set(index, value);
}
inline void VipDBData::add_privilege_ids(::google::protobuf::int32 value) {
  privilege_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VipDBData::privilege_ids() const {
  return privilege_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VipDBData::mutable_privilege_ids() {
  return &privilege_ids_;
}

// optional int32 vip_hide = 4;
inline bool VipDBData::has_vip_hide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VipDBData::set_has_vip_hide() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VipDBData::clear_has_vip_hide() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VipDBData::clear_vip_hide() {
  vip_hide_ = 0;
  clear_has_vip_hide();
}
inline ::google::protobuf::int32 VipDBData::vip_hide() const {
  return vip_hide_;
}
inline void VipDBData::set_vip_hide(::google::protobuf::int32 value) {
  set_has_vip_hide();
  vip_hide_ = value;
}

// optional int32 active_type = 5;
inline bool VipDBData::has_active_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VipDBData::set_has_active_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VipDBData::clear_has_active_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VipDBData::clear_active_type() {
  active_type_ = 0;
  clear_has_active_type();
}
inline ::google::protobuf::int32 VipDBData::active_type() const {
  return active_type_;
}
inline void VipDBData::set_active_type(::google::protobuf::int32 value) {
  set_has_active_type();
  active_type_ = value;
}

// optional uint64 outtime = 6;
inline bool VipDBData::has_outtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VipDBData::set_has_outtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VipDBData::clear_has_outtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VipDBData::clear_outtime() {
  outtime_ = GOOGLE_ULONGLONG(0);
  clear_has_outtime();
}
inline ::google::protobuf::uint64 VipDBData::outtime() const {
  return outtime_;
}
inline void VipDBData::set_outtime(::google::protobuf::uint64 value) {
  set_has_outtime();
  outtime_ = value;
}

// optional uint64 last_recv_day_gift_time = 7;
inline bool VipDBData::has_last_recv_day_gift_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VipDBData::set_has_last_recv_day_gift_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VipDBData::clear_has_last_recv_day_gift_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VipDBData::clear_last_recv_day_gift_time() {
  last_recv_day_gift_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_recv_day_gift_time();
}
inline ::google::protobuf::uint64 VipDBData::last_recv_day_gift_time() const {
  return last_recv_day_gift_time_;
}
inline void VipDBData::set_last_recv_day_gift_time(::google::protobuf::uint64 value) {
  set_has_last_recv_day_gift_time();
  last_recv_day_gift_time_ = value;
}

// repeated int32 lv_gift = 8;
inline int VipDBData::lv_gift_size() const {
  return lv_gift_.size();
}
inline void VipDBData::clear_lv_gift() {
  lv_gift_.Clear();
}
inline ::google::protobuf::int32 VipDBData::lv_gift(int index) const {
  return lv_gift_.Get(index);
}
inline void VipDBData::set_lv_gift(int index, ::google::protobuf::int32 value) {
  lv_gift_.Set(index, value);
}
inline void VipDBData::add_lv_gift(::google::protobuf::int32 value) {
  lv_gift_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VipDBData::lv_gift() const {
  return lv_gift_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VipDBData::mutable_lv_gift() {
  return &lv_gift_;
}

// optional int32 zero_state = 9;
inline bool VipDBData::has_zero_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VipDBData::set_has_zero_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VipDBData::clear_has_zero_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VipDBData::clear_zero_state() {
  zero_state_ = 0;
  clear_has_zero_state();
}
inline ::google::protobuf::int32 VipDBData::zero_state() const {
  return zero_state_;
}
inline void VipDBData::set_zero_state(::google::protobuf::int32 value) {
  set_has_zero_state();
  zero_state_ = value;
}

// optional int32 recv_zero = 10;
inline bool VipDBData::has_recv_zero() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VipDBData::set_has_recv_zero() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VipDBData::clear_has_recv_zero() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VipDBData::clear_recv_zero() {
  recv_zero_ = 0;
  clear_has_recv_zero();
}
inline ::google::protobuf::int32 VipDBData::recv_zero() const {
  return recv_zero_;
}
inline void VipDBData::set_recv_zero(::google::protobuf::int32 value) {
  set_has_recv_zero();
  recv_zero_ = value;
}

// optional uint64 add_exp = 11;
inline bool VipDBData::has_add_exp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VipDBData::set_has_add_exp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VipDBData::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VipDBData::clear_add_exp() {
  add_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_add_exp();
}
inline ::google::protobuf::uint64 VipDBData::add_exp() const {
  return add_exp_;
}
inline void VipDBData::set_add_exp(::google::protobuf::uint64 value) {
  set_has_add_exp();
  add_exp_ = value;
}

// optional int32 recv_exp = 12;
inline bool VipDBData::has_recv_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VipDBData::set_has_recv_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VipDBData::clear_has_recv_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VipDBData::clear_recv_exp() {
  recv_exp_ = 0;
  clear_has_recv_exp();
}
inline ::google::protobuf::int32 VipDBData::recv_exp() const {
  return recv_exp_;
}
inline void VipDBData::set_recv_exp(::google::protobuf::int32 value) {
  set_has_recv_exp();
  recv_exp_ = value;
}

// optional uint64 refresh_time = 13;
inline bool VipDBData::has_refresh_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VipDBData::set_has_refresh_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VipDBData::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VipDBData::clear_refresh_time() {
  refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_refresh_time();
}
inline ::google::protobuf::uint64 VipDBData::refresh_time() const {
  return refresh_time_;
}
inline void VipDBData::set_refresh_time(::google::protobuf::uint64 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// optional uint64 active_time = 14;
inline bool VipDBData::has_active_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VipDBData::set_has_active_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VipDBData::clear_has_active_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VipDBData::clear_active_time() {
  active_time_ = GOOGLE_ULONGLONG(0);
  clear_has_active_time();
}
inline ::google::protobuf::uint64 VipDBData::active_time() const {
  return active_time_;
}
inline void VipDBData::set_active_time(::google::protobuf::uint64 value) {
  set_has_active_time();
  active_time_ = value;
}

// -------------------------------------------------------------------

// AttrDBData

// repeated .proto_ff.Attr64 attr_lst = 1;
inline int AttrDBData::attr_lst_size() const {
  return attr_lst_.size();
}
inline void AttrDBData::clear_attr_lst() {
  attr_lst_.Clear();
}
inline const ::proto_ff::Attr64& AttrDBData::attr_lst(int index) const {
  return attr_lst_.Get(index);
}
inline ::proto_ff::Attr64* AttrDBData::mutable_attr_lst(int index) {
  return attr_lst_.Mutable(index);
}
inline ::proto_ff::Attr64* AttrDBData::add_attr_lst() {
  return attr_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
AttrDBData::attr_lst() const {
  return attr_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
AttrDBData::mutable_attr_lst() {
  return &attr_lst_;
}

// -------------------------------------------------------------------

// PetDBRecord

// optional int32 instId = 1;
inline bool PetDBRecord::has_instid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetDBRecord::set_has_instid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetDBRecord::clear_has_instid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetDBRecord::clear_instid() {
  instid_ = 0;
  clear_has_instid();
}
inline ::google::protobuf::int32 PetDBRecord::instid() const {
  return instid_;
}
inline void PetDBRecord::set_instid(::google::protobuf::int32 value) {
  set_has_instid();
  instid_ = value;
}

// repeated .proto_ff.ComPair64 costItem = 2;
inline int PetDBRecord::costitem_size() const {
  return costitem_.size();
}
inline void PetDBRecord::clear_costitem() {
  costitem_.Clear();
}
inline const ::proto_ff::ComPair64& PetDBRecord::costitem(int index) const {
  return costitem_.Get(index);
}
inline ::proto_ff::ComPair64* PetDBRecord::mutable_costitem(int index) {
  return costitem_.Mutable(index);
}
inline ::proto_ff::ComPair64* PetDBRecord::add_costitem() {
  return costitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
PetDBRecord::costitem() const {
  return costitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
PetDBRecord::mutable_costitem() {
  return &costitem_;
}

// repeated .proto_ff.ComPair64 costPet = 3;
inline int PetDBRecord::costpet_size() const {
  return costpet_.size();
}
inline void PetDBRecord::clear_costpet() {
  costpet_.Clear();
}
inline const ::proto_ff::ComPair64& PetDBRecord::costpet(int index) const {
  return costpet_.Get(index);
}
inline ::proto_ff::ComPair64* PetDBRecord::mutable_costpet(int index) {
  return costpet_.Mutable(index);
}
inline ::proto_ff::ComPair64* PetDBRecord::add_costpet() {
  return costpet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
PetDBRecord::costpet() const {
  return costpet_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
PetDBRecord::mutable_costpet() {
  return &costpet_;
}

// -------------------------------------------------------------------

// PetGrowDB

// optional int32 cfgid = 1;
inline bool PetGrowDB::has_cfgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetGrowDB::set_has_cfgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetGrowDB::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetGrowDB::clear_cfgid() {
  cfgid_ = 0;
  clear_has_cfgid();
}
inline ::google::protobuf::int32 PetGrowDB::cfgid() const {
  return cfgid_;
}
inline void PetGrowDB::set_cfgid(::google::protobuf::int32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional int32 stronglv = 2;
inline bool PetGrowDB::has_stronglv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetGrowDB::set_has_stronglv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetGrowDB::clear_has_stronglv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetGrowDB::clear_stronglv() {
  stronglv_ = 0;
  clear_has_stronglv();
}
inline ::google::protobuf::int32 PetGrowDB::stronglv() const {
  return stronglv_;
}
inline void PetGrowDB::set_stronglv(::google::protobuf::int32 value) {
  set_has_stronglv();
  stronglv_ = value;
}

// optional int32 starlv = 3;
inline bool PetGrowDB::has_starlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetGrowDB::set_has_starlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetGrowDB::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetGrowDB::clear_starlv() {
  starlv_ = 0;
  clear_has_starlv();
}
inline ::google::protobuf::int32 PetGrowDB::starlv() const {
  return starlv_;
}
inline void PetGrowDB::set_starlv(::google::protobuf::int32 value) {
  set_has_starlv();
  starlv_ = value;
}

// optional int32 starindex = 4;
inline bool PetGrowDB::has_starindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetGrowDB::set_has_starindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetGrowDB::clear_has_starindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetGrowDB::clear_starindex() {
  starindex_ = 0;
  clear_has_starindex();
}
inline ::google::protobuf::int32 PetGrowDB::starindex() const {
  return starindex_;
}
inline void PetGrowDB::set_starindex(::google::protobuf::int32 value) {
  set_has_starindex();
  starindex_ = value;
}

// optional int32 failnum = 5;
inline bool PetGrowDB::has_failnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetGrowDB::set_has_failnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetGrowDB::clear_has_failnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetGrowDB::clear_failnum() {
  failnum_ = 0;
  clear_has_failnum();
}
inline ::google::protobuf::int32 PetGrowDB::failnum() const {
  return failnum_;
}
inline void PetGrowDB::set_failnum(::google::protobuf::int32 value) {
  set_has_failnum();
  failnum_ = value;
}

// -------------------------------------------------------------------

// PetDBData

// repeated int32 fetter = 1;
inline int PetDBData::fetter_size() const {
  return fetter_.size();
}
inline void PetDBData::clear_fetter() {
  fetter_.Clear();
}
inline ::google::protobuf::int32 PetDBData::fetter(int index) const {
  return fetter_.Get(index);
}
inline void PetDBData::set_fetter(int index, ::google::protobuf::int32 value) {
  fetter_.Set(index, value);
}
inline void PetDBData::add_fetter(::google::protobuf::int32 value) {
  fetter_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PetDBData::fetter() const {
  return fetter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PetDBData::mutable_fetter() {
  return &fetter_;
}

// repeated .proto_ff.PetInfo pets = 2;
inline int PetDBData::pets_size() const {
  return pets_.size();
}
inline void PetDBData::clear_pets() {
  pets_.Clear();
}
inline const ::proto_ff::PetInfo& PetDBData::pets(int index) const {
  return pets_.Get(index);
}
inline ::proto_ff::PetInfo* PetDBData::mutable_pets(int index) {
  return pets_.Mutable(index);
}
inline ::proto_ff::PetInfo* PetDBData::add_pets() {
  return pets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetInfo >&
PetDBData::pets() const {
  return pets_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetInfo >*
PetDBData::mutable_pets() {
  return &pets_;
}

// repeated .proto_ff.PetHatchInfo hatchs = 3;
inline int PetDBData::hatchs_size() const {
  return hatchs_.size();
}
inline void PetDBData::clear_hatchs() {
  hatchs_.Clear();
}
inline const ::proto_ff::PetHatchInfo& PetDBData::hatchs(int index) const {
  return hatchs_.Get(index);
}
inline ::proto_ff::PetHatchInfo* PetDBData::mutable_hatchs(int index) {
  return hatchs_.Mutable(index);
}
inline ::proto_ff::PetHatchInfo* PetDBData::add_hatchs() {
  return hatchs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetHatchInfo >&
PetDBData::hatchs() const {
  return hatchs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetHatchInfo >*
PetDBData::mutable_hatchs() {
  return &hatchs_;
}

// repeated .proto_ff.PetDBRecord records = 4;
inline int PetDBData::records_size() const {
  return records_.size();
}
inline void PetDBData::clear_records() {
  records_.Clear();
}
inline const ::proto_ff::PetDBRecord& PetDBData::records(int index) const {
  return records_.Get(index);
}
inline ::proto_ff::PetDBRecord* PetDBData::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::proto_ff::PetDBRecord* PetDBData::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetDBRecord >&
PetDBData::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetDBRecord >*
PetDBData::mutable_records() {
  return &records_;
}

// repeated int64 cfgids = 5;
inline int PetDBData::cfgids_size() const {
  return cfgids_.size();
}
inline void PetDBData::clear_cfgids() {
  cfgids_.Clear();
}
inline ::google::protobuf::int64 PetDBData::cfgids(int index) const {
  return cfgids_.Get(index);
}
inline void PetDBData::set_cfgids(int index, ::google::protobuf::int64 value) {
  cfgids_.Set(index, value);
}
inline void PetDBData::add_cfgids(::google::protobuf::int64 value) {
  cfgids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PetDBData::cfgids() const {
  return cfgids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PetDBData::mutable_cfgids() {
  return &cfgids_;
}

// repeated .proto_ff.PetGrowDB grows = 6;
inline int PetDBData::grows_size() const {
  return grows_.size();
}
inline void PetDBData::clear_grows() {
  grows_.Clear();
}
inline const ::proto_ff::PetGrowDB& PetDBData::grows(int index) const {
  return grows_.Get(index);
}
inline ::proto_ff::PetGrowDB* PetDBData::mutable_grows(int index) {
  return grows_.Mutable(index);
}
inline ::proto_ff::PetGrowDB* PetDBData::add_grows() {
  return grows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PetGrowDB >&
PetDBData::grows() const {
  return grows_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PetGrowDB >*
PetDBData::mutable_grows() {
  return &grows_;
}

// optional .proto_ff.PetYaoHunModule yaohun = 7;
inline bool PetDBData::has_yaohun() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetDBData::set_has_yaohun() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetDBData::clear_has_yaohun() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetDBData::clear_yaohun() {
  if (yaohun_ != NULL) yaohun_->::proto_ff::PetYaoHunModule::Clear();
  clear_has_yaohun();
}
inline const ::proto_ff::PetYaoHunModule& PetDBData::yaohun() const {
  return yaohun_ != NULL ? *yaohun_ : *default_instance_->yaohun_;
}
inline ::proto_ff::PetYaoHunModule* PetDBData::mutable_yaohun() {
  set_has_yaohun();
  if (yaohun_ == NULL) yaohun_ = new ::proto_ff::PetYaoHunModule;
  return yaohun_;
}
inline ::proto_ff::PetYaoHunModule* PetDBData::release_yaohun() {
  clear_has_yaohun();
  ::proto_ff::PetYaoHunModule* temp = yaohun_;
  yaohun_ = NULL;
  return temp;
}
inline void PetDBData::set_allocated_yaohun(::proto_ff::PetYaoHunModule* yaohun) {
  delete yaohun_;
  yaohun_ = yaohun;
  if (yaohun) {
    set_has_yaohun();
  } else {
    clear_has_yaohun();
  }
}

// -------------------------------------------------------------------

// MallDBInfo

// optional int64 id = 1;
inline bool MallDBInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MallDBInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MallDBInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MallDBInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 MallDBInfo::id() const {
  return id_;
}
inline void MallDBInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool MallDBInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MallDBInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MallDBInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MallDBInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 MallDBInfo::num() const {
  return num_;
}
inline void MallDBInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint64 time = 3;
inline bool MallDBInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MallDBInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MallDBInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MallDBInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 MallDBInfo::time() const {
  return time_;
}
inline void MallDBInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// MallDBData

// repeated .proto_ff.MallDBInfo day = 1;
inline int MallDBData::day_size() const {
  return day_.size();
}
inline void MallDBData::clear_day() {
  day_.Clear();
}
inline const ::proto_ff::MallDBInfo& MallDBData::day(int index) const {
  return day_.Get(index);
}
inline ::proto_ff::MallDBInfo* MallDBData::mutable_day(int index) {
  return day_.Mutable(index);
}
inline ::proto_ff::MallDBInfo* MallDBData::add_day() {
  return day_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >&
MallDBData::day() const {
  return day_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >*
MallDBData::mutable_day() {
  return &day_;
}

// repeated .proto_ff.MallDBInfo week = 2;
inline int MallDBData::week_size() const {
  return week_.size();
}
inline void MallDBData::clear_week() {
  week_.Clear();
}
inline const ::proto_ff::MallDBInfo& MallDBData::week(int index) const {
  return week_.Get(index);
}
inline ::proto_ff::MallDBInfo* MallDBData::mutable_week(int index) {
  return week_.Mutable(index);
}
inline ::proto_ff::MallDBInfo* MallDBData::add_week() {
  return week_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >&
MallDBData::week() const {
  return week_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >*
MallDBData::mutable_week() {
  return &week_;
}

// repeated .proto_ff.MallDBInfo forever = 3;
inline int MallDBData::forever_size() const {
  return forever_.size();
}
inline void MallDBData::clear_forever() {
  forever_.Clear();
}
inline const ::proto_ff::MallDBInfo& MallDBData::forever(int index) const {
  return forever_.Get(index);
}
inline ::proto_ff::MallDBInfo* MallDBData::mutable_forever(int index) {
  return forever_.Mutable(index);
}
inline ::proto_ff::MallDBInfo* MallDBData::add_forever() {
  return forever_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >&
MallDBData::forever() const {
  return forever_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MallDBInfo >*
MallDBData::mutable_forever() {
  return &forever_;
}

// -------------------------------------------------------------------

// ConvoyData

// optional int32 daynum = 1;
inline bool ConvoyData::has_daynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvoyData::set_has_daynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvoyData::clear_has_daynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvoyData::clear_daynum() {
  daynum_ = 0;
  clear_has_daynum();
}
inline ::google::protobuf::int32 ConvoyData::daynum() const {
  return daynum_;
}
inline void ConvoyData::set_daynum(::google::protobuf::int32 value) {
  set_has_daynum();
  daynum_ = value;
}

// optional int32 escortid = 2;
inline bool ConvoyData::has_escortid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvoyData::set_has_escortid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvoyData::clear_has_escortid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvoyData::clear_escortid() {
  escortid_ = 0;
  clear_has_escortid();
}
inline ::google::protobuf::int32 ConvoyData::escortid() const {
  return escortid_;
}
inline void ConvoyData::set_escortid(::google::protobuf::int32 value) {
  set_has_escortid();
  escortid_ = value;
}

// optional uint64 endTime = 3;
inline bool ConvoyData::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvoyData::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvoyData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvoyData::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 ConvoyData::endtime() const {
  return endtime_;
}
inline void ConvoyData::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int32 freeNum = 4;
inline bool ConvoyData::has_freenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvoyData::set_has_freenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvoyData::clear_has_freenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvoyData::clear_freenum() {
  freenum_ = 0;
  clear_has_freenum();
}
inline ::google::protobuf::int32 ConvoyData::freenum() const {
  return freenum_;
}
inline void ConvoyData::set_freenum(::google::protobuf::int32 value) {
  set_has_freenum();
  freenum_ = value;
}

// optional int32 genEscortId = 5;
inline bool ConvoyData::has_genescortid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvoyData::set_has_genescortid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvoyData::clear_has_genescortid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvoyData::clear_genescortid() {
  genescortid_ = 0;
  clear_has_genescortid();
}
inline ::google::protobuf::int32 ConvoyData::genescortid() const {
  return genescortid_;
}
inline void ConvoyData::set_genescortid(::google::protobuf::int32 value) {
  set_has_genescortid();
  genescortid_ = value;
}

// optional uint64 resetTime = 6;
inline bool ConvoyData::has_resettime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvoyData::set_has_resettime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvoyData::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvoyData::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 ConvoyData::resettime() const {
  return resettime_;
}
inline void ConvoyData::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
}

// -------------------------------------------------------------------

// ArmorDBData

// repeated .proto_ff.ArmorInfo infos = 1;
inline int ArmorDBData::infos_size() const {
  return infos_.size();
}
inline void ArmorDBData::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::ArmorInfo& ArmorDBData::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::ArmorInfo* ArmorDBData::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::ArmorInfo* ArmorDBData::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArmorInfo >&
ArmorDBData::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArmorInfo >*
ArmorDBData::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// AssistDBData

// optional uint64 resetTime = 1;
inline bool AssistDBData::has_resettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AssistDBData::set_has_resettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AssistDBData::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AssistDBData::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 AssistDBData::resettime() const {
  return resettime_;
}
inline void AssistDBData::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
}

// optional int32 dayPrestige = 2;
inline bool AssistDBData::has_dayprestige() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AssistDBData::set_has_dayprestige() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AssistDBData::clear_has_dayprestige() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AssistDBData::clear_dayprestige() {
  dayprestige_ = 0;
  clear_has_dayprestige();
}
inline ::google::protobuf::int32 AssistDBData::dayprestige() const {
  return dayprestige_;
}
inline void AssistDBData::set_dayprestige(::google::protobuf::int32 value) {
  set_has_dayprestige();
  dayprestige_ = value;
}

// optional int32 sendNum = 3;
inline bool AssistDBData::has_sendnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AssistDBData::set_has_sendnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AssistDBData::clear_has_sendnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AssistDBData::clear_sendnum() {
  sendnum_ = 0;
  clear_has_sendnum();
}
inline ::google::protobuf::int32 AssistDBData::sendnum() const {
  return sendnum_;
}
inline void AssistDBData::set_sendnum(::google::protobuf::int32 value) {
  set_has_sendnum();
  sendnum_ = value;
}

// optional int32 helpNum = 4;
inline bool AssistDBData::has_helpnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AssistDBData::set_has_helpnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AssistDBData::clear_has_helpnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AssistDBData::clear_helpnum() {
  helpnum_ = 0;
  clear_has_helpnum();
}
inline ::google::protobuf::int32 AssistDBData::helpnum() const {
  return helpnum_;
}
inline void AssistDBData::set_helpnum(::google::protobuf::int32 value) {
  set_has_helpnum();
  helpnum_ = value;
}

// optional int32 allSendNum = 5;
inline bool AssistDBData::has_allsendnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AssistDBData::set_has_allsendnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AssistDBData::clear_has_allsendnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AssistDBData::clear_allsendnum() {
  allsendnum_ = 0;
  clear_has_allsendnum();
}
inline ::google::protobuf::int32 AssistDBData::allsendnum() const {
  return allsendnum_;
}
inline void AssistDBData::set_allsendnum(::google::protobuf::int32 value) {
  set_has_allsendnum();
  allsendnum_ = value;
}

// optional int32 allHelpNum = 6;
inline bool AssistDBData::has_allhelpnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AssistDBData::set_has_allhelpnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AssistDBData::clear_has_allhelpnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AssistDBData::clear_allhelpnum() {
  allhelpnum_ = 0;
  clear_has_allhelpnum();
}
inline ::google::protobuf::int32 AssistDBData::allhelpnum() const {
  return allhelpnum_;
}
inline void AssistDBData::set_allhelpnum(::google::protobuf::int32 value) {
  set_has_allhelpnum();
  allhelpnum_ = value;
}

// optional int32 recvSendGiftNum = 7;
inline bool AssistDBData::has_recvsendgiftnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AssistDBData::set_has_recvsendgiftnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AssistDBData::clear_has_recvsendgiftnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AssistDBData::clear_recvsendgiftnum() {
  recvsendgiftnum_ = 0;
  clear_has_recvsendgiftnum();
}
inline ::google::protobuf::int32 AssistDBData::recvsendgiftnum() const {
  return recvsendgiftnum_;
}
inline void AssistDBData::set_recvsendgiftnum(::google::protobuf::int32 value) {
  set_has_recvsendgiftnum();
  recvsendgiftnum_ = value;
}

// optional int32 recvHelpGiftNum = 8;
inline bool AssistDBData::has_recvhelpgiftnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AssistDBData::set_has_recvhelpgiftnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AssistDBData::clear_has_recvhelpgiftnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AssistDBData::clear_recvhelpgiftnum() {
  recvhelpgiftnum_ = 0;
  clear_has_recvhelpgiftnum();
}
inline ::google::protobuf::int32 AssistDBData::recvhelpgiftnum() const {
  return recvhelpgiftnum_;
}
inline void AssistDBData::set_recvhelpgiftnum(::google::protobuf::int32 value) {
  set_has_recvhelpgiftnum();
  recvhelpgiftnum_ = value;
}

// repeated int32 rewardIds = 9;
inline int AssistDBData::rewardids_size() const {
  return rewardids_.size();
}
inline void AssistDBData::clear_rewardids() {
  rewardids_.Clear();
}
inline ::google::protobuf::int32 AssistDBData::rewardids(int index) const {
  return rewardids_.Get(index);
}
inline void AssistDBData::set_rewardids(int index, ::google::protobuf::int32 value) {
  rewardids_.Set(index, value);
}
inline void AssistDBData::add_rewardids(::google::protobuf::int32 value) {
  rewardids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AssistDBData::rewardids() const {
  return rewardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AssistDBData::mutable_rewardids() {
  return &rewardids_;
}

// repeated .proto_ff.ComPair64 thanksInfo = 10;
inline int AssistDBData::thanksinfo_size() const {
  return thanksinfo_.size();
}
inline void AssistDBData::clear_thanksinfo() {
  thanksinfo_.Clear();
}
inline const ::proto_ff::ComPair64& AssistDBData::thanksinfo(int index) const {
  return thanksinfo_.Get(index);
}
inline ::proto_ff::ComPair64* AssistDBData::mutable_thanksinfo(int index) {
  return thanksinfo_.Mutable(index);
}
inline ::proto_ff::ComPair64* AssistDBData::add_thanksinfo() {
  return thanksinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
AssistDBData::thanksinfo() const {
  return thanksinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
AssistDBData::mutable_thanksinfo() {
  return &thanksinfo_;
}

// -------------------------------------------------------------------

// TitleDBData

// optional uint64 cur_wearing_title = 1;
inline bool TitleDBData::has_cur_wearing_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TitleDBData::set_has_cur_wearing_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TitleDBData::clear_has_cur_wearing_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TitleDBData::clear_cur_wearing_title() {
  cur_wearing_title_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_wearing_title();
}
inline ::google::protobuf::uint64 TitleDBData::cur_wearing_title() const {
  return cur_wearing_title_;
}
inline void TitleDBData::set_cur_wearing_title(::google::protobuf::uint64 value) {
  set_has_cur_wearing_title();
  cur_wearing_title_ = value;
}

// repeated .proto_ff.TitleInfo data = 2;
inline int TitleDBData::data_size() const {
  return data_.size();
}
inline void TitleDBData::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::TitleInfo& TitleDBData::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::TitleInfo* TitleDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::TitleInfo* TitleDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TitleInfo >&
TitleDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TitleInfo >*
TitleDBData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GodEvilCondDBProto

// optional int32 id = 1;
inline bool GodEvilCondDBProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GodEvilCondDBProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GodEvilCondDBProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GodEvilCondDBProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GodEvilCondDBProto::id() const {
  return id_;
}
inline void GodEvilCondDBProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 state = 2;
inline bool GodEvilCondDBProto::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GodEvilCondDBProto::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GodEvilCondDBProto::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GodEvilCondDBProto::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GodEvilCondDBProto::state() const {
  return state_;
}
inline void GodEvilCondDBProto::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 cur = 3;
inline bool GodEvilCondDBProto::has_cur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GodEvilCondDBProto::set_has_cur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GodEvilCondDBProto::clear_has_cur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GodEvilCondDBProto::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 GodEvilCondDBProto::cur() const {
  return cur_;
}
inline void GodEvilCondDBProto::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// -------------------------------------------------------------------

// GodEvilMultCondDBProto

// repeated .proto_ff.GodEvilCondDBProto lst = 1;
inline int GodEvilMultCondDBProto::lst_size() const {
  return lst_.size();
}
inline void GodEvilMultCondDBProto::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::GodEvilCondDBProto& GodEvilMultCondDBProto::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::GodEvilCondDBProto* GodEvilMultCondDBProto::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::GodEvilCondDBProto* GodEvilMultCondDBProto::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GodEvilCondDBProto >&
GodEvilMultCondDBProto::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GodEvilCondDBProto >*
GodEvilMultCondDBProto::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// GodEvilTaskDBProto

// optional int32 stage = 1;
inline bool GodEvilTaskDBProto::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GodEvilTaskDBProto::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GodEvilTaskDBProto::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GodEvilTaskDBProto::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 GodEvilTaskDBProto::stage() const {
  return stage_;
}
inline void GodEvilTaskDBProto::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// optional .proto_ff.GodEvilMultCondDBProto cond = 2;
inline bool GodEvilTaskDBProto::has_cond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GodEvilTaskDBProto::set_has_cond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GodEvilTaskDBProto::clear_has_cond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GodEvilTaskDBProto::clear_cond() {
  if (cond_ != NULL) cond_->::proto_ff::GodEvilMultCondDBProto::Clear();
  clear_has_cond();
}
inline const ::proto_ff::GodEvilMultCondDBProto& GodEvilTaskDBProto::cond() const {
  return cond_ != NULL ? *cond_ : *default_instance_->cond_;
}
inline ::proto_ff::GodEvilMultCondDBProto* GodEvilTaskDBProto::mutable_cond() {
  set_has_cond();
  if (cond_ == NULL) cond_ = new ::proto_ff::GodEvilMultCondDBProto;
  return cond_;
}
inline ::proto_ff::GodEvilMultCondDBProto* GodEvilTaskDBProto::release_cond() {
  clear_has_cond();
  ::proto_ff::GodEvilMultCondDBProto* temp = cond_;
  cond_ = NULL;
  return temp;
}
inline void GodEvilTaskDBProto::set_allocated_cond(::proto_ff::GodEvilMultCondDBProto* cond) {
  delete cond_;
  cond_ = cond;
  if (cond) {
    set_has_cond();
  } else {
    clear_has_cond();
  }
}

// optional int32 finish = 3;
inline bool GodEvilTaskDBProto::has_finish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GodEvilTaskDBProto::set_has_finish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GodEvilTaskDBProto::clear_has_finish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GodEvilTaskDBProto::clear_finish() {
  finish_ = 0;
  clear_has_finish();
}
inline ::google::protobuf::int32 GodEvilTaskDBProto::finish() const {
  return finish_;
}
inline void GodEvilTaskDBProto::set_finish(::google::protobuf::int32 value) {
  set_has_finish();
  finish_ = value;
}

// optional int32 accept = 4;
inline bool GodEvilTaskDBProto::has_accept() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GodEvilTaskDBProto::set_has_accept() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GodEvilTaskDBProto::clear_has_accept() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GodEvilTaskDBProto::clear_accept() {
  accept_ = 0;
  clear_has_accept();
}
inline ::google::protobuf::int32 GodEvilTaskDBProto::accept() const {
  return accept_;
}
inline void GodEvilTaskDBProto::set_accept(::google::protobuf::int32 value) {
  set_has_accept();
  accept_ = value;
}

// -------------------------------------------------------------------

// GodEvilDBData

// optional int32 fetch = 1;
inline bool GodEvilDBData::has_fetch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GodEvilDBData::set_has_fetch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GodEvilDBData::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GodEvilDBData::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 GodEvilDBData::fetch() const {
  return fetch_;
}
inline void GodEvilDBData::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// optional .proto_ff.GodEvilTaskDBProto task = 2;
inline bool GodEvilDBData::has_task() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GodEvilDBData::set_has_task() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GodEvilDBData::clear_has_task() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GodEvilDBData::clear_task() {
  if (task_ != NULL) task_->::proto_ff::GodEvilTaskDBProto::Clear();
  clear_has_task();
}
inline const ::proto_ff::GodEvilTaskDBProto& GodEvilDBData::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::proto_ff::GodEvilTaskDBProto* GodEvilDBData::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::proto_ff::GodEvilTaskDBProto;
  return task_;
}
inline ::proto_ff::GodEvilTaskDBProto* GodEvilDBData::release_task() {
  clear_has_task();
  ::proto_ff::GodEvilTaskDBProto* temp = task_;
  task_ = NULL;
  return temp;
}
inline void GodEvilDBData::set_allocated_task(::proto_ff::GodEvilTaskDBProto* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional int32 type = 3;
inline bool GodEvilDBData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GodEvilDBData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GodEvilDBData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GodEvilDBData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GodEvilDBData::type() const {
  return type_;
}
inline void GodEvilDBData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 last_time = 4;
inline bool GodEvilDBData::has_last_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GodEvilDBData::set_has_last_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GodEvilDBData::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GodEvilDBData::clear_last_time() {
  last_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_time();
}
inline ::google::protobuf::uint64 GodEvilDBData::last_time() const {
  return last_time_;
}
inline void GodEvilDBData::set_last_time(::google::protobuf::uint64 value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 vessel_lev = 5;
inline bool GodEvilDBData::has_vessel_lev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GodEvilDBData::set_has_vessel_lev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GodEvilDBData::clear_has_vessel_lev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GodEvilDBData::clear_vessel_lev() {
  vessel_lev_ = 0;
  clear_has_vessel_lev();
}
inline ::google::protobuf::int32 GodEvilDBData::vessel_lev() const {
  return vessel_lev_;
}
inline void GodEvilDBData::set_vessel_lev(::google::protobuf::int32 value) {
  set_has_vessel_lev();
  vessel_lev_ = value;
}

// optional int32 mirror_lev = 6;
inline bool GodEvilDBData::has_mirror_lev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GodEvilDBData::set_has_mirror_lev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GodEvilDBData::clear_has_mirror_lev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GodEvilDBData::clear_mirror_lev() {
  mirror_lev_ = 0;
  clear_has_mirror_lev();
}
inline ::google::protobuf::int32 GodEvilDBData::mirror_lev() const {
  return mirror_lev_;
}
inline void GodEvilDBData::set_mirror_lev(::google::protobuf::int32 value) {
  set_has_mirror_lev();
  mirror_lev_ = value;
}

// optional int64 extra_exp = 7;
inline bool GodEvilDBData::has_extra_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GodEvilDBData::set_has_extra_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GodEvilDBData::clear_has_extra_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GodEvilDBData::clear_extra_exp() {
  extra_exp_ = GOOGLE_LONGLONG(0);
  clear_has_extra_exp();
}
inline ::google::protobuf::int64 GodEvilDBData::extra_exp() const {
  return extra_exp_;
}
inline void GodEvilDBData::set_extra_exp(::google::protobuf::int64 value) {
  set_has_extra_exp();
  extra_exp_ = value;
}

// repeated .proto_ff.ItemProtoInfo equip = 8;
inline int GodEvilDBData::equip_size() const {
  return equip_.size();
}
inline void GodEvilDBData::clear_equip() {
  equip_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& GodEvilDBData::equip(int index) const {
  return equip_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* GodEvilDBData::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* GodEvilDBData::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
GodEvilDBData::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
GodEvilDBData::mutable_equip() {
  return &equip_;
}

// repeated .proto_ff.ItemProtoInfo dress = 9;
inline int GodEvilDBData::dress_size() const {
  return dress_.size();
}
inline void GodEvilDBData::clear_dress() {
  dress_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& GodEvilDBData::dress(int index) const {
  return dress_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* GodEvilDBData::mutable_dress(int index) {
  return dress_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* GodEvilDBData::add_dress() {
  return dress_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
GodEvilDBData::dress() const {
  return dress_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
GodEvilDBData::mutable_dress() {
  return &dress_;
}

// -------------------------------------------------------------------

// PayDBData

// repeated uint32 db_id = 1;
inline int PayDBData::db_id_size() const {
  return db_id_.size();
}
inline void PayDBData::clear_db_id() {
  db_id_.Clear();
}
inline ::google::protobuf::uint32 PayDBData::db_id(int index) const {
  return db_id_.Get(index);
}
inline void PayDBData::set_db_id(int index, ::google::protobuf::uint32 value) {
  db_id_.Set(index, value);
}
inline void PayDBData::add_db_id(::google::protobuf::uint32 value) {
  db_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PayDBData::db_id() const {
  return db_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PayDBData::mutable_db_id() {
  return &db_id_;
}

// repeated bytes product = 2;
inline int PayDBData::product_size() const {
  return product_.size();
}
inline void PayDBData::clear_product() {
  product_.Clear();
}
inline const ::std::string& PayDBData::product(int index) const {
  return product_.Get(index);
}
inline ::std::string* PayDBData::mutable_product(int index) {
  return product_.Mutable(index);
}
inline void PayDBData::set_product(int index, const ::std::string& value) {
  product_.Mutable(index)->assign(value);
}
inline void PayDBData::set_product(int index, const char* value) {
  product_.Mutable(index)->assign(value);
}
inline void PayDBData::set_product(int index, const void* value, size_t size) {
  product_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayDBData::add_product() {
  return product_.Add();
}
inline void PayDBData::add_product(const ::std::string& value) {
  product_.Add()->assign(value);
}
inline void PayDBData::add_product(const char* value) {
  product_.Add()->assign(value);
}
inline void PayDBData::add_product(const void* value, size_t size) {
  product_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PayDBData::product() const {
  return product_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PayDBData::mutable_product() {
  return &product_;
}

// optional uint32 relrmb = 3;
inline bool PayDBData::has_relrmb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayDBData::set_has_relrmb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayDBData::clear_has_relrmb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayDBData::clear_relrmb() {
  relrmb_ = 0u;
  clear_has_relrmb();
}
inline ::google::protobuf::uint32 PayDBData::relrmb() const {
  return relrmb_;
}
inline void PayDBData::set_relrmb(::google::protobuf::uint32 value) {
  set_has_relrmb();
  relrmb_ = value;
}

// optional uint32 rmb = 4;
inline bool PayDBData::has_rmb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayDBData::set_has_rmb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayDBData::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayDBData::clear_rmb() {
  rmb_ = 0u;
  clear_has_rmb();
}
inline ::google::protobuf::uint32 PayDBData::rmb() const {
  return rmb_;
}
inline void PayDBData::set_rmb(::google::protobuf::uint32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional uint32 fakermb = 5;
inline bool PayDBData::has_fakermb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PayDBData::set_has_fakermb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PayDBData::clear_has_fakermb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PayDBData::clear_fakermb() {
  fakermb_ = 0u;
  clear_has_fakermb();
}
inline ::google::protobuf::uint32 PayDBData::fakermb() const {
  return fakermb_;
}
inline void PayDBData::set_fakermb(::google::protobuf::uint32 value) {
  set_has_fakermb();
  fakermb_ = value;
}

// optional uint32 todayrmb = 6;
inline bool PayDBData::has_todayrmb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PayDBData::set_has_todayrmb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PayDBData::clear_has_todayrmb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PayDBData::clear_todayrmb() {
  todayrmb_ = 0u;
  clear_has_todayrmb();
}
inline ::google::protobuf::uint32 PayDBData::todayrmb() const {
  return todayrmb_;
}
inline void PayDBData::set_todayrmb(::google::protobuf::uint32 value) {
  set_has_todayrmb();
  todayrmb_ = value;
}

// optional uint64 todaytime = 7;
inline bool PayDBData::has_todaytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PayDBData::set_has_todaytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PayDBData::clear_has_todaytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PayDBData::clear_todaytime() {
  todaytime_ = GOOGLE_ULONGLONG(0);
  clear_has_todaytime();
}
inline ::google::protobuf::uint64 PayDBData::todaytime() const {
  return todaytime_;
}
inline void PayDBData::set_todaytime(::google::protobuf::uint64 value) {
  set_has_todaytime();
  todaytime_ = value;
}

// optional uint32 sdkrmb = 8;
inline bool PayDBData::has_sdkrmb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PayDBData::set_has_sdkrmb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PayDBData::clear_has_sdkrmb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PayDBData::clear_sdkrmb() {
  sdkrmb_ = 0u;
  clear_has_sdkrmb();
}
inline ::google::protobuf::uint32 PayDBData::sdkrmb() const {
  return sdkrmb_;
}
inline void PayDBData::set_sdkrmb(::google::protobuf::uint32 value) {
  set_has_sdkrmb();
  sdkrmb_ = value;
}

// -------------------------------------------------------------------

// FactionDBSalary

// optional int32 id = 1;
inline bool FactionDBSalary::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBSalary::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBSalary::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBSalary::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FactionDBSalary::id() const {
  return id_;
}
inline void FactionDBSalary::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cur = 2;
inline bool FactionDBSalary::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBSalary::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBSalary::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBSalary::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 FactionDBSalary::cur() const {
  return cur_;
}
inline void FactionDBSalary::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional int32 fetch = 3;
inline bool FactionDBSalary::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDBSalary::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDBSalary::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDBSalary::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 FactionDBSalary::fetch() const {
  return fetch_;
}
inline void FactionDBSalary::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// FactionDBDinner

// optional int32 trans = 1;
inline bool FactionDBDinner::has_trans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBDinner::set_has_trans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBDinner::clear_has_trans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBDinner::clear_trans() {
  trans_ = 0;
  clear_has_trans();
}
inline ::google::protobuf::int32 FactionDBDinner::trans() const {
  return trans_;
}
inline void FactionDBDinner::set_trans(::google::protobuf::int32 value) {
  set_has_trans();
  trans_ = value;
}

// optional int32 meat = 2;
inline bool FactionDBDinner::has_meat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBDinner::set_has_meat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBDinner::clear_has_meat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBDinner::clear_meat() {
  meat_ = 0;
  clear_has_meat();
}
inline ::google::protobuf::int32 FactionDBDinner::meat() const {
  return meat_;
}
inline void FactionDBDinner::set_meat(::google::protobuf::int32 value) {
  set_has_meat();
  meat_ = value;
}

// optional uint32 exp = 3;
inline bool FactionDBDinner::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDBDinner::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDBDinner::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDBDinner::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 FactionDBDinner::exp() const {
  return exp_;
}
inline void FactionDBDinner::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 contri = 4;
inline bool FactionDBDinner::has_contri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDBDinner::set_has_contri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDBDinner::clear_has_contri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDBDinner::clear_contri() {
  contri_ = 0u;
  clear_has_contri();
}
inline ::google::protobuf::uint32 FactionDBDinner::contri() const {
  return contri_;
}
inline void FactionDBDinner::set_contri(::google::protobuf::uint32 value) {
  set_has_contri();
  contri_ = value;
}

// optional uint64 time = 5;
inline bool FactionDBDinner::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionDBDinner::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionDBDinner::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionDBDinner::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionDBDinner::time() const {
  return time_;
}
inline void FactionDBDinner::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 trans_time = 6;
inline bool FactionDBDinner::has_trans_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionDBDinner::set_has_trans_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionDBDinner::clear_has_trans_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionDBDinner::clear_trans_time() {
  trans_time_ = GOOGLE_ULONGLONG(0);
  clear_has_trans_time();
}
inline ::google::protobuf::uint64 FactionDBDinner::trans_time() const {
  return trans_time_;
}
inline void FactionDBDinner::set_trans_time(::google::protobuf::uint64 value) {
  set_has_trans_time();
  trans_time_ = value;
}

// -------------------------------------------------------------------

// FactionDBSkillProto

// optional int32 id = 1;
inline bool FactionDBSkillProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBSkillProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBSkillProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBSkillProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FactionDBSkillProto::id() const {
  return id_;
}
inline void FactionDBSkillProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool FactionDBSkillProto::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBSkillProto::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBSkillProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBSkillProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionDBSkillProto::level() const {
  return level_;
}
inline void FactionDBSkillProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// FactionDBSkill

// repeated .proto_ff.FactionDBSkillProto info = 1;
inline int FactionDBSkill::info_size() const {
  return info_.size();
}
inline void FactionDBSkill::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FactionDBSkillProto& FactionDBSkill::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FactionDBSkillProto* FactionDBSkill::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FactionDBSkillProto* FactionDBSkill::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSkillProto >&
FactionDBSkill::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSkillProto >*
FactionDBSkill::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FactionDBGuard

// optional uint32 exp = 1;
inline bool FactionDBGuard::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBGuard::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBGuard::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBGuard::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 FactionDBGuard::exp() const {
  return exp_;
}
inline void FactionDBGuard::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 contri = 2;
inline bool FactionDBGuard::has_contri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBGuard::set_has_contri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBGuard::clear_has_contri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBGuard::clear_contri() {
  contri_ = 0u;
  clear_has_contri();
}
inline ::google::protobuf::uint32 FactionDBGuard::contri() const {
  return contri_;
}
inline void FactionDBGuard::set_contri(::google::protobuf::uint32 value) {
  set_has_contri();
  contri_ = value;
}

// optional uint64 cur_encouragement_gold_count = 3;
inline bool FactionDBGuard::has_cur_encouragement_gold_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDBGuard::set_has_cur_encouragement_gold_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDBGuard::clear_has_cur_encouragement_gold_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDBGuard::clear_cur_encouragement_gold_count() {
  cur_encouragement_gold_count_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_encouragement_gold_count();
}
inline ::google::protobuf::uint64 FactionDBGuard::cur_encouragement_gold_count() const {
  return cur_encouragement_gold_count_;
}
inline void FactionDBGuard::set_cur_encouragement_gold_count(::google::protobuf::uint64 value) {
  set_has_cur_encouragement_gold_count();
  cur_encouragement_gold_count_ = value;
}

// optional uint64 cur_encouragement_diamond_count = 4;
inline bool FactionDBGuard::has_cur_encouragement_diamond_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDBGuard::set_has_cur_encouragement_diamond_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDBGuard::clear_has_cur_encouragement_diamond_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDBGuard::clear_cur_encouragement_diamond_count() {
  cur_encouragement_diamond_count_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_encouragement_diamond_count();
}
inline ::google::protobuf::uint64 FactionDBGuard::cur_encouragement_diamond_count() const {
  return cur_encouragement_diamond_count_;
}
inline void FactionDBGuard::set_cur_encouragement_diamond_count(::google::protobuf::uint64 value) {
  set_has_cur_encouragement_diamond_count();
  cur_encouragement_diamond_count_ = value;
}

// -------------------------------------------------------------------

// RoleFactionDBData

// optional int32 donate_num = 1;
inline bool RoleFactionDBData::has_donate_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleFactionDBData::set_has_donate_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleFactionDBData::clear_has_donate_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleFactionDBData::clear_donate_num() {
  donate_num_ = 0;
  clear_has_donate_num();
}
inline ::google::protobuf::int32 RoleFactionDBData::donate_num() const {
  return donate_num_;
}
inline void RoleFactionDBData::set_donate_num(::google::protobuf::int32 value) {
  set_has_donate_num();
  donate_num_ = value;
}

// optional uint64 donate_fresh = 2;
inline bool RoleFactionDBData::has_donate_fresh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleFactionDBData::set_has_donate_fresh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleFactionDBData::clear_has_donate_fresh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleFactionDBData::clear_donate_fresh() {
  donate_fresh_ = GOOGLE_ULONGLONG(0);
  clear_has_donate_fresh();
}
inline ::google::protobuf::uint64 RoleFactionDBData::donate_fresh() const {
  return donate_fresh_;
}
inline void RoleFactionDBData::set_donate_fresh(::google::protobuf::uint64 value) {
  set_has_donate_fresh();
  donate_fresh_ = value;
}

// repeated .proto_ff.FactionDBSalary salary = 3;
inline int RoleFactionDBData::salary_size() const {
  return salary_.size();
}
inline void RoleFactionDBData::clear_salary() {
  salary_.Clear();
}
inline const ::proto_ff::FactionDBSalary& RoleFactionDBData::salary(int index) const {
  return salary_.Get(index);
}
inline ::proto_ff::FactionDBSalary* RoleFactionDBData::mutable_salary(int index) {
  return salary_.Mutable(index);
}
inline ::proto_ff::FactionDBSalary* RoleFactionDBData::add_salary() {
  return salary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSalary >&
RoleFactionDBData::salary() const {
  return salary_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBSalary >*
RoleFactionDBData::mutable_salary() {
  return &salary_;
}

// optional uint64 salary_fresh = 4;
inline bool RoleFactionDBData::has_salary_fresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleFactionDBData::set_has_salary_fresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleFactionDBData::clear_has_salary_fresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleFactionDBData::clear_salary_fresh() {
  salary_fresh_ = GOOGLE_ULONGLONG(0);
  clear_has_salary_fresh();
}
inline ::google::protobuf::uint64 RoleFactionDBData::salary_fresh() const {
  return salary_fresh_;
}
inline void RoleFactionDBData::set_salary_fresh(::google::protobuf::uint64 value) {
  set_has_salary_fresh();
  salary_fresh_ = value;
}

// optional .proto_ff.FactionDBDinner dinner = 5;
inline bool RoleFactionDBData::has_dinner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleFactionDBData::set_has_dinner() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleFactionDBData::clear_has_dinner() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleFactionDBData::clear_dinner() {
  if (dinner_ != NULL) dinner_->::proto_ff::FactionDBDinner::Clear();
  clear_has_dinner();
}
inline const ::proto_ff::FactionDBDinner& RoleFactionDBData::dinner() const {
  return dinner_ != NULL ? *dinner_ : *default_instance_->dinner_;
}
inline ::proto_ff::FactionDBDinner* RoleFactionDBData::mutable_dinner() {
  set_has_dinner();
  if (dinner_ == NULL) dinner_ = new ::proto_ff::FactionDBDinner;
  return dinner_;
}
inline ::proto_ff::FactionDBDinner* RoleFactionDBData::release_dinner() {
  clear_has_dinner();
  ::proto_ff::FactionDBDinner* temp = dinner_;
  dinner_ = NULL;
  return temp;
}
inline void RoleFactionDBData::set_allocated_dinner(::proto_ff::FactionDBDinner* dinner) {
  delete dinner_;
  dinner_ = dinner;
  if (dinner) {
    set_has_dinner();
  } else {
    clear_has_dinner();
  }
}

// optional .proto_ff.FactionDBSkill skill = 6;
inline bool RoleFactionDBData::has_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleFactionDBData::set_has_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleFactionDBData::clear_has_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleFactionDBData::clear_skill() {
  if (skill_ != NULL) skill_->::proto_ff::FactionDBSkill::Clear();
  clear_has_skill();
}
inline const ::proto_ff::FactionDBSkill& RoleFactionDBData::skill() const {
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::proto_ff::FactionDBSkill* RoleFactionDBData::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::proto_ff::FactionDBSkill;
  return skill_;
}
inline ::proto_ff::FactionDBSkill* RoleFactionDBData::release_skill() {
  clear_has_skill();
  ::proto_ff::FactionDBSkill* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void RoleFactionDBData::set_allocated_skill(::proto_ff::FactionDBSkill* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
}

// optional .proto_ff.FactionDBGuard guard = 7;
inline bool RoleFactionDBData::has_guard() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleFactionDBData::set_has_guard() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleFactionDBData::clear_has_guard() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleFactionDBData::clear_guard() {
  if (guard_ != NULL) guard_->::proto_ff::FactionDBGuard::Clear();
  clear_has_guard();
}
inline const ::proto_ff::FactionDBGuard& RoleFactionDBData::guard() const {
  return guard_ != NULL ? *guard_ : *default_instance_->guard_;
}
inline ::proto_ff::FactionDBGuard* RoleFactionDBData::mutable_guard() {
  set_has_guard();
  if (guard_ == NULL) guard_ = new ::proto_ff::FactionDBGuard;
  return guard_;
}
inline ::proto_ff::FactionDBGuard* RoleFactionDBData::release_guard() {
  clear_has_guard();
  ::proto_ff::FactionDBGuard* temp = guard_;
  guard_ = NULL;
  return temp;
}
inline void RoleFactionDBData::set_allocated_guard(::proto_ff::FactionDBGuard* guard) {
  delete guard_;
  guard_ = guard;
  if (guard) {
    set_has_guard();
  } else {
    clear_has_guard();
  }
}

// optional int32 fetch_war = 8;
inline bool RoleFactionDBData::has_fetch_war() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleFactionDBData::set_has_fetch_war() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleFactionDBData::clear_has_fetch_war() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleFactionDBData::clear_fetch_war() {
  fetch_war_ = 0;
  clear_has_fetch_war();
}
inline ::google::protobuf::int32 RoleFactionDBData::fetch_war() const {
  return fetch_war_;
}
inline void RoleFactionDBData::set_fetch_war(::google::protobuf::int32 value) {
  set_has_fetch_war();
  fetch_war_ = value;
}

// optional uint64 fetch_time = 9;
inline bool RoleFactionDBData::has_fetch_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleFactionDBData::set_has_fetch_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleFactionDBData::clear_has_fetch_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleFactionDBData::clear_fetch_time() {
  fetch_time_ = GOOGLE_ULONGLONG(0);
  clear_has_fetch_time();
}
inline ::google::protobuf::uint64 RoleFactionDBData::fetch_time() const {
  return fetch_time_;
}
inline void RoleFactionDBData::set_fetch_time(::google::protobuf::uint64 value) {
  set_has_fetch_time();
  fetch_time_ = value;
}

// -------------------------------------------------------------------

// RoleBestEQDBData

// repeated .proto_ff.BestEQSlotInfo slots = 1;
inline int RoleBestEQDBData::slots_size() const {
  return slots_.size();
}
inline void RoleBestEQDBData::clear_slots() {
  slots_.Clear();
}
inline const ::proto_ff::BestEQSlotInfo& RoleBestEQDBData::slots(int index) const {
  return slots_.Get(index);
}
inline ::proto_ff::BestEQSlotInfo* RoleBestEQDBData::mutable_slots(int index) {
  return slots_.Mutable(index);
}
inline ::proto_ff::BestEQSlotInfo* RoleBestEQDBData::add_slots() {
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >&
RoleBestEQDBData::slots() const {
  return slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >*
RoleBestEQDBData::mutable_slots() {
  return &slots_;
}

// repeated .proto_ff.BestEQTask tasks = 2;
inline int RoleBestEQDBData::tasks_size() const {
  return tasks_.size();
}
inline void RoleBestEQDBData::clear_tasks() {
  tasks_.Clear();
}
inline const ::proto_ff::BestEQTask& RoleBestEQDBData::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::proto_ff::BestEQTask* RoleBestEQDBData::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::proto_ff::BestEQTask* RoleBestEQDBData::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQTask >&
RoleBestEQDBData::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQTask >*
RoleBestEQDBData::mutable_tasks() {
  return &tasks_;
}

// -------------------------------------------------------------------

// AncientDBData

// optional int32 unlock_star_id = 1;
inline bool AncientDBData::has_unlock_star_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AncientDBData::set_has_unlock_star_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AncientDBData::clear_has_unlock_star_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AncientDBData::clear_unlock_star_id() {
  unlock_star_id_ = 0;
  clear_has_unlock_star_id();
}
inline ::google::protobuf::int32 AncientDBData::unlock_star_id() const {
  return unlock_star_id_;
}
inline void AncientDBData::set_unlock_star_id(::google::protobuf::int32 value) {
  set_has_unlock_star_id();
  unlock_star_id_ = value;
}

// repeated .proto_ff.AncientInfo infos = 2;
inline int AncientDBData::infos_size() const {
  return infos_.size();
}
inline void AncientDBData::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::AncientInfo& AncientDBData::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::AncientInfo* AncientDBData::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::AncientInfo* AncientDBData::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::AncientInfo >&
AncientDBData::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::AncientInfo >*
AncientDBData::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// RoleEmblemDBInfo

// optional int32 id = 1;
inline bool RoleEmblemDBInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleEmblemDBInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleEmblemDBInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleEmblemDBInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RoleEmblemDBInfo::id() const {
  return id_;
}
inline void RoleEmblemDBInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 lv = 2;
inline bool RoleEmblemDBInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleEmblemDBInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleEmblemDBInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleEmblemDBInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 RoleEmblemDBInfo::lv() const {
  return lv_;
}
inline void RoleEmblemDBInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 star = 3;
inline bool RoleEmblemDBInfo::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleEmblemDBInfo::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleEmblemDBInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleEmblemDBInfo::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 RoleEmblemDBInfo::star() const {
  return star_;
}
inline void RoleEmblemDBInfo::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// Role1v1DBInfo

// optional int32 score = 1;
inline bool Role1v1DBInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Role1v1DBInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Role1v1DBInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Role1v1DBInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Role1v1DBInfo::score() const {
  return score_;
}
inline void Role1v1DBInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 match_num = 2;
inline bool Role1v1DBInfo::has_match_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Role1v1DBInfo::set_has_match_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Role1v1DBInfo::clear_has_match_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Role1v1DBInfo::clear_match_num() {
  match_num_ = 0;
  clear_has_match_num();
}
inline ::google::protobuf::int32 Role1v1DBInfo::match_num() const {
  return match_num_;
}
inline void Role1v1DBInfo::set_match_num(::google::protobuf::int32 value) {
  set_has_match_num();
  match_num_ = value;
}

// optional int32 win_num = 3;
inline bool Role1v1DBInfo::has_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Role1v1DBInfo::set_has_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Role1v1DBInfo::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Role1v1DBInfo::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 Role1v1DBInfo::win_num() const {
  return win_num_;
}
inline void Role1v1DBInfo::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 conti_num = 4;
inline bool Role1v1DBInfo::has_conti_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Role1v1DBInfo::set_has_conti_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Role1v1DBInfo::clear_has_conti_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Role1v1DBInfo::clear_conti_num() {
  conti_num_ = 0;
  clear_has_conti_num();
}
inline ::google::protobuf::int32 Role1v1DBInfo::conti_num() const {
  return conti_num_;
}
inline void Role1v1DBInfo::set_conti_num(::google::protobuf::int32 value) {
  set_has_conti_num();
  conti_num_ = value;
}

// optional int32 reward_num = 5;
inline bool Role1v1DBInfo::has_reward_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Role1v1DBInfo::set_has_reward_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Role1v1DBInfo::clear_has_reward_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Role1v1DBInfo::clear_reward_num() {
  reward_num_ = 0;
  clear_has_reward_num();
}
inline ::google::protobuf::int32 Role1v1DBInfo::reward_num() const {
  return reward_num_;
}
inline void Role1v1DBInfo::set_reward_num(::google::protobuf::int32 value) {
  set_has_reward_num();
  reward_num_ = value;
}

// repeated int32 already_fetch = 6;
inline int Role1v1DBInfo::already_fetch_size() const {
  return already_fetch_.size();
}
inline void Role1v1DBInfo::clear_already_fetch() {
  already_fetch_.Clear();
}
inline ::google::protobuf::int32 Role1v1DBInfo::already_fetch(int index) const {
  return already_fetch_.Get(index);
}
inline void Role1v1DBInfo::set_already_fetch(int index, ::google::protobuf::int32 value) {
  already_fetch_.Set(index, value);
}
inline void Role1v1DBInfo::add_already_fetch(::google::protobuf::int32 value) {
  already_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Role1v1DBInfo::already_fetch() const {
  return already_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Role1v1DBInfo::mutable_already_fetch() {
  return &already_fetch_;
}

// optional uint64 reward_time = 7;
inline bool Role1v1DBInfo::has_reward_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Role1v1DBInfo::set_has_reward_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Role1v1DBInfo::clear_has_reward_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Role1v1DBInfo::clear_reward_time() {
  reward_time_ = GOOGLE_ULONGLONG(0);
  clear_has_reward_time();
}
inline ::google::protobuf::uint64 Role1v1DBInfo::reward_time() const {
  return reward_time_;
}
inline void Role1v1DBInfo::set_reward_time(::google::protobuf::uint64 value) {
  set_has_reward_time();
  reward_time_ = value;
}

// optional uint64 reset_time = 8;
inline bool Role1v1DBInfo::has_reset_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Role1v1DBInfo::set_has_reset_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Role1v1DBInfo::clear_has_reset_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Role1v1DBInfo::clear_reset_time() {
  reset_time_ = GOOGLE_ULONGLONG(0);
  clear_has_reset_time();
}
inline ::google::protobuf::uint64 Role1v1DBInfo::reset_time() const {
  return reset_time_;
}
inline void Role1v1DBInfo::set_reset_time(::google::protobuf::uint64 value) {
  set_has_reset_time();
  reset_time_ = value;
}

// optional int32 cur_conti_num = 9;
inline bool Role1v1DBInfo::has_cur_conti_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Role1v1DBInfo::set_has_cur_conti_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Role1v1DBInfo::clear_has_cur_conti_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Role1v1DBInfo::clear_cur_conti_num() {
  cur_conti_num_ = 0;
  clear_has_cur_conti_num();
}
inline ::google::protobuf::int32 Role1v1DBInfo::cur_conti_num() const {
  return cur_conti_num_;
}
inline void Role1v1DBInfo::set_cur_conti_num(::google::protobuf::int32 value) {
  set_has_cur_conti_num();
  cur_conti_num_ = value;
}

// -------------------------------------------------------------------

// RolePvpDBData

// optional int32 pkmode = 1;
inline bool RolePvpDBData::has_pkmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RolePvpDBData::set_has_pkmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RolePvpDBData::clear_has_pkmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RolePvpDBData::clear_pkmode() {
  pkmode_ = 0;
  clear_has_pkmode();
}
inline ::google::protobuf::int32 RolePvpDBData::pkmode() const {
  return pkmode_;
}
inline void RolePvpDBData::set_pkmode(::google::protobuf::int32 value) {
  set_has_pkmode();
  pkmode_ = value;
}

// optional int32 chg_time = 2;
inline bool RolePvpDBData::has_chg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RolePvpDBData::set_has_chg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RolePvpDBData::clear_has_chg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RolePvpDBData::clear_chg_time() {
  chg_time_ = 0;
  clear_has_chg_time();
}
inline ::google::protobuf::int32 RolePvpDBData::chg_time() const {
  return chg_time_;
}
inline void RolePvpDBData::set_chg_time(::google::protobuf::int32 value) {
  set_has_chg_time();
  chg_time_ = value;
}

// optional int32 killvalue = 3;
inline bool RolePvpDBData::has_killvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RolePvpDBData::set_has_killvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RolePvpDBData::clear_has_killvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RolePvpDBData::clear_killvalue() {
  killvalue_ = 0;
  clear_has_killvalue();
}
inline ::google::protobuf::int32 RolePvpDBData::killvalue() const {
  return killvalue_;
}
inline void RolePvpDBData::set_killvalue(::google::protobuf::int32 value) {
  set_has_killvalue();
  killvalue_ = value;
}

// optional int32 onlinesec = 4;
inline bool RolePvpDBData::has_onlinesec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RolePvpDBData::set_has_onlinesec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RolePvpDBData::clear_has_onlinesec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RolePvpDBData::clear_onlinesec() {
  onlinesec_ = 0;
  clear_has_onlinesec();
}
inline ::google::protobuf::int32 RolePvpDBData::onlinesec() const {
  return onlinesec_;
}
inline void RolePvpDBData::set_onlinesec(::google::protobuf::int32 value) {
  set_has_onlinesec();
  onlinesec_ = value;
}

// repeated .proto_ff.RoleEmblemDBInfo emblem = 5;
inline int RolePvpDBData::emblem_size() const {
  return emblem_.size();
}
inline void RolePvpDBData::clear_emblem() {
  emblem_.Clear();
}
inline const ::proto_ff::RoleEmblemDBInfo& RolePvpDBData::emblem(int index) const {
  return emblem_.Get(index);
}
inline ::proto_ff::RoleEmblemDBInfo* RolePvpDBData::mutable_emblem(int index) {
  return emblem_.Mutable(index);
}
inline ::proto_ff::RoleEmblemDBInfo* RolePvpDBData::add_emblem() {
  return emblem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleEmblemDBInfo >&
RolePvpDBData::emblem() const {
  return emblem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleEmblemDBInfo >*
RolePvpDBData::mutable_emblem() {
  return &emblem_;
}

// optional .proto_ff.Role1v1DBInfo pk1v1 = 6;
inline bool RolePvpDBData::has_pk1v1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RolePvpDBData::set_has_pk1v1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RolePvpDBData::clear_has_pk1v1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RolePvpDBData::clear_pk1v1() {
  if (pk1v1_ != NULL) pk1v1_->::proto_ff::Role1v1DBInfo::Clear();
  clear_has_pk1v1();
}
inline const ::proto_ff::Role1v1DBInfo& RolePvpDBData::pk1v1() const {
  return pk1v1_ != NULL ? *pk1v1_ : *default_instance_->pk1v1_;
}
inline ::proto_ff::Role1v1DBInfo* RolePvpDBData::mutable_pk1v1() {
  set_has_pk1v1();
  if (pk1v1_ == NULL) pk1v1_ = new ::proto_ff::Role1v1DBInfo;
  return pk1v1_;
}
inline ::proto_ff::Role1v1DBInfo* RolePvpDBData::release_pk1v1() {
  clear_has_pk1v1();
  ::proto_ff::Role1v1DBInfo* temp = pk1v1_;
  pk1v1_ = NULL;
  return temp;
}
inline void RolePvpDBData::set_allocated_pk1v1(::proto_ff::Role1v1DBInfo* pk1v1) {
  delete pk1v1_;
  pk1v1_ = pk1v1;
  if (pk1v1) {
    set_has_pk1v1();
  } else {
    clear_has_pk1v1();
  }
}

// -------------------------------------------------------------------

// RoleMarryExpress

// optional bytes name = 1;
inline bool RoleMarryExpress::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleMarryExpress::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleMarryExpress::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleMarryExpress::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleMarryExpress::name() const {
  return *name_;
}
inline void RoleMarryExpress::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleMarryExpress::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleMarryExpress::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleMarryExpress::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleMarryExpress::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleMarryExpress::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 item = 2;
inline bool RoleMarryExpress::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleMarryExpress::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleMarryExpress::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleMarryExpress::clear_item() {
  item_ = GOOGLE_ULONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::uint64 RoleMarryExpress::item() const {
  return item_;
}
inline void RoleMarryExpress::set_item(::google::protobuf::uint64 value) {
  set_has_item();
  item_ = value;
}

// optional int32 text_id = 3;
inline bool RoleMarryExpress::has_text_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleMarryExpress::set_has_text_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleMarryExpress::clear_has_text_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleMarryExpress::clear_text_id() {
  text_id_ = 0;
  clear_has_text_id();
}
inline ::google::protobuf::int32 RoleMarryExpress::text_id() const {
  return text_id_;
}
inline void RoleMarryExpress::set_text_id(::google::protobuf::int32 value) {
  set_has_text_id();
  text_id_ = value;
}

// optional uint64 time = 4;
inline bool RoleMarryExpress::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleMarryExpress::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleMarryExpress::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleMarryExpress::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 RoleMarryExpress::time() const {
  return time_;
}
inline void RoleMarryExpress::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RoleMarryDBData

// optional .proto_ff.MarrySelfInfo info = 1;
inline bool RoleMarryDBData::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleMarryDBData::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleMarryDBData::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleMarryDBData::clear_info() {
  if (info_ != NULL) info_->::proto_ff::MarrySelfInfo::Clear();
  clear_has_info();
}
inline const ::proto_ff::MarrySelfInfo& RoleMarryDBData::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::MarrySelfInfo* RoleMarryDBData::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::MarrySelfInfo;
  return info_;
}
inline ::proto_ff::MarrySelfInfo* RoleMarryDBData::release_info() {
  clear_has_info();
  ::proto_ff::MarrySelfInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void RoleMarryDBData::set_allocated_info(::proto_ff::MarrySelfInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated .proto_ff.RoleMarryExpress toSlef = 2;
inline int RoleMarryDBData::toslef_size() const {
  return toslef_.size();
}
inline void RoleMarryDBData::clear_toslef() {
  toslef_.Clear();
}
inline const ::proto_ff::RoleMarryExpress& RoleMarryDBData::toslef(int index) const {
  return toslef_.Get(index);
}
inline ::proto_ff::RoleMarryExpress* RoleMarryDBData::mutable_toslef(int index) {
  return toslef_.Mutable(index);
}
inline ::proto_ff::RoleMarryExpress* RoleMarryDBData::add_toslef() {
  return toslef_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >&
RoleMarryDBData::toslef() const {
  return toslef_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >*
RoleMarryDBData::mutable_toslef() {
  return &toslef_;
}

// repeated .proto_ff.RoleMarryExpress toOther = 3;
inline int RoleMarryDBData::toother_size() const {
  return toother_.size();
}
inline void RoleMarryDBData::clear_toother() {
  toother_.Clear();
}
inline const ::proto_ff::RoleMarryExpress& RoleMarryDBData::toother(int index) const {
  return toother_.Get(index);
}
inline ::proto_ff::RoleMarryExpress* RoleMarryDBData::mutable_toother(int index) {
  return toother_.Mutable(index);
}
inline ::proto_ff::RoleMarryExpress* RoleMarryDBData::add_toother() {
  return toother_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >&
RoleMarryDBData::toother() const {
  return toother_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleMarryExpress >*
RoleMarryDBData::mutable_toother() {
  return &toother_;
}

// optional .proto_ff.WeddingDupRoleInfo dup_record = 4;
inline bool RoleMarryDBData::has_dup_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleMarryDBData::set_has_dup_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleMarryDBData::clear_has_dup_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleMarryDBData::clear_dup_record() {
  if (dup_record_ != NULL) dup_record_->::proto_ff::WeddingDupRoleInfo::Clear();
  clear_has_dup_record();
}
inline const ::proto_ff::WeddingDupRoleInfo& RoleMarryDBData::dup_record() const {
  return dup_record_ != NULL ? *dup_record_ : *default_instance_->dup_record_;
}
inline ::proto_ff::WeddingDupRoleInfo* RoleMarryDBData::mutable_dup_record() {
  set_has_dup_record();
  if (dup_record_ == NULL) dup_record_ = new ::proto_ff::WeddingDupRoleInfo;
  return dup_record_;
}
inline ::proto_ff::WeddingDupRoleInfo* RoleMarryDBData::release_dup_record() {
  clear_has_dup_record();
  ::proto_ff::WeddingDupRoleInfo* temp = dup_record_;
  dup_record_ = NULL;
  return temp;
}
inline void RoleMarryDBData::set_allocated_dup_record(::proto_ff::WeddingDupRoleInfo* dup_record) {
  delete dup_record_;
  dup_record_ = dup_record;
  if (dup_record) {
    set_has_dup_record();
  } else {
    clear_has_dup_record();
  }
}

// optional uint64 lastTime = 5;
inline bool RoleMarryDBData::has_lasttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleMarryDBData::set_has_lasttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleMarryDBData::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleMarryDBData::clear_lasttime() {
  lasttime_ = GOOGLE_ULONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::uint64 RoleMarryDBData::lasttime() const {
  return lasttime_;
}
inline void RoleMarryDBData::set_lasttime(::google::protobuf::uint64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// -------------------------------------------------------------------

// EncylopediaDBData

// optional .proto_ff.HandBookPBData hand_book = 1;
inline bool EncylopediaDBData::has_hand_book() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncylopediaDBData::set_has_hand_book() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncylopediaDBData::clear_has_hand_book() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncylopediaDBData::clear_hand_book() {
  if (hand_book_ != NULL) hand_book_->::proto_ff::HandBookPBData::Clear();
  clear_has_hand_book();
}
inline const ::proto_ff::HandBookPBData& EncylopediaDBData::hand_book() const {
  return hand_book_ != NULL ? *hand_book_ : *default_instance_->hand_book_;
}
inline ::proto_ff::HandBookPBData* EncylopediaDBData::mutable_hand_book() {
  set_has_hand_book();
  if (hand_book_ == NULL) hand_book_ = new ::proto_ff::HandBookPBData;
  return hand_book_;
}
inline ::proto_ff::HandBookPBData* EncylopediaDBData::release_hand_book() {
  clear_has_hand_book();
  ::proto_ff::HandBookPBData* temp = hand_book_;
  hand_book_ = NULL;
  return temp;
}
inline void EncylopediaDBData::set_allocated_hand_book(::proto_ff::HandBookPBData* hand_book) {
  delete hand_book_;
  hand_book_ = hand_book;
  if (hand_book) {
    set_has_hand_book();
  } else {
    clear_has_hand_book();
  }
}

// -------------------------------------------------------------------

// GVBPData

// repeated uint32 rewards_state = 1;
inline int GVBPData::rewards_state_size() const {
  return rewards_state_.size();
}
inline void GVBPData::clear_rewards_state() {
  rewards_state_.Clear();
}
inline ::google::protobuf::uint32 GVBPData::rewards_state(int index) const {
  return rewards_state_.Get(index);
}
inline void GVBPData::set_rewards_state(int index, ::google::protobuf::uint32 value) {
  rewards_state_.Set(index, value);
}
inline void GVBPData::add_rewards_state(::google::protobuf::uint32 value) {
  rewards_state_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GVBPData::rewards_state() const {
  return rewards_state_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GVBPData::mutable_rewards_state() {
  return &rewards_state_;
}

// optional uint32 daily_score = 2;
inline bool GVBPData::has_daily_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GVBPData::set_has_daily_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GVBPData::clear_has_daily_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GVBPData::clear_daily_score() {
  daily_score_ = 0u;
  clear_has_daily_score();
}
inline ::google::protobuf::uint32 GVBPData::daily_score() const {
  return daily_score_;
}
inline void GVBPData::set_daily_score(::google::protobuf::uint32 value) {
  set_has_daily_score();
  daily_score_ = value;
}

// optional uint64 record_time = 3;
inline bool GVBPData::has_record_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GVBPData::set_has_record_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GVBPData::clear_has_record_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GVBPData::clear_record_time() {
  record_time_ = GOOGLE_ULONGLONG(0);
  clear_has_record_time();
}
inline ::google::protobuf::uint64 GVBPData::record_time() const {
  return record_time_;
}
inline void GVBPData::set_record_time(::google::protobuf::uint64 value) {
  set_has_record_time();
  record_time_ = value;
}

// -------------------------------------------------------------------

// ChargeDBData

// optional int32 first_rmb = 1;
inline bool ChargeDBData::has_first_rmb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeDBData::set_has_first_rmb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeDBData::clear_has_first_rmb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeDBData::clear_first_rmb() {
  first_rmb_ = 0;
  clear_has_first_rmb();
}
inline ::google::protobuf::int32 ChargeDBData::first_rmb() const {
  return first_rmb_;
}
inline void ChargeDBData::set_first_rmb(::google::protobuf::int32 value) {
  set_has_first_rmb();
  first_rmb_ = value;
}

// repeated int32 first_fetch = 2;
inline int ChargeDBData::first_fetch_size() const {
  return first_fetch_.size();
}
inline void ChargeDBData::clear_first_fetch() {
  first_fetch_.Clear();
}
inline ::google::protobuf::int32 ChargeDBData::first_fetch(int index) const {
  return first_fetch_.Get(index);
}
inline void ChargeDBData::set_first_fetch(int index, ::google::protobuf::int32 value) {
  first_fetch_.Set(index, value);
}
inline void ChargeDBData::add_first_fetch(::google::protobuf::int32 value) {
  first_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChargeDBData::first_fetch() const {
  return first_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChargeDBData::mutable_first_fetch() {
  return &first_fetch_;
}

// optional int32 dia_rmb = 3;
inline bool ChargeDBData::has_dia_rmb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChargeDBData::set_has_dia_rmb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChargeDBData::clear_has_dia_rmb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChargeDBData::clear_dia_rmb() {
  dia_rmb_ = 0;
  clear_has_dia_rmb();
}
inline ::google::protobuf::int32 ChargeDBData::dia_rmb() const {
  return dia_rmb_;
}
inline void ChargeDBData::set_dia_rmb(::google::protobuf::int32 value) {
  set_has_dia_rmb();
  dia_rmb_ = value;
}

// repeated int32 dia_fetch = 4;
inline int ChargeDBData::dia_fetch_size() const {
  return dia_fetch_.size();
}
inline void ChargeDBData::clear_dia_fetch() {
  dia_fetch_.Clear();
}
inline ::google::protobuf::int32 ChargeDBData::dia_fetch(int index) const {
  return dia_fetch_.Get(index);
}
inline void ChargeDBData::set_dia_fetch(int index, ::google::protobuf::int32 value) {
  dia_fetch_.Set(index, value);
}
inline void ChargeDBData::add_dia_fetch(::google::protobuf::int32 value) {
  dia_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChargeDBData::dia_fetch() const {
  return dia_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChargeDBData::mutable_dia_fetch() {
  return &dia_fetch_;
}

// optional int32 star_rmb = 5;
inline bool ChargeDBData::has_star_rmb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChargeDBData::set_has_star_rmb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChargeDBData::clear_has_star_rmb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChargeDBData::clear_star_rmb() {
  star_rmb_ = 0;
  clear_has_star_rmb();
}
inline ::google::protobuf::int32 ChargeDBData::star_rmb() const {
  return star_rmb_;
}
inline void ChargeDBData::set_star_rmb(::google::protobuf::int32 value) {
  set_has_star_rmb();
  star_rmb_ = value;
}

// repeated int32 star_fetch = 6;
inline int ChargeDBData::star_fetch_size() const {
  return star_fetch_.size();
}
inline void ChargeDBData::clear_star_fetch() {
  star_fetch_.Clear();
}
inline ::google::protobuf::int32 ChargeDBData::star_fetch(int index) const {
  return star_fetch_.Get(index);
}
inline void ChargeDBData::set_star_fetch(int index, ::google::protobuf::int32 value) {
  star_fetch_.Set(index, value);
}
inline void ChargeDBData::add_star_fetch(::google::protobuf::int32 value) {
  star_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChargeDBData::star_fetch() const {
  return star_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChargeDBData::mutable_star_fetch() {
  return &star_fetch_;
}

// optional int32 king_rmb = 7;
inline bool ChargeDBData::has_king_rmb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChargeDBData::set_has_king_rmb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChargeDBData::clear_has_king_rmb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChargeDBData::clear_king_rmb() {
  king_rmb_ = 0;
  clear_has_king_rmb();
}
inline ::google::protobuf::int32 ChargeDBData::king_rmb() const {
  return king_rmb_;
}
inline void ChargeDBData::set_king_rmb(::google::protobuf::int32 value) {
  set_has_king_rmb();
  king_rmb_ = value;
}

// repeated int32 king_fetch = 8;
inline int ChargeDBData::king_fetch_size() const {
  return king_fetch_.size();
}
inline void ChargeDBData::clear_king_fetch() {
  king_fetch_.Clear();
}
inline ::google::protobuf::int32 ChargeDBData::king_fetch(int index) const {
  return king_fetch_.Get(index);
}
inline void ChargeDBData::set_king_fetch(int index, ::google::protobuf::int32 value) {
  king_fetch_.Set(index, value);
}
inline void ChargeDBData::add_king_fetch(::google::protobuf::int32 value) {
  king_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChargeDBData::king_fetch() const {
  return king_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChargeDBData::mutable_king_fetch() {
  return &king_fetch_;
}

// optional int32 second_rmb = 9;
inline bool ChargeDBData::has_second_rmb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChargeDBData::set_has_second_rmb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChargeDBData::clear_has_second_rmb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChargeDBData::clear_second_rmb() {
  second_rmb_ = 0;
  clear_has_second_rmb();
}
inline ::google::protobuf::int32 ChargeDBData::second_rmb() const {
  return second_rmb_;
}
inline void ChargeDBData::set_second_rmb(::google::protobuf::int32 value) {
  set_has_second_rmb();
  second_rmb_ = value;
}

// repeated int32 second_fetch = 10;
inline int ChargeDBData::second_fetch_size() const {
  return second_fetch_.size();
}
inline void ChargeDBData::clear_second_fetch() {
  second_fetch_.Clear();
}
inline ::google::protobuf::int32 ChargeDBData::second_fetch(int index) const {
  return second_fetch_.Get(index);
}
inline void ChargeDBData::set_second_fetch(int index, ::google::protobuf::int32 value) {
  second_fetch_.Set(index, value);
}
inline void ChargeDBData::add_second_fetch(::google::protobuf::int32 value) {
  second_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChargeDBData::second_fetch() const {
  return second_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChargeDBData::mutable_second_fetch() {
  return &second_fetch_;
}

// optional int32 open_total = 11;
inline bool ChargeDBData::has_open_total() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChargeDBData::set_has_open_total() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChargeDBData::clear_has_open_total() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChargeDBData::clear_open_total() {
  open_total_ = 0;
  clear_has_open_total();
}
inline ::google::protobuf::int32 ChargeDBData::open_total() const {
  return open_total_;
}
inline void ChargeDBData::set_open_total(::google::protobuf::int32 value) {
  set_has_open_total();
  open_total_ = value;
}

// repeated int32 open_total_fetch = 12;
inline int ChargeDBData::open_total_fetch_size() const {
  return open_total_fetch_.size();
}
inline void ChargeDBData::clear_open_total_fetch() {
  open_total_fetch_.Clear();
}
inline ::google::protobuf::int32 ChargeDBData::open_total_fetch(int index) const {
  return open_total_fetch_.Get(index);
}
inline void ChargeDBData::set_open_total_fetch(int index, ::google::protobuf::int32 value) {
  open_total_fetch_.Set(index, value);
}
inline void ChargeDBData::add_open_total_fetch(::google::protobuf::int32 value) {
  open_total_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChargeDBData::open_total_fetch() const {
  return open_total_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChargeDBData::mutable_open_total_fetch() {
  return &open_total_fetch_;
}

// -------------------------------------------------------------------

// GiftCondDBProto

// optional int32 id = 1;
inline bool GiftCondDBProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiftCondDBProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiftCondDBProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiftCondDBProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GiftCondDBProto::id() const {
  return id_;
}
inline void GiftCondDBProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 time = 2;
inline bool GiftCondDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiftCondDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiftCondDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiftCondDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 GiftCondDBProto::time() const {
  return time_;
}
inline void GiftCondDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 buy = 3;
inline bool GiftCondDBProto::has_buy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiftCondDBProto::set_has_buy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiftCondDBProto::clear_has_buy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiftCondDBProto::clear_buy() {
  buy_ = 0;
  clear_has_buy();
}
inline ::google::protobuf::int32 GiftCondDBProto::buy() const {
  return buy_;
}
inline void GiftCondDBProto::set_buy(::google::protobuf::int32 value) {
  set_has_buy();
  buy_ = value;
}

// optional int32 close = 4;
inline bool GiftCondDBProto::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiftCondDBProto::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiftCondDBProto::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiftCondDBProto::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline ::google::protobuf::int32 GiftCondDBProto::close() const {
  return close_;
}
inline void GiftCondDBProto::set_close(::google::protobuf::int32 value) {
  set_has_close();
  close_ = value;
}

// -------------------------------------------------------------------

// GiftZeroDBProto

// optional int32 id = 1;
inline bool GiftZeroDBProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiftZeroDBProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiftZeroDBProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiftZeroDBProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GiftZeroDBProto::id() const {
  return id_;
}
inline void GiftZeroDBProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 buy = 2;
inline bool GiftZeroDBProto::has_buy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiftZeroDBProto::set_has_buy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiftZeroDBProto::clear_has_buy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiftZeroDBProto::clear_buy() {
  buy_ = 0;
  clear_has_buy();
}
inline ::google::protobuf::int32 GiftZeroDBProto::buy() const {
  return buy_;
}
inline void GiftZeroDBProto::set_buy(::google::protobuf::int32 value) {
  set_has_buy();
  buy_ = value;
}

// optional int32 fetch = 3;
inline bool GiftZeroDBProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiftZeroDBProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiftZeroDBProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiftZeroDBProto::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 GiftZeroDBProto::fetch() const {
  return fetch_;
}
inline void GiftZeroDBProto::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// GiftZeroLogDBProto

// optional bytes name = 1;
inline bool GiftZeroLogDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiftZeroLogDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiftZeroLogDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiftZeroLogDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GiftZeroLogDBProto::name() const {
  return *name_;
}
inline void GiftZeroLogDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GiftZeroLogDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GiftZeroLogDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GiftZeroLogDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GiftZeroLogDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GiftZeroLogDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 2;
inline bool GiftZeroLogDBProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiftZeroLogDBProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiftZeroLogDBProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiftZeroLogDBProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GiftZeroLogDBProto::type() const {
  return type_;
}
inline void GiftZeroLogDBProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 3;
inline bool GiftZeroLogDBProto::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiftZeroLogDBProto::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiftZeroLogDBProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiftZeroLogDBProto::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 GiftZeroLogDBProto::value() const {
  return value_;
}
inline void GiftZeroLogDBProto::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// GiftDBData

// repeated .proto_ff.GiftCondDBProto cond = 1;
inline int GiftDBData::cond_size() const {
  return cond_.size();
}
inline void GiftDBData::clear_cond() {
  cond_.Clear();
}
inline const ::proto_ff::GiftCondDBProto& GiftDBData::cond(int index) const {
  return cond_.Get(index);
}
inline ::proto_ff::GiftCondDBProto* GiftDBData::mutable_cond(int index) {
  return cond_.Mutable(index);
}
inline ::proto_ff::GiftCondDBProto* GiftDBData::add_cond() {
  return cond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftCondDBProto >&
GiftDBData::cond() const {
  return cond_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftCondDBProto >*
GiftDBData::mutable_cond() {
  return &cond_;
}

// repeated .proto_ff.GiftZeroDBProto zero = 2;
inline int GiftDBData::zero_size() const {
  return zero_.size();
}
inline void GiftDBData::clear_zero() {
  zero_.Clear();
}
inline const ::proto_ff::GiftZeroDBProto& GiftDBData::zero(int index) const {
  return zero_.Get(index);
}
inline ::proto_ff::GiftZeroDBProto* GiftDBData::mutable_zero(int index) {
  return zero_.Mutable(index);
}
inline ::proto_ff::GiftZeroDBProto* GiftDBData::add_zero() {
  return zero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroDBProto >&
GiftDBData::zero() const {
  return zero_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroDBProto >*
GiftDBData::mutable_zero() {
  return &zero_;
}

// repeated .proto_ff.GiftZeroLogDBProto zero_log = 3;
inline int GiftDBData::zero_log_size() const {
  return zero_log_.size();
}
inline void GiftDBData::clear_zero_log() {
  zero_log_.Clear();
}
inline const ::proto_ff::GiftZeroLogDBProto& GiftDBData::zero_log(int index) const {
  return zero_log_.Get(index);
}
inline ::proto_ff::GiftZeroLogDBProto* GiftDBData::mutable_zero_log(int index) {
  return zero_log_.Mutable(index);
}
inline ::proto_ff::GiftZeroLogDBProto* GiftDBData::add_zero_log() {
  return zero_log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroLogDBProto >&
GiftDBData::zero_log() const {
  return zero_log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GiftZeroLogDBProto >*
GiftDBData::mutable_zero_log() {
  return &zero_log_;
}

// -------------------------------------------------------------------

// FestSimpleDBProto

// -------------------------------------------------------------------

// FestShopDBProto

// repeated .proto_ff.ComPair info = 1;
inline int FestShopDBProto::info_size() const {
  return info_.size();
}
inline void FestShopDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair& FestShopDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair* FestShopDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair* FestShopDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestShopDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestShopDBProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestSignDBProto

// optional int32 is_sign = 1;
inline bool FestSignDBProto::has_is_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestSignDBProto::set_has_is_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestSignDBProto::clear_has_is_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestSignDBProto::clear_is_sign() {
  is_sign_ = 0;
  clear_has_is_sign();
}
inline ::google::protobuf::int32 FestSignDBProto::is_sign() const {
  return is_sign_;
}
inline void FestSignDBProto::set_is_sign(::google::protobuf::int32 value) {
  set_has_is_sign();
  is_sign_ = value;
}

// -------------------------------------------------------------------

// FestGoldStoreDBProto

// repeated .proto_ff.ComPair info = 1;
inline int FestGoldStoreDBProto::info_size() const {
  return info_.size();
}
inline void FestGoldStoreDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair& FestGoldStoreDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair* FestGoldStoreDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair* FestGoldStoreDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestGoldStoreDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestGoldStoreDBProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestDigEggTaskDBProto

// optional int32 id = 1;
inline bool FestDigEggTaskDBProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDigEggTaskDBProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDigEggTaskDBProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDigEggTaskDBProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FestDigEggTaskDBProto::id() const {
  return id_;
}
inline void FestDigEggTaskDBProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cur = 2;
inline bool FestDigEggTaskDBProto::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDigEggTaskDBProto::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDigEggTaskDBProto::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDigEggTaskDBProto::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 FestDigEggTaskDBProto::cur() const {
  return cur_;
}
inline void FestDigEggTaskDBProto::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional int32 fetch = 3;
inline bool FestDigEggTaskDBProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDigEggTaskDBProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDigEggTaskDBProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDigEggTaskDBProto::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 FestDigEggTaskDBProto::fetch() const {
  return fetch_;
}
inline void FestDigEggTaskDBProto::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// FestDigEggDBProto

// repeated .proto_ff.ComPair id_lst = 1;
inline int FestDigEggDBProto::id_lst_size() const {
  return id_lst_.size();
}
inline void FestDigEggDBProto::clear_id_lst() {
  id_lst_.Clear();
}
inline const ::proto_ff::ComPair& FestDigEggDBProto::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline ::proto_ff::ComPair* FestDigEggDBProto::mutable_id_lst(int index) {
  return id_lst_.Mutable(index);
}
inline ::proto_ff::ComPair* FestDigEggDBProto::add_id_lst() {
  return id_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestDigEggDBProto::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestDigEggDBProto::mutable_id_lst() {
  return &id_lst_;
}

// optional int32 free = 2;
inline bool FestDigEggDBProto::has_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDigEggDBProto::set_has_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDigEggDBProto::clear_has_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDigEggDBProto::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 FestDigEggDBProto::free() const {
  return free_;
}
inline void FestDigEggDBProto::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// optional uint64 time = 3;
inline bool FestDigEggDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDigEggDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDigEggDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDigEggDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FestDigEggDBProto::time() const {
  return time_;
}
inline void FestDigEggDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 auto_time = 4;
inline bool FestDigEggDBProto::has_auto_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestDigEggDBProto::set_has_auto_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestDigEggDBProto::clear_has_auto_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestDigEggDBProto::clear_auto_time() {
  auto_time_ = GOOGLE_ULONGLONG(0);
  clear_has_auto_time();
}
inline ::google::protobuf::uint64 FestDigEggDBProto::auto_time() const {
  return auto_time_;
}
inline void FestDigEggDBProto::set_auto_time(::google::protobuf::uint64 value) {
  set_has_auto_time();
  auto_time_ = value;
}

// repeated .proto_ff.FestDigEggTaskDBProto task = 5;
inline int FestDigEggDBProto::task_size() const {
  return task_.size();
}
inline void FestDigEggDBProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestDigEggTaskDBProto& FestDigEggDBProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestDigEggTaskDBProto* FestDigEggDBProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestDigEggTaskDBProto* FestDigEggDBProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskDBProto >&
FestDigEggDBProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggTaskDBProto >*
FestDigEggDBProto::mutable_task() {
  return &task_;
}

// optional uint64 task_time = 6;
inline bool FestDigEggDBProto::has_task_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FestDigEggDBProto::set_has_task_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FestDigEggDBProto::clear_has_task_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FestDigEggDBProto::clear_task_time() {
  task_time_ = GOOGLE_ULONGLONG(0);
  clear_has_task_time();
}
inline ::google::protobuf::uint64 FestDigEggDBProto::task_time() const {
  return task_time_;
}
inline void FestDigEggDBProto::set_task_time(::google::protobuf::uint64 value) {
  set_has_task_time();
  task_time_ = value;
}

// -------------------------------------------------------------------

// FestCandleDBProto

// repeated int32 id_lst = 1;
inline int FestCandleDBProto::id_lst_size() const {
  return id_lst_.size();
}
inline void FestCandleDBProto::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::int32 FestCandleDBProto::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void FestCandleDBProto::set_id_lst(int index, ::google::protobuf::int32 value) {
  id_lst_.Set(index, value);
}
inline void FestCandleDBProto::add_id_lst(::google::protobuf::int32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestCandleDBProto::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestCandleDBProto::mutable_id_lst() {
  return &id_lst_;
}

// optional uint64 time = 2;
inline bool FestCandleDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCandleDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCandleDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCandleDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FestCandleDBProto::time() const {
  return time_;
}
inline void FestCandleDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int64 harm = 3;
inline bool FestCandleDBProto::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestCandleDBProto::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestCandleDBProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestCandleDBProto::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 FestCandleDBProto::harm() const {
  return harm_;
}
inline void FestCandleDBProto::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// FestBtDragonDBProto

// -------------------------------------------------------------------

// FestRTurnableRechargeDBProto

// repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
inline int FestRTurnableRechargeDBProto::info_size() const {
  return info_.size();
}
inline void FestRTurnableRechargeDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestRTurnableRechargeOneProto& FestRTurnableRechargeDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestRTurnableRechargeOneProto* FestRTurnableRechargeDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestRTurnableRechargeOneProto* FestRTurnableRechargeDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >&
FestRTurnableRechargeDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableRechargeOneProto >*
FestRTurnableRechargeDBProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestDailyTotalRechargeDBProto

// repeated .proto_ff.FestDailyTotalRechargeOneProto info = 1;
inline int FestDailyTotalRechargeDBProto::info_size() const {
  return info_.size();
}
inline void FestDailyTotalRechargeDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestDailyTotalRechargeOneProto& FestDailyTotalRechargeDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestDailyTotalRechargeOneProto* FestDailyTotalRechargeDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestDailyTotalRechargeOneProto* FestDailyTotalRechargeDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >&
FestDailyTotalRechargeDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDailyTotalRechargeOneProto >*
FestDailyTotalRechargeDBProto::mutable_info() {
  return &info_;
}

// optional uint32 total_recharge = 2;
inline bool FestDailyTotalRechargeDBProto::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDailyTotalRechargeDBProto::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDailyTotalRechargeDBProto::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDailyTotalRechargeDBProto::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 FestDailyTotalRechargeDBProto::total_recharge() const {
  return total_recharge_;
}
inline void FestDailyTotalRechargeDBProto::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// optional uint64 flush_time = 3;
inline bool FestDailyTotalRechargeDBProto::has_flush_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDailyTotalRechargeDBProto::set_has_flush_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDailyTotalRechargeDBProto::clear_has_flush_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDailyTotalRechargeDBProto::clear_flush_time() {
  flush_time_ = GOOGLE_ULONGLONG(0);
  clear_has_flush_time();
}
inline ::google::protobuf::uint64 FestDailyTotalRechargeDBProto::flush_time() const {
  return flush_time_;
}
inline void FestDailyTotalRechargeDBProto::set_flush_time(::google::protobuf::uint64 value) {
  set_has_flush_time();
  flush_time_ = value;
}

// -------------------------------------------------------------------

// FestTurnableDBProto

// repeated .proto_ff.FestTurnableTaskProto task = 1;
inline int FestTurnableDBProto::task_size() const {
  return task_.size();
}
inline void FestTurnableDBProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestTurnableTaskProto& FestTurnableDBProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestTurnableTaskProto* FestTurnableDBProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestTurnableTaskProto* FestTurnableDBProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >&
FestTurnableDBProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestTurnableTaskProto >*
FestTurnableDBProto::mutable_task() {
  return &task_;
}

// optional uint32 left_num = 2;
inline bool FestTurnableDBProto::has_left_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestTurnableDBProto::set_has_left_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestTurnableDBProto::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestTurnableDBProto::clear_left_num() {
  left_num_ = 0u;
  clear_has_left_num();
}
inline ::google::protobuf::uint32 FestTurnableDBProto::left_num() const {
  return left_num_;
}
inline void FestTurnableDBProto::set_left_num(::google::protobuf::uint32 value) {
  set_has_left_num();
  left_num_ = value;
}

// optional uint64 flush_time = 3;
inline bool FestTurnableDBProto::has_flush_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestTurnableDBProto::set_has_flush_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestTurnableDBProto::clear_has_flush_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestTurnableDBProto::clear_flush_time() {
  flush_time_ = GOOGLE_ULONGLONG(0);
  clear_has_flush_time();
}
inline ::google::protobuf::uint64 FestTurnableDBProto::flush_time() const {
  return flush_time_;
}
inline void FestTurnableDBProto::set_flush_time(::google::protobuf::uint64 value) {
  set_has_flush_time();
  flush_time_ = value;
}

// repeated int32 chou_jiang_ids = 5;
inline int FestTurnableDBProto::chou_jiang_ids_size() const {
  return chou_jiang_ids_.size();
}
inline void FestTurnableDBProto::clear_chou_jiang_ids() {
  chou_jiang_ids_.Clear();
}
inline ::google::protobuf::int32 FestTurnableDBProto::chou_jiang_ids(int index) const {
  return chou_jiang_ids_.Get(index);
}
inline void FestTurnableDBProto::set_chou_jiang_ids(int index, ::google::protobuf::int32 value) {
  chou_jiang_ids_.Set(index, value);
}
inline void FestTurnableDBProto::add_chou_jiang_ids(::google::protobuf::int32 value) {
  chou_jiang_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestTurnableDBProto::chou_jiang_ids() const {
  return chou_jiang_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestTurnableDBProto::mutable_chou_jiang_ids() {
  return &chou_jiang_ids_;
}

// -------------------------------------------------------------------

// FestDonateDBProto

// repeated .proto_ff.FestDonateSingleProto single = 1;
inline int FestDonateDBProto::single_size() const {
  return single_.size();
}
inline void FestDonateDBProto::clear_single() {
  single_.Clear();
}
inline const ::proto_ff::FestDonateSingleProto& FestDonateDBProto::single(int index) const {
  return single_.Get(index);
}
inline ::proto_ff::FestDonateSingleProto* FestDonateDBProto::mutable_single(int index) {
  return single_.Mutable(index);
}
inline ::proto_ff::FestDonateSingleProto* FestDonateDBProto::add_single() {
  return single_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >&
FestDonateDBProto::single() const {
  return single_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateSingleProto >*
FestDonateDBProto::mutable_single() {
  return &single_;
}

// repeated .proto_ff.FestDonateServerProto server = 2;
inline int FestDonateDBProto::server_size() const {
  return server_.size();
}
inline void FestDonateDBProto::clear_server() {
  server_.Clear();
}
inline const ::proto_ff::FestDonateServerProto& FestDonateDBProto::server(int index) const {
  return server_.Get(index);
}
inline ::proto_ff::FestDonateServerProto* FestDonateDBProto::mutable_server(int index) {
  return server_.Mutable(index);
}
inline ::proto_ff::FestDonateServerProto* FestDonateDBProto::add_server() {
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >&
FestDonateDBProto::server() const {
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateServerProto >*
FestDonateDBProto::mutable_server() {
  return &server_;
}

// optional uint32 single_num = 3;
inline bool FestDonateDBProto::has_single_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDonateDBProto::set_has_single_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDonateDBProto::clear_has_single_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDonateDBProto::clear_single_num() {
  single_num_ = 0u;
  clear_has_single_num();
}
inline ::google::protobuf::uint32 FestDonateDBProto::single_num() const {
  return single_num_;
}
inline void FestDonateDBProto::set_single_num(::google::protobuf::uint32 value) {
  set_has_single_num();
  single_num_ = value;
}

// repeated .proto_ff.FestDonateTaskProto task = 4;
inline int FestDonateDBProto::task_size() const {
  return task_.size();
}
inline void FestDonateDBProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::FestDonateTaskProto& FestDonateDBProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::FestDonateTaskProto* FestDonateDBProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::FestDonateTaskProto* FestDonateDBProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >&
FestDonateDBProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDonateTaskProto >*
FestDonateDBProto::mutable_task() {
  return &task_;
}

// optional uint64 flush_time = 5;
inline bool FestDonateDBProto::has_flush_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestDonateDBProto::set_has_flush_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestDonateDBProto::clear_has_flush_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestDonateDBProto::clear_flush_time() {
  flush_time_ = GOOGLE_ULONGLONG(0);
  clear_has_flush_time();
}
inline ::google::protobuf::uint64 FestDonateDBProto::flush_time() const {
  return flush_time_;
}
inline void FestDonateDBProto::set_flush_time(::google::protobuf::uint64 value) {
  set_has_flush_time();
  flush_time_ = value;
}

// -------------------------------------------------------------------

// FestOnlineDBProto

// repeated .proto_ff.FestOnlineOneProto data = 1;
inline int FestOnlineDBProto::data_size() const {
  return data_.size();
}
inline void FestOnlineDBProto::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestOnlineOneProto& FestOnlineDBProto::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestOnlineOneProto* FestOnlineDBProto::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestOnlineOneProto* FestOnlineDBProto::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >&
FestOnlineDBProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestOnlineOneProto >*
FestOnlineDBProto::mutable_data() {
  return &data_;
}

// optional uint64 flush_time = 2;
inline bool FestOnlineDBProto::has_flush_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestOnlineDBProto::set_has_flush_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestOnlineDBProto::clear_has_flush_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestOnlineDBProto::clear_flush_time() {
  flush_time_ = GOOGLE_ULONGLONG(0);
  clear_has_flush_time();
}
inline ::google::protobuf::uint64 FestOnlineDBProto::flush_time() const {
  return flush_time_;
}
inline void FestOnlineDBProto::set_flush_time(::google::protobuf::uint64 value) {
  set_has_flush_time();
  flush_time_ = value;
}

// -------------------------------------------------------------------

// FestCollectWordDBProto

// repeated .proto_ff.FestCollectWordOneProto data = 1;
inline int FestCollectWordDBProto::data_size() const {
  return data_.size();
}
inline void FestCollectWordDBProto::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::FestCollectWordOneProto& FestCollectWordDBProto::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::FestCollectWordOneProto* FestCollectWordDBProto::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::FestCollectWordOneProto* FestCollectWordDBProto::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >&
FestCollectWordDBProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestCollectWordOneProto >*
FestCollectWordDBProto::mutable_data() {
  return &data_;
}

// optional uint64 flush_time = 2;
inline bool FestCollectWordDBProto::has_flush_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestCollectWordDBProto::set_has_flush_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestCollectWordDBProto::clear_has_flush_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestCollectWordDBProto::clear_flush_time() {
  flush_time_ = GOOGLE_ULONGLONG(0);
  clear_has_flush_time();
}
inline ::google::protobuf::uint64 FestCollectWordDBProto::flush_time() const {
  return flush_time_;
}
inline void FestCollectWordDBProto::set_flush_time(::google::protobuf::uint64 value) {
  set_has_flush_time();
  flush_time_ = value;
}

// -------------------------------------------------------------------

// FestBossFirstDB

// repeated int32 recv_kill_ids = 1;
inline int FestBossFirstDB::recv_kill_ids_size() const {
  return recv_kill_ids_.size();
}
inline void FestBossFirstDB::clear_recv_kill_ids() {
  recv_kill_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossFirstDB::recv_kill_ids(int index) const {
  return recv_kill_ids_.Get(index);
}
inline void FestBossFirstDB::set_recv_kill_ids(int index, ::google::protobuf::int32 value) {
  recv_kill_ids_.Set(index, value);
}
inline void FestBossFirstDB::add_recv_kill_ids(::google::protobuf::int32 value) {
  recv_kill_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossFirstDB::recv_kill_ids() const {
  return recv_kill_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossFirstDB::mutable_recv_kill_ids() {
  return &recv_kill_ids_;
}

// repeated int32 recv_red_ids = 2;
inline int FestBossFirstDB::recv_red_ids_size() const {
  return recv_red_ids_.size();
}
inline void FestBossFirstDB::clear_recv_red_ids() {
  recv_red_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossFirstDB::recv_red_ids(int index) const {
  return recv_red_ids_.Get(index);
}
inline void FestBossFirstDB::set_recv_red_ids(int index, ::google::protobuf::int32 value) {
  recv_red_ids_.Set(index, value);
}
inline void FestBossFirstDB::add_recv_red_ids(::google::protobuf::int32 value) {
  recv_red_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossFirstDB::recv_red_ids() const {
  return recv_red_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossFirstDB::mutable_recv_red_ids() {
  return &recv_red_ids_;
}

// repeated int32 m_kills_ids = 3;
inline int FestBossFirstDB::m_kills_ids_size() const {
  return m_kills_ids_.size();
}
inline void FestBossFirstDB::clear_m_kills_ids() {
  m_kills_ids_.Clear();
}
inline ::google::protobuf::int32 FestBossFirstDB::m_kills_ids(int index) const {
  return m_kills_ids_.Get(index);
}
inline void FestBossFirstDB::set_m_kills_ids(int index, ::google::protobuf::int32 value) {
  m_kills_ids_.Set(index, value);
}
inline void FestBossFirstDB::add_m_kills_ids(::google::protobuf::int32 value) {
  m_kills_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestBossFirstDB::m_kills_ids() const {
  return m_kills_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestBossFirstDB::mutable_m_kills_ids() {
  return &m_kills_ids_;
}

// -------------------------------------------------------------------

// FMarryRoleDB

// repeated .proto_ff.FMarryTask tasks = 1;
inline int FMarryRoleDB::tasks_size() const {
  return tasks_.size();
}
inline void FMarryRoleDB::clear_tasks() {
  tasks_.Clear();
}
inline const ::proto_ff::FMarryTask& FMarryRoleDB::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::proto_ff::FMarryTask* FMarryRoleDB::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::proto_ff::FMarryTask* FMarryRoleDB::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >&
FMarryRoleDB::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FMarryTask >*
FMarryRoleDB::mutable_tasks() {
  return &tasks_;
}

// repeated int32 process_ids = 2;
inline int FMarryRoleDB::process_ids_size() const {
  return process_ids_.size();
}
inline void FMarryRoleDB::clear_process_ids() {
  process_ids_.Clear();
}
inline ::google::protobuf::int32 FMarryRoleDB::process_ids(int index) const {
  return process_ids_.Get(index);
}
inline void FMarryRoleDB::set_process_ids(int index, ::google::protobuf::int32 value) {
  process_ids_.Set(index, value);
}
inline void FMarryRoleDB::add_process_ids(::google::protobuf::int32 value) {
  process_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FMarryRoleDB::process_ids() const {
  return process_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FMarryRoleDB::mutable_process_ids() {
  return &process_ids_;
}

// optional int32 score = 3;
inline bool FMarryRoleDB::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMarryRoleDB::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMarryRoleDB::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMarryRoleDB::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FMarryRoleDB::score() const {
  return score_;
}
inline void FMarryRoleDB::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// DayTotalRechargeDBProto

// repeated int32 fetch_lst = 1;
inline int DayTotalRechargeDBProto::fetch_lst_size() const {
  return fetch_lst_.size();
}
inline void DayTotalRechargeDBProto::clear_fetch_lst() {
  fetch_lst_.Clear();
}
inline ::google::protobuf::int32 DayTotalRechargeDBProto::fetch_lst(int index) const {
  return fetch_lst_.Get(index);
}
inline void DayTotalRechargeDBProto::set_fetch_lst(int index, ::google::protobuf::int32 value) {
  fetch_lst_.Set(index, value);
}
inline void DayTotalRechargeDBProto::add_fetch_lst(::google::protobuf::int32 value) {
  fetch_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DayTotalRechargeDBProto::fetch_lst() const {
  return fetch_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DayTotalRechargeDBProto::mutable_fetch_lst() {
  return &fetch_lst_;
}

// optional uint32 recharge = 2;
inline bool DayTotalRechargeDBProto::has_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DayTotalRechargeDBProto::set_has_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DayTotalRechargeDBProto::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DayTotalRechargeDBProto::clear_recharge() {
  recharge_ = 0u;
  clear_has_recharge();
}
inline ::google::protobuf::uint32 DayTotalRechargeDBProto::recharge() const {
  return recharge_;
}
inline void DayTotalRechargeDBProto::set_recharge(::google::protobuf::uint32 value) {
  set_has_recharge();
  recharge_ = value;
}

// optional uint64 time = 3;
inline bool DayTotalRechargeDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DayTotalRechargeDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DayTotalRechargeDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DayTotalRechargeDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 DayTotalRechargeDBProto::time() const {
  return time_;
}
inline void DayTotalRechargeDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 reset_time = 4;
inline bool DayTotalRechargeDBProto::has_reset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DayTotalRechargeDBProto::set_has_reset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DayTotalRechargeDBProto::clear_has_reset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DayTotalRechargeDBProto::clear_reset_time() {
  reset_time_ = GOOGLE_ULONGLONG(0);
  clear_has_reset_time();
}
inline ::google::protobuf::uint64 DayTotalRechargeDBProto::reset_time() const {
  return reset_time_;
}
inline void DayTotalRechargeDBProto::set_reset_time(::google::protobuf::uint64 value) {
  set_has_reset_time();
  reset_time_ = value;
}

// -------------------------------------------------------------------

// TotalRechargeDBProto

// repeated int32 fetch_lst = 1;
inline int TotalRechargeDBProto::fetch_lst_size() const {
  return fetch_lst_.size();
}
inline void TotalRechargeDBProto::clear_fetch_lst() {
  fetch_lst_.Clear();
}
inline ::google::protobuf::int32 TotalRechargeDBProto::fetch_lst(int index) const {
  return fetch_lst_.Get(index);
}
inline void TotalRechargeDBProto::set_fetch_lst(int index, ::google::protobuf::int32 value) {
  fetch_lst_.Set(index, value);
}
inline void TotalRechargeDBProto::add_fetch_lst(::google::protobuf::int32 value) {
  fetch_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TotalRechargeDBProto::fetch_lst() const {
  return fetch_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TotalRechargeDBProto::mutable_fetch_lst() {
  return &fetch_lst_;
}

// optional uint32 recharge = 2;
inline bool TotalRechargeDBProto::has_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TotalRechargeDBProto::set_has_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TotalRechargeDBProto::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TotalRechargeDBProto::clear_recharge() {
  recharge_ = 0u;
  clear_has_recharge();
}
inline ::google::protobuf::uint32 TotalRechargeDBProto::recharge() const {
  return recharge_;
}
inline void TotalRechargeDBProto::set_recharge(::google::protobuf::uint32 value) {
  set_has_recharge();
  recharge_ = value;
}

// -------------------------------------------------------------------

// LoginRewardDBProto

// repeated .proto_ff.ComPair fetch = 1;
inline int LoginRewardDBProto::fetch_size() const {
  return fetch_.size();
}
inline void LoginRewardDBProto::clear_fetch() {
  fetch_.Clear();
}
inline const ::proto_ff::ComPair& LoginRewardDBProto::fetch(int index) const {
  return fetch_.Get(index);
}
inline ::proto_ff::ComPair* LoginRewardDBProto::mutable_fetch(int index) {
  return fetch_.Mutable(index);
}
inline ::proto_ff::ComPair* LoginRewardDBProto::add_fetch() {
  return fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
LoginRewardDBProto::fetch() const {
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
LoginRewardDBProto::mutable_fetch() {
  return &fetch_;
}

// -------------------------------------------------------------------

// DayFetchInfo

// optional int32 day = 1;
inline bool DayFetchInfo::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DayFetchInfo::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DayFetchInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DayFetchInfo::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 DayFetchInfo::day() const {
  return day_;
}
inline void DayFetchInfo::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// repeated int32 gear_lst = 2;
inline int DayFetchInfo::gear_lst_size() const {
  return gear_lst_.size();
}
inline void DayFetchInfo::clear_gear_lst() {
  gear_lst_.Clear();
}
inline ::google::protobuf::int32 DayFetchInfo::gear_lst(int index) const {
  return gear_lst_.Get(index);
}
inline void DayFetchInfo::set_gear_lst(int index, ::google::protobuf::int32 value) {
  gear_lst_.Set(index, value);
}
inline void DayFetchInfo::add_gear_lst(::google::protobuf::int32 value) {
  gear_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DayFetchInfo::gear_lst() const {
  return gear_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DayFetchInfo::mutable_gear_lst() {
  return &gear_lst_;
}

// -------------------------------------------------------------------

// GearFetchInfo

// optional int32 gear = 1;
inline bool GearFetchInfo::has_gear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GearFetchInfo::set_has_gear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GearFetchInfo::clear_has_gear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GearFetchInfo::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 GearFetchInfo::gear() const {
  return gear_;
}
inline void GearFetchInfo::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// repeated int32 day_lst = 2;
inline int GearFetchInfo::day_lst_size() const {
  return day_lst_.size();
}
inline void GearFetchInfo::clear_day_lst() {
  day_lst_.Clear();
}
inline ::google::protobuf::int32 GearFetchInfo::day_lst(int index) const {
  return day_lst_.Get(index);
}
inline void GearFetchInfo::set_day_lst(int index, ::google::protobuf::int32 value) {
  day_lst_.Set(index, value);
}
inline void GearFetchInfo::add_day_lst(::google::protobuf::int32 value) {
  day_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GearFetchInfo::day_lst() const {
  return day_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GearFetchInfo::mutable_day_lst() {
  return &day_lst_;
}

// -------------------------------------------------------------------

// ContiRechargeDBProto

// optional uint32 recharge = 1;
inline bool ContiRechargeDBProto::has_recharge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContiRechargeDBProto::set_has_recharge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContiRechargeDBProto::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContiRechargeDBProto::clear_recharge() {
  recharge_ = 0u;
  clear_has_recharge();
}
inline ::google::protobuf::uint32 ContiRechargeDBProto::recharge() const {
  return recharge_;
}
inline void ContiRechargeDBProto::set_recharge(::google::protobuf::uint32 value) {
  set_has_recharge();
  recharge_ = value;
}

// optional int32 supplement = 2;
inline bool ContiRechargeDBProto::has_supplement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContiRechargeDBProto::set_has_supplement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContiRechargeDBProto::clear_has_supplement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContiRechargeDBProto::clear_supplement() {
  supplement_ = 0;
  clear_has_supplement();
}
inline ::google::protobuf::int32 ContiRechargeDBProto::supplement() const {
  return supplement_;
}
inline void ContiRechargeDBProto::set_supplement(::google::protobuf::int32 value) {
  set_has_supplement();
  supplement_ = value;
}

// repeated .proto_ff.DayFetchInfo day_fetch = 3;
inline int ContiRechargeDBProto::day_fetch_size() const {
  return day_fetch_.size();
}
inline void ContiRechargeDBProto::clear_day_fetch() {
  day_fetch_.Clear();
}
inline const ::proto_ff::DayFetchInfo& ContiRechargeDBProto::day_fetch(int index) const {
  return day_fetch_.Get(index);
}
inline ::proto_ff::DayFetchInfo* ContiRechargeDBProto::mutable_day_fetch(int index) {
  return day_fetch_.Mutable(index);
}
inline ::proto_ff::DayFetchInfo* ContiRechargeDBProto::add_day_fetch() {
  return day_fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DayFetchInfo >&
ContiRechargeDBProto::day_fetch() const {
  return day_fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DayFetchInfo >*
ContiRechargeDBProto::mutable_day_fetch() {
  return &day_fetch_;
}

// repeated .proto_ff.GearFetchInfo gear_fetch = 4;
inline int ContiRechargeDBProto::gear_fetch_size() const {
  return gear_fetch_.size();
}
inline void ContiRechargeDBProto::clear_gear_fetch() {
  gear_fetch_.Clear();
}
inline const ::proto_ff::GearFetchInfo& ContiRechargeDBProto::gear_fetch(int index) const {
  return gear_fetch_.Get(index);
}
inline ::proto_ff::GearFetchInfo* ContiRechargeDBProto::mutable_gear_fetch(int index) {
  return gear_fetch_.Mutable(index);
}
inline ::proto_ff::GearFetchInfo* ContiRechargeDBProto::add_gear_fetch() {
  return gear_fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GearFetchInfo >&
ContiRechargeDBProto::gear_fetch() const {
  return gear_fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GearFetchInfo >*
ContiRechargeDBProto::mutable_gear_fetch() {
  return &gear_fetch_;
}

// -------------------------------------------------------------------

// ShopProto

// optional int32 type = 1;
inline bool ShopProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ShopProto::type() const {
  return type_;
}
inline void ShopProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 total = 2;
inline bool ShopProto::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopProto::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopProto::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopProto::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 ShopProto::total() const {
  return total_;
}
inline void ShopProto::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// repeated int32 fetch = 3;
inline int ShopProto::fetch_size() const {
  return fetch_.size();
}
inline void ShopProto::clear_fetch() {
  fetch_.Clear();
}
inline ::google::protobuf::int32 ShopProto::fetch(int index) const {
  return fetch_.Get(index);
}
inline void ShopProto::set_fetch(int index, ::google::protobuf::int32 value) {
  fetch_.Set(index, value);
}
inline void ShopProto::add_fetch(::google::protobuf::int32 value) {
  fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShopProto::fetch() const {
  return fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShopProto::mutable_fetch() {
  return &fetch_;
}

// repeated .proto_ff.ComPair buy = 4;
inline int ShopProto::buy_size() const {
  return buy_.size();
}
inline void ShopProto::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::ComPair& ShopProto::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::ComPair* ShopProto::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::ComPair* ShopProto::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
ShopProto::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
ShopProto::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// LimitSaleDBProto

// repeated .proto_ff.ShopProto shop = 1;
inline int LimitSaleDBProto::shop_size() const {
  return shop_.size();
}
inline void LimitSaleDBProto::clear_shop() {
  shop_.Clear();
}
inline const ::proto_ff::ShopProto& LimitSaleDBProto::shop(int index) const {
  return shop_.Get(index);
}
inline ::proto_ff::ShopProto* LimitSaleDBProto::mutable_shop(int index) {
  return shop_.Mutable(index);
}
inline ::proto_ff::ShopProto* LimitSaleDBProto::add_shop() {
  return shop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ShopProto >&
LimitSaleDBProto::shop() const {
  return shop_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ShopProto >*
LimitSaleDBProto::mutable_shop() {
  return &shop_;
}

// optional uint64 fresh_time = 2;
inline bool LimitSaleDBProto::has_fresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LimitSaleDBProto::set_has_fresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LimitSaleDBProto::clear_has_fresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LimitSaleDBProto::clear_fresh_time() {
  fresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_fresh_time();
}
inline ::google::protobuf::uint64 LimitSaleDBProto::fresh_time() const {
  return fresh_time_;
}
inline void LimitSaleDBProto::set_fresh_time(::google::protobuf::uint64 value) {
  set_has_fresh_time();
  fresh_time_ = value;
}

// -------------------------------------------------------------------

// MysteryDBProto

// optional int32 openid = 1;
inline bool MysteryDBProto::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysteryDBProto::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysteryDBProto::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysteryDBProto::clear_openid() {
  openid_ = 0;
  clear_has_openid();
}
inline ::google::protobuf::int32 MysteryDBProto::openid() const {
  return openid_;
}
inline void MysteryDBProto::set_openid(::google::protobuf::int32 value) {
  set_has_openid();
  openid_ = value;
}

// optional int32 day = 2;
inline bool MysteryDBProto::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MysteryDBProto::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MysteryDBProto::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MysteryDBProto::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 MysteryDBProto::day() const {
  return day_;
}
inline void MysteryDBProto::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// repeated .proto_ff.ComPair buy = 3;
inline int MysteryDBProto::buy_size() const {
  return buy_.size();
}
inline void MysteryDBProto::clear_buy() {
  buy_.Clear();
}
inline const ::proto_ff::ComPair& MysteryDBProto::buy(int index) const {
  return buy_.Get(index);
}
inline ::proto_ff::ComPair* MysteryDBProto::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::proto_ff::ComPair* MysteryDBProto::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
MysteryDBProto::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
MysteryDBProto::mutable_buy() {
  return &buy_;
}

// -------------------------------------------------------------------

// TaskProto

// optional int32 id = 1;
inline bool TaskProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TaskProto::id() const {
  return id_;
}
inline void TaskProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cur = 2;
inline bool TaskProto::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskProto::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskProto::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskProto::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 TaskProto::cur() const {
  return cur_;
}
inline void TaskProto::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional int32 fetch = 3;
inline bool TaskProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskProto::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 TaskProto::fetch() const {
  return fetch_;
}
inline void TaskProto::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// FestShootSunDBProto

// repeated .proto_ff.ComPair id_lst = 1;
inline int FestShootSunDBProto::id_lst_size() const {
  return id_lst_.size();
}
inline void FestShootSunDBProto::clear_id_lst() {
  id_lst_.Clear();
}
inline const ::proto_ff::ComPair& FestShootSunDBProto::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline ::proto_ff::ComPair* FestShootSunDBProto::mutable_id_lst(int index) {
  return id_lst_.Mutable(index);
}
inline ::proto_ff::ComPair* FestShootSunDBProto::add_id_lst() {
  return id_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
FestShootSunDBProto::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
FestShootSunDBProto::mutable_id_lst() {
  return &id_lst_;
}

// optional int32 free = 2;
inline bool FestShootSunDBProto::has_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestShootSunDBProto::set_has_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestShootSunDBProto::clear_has_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestShootSunDBProto::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 FestShootSunDBProto::free() const {
  return free_;
}
inline void FestShootSunDBProto::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// optional uint64 free_time = 3;
inline bool FestShootSunDBProto::has_free_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestShootSunDBProto::set_has_free_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestShootSunDBProto::clear_has_free_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestShootSunDBProto::clear_free_time() {
  free_time_ = GOOGLE_ULONGLONG(0);
  clear_has_free_time();
}
inline ::google::protobuf::uint64 FestShootSunDBProto::free_time() const {
  return free_time_;
}
inline void FestShootSunDBProto::set_free_time(::google::protobuf::uint64 value) {
  set_has_free_time();
  free_time_ = value;
}

// optional uint64 auto_time = 4;
inline bool FestShootSunDBProto::has_auto_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestShootSunDBProto::set_has_auto_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestShootSunDBProto::clear_has_auto_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestShootSunDBProto::clear_auto_time() {
  auto_time_ = GOOGLE_ULONGLONG(0);
  clear_has_auto_time();
}
inline ::google::protobuf::uint64 FestShootSunDBProto::auto_time() const {
  return auto_time_;
}
inline void FestShootSunDBProto::set_auto_time(::google::protobuf::uint64 value) {
  set_has_auto_time();
  auto_time_ = value;
}

// repeated .proto_ff.TaskProto task = 5;
inline int FestShootSunDBProto::task_size() const {
  return task_.size();
}
inline void FestShootSunDBProto::clear_task() {
  task_.Clear();
}
inline const ::proto_ff::TaskProto& FestShootSunDBProto::task(int index) const {
  return task_.Get(index);
}
inline ::proto_ff::TaskProto* FestShootSunDBProto::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::proto_ff::TaskProto* FestShootSunDBProto::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TaskProto >&
FestShootSunDBProto::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TaskProto >*
FestShootSunDBProto::mutable_task() {
  return &task_;
}

// optional uint64 task_time = 6;
inline bool FestShootSunDBProto::has_task_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FestShootSunDBProto::set_has_task_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FestShootSunDBProto::clear_has_task_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FestShootSunDBProto::clear_task_time() {
  task_time_ = GOOGLE_ULONGLONG(0);
  clear_has_task_time();
}
inline ::google::protobuf::uint64 FestShootSunDBProto::task_time() const {
  return task_time_;
}
inline void FestShootSunDBProto::set_task_time(::google::protobuf::uint64 value) {
  set_has_task_time();
  task_time_ = value;
}

// -------------------------------------------------------------------

// FestDetailDBProto

// required int32 template_id = 1;
inline bool FestDetailDBProto::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDetailDBProto::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDetailDBProto::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDetailDBProto::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDetailDBProto::template_id() const {
  return template_id_;
}
inline void FestDetailDBProto::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// required int32 period = 2;
inline bool FestDetailDBProto::has_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FestDetailDBProto::set_has_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FestDetailDBProto::clear_has_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FestDetailDBProto::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 FestDetailDBProto::period() const {
  return period_;
}
inline void FestDetailDBProto::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
}

// required uint64 begintime = 3;
inline bool FestDetailDBProto::has_begintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FestDetailDBProto::set_has_begintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FestDetailDBProto::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FestDetailDBProto::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 FestDetailDBProto::begintime() const {
  return begintime_;
}
inline void FestDetailDBProto::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional .proto_ff.FestShopDBProto shop = 4;
inline bool FestDetailDBProto::has_shop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FestDetailDBProto::set_has_shop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FestDetailDBProto::clear_has_shop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FestDetailDBProto::clear_shop() {
  if (shop_ != NULL) shop_->::proto_ff::FestShopDBProto::Clear();
  clear_has_shop();
}
inline const ::proto_ff::FestShopDBProto& FestDetailDBProto::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::proto_ff::FestShopDBProto* FestDetailDBProto::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::proto_ff::FestShopDBProto;
  return shop_;
}
inline ::proto_ff::FestShopDBProto* FestDetailDBProto::release_shop() {
  clear_has_shop();
  ::proto_ff::FestShopDBProto* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_shop(::proto_ff::FestShopDBProto* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
}

// optional .proto_ff.FestDailyTotalRechargeDBProto daily_total_recharge = 5;
inline bool FestDetailDBProto::has_daily_total_recharge() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FestDetailDBProto::set_has_daily_total_recharge() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FestDetailDBProto::clear_has_daily_total_recharge() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FestDetailDBProto::clear_daily_total_recharge() {
  if (daily_total_recharge_ != NULL) daily_total_recharge_->::proto_ff::FestDailyTotalRechargeDBProto::Clear();
  clear_has_daily_total_recharge();
}
inline const ::proto_ff::FestDailyTotalRechargeDBProto& FestDetailDBProto::daily_total_recharge() const {
  return daily_total_recharge_ != NULL ? *daily_total_recharge_ : *default_instance_->daily_total_recharge_;
}
inline ::proto_ff::FestDailyTotalRechargeDBProto* FestDetailDBProto::mutable_daily_total_recharge() {
  set_has_daily_total_recharge();
  if (daily_total_recharge_ == NULL) daily_total_recharge_ = new ::proto_ff::FestDailyTotalRechargeDBProto;
  return daily_total_recharge_;
}
inline ::proto_ff::FestDailyTotalRechargeDBProto* FestDetailDBProto::release_daily_total_recharge() {
  clear_has_daily_total_recharge();
  ::proto_ff::FestDailyTotalRechargeDBProto* temp = daily_total_recharge_;
  daily_total_recharge_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_daily_total_recharge(::proto_ff::FestDailyTotalRechargeDBProto* daily_total_recharge) {
  delete daily_total_recharge_;
  daily_total_recharge_ = daily_total_recharge;
  if (daily_total_recharge) {
    set_has_daily_total_recharge();
  } else {
    clear_has_daily_total_recharge();
  }
}

// optional .proto_ff.FestSignDBProto sign = 6;
inline bool FestDetailDBProto::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FestDetailDBProto::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FestDetailDBProto::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FestDetailDBProto::clear_sign() {
  if (sign_ != NULL) sign_->::proto_ff::FestSignDBProto::Clear();
  clear_has_sign();
}
inline const ::proto_ff::FestSignDBProto& FestDetailDBProto::sign() const {
  return sign_ != NULL ? *sign_ : *default_instance_->sign_;
}
inline ::proto_ff::FestSignDBProto* FestDetailDBProto::mutable_sign() {
  set_has_sign();
  if (sign_ == NULL) sign_ = new ::proto_ff::FestSignDBProto;
  return sign_;
}
inline ::proto_ff::FestSignDBProto* FestDetailDBProto::release_sign() {
  clear_has_sign();
  ::proto_ff::FestSignDBProto* temp = sign_;
  sign_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_sign(::proto_ff::FestSignDBProto* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
}

// optional .proto_ff.FestGoldStoreDBProto gold_store = 7;
inline bool FestDetailDBProto::has_gold_store() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FestDetailDBProto::set_has_gold_store() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FestDetailDBProto::clear_has_gold_store() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FestDetailDBProto::clear_gold_store() {
  if (gold_store_ != NULL) gold_store_->::proto_ff::FestGoldStoreDBProto::Clear();
  clear_has_gold_store();
}
inline const ::proto_ff::FestGoldStoreDBProto& FestDetailDBProto::gold_store() const {
  return gold_store_ != NULL ? *gold_store_ : *default_instance_->gold_store_;
}
inline ::proto_ff::FestGoldStoreDBProto* FestDetailDBProto::mutable_gold_store() {
  set_has_gold_store();
  if (gold_store_ == NULL) gold_store_ = new ::proto_ff::FestGoldStoreDBProto;
  return gold_store_;
}
inline ::proto_ff::FestGoldStoreDBProto* FestDetailDBProto::release_gold_store() {
  clear_has_gold_store();
  ::proto_ff::FestGoldStoreDBProto* temp = gold_store_;
  gold_store_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_gold_store(::proto_ff::FestGoldStoreDBProto* gold_store) {
  delete gold_store_;
  gold_store_ = gold_store;
  if (gold_store) {
    set_has_gold_store();
  } else {
    clear_has_gold_store();
  }
}

// optional .proto_ff.FestDigEggDBProto dig_egg = 8;
inline bool FestDetailDBProto::has_dig_egg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FestDetailDBProto::set_has_dig_egg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FestDetailDBProto::clear_has_dig_egg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FestDetailDBProto::clear_dig_egg() {
  if (dig_egg_ != NULL) dig_egg_->::proto_ff::FestDigEggDBProto::Clear();
  clear_has_dig_egg();
}
inline const ::proto_ff::FestDigEggDBProto& FestDetailDBProto::dig_egg() const {
  return dig_egg_ != NULL ? *dig_egg_ : *default_instance_->dig_egg_;
}
inline ::proto_ff::FestDigEggDBProto* FestDetailDBProto::mutable_dig_egg() {
  set_has_dig_egg();
  if (dig_egg_ == NULL) dig_egg_ = new ::proto_ff::FestDigEggDBProto;
  return dig_egg_;
}
inline ::proto_ff::FestDigEggDBProto* FestDetailDBProto::release_dig_egg() {
  clear_has_dig_egg();
  ::proto_ff::FestDigEggDBProto* temp = dig_egg_;
  dig_egg_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_dig_egg(::proto_ff::FestDigEggDBProto* dig_egg) {
  delete dig_egg_;
  dig_egg_ = dig_egg;
  if (dig_egg) {
    set_has_dig_egg();
  } else {
    clear_has_dig_egg();
  }
}

// optional .proto_ff.FestRTurnableRechargeDBProto rturnable_recharge = 9;
inline bool FestDetailDBProto::has_rturnable_recharge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FestDetailDBProto::set_has_rturnable_recharge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FestDetailDBProto::clear_has_rturnable_recharge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FestDetailDBProto::clear_rturnable_recharge() {
  if (rturnable_recharge_ != NULL) rturnable_recharge_->::proto_ff::FestRTurnableRechargeDBProto::Clear();
  clear_has_rturnable_recharge();
}
inline const ::proto_ff::FestRTurnableRechargeDBProto& FestDetailDBProto::rturnable_recharge() const {
  return rturnable_recharge_ != NULL ? *rturnable_recharge_ : *default_instance_->rturnable_recharge_;
}
inline ::proto_ff::FestRTurnableRechargeDBProto* FestDetailDBProto::mutable_rturnable_recharge() {
  set_has_rturnable_recharge();
  if (rturnable_recharge_ == NULL) rturnable_recharge_ = new ::proto_ff::FestRTurnableRechargeDBProto;
  return rturnable_recharge_;
}
inline ::proto_ff::FestRTurnableRechargeDBProto* FestDetailDBProto::release_rturnable_recharge() {
  clear_has_rturnable_recharge();
  ::proto_ff::FestRTurnableRechargeDBProto* temp = rturnable_recharge_;
  rturnable_recharge_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_rturnable_recharge(::proto_ff::FestRTurnableRechargeDBProto* rturnable_recharge) {
  delete rturnable_recharge_;
  rturnable_recharge_ = rturnable_recharge;
  if (rturnable_recharge) {
    set_has_rturnable_recharge();
  } else {
    clear_has_rturnable_recharge();
  }
}

// optional .proto_ff.FestTurnableDBProto turntable = 10;
inline bool FestDetailDBProto::has_turntable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FestDetailDBProto::set_has_turntable() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FestDetailDBProto::clear_has_turntable() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FestDetailDBProto::clear_turntable() {
  if (turntable_ != NULL) turntable_->::proto_ff::FestTurnableDBProto::Clear();
  clear_has_turntable();
}
inline const ::proto_ff::FestTurnableDBProto& FestDetailDBProto::turntable() const {
  return turntable_ != NULL ? *turntable_ : *default_instance_->turntable_;
}
inline ::proto_ff::FestTurnableDBProto* FestDetailDBProto::mutable_turntable() {
  set_has_turntable();
  if (turntable_ == NULL) turntable_ = new ::proto_ff::FestTurnableDBProto;
  return turntable_;
}
inline ::proto_ff::FestTurnableDBProto* FestDetailDBProto::release_turntable() {
  clear_has_turntable();
  ::proto_ff::FestTurnableDBProto* temp = turntable_;
  turntable_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_turntable(::proto_ff::FestTurnableDBProto* turntable) {
  delete turntable_;
  turntable_ = turntable;
  if (turntable) {
    set_has_turntable();
  } else {
    clear_has_turntable();
  }
}

// optional .proto_ff.FestDonateDBProto donate = 11;
inline bool FestDetailDBProto::has_donate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FestDetailDBProto::set_has_donate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FestDetailDBProto::clear_has_donate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FestDetailDBProto::clear_donate() {
  if (donate_ != NULL) donate_->::proto_ff::FestDonateDBProto::Clear();
  clear_has_donate();
}
inline const ::proto_ff::FestDonateDBProto& FestDetailDBProto::donate() const {
  return donate_ != NULL ? *donate_ : *default_instance_->donate_;
}
inline ::proto_ff::FestDonateDBProto* FestDetailDBProto::mutable_donate() {
  set_has_donate();
  if (donate_ == NULL) donate_ = new ::proto_ff::FestDonateDBProto;
  return donate_;
}
inline ::proto_ff::FestDonateDBProto* FestDetailDBProto::release_donate() {
  clear_has_donate();
  ::proto_ff::FestDonateDBProto* temp = donate_;
  donate_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_donate(::proto_ff::FestDonateDBProto* donate) {
  delete donate_;
  donate_ = donate;
  if (donate) {
    set_has_donate();
  } else {
    clear_has_donate();
  }
}

// optional .proto_ff.FestOnlineDBProto online = 12;
inline bool FestDetailDBProto::has_online() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FestDetailDBProto::set_has_online() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FestDetailDBProto::clear_has_online() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FestDetailDBProto::clear_online() {
  if (online_ != NULL) online_->::proto_ff::FestOnlineDBProto::Clear();
  clear_has_online();
}
inline const ::proto_ff::FestOnlineDBProto& FestDetailDBProto::online() const {
  return online_ != NULL ? *online_ : *default_instance_->online_;
}
inline ::proto_ff::FestOnlineDBProto* FestDetailDBProto::mutable_online() {
  set_has_online();
  if (online_ == NULL) online_ = new ::proto_ff::FestOnlineDBProto;
  return online_;
}
inline ::proto_ff::FestOnlineDBProto* FestDetailDBProto::release_online() {
  clear_has_online();
  ::proto_ff::FestOnlineDBProto* temp = online_;
  online_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_online(::proto_ff::FestOnlineDBProto* online) {
  delete online_;
  online_ = online;
  if (online) {
    set_has_online();
  } else {
    clear_has_online();
  }
}

// optional .proto_ff.FestCollectWordDBProto collect_word = 13;
inline bool FestDetailDBProto::has_collect_word() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FestDetailDBProto::set_has_collect_word() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FestDetailDBProto::clear_has_collect_word() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FestDetailDBProto::clear_collect_word() {
  if (collect_word_ != NULL) collect_word_->::proto_ff::FestCollectWordDBProto::Clear();
  clear_has_collect_word();
}
inline const ::proto_ff::FestCollectWordDBProto& FestDetailDBProto::collect_word() const {
  return collect_word_ != NULL ? *collect_word_ : *default_instance_->collect_word_;
}
inline ::proto_ff::FestCollectWordDBProto* FestDetailDBProto::mutable_collect_word() {
  set_has_collect_word();
  if (collect_word_ == NULL) collect_word_ = new ::proto_ff::FestCollectWordDBProto;
  return collect_word_;
}
inline ::proto_ff::FestCollectWordDBProto* FestDetailDBProto::release_collect_word() {
  clear_has_collect_word();
  ::proto_ff::FestCollectWordDBProto* temp = collect_word_;
  collect_word_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_collect_word(::proto_ff::FestCollectWordDBProto* collect_word) {
  delete collect_word_;
  collect_word_ = collect_word;
  if (collect_word) {
    set_has_collect_word();
  } else {
    clear_has_collect_word();
  }
}

// optional .proto_ff.DrawPizeProto draw_pize = 14;
inline bool FestDetailDBProto::has_draw_pize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FestDetailDBProto::set_has_draw_pize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FestDetailDBProto::clear_has_draw_pize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FestDetailDBProto::clear_draw_pize() {
  if (draw_pize_ != NULL) draw_pize_->::proto_ff::DrawPizeProto::Clear();
  clear_has_draw_pize();
}
inline const ::proto_ff::DrawPizeProto& FestDetailDBProto::draw_pize() const {
  return draw_pize_ != NULL ? *draw_pize_ : *default_instance_->draw_pize_;
}
inline ::proto_ff::DrawPizeProto* FestDetailDBProto::mutable_draw_pize() {
  set_has_draw_pize();
  if (draw_pize_ == NULL) draw_pize_ = new ::proto_ff::DrawPizeProto;
  return draw_pize_;
}
inline ::proto_ff::DrawPizeProto* FestDetailDBProto::release_draw_pize() {
  clear_has_draw_pize();
  ::proto_ff::DrawPizeProto* temp = draw_pize_;
  draw_pize_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_draw_pize(::proto_ff::DrawPizeProto* draw_pize) {
  delete draw_pize_;
  draw_pize_ = draw_pize;
  if (draw_pize) {
    set_has_draw_pize();
  } else {
    clear_has_draw_pize();
  }
}

// optional .proto_ff.FestRankDBData server_rank = 15;
inline bool FestDetailDBProto::has_server_rank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FestDetailDBProto::set_has_server_rank() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FestDetailDBProto::clear_has_server_rank() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FestDetailDBProto::clear_server_rank() {
  if (server_rank_ != NULL) server_rank_->::proto_ff::FestRankDBData::Clear();
  clear_has_server_rank();
}
inline const ::proto_ff::FestRankDBData& FestDetailDBProto::server_rank() const {
  return server_rank_ != NULL ? *server_rank_ : *default_instance_->server_rank_;
}
inline ::proto_ff::FestRankDBData* FestDetailDBProto::mutable_server_rank() {
  set_has_server_rank();
  if (server_rank_ == NULL) server_rank_ = new ::proto_ff::FestRankDBData;
  return server_rank_;
}
inline ::proto_ff::FestRankDBData* FestDetailDBProto::release_server_rank() {
  clear_has_server_rank();
  ::proto_ff::FestRankDBData* temp = server_rank_;
  server_rank_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_server_rank(::proto_ff::FestRankDBData* server_rank) {
  delete server_rank_;
  server_rank_ = server_rank;
  if (server_rank) {
    set_has_server_rank();
  } else {
    clear_has_server_rank();
  }
}

// optional .proto_ff.FestBossFirstDB boss = 16;
inline bool FestDetailDBProto::has_boss() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FestDetailDBProto::set_has_boss() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FestDetailDBProto::clear_has_boss() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FestDetailDBProto::clear_boss() {
  if (boss_ != NULL) boss_->::proto_ff::FestBossFirstDB::Clear();
  clear_has_boss();
}
inline const ::proto_ff::FestBossFirstDB& FestDetailDBProto::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::proto_ff::FestBossFirstDB* FestDetailDBProto::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::proto_ff::FestBossFirstDB;
  return boss_;
}
inline ::proto_ff::FestBossFirstDB* FestDetailDBProto::release_boss() {
  clear_has_boss();
  ::proto_ff::FestBossFirstDB* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_boss(::proto_ff::FestBossFirstDB* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
}

// optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 17;
inline bool FestDetailDBProto::has_hui_meng_xi_you() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FestDetailDBProto::set_has_hui_meng_xi_you() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FestDetailDBProto::clear_has_hui_meng_xi_you() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FestDetailDBProto::clear_hui_meng_xi_you() {
  if (hui_meng_xi_you_ != NULL) hui_meng_xi_you_->::proto_ff::FestHuiMengXiYouData::Clear();
  clear_has_hui_meng_xi_you();
}
inline const ::proto_ff::FestHuiMengXiYouData& FestDetailDBProto::hui_meng_xi_you() const {
  return hui_meng_xi_you_ != NULL ? *hui_meng_xi_you_ : *default_instance_->hui_meng_xi_you_;
}
inline ::proto_ff::FestHuiMengXiYouData* FestDetailDBProto::mutable_hui_meng_xi_you() {
  set_has_hui_meng_xi_you();
  if (hui_meng_xi_you_ == NULL) hui_meng_xi_you_ = new ::proto_ff::FestHuiMengXiYouData;
  return hui_meng_xi_you_;
}
inline ::proto_ff::FestHuiMengXiYouData* FestDetailDBProto::release_hui_meng_xi_you() {
  clear_has_hui_meng_xi_you();
  ::proto_ff::FestHuiMengXiYouData* temp = hui_meng_xi_you_;
  hui_meng_xi_you_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_hui_meng_xi_you(::proto_ff::FestHuiMengXiYouData* hui_meng_xi_you) {
  delete hui_meng_xi_you_;
  hui_meng_xi_you_ = hui_meng_xi_you;
  if (hui_meng_xi_you) {
    set_has_hui_meng_xi_you();
  } else {
    clear_has_hui_meng_xi_you();
  }
}

// optional .proto_ff.FestBtDragonDBProto bt_dragon = 18;
inline bool FestDetailDBProto::has_bt_dragon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FestDetailDBProto::set_has_bt_dragon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FestDetailDBProto::clear_has_bt_dragon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FestDetailDBProto::clear_bt_dragon() {
  if (bt_dragon_ != NULL) bt_dragon_->::proto_ff::FestBtDragonDBProto::Clear();
  clear_has_bt_dragon();
}
inline const ::proto_ff::FestBtDragonDBProto& FestDetailDBProto::bt_dragon() const {
  return bt_dragon_ != NULL ? *bt_dragon_ : *default_instance_->bt_dragon_;
}
inline ::proto_ff::FestBtDragonDBProto* FestDetailDBProto::mutable_bt_dragon() {
  set_has_bt_dragon();
  if (bt_dragon_ == NULL) bt_dragon_ = new ::proto_ff::FestBtDragonDBProto;
  return bt_dragon_;
}
inline ::proto_ff::FestBtDragonDBProto* FestDetailDBProto::release_bt_dragon() {
  clear_has_bt_dragon();
  ::proto_ff::FestBtDragonDBProto* temp = bt_dragon_;
  bt_dragon_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_bt_dragon(::proto_ff::FestBtDragonDBProto* bt_dragon) {
  delete bt_dragon_;
  bt_dragon_ = bt_dragon;
  if (bt_dragon) {
    set_has_bt_dragon();
  } else {
    clear_has_bt_dragon();
  }
}

// optional .proto_ff.FestCandleDBProto candle = 19;
inline bool FestDetailDBProto::has_candle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FestDetailDBProto::set_has_candle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FestDetailDBProto::clear_has_candle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FestDetailDBProto::clear_candle() {
  if (candle_ != NULL) candle_->::proto_ff::FestCandleDBProto::Clear();
  clear_has_candle();
}
inline const ::proto_ff::FestCandleDBProto& FestDetailDBProto::candle() const {
  return candle_ != NULL ? *candle_ : *default_instance_->candle_;
}
inline ::proto_ff::FestCandleDBProto* FestDetailDBProto::mutable_candle() {
  set_has_candle();
  if (candle_ == NULL) candle_ = new ::proto_ff::FestCandleDBProto;
  return candle_;
}
inline ::proto_ff::FestCandleDBProto* FestDetailDBProto::release_candle() {
  clear_has_candle();
  ::proto_ff::FestCandleDBProto* temp = candle_;
  candle_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_candle(::proto_ff::FestCandleDBProto* candle) {
  delete candle_;
  candle_ = candle;
  if (candle) {
    set_has_candle();
  } else {
    clear_has_candle();
  }
}

// optional .proto_ff.FMarryRoleDB marry = 20;
inline bool FestDetailDBProto::has_marry() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FestDetailDBProto::set_has_marry() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FestDetailDBProto::clear_has_marry() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FestDetailDBProto::clear_marry() {
  if (marry_ != NULL) marry_->::proto_ff::FMarryRoleDB::Clear();
  clear_has_marry();
}
inline const ::proto_ff::FMarryRoleDB& FestDetailDBProto::marry() const {
  return marry_ != NULL ? *marry_ : *default_instance_->marry_;
}
inline ::proto_ff::FMarryRoleDB* FestDetailDBProto::mutable_marry() {
  set_has_marry();
  if (marry_ == NULL) marry_ = new ::proto_ff::FMarryRoleDB;
  return marry_;
}
inline ::proto_ff::FMarryRoleDB* FestDetailDBProto::release_marry() {
  clear_has_marry();
  ::proto_ff::FMarryRoleDB* temp = marry_;
  marry_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_marry(::proto_ff::FMarryRoleDB* marry) {
  delete marry_;
  marry_ = marry;
  if (marry) {
    set_has_marry();
  } else {
    clear_has_marry();
  }
}

// optional .proto_ff.DayTotalRechargeDBProto day_total_recharge = 21;
inline bool FestDetailDBProto::has_day_total_recharge() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FestDetailDBProto::set_has_day_total_recharge() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FestDetailDBProto::clear_has_day_total_recharge() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FestDetailDBProto::clear_day_total_recharge() {
  if (day_total_recharge_ != NULL) day_total_recharge_->::proto_ff::DayTotalRechargeDBProto::Clear();
  clear_has_day_total_recharge();
}
inline const ::proto_ff::DayTotalRechargeDBProto& FestDetailDBProto::day_total_recharge() const {
  return day_total_recharge_ != NULL ? *day_total_recharge_ : *default_instance_->day_total_recharge_;
}
inline ::proto_ff::DayTotalRechargeDBProto* FestDetailDBProto::mutable_day_total_recharge() {
  set_has_day_total_recharge();
  if (day_total_recharge_ == NULL) day_total_recharge_ = new ::proto_ff::DayTotalRechargeDBProto;
  return day_total_recharge_;
}
inline ::proto_ff::DayTotalRechargeDBProto* FestDetailDBProto::release_day_total_recharge() {
  clear_has_day_total_recharge();
  ::proto_ff::DayTotalRechargeDBProto* temp = day_total_recharge_;
  day_total_recharge_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_day_total_recharge(::proto_ff::DayTotalRechargeDBProto* day_total_recharge) {
  delete day_total_recharge_;
  day_total_recharge_ = day_total_recharge;
  if (day_total_recharge) {
    set_has_day_total_recharge();
  } else {
    clear_has_day_total_recharge();
  }
}

// optional .proto_ff.TotalRechargeDBProto total_recharge = 22;
inline bool FestDetailDBProto::has_total_recharge() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FestDetailDBProto::set_has_total_recharge() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FestDetailDBProto::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FestDetailDBProto::clear_total_recharge() {
  if (total_recharge_ != NULL) total_recharge_->::proto_ff::TotalRechargeDBProto::Clear();
  clear_has_total_recharge();
}
inline const ::proto_ff::TotalRechargeDBProto& FestDetailDBProto::total_recharge() const {
  return total_recharge_ != NULL ? *total_recharge_ : *default_instance_->total_recharge_;
}
inline ::proto_ff::TotalRechargeDBProto* FestDetailDBProto::mutable_total_recharge() {
  set_has_total_recharge();
  if (total_recharge_ == NULL) total_recharge_ = new ::proto_ff::TotalRechargeDBProto;
  return total_recharge_;
}
inline ::proto_ff::TotalRechargeDBProto* FestDetailDBProto::release_total_recharge() {
  clear_has_total_recharge();
  ::proto_ff::TotalRechargeDBProto* temp = total_recharge_;
  total_recharge_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_total_recharge(::proto_ff::TotalRechargeDBProto* total_recharge) {
  delete total_recharge_;
  total_recharge_ = total_recharge;
  if (total_recharge) {
    set_has_total_recharge();
  } else {
    clear_has_total_recharge();
  }
}

// optional .proto_ff.LoginRewardDBProto login = 23;
inline bool FestDetailDBProto::has_login() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FestDetailDBProto::set_has_login() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FestDetailDBProto::clear_has_login() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FestDetailDBProto::clear_login() {
  if (login_ != NULL) login_->::proto_ff::LoginRewardDBProto::Clear();
  clear_has_login();
}
inline const ::proto_ff::LoginRewardDBProto& FestDetailDBProto::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::proto_ff::LoginRewardDBProto* FestDetailDBProto::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::proto_ff::LoginRewardDBProto;
  return login_;
}
inline ::proto_ff::LoginRewardDBProto* FestDetailDBProto::release_login() {
  clear_has_login();
  ::proto_ff::LoginRewardDBProto* temp = login_;
  login_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_login(::proto_ff::LoginRewardDBProto* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// optional .proto_ff.ContiRechargeDBProto conti_recharge = 24;
inline bool FestDetailDBProto::has_conti_recharge() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FestDetailDBProto::set_has_conti_recharge() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FestDetailDBProto::clear_has_conti_recharge() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FestDetailDBProto::clear_conti_recharge() {
  if (conti_recharge_ != NULL) conti_recharge_->::proto_ff::ContiRechargeDBProto::Clear();
  clear_has_conti_recharge();
}
inline const ::proto_ff::ContiRechargeDBProto& FestDetailDBProto::conti_recharge() const {
  return conti_recharge_ != NULL ? *conti_recharge_ : *default_instance_->conti_recharge_;
}
inline ::proto_ff::ContiRechargeDBProto* FestDetailDBProto::mutable_conti_recharge() {
  set_has_conti_recharge();
  if (conti_recharge_ == NULL) conti_recharge_ = new ::proto_ff::ContiRechargeDBProto;
  return conti_recharge_;
}
inline ::proto_ff::ContiRechargeDBProto* FestDetailDBProto::release_conti_recharge() {
  clear_has_conti_recharge();
  ::proto_ff::ContiRechargeDBProto* temp = conti_recharge_;
  conti_recharge_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_conti_recharge(::proto_ff::ContiRechargeDBProto* conti_recharge) {
  delete conti_recharge_;
  conti_recharge_ = conti_recharge;
  if (conti_recharge) {
    set_has_conti_recharge();
  } else {
    clear_has_conti_recharge();
  }
}

// optional .proto_ff.LimitSaleDBProto limit_sale = 25;
inline bool FestDetailDBProto::has_limit_sale() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FestDetailDBProto::set_has_limit_sale() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FestDetailDBProto::clear_has_limit_sale() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FestDetailDBProto::clear_limit_sale() {
  if (limit_sale_ != NULL) limit_sale_->::proto_ff::LimitSaleDBProto::Clear();
  clear_has_limit_sale();
}
inline const ::proto_ff::LimitSaleDBProto& FestDetailDBProto::limit_sale() const {
  return limit_sale_ != NULL ? *limit_sale_ : *default_instance_->limit_sale_;
}
inline ::proto_ff::LimitSaleDBProto* FestDetailDBProto::mutable_limit_sale() {
  set_has_limit_sale();
  if (limit_sale_ == NULL) limit_sale_ = new ::proto_ff::LimitSaleDBProto;
  return limit_sale_;
}
inline ::proto_ff::LimitSaleDBProto* FestDetailDBProto::release_limit_sale() {
  clear_has_limit_sale();
  ::proto_ff::LimitSaleDBProto* temp = limit_sale_;
  limit_sale_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_limit_sale(::proto_ff::LimitSaleDBProto* limit_sale) {
  delete limit_sale_;
  limit_sale_ = limit_sale;
  if (limit_sale) {
    set_has_limit_sale();
  } else {
    clear_has_limit_sale();
  }
}

// optional .proto_ff.MysteryDBProto mystery = 26;
inline bool FestDetailDBProto::has_mystery() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FestDetailDBProto::set_has_mystery() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FestDetailDBProto::clear_has_mystery() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FestDetailDBProto::clear_mystery() {
  if (mystery_ != NULL) mystery_->::proto_ff::MysteryDBProto::Clear();
  clear_has_mystery();
}
inline const ::proto_ff::MysteryDBProto& FestDetailDBProto::mystery() const {
  return mystery_ != NULL ? *mystery_ : *default_instance_->mystery_;
}
inline ::proto_ff::MysteryDBProto* FestDetailDBProto::mutable_mystery() {
  set_has_mystery();
  if (mystery_ == NULL) mystery_ = new ::proto_ff::MysteryDBProto;
  return mystery_;
}
inline ::proto_ff::MysteryDBProto* FestDetailDBProto::release_mystery() {
  clear_has_mystery();
  ::proto_ff::MysteryDBProto* temp = mystery_;
  mystery_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_mystery(::proto_ff::MysteryDBProto* mystery) {
  delete mystery_;
  mystery_ = mystery;
  if (mystery) {
    set_has_mystery();
  } else {
    clear_has_mystery();
  }
}

// optional .proto_ff.FestShootSunDBProto shoot_sun = 27;
inline bool FestDetailDBProto::has_shoot_sun() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FestDetailDBProto::set_has_shoot_sun() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FestDetailDBProto::clear_has_shoot_sun() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FestDetailDBProto::clear_shoot_sun() {
  if (shoot_sun_ != NULL) shoot_sun_->::proto_ff::FestShootSunDBProto::Clear();
  clear_has_shoot_sun();
}
inline const ::proto_ff::FestShootSunDBProto& FestDetailDBProto::shoot_sun() const {
  return shoot_sun_ != NULL ? *shoot_sun_ : *default_instance_->shoot_sun_;
}
inline ::proto_ff::FestShootSunDBProto* FestDetailDBProto::mutable_shoot_sun() {
  set_has_shoot_sun();
  if (shoot_sun_ == NULL) shoot_sun_ = new ::proto_ff::FestShootSunDBProto;
  return shoot_sun_;
}
inline ::proto_ff::FestShootSunDBProto* FestDetailDBProto::release_shoot_sun() {
  clear_has_shoot_sun();
  ::proto_ff::FestShootSunDBProto* temp = shoot_sun_;
  shoot_sun_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_shoot_sun(::proto_ff::FestShootSunDBProto* shoot_sun) {
  delete shoot_sun_;
  shoot_sun_ = shoot_sun;
  if (shoot_sun) {
    set_has_shoot_sun();
  } else {
    clear_has_shoot_sun();
  }
}

// optional .proto_ff.FestRechargePrizeDBData recharge_prize = 28;
inline bool FestDetailDBProto::has_recharge_prize() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FestDetailDBProto::set_has_recharge_prize() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FestDetailDBProto::clear_has_recharge_prize() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FestDetailDBProto::clear_recharge_prize() {
  if (recharge_prize_ != NULL) recharge_prize_->::proto_ff::FestRechargePrizeDBData::Clear();
  clear_has_recharge_prize();
}
inline const ::proto_ff::FestRechargePrizeDBData& FestDetailDBProto::recharge_prize() const {
  return recharge_prize_ != NULL ? *recharge_prize_ : *default_instance_->recharge_prize_;
}
inline ::proto_ff::FestRechargePrizeDBData* FestDetailDBProto::mutable_recharge_prize() {
  set_has_recharge_prize();
  if (recharge_prize_ == NULL) recharge_prize_ = new ::proto_ff::FestRechargePrizeDBData;
  return recharge_prize_;
}
inline ::proto_ff::FestRechargePrizeDBData* FestDetailDBProto::release_recharge_prize() {
  clear_has_recharge_prize();
  ::proto_ff::FestRechargePrizeDBData* temp = recharge_prize_;
  recharge_prize_ = NULL;
  return temp;
}
inline void FestDetailDBProto::set_allocated_recharge_prize(::proto_ff::FestRechargePrizeDBData* recharge_prize) {
  delete recharge_prize_;
  recharge_prize_ = recharge_prize;
  if (recharge_prize) {
    set_has_recharge_prize();
  } else {
    clear_has_recharge_prize();
  }
}

// -------------------------------------------------------------------

// FestDBData

// repeated .proto_ff.FestDetailDBProto info = 1;
inline int FestDBData::info_size() const {
  return info_.size();
}
inline void FestDBData::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestDetailDBProto& FestDBData::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestDetailDBProto* FestDBData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestDetailDBProto* FestDBData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailDBProto >&
FestDBData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDetailDBProto >*
FestDBData::mutable_info() {
  return &info_;
}

// repeated int32 close = 2;
inline int FestDBData::close_size() const {
  return close_.size();
}
inline void FestDBData::clear_close() {
  close_.Clear();
}
inline ::google::protobuf::int32 FestDBData::close(int index) const {
  return close_.Get(index);
}
inline void FestDBData::set_close(int index, ::google::protobuf::int32 value) {
  close_.Set(index, value);
}
inline void FestDBData::add_close(::google::protobuf::int32 value) {
  close_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FestDBData::close() const {
  return close_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FestDBData::mutable_close() {
  return &close_;
}

// -------------------------------------------------------------------

// ShadowDBProto

// optional int32 lev = 1;
inline bool ShadowDBProto::has_lev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShadowDBProto::set_has_lev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShadowDBProto::clear_has_lev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShadowDBProto::clear_lev() {
  lev_ = 0;
  clear_has_lev();
}
inline ::google::protobuf::int32 ShadowDBProto::lev() const {
  return lev_;
}
inline void ShadowDBProto::set_lev(::google::protobuf::int32 value) {
  set_has_lev();
  lev_ = value;
}

// optional int32 exp = 2;
inline bool ShadowDBProto::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShadowDBProto::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShadowDBProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShadowDBProto::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 ShadowDBProto::exp() const {
  return exp_;
}
inline void ShadowDBProto::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 star = 3;
inline bool ShadowDBProto::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShadowDBProto::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShadowDBProto::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShadowDBProto::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ShadowDBProto::star() const {
  return star_;
}
inline void ShadowDBProto::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 lucky = 4;
inline bool ShadowDBProto::has_lucky() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShadowDBProto::set_has_lucky() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShadowDBProto::clear_has_lucky() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShadowDBProto::clear_lucky() {
  lucky_ = 0;
  clear_has_lucky();
}
inline ::google::protobuf::int32 ShadowDBProto::lucky() const {
  return lucky_;
}
inline void ShadowDBProto::set_lucky(::google::protobuf::int32 value) {
  set_has_lucky();
  lucky_ = value;
}

// repeated .proto_ff.ComPair frag = 5;
inline int ShadowDBProto::frag_size() const {
  return frag_.size();
}
inline void ShadowDBProto::clear_frag() {
  frag_.Clear();
}
inline const ::proto_ff::ComPair& ShadowDBProto::frag(int index) const {
  return frag_.Get(index);
}
inline ::proto_ff::ComPair* ShadowDBProto::mutable_frag(int index) {
  return frag_.Mutable(index);
}
inline ::proto_ff::ComPair* ShadowDBProto::add_frag() {
  return frag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
ShadowDBProto::frag() const {
  return frag_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
ShadowDBProto::mutable_frag() {
  return &frag_;
}

// optional int32 curstar = 6;
inline bool ShadowDBProto::has_curstar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShadowDBProto::set_has_curstar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShadowDBProto::clear_has_curstar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShadowDBProto::clear_curstar() {
  curstar_ = 0;
  clear_has_curstar();
}
inline ::google::protobuf::int32 ShadowDBProto::curstar() const {
  return curstar_;
}
inline void ShadowDBProto::set_curstar(::google::protobuf::int32 value) {
  set_has_curstar();
  curstar_ = value;
}

// repeated .proto_ff.ComPair64 skill = 7;
inline int ShadowDBProto::skill_size() const {
  return skill_.size();
}
inline void ShadowDBProto::clear_skill() {
  skill_.Clear();
}
inline const ::proto_ff::ComPair64& ShadowDBProto::skill(int index) const {
  return skill_.Get(index);
}
inline ::proto_ff::ComPair64* ShadowDBProto::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::proto_ff::ComPair64* ShadowDBProto::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >&
ShadowDBProto::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair64 >*
ShadowDBProto::mutable_skill() {
  return &skill_;
}

// -------------------------------------------------------------------

// HaloDBProto

// repeated .proto_ff.ComPair info = 1;
inline int HaloDBProto::info_size() const {
  return info_.size();
}
inline void HaloDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ComPair& HaloDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ComPair* HaloDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ComPair* HaloDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
HaloDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
HaloDBProto::mutable_info() {
  return &info_;
}

// optional int32 curid = 2;
inline bool HaloDBProto::has_curid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HaloDBProto::set_has_curid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HaloDBProto::clear_has_curid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HaloDBProto::clear_curid() {
  curid_ = 0;
  clear_has_curid();
}
inline ::google::protobuf::int32 HaloDBProto::curid() const {
  return curid_;
}
inline void HaloDBProto::set_curid(::google::protobuf::int32 value) {
  set_has_curid();
  curid_ = value;
}

// optional int32 curstar = 3;
inline bool HaloDBProto::has_curstar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HaloDBProto::set_has_curstar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HaloDBProto::clear_has_curstar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HaloDBProto::clear_curstar() {
  curstar_ = 0;
  clear_has_curstar();
}
inline ::google::protobuf::int32 HaloDBProto::curstar() const {
  return curstar_;
}
inline void HaloDBProto::set_curstar(::google::protobuf::int32 value) {
  set_has_curstar();
  curstar_ = value;
}

// -------------------------------------------------------------------

// DragonDBData

// optional .proto_ff.ShadowDBProto shadow = 1;
inline bool DragonDBData::has_shadow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DragonDBData::set_has_shadow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DragonDBData::clear_has_shadow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DragonDBData::clear_shadow() {
  if (shadow_ != NULL) shadow_->::proto_ff::ShadowDBProto::Clear();
  clear_has_shadow();
}
inline const ::proto_ff::ShadowDBProto& DragonDBData::shadow() const {
  return shadow_ != NULL ? *shadow_ : *default_instance_->shadow_;
}
inline ::proto_ff::ShadowDBProto* DragonDBData::mutable_shadow() {
  set_has_shadow();
  if (shadow_ == NULL) shadow_ = new ::proto_ff::ShadowDBProto;
  return shadow_;
}
inline ::proto_ff::ShadowDBProto* DragonDBData::release_shadow() {
  clear_has_shadow();
  ::proto_ff::ShadowDBProto* temp = shadow_;
  shadow_ = NULL;
  return temp;
}
inline void DragonDBData::set_allocated_shadow(::proto_ff::ShadowDBProto* shadow) {
  delete shadow_;
  shadow_ = shadow;
  if (shadow) {
    set_has_shadow();
  } else {
    clear_has_shadow();
  }
}

// optional .proto_ff.HaloDBProto halo = 2;
inline bool DragonDBData::has_halo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DragonDBData::set_has_halo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DragonDBData::clear_has_halo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DragonDBData::clear_halo() {
  if (halo_ != NULL) halo_->::proto_ff::HaloDBProto::Clear();
  clear_has_halo();
}
inline const ::proto_ff::HaloDBProto& DragonDBData::halo() const {
  return halo_ != NULL ? *halo_ : *default_instance_->halo_;
}
inline ::proto_ff::HaloDBProto* DragonDBData::mutable_halo() {
  set_has_halo();
  if (halo_ == NULL) halo_ = new ::proto_ff::HaloDBProto;
  return halo_;
}
inline ::proto_ff::HaloDBProto* DragonDBData::release_halo() {
  clear_has_halo();
  ::proto_ff::HaloDBProto* temp = halo_;
  halo_ = NULL;
  return temp;
}
inline void DragonDBData::set_allocated_halo(::proto_ff::HaloDBProto* halo) {
  delete halo_;
  halo_ = halo;
  if (halo) {
    set_has_halo();
  } else {
    clear_has_halo();
  }
}

// -------------------------------------------------------------------

// RoleDBTurnData

// repeated .proto_ff.TurnEntry entrys = 1;
inline int RoleDBTurnData::entrys_size() const {
  return entrys_.size();
}
inline void RoleDBTurnData::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::TurnEntry& RoleDBTurnData::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::TurnEntry* RoleDBTurnData::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::TurnEntry* RoleDBTurnData::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnEntry >&
RoleDBTurnData::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnEntry >*
RoleDBTurnData::mutable_entrys() {
  return &entrys_;
}

// optional .proto_ff.TurnSimple simple = 2;
inline bool RoleDBTurnData::has_simple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBTurnData::set_has_simple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBTurnData::clear_has_simple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBTurnData::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::TurnSimple::Clear();
  clear_has_simple();
}
inline const ::proto_ff::TurnSimple& RoleDBTurnData::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::TurnSimple* RoleDBTurnData::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::TurnSimple;
  return simple_;
}
inline ::proto_ff::TurnSimple* RoleDBTurnData::release_simple() {
  clear_has_simple();
  ::proto_ff::TurnSimple* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void RoleDBTurnData::set_allocated_simple(::proto_ff::TurnSimple* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// repeated .proto_ff.TurnHelper helper = 3;
inline int RoleDBTurnData::helper_size() const {
  return helper_.size();
}
inline void RoleDBTurnData::clear_helper() {
  helper_.Clear();
}
inline const ::proto_ff::TurnHelper& RoleDBTurnData::helper(int index) const {
  return helper_.Get(index);
}
inline ::proto_ff::TurnHelper* RoleDBTurnData::mutable_helper(int index) {
  return helper_.Mutable(index);
}
inline ::proto_ff::TurnHelper* RoleDBTurnData::add_helper() {
  return helper_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnHelper >&
RoleDBTurnData::helper() const {
  return helper_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnHelper >*
RoleDBTurnData::mutable_helper() {
  return &helper_;
}

// optional uint64 refresh_time = 4;
inline bool RoleDBTurnData::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBTurnData::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBTurnData::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBTurnData::clear_refresh_time() {
  refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_refresh_time();
}
inline ::google::protobuf::uint64 RoleDBTurnData::refresh_time() const {
  return refresh_time_;
}
inline void RoleDBTurnData::set_refresh_time(::google::protobuf::uint64 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// repeated .proto_ff.TurnTask tasks = 5;
inline int RoleDBTurnData::tasks_size() const {
  return tasks_.size();
}
inline void RoleDBTurnData::clear_tasks() {
  tasks_.Clear();
}
inline const ::proto_ff::TurnTask& RoleDBTurnData::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::proto_ff::TurnTask* RoleDBTurnData::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::proto_ff::TurnTask* RoleDBTurnData::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnTask >&
RoleDBTurnData::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::TurnTask >*
RoleDBTurnData::mutable_tasks() {
  return &tasks_;
}

// -------------------------------------------------------------------

// GMADbData

// optional uint32 remainTime = 1;
inline bool GMADbData::has_remaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMADbData::set_has_remaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMADbData::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMADbData::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 GMADbData::remaintime() const {
  return remaintime_;
}
inline void GMADbData::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional uint32 freeTimeRemain = 2;
inline bool GMADbData::has_freetimeremain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMADbData::set_has_freetimeremain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMADbData::clear_has_freetimeremain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMADbData::clear_freetimeremain() {
  freetimeremain_ = 0u;
  clear_has_freetimeremain();
}
inline ::google::protobuf::uint32 GMADbData::freetimeremain() const {
  return freetimeremain_;
}
inline void GMADbData::set_freetimeremain(::google::protobuf::uint32 value) {
  set_has_freetimeremain();
  freetimeremain_ = value;
}

// optional uint32 freeTime = 3;
inline bool GMADbData::has_freetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMADbData::set_has_freetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMADbData::clear_has_freetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMADbData::clear_freetime() {
  freetime_ = 0u;
  clear_has_freetime();
}
inline ::google::protobuf::uint32 GMADbData::freetime() const {
  return freetime_;
}
inline void GMADbData::set_freetime(::google::protobuf::uint32 value) {
  set_has_freetime();
  freetime_ = value;
}

// optional uint32 privilege = 4;
inline bool GMADbData::has_privilege() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMADbData::set_has_privilege() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMADbData::clear_has_privilege() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMADbData::clear_privilege() {
  privilege_ = 0u;
  clear_has_privilege();
}
inline ::google::protobuf::uint32 GMADbData::privilege() const {
  return privilege_;
}
inline void GMADbData::set_privilege(::google::protobuf::uint32 value) {
  set_has_privilege();
  privilege_ = value;
}

// optional uint64 recvFreeTimePrev = 5;
inline bool GMADbData::has_recvfreetimeprev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMADbData::set_has_recvfreetimeprev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMADbData::clear_has_recvfreetimeprev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMADbData::clear_recvfreetimeprev() {
  recvfreetimeprev_ = GOOGLE_ULONGLONG(0);
  clear_has_recvfreetimeprev();
}
inline ::google::protobuf::uint64 GMADbData::recvfreetimeprev() const {
  return recvfreetimeprev_;
}
inline void GMADbData::set_recvfreetimeprev(::google::protobuf::uint64 value) {
  set_has_recvfreetimeprev();
  recvfreetimeprev_ = value;
}

// optional int64 expTotal = 6;
inline bool GMADbData::has_exptotal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMADbData::set_has_exptotal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMADbData::clear_has_exptotal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMADbData::clear_exptotal() {
  exptotal_ = GOOGLE_LONGLONG(0);
  clear_has_exptotal();
}
inline ::google::protobuf::int64 GMADbData::exptotal() const {
  return exptotal_;
}
inline void GMADbData::set_exptotal(::google::protobuf::int64 value) {
  set_has_exptotal();
  exptotal_ = value;
}

// optional int64 expAccumulate = 7;
inline bool GMADbData::has_expaccumulate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GMADbData::set_has_expaccumulate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GMADbData::clear_has_expaccumulate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GMADbData::clear_expaccumulate() {
  expaccumulate_ = GOOGLE_LONGLONG(0);
  clear_has_expaccumulate();
}
inline ::google::protobuf::int64 GMADbData::expaccumulate() const {
  return expaccumulate_;
}
inline void GMADbData::set_expaccumulate(::google::protobuf::int64 value) {
  set_has_expaccumulate();
  expaccumulate_ = value;
}

// -------------------------------------------------------------------

// SoulDBData

// optional .proto_ff.SoulEntry entry = 1;
inline bool SoulDBData::has_entry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoulDBData::set_has_entry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoulDBData::clear_has_entry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoulDBData::clear_entry() {
  if (entry_ != NULL) entry_->::proto_ff::SoulEntry::Clear();
  clear_has_entry();
}
inline const ::proto_ff::SoulEntry& SoulDBData::entry() const {
  return entry_ != NULL ? *entry_ : *default_instance_->entry_;
}
inline ::proto_ff::SoulEntry* SoulDBData::mutable_entry() {
  set_has_entry();
  if (entry_ == NULL) entry_ = new ::proto_ff::SoulEntry;
  return entry_;
}
inline ::proto_ff::SoulEntry* SoulDBData::release_entry() {
  clear_has_entry();
  ::proto_ff::SoulEntry* temp = entry_;
  entry_ = NULL;
  return temp;
}
inline void SoulDBData::set_allocated_entry(::proto_ff::SoulEntry* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    set_has_entry();
  } else {
    clear_has_entry();
  }
}

// optional .proto_ff.SoulPool pool = 2;
inline bool SoulDBData::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoulDBData::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoulDBData::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoulDBData::clear_pool() {
  if (pool_ != NULL) pool_->::proto_ff::SoulPool::Clear();
  clear_has_pool();
}
inline const ::proto_ff::SoulPool& SoulDBData::pool() const {
  return pool_ != NULL ? *pool_ : *default_instance_->pool_;
}
inline ::proto_ff::SoulPool* SoulDBData::mutable_pool() {
  set_has_pool();
  if (pool_ == NULL) pool_ = new ::proto_ff::SoulPool;
  return pool_;
}
inline ::proto_ff::SoulPool* SoulDBData::release_pool() {
  clear_has_pool();
  ::proto_ff::SoulPool* temp = pool_;
  pool_ = NULL;
  return temp;
}
inline void SoulDBData::set_allocated_pool(::proto_ff::SoulPool* pool) {
  delete pool_;
  pool_ = pool;
  if (pool) {
    set_has_pool();
  } else {
    clear_has_pool();
  }
}

// repeated .proto_ff.ComPair tasks = 3;
inline int SoulDBData::tasks_size() const {
  return tasks_.size();
}
inline void SoulDBData::clear_tasks() {
  tasks_.Clear();
}
inline const ::proto_ff::ComPair& SoulDBData::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::proto_ff::ComPair* SoulDBData::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::proto_ff::ComPair* SoulDBData::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
SoulDBData::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
SoulDBData::mutable_tasks() {
  return &tasks_;
}

// repeated .proto_ff.SoulSpirit spirits_list = 4;
inline int SoulDBData::spirits_list_size() const {
  return spirits_list_.size();
}
inline void SoulDBData::clear_spirits_list() {
  spirits_list_.Clear();
}
inline const ::proto_ff::SoulSpirit& SoulDBData::spirits_list(int index) const {
  return spirits_list_.Get(index);
}
inline ::proto_ff::SoulSpirit* SoulDBData::mutable_spirits_list(int index) {
  return spirits_list_.Mutable(index);
}
inline ::proto_ff::SoulSpirit* SoulDBData::add_spirits_list() {
  return spirits_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulSpirit >&
SoulDBData::spirits_list() const {
  return spirits_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulSpirit >*
SoulDBData::mutable_spirits_list() {
  return &spirits_list_;
}

// repeated .proto_ff.SoulBone bone_list = 5;
inline int SoulDBData::bone_list_size() const {
  return bone_list_.size();
}
inline void SoulDBData::clear_bone_list() {
  bone_list_.Clear();
}
inline const ::proto_ff::SoulBone& SoulDBData::bone_list(int index) const {
  return bone_list_.Get(index);
}
inline ::proto_ff::SoulBone* SoulDBData::mutable_bone_list(int index) {
  return bone_list_.Mutable(index);
}
inline ::proto_ff::SoulBone* SoulDBData::add_bone_list() {
  return bone_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulBone >&
SoulDBData::bone_list() const {
  return bone_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulBone >*
SoulDBData::mutable_bone_list() {
  return &bone_list_;
}

// repeated .proto_ff.SoulGuwen guwen_list = 6;
inline int SoulDBData::guwen_list_size() const {
  return guwen_list_.size();
}
inline void SoulDBData::clear_guwen_list() {
  guwen_list_.Clear();
}
inline const ::proto_ff::SoulGuwen& SoulDBData::guwen_list(int index) const {
  return guwen_list_.Get(index);
}
inline ::proto_ff::SoulGuwen* SoulDBData::mutable_guwen_list(int index) {
  return guwen_list_.Mutable(index);
}
inline ::proto_ff::SoulGuwen* SoulDBData::add_guwen_list() {
  return guwen_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulGuwen >&
SoulDBData::guwen_list() const {
  return guwen_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SoulGuwen >*
SoulDBData::mutable_guwen_list() {
  return &guwen_list_;
}

// -------------------------------------------------------------------

// MoFaDBData

// repeated .proto_ff.MoFaEquipInfo data = 1;
inline int MoFaDBData::data_size() const {
  return data_.size();
}
inline void MoFaDBData::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::MoFaEquipInfo& MoFaDBData::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::MoFaEquipInfo* MoFaDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::MoFaEquipInfo* MoFaDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MoFaEquipInfo >&
MoFaDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MoFaEquipInfo >*
MoFaDBData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// RuneDBData

// repeated .proto_ff.RuneEntry entrys = 1;
inline int RuneDBData::entrys_size() const {
  return entrys_.size();
}
inline void RuneDBData::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::RuneEntry& RuneDBData::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::RuneEntry* RuneDBData::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::RuneEntry* RuneDBData::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RuneEntry >&
RuneDBData::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RuneEntry >*
RuneDBData::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// RoleDBData

// required uint64 cid = 1;
inline bool RoleDBData::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBData::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBData::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleDBData::cid() const {
  return cid_;
}
inline void RoleDBData::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 zid = 2;
inline bool RoleDBData::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBData::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBData::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBData::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleDBData::zid() const {
  return zid_;
}
inline void RoleDBData::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 uid = 3;
inline bool RoleDBData::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDBData::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDBData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDBData::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleDBData::uid() const {
  return uid_;
}
inline void RoleDBData::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.RoleDBBaseData base = 4;
inline bool RoleDBData::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBData::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBData::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBData::clear_base() {
  if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
  clear_has_base();
}
inline const ::proto_ff::RoleDBBaseData& RoleDBData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::RoleDBBaseData* RoleDBData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::RoleDBBaseData;
  return base_;
}
inline ::proto_ff::RoleDBBaseData* RoleDBData::release_base() {
  clear_has_base();
  ::proto_ff::RoleDBBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_base(::proto_ff::RoleDBBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .proto_ff.RoleDBBagData bag = 5;
inline bool RoleDBData::has_bag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleDBData::set_has_bag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleDBData::clear_has_bag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleDBData::clear_bag() {
  if (bag_ != NULL) bag_->::proto_ff::RoleDBBagData::Clear();
  clear_has_bag();
}
inline const ::proto_ff::RoleDBBagData& RoleDBData::bag() const {
  return bag_ != NULL ? *bag_ : *default_instance_->bag_;
}
inline ::proto_ff::RoleDBBagData* RoleDBData::mutable_bag() {
  set_has_bag();
  if (bag_ == NULL) bag_ = new ::proto_ff::RoleDBBagData;
  return bag_;
}
inline ::proto_ff::RoleDBBagData* RoleDBData::release_bag() {
  clear_has_bag();
  ::proto_ff::RoleDBBagData* temp = bag_;
  bag_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_bag(::proto_ff::RoleDBBagData* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    set_has_bag();
  } else {
    clear_has_bag();
  }
}

// optional .proto_ff.RoleDBEquipData equip = 6;
inline bool RoleDBData::has_equip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleDBData::set_has_equip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleDBData::clear_has_equip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleDBData::clear_equip() {
  if (equip_ != NULL) equip_->::proto_ff::RoleDBEquipData::Clear();
  clear_has_equip();
}
inline const ::proto_ff::RoleDBEquipData& RoleDBData::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::proto_ff::RoleDBEquipData* RoleDBData::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::proto_ff::RoleDBEquipData;
  return equip_;
}
inline ::proto_ff::RoleDBEquipData* RoleDBData::release_equip() {
  clear_has_equip();
  ::proto_ff::RoleDBEquipData* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_equip(::proto_ff::RoleDBEquipData* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// optional .proto_ff.CharacterDBTaskData task = 7;
inline bool RoleDBData::has_task() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleDBData::set_has_task() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleDBData::clear_has_task() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleDBData::clear_task() {
  if (task_ != NULL) task_->::proto_ff::CharacterDBTaskData::Clear();
  clear_has_task();
}
inline const ::proto_ff::CharacterDBTaskData& RoleDBData::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::proto_ff::CharacterDBTaskData* RoleDBData::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::proto_ff::CharacterDBTaskData;
  return task_;
}
inline ::proto_ff::CharacterDBTaskData* RoleDBData::release_task() {
  clear_has_task();
  ::proto_ff::CharacterDBTaskData* temp = task_;
  task_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_task(::proto_ff::CharacterDBTaskData* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
inline bool RoleDBData::has_unlockinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleDBData::set_has_unlockinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleDBData::clear_has_unlockinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleDBData::clear_unlockinfo() {
  if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
  clear_has_unlockinfo();
}
inline const ::proto_ff::FunctionUnlockInfo& RoleDBData::unlockinfo() const {
  return unlockinfo_ != NULL ? *unlockinfo_ : *default_instance_->unlockinfo_;
}
inline ::proto_ff::FunctionUnlockInfo* RoleDBData::mutable_unlockinfo() {
  set_has_unlockinfo();
  if (unlockinfo_ == NULL) unlockinfo_ = new ::proto_ff::FunctionUnlockInfo;
  return unlockinfo_;
}
inline ::proto_ff::FunctionUnlockInfo* RoleDBData::release_unlockinfo() {
  clear_has_unlockinfo();
  ::proto_ff::FunctionUnlockInfo* temp = unlockinfo_;
  unlockinfo_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_unlockinfo(::proto_ff::FunctionUnlockInfo* unlockinfo) {
  delete unlockinfo_;
  unlockinfo_ = unlockinfo;
  if (unlockinfo) {
    set_has_unlockinfo();
  } else {
    clear_has_unlockinfo();
  }
}

// optional .proto_ff.GrowDBData grow = 9;
inline bool RoleDBData::has_grow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleDBData::set_has_grow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleDBData::clear_has_grow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleDBData::clear_grow() {
  if (grow_ != NULL) grow_->::proto_ff::GrowDBData::Clear();
  clear_has_grow();
}
inline const ::proto_ff::GrowDBData& RoleDBData::grow() const {
  return grow_ != NULL ? *grow_ : *default_instance_->grow_;
}
inline ::proto_ff::GrowDBData* RoleDBData::mutable_grow() {
  set_has_grow();
  if (grow_ == NULL) grow_ = new ::proto_ff::GrowDBData;
  return grow_;
}
inline ::proto_ff::GrowDBData* RoleDBData::release_grow() {
  clear_has_grow();
  ::proto_ff::GrowDBData* temp = grow_;
  grow_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_grow(::proto_ff::GrowDBData* grow) {
  delete grow_;
  grow_ = grow;
  if (grow) {
    set_has_grow();
  } else {
    clear_has_grow();
  }
}

// optional .proto_ff.MiniDBData mini = 10;
inline bool RoleDBData::has_mini() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleDBData::set_has_mini() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleDBData::clear_has_mini() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleDBData::clear_mini() {
  if (mini_ != NULL) mini_->::proto_ff::MiniDBData::Clear();
  clear_has_mini();
}
inline const ::proto_ff::MiniDBData& RoleDBData::mini() const {
  return mini_ != NULL ? *mini_ : *default_instance_->mini_;
}
inline ::proto_ff::MiniDBData* RoleDBData::mutable_mini() {
  set_has_mini();
  if (mini_ == NULL) mini_ = new ::proto_ff::MiniDBData;
  return mini_;
}
inline ::proto_ff::MiniDBData* RoleDBData::release_mini() {
  clear_has_mini();
  ::proto_ff::MiniDBData* temp = mini_;
  mini_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_mini(::proto_ff::MiniDBData* mini) {
  delete mini_;
  mini_ = mini;
  if (mini) {
    set_has_mini();
  } else {
    clear_has_mini();
  }
}

// optional .proto_ff.FacadeDBData facade = 11;
inline bool RoleDBData::has_facade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleDBData::set_has_facade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleDBData::clear_has_facade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleDBData::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::FacadeDBData::Clear();
  clear_has_facade();
}
inline const ::proto_ff::FacadeDBData& RoleDBData::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::FacadeDBData* RoleDBData::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::FacadeDBData;
  return facade_;
}
inline ::proto_ff::FacadeDBData* RoleDBData::release_facade() {
  clear_has_facade();
  ::proto_ff::FacadeDBData* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_facade(::proto_ff::FacadeDBData* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// optional .proto_ff.SkillDBData skill = 12;
inline bool RoleDBData::has_skill() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleDBData::set_has_skill() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleDBData::clear_has_skill() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleDBData::clear_skill() {
  if (skill_ != NULL) skill_->::proto_ff::SkillDBData::Clear();
  clear_has_skill();
}
inline const ::proto_ff::SkillDBData& RoleDBData::skill() const {
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::proto_ff::SkillDBData* RoleDBData::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::proto_ff::SkillDBData;
  return skill_;
}
inline ::proto_ff::SkillDBData* RoleDBData::release_skill() {
  clear_has_skill();
  ::proto_ff::SkillDBData* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_skill(::proto_ff::SkillDBData* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
}

// optional .proto_ff.MiniActivityDBData mini_activity = 13;
inline bool RoleDBData::has_mini_activity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleDBData::set_has_mini_activity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleDBData::clear_has_mini_activity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleDBData::clear_mini_activity() {
  if (mini_activity_ != NULL) mini_activity_->::proto_ff::MiniActivityDBData::Clear();
  clear_has_mini_activity();
}
inline const ::proto_ff::MiniActivityDBData& RoleDBData::mini_activity() const {
  return mini_activity_ != NULL ? *mini_activity_ : *default_instance_->mini_activity_;
}
inline ::proto_ff::MiniActivityDBData* RoleDBData::mutable_mini_activity() {
  set_has_mini_activity();
  if (mini_activity_ == NULL) mini_activity_ = new ::proto_ff::MiniActivityDBData;
  return mini_activity_;
}
inline ::proto_ff::MiniActivityDBData* RoleDBData::release_mini_activity() {
  clear_has_mini_activity();
  ::proto_ff::MiniActivityDBData* temp = mini_activity_;
  mini_activity_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_mini_activity(::proto_ff::MiniActivityDBData* mini_activity) {
  delete mini_activity_;
  mini_activity_ = mini_activity;
  if (mini_activity) {
    set_has_mini_activity();
  } else {
    clear_has_mini_activity();
  }
}

// optional .proto_ff.DupDBData dup = 14;
inline bool RoleDBData::has_dup() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleDBData::set_has_dup() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleDBData::clear_has_dup() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleDBData::clear_dup() {
  if (dup_ != NULL) dup_->::proto_ff::DupDBData::Clear();
  clear_has_dup();
}
inline const ::proto_ff::DupDBData& RoleDBData::dup() const {
  return dup_ != NULL ? *dup_ : *default_instance_->dup_;
}
inline ::proto_ff::DupDBData* RoleDBData::mutable_dup() {
  set_has_dup();
  if (dup_ == NULL) dup_ = new ::proto_ff::DupDBData;
  return dup_;
}
inline ::proto_ff::DupDBData* RoleDBData::release_dup() {
  clear_has_dup();
  ::proto_ff::DupDBData* temp = dup_;
  dup_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_dup(::proto_ff::DupDBData* dup) {
  delete dup_;
  dup_ = dup;
  if (dup) {
    set_has_dup();
  } else {
    clear_has_dup();
  }
}

// optional .proto_ff.BuffDBData buff = 15;
inline bool RoleDBData::has_buff() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleDBData::set_has_buff() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleDBData::clear_has_buff() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleDBData::clear_buff() {
  if (buff_ != NULL) buff_->::proto_ff::BuffDBData::Clear();
  clear_has_buff();
}
inline const ::proto_ff::BuffDBData& RoleDBData::buff() const {
  return buff_ != NULL ? *buff_ : *default_instance_->buff_;
}
inline ::proto_ff::BuffDBData* RoleDBData::mutable_buff() {
  set_has_buff();
  if (buff_ == NULL) buff_ = new ::proto_ff::BuffDBData;
  return buff_;
}
inline ::proto_ff::BuffDBData* RoleDBData::release_buff() {
  clear_has_buff();
  ::proto_ff::BuffDBData* temp = buff_;
  buff_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_buff(::proto_ff::BuffDBData* buff) {
  delete buff_;
  buff_ = buff;
  if (buff) {
    set_has_buff();
  } else {
    clear_has_buff();
  }
}

// optional .proto_ff.BossDBData boss = 16;
inline bool RoleDBData::has_boss() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleDBData::set_has_boss() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleDBData::clear_has_boss() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleDBData::clear_boss() {
  if (boss_ != NULL) boss_->::proto_ff::BossDBData::Clear();
  clear_has_boss();
}
inline const ::proto_ff::BossDBData& RoleDBData::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::proto_ff::BossDBData* RoleDBData::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::proto_ff::BossDBData;
  return boss_;
}
inline ::proto_ff::BossDBData* RoleDBData::release_boss() {
  clear_has_boss();
  ::proto_ff::BossDBData* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_boss(::proto_ff::BossDBData* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
}

// optional .proto_ff.VipDBData vip = 17;
inline bool RoleDBData::has_vip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleDBData::set_has_vip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleDBData::clear_has_vip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleDBData::clear_vip() {
  if (vip_ != NULL) vip_->::proto_ff::VipDBData::Clear();
  clear_has_vip();
}
inline const ::proto_ff::VipDBData& RoleDBData::vip() const {
  return vip_ != NULL ? *vip_ : *default_instance_->vip_;
}
inline ::proto_ff::VipDBData* RoleDBData::mutable_vip() {
  set_has_vip();
  if (vip_ == NULL) vip_ = new ::proto_ff::VipDBData;
  return vip_;
}
inline ::proto_ff::VipDBData* RoleDBData::release_vip() {
  clear_has_vip();
  ::proto_ff::VipDBData* temp = vip_;
  vip_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_vip(::proto_ff::VipDBData* vip) {
  delete vip_;
  vip_ = vip;
  if (vip) {
    set_has_vip();
  } else {
    clear_has_vip();
  }
}

// optional .proto_ff.AttrDBData attr = 18;
inline bool RoleDBData::has_attr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoleDBData::set_has_attr() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoleDBData::clear_has_attr() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoleDBData::clear_attr() {
  if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
  clear_has_attr();
}
inline const ::proto_ff::AttrDBData& RoleDBData::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::proto_ff::AttrDBData* RoleDBData::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::proto_ff::AttrDBData;
  return attr_;
}
inline ::proto_ff::AttrDBData* RoleDBData::release_attr() {
  clear_has_attr();
  ::proto_ff::AttrDBData* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_attr(::proto_ff::AttrDBData* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// optional .proto_ff.MountDataInfo mount = 19;
inline bool RoleDBData::has_mount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoleDBData::set_has_mount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoleDBData::clear_has_mount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoleDBData::clear_mount() {
  if (mount_ != NULL) mount_->::proto_ff::MountDataInfo::Clear();
  clear_has_mount();
}
inline const ::proto_ff::MountDataInfo& RoleDBData::mount() const {
  return mount_ != NULL ? *mount_ : *default_instance_->mount_;
}
inline ::proto_ff::MountDataInfo* RoleDBData::mutable_mount() {
  set_has_mount();
  if (mount_ == NULL) mount_ = new ::proto_ff::MountDataInfo;
  return mount_;
}
inline ::proto_ff::MountDataInfo* RoleDBData::release_mount() {
  clear_has_mount();
  ::proto_ff::MountDataInfo* temp = mount_;
  mount_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_mount(::proto_ff::MountDataInfo* mount) {
  delete mount_;
  mount_ = mount;
  if (mount) {
    set_has_mount();
  } else {
    clear_has_mount();
  }
}

// optional .proto_ff.DeityDataInfo deity = 20;
inline bool RoleDBData::has_deity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoleDBData::set_has_deity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoleDBData::clear_has_deity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoleDBData::clear_deity() {
  if (deity_ != NULL) deity_->::proto_ff::DeityDataInfo::Clear();
  clear_has_deity();
}
inline const ::proto_ff::DeityDataInfo& RoleDBData::deity() const {
  return deity_ != NULL ? *deity_ : *default_instance_->deity_;
}
inline ::proto_ff::DeityDataInfo* RoleDBData::mutable_deity() {
  set_has_deity();
  if (deity_ == NULL) deity_ = new ::proto_ff::DeityDataInfo;
  return deity_;
}
inline ::proto_ff::DeityDataInfo* RoleDBData::release_deity() {
  clear_has_deity();
  ::proto_ff::DeityDataInfo* temp = deity_;
  deity_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_deity(::proto_ff::DeityDataInfo* deity) {
  delete deity_;
  deity_ = deity;
  if (deity) {
    set_has_deity();
  } else {
    clear_has_deity();
  }
}

// optional .proto_ff.PetDBData pet = 21;
inline bool RoleDBData::has_pet() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoleDBData::set_has_pet() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoleDBData::clear_has_pet() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoleDBData::clear_pet() {
  if (pet_ != NULL) pet_->::proto_ff::PetDBData::Clear();
  clear_has_pet();
}
inline const ::proto_ff::PetDBData& RoleDBData::pet() const {
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::proto_ff::PetDBData* RoleDBData::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::proto_ff::PetDBData;
  return pet_;
}
inline ::proto_ff::PetDBData* RoleDBData::release_pet() {
  clear_has_pet();
  ::proto_ff::PetDBData* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_pet(::proto_ff::PetDBData* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
}

// optional .proto_ff.MallDBData mall = 22;
inline bool RoleDBData::has_mall() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoleDBData::set_has_mall() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoleDBData::clear_has_mall() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoleDBData::clear_mall() {
  if (mall_ != NULL) mall_->::proto_ff::MallDBData::Clear();
  clear_has_mall();
}
inline const ::proto_ff::MallDBData& RoleDBData::mall() const {
  return mall_ != NULL ? *mall_ : *default_instance_->mall_;
}
inline ::proto_ff::MallDBData* RoleDBData::mutable_mall() {
  set_has_mall();
  if (mall_ == NULL) mall_ = new ::proto_ff::MallDBData;
  return mall_;
}
inline ::proto_ff::MallDBData* RoleDBData::release_mall() {
  clear_has_mall();
  ::proto_ff::MallDBData* temp = mall_;
  mall_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_mall(::proto_ff::MallDBData* mall) {
  delete mall_;
  mall_ = mall;
  if (mall) {
    set_has_mall();
  } else {
    clear_has_mall();
  }
}

// optional .proto_ff.ConvoyData convoy = 23;
inline bool RoleDBData::has_convoy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoleDBData::set_has_convoy() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RoleDBData::clear_has_convoy() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RoleDBData::clear_convoy() {
  if (convoy_ != NULL) convoy_->::proto_ff::ConvoyData::Clear();
  clear_has_convoy();
}
inline const ::proto_ff::ConvoyData& RoleDBData::convoy() const {
  return convoy_ != NULL ? *convoy_ : *default_instance_->convoy_;
}
inline ::proto_ff::ConvoyData* RoleDBData::mutable_convoy() {
  set_has_convoy();
  if (convoy_ == NULL) convoy_ = new ::proto_ff::ConvoyData;
  return convoy_;
}
inline ::proto_ff::ConvoyData* RoleDBData::release_convoy() {
  clear_has_convoy();
  ::proto_ff::ConvoyData* temp = convoy_;
  convoy_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_convoy(::proto_ff::ConvoyData* convoy) {
  delete convoy_;
  convoy_ = convoy;
  if (convoy) {
    set_has_convoy();
  } else {
    clear_has_convoy();
  }
}

// optional .proto_ff.ArmorDBData armor = 24;
inline bool RoleDBData::has_armor() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoleDBData::set_has_armor() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoleDBData::clear_has_armor() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoleDBData::clear_armor() {
  if (armor_ != NULL) armor_->::proto_ff::ArmorDBData::Clear();
  clear_has_armor();
}
inline const ::proto_ff::ArmorDBData& RoleDBData::armor() const {
  return armor_ != NULL ? *armor_ : *default_instance_->armor_;
}
inline ::proto_ff::ArmorDBData* RoleDBData::mutable_armor() {
  set_has_armor();
  if (armor_ == NULL) armor_ = new ::proto_ff::ArmorDBData;
  return armor_;
}
inline ::proto_ff::ArmorDBData* RoleDBData::release_armor() {
  clear_has_armor();
  ::proto_ff::ArmorDBData* temp = armor_;
  armor_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_armor(::proto_ff::ArmorDBData* armor) {
  delete armor_;
  armor_ = armor;
  if (armor) {
    set_has_armor();
  } else {
    clear_has_armor();
  }
}

// optional .proto_ff.AssistDBData assist = 25;
inline bool RoleDBData::has_assist() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RoleDBData::set_has_assist() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RoleDBData::clear_has_assist() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RoleDBData::clear_assist() {
  if (assist_ != NULL) assist_->::proto_ff::AssistDBData::Clear();
  clear_has_assist();
}
inline const ::proto_ff::AssistDBData& RoleDBData::assist() const {
  return assist_ != NULL ? *assist_ : *default_instance_->assist_;
}
inline ::proto_ff::AssistDBData* RoleDBData::mutable_assist() {
  set_has_assist();
  if (assist_ == NULL) assist_ = new ::proto_ff::AssistDBData;
  return assist_;
}
inline ::proto_ff::AssistDBData* RoleDBData::release_assist() {
  clear_has_assist();
  ::proto_ff::AssistDBData* temp = assist_;
  assist_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_assist(::proto_ff::AssistDBData* assist) {
  delete assist_;
  assist_ = assist;
  if (assist) {
    set_has_assist();
  } else {
    clear_has_assist();
  }
}

// optional .proto_ff.TitleDBData title = 26;
inline bool RoleDBData::has_title() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoleDBData::set_has_title() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RoleDBData::clear_has_title() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RoleDBData::clear_title() {
  if (title_ != NULL) title_->::proto_ff::TitleDBData::Clear();
  clear_has_title();
}
inline const ::proto_ff::TitleDBData& RoleDBData::title() const {
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
inline ::proto_ff::TitleDBData* RoleDBData::mutable_title() {
  set_has_title();
  if (title_ == NULL) title_ = new ::proto_ff::TitleDBData;
  return title_;
}
inline ::proto_ff::TitleDBData* RoleDBData::release_title() {
  clear_has_title();
  ::proto_ff::TitleDBData* temp = title_;
  title_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_title(::proto_ff::TitleDBData* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
}

// optional .proto_ff.GodEvilDBData godevil = 27;
inline bool RoleDBData::has_godevil() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RoleDBData::set_has_godevil() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RoleDBData::clear_has_godevil() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RoleDBData::clear_godevil() {
  if (godevil_ != NULL) godevil_->::proto_ff::GodEvilDBData::Clear();
  clear_has_godevil();
}
inline const ::proto_ff::GodEvilDBData& RoleDBData::godevil() const {
  return godevil_ != NULL ? *godevil_ : *default_instance_->godevil_;
}
inline ::proto_ff::GodEvilDBData* RoleDBData::mutable_godevil() {
  set_has_godevil();
  if (godevil_ == NULL) godevil_ = new ::proto_ff::GodEvilDBData;
  return godevil_;
}
inline ::proto_ff::GodEvilDBData* RoleDBData::release_godevil() {
  clear_has_godevil();
  ::proto_ff::GodEvilDBData* temp = godevil_;
  godevil_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_godevil(::proto_ff::GodEvilDBData* godevil) {
  delete godevil_;
  godevil_ = godevil;
  if (godevil) {
    set_has_godevil();
  } else {
    clear_has_godevil();
  }
}

// optional .proto_ff.OccupationMissionData occupatoin = 28;
inline bool RoleDBData::has_occupatoin() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RoleDBData::set_has_occupatoin() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RoleDBData::clear_has_occupatoin() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RoleDBData::clear_occupatoin() {
  if (occupatoin_ != NULL) occupatoin_->::proto_ff::OccupationMissionData::Clear();
  clear_has_occupatoin();
}
inline const ::proto_ff::OccupationMissionData& RoleDBData::occupatoin() const {
  return occupatoin_ != NULL ? *occupatoin_ : *default_instance_->occupatoin_;
}
inline ::proto_ff::OccupationMissionData* RoleDBData::mutable_occupatoin() {
  set_has_occupatoin();
  if (occupatoin_ == NULL) occupatoin_ = new ::proto_ff::OccupationMissionData;
  return occupatoin_;
}
inline ::proto_ff::OccupationMissionData* RoleDBData::release_occupatoin() {
  clear_has_occupatoin();
  ::proto_ff::OccupationMissionData* temp = occupatoin_;
  occupatoin_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_occupatoin(::proto_ff::OccupationMissionData* occupatoin) {
  delete occupatoin_;
  occupatoin_ = occupatoin;
  if (occupatoin) {
    set_has_occupatoin();
  } else {
    clear_has_occupatoin();
  }
}

// optional .proto_ff.PayDBData pay = 29;
inline bool RoleDBData::has_pay() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RoleDBData::set_has_pay() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RoleDBData::clear_has_pay() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RoleDBData::clear_pay() {
  if (pay_ != NULL) pay_->::proto_ff::PayDBData::Clear();
  clear_has_pay();
}
inline const ::proto_ff::PayDBData& RoleDBData::pay() const {
  return pay_ != NULL ? *pay_ : *default_instance_->pay_;
}
inline ::proto_ff::PayDBData* RoleDBData::mutable_pay() {
  set_has_pay();
  if (pay_ == NULL) pay_ = new ::proto_ff::PayDBData;
  return pay_;
}
inline ::proto_ff::PayDBData* RoleDBData::release_pay() {
  clear_has_pay();
  ::proto_ff::PayDBData* temp = pay_;
  pay_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_pay(::proto_ff::PayDBData* pay) {
  delete pay_;
  pay_ = pay;
  if (pay) {
    set_has_pay();
  } else {
    clear_has_pay();
  }
}

// optional .proto_ff.RoleFactionDBData role_faction = 30;
inline bool RoleDBData::has_role_faction() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RoleDBData::set_has_role_faction() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RoleDBData::clear_has_role_faction() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RoleDBData::clear_role_faction() {
  if (role_faction_ != NULL) role_faction_->::proto_ff::RoleFactionDBData::Clear();
  clear_has_role_faction();
}
inline const ::proto_ff::RoleFactionDBData& RoleDBData::role_faction() const {
  return role_faction_ != NULL ? *role_faction_ : *default_instance_->role_faction_;
}
inline ::proto_ff::RoleFactionDBData* RoleDBData::mutable_role_faction() {
  set_has_role_faction();
  if (role_faction_ == NULL) role_faction_ = new ::proto_ff::RoleFactionDBData;
  return role_faction_;
}
inline ::proto_ff::RoleFactionDBData* RoleDBData::release_role_faction() {
  clear_has_role_faction();
  ::proto_ff::RoleFactionDBData* temp = role_faction_;
  role_faction_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_role_faction(::proto_ff::RoleFactionDBData* role_faction) {
  delete role_faction_;
  role_faction_ = role_faction;
  if (role_faction) {
    set_has_role_faction();
  } else {
    clear_has_role_faction();
  }
}

// optional .proto_ff.RoleBestEQDBData best_equip = 31;
inline bool RoleDBData::has_best_equip() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RoleDBData::set_has_best_equip() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RoleDBData::clear_has_best_equip() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RoleDBData::clear_best_equip() {
  if (best_equip_ != NULL) best_equip_->::proto_ff::RoleBestEQDBData::Clear();
  clear_has_best_equip();
}
inline const ::proto_ff::RoleBestEQDBData& RoleDBData::best_equip() const {
  return best_equip_ != NULL ? *best_equip_ : *default_instance_->best_equip_;
}
inline ::proto_ff::RoleBestEQDBData* RoleDBData::mutable_best_equip() {
  set_has_best_equip();
  if (best_equip_ == NULL) best_equip_ = new ::proto_ff::RoleBestEQDBData;
  return best_equip_;
}
inline ::proto_ff::RoleBestEQDBData* RoleDBData::release_best_equip() {
  clear_has_best_equip();
  ::proto_ff::RoleBestEQDBData* temp = best_equip_;
  best_equip_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_best_equip(::proto_ff::RoleBestEQDBData* best_equip) {
  delete best_equip_;
  best_equip_ = best_equip;
  if (best_equip) {
    set_has_best_equip();
  } else {
    clear_has_best_equip();
  }
}

// optional .proto_ff.AchievementData achievement = 32;
inline bool RoleDBData::has_achievement() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RoleDBData::set_has_achievement() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RoleDBData::clear_has_achievement() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RoleDBData::clear_achievement() {
  if (achievement_ != NULL) achievement_->::proto_ff::AchievementData::Clear();
  clear_has_achievement();
}
inline const ::proto_ff::AchievementData& RoleDBData::achievement() const {
  return achievement_ != NULL ? *achievement_ : *default_instance_->achievement_;
}
inline ::proto_ff::AchievementData* RoleDBData::mutable_achievement() {
  set_has_achievement();
  if (achievement_ == NULL) achievement_ = new ::proto_ff::AchievementData;
  return achievement_;
}
inline ::proto_ff::AchievementData* RoleDBData::release_achievement() {
  clear_has_achievement();
  ::proto_ff::AchievementData* temp = achievement_;
  achievement_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_achievement(::proto_ff::AchievementData* achievement) {
  delete achievement_;
  achievement_ = achievement;
  if (achievement) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
}

// optional .proto_ff.AncientDBData ancient = 33;
inline bool RoleDBData::has_ancient() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RoleDBData::set_has_ancient() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RoleDBData::clear_has_ancient() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RoleDBData::clear_ancient() {
  if (ancient_ != NULL) ancient_->::proto_ff::AncientDBData::Clear();
  clear_has_ancient();
}
inline const ::proto_ff::AncientDBData& RoleDBData::ancient() const {
  return ancient_ != NULL ? *ancient_ : *default_instance_->ancient_;
}
inline ::proto_ff::AncientDBData* RoleDBData::mutable_ancient() {
  set_has_ancient();
  if (ancient_ == NULL) ancient_ = new ::proto_ff::AncientDBData;
  return ancient_;
}
inline ::proto_ff::AncientDBData* RoleDBData::release_ancient() {
  clear_has_ancient();
  ::proto_ff::AncientDBData* temp = ancient_;
  ancient_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_ancient(::proto_ff::AncientDBData* ancient) {
  delete ancient_;
  ancient_ = ancient;
  if (ancient) {
    set_has_ancient();
  } else {
    clear_has_ancient();
  }
}

// optional .proto_ff.RolePvpDBData pvp = 34;
inline bool RoleDBData::has_pvp() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RoleDBData::set_has_pvp() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RoleDBData::clear_has_pvp() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RoleDBData::clear_pvp() {
  if (pvp_ != NULL) pvp_->::proto_ff::RolePvpDBData::Clear();
  clear_has_pvp();
}
inline const ::proto_ff::RolePvpDBData& RoleDBData::pvp() const {
  return pvp_ != NULL ? *pvp_ : *default_instance_->pvp_;
}
inline ::proto_ff::RolePvpDBData* RoleDBData::mutable_pvp() {
  set_has_pvp();
  if (pvp_ == NULL) pvp_ = new ::proto_ff::RolePvpDBData;
  return pvp_;
}
inline ::proto_ff::RolePvpDBData* RoleDBData::release_pvp() {
  clear_has_pvp();
  ::proto_ff::RolePvpDBData* temp = pvp_;
  pvp_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_pvp(::proto_ff::RolePvpDBData* pvp) {
  delete pvp_;
  pvp_ = pvp;
  if (pvp) {
    set_has_pvp();
  } else {
    clear_has_pvp();
  }
}

// optional .proto_ff.PracticeTrueDBData ptdata = 35;
inline bool RoleDBData::has_ptdata() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RoleDBData::set_has_ptdata() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RoleDBData::clear_has_ptdata() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RoleDBData::clear_ptdata() {
  if (ptdata_ != NULL) ptdata_->::proto_ff::PracticeTrueDBData::Clear();
  clear_has_ptdata();
}
inline const ::proto_ff::PracticeTrueDBData& RoleDBData::ptdata() const {
  return ptdata_ != NULL ? *ptdata_ : *default_instance_->ptdata_;
}
inline ::proto_ff::PracticeTrueDBData* RoleDBData::mutable_ptdata() {
  set_has_ptdata();
  if (ptdata_ == NULL) ptdata_ = new ::proto_ff::PracticeTrueDBData;
  return ptdata_;
}
inline ::proto_ff::PracticeTrueDBData* RoleDBData::release_ptdata() {
  clear_has_ptdata();
  ::proto_ff::PracticeTrueDBData* temp = ptdata_;
  ptdata_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_ptdata(::proto_ff::PracticeTrueDBData* ptdata) {
  delete ptdata_;
  ptdata_ = ptdata;
  if (ptdata) {
    set_has_ptdata();
  } else {
    clear_has_ptdata();
  }
}

// optional .proto_ff.RoleMarryDBData role_marry = 36;
inline bool RoleDBData::has_role_marry() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RoleDBData::set_has_role_marry() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RoleDBData::clear_has_role_marry() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RoleDBData::clear_role_marry() {
  if (role_marry_ != NULL) role_marry_->::proto_ff::RoleMarryDBData::Clear();
  clear_has_role_marry();
}
inline const ::proto_ff::RoleMarryDBData& RoleDBData::role_marry() const {
  return role_marry_ != NULL ? *role_marry_ : *default_instance_->role_marry_;
}
inline ::proto_ff::RoleMarryDBData* RoleDBData::mutable_role_marry() {
  set_has_role_marry();
  if (role_marry_ == NULL) role_marry_ = new ::proto_ff::RoleMarryDBData;
  return role_marry_;
}
inline ::proto_ff::RoleMarryDBData* RoleDBData::release_role_marry() {
  clear_has_role_marry();
  ::proto_ff::RoleMarryDBData* temp = role_marry_;
  role_marry_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_role_marry(::proto_ff::RoleMarryDBData* role_marry) {
  delete role_marry_;
  role_marry_ = role_marry;
  if (role_marry) {
    set_has_role_marry();
  } else {
    clear_has_role_marry();
  }
}

// optional .proto_ff.EncylopediaDBData encylopeddia = 37;
inline bool RoleDBData::has_encylopeddia() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RoleDBData::set_has_encylopeddia() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RoleDBData::clear_has_encylopeddia() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RoleDBData::clear_encylopeddia() {
  if (encylopeddia_ != NULL) encylopeddia_->::proto_ff::EncylopediaDBData::Clear();
  clear_has_encylopeddia();
}
inline const ::proto_ff::EncylopediaDBData& RoleDBData::encylopeddia() const {
  return encylopeddia_ != NULL ? *encylopeddia_ : *default_instance_->encylopeddia_;
}
inline ::proto_ff::EncylopediaDBData* RoleDBData::mutable_encylopeddia() {
  set_has_encylopeddia();
  if (encylopeddia_ == NULL) encylopeddia_ = new ::proto_ff::EncylopediaDBData;
  return encylopeddia_;
}
inline ::proto_ff::EncylopediaDBData* RoleDBData::release_encylopeddia() {
  clear_has_encylopeddia();
  ::proto_ff::EncylopediaDBData* temp = encylopeddia_;
  encylopeddia_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_encylopeddia(::proto_ff::EncylopediaDBData* encylopeddia) {
  delete encylopeddia_;
  encylopeddia_ = encylopeddia;
  if (encylopeddia) {
    set_has_encylopeddia();
  } else {
    clear_has_encylopeddia();
  }
}

// optional .proto_ff.GVBPData gvb_pdata = 38;
inline bool RoleDBData::has_gvb_pdata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RoleDBData::set_has_gvb_pdata() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RoleDBData::clear_has_gvb_pdata() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RoleDBData::clear_gvb_pdata() {
  if (gvb_pdata_ != NULL) gvb_pdata_->::proto_ff::GVBPData::Clear();
  clear_has_gvb_pdata();
}
inline const ::proto_ff::GVBPData& RoleDBData::gvb_pdata() const {
  return gvb_pdata_ != NULL ? *gvb_pdata_ : *default_instance_->gvb_pdata_;
}
inline ::proto_ff::GVBPData* RoleDBData::mutable_gvb_pdata() {
  set_has_gvb_pdata();
  if (gvb_pdata_ == NULL) gvb_pdata_ = new ::proto_ff::GVBPData;
  return gvb_pdata_;
}
inline ::proto_ff::GVBPData* RoleDBData::release_gvb_pdata() {
  clear_has_gvb_pdata();
  ::proto_ff::GVBPData* temp = gvb_pdata_;
  gvb_pdata_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_gvb_pdata(::proto_ff::GVBPData* gvb_pdata) {
  delete gvb_pdata_;
  gvb_pdata_ = gvb_pdata;
  if (gvb_pdata) {
    set_has_gvb_pdata();
  } else {
    clear_has_gvb_pdata();
  }
}

// optional .proto_ff.PSDatas psdatas = 39;
inline bool RoleDBData::has_psdatas() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void RoleDBData::set_has_psdatas() {
  _has_bits_[1] |= 0x00000040u;
}
inline void RoleDBData::clear_has_psdatas() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void RoleDBData::clear_psdatas() {
  if (psdatas_ != NULL) psdatas_->::proto_ff::PSDatas::Clear();
  clear_has_psdatas();
}
inline const ::proto_ff::PSDatas& RoleDBData::psdatas() const {
  return psdatas_ != NULL ? *psdatas_ : *default_instance_->psdatas_;
}
inline ::proto_ff::PSDatas* RoleDBData::mutable_psdatas() {
  set_has_psdatas();
  if (psdatas_ == NULL) psdatas_ = new ::proto_ff::PSDatas;
  return psdatas_;
}
inline ::proto_ff::PSDatas* RoleDBData::release_psdatas() {
  clear_has_psdatas();
  ::proto_ff::PSDatas* temp = psdatas_;
  psdatas_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_psdatas(::proto_ff::PSDatas* psdatas) {
  delete psdatas_;
  psdatas_ = psdatas;
  if (psdatas) {
    set_has_psdatas();
  } else {
    clear_has_psdatas();
  }
}

// optional .proto_ff.DragonSoulData dragon_soul = 40;
inline bool RoleDBData::has_dragon_soul() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RoleDBData::set_has_dragon_soul() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RoleDBData::clear_has_dragon_soul() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RoleDBData::clear_dragon_soul() {
  if (dragon_soul_ != NULL) dragon_soul_->::proto_ff::DragonSoulData::Clear();
  clear_has_dragon_soul();
}
inline const ::proto_ff::DragonSoulData& RoleDBData::dragon_soul() const {
  return dragon_soul_ != NULL ? *dragon_soul_ : *default_instance_->dragon_soul_;
}
inline ::proto_ff::DragonSoulData* RoleDBData::mutable_dragon_soul() {
  set_has_dragon_soul();
  if (dragon_soul_ == NULL) dragon_soul_ = new ::proto_ff::DragonSoulData;
  return dragon_soul_;
}
inline ::proto_ff::DragonSoulData* RoleDBData::release_dragon_soul() {
  clear_has_dragon_soul();
  ::proto_ff::DragonSoulData* temp = dragon_soul_;
  dragon_soul_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_dragon_soul(::proto_ff::DragonSoulData* dragon_soul) {
  delete dragon_soul_;
  dragon_soul_ = dragon_soul;
  if (dragon_soul) {
    set_has_dragon_soul();
  } else {
    clear_has_dragon_soul();
  }
}

// optional .proto_ff.WelfarePBData welfare = 41;
inline bool RoleDBData::has_welfare() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void RoleDBData::set_has_welfare() {
  _has_bits_[1] |= 0x00000100u;
}
inline void RoleDBData::clear_has_welfare() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void RoleDBData::clear_welfare() {
  if (welfare_ != NULL) welfare_->::proto_ff::WelfarePBData::Clear();
  clear_has_welfare();
}
inline const ::proto_ff::WelfarePBData& RoleDBData::welfare() const {
  return welfare_ != NULL ? *welfare_ : *default_instance_->welfare_;
}
inline ::proto_ff::WelfarePBData* RoleDBData::mutable_welfare() {
  set_has_welfare();
  if (welfare_ == NULL) welfare_ = new ::proto_ff::WelfarePBData;
  return welfare_;
}
inline ::proto_ff::WelfarePBData* RoleDBData::release_welfare() {
  clear_has_welfare();
  ::proto_ff::WelfarePBData* temp = welfare_;
  welfare_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_welfare(::proto_ff::WelfarePBData* welfare) {
  delete welfare_;
  welfare_ = welfare;
  if (welfare) {
    set_has_welfare();
  } else {
    clear_has_welfare();
  }
}

// optional .proto_ff.DailyWelfarePBData daily_welfare = 42;
inline bool RoleDBData::has_daily_welfare() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void RoleDBData::set_has_daily_welfare() {
  _has_bits_[1] |= 0x00000200u;
}
inline void RoleDBData::clear_has_daily_welfare() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void RoleDBData::clear_daily_welfare() {
  if (daily_welfare_ != NULL) daily_welfare_->::proto_ff::DailyWelfarePBData::Clear();
  clear_has_daily_welfare();
}
inline const ::proto_ff::DailyWelfarePBData& RoleDBData::daily_welfare() const {
  return daily_welfare_ != NULL ? *daily_welfare_ : *default_instance_->daily_welfare_;
}
inline ::proto_ff::DailyWelfarePBData* RoleDBData::mutable_daily_welfare() {
  set_has_daily_welfare();
  if (daily_welfare_ == NULL) daily_welfare_ = new ::proto_ff::DailyWelfarePBData;
  return daily_welfare_;
}
inline ::proto_ff::DailyWelfarePBData* RoleDBData::release_daily_welfare() {
  clear_has_daily_welfare();
  ::proto_ff::DailyWelfarePBData* temp = daily_welfare_;
  daily_welfare_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_daily_welfare(::proto_ff::DailyWelfarePBData* daily_welfare) {
  delete daily_welfare_;
  daily_welfare_ = daily_welfare;
  if (daily_welfare) {
    set_has_daily_welfare();
  } else {
    clear_has_daily_welfare();
  }
}

// optional .proto_ff.ChargeDBData charge = 43;
inline bool RoleDBData::has_charge() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void RoleDBData::set_has_charge() {
  _has_bits_[1] |= 0x00000400u;
}
inline void RoleDBData::clear_has_charge() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void RoleDBData::clear_charge() {
  if (charge_ != NULL) charge_->::proto_ff::ChargeDBData::Clear();
  clear_has_charge();
}
inline const ::proto_ff::ChargeDBData& RoleDBData::charge() const {
  return charge_ != NULL ? *charge_ : *default_instance_->charge_;
}
inline ::proto_ff::ChargeDBData* RoleDBData::mutable_charge() {
  set_has_charge();
  if (charge_ == NULL) charge_ = new ::proto_ff::ChargeDBData;
  return charge_;
}
inline ::proto_ff::ChargeDBData* RoleDBData::release_charge() {
  clear_has_charge();
  ::proto_ff::ChargeDBData* temp = charge_;
  charge_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_charge(::proto_ff::ChargeDBData* charge) {
  delete charge_;
  charge_ = charge;
  if (charge) {
    set_has_charge();
  } else {
    clear_has_charge();
  }
}

// optional .proto_ff.GiftDBData gift = 44;
inline bool RoleDBData::has_gift() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void RoleDBData::set_has_gift() {
  _has_bits_[1] |= 0x00000800u;
}
inline void RoleDBData::clear_has_gift() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void RoleDBData::clear_gift() {
  if (gift_ != NULL) gift_->::proto_ff::GiftDBData::Clear();
  clear_has_gift();
}
inline const ::proto_ff::GiftDBData& RoleDBData::gift() const {
  return gift_ != NULL ? *gift_ : *default_instance_->gift_;
}
inline ::proto_ff::GiftDBData* RoleDBData::mutable_gift() {
  set_has_gift();
  if (gift_ == NULL) gift_ = new ::proto_ff::GiftDBData;
  return gift_;
}
inline ::proto_ff::GiftDBData* RoleDBData::release_gift() {
  clear_has_gift();
  ::proto_ff::GiftDBData* temp = gift_;
  gift_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_gift(::proto_ff::GiftDBData* gift) {
  delete gift_;
  gift_ = gift;
  if (gift) {
    set_has_gift();
  } else {
    clear_has_gift();
  }
}

// optional .proto_ff.FindTreatureDBData find_treature = 45;
inline bool RoleDBData::has_find_treature() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void RoleDBData::set_has_find_treature() {
  _has_bits_[1] |= 0x00001000u;
}
inline void RoleDBData::clear_has_find_treature() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void RoleDBData::clear_find_treature() {
  if (find_treature_ != NULL) find_treature_->::proto_ff::FindTreatureDBData::Clear();
  clear_has_find_treature();
}
inline const ::proto_ff::FindTreatureDBData& RoleDBData::find_treature() const {
  return find_treature_ != NULL ? *find_treature_ : *default_instance_->find_treature_;
}
inline ::proto_ff::FindTreatureDBData* RoleDBData::mutable_find_treature() {
  set_has_find_treature();
  if (find_treature_ == NULL) find_treature_ = new ::proto_ff::FindTreatureDBData;
  return find_treature_;
}
inline ::proto_ff::FindTreatureDBData* RoleDBData::release_find_treature() {
  clear_has_find_treature();
  ::proto_ff::FindTreatureDBData* temp = find_treature_;
  find_treature_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_find_treature(::proto_ff::FindTreatureDBData* find_treature) {
  delete find_treature_;
  find_treature_ = find_treature;
  if (find_treature) {
    set_has_find_treature();
  } else {
    clear_has_find_treature();
  }
}

// optional .proto_ff.FestDBData fest = 46;
inline bool RoleDBData::has_fest() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void RoleDBData::set_has_fest() {
  _has_bits_[1] |= 0x00002000u;
}
inline void RoleDBData::clear_has_fest() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void RoleDBData::clear_fest() {
  if (fest_ != NULL) fest_->::proto_ff::FestDBData::Clear();
  clear_has_fest();
}
inline const ::proto_ff::FestDBData& RoleDBData::fest() const {
  return fest_ != NULL ? *fest_ : *default_instance_->fest_;
}
inline ::proto_ff::FestDBData* RoleDBData::mutable_fest() {
  set_has_fest();
  if (fest_ == NULL) fest_ = new ::proto_ff::FestDBData;
  return fest_;
}
inline ::proto_ff::FestDBData* RoleDBData::release_fest() {
  clear_has_fest();
  ::proto_ff::FestDBData* temp = fest_;
  fest_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_fest(::proto_ff::FestDBData* fest) {
  delete fest_;
  fest_ = fest;
  if (fest) {
    set_has_fest();
  } else {
    clear_has_fest();
  }
}

// optional .proto_ff.DragonDBData dragon = 47;
inline bool RoleDBData::has_dragon() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void RoleDBData::set_has_dragon() {
  _has_bits_[1] |= 0x00004000u;
}
inline void RoleDBData::clear_has_dragon() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void RoleDBData::clear_dragon() {
  if (dragon_ != NULL) dragon_->::proto_ff::DragonDBData::Clear();
  clear_has_dragon();
}
inline const ::proto_ff::DragonDBData& RoleDBData::dragon() const {
  return dragon_ != NULL ? *dragon_ : *default_instance_->dragon_;
}
inline ::proto_ff::DragonDBData* RoleDBData::mutable_dragon() {
  set_has_dragon();
  if (dragon_ == NULL) dragon_ = new ::proto_ff::DragonDBData;
  return dragon_;
}
inline ::proto_ff::DragonDBData* RoleDBData::release_dragon() {
  clear_has_dragon();
  ::proto_ff::DragonDBData* temp = dragon_;
  dragon_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_dragon(::proto_ff::DragonDBData* dragon) {
  delete dragon_;
  dragon_ = dragon;
  if (dragon) {
    set_has_dragon();
  } else {
    clear_has_dragon();
  }
}

// optional .proto_ff.StarData star = 48;
inline bool RoleDBData::has_star() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void RoleDBData::set_has_star() {
  _has_bits_[1] |= 0x00008000u;
}
inline void RoleDBData::clear_has_star() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void RoleDBData::clear_star() {
  if (star_ != NULL) star_->::proto_ff::StarData::Clear();
  clear_has_star();
}
inline const ::proto_ff::StarData& RoleDBData::star() const {
  return star_ != NULL ? *star_ : *default_instance_->star_;
}
inline ::proto_ff::StarData* RoleDBData::mutable_star() {
  set_has_star();
  if (star_ == NULL) star_ = new ::proto_ff::StarData;
  return star_;
}
inline ::proto_ff::StarData* RoleDBData::release_star() {
  clear_has_star();
  ::proto_ff::StarData* temp = star_;
  star_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_star(::proto_ff::StarData* star) {
  delete star_;
  star_ = star;
  if (star) {
    set_has_star();
  } else {
    clear_has_star();
  }
}

// optional int32 change = 49;
inline bool RoleDBData::has_change() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void RoleDBData::set_has_change() {
  _has_bits_[1] |= 0x00010000u;
}
inline void RoleDBData::clear_has_change() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void RoleDBData::clear_change() {
  change_ = 0;
  clear_has_change();
}
inline ::google::protobuf::int32 RoleDBData::change() const {
  return change_;
}
inline void RoleDBData::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
}

// optional .proto_ff.RoleDBTurnData turn = 50;
inline bool RoleDBData::has_turn() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void RoleDBData::set_has_turn() {
  _has_bits_[1] |= 0x00020000u;
}
inline void RoleDBData::clear_has_turn() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void RoleDBData::clear_turn() {
  if (turn_ != NULL) turn_->::proto_ff::RoleDBTurnData::Clear();
  clear_has_turn();
}
inline const ::proto_ff::RoleDBTurnData& RoleDBData::turn() const {
  return turn_ != NULL ? *turn_ : *default_instance_->turn_;
}
inline ::proto_ff::RoleDBTurnData* RoleDBData::mutable_turn() {
  set_has_turn();
  if (turn_ == NULL) turn_ = new ::proto_ff::RoleDBTurnData;
  return turn_;
}
inline ::proto_ff::RoleDBTurnData* RoleDBData::release_turn() {
  clear_has_turn();
  ::proto_ff::RoleDBTurnData* temp = turn_;
  turn_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_turn(::proto_ff::RoleDBTurnData* turn) {
  delete turn_;
  turn_ = turn;
  if (turn) {
    set_has_turn();
  } else {
    clear_has_turn();
  }
}

// optional .proto_ff.GMADbData gma_datas = 51;
inline bool RoleDBData::has_gma_datas() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void RoleDBData::set_has_gma_datas() {
  _has_bits_[1] |= 0x00040000u;
}
inline void RoleDBData::clear_has_gma_datas() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void RoleDBData::clear_gma_datas() {
  if (gma_datas_ != NULL) gma_datas_->::proto_ff::GMADbData::Clear();
  clear_has_gma_datas();
}
inline const ::proto_ff::GMADbData& RoleDBData::gma_datas() const {
  return gma_datas_ != NULL ? *gma_datas_ : *default_instance_->gma_datas_;
}
inline ::proto_ff::GMADbData* RoleDBData::mutable_gma_datas() {
  set_has_gma_datas();
  if (gma_datas_ == NULL) gma_datas_ = new ::proto_ff::GMADbData;
  return gma_datas_;
}
inline ::proto_ff::GMADbData* RoleDBData::release_gma_datas() {
  clear_has_gma_datas();
  ::proto_ff::GMADbData* temp = gma_datas_;
  gma_datas_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_gma_datas(::proto_ff::GMADbData* gma_datas) {
  delete gma_datas_;
  gma_datas_ = gma_datas;
  if (gma_datas) {
    set_has_gma_datas();
  } else {
    clear_has_gma_datas();
  }
}

// optional .proto_ff.SoulDBData soul = 52;
inline bool RoleDBData::has_soul() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void RoleDBData::set_has_soul() {
  _has_bits_[1] |= 0x00080000u;
}
inline void RoleDBData::clear_has_soul() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void RoleDBData::clear_soul() {
  if (soul_ != NULL) soul_->::proto_ff::SoulDBData::Clear();
  clear_has_soul();
}
inline const ::proto_ff::SoulDBData& RoleDBData::soul() const {
  return soul_ != NULL ? *soul_ : *default_instance_->soul_;
}
inline ::proto_ff::SoulDBData* RoleDBData::mutable_soul() {
  set_has_soul();
  if (soul_ == NULL) soul_ = new ::proto_ff::SoulDBData;
  return soul_;
}
inline ::proto_ff::SoulDBData* RoleDBData::release_soul() {
  clear_has_soul();
  ::proto_ff::SoulDBData* temp = soul_;
  soul_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_soul(::proto_ff::SoulDBData* soul) {
  delete soul_;
  soul_ = soul;
  if (soul) {
    set_has_soul();
  } else {
    clear_has_soul();
  }
}

// optional .proto_ff.MoFaDBData mofa = 53;
inline bool RoleDBData::has_mofa() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void RoleDBData::set_has_mofa() {
  _has_bits_[1] |= 0x00100000u;
}
inline void RoleDBData::clear_has_mofa() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void RoleDBData::clear_mofa() {
  if (mofa_ != NULL) mofa_->::proto_ff::MoFaDBData::Clear();
  clear_has_mofa();
}
inline const ::proto_ff::MoFaDBData& RoleDBData::mofa() const {
  return mofa_ != NULL ? *mofa_ : *default_instance_->mofa_;
}
inline ::proto_ff::MoFaDBData* RoleDBData::mutable_mofa() {
  set_has_mofa();
  if (mofa_ == NULL) mofa_ = new ::proto_ff::MoFaDBData;
  return mofa_;
}
inline ::proto_ff::MoFaDBData* RoleDBData::release_mofa() {
  clear_has_mofa();
  ::proto_ff::MoFaDBData* temp = mofa_;
  mofa_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_mofa(::proto_ff::MoFaDBData* mofa) {
  delete mofa_;
  mofa_ = mofa;
  if (mofa) {
    set_has_mofa();
  } else {
    clear_has_mofa();
  }
}

// optional .proto_ff.RuneDBData rune = 54;
inline bool RoleDBData::has_rune() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void RoleDBData::set_has_rune() {
  _has_bits_[1] |= 0x00200000u;
}
inline void RoleDBData::clear_has_rune() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void RoleDBData::clear_rune() {
  if (rune_ != NULL) rune_->::proto_ff::RuneDBData::Clear();
  clear_has_rune();
}
inline const ::proto_ff::RuneDBData& RoleDBData::rune() const {
  return rune_ != NULL ? *rune_ : *default_instance_->rune_;
}
inline ::proto_ff::RuneDBData* RoleDBData::mutable_rune() {
  set_has_rune();
  if (rune_ == NULL) rune_ = new ::proto_ff::RuneDBData;
  return rune_;
}
inline ::proto_ff::RuneDBData* RoleDBData::release_rune() {
  clear_has_rune();
  ::proto_ff::RuneDBData* temp = rune_;
  rune_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_rune(::proto_ff::RuneDBData* rune) {
  delete rune_;
  rune_ = rune;
  if (rune) {
    set_has_rune();
  } else {
    clear_has_rune();
  }
}

// optional .proto_ff.NGDbDatas ng_datas = 55;
inline bool RoleDBData::has_ng_datas() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void RoleDBData::set_has_ng_datas() {
  _has_bits_[1] |= 0x00400000u;
}
inline void RoleDBData::clear_has_ng_datas() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void RoleDBData::clear_ng_datas() {
  if (ng_datas_ != NULL) ng_datas_->::proto_ff::NGDbDatas::Clear();
  clear_has_ng_datas();
}
inline const ::proto_ff::NGDbDatas& RoleDBData::ng_datas() const {
  return ng_datas_ != NULL ? *ng_datas_ : *default_instance_->ng_datas_;
}
inline ::proto_ff::NGDbDatas* RoleDBData::mutable_ng_datas() {
  set_has_ng_datas();
  if (ng_datas_ == NULL) ng_datas_ = new ::proto_ff::NGDbDatas;
  return ng_datas_;
}
inline ::proto_ff::NGDbDatas* RoleDBData::release_ng_datas() {
  clear_has_ng_datas();
  ::proto_ff::NGDbDatas* temp = ng_datas_;
  ng_datas_ = NULL;
  return temp;
}
inline void RoleDBData::set_allocated_ng_datas(::proto_ff::NGDbDatas* ng_datas) {
  delete ng_datas_;
  ng_datas_ = ng_datas;
  if (ng_datas) {
    set_has_ng_datas();
  } else {
    clear_has_ng_datas();
  }
}

// -------------------------------------------------------------------

// RedWaitDBProto

// optional uint32 idx = 1;
inline bool RedWaitDBProto::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedWaitDBProto::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedWaitDBProto::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedWaitDBProto::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 RedWaitDBProto::idx() const {
  return idx_;
}
inline void RedWaitDBProto::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional int32 cfgid = 2;
inline bool RedWaitDBProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedWaitDBProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedWaitDBProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedWaitDBProto::clear_cfgid() {
  cfgid_ = 0;
  clear_has_cfgid();
}
inline ::google::protobuf::int32 RedWaitDBProto::cfgid() const {
  return cfgid_;
}
inline void RedWaitDBProto::set_cfgid(::google::protobuf::int32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional uint64 time = 3;
inline bool RedWaitDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedWaitDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedWaitDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedWaitDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 RedWaitDBProto::time() const {
  return time_;
}
inline void RedWaitDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RedTriggerDBProto

// optional int32 cfgid = 1;
inline bool RedTriggerDBProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedTriggerDBProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedTriggerDBProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedTriggerDBProto::clear_cfgid() {
  cfgid_ = 0;
  clear_has_cfgid();
}
inline ::google::protobuf::int32 RedTriggerDBProto::cfgid() const {
  return cfgid_;
}
inline void RedTriggerDBProto::set_cfgid(::google::protobuf::int32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional int32 count = 2;
inline bool RedTriggerDBProto::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedTriggerDBProto::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedTriggerDBProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedTriggerDBProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 RedTriggerDBProto::count() const {
  return count_;
}
inline void RedTriggerDBProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// RoleRedDBData

// optional uint32 bdia = 1;
inline bool RoleRedDBData::has_bdia() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleRedDBData::set_has_bdia() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleRedDBData::clear_has_bdia() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleRedDBData::clear_bdia() {
  bdia_ = 0u;
  clear_has_bdia();
}
inline ::google::protobuf::uint32 RoleRedDBData::bdia() const {
  return bdia_;
}
inline void RoleRedDBData::set_bdia(::google::protobuf::uint32 value) {
  set_has_bdia();
  bdia_ = value;
}

// optional uint32 magic = 2;
inline bool RoleRedDBData::has_magic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleRedDBData::set_has_magic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleRedDBData::clear_has_magic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleRedDBData::clear_magic() {
  magic_ = 0u;
  clear_has_magic();
}
inline ::google::protobuf::uint32 RoleRedDBData::magic() const {
  return magic_;
}
inline void RoleRedDBData::set_magic(::google::protobuf::uint32 value) {
  set_has_magic();
  magic_ = value;
}

// optional uint32 todaynum = 3;
inline bool RoleRedDBData::has_todaynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleRedDBData::set_has_todaynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleRedDBData::clear_has_todaynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleRedDBData::clear_todaynum() {
  todaynum_ = 0u;
  clear_has_todaynum();
}
inline ::google::protobuf::uint32 RoleRedDBData::todaynum() const {
  return todaynum_;
}
inline void RoleRedDBData::set_todaynum(::google::protobuf::uint32 value) {
  set_has_todaynum();
  todaynum_ = value;
}

// optional uint32 todaymagic = 4;
inline bool RoleRedDBData::has_todaymagic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleRedDBData::set_has_todaymagic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleRedDBData::clear_has_todaymagic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleRedDBData::clear_todaymagic() {
  todaymagic_ = 0u;
  clear_has_todaymagic();
}
inline ::google::protobuf::uint32 RoleRedDBData::todaymagic() const {
  return todaymagic_;
}
inline void RoleRedDBData::set_todaymagic(::google::protobuf::uint32 value) {
  set_has_todaymagic();
  todaymagic_ = value;
}

// optional uint32 todaybdia = 5;
inline bool RoleRedDBData::has_todaybdia() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleRedDBData::set_has_todaybdia() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleRedDBData::clear_has_todaybdia() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleRedDBData::clear_todaybdia() {
  todaybdia_ = 0u;
  clear_has_todaybdia();
}
inline ::google::protobuf::uint32 RoleRedDBData::todaybdia() const {
  return todaybdia_;
}
inline void RoleRedDBData::set_todaybdia(::google::protobuf::uint32 value) {
  set_has_todaybdia();
  todaybdia_ = value;
}

// optional uint64 freshtime = 6;
inline bool RoleRedDBData::has_freshtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleRedDBData::set_has_freshtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleRedDBData::clear_has_freshtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleRedDBData::clear_freshtime() {
  freshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_freshtime();
}
inline ::google::protobuf::uint64 RoleRedDBData::freshtime() const {
  return freshtime_;
}
inline void RoleRedDBData::set_freshtime(::google::protobuf::uint64 value) {
  set_has_freshtime();
  freshtime_ = value;
}

// repeated int32 send_lst = 7;
inline int RoleRedDBData::send_lst_size() const {
  return send_lst_.size();
}
inline void RoleRedDBData::clear_send_lst() {
  send_lst_.Clear();
}
inline ::google::protobuf::int32 RoleRedDBData::send_lst(int index) const {
  return send_lst_.Get(index);
}
inline void RoleRedDBData::set_send_lst(int index, ::google::protobuf::int32 value) {
  send_lst_.Set(index, value);
}
inline void RoleRedDBData::add_send_lst(::google::protobuf::int32 value) {
  send_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoleRedDBData::send_lst() const {
  return send_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoleRedDBData::mutable_send_lst() {
  return &send_lst_;
}

// repeated .proto_ff.RedWaitDBProto wait_lst = 8;
inline int RoleRedDBData::wait_lst_size() const {
  return wait_lst_.size();
}
inline void RoleRedDBData::clear_wait_lst() {
  wait_lst_.Clear();
}
inline const ::proto_ff::RedWaitDBProto& RoleRedDBData::wait_lst(int index) const {
  return wait_lst_.Get(index);
}
inline ::proto_ff::RedWaitDBProto* RoleRedDBData::mutable_wait_lst(int index) {
  return wait_lst_.Mutable(index);
}
inline ::proto_ff::RedWaitDBProto* RoleRedDBData::add_wait_lst() {
  return wait_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >&
RoleRedDBData::wait_lst() const {
  return wait_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >*
RoleRedDBData::mutable_wait_lst() {
  return &wait_lst_;
}

// optional uint64 cid = 9;
inline bool RoleRedDBData::has_cid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleRedDBData::set_has_cid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleRedDBData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleRedDBData::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleRedDBData::cid() const {
  return cid_;
}
inline void RoleRedDBData::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// repeated .proto_ff.RedTriggerDBProto trigger_lst = 10;
inline int RoleRedDBData::trigger_lst_size() const {
  return trigger_lst_.size();
}
inline void RoleRedDBData::clear_trigger_lst() {
  trigger_lst_.Clear();
}
inline const ::proto_ff::RedTriggerDBProto& RoleRedDBData::trigger_lst(int index) const {
  return trigger_lst_.Get(index);
}
inline ::proto_ff::RedTriggerDBProto* RoleRedDBData::mutable_trigger_lst(int index) {
  return trigger_lst_.Mutable(index);
}
inline ::proto_ff::RedTriggerDBProto* RoleRedDBData::add_trigger_lst() {
  return trigger_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >&
RoleRedDBData::trigger_lst() const {
  return trigger_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >*
RoleRedDBData::mutable_trigger_lst() {
  return &trigger_lst_;
}

// -------------------------------------------------------------------

// RedFetchDBProto

// optional uint64 cid = 1;
inline bool RedFetchDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedFetchDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedFetchDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedFetchDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RedFetchDBProto::cid() const {
  return cid_;
}
inline void RedFetchDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 val = 2;
inline bool RedFetchDBProto::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedFetchDBProto::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedFetchDBProto::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedFetchDBProto::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 RedFetchDBProto::val() const {
  return val_;
}
inline void RedFetchDBProto::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// optional uint64 time = 3;
inline bool RedFetchDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedFetchDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedFetchDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedFetchDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 RedFetchDBProto::time() const {
  return time_;
}
inline void RedFetchDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RedFetchListDBProto

// repeated .proto_ff.RedFetchDBProto info = 1;
inline int RedFetchListDBProto::info_size() const {
  return info_.size();
}
inline void RedFetchListDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RedFetchDBProto& RedFetchListDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RedFetchDBProto* RedFetchListDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RedFetchDBProto* RedFetchListDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchDBProto >&
RedFetchListDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchDBProto >*
RedFetchListDBProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// RedSendDBProto

// optional uint32 idx = 1;
inline bool RedSendDBProto::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedSendDBProto::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedSendDBProto::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedSendDBProto::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 RedSendDBProto::idx() const {
  return idx_;
}
inline void RedSendDBProto::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional int32 cfgid = 2;
inline bool RedSendDBProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedSendDBProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedSendDBProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedSendDBProto::clear_cfgid() {
  cfgid_ = 0;
  clear_has_cfgid();
}
inline ::google::protobuf::int32 RedSendDBProto::cfgid() const {
  return cfgid_;
}
inline void RedSendDBProto::set_cfgid(::google::protobuf::int32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional uint64 sender = 3;
inline bool RedSendDBProto::has_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedSendDBProto::set_has_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedSendDBProto::clear_has_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedSendDBProto::clear_sender() {
  sender_ = GOOGLE_ULONGLONG(0);
  clear_has_sender();
}
inline ::google::protobuf::uint64 RedSendDBProto::sender() const {
  return sender_;
}
inline void RedSendDBProto::set_sender(::google::protobuf::uint64 value) {
  set_has_sender();
  sender_ = value;
}

// optional uint64 sendtime = 4;
inline bool RedSendDBProto::has_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedSendDBProto::set_has_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedSendDBProto::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedSendDBProto::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 RedSendDBProto::sendtime() const {
  return sendtime_;
}
inline void RedSendDBProto::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional bytes word = 5;
inline bool RedSendDBProto::has_word() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedSendDBProto::set_has_word() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedSendDBProto::clear_has_word() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedSendDBProto::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& RedSendDBProto::word() const {
  return *word_;
}
inline void RedSendDBProto::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void RedSendDBProto::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void RedSendDBProto::set_word(const void* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedSendDBProto::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* RedSendDBProto::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedSendDBProto::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 finish = 6;
inline bool RedSendDBProto::has_finish() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RedSendDBProto::set_has_finish() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RedSendDBProto::clear_has_finish() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RedSendDBProto::clear_finish() {
  finish_ = 0;
  clear_has_finish();
}
inline ::google::protobuf::int32 RedSendDBProto::finish() const {
  return finish_;
}
inline void RedSendDBProto::set_finish(::google::protobuf::int32 value) {
  set_has_finish();
  finish_ = value;
}

// optional .proto_ff.RedFetchListDBProto fetch = 7;
inline bool RedSendDBProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RedSendDBProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RedSendDBProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RedSendDBProto::clear_fetch() {
  if (fetch_ != NULL) fetch_->::proto_ff::RedFetchListDBProto::Clear();
  clear_has_fetch();
}
inline const ::proto_ff::RedFetchListDBProto& RedSendDBProto::fetch() const {
  return fetch_ != NULL ? *fetch_ : *default_instance_->fetch_;
}
inline ::proto_ff::RedFetchListDBProto* RedSendDBProto::mutable_fetch() {
  set_has_fetch();
  if (fetch_ == NULL) fetch_ = new ::proto_ff::RedFetchListDBProto;
  return fetch_;
}
inline ::proto_ff::RedFetchListDBProto* RedSendDBProto::release_fetch() {
  clear_has_fetch();
  ::proto_ff::RedFetchListDBProto* temp = fetch_;
  fetch_ = NULL;
  return temp;
}
inline void RedSendDBProto::set_allocated_fetch(::proto_ff::RedFetchListDBProto* fetch) {
  delete fetch_;
  fetch_ = fetch;
  if (fetch) {
    set_has_fetch();
  } else {
    clear_has_fetch();
  }
}

// -------------------------------------------------------------------

// RedDBData

// repeated .proto_ff.RedWaitDBProto wait = 1;
inline int RedDBData::wait_size() const {
  return wait_.size();
}
inline void RedDBData::clear_wait() {
  wait_.Clear();
}
inline const ::proto_ff::RedWaitDBProto& RedDBData::wait(int index) const {
  return wait_.Get(index);
}
inline ::proto_ff::RedWaitDBProto* RedDBData::mutable_wait(int index) {
  return wait_.Mutable(index);
}
inline ::proto_ff::RedWaitDBProto* RedDBData::add_wait() {
  return wait_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >&
RedDBData::wait() const {
  return wait_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitDBProto >*
RedDBData::mutable_wait() {
  return &wait_;
}

// repeated .proto_ff.RedTriggerDBProto trigger_lst = 2;
inline int RedDBData::trigger_lst_size() const {
  return trigger_lst_.size();
}
inline void RedDBData::clear_trigger_lst() {
  trigger_lst_.Clear();
}
inline const ::proto_ff::RedTriggerDBProto& RedDBData::trigger_lst(int index) const {
  return trigger_lst_.Get(index);
}
inline ::proto_ff::RedTriggerDBProto* RedDBData::mutable_trigger_lst(int index) {
  return trigger_lst_.Mutable(index);
}
inline ::proto_ff::RedTriggerDBProto* RedDBData::add_trigger_lst() {
  return trigger_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >&
RedDBData::trigger_lst() const {
  return trigger_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedTriggerDBProto >*
RedDBData::mutable_trigger_lst() {
  return &trigger_lst_;
}

// optional uint64 freshtime = 3;
inline bool RedDBData::has_freshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedDBData::set_has_freshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedDBData::clear_has_freshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedDBData::clear_freshtime() {
  freshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_freshtime();
}
inline ::google::protobuf::uint64 RedDBData::freshtime() const {
  return freshtime_;
}
inline void RedDBData::set_freshtime(::google::protobuf::uint64 value) {
  set_has_freshtime();
  freshtime_ = value;
}

// repeated .proto_ff.RedSendDBProto send = 4;
inline int RedDBData::send_size() const {
  return send_.size();
}
inline void RedDBData::clear_send() {
  send_.Clear();
}
inline const ::proto_ff::RedSendDBProto& RedDBData::send(int index) const {
  return send_.Get(index);
}
inline ::proto_ff::RedSendDBProto* RedDBData::mutable_send(int index) {
  return send_.Mutable(index);
}
inline ::proto_ff::RedSendDBProto* RedDBData::add_send() {
  return send_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSendDBProto >&
RedDBData::send() const {
  return send_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSendDBProto >*
RedDBData::mutable_send() {
  return &send_;
}

// optional uint32 faction_id = 5;
inline bool RedDBData::has_faction_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedDBData::set_has_faction_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedDBData::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedDBData::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 RedDBData::faction_id() const {
  return faction_id_;
}
inline void RedDBData::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// RoleMirrorData

// optional uint64 cid = 1;
inline bool RoleMirrorData::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleMirrorData::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleMirrorData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleMirrorData::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleMirrorData::cid() const {
  return cid_;
}
inline void RoleMirrorData::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 type = 2;
inline bool RoleMirrorData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleMirrorData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleMirrorData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleMirrorData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RoleMirrorData::type() const {
  return type_;
}
inline void RoleMirrorData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 teamid = 3;
inline bool RoleMirrorData::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleMirrorData::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleMirrorData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleMirrorData::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 RoleMirrorData::teamid() const {
  return teamid_;
}
inline void RoleMirrorData::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 zid = 4;
inline bool RoleMirrorData::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleMirrorData::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleMirrorData::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleMirrorData::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleMirrorData::zid() const {
  return zid_;
}
inline void RoleMirrorData::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional .proto_ff.AttrDBData attr = 5;
inline bool RoleMirrorData::has_attr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleMirrorData::set_has_attr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleMirrorData::clear_has_attr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleMirrorData::clear_attr() {
  if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
  clear_has_attr();
}
inline const ::proto_ff::AttrDBData& RoleMirrorData::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::proto_ff::AttrDBData* RoleMirrorData::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::proto_ff::AttrDBData;
  return attr_;
}
inline ::proto_ff::AttrDBData* RoleMirrorData::release_attr() {
  clear_has_attr();
  ::proto_ff::AttrDBData* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void RoleMirrorData::set_allocated_attr(::proto_ff::AttrDBData* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// optional .proto_ff.SkillDBData skill = 6;
inline bool RoleMirrorData::has_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleMirrorData::set_has_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleMirrorData::clear_has_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleMirrorData::clear_skill() {
  if (skill_ != NULL) skill_->::proto_ff::SkillDBData::Clear();
  clear_has_skill();
}
inline const ::proto_ff::SkillDBData& RoleMirrorData::skill() const {
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::proto_ff::SkillDBData* RoleMirrorData::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::proto_ff::SkillDBData;
  return skill_;
}
inline ::proto_ff::SkillDBData* RoleMirrorData::release_skill() {
  clear_has_skill();
  ::proto_ff::SkillDBData* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void RoleMirrorData::set_allocated_skill(::proto_ff::SkillDBData* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
}

// optional .proto_ff.RoleDBBaseData base = 7;
inline bool RoleMirrorData::has_base() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleMirrorData::set_has_base() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleMirrorData::clear_has_base() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleMirrorData::clear_base() {
  if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
  clear_has_base();
}
inline const ::proto_ff::RoleDBBaseData& RoleMirrorData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::RoleDBBaseData* RoleMirrorData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::RoleDBBaseData;
  return base_;
}
inline ::proto_ff::RoleDBBaseData* RoleMirrorData::release_base() {
  clear_has_base();
  ::proto_ff::RoleDBBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoleMirrorData::set_allocated_base(::proto_ff::RoleDBBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .proto_ff.RoleDBEquipData equip = 8;
inline bool RoleMirrorData::has_equip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleMirrorData::set_has_equip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleMirrorData::clear_has_equip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleMirrorData::clear_equip() {
  if (equip_ != NULL) equip_->::proto_ff::RoleDBEquipData::Clear();
  clear_has_equip();
}
inline const ::proto_ff::RoleDBEquipData& RoleMirrorData::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::proto_ff::RoleDBEquipData* RoleMirrorData::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::proto_ff::RoleDBEquipData;
  return equip_;
}
inline ::proto_ff::RoleDBEquipData* RoleMirrorData::release_equip() {
  clear_has_equip();
  ::proto_ff::RoleDBEquipData* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void RoleMirrorData::set_allocated_equip(::proto_ff::RoleDBEquipData* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// repeated .proto_ff.BestEQEquipInfo beast_equips = 9;
inline int RoleMirrorData::beast_equips_size() const {
  return beast_equips_.size();
}
inline void RoleMirrorData::clear_beast_equips() {
  beast_equips_.Clear();
}
inline const ::proto_ff::BestEQEquipInfo& RoleMirrorData::beast_equips(int index) const {
  return beast_equips_.Get(index);
}
inline ::proto_ff::BestEQEquipInfo* RoleMirrorData::mutable_beast_equips(int index) {
  return beast_equips_.Mutable(index);
}
inline ::proto_ff::BestEQEquipInfo* RoleMirrorData::add_beast_equips() {
  return beast_equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQEquipInfo >&
RoleMirrorData::beast_equips() const {
  return beast_equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQEquipInfo >*
RoleMirrorData::mutable_beast_equips() {
  return &beast_equips_;
}

// repeated .proto_ff.BestEQSlotInfo beast_slots = 10;
inline int RoleMirrorData::beast_slots_size() const {
  return beast_slots_.size();
}
inline void RoleMirrorData::clear_beast_slots() {
  beast_slots_.Clear();
}
inline const ::proto_ff::BestEQSlotInfo& RoleMirrorData::beast_slots(int index) const {
  return beast_slots_.Get(index);
}
inline ::proto_ff::BestEQSlotInfo* RoleMirrorData::mutable_beast_slots(int index) {
  return beast_slots_.Mutable(index);
}
inline ::proto_ff::BestEQSlotInfo* RoleMirrorData::add_beast_slots() {
  return beast_slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >&
RoleMirrorData::beast_slots() const {
  return beast_slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >*
RoleMirrorData::mutable_beast_slots() {
  return &beast_slots_;
}

// optional int32 campid = 11;
inline bool RoleMirrorData::has_campid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleMirrorData::set_has_campid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleMirrorData::clear_has_campid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleMirrorData::clear_campid() {
  campid_ = 0;
  clear_has_campid();
}
inline ::google::protobuf::int32 RoleMirrorData::campid() const {
  return campid_;
}
inline void RoleMirrorData::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
}

// optional int32 relive = 12;
inline bool RoleMirrorData::has_relive() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleMirrorData::set_has_relive() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleMirrorData::clear_has_relive() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleMirrorData::clear_relive() {
  relive_ = 0;
  clear_has_relive();
}
inline ::google::protobuf::int32 RoleMirrorData::relive() const {
  return relive_;
}
inline void RoleMirrorData::set_relive(::google::protobuf::int32 value) {
  set_has_relive();
  relive_ = value;
}

// -------------------------------------------------------------------

// FactionMemDBProto

// optional uint64 cid = 1;
inline bool FactionMemDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMemDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMemDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMemDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionMemDBProto::cid() const {
  return cid_;
}
inline void FactionMemDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 duty = 2;
inline bool FactionMemDBProto::has_duty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMemDBProto::set_has_duty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMemDBProto::clear_has_duty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMemDBProto::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 FactionMemDBProto::duty() const {
  return duty_;
}
inline void FactionMemDBProto::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional uint64 join_time = 3;
inline bool FactionMemDBProto::has_join_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMemDBProto::set_has_join_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMemDBProto::clear_has_join_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMemDBProto::clear_join_time() {
  join_time_ = GOOGLE_ULONGLONG(0);
  clear_has_join_time();
}
inline ::google::protobuf::uint64 FactionMemDBProto::join_time() const {
  return join_time_;
}
inline void FactionMemDBProto::set_join_time(::google::protobuf::uint64 value) {
  set_has_join_time();
  join_time_ = value;
}

// optional uint32 total_contri = 4;
inline bool FactionMemDBProto::has_total_contri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMemDBProto::set_has_total_contri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMemDBProto::clear_has_total_contri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMemDBProto::clear_total_contri() {
  total_contri_ = 0u;
  clear_has_total_contri();
}
inline ::google::protobuf::uint32 FactionMemDBProto::total_contri() const {
  return total_contri_;
}
inline void FactionMemDBProto::set_total_contri(::google::protobuf::uint32 value) {
  set_has_total_contri();
  total_contri_ = value;
}

// -------------------------------------------------------------------

// FactionMultMemDBProto

// repeated .proto_ff.FactionMemDBProto mem_lst = 1;
inline int FactionMultMemDBProto::mem_lst_size() const {
  return mem_lst_.size();
}
inline void FactionMultMemDBProto::clear_mem_lst() {
  mem_lst_.Clear();
}
inline const ::proto_ff::FactionMemDBProto& FactionMultMemDBProto::mem_lst(int index) const {
  return mem_lst_.Get(index);
}
inline ::proto_ff::FactionMemDBProto* FactionMultMemDBProto::mutable_mem_lst(int index) {
  return mem_lst_.Mutable(index);
}
inline ::proto_ff::FactionMemDBProto* FactionMultMemDBProto::add_mem_lst() {
  return mem_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemDBProto >&
FactionMultMemDBProto::mem_lst() const {
  return mem_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemDBProto >*
FactionMultMemDBProto::mutable_mem_lst() {
  return &mem_lst_;
}

// -------------------------------------------------------------------

// FactionApplyDBProto

// optional uint64 cid = 1;
inline bool FactionApplyDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionApplyDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionApplyDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionApplyDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionApplyDBProto::cid() const {
  return cid_;
}
inline void FactionApplyDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint64 time = 2;
inline bool FactionApplyDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionApplyDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionApplyDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionApplyDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionApplyDBProto::time() const {
  return time_;
}
inline void FactionApplyDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// FactionMultApplyDBProto

// repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
inline int FactionMultApplyDBProto::apply_lst_size() const {
  return apply_lst_.size();
}
inline void FactionMultApplyDBProto::clear_apply_lst() {
  apply_lst_.Clear();
}
inline const ::proto_ff::FactionApplyDBProto& FactionMultApplyDBProto::apply_lst(int index) const {
  return apply_lst_.Get(index);
}
inline ::proto_ff::FactionApplyDBProto* FactionMultApplyDBProto::mutable_apply_lst(int index) {
  return apply_lst_.Mutable(index);
}
inline ::proto_ff::FactionApplyDBProto* FactionMultApplyDBProto::add_apply_lst() {
  return apply_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyDBProto >&
FactionMultApplyDBProto::apply_lst() const {
  return apply_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyDBProto >*
FactionMultApplyDBProto::mutable_apply_lst() {
  return &apply_lst_;
}

// -------------------------------------------------------------------

// FactionRecordDBProto

// optional uint64 cid = 1;
inline bool FactionRecordDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionRecordDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionRecordDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionRecordDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionRecordDBProto::cid() const {
  return cid_;
}
inline void FactionRecordDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint64 time = 2;
inline bool FactionRecordDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionRecordDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionRecordDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionRecordDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionRecordDBProto::time() const {
  return time_;
}
inline void FactionRecordDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 op = 3;
inline bool FactionRecordDBProto::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionRecordDBProto::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionRecordDBProto::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionRecordDBProto::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 FactionRecordDBProto::op() const {
  return op_;
}
inline void FactionRecordDBProto::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional int64 param1 = 4;
inline bool FactionRecordDBProto::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionRecordDBProto::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionRecordDBProto::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionRecordDBProto::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 FactionRecordDBProto::param1() const {
  return param1_;
}
inline void FactionRecordDBProto::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// FactionMutRecordDBProto

// repeated .proto_ff.FactionRecordDBProto record_lst = 1;
inline int FactionMutRecordDBProto::record_lst_size() const {
  return record_lst_.size();
}
inline void FactionMutRecordDBProto::clear_record_lst() {
  record_lst_.Clear();
}
inline const ::proto_ff::FactionRecordDBProto& FactionMutRecordDBProto::record_lst(int index) const {
  return record_lst_.Get(index);
}
inline ::proto_ff::FactionRecordDBProto* FactionMutRecordDBProto::mutable_record_lst(int index) {
  return record_lst_.Mutable(index);
}
inline ::proto_ff::FactionRecordDBProto* FactionMutRecordDBProto::add_record_lst() {
  return record_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordDBProto >&
FactionMutRecordDBProto::record_lst() const {
  return record_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordDBProto >*
FactionMutRecordDBProto::mutable_record_lst() {
  return &record_lst_;
}

// -------------------------------------------------------------------

// FactionDBBase

// optional uint32 faction_id = 1;
inline bool FactionDBBase::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBBase::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBBase::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBBase::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionDBBase::faction_id() const {
  return faction_id_;
}
inline void FactionDBBase::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionDBBase::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBBase::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBBase::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionDBBase::name() const {
  return *name_;
}
inline void FactionDBBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionDBBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionDBBase::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionDBBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionDBBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionDBBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 leader_id = 3;
inline bool FactionDBBase::has_leader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDBBase::set_has_leader_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDBBase::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDBBase::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 FactionDBBase::leader_id() const {
  return leader_id_;
}
inline void FactionDBBase::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional uint64 fight = 4;
inline bool FactionDBBase::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDBBase::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDBBase::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDBBase::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionDBBase::fight() const {
  return fight_;
}
inline void FactionDBBase::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional bytes notice = 5;
inline bool FactionDBBase::has_notice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionDBBase::set_has_notice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionDBBase::clear_has_notice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionDBBase::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& FactionDBBase::notice() const {
  return *notice_;
}
inline void FactionDBBase::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void FactionDBBase::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void FactionDBBase::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionDBBase::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* FactionDBBase::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionDBBase::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 last_notice_time = 6;
inline bool FactionDBBase::has_last_notice_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionDBBase::set_has_last_notice_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionDBBase::clear_has_last_notice_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionDBBase::clear_last_notice_time() {
  last_notice_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_notice_time();
}
inline ::google::protobuf::uint64 FactionDBBase::last_notice_time() const {
  return last_notice_time_;
}
inline void FactionDBBase::set_last_notice_time(::google::protobuf::uint64 value) {
  set_has_last_notice_time();
  last_notice_time_ = value;
}

// optional uint32 level = 7;
inline bool FactionDBBase::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionDBBase::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionDBBase::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionDBBase::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 FactionDBBase::level() const {
  return level_;
}
inline void FactionDBBase::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 exp = 8;
inline bool FactionDBBase::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionDBBase::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionDBBase::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionDBBase::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 FactionDBBase::exp() const {
  return exp_;
}
inline void FactionDBBase::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint64 create_time = 9;
inline bool FactionDBBase::has_create_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionDBBase::set_has_create_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionDBBase::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionDBBase::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 FactionDBBase::create_time() const {
  return create_time_;
}
inline void FactionDBBase::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint64 proxy_id = 10;
inline bool FactionDBBase::has_proxy_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionDBBase::set_has_proxy_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionDBBase::clear_has_proxy_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionDBBase::clear_proxy_id() {
  proxy_id_ = GOOGLE_ULONGLONG(0);
  clear_has_proxy_id();
}
inline ::google::protobuf::uint64 FactionDBBase::proxy_id() const {
  return proxy_id_;
}
inline void FactionDBBase::set_proxy_id(::google::protobuf::uint64 value) {
  set_has_proxy_id();
  proxy_id_ = value;
}

// optional uint64 proxy_time = 11;
inline bool FactionDBBase::has_proxy_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FactionDBBase::set_has_proxy_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FactionDBBase::clear_has_proxy_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FactionDBBase::clear_proxy_time() {
  proxy_time_ = GOOGLE_ULONGLONG(0);
  clear_has_proxy_time();
}
inline ::google::protobuf::uint64 FactionDBBase::proxy_time() const {
  return proxy_time_;
}
inline void FactionDBBase::set_proxy_time(::google::protobuf::uint64 value) {
  set_has_proxy_time();
  proxy_time_ = value;
}

// optional int32 grade = 12;
inline bool FactionDBBase::has_grade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FactionDBBase::set_has_grade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FactionDBBase::clear_has_grade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FactionDBBase::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 FactionDBBase::grade() const {
  return grade_;
}
inline void FactionDBBase::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional .proto_ff.FactionMultMemDBProto member = 13;
inline bool FactionDBBase::has_member() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FactionDBBase::set_has_member() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FactionDBBase::clear_has_member() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FactionDBBase::clear_member() {
  if (member_ != NULL) member_->::proto_ff::FactionMultMemDBProto::Clear();
  clear_has_member();
}
inline const ::proto_ff::FactionMultMemDBProto& FactionDBBase::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::proto_ff::FactionMultMemDBProto* FactionDBBase::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::proto_ff::FactionMultMemDBProto;
  return member_;
}
inline ::proto_ff::FactionMultMemDBProto* FactionDBBase::release_member() {
  clear_has_member();
  ::proto_ff::FactionMultMemDBProto* temp = member_;
  member_ = NULL;
  return temp;
}
inline void FactionDBBase::set_allocated_member(::proto_ff::FactionMultMemDBProto* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// optional .proto_ff.FactionMultApplyDBProto apply = 14;
inline bool FactionDBBase::has_apply() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FactionDBBase::set_has_apply() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FactionDBBase::clear_has_apply() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FactionDBBase::clear_apply() {
  if (apply_ != NULL) apply_->::proto_ff::FactionMultApplyDBProto::Clear();
  clear_has_apply();
}
inline const ::proto_ff::FactionMultApplyDBProto& FactionDBBase::apply() const {
  return apply_ != NULL ? *apply_ : *default_instance_->apply_;
}
inline ::proto_ff::FactionMultApplyDBProto* FactionDBBase::mutable_apply() {
  set_has_apply();
  if (apply_ == NULL) apply_ = new ::proto_ff::FactionMultApplyDBProto;
  return apply_;
}
inline ::proto_ff::FactionMultApplyDBProto* FactionDBBase::release_apply() {
  clear_has_apply();
  ::proto_ff::FactionMultApplyDBProto* temp = apply_;
  apply_ = NULL;
  return temp;
}
inline void FactionDBBase::set_allocated_apply(::proto_ff::FactionMultApplyDBProto* apply) {
  delete apply_;
  apply_ = apply;
  if (apply) {
    set_has_apply();
  } else {
    clear_has_apply();
  }
}

// optional .proto_ff.FactionMutRecordDBProto record = 15;
inline bool FactionDBBase::has_record() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FactionDBBase::set_has_record() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FactionDBBase::clear_has_record() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FactionDBBase::clear_record() {
  if (record_ != NULL) record_->::proto_ff::FactionMutRecordDBProto::Clear();
  clear_has_record();
}
inline const ::proto_ff::FactionMutRecordDBProto& FactionDBBase::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::proto_ff::FactionMutRecordDBProto* FactionDBBase::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::proto_ff::FactionMutRecordDBProto;
  return record_;
}
inline ::proto_ff::FactionMutRecordDBProto* FactionDBBase::release_record() {
  clear_has_record();
  ::proto_ff::FactionMutRecordDBProto* temp = record_;
  record_ = NULL;
  return temp;
}
inline void FactionDBBase::set_allocated_record(::proto_ff::FactionMutRecordDBProto* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
}

// optional int32 apply_type = 16;
inline bool FactionDBBase::has_apply_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FactionDBBase::set_has_apply_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FactionDBBase::clear_has_apply_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FactionDBBase::clear_apply_type() {
  apply_type_ = 0;
  clear_has_apply_type();
}
inline ::google::protobuf::int32 FactionDBBase::apply_type() const {
  return apply_type_;
}
inline void FactionDBBase::set_apply_type(::google::protobuf::int32 value) {
  set_has_apply_type();
  apply_type_ = value;
}

// optional int32 apply_lev = 17;
inline bool FactionDBBase::has_apply_lev() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FactionDBBase::set_has_apply_lev() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FactionDBBase::clear_has_apply_lev() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FactionDBBase::clear_apply_lev() {
  apply_lev_ = 0;
  clear_has_apply_lev();
}
inline ::google::protobuf::int32 FactionDBBase::apply_lev() const {
  return apply_lev_;
}
inline void FactionDBBase::set_apply_lev(::google::protobuf::int32 value) {
  set_has_apply_lev();
  apply_lev_ = value;
}

// optional uint64 apply_fight = 18;
inline bool FactionDBBase::has_apply_fight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FactionDBBase::set_has_apply_fight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FactionDBBase::clear_has_apply_fight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FactionDBBase::clear_apply_fight() {
  apply_fight_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_fight();
}
inline ::google::protobuf::uint64 FactionDBBase::apply_fight() const {
  return apply_fight_;
}
inline void FactionDBBase::set_apply_fight(::google::protobuf::uint64 value) {
  set_has_apply_fight();
  apply_fight_ = value;
}

// -------------------------------------------------------------------

// FactionBeastHarmDBProto

// optional uint64 cid = 1;
inline bool FactionBeastHarmDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionBeastHarmDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionBeastHarmDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionBeastHarmDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionBeastHarmDBProto::cid() const {
  return cid_;
}
inline void FactionBeastHarmDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int64 harm = 2;
inline bool FactionBeastHarmDBProto::has_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionBeastHarmDBProto::set_has_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionBeastHarmDBProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionBeastHarmDBProto::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 FactionBeastHarmDBProto::harm() const {
  return harm_;
}
inline void FactionBeastHarmDBProto::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// FactionBeastDBData

// repeated .proto_ff.FactionBeastHarmDBProto harm = 1;
inline int FactionBeastDBData::harm_size() const {
  return harm_.size();
}
inline void FactionBeastDBData::clear_harm() {
  harm_.Clear();
}
inline const ::proto_ff::FactionBeastHarmDBProto& FactionBeastDBData::harm(int index) const {
  return harm_.Get(index);
}
inline ::proto_ff::FactionBeastHarmDBProto* FactionBeastDBData::mutable_harm(int index) {
  return harm_.Mutable(index);
}
inline ::proto_ff::FactionBeastHarmDBProto* FactionBeastDBData::add_harm() {
  return harm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastHarmDBProto >&
FactionBeastDBData::harm() const {
  return harm_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastHarmDBProto >*
FactionBeastDBData::mutable_harm() {
  return &harm_;
}

// optional uint32 star = 2;
inline bool FactionBeastDBData::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionBeastDBData::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionBeastDBData::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionBeastDBData::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 FactionBeastDBData::star() const {
  return star_;
}
inline void FactionBeastDBData::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 is_open = 3;
inline bool FactionBeastDBData::has_is_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionBeastDBData::set_has_is_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionBeastDBData::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionBeastDBData::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 FactionBeastDBData::is_open() const {
  return is_open_;
}
inline void FactionBeastDBData::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional uint32 tribute = 4;
inline bool FactionBeastDBData::has_tribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionBeastDBData::set_has_tribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionBeastDBData::clear_has_tribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionBeastDBData::clear_tribute() {
  tribute_ = 0u;
  clear_has_tribute();
}
inline ::google::protobuf::uint32 FactionBeastDBData::tribute() const {
  return tribute_;
}
inline void FactionBeastDBData::set_tribute(::google::protobuf::uint32 value) {
  set_has_tribute();
  tribute_ = value;
}

// optional uint32 today_count = 5;
inline bool FactionBeastDBData::has_today_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionBeastDBData::set_has_today_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionBeastDBData::clear_has_today_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionBeastDBData::clear_today_count() {
  today_count_ = 0u;
  clear_has_today_count();
}
inline ::google::protobuf::uint32 FactionBeastDBData::today_count() const {
  return today_count_;
}
inline void FactionBeastDBData::set_today_count(::google::protobuf::uint32 value) {
  set_has_today_count();
  today_count_ = value;
}

// optional uint64 today_fresh = 6;
inline bool FactionBeastDBData::has_today_fresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionBeastDBData::set_has_today_fresh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionBeastDBData::clear_has_today_fresh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionBeastDBData::clear_today_fresh() {
  today_fresh_ = GOOGLE_ULONGLONG(0);
  clear_has_today_fresh();
}
inline ::google::protobuf::uint64 FactionBeastDBData::today_fresh() const {
  return today_fresh_;
}
inline void FactionBeastDBData::set_today_fresh(::google::protobuf::uint64 value) {
  set_has_today_fresh();
  today_fresh_ = value;
}

// optional uint32 week_count = 7;
inline bool FactionBeastDBData::has_week_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionBeastDBData::set_has_week_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionBeastDBData::clear_has_week_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionBeastDBData::clear_week_count() {
  week_count_ = 0u;
  clear_has_week_count();
}
inline ::google::protobuf::uint32 FactionBeastDBData::week_count() const {
  return week_count_;
}
inline void FactionBeastDBData::set_week_count(::google::protobuf::uint32 value) {
  set_has_week_count();
  week_count_ = value;
}

// optional uint64 week_fresh = 8;
inline bool FactionBeastDBData::has_week_fresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionBeastDBData::set_has_week_fresh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionBeastDBData::clear_has_week_fresh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionBeastDBData::clear_week_fresh() {
  week_fresh_ = GOOGLE_ULONGLONG(0);
  clear_has_week_fresh();
}
inline ::google::protobuf::uint64 FactionBeastDBData::week_fresh() const {
  return week_fresh_;
}
inline void FactionBeastDBData::set_week_fresh(::google::protobuf::uint64 value) {
  set_has_week_fresh();
  week_fresh_ = value;
}

// optional int32 level = 9;
inline bool FactionBeastDBData::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionBeastDBData::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionBeastDBData::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionBeastDBData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionBeastDBData::level() const {
  return level_;
}
inline void FactionBeastDBData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 opentime = 10;
inline bool FactionBeastDBData::has_opentime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionBeastDBData::set_has_opentime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionBeastDBData::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionBeastDBData::clear_opentime() {
  opentime_ = GOOGLE_ULONGLONG(0);
  clear_has_opentime();
}
inline ::google::protobuf::uint64 FactionBeastDBData::opentime() const {
  return opentime_;
}
inline void FactionBeastDBData::set_opentime(::google::protobuf::uint64 value) {
  set_has_opentime();
  opentime_ = value;
}

// -------------------------------------------------------------------

// FactionGuardHarmDBProto

// optional uint64 cid = 1;
inline bool FactionGuardHarmDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionGuardHarmDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionGuardHarmDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionGuardHarmDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionGuardHarmDBProto::cid() const {
  return cid_;
}
inline void FactionGuardHarmDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionGuardHarmDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionGuardHarmDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionGuardHarmDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionGuardHarmDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionGuardHarmDBProto::name() const {
  return *name_;
}
inline void FactionGuardHarmDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionGuardHarmDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionGuardHarmDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionGuardHarmDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionGuardHarmDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionGuardHarmDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 harm = 3;
inline bool FactionGuardHarmDBProto::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionGuardHarmDBProto::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionGuardHarmDBProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionGuardHarmDBProto::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 FactionGuardHarmDBProto::harm() const {
  return harm_;
}
inline void FactionGuardHarmDBProto::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// FactionGuardDBData

// repeated .proto_ff.FactionGuardHarmDBProto harm = 1;
inline int FactionGuardDBData::harm_size() const {
  return harm_.size();
}
inline void FactionGuardDBData::clear_harm() {
  harm_.Clear();
}
inline const ::proto_ff::FactionGuardHarmDBProto& FactionGuardDBData::harm(int index) const {
  return harm_.Get(index);
}
inline ::proto_ff::FactionGuardHarmDBProto* FactionGuardDBData::mutable_harm(int index) {
  return harm_.Mutable(index);
}
inline ::proto_ff::FactionGuardHarmDBProto* FactionGuardDBData::add_harm() {
  return harm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >&
FactionGuardDBData::harm() const {
  return harm_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >*
FactionGuardDBData::mutable_harm() {
  return &harm_;
}

// repeated .proto_ff.FactionGuardHarmDBProto old_harm = 2;
inline int FactionGuardDBData::old_harm_size() const {
  return old_harm_.size();
}
inline void FactionGuardDBData::clear_old_harm() {
  old_harm_.Clear();
}
inline const ::proto_ff::FactionGuardHarmDBProto& FactionGuardDBData::old_harm(int index) const {
  return old_harm_.Get(index);
}
inline ::proto_ff::FactionGuardHarmDBProto* FactionGuardDBData::mutable_old_harm(int index) {
  return old_harm_.Mutable(index);
}
inline ::proto_ff::FactionGuardHarmDBProto* FactionGuardDBData::add_old_harm() {
  return old_harm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >&
FactionGuardDBData::old_harm() const {
  return old_harm_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardHarmDBProto >*
FactionGuardDBData::mutable_old_harm() {
  return &old_harm_;
}

// optional bool can_enter = 3;
inline bool FactionGuardDBData::has_can_enter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionGuardDBData::set_has_can_enter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionGuardDBData::clear_has_can_enter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionGuardDBData::clear_can_enter() {
  can_enter_ = false;
  clear_has_can_enter();
}
inline bool FactionGuardDBData::can_enter() const {
  return can_enter_;
}
inline void FactionGuardDBData::set_can_enter(bool value) {
  set_has_can_enter();
  can_enter_ = value;
}

// -------------------------------------------------------------------

// FactionMoyu

// optional uint64 week_harm = 1;
inline bool FactionMoyu::has_week_harm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyu::set_has_week_harm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyu::clear_has_week_harm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyu::clear_week_harm() {
  week_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_week_harm();
}
inline ::google::protobuf::uint64 FactionMoyu::week_harm() const {
  return week_harm_;
}
inline void FactionMoyu::set_week_harm(::google::protobuf::uint64 value) {
  set_has_week_harm();
  week_harm_ = value;
}

// optional uint64 last_week_harm = 2;
inline bool FactionMoyu::has_last_week_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyu::set_has_last_week_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyu::clear_has_last_week_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyu::clear_last_week_harm() {
  last_week_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_last_week_harm();
}
inline ::google::protobuf::uint64 FactionMoyu::last_week_harm() const {
  return last_week_harm_;
}
inline void FactionMoyu::set_last_week_harm(::google::protobuf::uint64 value) {
  set_has_last_week_harm();
  last_week_harm_ = value;
}

// optional int32 cur_layer = 3;
inline bool FactionMoyu::has_cur_layer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMoyu::set_has_cur_layer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMoyu::clear_has_cur_layer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMoyu::clear_cur_layer() {
  cur_layer_ = 0;
  clear_has_cur_layer();
}
inline ::google::protobuf::int32 FactionMoyu::cur_layer() const {
  return cur_layer_;
}
inline void FactionMoyu::set_cur_layer(::google::protobuf::int32 value) {
  set_has_cur_layer();
  cur_layer_ = value;
}

// optional uint64 cur_hp = 4;
inline bool FactionMoyu::has_cur_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMoyu::set_has_cur_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMoyu::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMoyu::clear_cur_hp() {
  cur_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_hp();
}
inline ::google::protobuf::uint64 FactionMoyu::cur_hp() const {
  return cur_hp_;
}
inline void FactionMoyu::set_cur_hp(::google::protobuf::uint64 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// optional uint64 max_hp = 5;
inline bool FactionMoyu::has_max_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMoyu::set_has_max_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMoyu::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMoyu::clear_max_hp() {
  max_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_max_hp();
}
inline ::google::protobuf::uint64 FactionMoyu::max_hp() const {
  return max_hp_;
}
inline void FactionMoyu::set_max_hp(::google::protobuf::uint64 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional uint64 harm_time = 6;
inline bool FactionMoyu::has_harm_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionMoyu::set_has_harm_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionMoyu::clear_has_harm_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionMoyu::clear_harm_time() {
  harm_time_ = GOOGLE_ULONGLONG(0);
  clear_has_harm_time();
}
inline ::google::protobuf::uint64 FactionMoyu::harm_time() const {
  return harm_time_;
}
inline void FactionMoyu::set_harm_time(::google::protobuf::uint64 value) {
  set_has_harm_time();
  harm_time_ = value;
}

// optional uint64 refresh_time = 7;
inline bool FactionMoyu::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionMoyu::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionMoyu::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionMoyu::clear_refresh_time() {
  refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_refresh_time();
}
inline ::google::protobuf::uint64 FactionMoyu::refresh_time() const {
  return refresh_time_;
}
inline void FactionMoyu::set_refresh_time(::google::protobuf::uint64 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// optional int32 pass_layer = 8;
inline bool FactionMoyu::has_pass_layer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionMoyu::set_has_pass_layer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionMoyu::clear_has_pass_layer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionMoyu::clear_pass_layer() {
  pass_layer_ = 0;
  clear_has_pass_layer();
}
inline ::google::protobuf::int32 FactionMoyu::pass_layer() const {
  return pass_layer_;
}
inline void FactionMoyu::set_pass_layer(::google::protobuf::int32 value) {
  set_has_pass_layer();
  pass_layer_ = value;
}

// -------------------------------------------------------------------

// FactionMagRecordDBData

// optional int32 mag_id = 1;
inline bool FactionMagRecordDBData::has_mag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMagRecordDBData::set_has_mag_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMagRecordDBData::clear_has_mag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMagRecordDBData::clear_mag_id() {
  mag_id_ = 0;
  clear_has_mag_id();
}
inline ::google::protobuf::int32 FactionMagRecordDBData::mag_id() const {
  return mag_id_;
}
inline void FactionMagRecordDBData::set_mag_id(::google::protobuf::int32 value) {
  set_has_mag_id();
  mag_id_ = value;
}

// optional int32 lamp_id = 2;
inline bool FactionMagRecordDBData::has_lamp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMagRecordDBData::set_has_lamp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMagRecordDBData::clear_has_lamp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMagRecordDBData::clear_lamp_id() {
  lamp_id_ = 0;
  clear_has_lamp_id();
}
inline ::google::protobuf::int32 FactionMagRecordDBData::lamp_id() const {
  return lamp_id_;
}
inline void FactionMagRecordDBData::set_lamp_id(::google::protobuf::int32 value) {
  set_has_lamp_id();
  lamp_id_ = value;
}

// optional int32 guard_id = 3;
inline bool FactionMagRecordDBData::has_guard_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMagRecordDBData::set_has_guard_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMagRecordDBData::clear_has_guard_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMagRecordDBData::clear_guard_id() {
  guard_id_ = 0;
  clear_has_guard_id();
}
inline ::google::protobuf::int32 FactionMagRecordDBData::guard_id() const {
  return guard_id_;
}
inline void FactionMagRecordDBData::set_guard_id(::google::protobuf::int32 value) {
  set_has_guard_id();
  guard_id_ = value;
}

// optional int32 reel_id = 4;
inline bool FactionMagRecordDBData::has_reel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMagRecordDBData::set_has_reel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMagRecordDBData::clear_has_reel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMagRecordDBData::clear_reel_id() {
  reel_id_ = 0;
  clear_has_reel_id();
}
inline ::google::protobuf::int32 FactionMagRecordDBData::reel_id() const {
  return reel_id_;
}
inline void FactionMagRecordDBData::set_reel_id(::google::protobuf::int32 value) {
  set_has_reel_id();
  reel_id_ = value;
}

// optional int32 point = 5;
inline bool FactionMagRecordDBData::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMagRecordDBData::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMagRecordDBData::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMagRecordDBData::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 FactionMagRecordDBData::point() const {
  return point_;
}
inline void FactionMagRecordDBData::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// FactionDBData

// optional .proto_ff.FactionBeastDBData beast = 1;
inline bool FactionDBData::has_beast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBData::set_has_beast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBData::clear_has_beast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBData::clear_beast() {
  if (beast_ != NULL) beast_->::proto_ff::FactionBeastDBData::Clear();
  clear_has_beast();
}
inline const ::proto_ff::FactionBeastDBData& FactionDBData::beast() const {
  return beast_ != NULL ? *beast_ : *default_instance_->beast_;
}
inline ::proto_ff::FactionBeastDBData* FactionDBData::mutable_beast() {
  set_has_beast();
  if (beast_ == NULL) beast_ = new ::proto_ff::FactionBeastDBData;
  return beast_;
}
inline ::proto_ff::FactionBeastDBData* FactionDBData::release_beast() {
  clear_has_beast();
  ::proto_ff::FactionBeastDBData* temp = beast_;
  beast_ = NULL;
  return temp;
}
inline void FactionDBData::set_allocated_beast(::proto_ff::FactionBeastDBData* beast) {
  delete beast_;
  beast_ = beast;
  if (beast) {
    set_has_beast();
  } else {
    clear_has_beast();
  }
}

// optional .proto_ff.FactionGuardDBData guard = 2;
inline bool FactionDBData::has_guard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBData::set_has_guard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBData::clear_has_guard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBData::clear_guard() {
  if (guard_ != NULL) guard_->::proto_ff::FactionGuardDBData::Clear();
  clear_has_guard();
}
inline const ::proto_ff::FactionGuardDBData& FactionDBData::guard() const {
  return guard_ != NULL ? *guard_ : *default_instance_->guard_;
}
inline ::proto_ff::FactionGuardDBData* FactionDBData::mutable_guard() {
  set_has_guard();
  if (guard_ == NULL) guard_ = new ::proto_ff::FactionGuardDBData;
  return guard_;
}
inline ::proto_ff::FactionGuardDBData* FactionDBData::release_guard() {
  clear_has_guard();
  ::proto_ff::FactionGuardDBData* temp = guard_;
  guard_ = NULL;
  return temp;
}
inline void FactionDBData::set_allocated_guard(::proto_ff::FactionGuardDBData* guard) {
  delete guard_;
  guard_ = guard;
  if (guard) {
    set_has_guard();
  } else {
    clear_has_guard();
  }
}

// optional .proto_ff.FactionMoyu moyu = 3;
inline bool FactionDBData::has_moyu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDBData::set_has_moyu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDBData::clear_has_moyu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDBData::clear_moyu() {
  if (moyu_ != NULL) moyu_->::proto_ff::FactionMoyu::Clear();
  clear_has_moyu();
}
inline const ::proto_ff::FactionMoyu& FactionDBData::moyu() const {
  return moyu_ != NULL ? *moyu_ : *default_instance_->moyu_;
}
inline ::proto_ff::FactionMoyu* FactionDBData::mutable_moyu() {
  set_has_moyu();
  if (moyu_ == NULL) moyu_ = new ::proto_ff::FactionMoyu;
  return moyu_;
}
inline ::proto_ff::FactionMoyu* FactionDBData::release_moyu() {
  clear_has_moyu();
  ::proto_ff::FactionMoyu* temp = moyu_;
  moyu_ = NULL;
  return temp;
}
inline void FactionDBData::set_allocated_moyu(::proto_ff::FactionMoyu* moyu) {
  delete moyu_;
  moyu_ = moyu;
  if (moyu) {
    set_has_moyu();
  } else {
    clear_has_moyu();
  }
}

// optional .proto_ff.FactionMagRecordDBData mag_record = 4;
inline bool FactionDBData::has_mag_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDBData::set_has_mag_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDBData::clear_has_mag_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDBData::clear_mag_record() {
  if (mag_record_ != NULL) mag_record_->::proto_ff::FactionMagRecordDBData::Clear();
  clear_has_mag_record();
}
inline const ::proto_ff::FactionMagRecordDBData& FactionDBData::mag_record() const {
  return mag_record_ != NULL ? *mag_record_ : *default_instance_->mag_record_;
}
inline ::proto_ff::FactionMagRecordDBData* FactionDBData::mutable_mag_record() {
  set_has_mag_record();
  if (mag_record_ == NULL) mag_record_ = new ::proto_ff::FactionMagRecordDBData;
  return mag_record_;
}
inline ::proto_ff::FactionMagRecordDBData* FactionDBData::release_mag_record() {
  clear_has_mag_record();
  ::proto_ff::FactionMagRecordDBData* temp = mag_record_;
  mag_record_ = NULL;
  return temp;
}
inline void FactionDBData::set_allocated_mag_record(::proto_ff::FactionMagRecordDBData* mag_record) {
  delete mag_record_;
  mag_record_ = mag_record;
  if (mag_record) {
    set_has_mag_record();
  } else {
    clear_has_mag_record();
  }
}

// -------------------------------------------------------------------

// FactionAllDBData

// optional uint32 faction_id = 1;
inline bool FactionAllDBData::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionAllDBData::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionAllDBData::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionAllDBData::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionAllDBData::faction_id() const {
  return faction_id_;
}
inline void FactionAllDBData::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional .proto_ff.FactionDBBase base = 2;
inline bool FactionAllDBData::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionAllDBData::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionAllDBData::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionAllDBData::clear_base() {
  if (base_ != NULL) base_->::proto_ff::FactionDBBase::Clear();
  clear_has_base();
}
inline const ::proto_ff::FactionDBBase& FactionAllDBData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::FactionDBBase* FactionAllDBData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::FactionDBBase;
  return base_;
}
inline ::proto_ff::FactionDBBase* FactionAllDBData::release_base() {
  clear_has_base();
  ::proto_ff::FactionDBBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void FactionAllDBData::set_allocated_base(::proto_ff::FactionDBBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .proto_ff.FactionDBData data = 3;
inline bool FactionAllDBData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionAllDBData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionAllDBData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionAllDBData::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FactionDBData::Clear();
  clear_has_data();
}
inline const ::proto_ff::FactionDBData& FactionAllDBData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FactionDBData* FactionAllDBData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FactionDBData;
  return data_;
}
inline ::proto_ff::FactionDBData* FactionAllDBData::release_data() {
  clear_has_data();
  ::proto_ff::FactionDBData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FactionAllDBData::set_allocated_data(::proto_ff::FactionDBData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FactionDBMoyuRankEntry

// optional uint64 id = 1;
inline bool FactionDBMoyuRankEntry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBMoyuRankEntry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBMoyuRankEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBMoyuRankEntry::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 FactionDBMoyuRankEntry::id() const {
  return id_;
}
inline void FactionDBMoyuRankEntry::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool FactionDBMoyuRankEntry::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBMoyuRankEntry::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBMoyuRankEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBMoyuRankEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionDBMoyuRankEntry::name() const {
  return *name_;
}
inline void FactionDBMoyuRankEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionDBMoyuRankEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionDBMoyuRankEntry::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionDBMoyuRankEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionDBMoyuRankEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionDBMoyuRankEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 zid = 3;
inline bool FactionDBMoyuRankEntry::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDBMoyuRankEntry::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDBMoyuRankEntry::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDBMoyuRankEntry::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 FactionDBMoyuRankEntry::zid() const {
  return zid_;
}
inline void FactionDBMoyuRankEntry::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 harm = 4;
inline bool FactionDBMoyuRankEntry::has_harm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDBMoyuRankEntry::set_has_harm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDBMoyuRankEntry::clear_has_harm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDBMoyuRankEntry::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 FactionDBMoyuRankEntry::harm() const {
  return harm_;
}
inline void FactionDBMoyuRankEntry::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint64 harm_time = 5;
inline bool FactionDBMoyuRankEntry::has_harm_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionDBMoyuRankEntry::set_has_harm_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionDBMoyuRankEntry::clear_has_harm_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionDBMoyuRankEntry::clear_harm_time() {
  harm_time_ = GOOGLE_ULONGLONG(0);
  clear_has_harm_time();
}
inline ::google::protobuf::uint64 FactionDBMoyuRankEntry::harm_time() const {
  return harm_time_;
}
inline void FactionDBMoyuRankEntry::set_harm_time(::google::protobuf::uint64 value) {
  set_has_harm_time();
  harm_time_ = value;
}

// -------------------------------------------------------------------

// FactionDBMoyuRank

// optional int32 type = 1;
inline bool FactionDBMoyuRank::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDBMoyuRank::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDBMoyuRank::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDBMoyuRank::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FactionDBMoyuRank::type() const {
  return type_;
}
inline void FactionDBMoyuRank::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 group = 2;
inline bool FactionDBMoyuRank::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDBMoyuRank::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDBMoyuRank::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDBMoyuRank::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 FactionDBMoyuRank::group() const {
  return group_;
}
inline void FactionDBMoyuRank::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// repeated .proto_ff.FactionDBMoyuRankEntry rank = 3;
inline int FactionDBMoyuRank::rank_size() const {
  return rank_.size();
}
inline void FactionDBMoyuRank::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::FactionDBMoyuRankEntry& FactionDBMoyuRank::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::FactionDBMoyuRankEntry* FactionDBMoyuRank::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::FactionDBMoyuRankEntry* FactionDBMoyuRank::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRankEntry >&
FactionDBMoyuRank::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRankEntry >*
FactionDBMoyuRank::mutable_rank() {
  return &rank_;
}

// optional uint64 time = 4;
inline bool FactionDBMoyuRank::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDBMoyuRank::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDBMoyuRank::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDBMoyuRank::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionDBMoyuRank::time() const {
  return time_;
}
inline void FactionDBMoyuRank::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// FactionDBMoyuRankDB

// repeated .proto_ff.FactionDBMoyuRank infos = 1;
inline int FactionDBMoyuRankDB::infos_size() const {
  return infos_.size();
}
inline void FactionDBMoyuRankDB::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::FactionDBMoyuRank& FactionDBMoyuRankDB::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::FactionDBMoyuRank* FactionDBMoyuRankDB::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::FactionDBMoyuRank* FactionDBMoyuRankDB::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRank >&
FactionDBMoyuRankDB::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionDBMoyuRank >*
FactionDBMoyuRankDB::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// RoleListDBReq

// required uint64 reqid = 1;
inline bool RoleListDBReq::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleListDBReq::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleListDBReq::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleListDBReq::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
  clear_has_reqid();
}
inline ::google::protobuf::uint64 RoleListDBReq::reqid() const {
  return reqid_;
}
inline void RoleListDBReq::set_reqid(::google::protobuf::uint64 value) {
  set_has_reqid();
  reqid_ = value;
}

// required uint32 uid = 2;
inline bool RoleListDBReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleListDBReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleListDBReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleListDBReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleListDBReq::uid() const {
  return uid_;
}
inline void RoleListDBReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 gateid = 3;
inline bool RoleListDBReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleListDBReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleListDBReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleListDBReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 RoleListDBReq::gateid() const {
  return gateid_;
}
inline void RoleListDBReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 born_zid = 4;
inline bool RoleListDBReq::has_born_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleListDBReq::set_has_born_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleListDBReq::clear_has_born_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleListDBReq::clear_born_zid() {
  born_zid_ = 0u;
  clear_has_born_zid();
}
inline ::google::protobuf::uint32 RoleListDBReq::born_zid() const {
  return born_zid_;
}
inline void RoleListDBReq::set_born_zid(::google::protobuf::uint32 value) {
  set_has_born_zid();
  born_zid_ = value;
}

// -------------------------------------------------------------------

// RoleListDBRsp

// required int32 ret = 1;
inline bool RoleListDBRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleListDBRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleListDBRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleListDBRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RoleListDBRsp::ret() const {
  return ret_;
}
inline void RoleListDBRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 reqid = 2;
inline bool RoleListDBRsp::has_reqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleListDBRsp::set_has_reqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleListDBRsp::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleListDBRsp::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
  clear_has_reqid();
}
inline ::google::protobuf::uint64 RoleListDBRsp::reqid() const {
  return reqid_;
}
inline void RoleListDBRsp::set_reqid(::google::protobuf::uint64 value) {
  set_has_reqid();
  reqid_ = value;
}

// required uint32 uid = 3;
inline bool RoleListDBRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleListDBRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleListDBRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleListDBRsp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleListDBRsp::uid() const {
  return uid_;
}
inline void RoleListDBRsp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 gateid = 4;
inline bool RoleListDBRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleListDBRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleListDBRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleListDBRsp::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 RoleListDBRsp::gateid() const {
  return gateid_;
}
inline void RoleListDBRsp::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// repeated .proto_ff.RoleListDBProto role_lst = 5;
inline int RoleListDBRsp::role_lst_size() const {
  return role_lst_.size();
}
inline void RoleListDBRsp::clear_role_lst() {
  role_lst_.Clear();
}
inline const ::proto_ff::RoleListDBProto& RoleListDBRsp::role_lst(int index) const {
  return role_lst_.Get(index);
}
inline ::proto_ff::RoleListDBProto* RoleListDBRsp::mutable_role_lst(int index) {
  return role_lst_.Mutable(index);
}
inline ::proto_ff::RoleListDBProto* RoleListDBRsp::add_role_lst() {
  return role_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleListDBProto >&
RoleListDBRsp::role_lst() const {
  return role_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleListDBProto >*
RoleListDBRsp::mutable_role_lst() {
  return &role_lst_;
}

// optional uint32 regnum = 6;
inline bool RoleListDBRsp::has_regnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleListDBRsp::set_has_regnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleListDBRsp::clear_has_regnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleListDBRsp::clear_regnum() {
  regnum_ = 0u;
  clear_has_regnum();
}
inline ::google::protobuf::uint32 RoleListDBRsp::regnum() const {
  return regnum_;
}
inline void RoleListDBRsp::set_regnum(::google::protobuf::uint32 value) {
  set_has_regnum();
  regnum_ = value;
}

// -------------------------------------------------------------------

// CreateRoleDBReq

// required uint64 reqid = 1;
inline bool CreateRoleDBReq::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleDBReq::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleDBReq::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleDBReq::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
  clear_has_reqid();
}
inline ::google::protobuf::uint64 CreateRoleDBReq::reqid() const {
  return reqid_;
}
inline void CreateRoleDBReq::set_reqid(::google::protobuf::uint64 value) {
  set_has_reqid();
  reqid_ = value;
}

// required uint32 zid = 2;
inline bool CreateRoleDBReq::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleDBReq::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleDBReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleDBReq::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 CreateRoleDBReq::zid() const {
  return zid_;
}
inline void CreateRoleDBReq::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required uint32 gateid = 3;
inline bool CreateRoleDBReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleDBReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleDBReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleDBReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 CreateRoleDBReq::gateid() const {
  return gateid_;
}
inline void CreateRoleDBReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required .proto_ff.RoleDBData data = 4;
inline bool CreateRoleDBReq::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateRoleDBReq::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateRoleDBReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateRoleDBReq::clear_data() {
  if (data_ != NULL) data_->::proto_ff::RoleDBData::Clear();
  clear_has_data();
}
inline const ::proto_ff::RoleDBData& CreateRoleDBReq::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::RoleDBData* CreateRoleDBReq::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::RoleDBData;
  return data_;
}
inline ::proto_ff::RoleDBData* CreateRoleDBReq::release_data() {
  clear_has_data();
  ::proto_ff::RoleDBData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void CreateRoleDBReq::set_allocated_data(::proto_ff::RoleDBData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional uint32 uid = 5;
inline bool CreateRoleDBReq::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateRoleDBReq::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateRoleDBReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateRoleDBReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CreateRoleDBReq::uid() const {
  return uid_;
}
inline void CreateRoleDBReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 channel_id = 6;
inline bool CreateRoleDBReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateRoleDBReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateRoleDBReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateRoleDBReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CreateRoleDBReq::channel_id() const {
  return channel_id_;
}
inline void CreateRoleDBReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional uint32 zone_mid = 7;
inline bool CreateRoleDBReq::has_zone_mid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateRoleDBReq::set_has_zone_mid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateRoleDBReq::clear_has_zone_mid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateRoleDBReq::clear_zone_mid() {
  zone_mid_ = 0u;
  clear_has_zone_mid();
}
inline ::google::protobuf::uint32 CreateRoleDBReq::zone_mid() const {
  return zone_mid_;
}
inline void CreateRoleDBReq::set_zone_mid(::google::protobuf::uint32 value) {
  set_has_zone_mid();
  zone_mid_ = value;
}

// optional uint32 born_zid = 8;
inline bool CreateRoleDBReq::has_born_zid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateRoleDBReq::set_has_born_zid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateRoleDBReq::clear_has_born_zid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateRoleDBReq::clear_born_zid() {
  born_zid_ = 0u;
  clear_has_born_zid();
}
inline ::google::protobuf::uint32 CreateRoleDBReq::born_zid() const {
  return born_zid_;
}
inline void CreateRoleDBReq::set_born_zid(::google::protobuf::uint32 value) {
  set_has_born_zid();
  born_zid_ = value;
}

// -------------------------------------------------------------------

// CreateRoleDBRsp

// required int32 ret = 1;
inline bool CreateRoleDBRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleDBRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleDBRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleDBRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 CreateRoleDBRsp::ret() const {
  return ret_;
}
inline void CreateRoleDBRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 reqid = 2;
inline bool CreateRoleDBRsp::has_reqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleDBRsp::set_has_reqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleDBRsp::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleDBRsp::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
  clear_has_reqid();
}
inline ::google::protobuf::uint64 CreateRoleDBRsp::reqid() const {
  return reqid_;
}
inline void CreateRoleDBRsp::set_reqid(::google::protobuf::uint64 value) {
  set_has_reqid();
  reqid_ = value;
}

// required uint32 uid = 3;
inline bool CreateRoleDBRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleDBRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleDBRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleDBRsp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CreateRoleDBRsp::uid() const {
  return uid_;
}
inline void CreateRoleDBRsp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 gateid = 4;
inline bool CreateRoleDBRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateRoleDBRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateRoleDBRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateRoleDBRsp::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 CreateRoleDBRsp::gateid() const {
  return gateid_;
}
inline void CreateRoleDBRsp::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// optional .proto_ff.RoleListDBProto info = 5;
inline bool CreateRoleDBRsp::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateRoleDBRsp::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateRoleDBRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateRoleDBRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::RoleListDBProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::RoleListDBProto& CreateRoleDBRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::RoleListDBProto* CreateRoleDBRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::RoleListDBProto;
  return info_;
}
inline ::proto_ff::RoleListDBProto* CreateRoleDBRsp::release_info() {
  clear_has_info();
  ::proto_ff::RoleListDBProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CreateRoleDBRsp::set_allocated_info(::proto_ff::RoleListDBProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 born_zid = 6;
inline bool CreateRoleDBRsp::has_born_zid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateRoleDBRsp::set_has_born_zid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateRoleDBRsp::clear_has_born_zid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateRoleDBRsp::clear_born_zid() {
  born_zid_ = 0u;
  clear_has_born_zid();
}
inline ::google::protobuf::uint32 CreateRoleDBRsp::born_zid() const {
  return born_zid_;
}
inline void CreateRoleDBRsp::set_born_zid(::google::protobuf::uint32 value) {
  set_has_born_zid();
  born_zid_ = value;
}

// optional .proto_ff.CenterRoleProto simple = 7;
inline bool CreateRoleDBRsp::has_simple() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateRoleDBRsp::set_has_simple() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateRoleDBRsp::clear_has_simple() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateRoleDBRsp::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::CenterRoleProto::Clear();
  clear_has_simple();
}
inline const ::proto_ff::CenterRoleProto& CreateRoleDBRsp::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::CenterRoleProto* CreateRoleDBRsp::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::CenterRoleProto;
  return simple_;
}
inline ::proto_ff::CenterRoleProto* CreateRoleDBRsp::release_simple() {
  clear_has_simple();
  ::proto_ff::CenterRoleProto* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void CreateRoleDBRsp::set_allocated_simple(::proto_ff::CenterRoleProto* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// -------------------------------------------------------------------

// RoleInfoDBReq

// required uint64 reqid = 1;
inline bool RoleInfoDBReq::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfoDBReq::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfoDBReq::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfoDBReq::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
  clear_has_reqid();
}
inline ::google::protobuf::uint64 RoleInfoDBReq::reqid() const {
  return reqid_;
}
inline void RoleInfoDBReq::set_reqid(::google::protobuf::uint64 value) {
  set_has_reqid();
  reqid_ = value;
}

// required uint64 cid = 2;
inline bool RoleInfoDBReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfoDBReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfoDBReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfoDBReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleInfoDBReq::cid() const {
  return cid_;
}
inline void RoleInfoDBReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 change = 3;
inline bool RoleInfoDBReq::has_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleInfoDBReq::set_has_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleInfoDBReq::clear_has_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleInfoDBReq::clear_change() {
  change_ = 0;
  clear_has_change();
}
inline ::google::protobuf::int32 RoleInfoDBReq::change() const {
  return change_;
}
inline void RoleInfoDBReq::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
}

// -------------------------------------------------------------------

// RoleInfoDBRsp

// required int32 ret = 1;
inline bool RoleInfoDBRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfoDBRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfoDBRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfoDBRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RoleInfoDBRsp::ret() const {
  return ret_;
}
inline void RoleInfoDBRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 reqid = 2;
inline bool RoleInfoDBRsp::has_reqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfoDBRsp::set_has_reqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfoDBRsp::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfoDBRsp::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
  clear_has_reqid();
}
inline ::google::protobuf::uint64 RoleInfoDBRsp::reqid() const {
  return reqid_;
}
inline void RoleInfoDBRsp::set_reqid(::google::protobuf::uint64 value) {
  set_has_reqid();
  reqid_ = value;
}

// required uint64 cid = 3;
inline bool RoleInfoDBRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleInfoDBRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleInfoDBRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleInfoDBRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleInfoDBRsp::cid() const {
  return cid_;
}
inline void RoleInfoDBRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 change = 4;
inline bool RoleInfoDBRsp::has_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleInfoDBRsp::set_has_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleInfoDBRsp::clear_has_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleInfoDBRsp::clear_change() {
  change_ = 0;
  clear_has_change();
}
inline ::google::protobuf::int32 RoleInfoDBRsp::change() const {
  return change_;
}
inline void RoleInfoDBRsp::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
}

// optional .proto_ff.RoleDBData info = 5;
inline bool RoleInfoDBRsp::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleInfoDBRsp::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleInfoDBRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleInfoDBRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::RoleDBData::Clear();
  clear_has_info();
}
inline const ::proto_ff::RoleDBData& RoleInfoDBRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::RoleDBData* RoleInfoDBRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::RoleDBData;
  return info_;
}
inline ::proto_ff::RoleDBData* RoleInfoDBRsp::release_info() {
  clear_has_info();
  ::proto_ff::RoleDBData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void RoleInfoDBRsp::set_allocated_info(::proto_ff::RoleDBData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// RoleInfoUpdateDBReq

// required uint64 cid = 1;
inline bool RoleInfoUpdateDBReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfoUpdateDBReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfoUpdateDBReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfoUpdateDBReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleInfoUpdateDBReq::cid() const {
  return cid_;
}
inline void RoleInfoUpdateDBReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 uid = 2;
inline bool RoleInfoUpdateDBReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfoUpdateDBReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfoUpdateDBReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfoUpdateDBReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleInfoUpdateDBReq::uid() const {
  return uid_;
}
inline void RoleInfoUpdateDBReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.RoleDBData info = 3;
inline bool RoleInfoUpdateDBReq::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleInfoUpdateDBReq::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleInfoUpdateDBReq::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleInfoUpdateDBReq::clear_info() {
  if (info_ != NULL) info_->::proto_ff::RoleDBData::Clear();
  clear_has_info();
}
inline const ::proto_ff::RoleDBData& RoleInfoUpdateDBReq::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::RoleDBData* RoleInfoUpdateDBReq::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::RoleDBData;
  return info_;
}
inline ::proto_ff::RoleDBData* RoleInfoUpdateDBReq::release_info() {
  clear_has_info();
  ::proto_ff::RoleDBData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void RoleInfoUpdateDBReq::set_allocated_info(::proto_ff::RoleDBData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// RoleChgNameDBReq

// required uint64 cid = 1;
inline bool RoleChgNameDBReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleChgNameDBReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleChgNameDBReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleChgNameDBReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleChgNameDBReq::cid() const {
  return cid_;
}
inline void RoleChgNameDBReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool RoleChgNameDBReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleChgNameDBReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleChgNameDBReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleChgNameDBReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleChgNameDBReq::name() const {
  return *name_;
}
inline void RoleChgNameDBReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleChgNameDBReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleChgNameDBReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleChgNameDBReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleChgNameDBReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleChgNameDBReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoleChgNameDBRsp

// required int32 ret = 1;
inline bool RoleChgNameDBRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleChgNameDBRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleChgNameDBRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleChgNameDBRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RoleChgNameDBRsp::ret() const {
  return ret_;
}
inline void RoleChgNameDBRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 cid = 2;
inline bool RoleChgNameDBRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleChgNameDBRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleChgNameDBRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleChgNameDBRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleChgNameDBRsp::cid() const {
  return cid_;
}
inline void RoleChgNameDBRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 3;
inline bool RoleChgNameDBRsp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleChgNameDBRsp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleChgNameDBRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleChgNameDBRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleChgNameDBRsp::name() const {
  return *name_;
}
inline void RoleChgNameDBRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleChgNameDBRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleChgNameDBRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleChgNameDBRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleChgNameDBRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleChgNameDBRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoleSimpleListDBReq

// -------------------------------------------------------------------

// RoleSimpleListDBRsp

// required int32 ret = 1;
inline bool RoleSimpleListDBRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleSimpleListDBRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleSimpleListDBRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleSimpleListDBRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RoleSimpleListDBRsp::ret() const {
  return ret_;
}
inline void RoleSimpleListDBRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .proto_ff.CenterRoleProto info = 2;
inline int RoleSimpleListDBRsp::info_size() const {
  return info_.size();
}
inline void RoleSimpleListDBRsp::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::CenterRoleProto& RoleSimpleListDBRsp::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::CenterRoleProto* RoleSimpleListDBRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::CenterRoleProto* RoleSimpleListDBRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CenterRoleProto >&
RoleSimpleListDBRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CenterRoleProto >*
RoleSimpleListDBRsp::mutable_info() {
  return &info_;
}

// optional int32 finish_flag = 3;
inline bool RoleSimpleListDBRsp::has_finish_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleSimpleListDBRsp::set_has_finish_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleSimpleListDBRsp::clear_has_finish_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleSimpleListDBRsp::clear_finish_flag() {
  finish_flag_ = 0;
  clear_has_finish_flag();
}
inline ::google::protobuf::int32 RoleSimpleListDBRsp::finish_flag() const {
  return finish_flag_;
}
inline void RoleSimpleListDBRsp::set_finish_flag(::google::protobuf::int32 value) {
  set_has_finish_flag();
  finish_flag_ = value;
}

// -------------------------------------------------------------------

// CreatureTransLogicDBReq

// optional bytes trans_data = 1;
inline bool CreatureTransLogicDBReq::has_trans_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureTransLogicDBReq::set_has_trans_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureTransLogicDBReq::clear_has_trans_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureTransLogicDBReq::clear_trans_data() {
  if (trans_data_ != &::google::protobuf::internal::kEmptyString) {
    trans_data_->clear();
  }
  clear_has_trans_data();
}
inline const ::std::string& CreatureTransLogicDBReq::trans_data() const {
  return *trans_data_;
}
inline void CreatureTransLogicDBReq::set_trans_data(const ::std::string& value) {
  set_has_trans_data();
  if (trans_data_ == &::google::protobuf::internal::kEmptyString) {
    trans_data_ = new ::std::string;
  }
  trans_data_->assign(value);
}
inline void CreatureTransLogicDBReq::set_trans_data(const char* value) {
  set_has_trans_data();
  if (trans_data_ == &::google::protobuf::internal::kEmptyString) {
    trans_data_ = new ::std::string;
  }
  trans_data_->assign(value);
}
inline void CreatureTransLogicDBReq::set_trans_data(const void* value, size_t size) {
  set_has_trans_data();
  if (trans_data_ == &::google::protobuf::internal::kEmptyString) {
    trans_data_ = new ::std::string;
  }
  trans_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatureTransLogicDBReq::mutable_trans_data() {
  set_has_trans_data();
  if (trans_data_ == &::google::protobuf::internal::kEmptyString) {
    trans_data_ = new ::std::string;
  }
  return trans_data_;
}
inline ::std::string* CreatureTransLogicDBReq::release_trans_data() {
  clear_has_trans_data();
  if (trans_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trans_data_;
    trans_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatureTransLogicDBReq::set_allocated_trans_data(::std::string* trans_data) {
  if (trans_data_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_data_;
  }
  if (trans_data) {
    set_has_trans_data();
    trans_data_ = trans_data;
  } else {
    clear_has_trans_data();
    trans_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreatureTransLogicDBRsp

// required int32 retcode = 1;
inline bool CreatureTransLogicDBRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureTransLogicDBRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureTransLogicDBRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureTransLogicDBRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 CreatureTransLogicDBRsp::retcode() const {
  return retcode_;
}
inline void CreatureTransLogicDBRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional uint64 cid = 2;
inline bool CreatureTransLogicDBRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatureTransLogicDBRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatureTransLogicDBRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatureTransLogicDBRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureTransLogicDBRsp::cid() const {
  return cid_;
}
inline void CreatureTransLogicDBRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// NewMailDBInfo

// repeated .proto_ff.MailInfo data = 1;
inline int NewMailDBInfo::data_size() const {
  return data_.size();
}
inline void NewMailDBInfo::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::MailInfo& NewMailDBInfo::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::MailInfo* NewMailDBInfo::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::MailInfo* NewMailDBInfo::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >&
NewMailDBInfo::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >*
NewMailDBInfo::mutable_data() {
  return &data_;
}

// optional int32 result = 2;
inline bool NewMailDBInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewMailDBInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewMailDBInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewMailDBInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NewMailDBInfo::result() const {
  return result_;
}
inline void NewMailDBInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// MailDBOperateInfo

// repeated uint32 mid_lst = 1;
inline int MailDBOperateInfo::mid_lst_size() const {
  return mid_lst_.size();
}
inline void MailDBOperateInfo::clear_mid_lst() {
  mid_lst_.Clear();
}
inline ::google::protobuf::uint32 MailDBOperateInfo::mid_lst(int index) const {
  return mid_lst_.Get(index);
}
inline void MailDBOperateInfo::set_mid_lst(int index, ::google::protobuf::uint32 value) {
  mid_lst_.Set(index, value);
}
inline void MailDBOperateInfo::add_mid_lst(::google::protobuf::uint32 value) {
  mid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MailDBOperateInfo::mid_lst() const {
  return mid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MailDBOperateInfo::mutable_mid_lst() {
  return &mid_lst_;
}

// optional int32 result = 2;
inline bool MailDBOperateInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailDBOperateInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailDBOperateInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailDBOperateInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MailDBOperateInfo::result() const {
  return result_;
}
inline void MailDBOperateInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SaveMailDBReq

// required uint64 charid = 1;
inline bool SaveMailDBReq::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveMailDBReq::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveMailDBReq::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveMailDBReq::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SaveMailDBReq::charid() const {
  return charid_;
}
inline void SaveMailDBReq::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional .proto_ff.NewMailDBInfo info = 2;
inline bool SaveMailDBReq::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveMailDBReq::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveMailDBReq::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveMailDBReq::clear_info() {
  if (info_ != NULL) info_->::proto_ff::NewMailDBInfo::Clear();
  clear_has_info();
}
inline const ::proto_ff::NewMailDBInfo& SaveMailDBReq::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::NewMailDBInfo* SaveMailDBReq::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::NewMailDBInfo;
  return info_;
}
inline ::proto_ff::NewMailDBInfo* SaveMailDBReq::release_info() {
  clear_has_info();
  ::proto_ff::NewMailDBInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SaveMailDBReq::set_allocated_info(::proto_ff::NewMailDBInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .proto_ff.MailDBOperateInfo del = 3;
inline bool SaveMailDBReq::has_del() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveMailDBReq::set_has_del() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveMailDBReq::clear_has_del() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveMailDBReq::clear_del() {
  if (del_ != NULL) del_->::proto_ff::MailDBOperateInfo::Clear();
  clear_has_del();
}
inline const ::proto_ff::MailDBOperateInfo& SaveMailDBReq::del() const {
  return del_ != NULL ? *del_ : *default_instance_->del_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBReq::mutable_del() {
  set_has_del();
  if (del_ == NULL) del_ = new ::proto_ff::MailDBOperateInfo;
  return del_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBReq::release_del() {
  clear_has_del();
  ::proto_ff::MailDBOperateInfo* temp = del_;
  del_ = NULL;
  return temp;
}
inline void SaveMailDBReq::set_allocated_del(::proto_ff::MailDBOperateInfo* del) {
  delete del_;
  del_ = del;
  if (del) {
    set_has_del();
  } else {
    clear_has_del();
  }
}

// optional .proto_ff.MailDBOperateInfo fetch = 4;
inline bool SaveMailDBReq::has_fetch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveMailDBReq::set_has_fetch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveMailDBReq::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveMailDBReq::clear_fetch() {
  if (fetch_ != NULL) fetch_->::proto_ff::MailDBOperateInfo::Clear();
  clear_has_fetch();
}
inline const ::proto_ff::MailDBOperateInfo& SaveMailDBReq::fetch() const {
  return fetch_ != NULL ? *fetch_ : *default_instance_->fetch_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBReq::mutable_fetch() {
  set_has_fetch();
  if (fetch_ == NULL) fetch_ = new ::proto_ff::MailDBOperateInfo;
  return fetch_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBReq::release_fetch() {
  clear_has_fetch();
  ::proto_ff::MailDBOperateInfo* temp = fetch_;
  fetch_ = NULL;
  return temp;
}
inline void SaveMailDBReq::set_allocated_fetch(::proto_ff::MailDBOperateInfo* fetch) {
  delete fetch_;
  fetch_ = fetch;
  if (fetch) {
    set_has_fetch();
  } else {
    clear_has_fetch();
  }
}

// optional .proto_ff.MailDBOperateInfo read = 5;
inline bool SaveMailDBReq::has_read() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveMailDBReq::set_has_read() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveMailDBReq::clear_has_read() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveMailDBReq::clear_read() {
  if (read_ != NULL) read_->::proto_ff::MailDBOperateInfo::Clear();
  clear_has_read();
}
inline const ::proto_ff::MailDBOperateInfo& SaveMailDBReq::read() const {
  return read_ != NULL ? *read_ : *default_instance_->read_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBReq::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::proto_ff::MailDBOperateInfo;
  return read_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBReq::release_read() {
  clear_has_read();
  ::proto_ff::MailDBOperateInfo* temp = read_;
  read_ = NULL;
  return temp;
}
inline void SaveMailDBReq::set_allocated_read(::proto_ff::MailDBOperateInfo* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
}

// optional int32 notify = 6;
inline bool SaveMailDBReq::has_notify() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveMailDBReq::set_has_notify() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaveMailDBReq::clear_has_notify() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaveMailDBReq::clear_notify() {
  notify_ = 0;
  clear_has_notify();
}
inline ::google::protobuf::int32 SaveMailDBReq::notify() const {
  return notify_;
}
inline void SaveMailDBReq::set_notify(::google::protobuf::int32 value) {
  set_has_notify();
  notify_ = value;
}

// -------------------------------------------------------------------

// SaveMailDBRsp

// required uint64 charid = 1;
inline bool SaveMailDBRsp::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveMailDBRsp::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveMailDBRsp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveMailDBRsp::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SaveMailDBRsp::charid() const {
  return charid_;
}
inline void SaveMailDBRsp::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional .proto_ff.NewMailDBInfo info = 2;
inline bool SaveMailDBRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveMailDBRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveMailDBRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveMailDBRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::NewMailDBInfo::Clear();
  clear_has_info();
}
inline const ::proto_ff::NewMailDBInfo& SaveMailDBRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::NewMailDBInfo* SaveMailDBRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::NewMailDBInfo;
  return info_;
}
inline ::proto_ff::NewMailDBInfo* SaveMailDBRsp::release_info() {
  clear_has_info();
  ::proto_ff::NewMailDBInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SaveMailDBRsp::set_allocated_info(::proto_ff::NewMailDBInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .proto_ff.MailDBOperateInfo del = 3;
inline bool SaveMailDBRsp::has_del() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveMailDBRsp::set_has_del() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveMailDBRsp::clear_has_del() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveMailDBRsp::clear_del() {
  if (del_ != NULL) del_->::proto_ff::MailDBOperateInfo::Clear();
  clear_has_del();
}
inline const ::proto_ff::MailDBOperateInfo& SaveMailDBRsp::del() const {
  return del_ != NULL ? *del_ : *default_instance_->del_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBRsp::mutable_del() {
  set_has_del();
  if (del_ == NULL) del_ = new ::proto_ff::MailDBOperateInfo;
  return del_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBRsp::release_del() {
  clear_has_del();
  ::proto_ff::MailDBOperateInfo* temp = del_;
  del_ = NULL;
  return temp;
}
inline void SaveMailDBRsp::set_allocated_del(::proto_ff::MailDBOperateInfo* del) {
  delete del_;
  del_ = del;
  if (del) {
    set_has_del();
  } else {
    clear_has_del();
  }
}

// optional .proto_ff.MailDBOperateInfo fetch = 4;
inline bool SaveMailDBRsp::has_fetch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveMailDBRsp::set_has_fetch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveMailDBRsp::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveMailDBRsp::clear_fetch() {
  if (fetch_ != NULL) fetch_->::proto_ff::MailDBOperateInfo::Clear();
  clear_has_fetch();
}
inline const ::proto_ff::MailDBOperateInfo& SaveMailDBRsp::fetch() const {
  return fetch_ != NULL ? *fetch_ : *default_instance_->fetch_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBRsp::mutable_fetch() {
  set_has_fetch();
  if (fetch_ == NULL) fetch_ = new ::proto_ff::MailDBOperateInfo;
  return fetch_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBRsp::release_fetch() {
  clear_has_fetch();
  ::proto_ff::MailDBOperateInfo* temp = fetch_;
  fetch_ = NULL;
  return temp;
}
inline void SaveMailDBRsp::set_allocated_fetch(::proto_ff::MailDBOperateInfo* fetch) {
  delete fetch_;
  fetch_ = fetch;
  if (fetch) {
    set_has_fetch();
  } else {
    clear_has_fetch();
  }
}

// optional .proto_ff.MailDBOperateInfo read = 5;
inline bool SaveMailDBRsp::has_read() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveMailDBRsp::set_has_read() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveMailDBRsp::clear_has_read() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveMailDBRsp::clear_read() {
  if (read_ != NULL) read_->::proto_ff::MailDBOperateInfo::Clear();
  clear_has_read();
}
inline const ::proto_ff::MailDBOperateInfo& SaveMailDBRsp::read() const {
  return read_ != NULL ? *read_ : *default_instance_->read_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBRsp::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::proto_ff::MailDBOperateInfo;
  return read_;
}
inline ::proto_ff::MailDBOperateInfo* SaveMailDBRsp::release_read() {
  clear_has_read();
  ::proto_ff::MailDBOperateInfo* temp = read_;
  read_ = NULL;
  return temp;
}
inline void SaveMailDBRsp::set_allocated_read(::proto_ff::MailDBOperateInfo* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
}

// optional int32 notify = 6;
inline bool SaveMailDBRsp::has_notify() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveMailDBRsp::set_has_notify() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaveMailDBRsp::clear_has_notify() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaveMailDBRsp::clear_notify() {
  notify_ = 0;
  clear_has_notify();
}
inline ::google::protobuf::int32 SaveMailDBRsp::notify() const {
  return notify_;
}
inline void SaveMailDBRsp::set_notify(::google::protobuf::int32 value) {
  set_has_notify();
  notify_ = value;
}

// -------------------------------------------------------------------

// CharacterMailDBRequest

// optional uint64 charID = 1;
inline bool CharacterMailDBRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterMailDBRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterMailDBRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterMailDBRequest::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CharacterMailDBRequest::charid() const {
  return charid_;
}
inline void CharacterMailDBRequest::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 zone_mail_flag = 2;
inline bool CharacterMailDBRequest::has_zone_mail_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterMailDBRequest::set_has_zone_mail_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterMailDBRequest::clear_has_zone_mail_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterMailDBRequest::clear_zone_mail_flag() {
  zone_mail_flag_ = 0u;
  clear_has_zone_mail_flag();
}
inline ::google::protobuf::uint32 CharacterMailDBRequest::zone_mail_flag() const {
  return zone_mail_flag_;
}
inline void CharacterMailDBRequest::set_zone_mail_flag(::google::protobuf::uint32 value) {
  set_has_zone_mail_flag();
  zone_mail_flag_ = value;
}

// optional int32 offset = 3;
inline bool CharacterMailDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterMailDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterMailDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterMailDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 CharacterMailDBRequest::offset() const {
  return offset_;
}
inline void CharacterMailDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 reqid = 4;
inline bool CharacterMailDBRequest::has_reqid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterMailDBRequest::set_has_reqid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterMailDBRequest::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterMailDBRequest::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
inline ::google::protobuf::uint32 CharacterMailDBRequest::reqid() const {
  return reqid_;
}
inline void CharacterMailDBRequest::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
}

// -------------------------------------------------------------------

// CharacterMailDBResponse

// optional uint64 charID = 1;
inline bool CharacterMailDBResponse::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterMailDBResponse::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterMailDBResponse::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterMailDBResponse::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CharacterMailDBResponse::charid() const {
  return charid_;
}
inline void CharacterMailDBResponse::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .proto_ff.MailInfo info = 2;
inline int CharacterMailDBResponse::info_size() const {
  return info_.size();
}
inline void CharacterMailDBResponse::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::MailInfo& CharacterMailDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::MailInfo* CharacterMailDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::MailInfo* CharacterMailDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >&
CharacterMailDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >*
CharacterMailDBResponse::mutable_info() {
  return &info_;
}

// optional uint32 zoneMailId = 3;
inline bool CharacterMailDBResponse::has_zonemailid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterMailDBResponse::set_has_zonemailid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterMailDBResponse::clear_has_zonemailid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterMailDBResponse::clear_zonemailid() {
  zonemailid_ = 0u;
  clear_has_zonemailid();
}
inline ::google::protobuf::uint32 CharacterMailDBResponse::zonemailid() const {
  return zonemailid_;
}
inline void CharacterMailDBResponse::set_zonemailid(::google::protobuf::uint32 value) {
  set_has_zonemailid();
  zonemailid_ = value;
}

// optional int32 offset = 4;
inline bool CharacterMailDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterMailDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterMailDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterMailDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 CharacterMailDBResponse::offset() const {
  return offset_;
}
inline void CharacterMailDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 reqid = 5;
inline bool CharacterMailDBResponse::has_reqid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterMailDBResponse::set_has_reqid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterMailDBResponse::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterMailDBResponse::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
inline ::google::protobuf::uint32 CharacterMailDBResponse::reqid() const {
  return reqid_;
}
inline void CharacterMailDBResponse::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
}

// -------------------------------------------------------------------

// MaxMailIDRequest

// -------------------------------------------------------------------

// MaxMailIDResponse

// required uint32 maxZoneMailId = 1;
inline bool MaxMailIDResponse::has_maxzonemailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxMailIDResponse::set_has_maxzonemailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxMailIDResponse::clear_has_maxzonemailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxMailIDResponse::clear_maxzonemailid() {
  maxzonemailid_ = 0u;
  clear_has_maxzonemailid();
}
inline ::google::protobuf::uint32 MaxMailIDResponse::maxzonemailid() const {
  return maxzonemailid_;
}
inline void MaxMailIDResponse::set_maxzonemailid(::google::protobuf::uint32 value) {
  set_has_maxzonemailid();
  maxzonemailid_ = value;
}

// -------------------------------------------------------------------

// DeleteCharacterMail

// required uint64 charID = 1;
inline bool DeleteCharacterMail::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCharacterMail::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCharacterMail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCharacterMail::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DeleteCharacterMail::charid() const {
  return charid_;
}
inline void DeleteCharacterMail::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// ZoneMailSaveRsp

// required uint32 mailId = 1;
inline bool ZoneMailSaveRsp::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneMailSaveRsp::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneMailSaveRsp::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneMailSaveRsp::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 ZoneMailSaveRsp::mailid() const {
  return mailid_;
}
inline void ZoneMailSaveRsp::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// -------------------------------------------------------------------

// ZoneMailTransCharacterMailReq

// required uint32 mailId = 1;
inline bool ZoneMailTransCharacterMailReq::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneMailTransCharacterMailReq::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneMailTransCharacterMailReq::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneMailTransCharacterMailReq::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 ZoneMailTransCharacterMailReq::mailid() const {
  return mailid_;
}
inline void ZoneMailTransCharacterMailReq::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint64 cid = 2;
inline bool ZoneMailTransCharacterMailReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneMailTransCharacterMailReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneMailTransCharacterMailReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneMailTransCharacterMailReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 ZoneMailTransCharacterMailReq::cid() const {
  return cid_;
}
inline void ZoneMailTransCharacterMailReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint64 createtime = 3;
inline bool ZoneMailTransCharacterMailReq::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneMailTransCharacterMailReq::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneMailTransCharacterMailReq::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneMailTransCharacterMailReq::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 ZoneMailTransCharacterMailReq::createtime() const {
  return createtime_;
}
inline void ZoneMailTransCharacterMailReq::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// ZoneMailTransCharacterMailRsp

// required uint64 cid = 1;
inline bool ZoneMailTransCharacterMailRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneMailTransCharacterMailRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneMailTransCharacterMailRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneMailTransCharacterMailRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 ZoneMailTransCharacterMailRsp::cid() const {
  return cid_;
}
inline void ZoneMailTransCharacterMailRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// repeated .proto_ff.MailInfo data = 2;
inline int ZoneMailTransCharacterMailRsp::data_size() const {
  return data_.size();
}
inline void ZoneMailTransCharacterMailRsp::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::MailInfo& ZoneMailTransCharacterMailRsp::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::MailInfo* ZoneMailTransCharacterMailRsp::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::MailInfo* ZoneMailTransCharacterMailRsp::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >&
ZoneMailTransCharacterMailRsp::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailInfo >*
ZoneMailTransCharacterMailRsp::mutable_data() {
  return &data_;
}

// required uint32 max_zone_mailid = 3;
inline bool ZoneMailTransCharacterMailRsp::has_max_zone_mailid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneMailTransCharacterMailRsp::set_has_max_zone_mailid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneMailTransCharacterMailRsp::clear_has_max_zone_mailid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneMailTransCharacterMailRsp::clear_max_zone_mailid() {
  max_zone_mailid_ = 0u;
  clear_has_max_zone_mailid();
}
inline ::google::protobuf::uint32 ZoneMailTransCharacterMailRsp::max_zone_mailid() const {
  return max_zone_mailid_;
}
inline void ZoneMailTransCharacterMailRsp::set_max_zone_mailid(::google::protobuf::uint32 value) {
  set_has_max_zone_mailid();
  max_zone_mailid_ = value;
}

// -------------------------------------------------------------------

// WebMailDBDataReq

// optional int32 op_type = 1;
inline bool WebMailDBDataReq::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebMailDBDataReq::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebMailDBDataReq::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebMailDBDataReq::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 WebMailDBDataReq::op_type() const {
  return op_type_;
}
inline void WebMailDBDataReq::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// optional uint64 cid = 2;
inline bool WebMailDBDataReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebMailDBDataReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebMailDBDataReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebMailDBDataReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 WebMailDBDataReq::cid() const {
  return cid_;
}
inline void WebMailDBDataReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 pernum = 3;
inline bool WebMailDBDataReq::has_pernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebMailDBDataReq::set_has_pernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebMailDBDataReq::clear_has_pernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebMailDBDataReq::clear_pernum() {
  pernum_ = 0u;
  clear_has_pernum();
}
inline ::google::protobuf::uint32 WebMailDBDataReq::pernum() const {
  return pernum_;
}
inline void WebMailDBDataReq::set_pernum(::google::protobuf::uint32 value) {
  set_has_pernum();
  pernum_ = value;
}

// optional uint32 curpage = 4;
inline bool WebMailDBDataReq::has_curpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebMailDBDataReq::set_has_curpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebMailDBDataReq::clear_has_curpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebMailDBDataReq::clear_curpage() {
  curpage_ = 0u;
  clear_has_curpage();
}
inline ::google::protobuf::uint32 WebMailDBDataReq::curpage() const {
  return curpage_;
}
inline void WebMailDBDataReq::set_curpage(::google::protobuf::uint32 value) {
  set_has_curpage();
  curpage_ = value;
}

// repeated uint32 id_lst = 5;
inline int WebMailDBDataReq::id_lst_size() const {
  return id_lst_.size();
}
inline void WebMailDBDataReq::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::uint32 WebMailDBDataReq::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void WebMailDBDataReq::set_id_lst(int index, ::google::protobuf::uint32 value) {
  id_lst_.Set(index, value);
}
inline void WebMailDBDataReq::add_id_lst(::google::protobuf::uint32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WebMailDBDataReq::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WebMailDBDataReq::mutable_id_lst() {
  return &id_lst_;
}

// required bytes webId = 6;
inline bool WebMailDBDataReq::has_webid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WebMailDBDataReq::set_has_webid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WebMailDBDataReq::clear_has_webid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WebMailDBDataReq::clear_webid() {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    webid_->clear();
  }
  clear_has_webid();
}
inline const ::std::string& WebMailDBDataReq::webid() const {
  return *webid_;
}
inline void WebMailDBDataReq::set_webid(const ::std::string& value) {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  webid_->assign(value);
}
inline void WebMailDBDataReq::set_webid(const char* value) {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  webid_->assign(value);
}
inline void WebMailDBDataReq::set_webid(const void* value, size_t size) {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  webid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebMailDBDataReq::mutable_webid() {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  return webid_;
}
inline ::std::string* WebMailDBDataReq::release_webid() {
  clear_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = webid_;
    webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WebMailDBDataReq::set_allocated_webid(::std::string* webid) {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    delete webid_;
  }
  if (webid) {
    set_has_webid();
    webid_ = webid;
  } else {
    clear_has_webid();
    webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WebMailDBDataRsp

// optional int32 op_type = 1;
inline bool WebMailDBDataRsp::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebMailDBDataRsp::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebMailDBDataRsp::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebMailDBDataRsp::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 WebMailDBDataRsp::op_type() const {
  return op_type_;
}
inline void WebMailDBDataRsp::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// optional uint64 cid = 2;
inline bool WebMailDBDataRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebMailDBDataRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebMailDBDataRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebMailDBDataRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 WebMailDBDataRsp::cid() const {
  return cid_;
}
inline void WebMailDBDataRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 curpage = 3;
inline bool WebMailDBDataRsp::has_curpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebMailDBDataRsp::set_has_curpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebMailDBDataRsp::clear_has_curpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebMailDBDataRsp::clear_curpage() {
  curpage_ = 0u;
  clear_has_curpage();
}
inline ::google::protobuf::uint32 WebMailDBDataRsp::curpage() const {
  return curpage_;
}
inline void WebMailDBDataRsp::set_curpage(::google::protobuf::uint32 value) {
  set_has_curpage();
  curpage_ = value;
}

// optional uint32 totalcount = 4;
inline bool WebMailDBDataRsp::has_totalcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebMailDBDataRsp::set_has_totalcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebMailDBDataRsp::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebMailDBDataRsp::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
inline ::google::protobuf::uint32 WebMailDBDataRsp::totalcount() const {
  return totalcount_;
}
inline void WebMailDBDataRsp::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
}

// repeated uint32 id_lst = 5;
inline int WebMailDBDataRsp::id_lst_size() const {
  return id_lst_.size();
}
inline void WebMailDBDataRsp::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::uint32 WebMailDBDataRsp::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void WebMailDBDataRsp::set_id_lst(int index, ::google::protobuf::uint32 value) {
  id_lst_.Set(index, value);
}
inline void WebMailDBDataRsp::add_id_lst(::google::protobuf::uint32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WebMailDBDataRsp::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WebMailDBDataRsp::mutable_id_lst() {
  return &id_lst_;
}

// repeated .proto_ff.WebMailDataProto info_lst = 6;
inline int WebMailDBDataRsp::info_lst_size() const {
  return info_lst_.size();
}
inline void WebMailDBDataRsp::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::WebMailDataProto& WebMailDBDataRsp::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::WebMailDataProto* WebMailDBDataRsp::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::WebMailDataProto* WebMailDBDataRsp::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WebMailDataProto >&
WebMailDBDataRsp::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WebMailDataProto >*
WebMailDBDataRsp::mutable_info_lst() {
  return &info_lst_;
}

// required bytes webId = 7;
inline bool WebMailDBDataRsp::has_webid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WebMailDBDataRsp::set_has_webid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WebMailDBDataRsp::clear_has_webid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WebMailDBDataRsp::clear_webid() {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    webid_->clear();
  }
  clear_has_webid();
}
inline const ::std::string& WebMailDBDataRsp::webid() const {
  return *webid_;
}
inline void WebMailDBDataRsp::set_webid(const ::std::string& value) {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  webid_->assign(value);
}
inline void WebMailDBDataRsp::set_webid(const char* value) {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  webid_->assign(value);
}
inline void WebMailDBDataRsp::set_webid(const void* value, size_t size) {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  webid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebMailDBDataRsp::mutable_webid() {
  set_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    webid_ = new ::std::string;
  }
  return webid_;
}
inline ::std::string* WebMailDBDataRsp::release_webid() {
  clear_has_webid();
  if (webid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = webid_;
    webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WebMailDBDataRsp::set_allocated_webid(::std::string* webid) {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    delete webid_;
  }
  if (webid) {
    set_has_webid();
    webid_ = webid;
  } else {
    clear_has_webid();
    webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendDBInfo

// optional uint64 charID = 1;
inline bool FriendDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDBInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 FriendDBInfo::charid() const {
  return charid_;
}
inline void FriendDBInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional .proto_ff.RelationDBInfo data = 2;
inline bool FriendDBInfo::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendDBInfo::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendDBInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendDBInfo::clear_data() {
  if (data_ != NULL) data_->::proto_ff::RelationDBInfo::Clear();
  clear_has_data();
}
inline const ::proto_ff::RelationDBInfo& FriendDBInfo::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::RelationDBInfo* FriendDBInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::RelationDBInfo;
  return data_;
}
inline ::proto_ff::RelationDBInfo* FriendDBInfo::release_data() {
  clear_has_data();
  ::proto_ff::RelationDBInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FriendDBInfo::set_allocated_data(::proto_ff::RelationDBInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FriendDBRequest

// optional uint64 charid = 1;
inline bool FriendDBRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDBRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDBRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDBRequest::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 FriendDBRequest::charid() const {
  return charid_;
}
inline void FriendDBRequest::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// repeated uint64 dstid_lst = 2;
inline int FriendDBRequest::dstid_lst_size() const {
  return dstid_lst_.size();
}
inline void FriendDBRequest::clear_dstid_lst() {
  dstid_lst_.Clear();
}
inline ::google::protobuf::uint64 FriendDBRequest::dstid_lst(int index) const {
  return dstid_lst_.Get(index);
}
inline void FriendDBRequest::set_dstid_lst(int index, ::google::protobuf::uint64 value) {
  dstid_lst_.Set(index, value);
}
inline void FriendDBRequest::add_dstid_lst(::google::protobuf::uint64 value) {
  dstid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FriendDBRequest::dstid_lst() const {
  return dstid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FriendDBRequest::mutable_dstid_lst() {
  return &dstid_lst_;
}

// optional uint32 operate_type = 3;
inline bool FriendDBRequest::has_operate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendDBRequest::set_has_operate_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendDBRequest::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendDBRequest::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 FriendDBRequest::operate_type() const {
  return operate_type_;
}
inline void FriendDBRequest::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional bytes data = 4;
inline bool FriendDBRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendDBRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendDBRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendDBRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FriendDBRequest::data() const {
  return *data_;
}
inline void FriendDBRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FriendDBRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FriendDBRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendDBRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* FriendDBRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendDBRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 query_times = 5;
inline bool FriendDBRequest::has_query_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendDBRequest::set_has_query_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendDBRequest::clear_has_query_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendDBRequest::clear_query_times() {
  query_times_ = 0u;
  clear_has_query_times();
}
inline ::google::protobuf::uint32 FriendDBRequest::query_times() const {
  return query_times_;
}
inline void FriendDBRequest::set_query_times(::google::protobuf::uint32 value) {
  set_has_query_times();
  query_times_ = value;
}

// -------------------------------------------------------------------

// FriendDBResponse

// optional int32 retcode = 1;
inline bool FriendDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 FriendDBResponse::retcode() const {
  return retcode_;
}
inline void FriendDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional uint64 charid = 2;
inline bool FriendDBResponse::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendDBResponse::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendDBResponse::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendDBResponse::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 FriendDBResponse::charid() const {
  return charid_;
}
inline void FriendDBResponse::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 operate_type = 3;
inline bool FriendDBResponse::has_operate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendDBResponse::set_has_operate_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendDBResponse::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendDBResponse::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 FriendDBResponse::operate_type() const {
  return operate_type_;
}
inline void FriendDBResponse::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// repeated .proto_ff.FriendDBInfo info_lst = 4;
inline int FriendDBResponse::info_lst_size() const {
  return info_lst_.size();
}
inline void FriendDBResponse::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::FriendDBInfo& FriendDBResponse::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::FriendDBInfo* FriendDBResponse::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::FriendDBInfo* FriendDBResponse::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >&
FriendDBResponse::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >*
FriendDBResponse::mutable_info_lst() {
  return &info_lst_;
}

// repeated uint64 last_lst = 5;
inline int FriendDBResponse::last_lst_size() const {
  return last_lst_.size();
}
inline void FriendDBResponse::clear_last_lst() {
  last_lst_.Clear();
}
inline ::google::protobuf::uint64 FriendDBResponse::last_lst(int index) const {
  return last_lst_.Get(index);
}
inline void FriendDBResponse::set_last_lst(int index, ::google::protobuf::uint64 value) {
  last_lst_.Set(index, value);
}
inline void FriendDBResponse::add_last_lst(::google::protobuf::uint64 value) {
  last_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FriendDBResponse::last_lst() const {
  return last_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FriendDBResponse::mutable_last_lst() {
  return &last_lst_;
}

// optional bytes data = 6;
inline bool FriendDBResponse::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendDBResponse::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendDBResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendDBResponse::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FriendDBResponse::data() const {
  return *data_;
}
inline void FriendDBResponse::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FriendDBResponse::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FriendDBResponse::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendDBResponse::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* FriendDBResponse::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendDBResponse::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 query_times = 7;
inline bool FriendDBResponse::has_query_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendDBResponse::set_has_query_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendDBResponse::clear_has_query_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendDBResponse::clear_query_times() {
  query_times_ = 0u;
  clear_has_query_times();
}
inline ::google::protobuf::uint32 FriendDBResponse::query_times() const {
  return query_times_;
}
inline void FriendDBResponse::set_query_times(::google::protobuf::uint32 value) {
  set_has_query_times();
  query_times_ = value;
}

// -------------------------------------------------------------------

// AllFriendDBRequest

// required int32 offset = 1;
inline bool AllFriendDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllFriendDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllFriendDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllFriendDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllFriendDBRequest::offset() const {
  return offset_;
}
inline void AllFriendDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// AllFriendDBResponse

// required int32 retcode = 1;
inline bool AllFriendDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllFriendDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllFriendDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllFriendDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AllFriendDBResponse::retcode() const {
  return retcode_;
}
inline void AllFriendDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool AllFriendDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllFriendDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllFriendDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllFriendDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllFriendDBResponse::offset() const {
  return offset_;
}
inline void AllFriendDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .proto_ff.FriendDBInfo info = 3;
inline int AllFriendDBResponse::info_size() const {
  return info_.size();
}
inline void AllFriendDBResponse::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FriendDBInfo& AllFriendDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FriendDBInfo* AllFriendDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FriendDBInfo* AllFriendDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >&
AllFriendDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >*
AllFriendDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// SaveFriendDBRequest

// repeated .proto_ff.FriendDBInfo info = 1;
inline int SaveFriendDBRequest::info_size() const {
  return info_.size();
}
inline void SaveFriendDBRequest::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FriendDBInfo& SaveFriendDBRequest::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FriendDBInfo* SaveFriendDBRequest::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FriendDBInfo* SaveFriendDBRequest::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >&
SaveFriendDBRequest::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FriendDBInfo >*
SaveFriendDBRequest::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DelteFriendDBRequest

// optional uint64 charId = 1;
inline bool DelteFriendDBRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelteFriendDBRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelteFriendDBRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelteFriendDBRequest::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DelteFriendDBRequest::charid() const {
  return charid_;
}
inline void DelteFriendDBRequest::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// GlobalDBRequst

// -------------------------------------------------------------------

// GlobalDBEntry

// optional int32 type_id = 1;
inline bool GlobalDBEntry::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBEntry::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBEntry::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBEntry::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBEntry::type_id() const {
  return type_id_;
}
inline void GlobalDBEntry::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional bytes data = 2;
inline bool GlobalDBEntry::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBEntry::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBEntry::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& GlobalDBEntry::data() const {
  return *data_;
}
inline void GlobalDBEntry::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBEntry::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBEntry::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalDBEntry::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* GlobalDBEntry::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GlobalDBEntry::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GlobalDBResponse

// repeated .proto_ff.GlobalDBEntry entry = 1;
inline int GlobalDBResponse::entry_size() const {
  return entry_.size();
}
inline void GlobalDBResponse::clear_entry() {
  entry_.Clear();
}
inline const ::proto_ff::GlobalDBEntry& GlobalDBResponse::entry(int index) const {
  return entry_.Get(index);
}
inline ::proto_ff::GlobalDBEntry* GlobalDBResponse::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::proto_ff::GlobalDBEntry* GlobalDBResponse::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalDBEntry >&
GlobalDBResponse::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalDBEntry >*
GlobalDBResponse::mutable_entry() {
  return &entry_;
}

// optional int32 isfinish = 2;
inline bool GlobalDBResponse::has_isfinish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBResponse::set_has_isfinish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBResponse::clear_has_isfinish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBResponse::clear_isfinish() {
  isfinish_ = 0;
  clear_has_isfinish();
}
inline ::google::protobuf::int32 GlobalDBResponse::isfinish() const {
  return isfinish_;
}
inline void GlobalDBResponse::set_isfinish(::google::protobuf::int32 value) {
  set_has_isfinish();
  isfinish_ = value;
}

// -------------------------------------------------------------------

// GlobalDBSetRequest

// required int32 type_id = 1;
inline bool GlobalDBSetRequest::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBSetRequest::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBSetRequest::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBSetRequest::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBSetRequest::type_id() const {
  return type_id_;
}
inline void GlobalDBSetRequest::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional bytes data = 2;
inline bool GlobalDBSetRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBSetRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBSetRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBSetRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& GlobalDBSetRequest::data() const {
  return *data_;
}
inline void GlobalDBSetRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBSetRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBSetRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalDBSetRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* GlobalDBSetRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GlobalDBSetRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GlobalDBSetResponse

// required int32 retcode = 1;
inline bool GlobalDBSetResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBSetResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBSetResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBSetResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 GlobalDBSetResponse::retcode() const {
  return retcode_;
}
inline void GlobalDBSetResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 type_id = 2;
inline bool GlobalDBSetResponse::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBSetResponse::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBSetResponse::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBSetResponse::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBSetResponse::type_id() const {
  return type_id_;
}
inline void GlobalDBSetResponse::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// -------------------------------------------------------------------

// GlobalComData

// repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
inline int GlobalComData::towerdupreward_size() const {
  return towerdupreward_.size();
}
inline void GlobalComData::clear_towerdupreward() {
  towerdupreward_.Clear();
}
inline const ::proto_ff::DupTowerDBRecord& GlobalComData::towerdupreward(int index) const {
  return towerdupreward_.Get(index);
}
inline ::proto_ff::DupTowerDBRecord* GlobalComData::mutable_towerdupreward(int index) {
  return towerdupreward_.Mutable(index);
}
inline ::proto_ff::DupTowerDBRecord* GlobalComData::add_towerdupreward() {
  return towerdupreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecord >&
GlobalComData::towerdupreward() const {
  return towerdupreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DupTowerDBRecord >*
GlobalComData::mutable_towerdupreward() {
  return &towerdupreward_;
}

// -------------------------------------------------------------------

// GlobalYaotaDupDBEntry

// optional int32 dupid = 1;
inline bool GlobalYaotaDupDBEntry::has_dupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalYaotaDupDBEntry::set_has_dupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalYaotaDupDBEntry::clear_has_dupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalYaotaDupDBEntry::clear_dupid() {
  dupid_ = 0;
  clear_has_dupid();
}
inline ::google::protobuf::int32 GlobalYaotaDupDBEntry::dupid() const {
  return dupid_;
}
inline void GlobalYaotaDupDBEntry::set_dupid(::google::protobuf::int32 value) {
  set_has_dupid();
  dupid_ = value;
}

// repeated .proto_ff.RolePlayerMiniInfo info = 2;
inline int GlobalYaotaDupDBEntry::info_size() const {
  return info_.size();
}
inline void GlobalYaotaDupDBEntry::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RolePlayerMiniInfo& GlobalYaotaDupDBEntry::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RolePlayerMiniInfo* GlobalYaotaDupDBEntry::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RolePlayerMiniInfo* GlobalYaotaDupDBEntry::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
GlobalYaotaDupDBEntry::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
GlobalYaotaDupDBEntry::mutable_info() {
  return &info_;
}

// optional uint64 time = 3;
inline bool GlobalYaotaDupDBEntry::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalYaotaDupDBEntry::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalYaotaDupDBEntry::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalYaotaDupDBEntry::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 GlobalYaotaDupDBEntry::time() const {
  return time_;
}
inline void GlobalYaotaDupDBEntry::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GlobalYaotaDupDBData

// repeated .proto_ff.GlobalYaotaDupDBEntry entrys = 3;
inline int GlobalYaotaDupDBData::entrys_size() const {
  return entrys_.size();
}
inline void GlobalYaotaDupDBData::clear_entrys() {
  entrys_.Clear();
}
inline const ::proto_ff::GlobalYaotaDupDBEntry& GlobalYaotaDupDBData::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::proto_ff::GlobalYaotaDupDBEntry* GlobalYaotaDupDBData::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::proto_ff::GlobalYaotaDupDBEntry* GlobalYaotaDupDBData::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalYaotaDupDBEntry >&
GlobalYaotaDupDBData::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GlobalYaotaDupDBEntry >*
GlobalYaotaDupDBData::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// GlobalFieldBossDBData

// repeated .proto_ff.FestBossProto info = 1;
inline int GlobalFieldBossDBData::info_size() const {
  return info_.size();
}
inline void GlobalFieldBossDBData::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FestBossProto& GlobalFieldBossDBData::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FestBossProto* GlobalFieldBossDBData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FestBossProto* GlobalFieldBossDBData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossProto >&
GlobalFieldBossDBData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestBossProto >*
GlobalFieldBossDBData::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// ActDBProto

// optional uint64 actid = 1;
inline bool ActDBProto::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActDBProto::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActDBProto::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActDBProto::clear_actid() {
  actid_ = GOOGLE_ULONGLONG(0);
  clear_has_actid();
}
inline ::google::protobuf::uint64 ActDBProto::actid() const {
  return actid_;
}
inline void ActDBProto::set_actid(::google::protobuf::uint64 value) {
  set_has_actid();
  actid_ = value;
}

// optional uint32 zid = 2;
inline bool ActDBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActDBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActDBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActDBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 ActDBProto::zid() const {
  return zid_;
}
inline void ActDBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 finishtime = 3;
inline bool ActDBProto::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActDBProto::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActDBProto::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActDBProto::clear_finishtime() {
  finishtime_ = GOOGLE_ULONGLONG(0);
  clear_has_finishtime();
}
inline ::google::protobuf::uint64 ActDBProto::finishtime() const {
  return finishtime_;
}
inline void ActDBProto::set_finishtime(::google::protobuf::uint64 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// -------------------------------------------------------------------

// ActDBReq

// -------------------------------------------------------------------

// ActDBRsp

// repeated .proto_ff.ActDBProto lst = 1;
inline int ActDBRsp::lst_size() const {
  return lst_.size();
}
inline void ActDBRsp::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::ActDBProto& ActDBRsp::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::ActDBProto* ActDBRsp::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::ActDBProto* ActDBRsp::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >&
ActDBRsp::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >*
ActDBRsp::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// ActSaveDBReq

// repeated .proto_ff.ActDBProto lst = 1;
inline int ActSaveDBReq::lst_size() const {
  return lst_.size();
}
inline void ActSaveDBReq::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::ActDBProto& ActSaveDBReq::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::ActDBProto* ActSaveDBReq::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::ActDBProto* ActSaveDBReq::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >&
ActSaveDBReq::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ActDBProto >*
ActSaveDBReq::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// AllArenaDBRequest

// required int32 offset = 1;
inline bool AllArenaDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllArenaDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllArenaDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllArenaDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllArenaDBRequest::offset() const {
  return offset_;
}
inline void AllArenaDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 retnum = 2;
inline bool AllArenaDBRequest::has_retnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllArenaDBRequest::set_has_retnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllArenaDBRequest::clear_has_retnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllArenaDBRequest::clear_retnum() {
  retnum_ = 0;
  clear_has_retnum();
}
inline ::google::protobuf::int32 AllArenaDBRequest::retnum() const {
  return retnum_;
}
inline void AllArenaDBRequest::set_retnum(::google::protobuf::int32 value) {
  set_has_retnum();
  retnum_ = value;
}

// -------------------------------------------------------------------

// ArenaDBInfo

// optional uint64 charID = 1;
inline bool ArenaDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaDBInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ArenaDBInfo::charid() const {
  return charid_;
}
inline void ArenaDBInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 rankId = 2;
inline bool ArenaDBInfo::has_rankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaDBInfo::set_has_rankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaDBInfo::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaDBInfo::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 ArenaDBInfo::rankid() const {
  return rankid_;
}
inline void ArenaDBInfo::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
}

// -------------------------------------------------------------------

// ArenaMoreDBInfo

// repeated .proto_ff.ArenaDBInfo info = 1;
inline int ArenaMoreDBInfo::info_size() const {
  return info_.size();
}
inline void ArenaMoreDBInfo::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ArenaDBInfo& ArenaMoreDBInfo::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ArenaDBInfo* ArenaMoreDBInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ArenaDBInfo* ArenaMoreDBInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >&
ArenaMoreDBInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >*
ArenaMoreDBInfo::mutable_info() {
  return &info_;
}

// optional uint32 day = 2;
inline bool ArenaMoreDBInfo::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaMoreDBInfo::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaMoreDBInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaMoreDBInfo::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 ArenaMoreDBInfo::day() const {
  return day_;
}
inline void ArenaMoreDBInfo::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional uint32 giveReward = 3;
inline bool ArenaMoreDBInfo::has_givereward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaMoreDBInfo::set_has_givereward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaMoreDBInfo::clear_has_givereward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaMoreDBInfo::clear_givereward() {
  givereward_ = 0u;
  clear_has_givereward();
}
inline ::google::protobuf::uint32 ArenaMoreDBInfo::givereward() const {
  return givereward_;
}
inline void ArenaMoreDBInfo::set_givereward(::google::protobuf::uint32 value) {
  set_has_givereward();
  givereward_ = value;
}

// optional uint32 max_rank = 4;
inline bool ArenaMoreDBInfo::has_max_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaMoreDBInfo::set_has_max_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaMoreDBInfo::clear_has_max_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaMoreDBInfo::clear_max_rank() {
  max_rank_ = 0u;
  clear_has_max_rank();
}
inline ::google::protobuf::uint32 ArenaMoreDBInfo::max_rank() const {
  return max_rank_;
}
inline void ArenaMoreDBInfo::set_max_rank(::google::protobuf::uint32 value) {
  set_has_max_rank();
  max_rank_ = value;
}

// -------------------------------------------------------------------

// AllArenaDBResponse

// required int32 retcode = 1;
inline bool AllArenaDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllArenaDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllArenaDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllArenaDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AllArenaDBResponse::retcode() const {
  return retcode_;
}
inline void AllArenaDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool AllArenaDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllArenaDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllArenaDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllArenaDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllArenaDBResponse::offset() const {
  return offset_;
}
inline void AllArenaDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .proto_ff.ArenaDBInfo info = 3;
inline int AllArenaDBResponse::info_size() const {
  return info_.size();
}
inline void AllArenaDBResponse::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ArenaDBInfo& AllArenaDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ArenaDBInfo* AllArenaDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ArenaDBInfo* AllArenaDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >&
AllArenaDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >*
AllArenaDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// SaveArenaDBRequest

// repeated .proto_ff.ArenaDBInfo info = 1;
inline int SaveArenaDBRequest::info_size() const {
  return info_.size();
}
inline void SaveArenaDBRequest::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ArenaDBInfo& SaveArenaDBRequest::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ArenaDBInfo* SaveArenaDBRequest::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ArenaDBInfo* SaveArenaDBRequest::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >&
SaveArenaDBRequest::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ArenaDBInfo >*
SaveArenaDBRequest::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DeleteArenaDBRequest

// optional uint64 charId = 1;
inline bool DeleteArenaDBRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteArenaDBRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteArenaDBRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteArenaDBRequest::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DeleteArenaDBRequest::charid() const {
  return charid_;
}
inline void DeleteArenaDBRequest::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// RoleMirrorDBReq

// required uint64 cid = 1;
inline bool RoleMirrorDBReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleMirrorDBReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleMirrorDBReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleMirrorDBReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleMirrorDBReq::cid() const {
  return cid_;
}
inline void RoleMirrorDBReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required int64 int_param = 2;
inline bool RoleMirrorDBReq::has_int_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleMirrorDBReq::set_has_int_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleMirrorDBReq::clear_has_int_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleMirrorDBReq::clear_int_param() {
  int_param_ = GOOGLE_LONGLONG(0);
  clear_has_int_param();
}
inline ::google::protobuf::int64 RoleMirrorDBReq::int_param() const {
  return int_param_;
}
inline void RoleMirrorDBReq::set_int_param(::google::protobuf::int64 value) {
  set_has_int_param();
  int_param_ = value;
}

// required bytes str_param = 3;
inline bool RoleMirrorDBReq::has_str_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleMirrorDBReq::set_has_str_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleMirrorDBReq::clear_has_str_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleMirrorDBReq::clear_str_param() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    str_param_->clear();
  }
  clear_has_str_param();
}
inline const ::std::string& RoleMirrorDBReq::str_param() const {
  return *str_param_;
}
inline void RoleMirrorDBReq::set_str_param(const ::std::string& value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void RoleMirrorDBReq::set_str_param(const char* value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void RoleMirrorDBReq::set_str_param(const void* value, size_t size) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleMirrorDBReq::mutable_str_param() {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  return str_param_;
}
inline ::std::string* RoleMirrorDBReq::release_str_param() {
  clear_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param_;
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleMirrorDBReq::set_allocated_str_param(::std::string* str_param) {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (str_param) {
    set_has_str_param();
    str_param_ = str_param;
  } else {
    clear_has_str_param();
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 reqtype = 4;
inline bool RoleMirrorDBReq::has_reqtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleMirrorDBReq::set_has_reqtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleMirrorDBReq::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleMirrorDBReq::clear_reqtype() {
  reqtype_ = 0u;
  clear_has_reqtype();
}
inline ::google::protobuf::uint32 RoleMirrorDBReq::reqtype() const {
  return reqtype_;
}
inline void RoleMirrorDBReq::set_reqtype(::google::protobuf::uint32 value) {
  set_has_reqtype();
  reqtype_ = value;
}

// -------------------------------------------------------------------

// RoleMirrorDBRsp

// required int32 ret = 1;
inline bool RoleMirrorDBRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleMirrorDBRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleMirrorDBRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleMirrorDBRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RoleMirrorDBRsp::ret() const {
  return ret_;
}
inline void RoleMirrorDBRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 cid = 2;
inline bool RoleMirrorDBRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleMirrorDBRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleMirrorDBRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleMirrorDBRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleMirrorDBRsp::cid() const {
  return cid_;
}
inline void RoleMirrorDBRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required int64 int_param = 3;
inline bool RoleMirrorDBRsp::has_int_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleMirrorDBRsp::set_has_int_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleMirrorDBRsp::clear_has_int_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleMirrorDBRsp::clear_int_param() {
  int_param_ = GOOGLE_LONGLONG(0);
  clear_has_int_param();
}
inline ::google::protobuf::int64 RoleMirrorDBRsp::int_param() const {
  return int_param_;
}
inline void RoleMirrorDBRsp::set_int_param(::google::protobuf::int64 value) {
  set_has_int_param();
  int_param_ = value;
}

// required bytes str_param = 4;
inline bool RoleMirrorDBRsp::has_str_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleMirrorDBRsp::set_has_str_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleMirrorDBRsp::clear_has_str_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleMirrorDBRsp::clear_str_param() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    str_param_->clear();
  }
  clear_has_str_param();
}
inline const ::std::string& RoleMirrorDBRsp::str_param() const {
  return *str_param_;
}
inline void RoleMirrorDBRsp::set_str_param(const ::std::string& value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void RoleMirrorDBRsp::set_str_param(const char* value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void RoleMirrorDBRsp::set_str_param(const void* value, size_t size) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleMirrorDBRsp::mutable_str_param() {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  return str_param_;
}
inline ::std::string* RoleMirrorDBRsp::release_str_param() {
  clear_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param_;
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleMirrorDBRsp::set_allocated_str_param(::std::string* str_param) {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (str_param) {
    set_has_str_param();
    str_param_ = str_param;
  } else {
    clear_has_str_param();
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 reqtype = 5;
inline bool RoleMirrorDBRsp::has_reqtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleMirrorDBRsp::set_has_reqtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleMirrorDBRsp::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleMirrorDBRsp::clear_reqtype() {
  reqtype_ = 0u;
  clear_has_reqtype();
}
inline ::google::protobuf::uint32 RoleMirrorDBRsp::reqtype() const {
  return reqtype_;
}
inline void RoleMirrorDBRsp::set_reqtype(::google::protobuf::uint32 value) {
  set_has_reqtype();
  reqtype_ = value;
}

// optional .proto_ff.RoleMirrorData data = 6;
inline bool RoleMirrorDBRsp::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleMirrorDBRsp::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleMirrorDBRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleMirrorDBRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::RoleMirrorData::Clear();
  clear_has_data();
}
inline const ::proto_ff::RoleMirrorData& RoleMirrorDBRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::RoleMirrorData* RoleMirrorDBRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::RoleMirrorData;
  return data_;
}
inline ::proto_ff::RoleMirrorData* RoleMirrorDBRsp::release_data() {
  clear_has_data();
  ::proto_ff::RoleMirrorData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void RoleMirrorDBRsp::set_allocated_data(::proto_ff::RoleMirrorData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FactionDataDBReq

// -------------------------------------------------------------------

// FactionDataDBRsp

// repeated .proto_ff.FactionAllDBData data_lst = 1;
inline int FactionDataDBRsp::data_lst_size() const {
  return data_lst_.size();
}
inline void FactionDataDBRsp::clear_data_lst() {
  data_lst_.Clear();
}
inline const ::proto_ff::FactionAllDBData& FactionDataDBRsp::data_lst(int index) const {
  return data_lst_.Get(index);
}
inline ::proto_ff::FactionAllDBData* FactionDataDBRsp::mutable_data_lst(int index) {
  return data_lst_.Mutable(index);
}
inline ::proto_ff::FactionAllDBData* FactionDataDBRsp::add_data_lst() {
  return data_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAllDBData >&
FactionDataDBRsp::data_lst() const {
  return data_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAllDBData >*
FactionDataDBRsp::mutable_data_lst() {
  return &data_lst_;
}

// optional int32 finish = 2;
inline bool FactionDataDBRsp::has_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDataDBRsp::set_has_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDataDBRsp::clear_has_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDataDBRsp::clear_finish() {
  finish_ = 0;
  clear_has_finish();
}
inline ::google::protobuf::int32 FactionDataDBRsp::finish() const {
  return finish_;
}
inline void FactionDataDBRsp::set_finish(::google::protobuf::int32 value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// FactionSaveDBReq

// optional .proto_ff.FactionAllDBData data = 1;
inline bool FactionSaveDBReq::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionSaveDBReq::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionSaveDBReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionSaveDBReq::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FactionAllDBData::Clear();
  clear_has_data();
}
inline const ::proto_ff::FactionAllDBData& FactionSaveDBReq::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FactionAllDBData* FactionSaveDBReq::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FactionAllDBData;
  return data_;
}
inline ::proto_ff::FactionAllDBData* FactionSaveDBReq::release_data() {
  clear_has_data();
  ::proto_ff::FactionAllDBData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FactionSaveDBReq::set_allocated_data(::proto_ff::FactionAllDBData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// FactionDelDBReq

// optional uint32 faction_id = 1;
inline bool FactionDelDBReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDelDBReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDelDBReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDelDBReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionDelDBReq::faction_id() const {
  return faction_id_;
}
inline void FactionDelDBReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// FactionRedDBReq

// -------------------------------------------------------------------

// FactionRedDBRsp

// repeated .proto_ff.RedDBData data_lst = 1;
inline int FactionRedDBRsp::data_lst_size() const {
  return data_lst_.size();
}
inline void FactionRedDBRsp::clear_data_lst() {
  data_lst_.Clear();
}
inline const ::proto_ff::RedDBData& FactionRedDBRsp::data_lst(int index) const {
  return data_lst_.Get(index);
}
inline ::proto_ff::RedDBData* FactionRedDBRsp::mutable_data_lst(int index) {
  return data_lst_.Mutable(index);
}
inline ::proto_ff::RedDBData* FactionRedDBRsp::add_data_lst() {
  return data_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDBData >&
FactionRedDBRsp::data_lst() const {
  return data_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDBData >*
FactionRedDBRsp::mutable_data_lst() {
  return &data_lst_;
}

// optional int32 finish = 2;
inline bool FactionRedDBRsp::has_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionRedDBRsp::set_has_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionRedDBRsp::clear_has_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionRedDBRsp::clear_finish() {
  finish_ = 0;
  clear_has_finish();
}
inline ::google::protobuf::int32 FactionRedDBRsp::finish() const {
  return finish_;
}
inline void FactionRedDBRsp::set_finish(::google::protobuf::int32 value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// FactionRedSaveDBReq

// required uint32 faction_id = 1;
inline bool FactionRedSaveDBReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionRedSaveDBReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionRedSaveDBReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionRedSaveDBReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionRedSaveDBReq::faction_id() const {
  return faction_id_;
}
inline void FactionRedSaveDBReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required .proto_ff.RedDBData data0 = 2;
inline bool FactionRedSaveDBReq::has_data0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionRedSaveDBReq::set_has_data0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionRedSaveDBReq::clear_has_data0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionRedSaveDBReq::clear_data0() {
  if (data0_ != NULL) data0_->::proto_ff::RedDBData::Clear();
  clear_has_data0();
}
inline const ::proto_ff::RedDBData& FactionRedSaveDBReq::data0() const {
  return data0_ != NULL ? *data0_ : *default_instance_->data0_;
}
inline ::proto_ff::RedDBData* FactionRedSaveDBReq::mutable_data0() {
  set_has_data0();
  if (data0_ == NULL) data0_ = new ::proto_ff::RedDBData;
  return data0_;
}
inline ::proto_ff::RedDBData* FactionRedSaveDBReq::release_data0() {
  clear_has_data0();
  ::proto_ff::RedDBData* temp = data0_;
  data0_ = NULL;
  return temp;
}
inline void FactionRedSaveDBReq::set_allocated_data0(::proto_ff::RedDBData* data0) {
  delete data0_;
  data0_ = data0;
  if (data0) {
    set_has_data0();
  } else {
    clear_has_data0();
  }
}

// required .proto_ff.RedDBData data1 = 3;
inline bool FactionRedSaveDBReq::has_data1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionRedSaveDBReq::set_has_data1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionRedSaveDBReq::clear_has_data1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionRedSaveDBReq::clear_data1() {
  if (data1_ != NULL) data1_->::proto_ff::RedDBData::Clear();
  clear_has_data1();
}
inline const ::proto_ff::RedDBData& FactionRedSaveDBReq::data1() const {
  return data1_ != NULL ? *data1_ : *default_instance_->data1_;
}
inline ::proto_ff::RedDBData* FactionRedSaveDBReq::mutable_data1() {
  set_has_data1();
  if (data1_ == NULL) data1_ = new ::proto_ff::RedDBData;
  return data1_;
}
inline ::proto_ff::RedDBData* FactionRedSaveDBReq::release_data1() {
  clear_has_data1();
  ::proto_ff::RedDBData* temp = data1_;
  data1_ = NULL;
  return temp;
}
inline void FactionRedSaveDBReq::set_allocated_data1(::proto_ff::RedDBData* data1) {
  delete data1_;
  data1_ = data1;
  if (data1) {
    set_has_data1();
  } else {
    clear_has_data1();
  }
}

// required .proto_ff.RedDBData data2 = 4;
inline bool FactionRedSaveDBReq::has_data2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionRedSaveDBReq::set_has_data2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionRedSaveDBReq::clear_has_data2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionRedSaveDBReq::clear_data2() {
  if (data2_ != NULL) data2_->::proto_ff::RedDBData::Clear();
  clear_has_data2();
}
inline const ::proto_ff::RedDBData& FactionRedSaveDBReq::data2() const {
  return data2_ != NULL ? *data2_ : *default_instance_->data2_;
}
inline ::proto_ff::RedDBData* FactionRedSaveDBReq::mutable_data2() {
  set_has_data2();
  if (data2_ == NULL) data2_ = new ::proto_ff::RedDBData;
  return data2_;
}
inline ::proto_ff::RedDBData* FactionRedSaveDBReq::release_data2() {
  clear_has_data2();
  ::proto_ff::RedDBData* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void FactionRedSaveDBReq::set_allocated_data2(::proto_ff::RedDBData* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    set_has_data2();
  } else {
    clear_has_data2();
  }
}

// -------------------------------------------------------------------

// FactionRedDelDBReq

// required uint32 faction_id = 1;
inline bool FactionRedDelDBReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionRedDelDBReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionRedDelDBReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionRedDelDBReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionRedDelDBReq::faction_id() const {
  return faction_id_;
}
inline void FactionRedDelDBReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// RoleRedDBReq

// -------------------------------------------------------------------

// RoleRedDBRsp

// repeated .proto_ff.RoleRedDBData data_lst = 1;
inline int RoleRedDBRsp::data_lst_size() const {
  return data_lst_.size();
}
inline void RoleRedDBRsp::clear_data_lst() {
  data_lst_.Clear();
}
inline const ::proto_ff::RoleRedDBData& RoleRedDBRsp::data_lst(int index) const {
  return data_lst_.Get(index);
}
inline ::proto_ff::RoleRedDBData* RoleRedDBRsp::mutable_data_lst(int index) {
  return data_lst_.Mutable(index);
}
inline ::proto_ff::RoleRedDBData* RoleRedDBRsp::add_data_lst() {
  return data_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleRedDBData >&
RoleRedDBRsp::data_lst() const {
  return data_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RoleRedDBData >*
RoleRedDBRsp::mutable_data_lst() {
  return &data_lst_;
}

// optional int32 finish = 2;
inline bool RoleRedDBRsp::has_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleRedDBRsp::set_has_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleRedDBRsp::clear_has_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleRedDBRsp::clear_finish() {
  finish_ = 0;
  clear_has_finish();
}
inline ::google::protobuf::int32 RoleRedDBRsp::finish() const {
  return finish_;
}
inline void RoleRedDBRsp::set_finish(::google::protobuf::int32 value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// ComLoadDBReq

// required uint64 id = 1;
inline bool ComLoadDBReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComLoadDBReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComLoadDBReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComLoadDBReq::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ComLoadDBReq::id() const {
  return id_;
}
inline void ComLoadDBReq::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required bytes table_name = 2;
inline bool ComLoadDBReq::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComLoadDBReq::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComLoadDBReq::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComLoadDBReq::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& ComLoadDBReq::table_name() const {
  return *table_name_;
}
inline void ComLoadDBReq::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComLoadDBReq::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComLoadDBReq::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComLoadDBReq::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* ComLoadDBReq::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComLoadDBReq::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 cmd = 3;
inline bool ComLoadDBReq::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComLoadDBReq::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComLoadDBReq::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComLoadDBReq::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 ComLoadDBReq::cmd() const {
  return cmd_;
}
inline void ComLoadDBReq::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// ComLoadDBRsp

// required uint64 id = 1;
inline bool ComLoadDBRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComLoadDBRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComLoadDBRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComLoadDBRsp::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ComLoadDBRsp::id() const {
  return id_;
}
inline void ComLoadDBRsp::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required bytes data = 2;
inline bool ComLoadDBRsp::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComLoadDBRsp::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComLoadDBRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComLoadDBRsp::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ComLoadDBRsp::data() const {
  return *data_;
}
inline void ComLoadDBRsp::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ComLoadDBRsp::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ComLoadDBRsp::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComLoadDBRsp::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ComLoadDBRsp::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComLoadDBRsp::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ComLoadAllDBReq

// required bytes table_name = 1;
inline bool ComLoadAllDBReq::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComLoadAllDBReq::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComLoadAllDBReq::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComLoadAllDBReq::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& ComLoadAllDBReq::table_name() const {
  return *table_name_;
}
inline void ComLoadAllDBReq::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComLoadAllDBReq::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComLoadAllDBReq::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComLoadAllDBReq::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* ComLoadAllDBReq::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComLoadAllDBReq::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 cmd = 2;
inline bool ComLoadAllDBReq::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComLoadAllDBReq::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComLoadAllDBReq::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComLoadAllDBReq::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 ComLoadAllDBReq::cmd() const {
  return cmd_;
}
inline void ComLoadAllDBReq::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// ComDBProto

// required uint64 id = 1;
inline bool ComDBProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComDBProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComDBProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComDBProto::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ComDBProto::id() const {
  return id_;
}
inline void ComDBProto::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required bytes data = 2;
inline bool ComDBProto::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComDBProto::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComDBProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComDBProto::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ComDBProto::data() const {
  return *data_;
}
inline void ComDBProto::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ComDBProto::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ComDBProto::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComDBProto::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ComDBProto::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComDBProto::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ComLoadAllDBRsp

// repeated .proto_ff.ComDBProto data = 1;
inline int ComLoadAllDBRsp::data_size() const {
  return data_.size();
}
inline void ComLoadAllDBRsp::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::ComDBProto& ComLoadAllDBRsp::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::ComDBProto* ComLoadAllDBRsp::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::ComDBProto* ComLoadAllDBRsp::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComDBProto >&
ComLoadAllDBRsp::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComDBProto >*
ComLoadAllDBRsp::mutable_data() {
  return &data_;
}

// required int32 is_finish = 2;
inline bool ComLoadAllDBRsp::has_is_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComLoadAllDBRsp::set_has_is_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComLoadAllDBRsp::clear_has_is_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComLoadAllDBRsp::clear_is_finish() {
  is_finish_ = 0;
  clear_has_is_finish();
}
inline ::google::protobuf::int32 ComLoadAllDBRsp::is_finish() const {
  return is_finish_;
}
inline void ComLoadAllDBRsp::set_is_finish(::google::protobuf::int32 value) {
  set_has_is_finish();
  is_finish_ = value;
}

// -------------------------------------------------------------------

// ComSaveDBReq

// required uint64 id = 1;
inline bool ComSaveDBReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComSaveDBReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComSaveDBReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComSaveDBReq::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ComSaveDBReq::id() const {
  return id_;
}
inline void ComSaveDBReq::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required bytes data = 2;
inline bool ComSaveDBReq::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComSaveDBReq::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComSaveDBReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComSaveDBReq::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ComSaveDBReq::data() const {
  return *data_;
}
inline void ComSaveDBReq::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ComSaveDBReq::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ComSaveDBReq::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComSaveDBReq::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ComSaveDBReq::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComSaveDBReq::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes table_name = 3;
inline bool ComSaveDBReq::has_table_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComSaveDBReq::set_has_table_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComSaveDBReq::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComSaveDBReq::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& ComSaveDBReq::table_name() const {
  return *table_name_;
}
inline void ComSaveDBReq::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComSaveDBReq::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComSaveDBReq::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComSaveDBReq::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* ComSaveDBReq::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComSaveDBReq::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ComDelDBReq

// required bytes table_name = 1;
inline bool ComDelDBReq::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComDelDBReq::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComDelDBReq::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComDelDBReq::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& ComDelDBReq::table_name() const {
  return *table_name_;
}
inline void ComDelDBReq::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComDelDBReq::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ComDelDBReq::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ComDelDBReq::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* ComDelDBReq::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ComDelDBReq::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 id_lst = 2;
inline int ComDelDBReq::id_lst_size() const {
  return id_lst_.size();
}
inline void ComDelDBReq::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::uint64 ComDelDBReq::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void ComDelDBReq::set_id_lst(int index, ::google::protobuf::uint64 value) {
  id_lst_.Set(index, value);
}
inline void ComDelDBReq::add_id_lst(::google::protobuf::uint64 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ComDelDBReq::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ComDelDBReq::mutable_id_lst() {
  return &id_lst_;
}

// -------------------------------------------------------------------

// MarryApply

// optional uint64 apply_dst_id = 1;
inline bool MarryApply::has_apply_dst_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryApply::set_has_apply_dst_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryApply::clear_has_apply_dst_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryApply::clear_apply_dst_id() {
  apply_dst_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_dst_id();
}
inline ::google::protobuf::uint64 MarryApply::apply_dst_id() const {
  return apply_dst_id_;
}
inline void MarryApply::set_apply_dst_id(::google::protobuf::uint64 value) {
  set_has_apply_dst_id();
  apply_dst_id_ = value;
}

// optional uint64 time = 2;
inline bool MarryApply::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryApply::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryApply::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryApply::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 MarryApply::time() const {
  return time_;
}
inline void MarryApply::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 gear = 3;
inline bool MarryApply::has_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryApply::set_has_gear() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryApply::clear_has_gear() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryApply::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 MarryApply::gear() const {
  return gear_;
}
inline void MarryApply::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// -------------------------------------------------------------------

// MarrySimpleInfo

// optional uint64 m_id = 1;
inline bool MarrySimpleInfo::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarrySimpleInfo::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarrySimpleInfo::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarrySimpleInfo::clear_m_id() {
  m_id_ = GOOGLE_ULONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::uint64 MarrySimpleInfo::m_id() const {
  return m_id_;
}
inline void MarrySimpleInfo::set_m_id(::google::protobuf::uint64 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional uint64 dst_id = 2;
inline bool MarrySimpleInfo::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarrySimpleInfo::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarrySimpleInfo::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarrySimpleInfo::clear_dst_id() {
  dst_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dst_id();
}
inline ::google::protobuf::uint64 MarrySimpleInfo::dst_id() const {
  return dst_id_;
}
inline void MarrySimpleInfo::set_dst_id(::google::protobuf::uint64 value) {
  set_has_dst_id();
  dst_id_ = value;
}

// optional uint32 marry_id = 3;
inline bool MarrySimpleInfo::has_marry_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarrySimpleInfo::set_has_marry_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarrySimpleInfo::clear_has_marry_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarrySimpleInfo::clear_marry_id() {
  marry_id_ = 0u;
  clear_has_marry_id();
}
inline ::google::protobuf::uint32 MarrySimpleInfo::marry_id() const {
  return marry_id_;
}
inline void MarrySimpleInfo::set_marry_id(::google::protobuf::uint32 value) {
  set_has_marry_id();
  marry_id_ = value;
}

// optional .proto_ff.MarryBrief brief = 4;
inline bool MarrySimpleInfo::has_brief() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarrySimpleInfo::set_has_brief() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarrySimpleInfo::clear_has_brief() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarrySimpleInfo::clear_brief() {
  if (brief_ != NULL) brief_->::proto_ff::MarryBrief::Clear();
  clear_has_brief();
}
inline const ::proto_ff::MarryBrief& MarrySimpleInfo::brief() const {
  return brief_ != NULL ? *brief_ : *default_instance_->brief_;
}
inline ::proto_ff::MarryBrief* MarrySimpleInfo::mutable_brief() {
  set_has_brief();
  if (brief_ == NULL) brief_ = new ::proto_ff::MarryBrief;
  return brief_;
}
inline ::proto_ff::MarryBrief* MarrySimpleInfo::release_brief() {
  clear_has_brief();
  ::proto_ff::MarryBrief* temp = brief_;
  brief_ = NULL;
  return temp;
}
inline void MarrySimpleInfo::set_allocated_brief(::proto_ff::MarryBrief* brief) {
  delete brief_;
  brief_ = brief;
  if (brief) {
    set_has_brief();
  } else {
    clear_has_brief();
  }
}

// optional .proto_ff.MarryApply apply = 5;
inline bool MarrySimpleInfo::has_apply() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarrySimpleInfo::set_has_apply() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarrySimpleInfo::clear_has_apply() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarrySimpleInfo::clear_apply() {
  if (apply_ != NULL) apply_->::proto_ff::MarryApply::Clear();
  clear_has_apply();
}
inline const ::proto_ff::MarryApply& MarrySimpleInfo::apply() const {
  return apply_ != NULL ? *apply_ : *default_instance_->apply_;
}
inline ::proto_ff::MarryApply* MarrySimpleInfo::mutable_apply() {
  set_has_apply();
  if (apply_ == NULL) apply_ = new ::proto_ff::MarryApply;
  return apply_;
}
inline ::proto_ff::MarryApply* MarrySimpleInfo::release_apply() {
  clear_has_apply();
  ::proto_ff::MarryApply* temp = apply_;
  apply_ = NULL;
  return temp;
}
inline void MarrySimpleInfo::set_allocated_apply(::proto_ff::MarryApply* apply) {
  delete apply_;
  apply_ = apply;
  if (apply) {
    set_has_apply();
  } else {
    clear_has_apply();
  }
}

// optional int32 state = 6;
inline bool MarrySimpleInfo::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarrySimpleInfo::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarrySimpleInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarrySimpleInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 MarrySimpleInfo::state() const {
  return state_;
}
inline void MarrySimpleInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// MarryDBLoadReq

// optional int32 offset = 1;
inline bool MarryDBLoadReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryDBLoadReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryDBLoadReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryDBLoadReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 MarryDBLoadReq::offset() const {
  return offset_;
}
inline void MarryDBLoadReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// MarryDBLoadRsp

// optional int32 ret = 1;
inline bool MarryDBLoadRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryDBLoadRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryDBLoadRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryDBLoadRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 MarryDBLoadRsp::ret() const {
  return ret_;
}
inline void MarryDBLoadRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 offset = 2;
inline bool MarryDBLoadRsp::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryDBLoadRsp::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryDBLoadRsp::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryDBLoadRsp::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 MarryDBLoadRsp::offset() const {
  return offset_;
}
inline void MarryDBLoadRsp::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .proto_ff.MarrySimpleInfo simple = 3;
inline int MarryDBLoadRsp::simple_size() const {
  return simple_.size();
}
inline void MarryDBLoadRsp::clear_simple() {
  simple_.Clear();
}
inline const ::proto_ff::MarrySimpleInfo& MarryDBLoadRsp::simple(int index) const {
  return simple_.Get(index);
}
inline ::proto_ff::MarrySimpleInfo* MarryDBLoadRsp::mutable_simple(int index) {
  return simple_.Mutable(index);
}
inline ::proto_ff::MarrySimpleInfo* MarryDBLoadRsp::add_simple() {
  return simple_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MarrySimpleInfo >&
MarryDBLoadRsp::simple() const {
  return simple_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MarrySimpleInfo >*
MarryDBLoadRsp::mutable_simple() {
  return &simple_;
}

// -------------------------------------------------------------------

// MarryDBSaveReq

// optional .proto_ff.MarrySimpleInfo info = 1;
inline bool MarryDBSaveReq::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryDBSaveReq::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryDBSaveReq::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryDBSaveReq::clear_info() {
  if (info_ != NULL) info_->::proto_ff::MarrySimpleInfo::Clear();
  clear_has_info();
}
inline const ::proto_ff::MarrySimpleInfo& MarryDBSaveReq::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::MarrySimpleInfo* MarryDBSaveReq::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::MarrySimpleInfo;
  return info_;
}
inline ::proto_ff::MarrySimpleInfo* MarryDBSaveReq::release_info() {
  clear_has_info();
  ::proto_ff::MarrySimpleInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MarryDBSaveReq::set_allocated_info(::proto_ff::MarrySimpleInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// AnswerRankDBProto

// optional uint32 factionid = 1;
inline bool AnswerRankDBProto::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnswerRankDBProto::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnswerRankDBProto::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnswerRankDBProto::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 AnswerRankDBProto::factionid() const {
  return factionid_;
}
inline void AnswerRankDBProto::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional bytes name = 2;
inline bool AnswerRankDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnswerRankDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnswerRankDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnswerRankDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AnswerRankDBProto::name() const {
  return *name_;
}
inline void AnswerRankDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AnswerRankDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AnswerRankDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnswerRankDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AnswerRankDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AnswerRankDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 count = 3;
inline bool AnswerRankDBProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnswerRankDBProto::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnswerRankDBProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnswerRankDBProto::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 AnswerRankDBProto::count() const {
  return count_;
}
inline void AnswerRankDBProto::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 zid = 4;
inline bool AnswerRankDBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnswerRankDBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnswerRankDBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnswerRankDBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 AnswerRankDBProto::zid() const {
  return zid_;
}
inline void AnswerRankDBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// AnswerDBData

// repeated .proto_ff.AnswerRankDBProto rank = 1;
inline int AnswerDBData::rank_size() const {
  return rank_.size();
}
inline void AnswerDBData::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::AnswerRankDBProto& AnswerDBData::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::AnswerRankDBProto* AnswerDBData::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::AnswerRankDBProto* AnswerDBData::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::AnswerRankDBProto >&
AnswerDBData::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::AnswerRankDBProto >*
AnswerDBData::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// GuardRankDBProto

// optional uint32 factionid = 1;
inline bool GuardRankDBProto::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuardRankDBProto::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuardRankDBProto::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuardRankDBProto::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 GuardRankDBProto::factionid() const {
  return factionid_;
}
inline void GuardRankDBProto::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional bytes name = 2;
inline bool GuardRankDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuardRankDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuardRankDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuardRankDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GuardRankDBProto::name() const {
  return *name_;
}
inline void GuardRankDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuardRankDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuardRankDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuardRankDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuardRankDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuardRankDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 count = 3;
inline bool GuardRankDBProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuardRankDBProto::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuardRankDBProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuardRankDBProto::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GuardRankDBProto::count() const {
  return count_;
}
inline void GuardRankDBProto::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint64 time = 4;
inline bool GuardRankDBProto::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuardRankDBProto::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuardRankDBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuardRankDBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 GuardRankDBProto::time() const {
  return time_;
}
inline void GuardRankDBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 zid = 5;
inline bool GuardRankDBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuardRankDBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuardRankDBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuardRankDBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 GuardRankDBProto::zid() const {
  return zid_;
}
inline void GuardRankDBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// GuardDBData

// repeated .proto_ff.GuardRankDBProto old_rank = 1;
inline int GuardDBData::old_rank_size() const {
  return old_rank_.size();
}
inline void GuardDBData::clear_old_rank() {
  old_rank_.Clear();
}
inline const ::proto_ff::GuardRankDBProto& GuardDBData::old_rank(int index) const {
  return old_rank_.Get(index);
}
inline ::proto_ff::GuardRankDBProto* GuardDBData::mutable_old_rank(int index) {
  return old_rank_.Mutable(index);
}
inline ::proto_ff::GuardRankDBProto* GuardDBData::add_old_rank() {
  return old_rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >&
GuardDBData::old_rank() const {
  return old_rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >*
GuardDBData::mutable_old_rank() {
  return &old_rank_;
}

// repeated .proto_ff.GuardRankDBProto cur_rank = 2;
inline int GuardDBData::cur_rank_size() const {
  return cur_rank_.size();
}
inline void GuardDBData::clear_cur_rank() {
  cur_rank_.Clear();
}
inline const ::proto_ff::GuardRankDBProto& GuardDBData::cur_rank(int index) const {
  return cur_rank_.Get(index);
}
inline ::proto_ff::GuardRankDBProto* GuardDBData::mutable_cur_rank(int index) {
  return cur_rank_.Mutable(index);
}
inline ::proto_ff::GuardRankDBProto* GuardDBData::add_cur_rank() {
  return cur_rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >&
GuardDBData::cur_rank() const {
  return cur_rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardRankDBProto >*
GuardDBData::mutable_cur_rank() {
  return &cur_rank_;
}

// -------------------------------------------------------------------

// Rank1v1DBProto

// optional int32 rank = 1;
inline bool Rank1v1DBProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank1v1DBProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank1v1DBProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank1v1DBProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Rank1v1DBProto::rank() const {
  return rank_;
}
inline void Rank1v1DBProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 cid = 2;
inline bool Rank1v1DBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rank1v1DBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rank1v1DBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rank1v1DBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Rank1v1DBProto::cid() const {
  return cid_;
}
inline void Rank1v1DBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool Rank1v1DBProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rank1v1DBProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rank1v1DBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rank1v1DBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Rank1v1DBProto::name() const {
  return *name_;
}
inline void Rank1v1DBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Rank1v1DBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Rank1v1DBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank1v1DBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Rank1v1DBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank1v1DBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 4;
inline bool Rank1v1DBProto::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rank1v1DBProto::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rank1v1DBProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rank1v1DBProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 Rank1v1DBProto::prof() const {
  return prof_;
}
inline void Rank1v1DBProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional uint64 fight = 5;
inline bool Rank1v1DBProto::has_fight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Rank1v1DBProto::set_has_fight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Rank1v1DBProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Rank1v1DBProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Rank1v1DBProto::fight() const {
  return fight_;
}
inline void Rank1v1DBProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional uint32 zid = 6;
inline bool Rank1v1DBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Rank1v1DBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Rank1v1DBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Rank1v1DBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Rank1v1DBProto::zid() const {
  return zid_;
}
inline void Rank1v1DBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 score = 7;
inline bool Rank1v1DBProto::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Rank1v1DBProto::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Rank1v1DBProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Rank1v1DBProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Rank1v1DBProto::score() const {
  return score_;
}
inline void Rank1v1DBProto::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional uint64 time = 8;
inline bool Rank1v1DBProto::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Rank1v1DBProto::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Rank1v1DBProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Rank1v1DBProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Rank1v1DBProto::time() const {
  return time_;
}
inline void Rank1v1DBProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 match_num = 9;
inline bool Rank1v1DBProto::has_match_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Rank1v1DBProto::set_has_match_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Rank1v1DBProto::clear_has_match_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Rank1v1DBProto::clear_match_num() {
  match_num_ = 0;
  clear_has_match_num();
}
inline ::google::protobuf::int32 Rank1v1DBProto::match_num() const {
  return match_num_;
}
inline void Rank1v1DBProto::set_match_num(::google::protobuf::int32 value) {
  set_has_match_num();
  match_num_ = value;
}

// -------------------------------------------------------------------

// Act1v1DBData

// repeated .proto_ff.Rank1v1DBProto rank = 1;
inline int Act1v1DBData::rank_size() const {
  return rank_.size();
}
inline void Act1v1DBData::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::Rank1v1DBProto& Act1v1DBData::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::Rank1v1DBProto* Act1v1DBData::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::Rank1v1DBProto* Act1v1DBData::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Rank1v1DBProto >&
Act1v1DBData::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Rank1v1DBProto >*
Act1v1DBData::mutable_rank() {
  return &rank_;
}

// optional uint64 reset_time = 2;
inline bool Act1v1DBData::has_reset_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Act1v1DBData::set_has_reset_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Act1v1DBData::clear_has_reset_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Act1v1DBData::clear_reset_time() {
  reset_time_ = GOOGLE_ULONGLONG(0);
  clear_has_reset_time();
}
inline ::google::protobuf::uint64 Act1v1DBData::reset_time() const {
  return reset_time_;
}
inline void Act1v1DBData::set_reset_time(::google::protobuf::uint64 value) {
  set_has_reset_time();
  reset_time_ = value;
}

// optional int32 num = 3;
inline bool Act1v1DBData::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Act1v1DBData::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Act1v1DBData::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Act1v1DBData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Act1v1DBData::num() const {
  return num_;
}
inline void Act1v1DBData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// RaceFactionDBProto

// optional uint32 faction_id = 1;
inline bool RaceFactionDBProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceFactionDBProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceFactionDBProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceFactionDBProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 RaceFactionDBProto::faction_id() const {
  return faction_id_;
}
inline void RaceFactionDBProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool RaceFactionDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceFactionDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceFactionDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceFactionDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RaceFactionDBProto::name() const {
  return *name_;
}
inline void RaceFactionDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RaceFactionDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RaceFactionDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RaceFactionDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RaceFactionDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RaceFactionDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 fight = 3;
inline bool RaceFactionDBProto::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceFactionDBProto::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceFactionDBProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceFactionDBProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 RaceFactionDBProto::fight() const {
  return fight_;
}
inline void RaceFactionDBProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional uint32 zid = 4;
inline bool RaceFactionDBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaceFactionDBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaceFactionDBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaceFactionDBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RaceFactionDBProto::zid() const {
  return zid_;
}
inline void RaceFactionDBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// RaceMatchDBProto

// optional uint32 faction_id1 = 1;
inline bool RaceMatchDBProto::has_faction_id1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceMatchDBProto::set_has_faction_id1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceMatchDBProto::clear_has_faction_id1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceMatchDBProto::clear_faction_id1() {
  faction_id1_ = 0u;
  clear_has_faction_id1();
}
inline ::google::protobuf::uint32 RaceMatchDBProto::faction_id1() const {
  return faction_id1_;
}
inline void RaceMatchDBProto::set_faction_id1(::google::protobuf::uint32 value) {
  set_has_faction_id1();
  faction_id1_ = value;
}

// optional uint32 faction_id2 = 2;
inline bool RaceMatchDBProto::has_faction_id2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceMatchDBProto::set_has_faction_id2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceMatchDBProto::clear_has_faction_id2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceMatchDBProto::clear_faction_id2() {
  faction_id2_ = 0u;
  clear_has_faction_id2();
}
inline ::google::protobuf::uint32 RaceMatchDBProto::faction_id2() const {
  return faction_id2_;
}
inline void RaceMatchDBProto::set_faction_id2(::google::protobuf::uint32 value) {
  set_has_faction_id2();
  faction_id2_ = value;
}

// optional uint32 faction_id = 3;
inline bool RaceMatchDBProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceMatchDBProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceMatchDBProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceMatchDBProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 RaceMatchDBProto::faction_id() const {
  return faction_id_;
}
inline void RaceMatchDBProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// RaceDBProto

// optional int32 race = 1;
inline bool RaceDBProto::has_race() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceDBProto::set_has_race() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceDBProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceDBProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 RaceDBProto::race() const {
  return race_;
}
inline void RaceDBProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// repeated .proto_ff.RaceFactionDBProto info_lst = 2;
inline int RaceDBProto::info_lst_size() const {
  return info_lst_.size();
}
inline void RaceDBProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::RaceFactionDBProto& RaceDBProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::RaceFactionDBProto* RaceDBProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::RaceFactionDBProto* RaceDBProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionDBProto >&
RaceDBProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionDBProto >*
RaceDBProto::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// WarRankDBProto

// optional uint32 faction_id = 1;
inline bool WarRankDBProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarRankDBProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarRankDBProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarRankDBProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 WarRankDBProto::faction_id() const {
  return faction_id_;
}
inline void WarRankDBProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool WarRankDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarRankDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarRankDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarRankDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WarRankDBProto::name() const {
  return *name_;
}
inline void WarRankDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarRankDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarRankDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WarRankDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WarRankDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WarRankDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 3;
inline bool WarRankDBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarRankDBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarRankDBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarRankDBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 WarRankDBProto::zid() const {
  return zid_;
}
inline void WarRankDBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 rank = 4;
inline bool WarRankDBProto::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarRankDBProto::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarRankDBProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarRankDBProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 WarRankDBProto::rank() const {
  return rank_;
}
inline void WarRankDBProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// FactionWarDBData

// repeated .proto_ff.RaceDBProto race = 1;
inline int FactionWarDBData::race_size() const {
  return race_.size();
}
inline void FactionWarDBData::clear_race() {
  race_.Clear();
}
inline const ::proto_ff::RaceDBProto& FactionWarDBData::race(int index) const {
  return race_.Get(index);
}
inline ::proto_ff::RaceDBProto* FactionWarDBData::mutable_race(int index) {
  return race_.Mutable(index);
}
inline ::proto_ff::RaceDBProto* FactionWarDBData::add_race() {
  return race_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceDBProto >&
FactionWarDBData::race() const {
  return race_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceDBProto >*
FactionWarDBData::mutable_race() {
  return &race_;
}

// repeated .proto_ff.WarRankDBProto rank = 2;
inline int FactionWarDBData::rank_size() const {
  return rank_.size();
}
inline void FactionWarDBData::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::WarRankDBProto& FactionWarDBData::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::WarRankDBProto* FactionWarDBData::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::WarRankDBProto* FactionWarDBData::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankDBProto >&
FactionWarDBData::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankDBProto >*
FactionWarDBData::mutable_rank() {
  return &rank_;
}

// optional uint32 win_id = 3;
inline bool FactionWarDBData::has_win_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWarDBData::set_has_win_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWarDBData::clear_has_win_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWarDBData::clear_win_id() {
  win_id_ = 0u;
  clear_has_win_id();
}
inline ::google::protobuf::uint32 FactionWarDBData::win_id() const {
  return win_id_;
}
inline void FactionWarDBData::set_win_id(::google::protobuf::uint32 value) {
  set_has_win_id();
  win_id_ = value;
}

// optional bytes win_name = 4;
inline bool FactionWarDBData::has_win_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWarDBData::set_has_win_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWarDBData::clear_has_win_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWarDBData::clear_win_name() {
  if (win_name_ != &::google::protobuf::internal::kEmptyString) {
    win_name_->clear();
  }
  clear_has_win_name();
}
inline const ::std::string& FactionWarDBData::win_name() const {
  return *win_name_;
}
inline void FactionWarDBData::set_win_name(const ::std::string& value) {
  set_has_win_name();
  if (win_name_ == &::google::protobuf::internal::kEmptyString) {
    win_name_ = new ::std::string;
  }
  win_name_->assign(value);
}
inline void FactionWarDBData::set_win_name(const char* value) {
  set_has_win_name();
  if (win_name_ == &::google::protobuf::internal::kEmptyString) {
    win_name_ = new ::std::string;
  }
  win_name_->assign(value);
}
inline void FactionWarDBData::set_win_name(const void* value, size_t size) {
  set_has_win_name();
  if (win_name_ == &::google::protobuf::internal::kEmptyString) {
    win_name_ = new ::std::string;
  }
  win_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionWarDBData::mutable_win_name() {
  set_has_win_name();
  if (win_name_ == &::google::protobuf::internal::kEmptyString) {
    win_name_ = new ::std::string;
  }
  return win_name_;
}
inline ::std::string* FactionWarDBData::release_win_name() {
  clear_has_win_name();
  if (win_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = win_name_;
    win_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionWarDBData::set_allocated_win_name(::std::string* win_name) {
  if (win_name_ != &::google::protobuf::internal::kEmptyString) {
    delete win_name_;
  }
  if (win_name) {
    set_has_win_name();
    win_name_ = win_name;
  } else {
    clear_has_win_name();
    win_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 win_num = 5;
inline bool FactionWarDBData::has_win_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionWarDBData::set_has_win_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionWarDBData::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionWarDBData::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 FactionWarDBData::win_num() const {
  return win_num_;
}
inline void FactionWarDBData::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional uint32 win_zid = 6;
inline bool FactionWarDBData::has_win_zid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionWarDBData::set_has_win_zid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionWarDBData::clear_has_win_zid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionWarDBData::clear_win_zid() {
  win_zid_ = 0u;
  clear_has_win_zid();
}
inline ::google::protobuf::uint32 FactionWarDBData::win_zid() const {
  return win_zid_;
}
inline void FactionWarDBData::set_win_zid(::google::protobuf::uint32 value) {
  set_has_win_zid();
  win_zid_ = value;
}

// -------------------------------------------------------------------

// DigEggLogDBProto

// optional bytes name = 1;
inline bool DigEggLogDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DigEggLogDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DigEggLogDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DigEggLogDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DigEggLogDBProto::name() const {
  return *name_;
}
inline void DigEggLogDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DigEggLogDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DigEggLogDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DigEggLogDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DigEggLogDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DigEggLogDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool DigEggLogDBProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DigEggLogDBProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DigEggLogDBProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DigEggLogDBProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DigEggLogDBProto::id() const {
  return id_;
}
inline void DigEggLogDBProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 cid = 3;
inline bool DigEggLogDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DigEggLogDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DigEggLogDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DigEggLogDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 DigEggLogDBProto::cid() const {
  return cid_;
}
inline void DigEggLogDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// FestDigEggLogDBProto

// optional int32 template_id = 1;
inline bool FestDigEggLogDBProto::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestDigEggLogDBProto::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestDigEggLogDBProto::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestDigEggLogDBProto::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 FestDigEggLogDBProto::template_id() const {
  return template_id_;
}
inline void FestDigEggLogDBProto::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .proto_ff.DigEggLogDBProto info = 2;
inline int FestDigEggLogDBProto::info_size() const {
  return info_.size();
}
inline void FestDigEggLogDBProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::DigEggLogDBProto& FestDigEggLogDBProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::DigEggLogDBProto* FestDigEggLogDBProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::DigEggLogDBProto* FestDigEggLogDBProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DigEggLogDBProto >&
FestDigEggLogDBProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DigEggLogDBProto >*
FestDigEggLogDBProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FestDigEggLogDBData

// repeated .proto_ff.FestDigEggLogDBProto log = 1;
inline int FestDigEggLogDBData::log_size() const {
  return log_.size();
}
inline void FestDigEggLogDBData::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::FestDigEggLogDBProto& FestDigEggLogDBData::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::FestDigEggLogDBProto* FestDigEggLogDBData::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::FestDigEggLogDBProto* FestDigEggLogDBData::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogDBProto >&
FestDigEggLogDBData::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDigEggLogDBProto >*
FestDigEggLogDBData::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// FestRTurnableLogDBData

// repeated .proto_ff.FestRTurnableLogDBProto log = 1;
inline int FestRTurnableLogDBData::log_size() const {
  return log_.size();
}
inline void FestRTurnableLogDBData::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::FestRTurnableLogDBProto& FestRTurnableLogDBData::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::FestRTurnableLogDBProto* FestRTurnableLogDBData::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::FestRTurnableLogDBProto* FestRTurnableLogDBData::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableLogDBProto >&
FestRTurnableLogDBData::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestRTurnableLogDBProto >*
FestRTurnableLogDBData::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// FestDonateDBData

// repeated .proto_ff.DonateServerDBProto data = 1;
inline int FestDonateDBData::data_size() const {
  return data_.size();
}
inline void FestDonateDBData::clear_data() {
  data_.Clear();
}
inline const ::proto_ff::DonateServerDBProto& FestDonateDBData::data(int index) const {
  return data_.Get(index);
}
inline ::proto_ff::DonateServerDBProto* FestDonateDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::proto_ff::DonateServerDBProto* FestDonateDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DonateServerDBProto >&
FestDonateDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DonateServerDBProto >*
FestDonateDBData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// FestDrawPizeLogDBData

// repeated .proto_ff.FestDrawPizeLogDBProto log = 1;
inline int FestDrawPizeLogDBData::log_size() const {
  return log_.size();
}
inline void FestDrawPizeLogDBData::clear_log() {
  log_.Clear();
}
inline const ::proto_ff::FestDrawPizeLogDBProto& FestDrawPizeLogDBData::log(int index) const {
  return log_.Get(index);
}
inline ::proto_ff::FestDrawPizeLogDBProto* FestDrawPizeLogDBData::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::proto_ff::FestDrawPizeLogDBProto* FestDrawPizeLogDBData::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDrawPizeLogDBProto >&
FestDrawPizeLogDBData::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FestDrawPizeLogDBProto >*
FestDrawPizeLogDBData::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// GoodsDB

// optional uint64 order_id = 1;
inline bool GoodsDB::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsDB::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsDB::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsDB::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 GoodsDB::order_id() const {
  return order_id_;
}
inline void GoodsDB::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional int32 market_type = 2;
inline bool GoodsDB::has_market_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsDB::set_has_market_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsDB::clear_has_market_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsDB::clear_market_type() {
  market_type_ = 0;
  clear_has_market_type();
}
inline ::google::protobuf::int32 GoodsDB::market_type() const {
  return market_type_;
}
inline void GoodsDB::set_market_type(::google::protobuf::int32 value) {
  set_has_market_type();
  market_type_ = value;
}

// optional uint64 market_owner = 3;
inline bool GoodsDB::has_market_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsDB::set_has_market_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsDB::clear_has_market_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsDB::clear_market_owner() {
  market_owner_ = GOOGLE_ULONGLONG(0);
  clear_has_market_owner();
}
inline ::google::protobuf::uint64 GoodsDB::market_owner() const {
  return market_owner_;
}
inline void GoodsDB::set_market_owner(::google::protobuf::uint64 value) {
  set_has_market_owner();
  market_owner_ = value;
}

// optional uint64 role_id = 4;
inline bool GoodsDB::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoodsDB::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoodsDB::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoodsDB::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 GoodsDB::role_id() const {
  return role_id_;
}
inline void GoodsDB::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 start_time = 5;
inline bool GoodsDB::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GoodsDB::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GoodsDB::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GoodsDB::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 GoodsDB::start_time() const {
  return start_time_;
}
inline void GoodsDB::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint64 end_time = 6;
inline bool GoodsDB::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GoodsDB::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GoodsDB::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GoodsDB::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 GoodsDB::end_time() const {
  return end_time_;
}
inline void GoodsDB::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint64 vie_id = 7;
inline bool GoodsDB::has_vie_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GoodsDB::set_has_vie_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GoodsDB::clear_has_vie_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GoodsDB::clear_vie_id() {
  vie_id_ = GOOGLE_ULONGLONG(0);
  clear_has_vie_id();
}
inline ::google::protobuf::uint64 GoodsDB::vie_id() const {
  return vie_id_;
}
inline void GoodsDB::set_vie_id(::google::protobuf::uint64 value) {
  set_has_vie_id();
  vie_id_ = value;
}

// optional int32 state = 8;
inline bool GoodsDB::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GoodsDB::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GoodsDB::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GoodsDB::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GoodsDB::state() const {
  return state_;
}
inline void GoodsDB::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 isdelete = 9;
inline bool GoodsDB::has_isdelete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GoodsDB::set_has_isdelete() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GoodsDB::clear_has_isdelete() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GoodsDB::clear_isdelete() {
  isdelete_ = 0;
  clear_has_isdelete();
}
inline ::google::protobuf::int32 GoodsDB::isdelete() const {
  return isdelete_;
}
inline void GoodsDB::set_isdelete(::google::protobuf::int32 value) {
  set_has_isdelete();
  isdelete_ = value;
}

// optional uint64 cmpt_time = 10;
inline bool GoodsDB::has_cmpt_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GoodsDB::set_has_cmpt_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GoodsDB::clear_has_cmpt_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GoodsDB::clear_cmpt_time() {
  cmpt_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cmpt_time();
}
inline ::google::protobuf::uint64 GoodsDB::cmpt_time() const {
  return cmpt_time_;
}
inline void GoodsDB::set_cmpt_time(::google::protobuf::uint64 value) {
  set_has_cmpt_time();
  cmpt_time_ = value;
}

// optional int32 cur_price = 11;
inline bool GoodsDB::has_cur_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GoodsDB::set_has_cur_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GoodsDB::clear_has_cur_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GoodsDB::clear_cur_price() {
  cur_price_ = 0;
  clear_has_cur_price();
}
inline ::google::protobuf::int32 GoodsDB::cur_price() const {
  return cur_price_;
}
inline void GoodsDB::set_cur_price(::google::protobuf::int32 value) {
  set_has_cur_price();
  cur_price_ = value;
}

// optional int32 cmpt_price = 12;
inline bool GoodsDB::has_cmpt_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GoodsDB::set_has_cmpt_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GoodsDB::clear_has_cmpt_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GoodsDB::clear_cmpt_price() {
  cmpt_price_ = 0;
  clear_has_cmpt_price();
}
inline ::google::protobuf::int32 GoodsDB::cmpt_price() const {
  return cmpt_price_;
}
inline void GoodsDB::set_cmpt_price(::google::protobuf::int32 value) {
  set_has_cmpt_price();
  cmpt_price_ = value;
}

// optional uint64 buyer_id = 13;
inline bool GoodsDB::has_buyer_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GoodsDB::set_has_buyer_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GoodsDB::clear_has_buyer_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GoodsDB::clear_buyer_id() {
  buyer_id_ = GOOGLE_ULONGLONG(0);
  clear_has_buyer_id();
}
inline ::google::protobuf::uint64 GoodsDB::buyer_id() const {
  return buyer_id_;
}
inline void GoodsDB::set_buyer_id(::google::protobuf::uint64 value) {
  set_has_buyer_id();
  buyer_id_ = value;
}

// optional uint64 vie_time = 14;
inline bool GoodsDB::has_vie_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GoodsDB::set_has_vie_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GoodsDB::clear_has_vie_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GoodsDB::clear_vie_time() {
  vie_time_ = GOOGLE_ULONGLONG(0);
  clear_has_vie_time();
}
inline ::google::protobuf::uint64 GoodsDB::vie_time() const {
  return vie_time_;
}
inline void GoodsDB::set_vie_time(::google::protobuf::uint64 value) {
  set_has_vie_time();
  vie_time_ = value;
}

// optional .proto_ff.ItemProtoInfo item_data = 15;
inline bool GoodsDB::has_item_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GoodsDB::set_has_item_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GoodsDB::clear_has_item_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GoodsDB::clear_item_data() {
  if (item_data_ != NULL) item_data_->::proto_ff::ItemProtoInfo::Clear();
  clear_has_item_data();
}
inline const ::proto_ff::ItemProtoInfo& GoodsDB::item_data() const {
  return item_data_ != NULL ? *item_data_ : *default_instance_->item_data_;
}
inline ::proto_ff::ItemProtoInfo* GoodsDB::mutable_item_data() {
  set_has_item_data();
  if (item_data_ == NULL) item_data_ = new ::proto_ff::ItemProtoInfo;
  return item_data_;
}
inline ::proto_ff::ItemProtoInfo* GoodsDB::release_item_data() {
  clear_has_item_data();
  ::proto_ff::ItemProtoInfo* temp = item_data_;
  item_data_ = NULL;
  return temp;
}
inline void GoodsDB::set_allocated_item_data(::proto_ff::ItemProtoInfo* item_data) {
  delete item_data_;
  item_data_ = item_data;
  if (item_data) {
    set_has_item_data();
  } else {
    clear_has_item_data();
  }
}

// optional int32 item_price = 16;
inline bool GoodsDB::has_item_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GoodsDB::set_has_item_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GoodsDB::clear_has_item_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GoodsDB::clear_item_price() {
  item_price_ = 0;
  clear_has_item_price();
}
inline ::google::protobuf::int32 GoodsDB::item_price() const {
  return item_price_;
}
inline void GoodsDB::set_item_price(::google::protobuf::int32 value) {
  set_has_item_price();
  item_price_ = value;
}

// optional bytes take_list = 17;
inline bool GoodsDB::has_take_list() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GoodsDB::set_has_take_list() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GoodsDB::clear_has_take_list() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GoodsDB::clear_take_list() {
  if (take_list_ != &::google::protobuf::internal::kEmptyString) {
    take_list_->clear();
  }
  clear_has_take_list();
}
inline const ::std::string& GoodsDB::take_list() const {
  return *take_list_;
}
inline void GoodsDB::set_take_list(const ::std::string& value) {
  set_has_take_list();
  if (take_list_ == &::google::protobuf::internal::kEmptyString) {
    take_list_ = new ::std::string;
  }
  take_list_->assign(value);
}
inline void GoodsDB::set_take_list(const char* value) {
  set_has_take_list();
  if (take_list_ == &::google::protobuf::internal::kEmptyString) {
    take_list_ = new ::std::string;
  }
  take_list_->assign(value);
}
inline void GoodsDB::set_take_list(const void* value, size_t size) {
  set_has_take_list();
  if (take_list_ == &::google::protobuf::internal::kEmptyString) {
    take_list_ = new ::std::string;
  }
  take_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsDB::mutable_take_list() {
  set_has_take_list();
  if (take_list_ == &::google::protobuf::internal::kEmptyString) {
    take_list_ = new ::std::string;
  }
  return take_list_;
}
inline ::std::string* GoodsDB::release_take_list() {
  clear_has_take_list();
  if (take_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = take_list_;
    take_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsDB::set_allocated_take_list(::std::string* take_list) {
  if (take_list_ != &::google::protobuf::internal::kEmptyString) {
    delete take_list_;
  }
  if (take_list) {
    set_has_take_list();
    take_list_ = take_list;
  } else {
    clear_has_take_list();
    take_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes vie_list = 18;
inline bool GoodsDB::has_vie_list() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GoodsDB::set_has_vie_list() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GoodsDB::clear_has_vie_list() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GoodsDB::clear_vie_list() {
  if (vie_list_ != &::google::protobuf::internal::kEmptyString) {
    vie_list_->clear();
  }
  clear_has_vie_list();
}
inline const ::std::string& GoodsDB::vie_list() const {
  return *vie_list_;
}
inline void GoodsDB::set_vie_list(const ::std::string& value) {
  set_has_vie_list();
  if (vie_list_ == &::google::protobuf::internal::kEmptyString) {
    vie_list_ = new ::std::string;
  }
  vie_list_->assign(value);
}
inline void GoodsDB::set_vie_list(const char* value) {
  set_has_vie_list();
  if (vie_list_ == &::google::protobuf::internal::kEmptyString) {
    vie_list_ = new ::std::string;
  }
  vie_list_->assign(value);
}
inline void GoodsDB::set_vie_list(const void* value, size_t size) {
  set_has_vie_list();
  if (vie_list_ == &::google::protobuf::internal::kEmptyString) {
    vie_list_ = new ::std::string;
  }
  vie_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsDB::mutable_vie_list() {
  set_has_vie_list();
  if (vie_list_ == &::google::protobuf::internal::kEmptyString) {
    vie_list_ = new ::std::string;
  }
  return vie_list_;
}
inline ::std::string* GoodsDB::release_vie_list() {
  clear_has_vie_list();
  if (vie_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vie_list_;
    vie_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsDB::set_allocated_vie_list(::std::string* vie_list) {
  if (vie_list_ != &::google::protobuf::internal::kEmptyString) {
    delete vie_list_;
  }
  if (vie_list) {
    set_has_vie_list();
    vie_list_ = vie_list;
  } else {
    clear_has_vie_list();
    vie_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 ready_time = 19;
inline bool GoodsDB::has_ready_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GoodsDB::set_has_ready_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GoodsDB::clear_has_ready_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GoodsDB::clear_ready_time() {
  ready_time_ = GOOGLE_ULONGLONG(0);
  clear_has_ready_time();
}
inline ::google::protobuf::uint64 GoodsDB::ready_time() const {
  return ready_time_;
}
inline void GoodsDB::set_ready_time(::google::protobuf::uint64 value) {
  set_has_ready_time();
  ready_time_ = value;
}

// optional int32 is_take = 20;
inline bool GoodsDB::has_is_take() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GoodsDB::set_has_is_take() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GoodsDB::clear_has_is_take() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GoodsDB::clear_is_take() {
  is_take_ = 0;
  clear_has_is_take();
}
inline ::google::protobuf::int32 GoodsDB::is_take() const {
  return is_take_;
}
inline void GoodsDB::set_is_take(::google::protobuf::int32 value) {
  set_has_is_take();
  is_take_ = value;
}

// -------------------------------------------------------------------

// LoadGoodsReq

// optional int64 start_time = 1;
inline bool LoadGoodsReq::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadGoodsReq::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadGoodsReq::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadGoodsReq::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 LoadGoodsReq::start_time() const {
  return start_time_;
}
inline void LoadGoodsReq::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// -------------------------------------------------------------------

// MarketDBLoadRsp

// repeated .proto_ff.GoodsDB infos = 1;
inline int MarketDBLoadRsp::infos_size() const {
  return infos_.size();
}
inline void MarketDBLoadRsp::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::GoodsDB& MarketDBLoadRsp::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::GoodsDB* MarketDBLoadRsp::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::GoodsDB* MarketDBLoadRsp::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GoodsDB >&
MarketDBLoadRsp::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GoodsDB >*
MarketDBLoadRsp::mutable_infos() {
  return &infos_;
}

// optional int32 is_finish = 2;
inline bool MarketDBLoadRsp::has_is_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketDBLoadRsp::set_has_is_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketDBLoadRsp::clear_has_is_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketDBLoadRsp::clear_is_finish() {
  is_finish_ = 0;
  clear_has_is_finish();
}
inline ::google::protobuf::int32 MarketDBLoadRsp::is_finish() const {
  return is_finish_;
}
inline void MarketDBLoadRsp::set_is_finish(::google::protobuf::int32 value) {
  set_has_is_finish();
  is_finish_ = value;
}

// -------------------------------------------------------------------

// MarketSaveReq

// optional .proto_ff.GoodsDB info = 1;
inline bool MarketSaveReq::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketSaveReq::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketSaveReq::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketSaveReq::clear_info() {
  if (info_ != NULL) info_->::proto_ff::GoodsDB::Clear();
  clear_has_info();
}
inline const ::proto_ff::GoodsDB& MarketSaveReq::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::GoodsDB* MarketSaveReq::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::GoodsDB;
  return info_;
}
inline ::proto_ff::GoodsDB* MarketSaveReq::release_info() {
  clear_has_info();
  ::proto_ff::GoodsDB* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MarketSaveReq::set_allocated_info(::proto_ff::GoodsDB* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// MarketDelReq

// optional uint64 order_id = 1;
inline bool MarketDelReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketDelReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketDelReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketDelReq::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 MarketDelReq::order_id() const {
  return order_id_;
}
inline void MarketDelReq::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
}

// -------------------------------------------------------------------

// CandleHarmDBProto

// optional uint64 cid = 1;
inline bool CandleHarmDBProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CandleHarmDBProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CandleHarmDBProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CandleHarmDBProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CandleHarmDBProto::cid() const {
  return cid_;
}
inline void CandleHarmDBProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool CandleHarmDBProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CandleHarmDBProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CandleHarmDBProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CandleHarmDBProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CandleHarmDBProto::name() const {
  return *name_;
}
inline void CandleHarmDBProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CandleHarmDBProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CandleHarmDBProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CandleHarmDBProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CandleHarmDBProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CandleHarmDBProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 harm = 3;
inline bool CandleHarmDBProto::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CandleHarmDBProto::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CandleHarmDBProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CandleHarmDBProto::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 CandleHarmDBProto::harm() const {
  return harm_;
}
inline void CandleHarmDBProto::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint32 zid = 4;
inline bool CandleHarmDBProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CandleHarmDBProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CandleHarmDBProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CandleHarmDBProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 CandleHarmDBProto::zid() const {
  return zid_;
}
inline void CandleHarmDBProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 rank = 5;
inline bool CandleHarmDBProto::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CandleHarmDBProto::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CandleHarmDBProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CandleHarmDBProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 CandleHarmDBProto::rank() const {
  return rank_;
}
inline void CandleHarmDBProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// CandleDBData

// optional int32 index = 1;
inline bool CandleDBData::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CandleDBData::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CandleDBData::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CandleDBData::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CandleDBData::index() const {
  return index_;
}
inline void CandleDBData::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated .proto_ff.CandleHarmDBProto ham = 2;
inline int CandleDBData::ham_size() const {
  return ham_.size();
}
inline void CandleDBData::clear_ham() {
  ham_.Clear();
}
inline const ::proto_ff::CandleHarmDBProto& CandleDBData::ham(int index) const {
  return ham_.Get(index);
}
inline ::proto_ff::CandleHarmDBProto* CandleDBData::mutable_ham(int index) {
  return ham_.Mutable(index);
}
inline ::proto_ff::CandleHarmDBProto* CandleDBData::add_ham() {
  return ham_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CandleHarmDBProto >&
CandleDBData::ham() const {
  return ham_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CandleHarmDBProto >*
CandleDBData::mutable_ham() {
  return &ham_;
}

// optional uint64 time = 3;
inline bool CandleDBData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CandleDBData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CandleDBData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CandleDBData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 CandleDBData::time() const {
  return time_;
}
inline void CandleDBData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::RoleMirrorData_Type>() {
  return ::proto_ff::RoleMirrorData_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBProxy_2eproto__INCLUDED
