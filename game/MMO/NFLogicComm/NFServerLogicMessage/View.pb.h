// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: View.proto

#ifndef PROTOBUF_View_2eproto__INCLUDED
#define PROTOBUF_View_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "common_logic.pb.h"
#include "Com.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_View_2eproto();
void protobuf_AssignDesc_View_2eproto();
void protobuf_ShutdownFile_View_2eproto();

class CreatureCreateData;
class CreatureCreateData_Player;
class CreatureCreateData_Monster;
class CreatureCreateData_Drop;
class CreatureDestoryData;
class BroadChgName;
class BroadFactionInfo;

// ===================================================================

class CreatureCreateData_Player : public ::google::protobuf::Message {
 public:
  CreatureCreateData_Player();
  virtual ~CreatureCreateData_Player();

  CreatureCreateData_Player(const CreatureCreateData_Player& from);

  inline CreatureCreateData_Player& operator=(const CreatureCreateData_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureCreateData_Player& default_instance();

  void Swap(CreatureCreateData_Player* other);

  // implements Message ----------------------------------------------

  CreatureCreateData_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureCreateData_Player& from);
  void MergeFrom(const CreatureCreateData_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .proto_ff.Attr64 attr = 3;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 3;
  inline const ::proto_ff::Attr64& attr(int index) const;
  inline ::proto_ff::Attr64* mutable_attr(int index);
  inline ::proto_ff::Attr64* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
      mutable_attr();

  // required .proto_ff.Vector3PB pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // required uint32 curstate = 5;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurstateFieldNumber = 5;
  inline ::google::protobuf::uint32 curstate() const;
  inline void set_curstate(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleFacadeProto facade = 6;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 6;
  inline const ::proto_ff::RoleFacadeProto& facade() const;
  inline ::proto_ff::RoleFacadeProto* mutable_facade();
  inline ::proto_ff::RoleFacadeProto* release_facade();
  inline void set_allocated_facade(::proto_ff::RoleFacadeProto* facade);

  // optional bytes faction_name = 7;
  inline bool has_faction_name() const;
  inline void clear_faction_name();
  static const int kFactionNameFieldNumber = 7;
  inline const ::std::string& faction_name() const;
  inline void set_faction_name(const ::std::string& value);
  inline void set_faction_name(const char* value);
  inline void set_faction_name(const void* value, size_t size);
  inline ::std::string* mutable_faction_name();
  inline ::std::string* release_faction_name();
  inline void set_allocated_faction_name(::std::string* faction_name);

  // optional uint32 zid = 8;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 8;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional bytes titleName = 9;
  inline bool has_titlename() const;
  inline void clear_titlename();
  static const int kTitleNameFieldNumber = 9;
  inline const ::std::string& titlename() const;
  inline void set_titlename(const ::std::string& value);
  inline void set_titlename(const char* value);
  inline void set_titlename(const void* value, size_t size);
  inline ::std::string* mutable_titlename();
  inline ::std::string* release_titlename();
  inline void set_allocated_titlename(::std::string* titlename);

  // optional .proto_ff.BuffListProto bufflst = 10;
  inline bool has_bufflst() const;
  inline void clear_bufflst();
  static const int kBufflstFieldNumber = 10;
  inline const ::proto_ff::BuffListProto& bufflst() const;
  inline ::proto_ff::BuffListProto* mutable_bufflst();
  inline ::proto_ff::BuffListProto* release_bufflst();
  inline void set_allocated_bufflst(::proto_ff::BuffListProto* bufflst);

  // optional int32 head = 11;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 11;
  inline ::google::protobuf::int32 head() const;
  inline void set_head(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureCreateData.Player)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_curstate();
  inline void clear_has_curstate();
  inline void set_has_facade();
  inline void clear_has_facade();
  inline void set_has_faction_name();
  inline void clear_has_faction_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_titlename();
  inline void clear_has_titlename();
  inline void set_has_bufflst();
  inline void clear_has_bufflst();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 > attr_;
  ::proto_ff::Vector3PB* pos_;
  ::proto_ff::RoleFacadeProto* facade_;
  ::google::protobuf::uint32 curstate_;
  ::google::protobuf::uint32 zid_;
  ::std::string* faction_name_;
  ::std::string* titlename_;
  ::proto_ff::BuffListProto* bufflst_;
  ::google::protobuf::int32 head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static CreatureCreateData_Player* default_instance_;
};
// -------------------------------------------------------------------

class CreatureCreateData_Monster : public ::google::protobuf::Message {
 public:
  CreatureCreateData_Monster();
  virtual ~CreatureCreateData_Monster();

  CreatureCreateData_Monster(const CreatureCreateData_Monster& from);

  inline CreatureCreateData_Monster& operator=(const CreatureCreateData_Monster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureCreateData_Monster& default_instance();

  void Swap(CreatureCreateData_Monster* other);

  // implements Message ----------------------------------------------

  CreatureCreateData_Monster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureCreateData_Monster& from);
  void MergeFrom(const CreatureCreateData_Monster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint64 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint64 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint64 value);

  // repeated .proto_ff.Attr64 attr = 3;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 3;
  inline const ::proto_ff::Attr64& attr(int index) const;
  inline ::proto_ff::Attr64* mutable_attr(int index);
  inline ::proto_ff::Attr64* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
      mutable_attr();

  // required .proto_ff.Vector3PB pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // required uint32 curstate = 5;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurstateFieldNumber = 5;
  inline ::google::protobuf::uint32 curstate() const;
  inline void set_curstate(::google::protobuf::uint32 value);

  // optional bool isNewCreate = 6;
  inline bool has_isnewcreate() const;
  inline void clear_isnewcreate();
  static const int kIsNewCreateFieldNumber = 6;
  inline bool isnewcreate() const;
  inline void set_isnewcreate(bool value);

  // optional uint32 func_type = 7;
  inline bool has_func_type() const;
  inline void clear_func_type();
  static const int kFuncTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 func_type() const;
  inline void set_func_type(::google::protobuf::uint32 value);

  // required .proto_ff.Vector2PB dir = 8;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 8;
  inline const ::proto_ff::Vector2PB& dir() const;
  inline ::proto_ff::Vector2PB* mutable_dir();
  inline ::proto_ff::Vector2PB* release_dir();
  inline void set_allocated_dir(::proto_ff::Vector2PB* dir);

  // optional int32 left_live_sec = 9;
  inline bool has_left_live_sec() const;
  inline void clear_left_live_sec();
  static const int kLeftLiveSecFieldNumber = 9;
  inline ::google::protobuf::int32 left_live_sec() const;
  inline void set_left_live_sec(::google::protobuf::int32 value);

  // optional int64 guild_id = 10;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 10;
  inline ::google::protobuf::int64 guild_id() const;
  inline void set_guild_id(::google::protobuf::int64 value);

  // optional bytes guild_name = 11;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 11;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const void* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint32 zid = 12;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 12;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint64 ownercid = 13;
  inline bool has_ownercid() const;
  inline void clear_ownercid();
  static const int kOwnercidFieldNumber = 13;
  inline ::google::protobuf::uint64 ownercid() const;
  inline void set_ownercid(::google::protobuf::uint64 value);

  // optional bytes ownername = 14;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnernameFieldNumber = 14;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const void* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // optional .proto_ff.BuffListProto bufflst = 15;
  inline bool has_bufflst() const;
  inline void clear_bufflst();
  static const int kBufflstFieldNumber = 15;
  inline const ::proto_ff::BuffListProto& bufflst() const;
  inline ::proto_ff::BuffListProto* mutable_bufflst();
  inline ::proto_ff::BuffListProto* release_bufflst();
  inline void set_allocated_bufflst(::proto_ff::BuffListProto* bufflst);

  // optional int32 instid = 16;
  inline bool has_instid() const;
  inline void clear_instid();
  static const int kInstidFieldNumber = 16;
  inline ::google::protobuf::int32 instid() const;
  inline void set_instid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureCreateData.Monster)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_curstate();
  inline void clear_has_curstate();
  inline void set_has_isnewcreate();
  inline void clear_has_isnewcreate();
  inline void set_has_func_type();
  inline void clear_has_func_type();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_left_live_sec();
  inline void clear_has_left_live_sec();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_ownercid();
  inline void clear_has_ownercid();
  inline void set_has_ownername();
  inline void clear_has_ownername();
  inline void set_has_bufflst();
  inline void clear_has_bufflst();
  inline void set_has_instid();
  inline void clear_has_instid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 cfgid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 > attr_;
  ::proto_ff::Vector3PB* pos_;
  ::google::protobuf::uint32 curstate_;
  bool isnewcreate_;
  ::proto_ff::Vector2PB* dir_;
  ::google::protobuf::uint32 func_type_;
  ::google::protobuf::int32 left_live_sec_;
  ::google::protobuf::int64 guild_id_;
  ::std::string* guild_name_;
  ::google::protobuf::uint64 ownercid_;
  ::std::string* ownername_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 instid_;
  ::proto_ff::BuffListProto* bufflst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static CreatureCreateData_Monster* default_instance_;
};
// -------------------------------------------------------------------

class CreatureCreateData_Drop : public ::google::protobuf::Message {
 public:
  CreatureCreateData_Drop();
  virtual ~CreatureCreateData_Drop();

  CreatureCreateData_Drop(const CreatureCreateData_Drop& from);

  inline CreatureCreateData_Drop& operator=(const CreatureCreateData_Drop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureCreateData_Drop& default_instance();

  void Swap(CreatureCreateData_Drop* other);

  // implements Message ----------------------------------------------

  CreatureCreateData_Drop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureCreateData_Drop& from);
  void MergeFrom(const CreatureCreateData_Drop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required .proto_ff.Vector3PB pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated uint64 value = 4;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint64 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint64 value);
  inline void add_value(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_value();

  // required uint64 dropTime = 5;
  inline bool has_droptime() const;
  inline void clear_droptime();
  static const int kDropTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 droptime() const;
  inline void set_droptime(::google::protobuf::uint64 value);

  // optional .proto_ff.ItemProtoInfo item = 6;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 6;
  inline const ::proto_ff::ItemProtoInfo& item() const;
  inline ::proto_ff::ItemProtoInfo* mutable_item();
  inline ::proto_ff::ItemProtoInfo* release_item();
  inline void set_allocated_item(::proto_ff::ItemProtoInfo* item);

  // optional uint32 currency = 7;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 7;
  inline ::google::protobuf::uint32 currency() const;
  inline void set_currency(::google::protobuf::uint32 value);

  // optional uint32 init_protect = 8;
  inline bool has_init_protect() const;
  inline void clear_init_protect();
  static const int kInitProtectFieldNumber = 8;
  inline ::google::protobuf::uint32 init_protect() const;
  inline void set_init_protect(::google::protobuf::uint32 value);

  // optional int32 pick_level = 9;
  inline bool has_pick_level() const;
  inline void clear_pick_level();
  static const int kPickLevelFieldNumber = 9;
  inline ::google::protobuf::int32 pick_level() const;
  inline void set_pick_level(::google::protobuf::int32 value);

  // optional int32 currency_type = 10;
  inline bool has_currency_type() const;
  inline void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 10;
  inline ::google::protobuf::int32 currency_type() const;
  inline void set_currency_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureCreateData.Drop)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_droptime();
  inline void clear_has_droptime();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_init_protect();
  inline void clear_has_init_protect();
  inline void set_has_pick_level();
  inline void clear_has_pick_level();
  inline void set_has_currency_type();
  inline void clear_has_currency_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::proto_ff::Vector3PB* pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > value_;
  ::google::protobuf::uint64 droptime_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 currency_;
  ::proto_ff::ItemProtoInfo* item_;
  ::google::protobuf::uint32 init_protect_;
  ::google::protobuf::int32 pick_level_;
  ::google::protobuf::int32 currency_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static CreatureCreateData_Drop* default_instance_;
};
// -------------------------------------------------------------------

class CreatureCreateData : public ::google::protobuf::Message {
 public:
  CreatureCreateData();
  virtual ~CreatureCreateData();

  CreatureCreateData(const CreatureCreateData& from);

  inline CreatureCreateData& operator=(const CreatureCreateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureCreateData& default_instance();

  void Swap(CreatureCreateData* other);

  // implements Message ----------------------------------------------

  CreatureCreateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureCreateData& from);
  void MergeFrom(const CreatureCreateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CreatureCreateData_Player Player;
  typedef CreatureCreateData_Monster Monster;
  typedef CreatureCreateData_Drop Drop;

  // accessors -------------------------------------------------------

  // repeated .proto_ff.CreatureCreateData.Player players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::proto_ff::CreatureCreateData_Player& players(int index) const;
  inline ::proto_ff::CreatureCreateData_Player* mutable_players(int index);
  inline ::proto_ff::CreatureCreateData_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Player >*
      mutable_players();

  // repeated .proto_ff.CreatureCreateData.Monster monsters = 2;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 2;
  inline const ::proto_ff::CreatureCreateData_Monster& monsters(int index) const;
  inline ::proto_ff::CreatureCreateData_Monster* mutable_monsters(int index);
  inline ::proto_ff::CreatureCreateData_Monster* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Monster >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Monster >*
      mutable_monsters();

  // repeated .proto_ff.CreatureCreateData.Drop drops = 3;
  inline int drops_size() const;
  inline void clear_drops();
  static const int kDropsFieldNumber = 3;
  inline const ::proto_ff::CreatureCreateData_Drop& drops(int index) const;
  inline ::proto_ff::CreatureCreateData_Drop* mutable_drops(int index);
  inline ::proto_ff::CreatureCreateData_Drop* add_drops();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Drop >&
      drops() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Drop >*
      mutable_drops();

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureCreateData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Monster > monsters_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Drop > drops_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static CreatureCreateData* default_instance_;
};
// -------------------------------------------------------------------

class CreatureDestoryData : public ::google::protobuf::Message {
 public:
  CreatureDestoryData();
  virtual ~CreatureDestoryData();

  CreatureDestoryData(const CreatureDestoryData& from);

  inline CreatureDestoryData& operator=(const CreatureDestoryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureDestoryData& default_instance();

  void Swap(CreatureDestoryData* other);

  // implements Message ----------------------------------------------

  CreatureDestoryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureDestoryData& from);
  void MergeFrom(const CreatureDestoryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cids = 1;
  inline int cids_size() const;
  inline void clear_cids();
  static const int kCidsFieldNumber = 1;
  inline ::google::protobuf::uint64 cids(int index) const;
  inline void set_cids(int index, ::google::protobuf::uint64 value);
  inline void add_cids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cids();

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureDestoryData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static CreatureDestoryData* default_instance_;
};
// -------------------------------------------------------------------

class BroadChgName : public ::google::protobuf::Message {
 public:
  BroadChgName();
  virtual ~BroadChgName();

  BroadChgName(const BroadChgName& from);

  inline BroadChgName& operator=(const BroadChgName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadChgName& default_instance();

  void Swap(BroadChgName* other);

  // implements Message ----------------------------------------------

  BroadChgName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadChgName& from);
  void MergeFrom(const BroadChgName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.BroadChgName)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static BroadChgName* default_instance_;
};
// -------------------------------------------------------------------

class BroadFactionInfo : public ::google::protobuf::Message {
 public:
  BroadFactionInfo();
  virtual ~BroadFactionInfo();

  BroadFactionInfo(const BroadFactionInfo& from);

  inline BroadFactionInfo& operator=(const BroadFactionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadFactionInfo& default_instance();

  void Swap(BroadFactionInfo* other);

  // implements Message ----------------------------------------------

  BroadFactionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadFactionInfo& from);
  void MergeFrom(const BroadFactionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.BroadFactionInfo)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_View_2eproto();
  friend void protobuf_AssignDesc_View_2eproto();
  friend void protobuf_ShutdownFile_View_2eproto();

  void InitAsDefaultInstance();
  static BroadFactionInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CreatureCreateData_Player

// required uint64 cid = 1;
inline bool CreatureCreateData_Player::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureCreateData_Player::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureCreateData_Player::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureCreateData_Player::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureCreateData_Player::cid() const {
  return cid_;
}
inline void CreatureCreateData_Player::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool CreatureCreateData_Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatureCreateData_Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatureCreateData_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatureCreateData_Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreatureCreateData_Player::name() const {
  return *name_;
}
inline void CreatureCreateData_Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreatureCreateData_Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreatureCreateData_Player::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatureCreateData_Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreatureCreateData_Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatureCreateData_Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.Attr64 attr = 3;
inline int CreatureCreateData_Player::attr_size() const {
  return attr_.size();
}
inline void CreatureCreateData_Player::clear_attr() {
  attr_.Clear();
}
inline const ::proto_ff::Attr64& CreatureCreateData_Player::attr(int index) const {
  return attr_.Get(index);
}
inline ::proto_ff::Attr64* CreatureCreateData_Player::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::proto_ff::Attr64* CreatureCreateData_Player::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
CreatureCreateData_Player::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
CreatureCreateData_Player::mutable_attr() {
  return &attr_;
}

// required .proto_ff.Vector3PB pos = 4;
inline bool CreatureCreateData_Player::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatureCreateData_Player::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatureCreateData_Player::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatureCreateData_Player::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& CreatureCreateData_Player::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* CreatureCreateData_Player::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* CreatureCreateData_Player::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CreatureCreateData_Player::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required uint32 curstate = 5;
inline bool CreatureCreateData_Player::has_curstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatureCreateData_Player::set_has_curstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatureCreateData_Player::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatureCreateData_Player::clear_curstate() {
  curstate_ = 0u;
  clear_has_curstate();
}
inline ::google::protobuf::uint32 CreatureCreateData_Player::curstate() const {
  return curstate_;
}
inline void CreatureCreateData_Player::set_curstate(::google::protobuf::uint32 value) {
  set_has_curstate();
  curstate_ = value;
}

// optional .proto_ff.RoleFacadeProto facade = 6;
inline bool CreatureCreateData_Player::has_facade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreatureCreateData_Player::set_has_facade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreatureCreateData_Player::clear_has_facade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreatureCreateData_Player::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
  clear_has_facade();
}
inline const ::proto_ff::RoleFacadeProto& CreatureCreateData_Player::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::RoleFacadeProto* CreatureCreateData_Player::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::RoleFacadeProto;
  return facade_;
}
inline ::proto_ff::RoleFacadeProto* CreatureCreateData_Player::release_facade() {
  clear_has_facade();
  ::proto_ff::RoleFacadeProto* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void CreatureCreateData_Player::set_allocated_facade(::proto_ff::RoleFacadeProto* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// optional bytes faction_name = 7;
inline bool CreatureCreateData_Player::has_faction_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreatureCreateData_Player::set_has_faction_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreatureCreateData_Player::clear_has_faction_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreatureCreateData_Player::clear_faction_name() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    faction_name_->clear();
  }
  clear_has_faction_name();
}
inline const ::std::string& CreatureCreateData_Player::faction_name() const {
  return *faction_name_;
}
inline void CreatureCreateData_Player::set_faction_name(const ::std::string& value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void CreatureCreateData_Player::set_faction_name(const char* value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void CreatureCreateData_Player::set_faction_name(const void* value, size_t size) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatureCreateData_Player::mutable_faction_name() {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  return faction_name_;
}
inline ::std::string* CreatureCreateData_Player::release_faction_name() {
  clear_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faction_name_;
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatureCreateData_Player::set_allocated_faction_name(::std::string* faction_name) {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (faction_name) {
    set_has_faction_name();
    faction_name_ = faction_name;
  } else {
    clear_has_faction_name();
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 8;
inline bool CreatureCreateData_Player::has_zid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreatureCreateData_Player::set_has_zid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreatureCreateData_Player::clear_has_zid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreatureCreateData_Player::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 CreatureCreateData_Player::zid() const {
  return zid_;
}
inline void CreatureCreateData_Player::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional bytes titleName = 9;
inline bool CreatureCreateData_Player::has_titlename() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreatureCreateData_Player::set_has_titlename() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreatureCreateData_Player::clear_has_titlename() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreatureCreateData_Player::clear_titlename() {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    titlename_->clear();
  }
  clear_has_titlename();
}
inline const ::std::string& CreatureCreateData_Player::titlename() const {
  return *titlename_;
}
inline void CreatureCreateData_Player::set_titlename(const ::std::string& value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void CreatureCreateData_Player::set_titlename(const char* value) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(value);
}
inline void CreatureCreateData_Player::set_titlename(const void* value, size_t size) {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  titlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatureCreateData_Player::mutable_titlename() {
  set_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    titlename_ = new ::std::string;
  }
  return titlename_;
}
inline ::std::string* CreatureCreateData_Player::release_titlename() {
  clear_has_titlename();
  if (titlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titlename_;
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatureCreateData_Player::set_allocated_titlename(::std::string* titlename) {
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (titlename) {
    set_has_titlename();
    titlename_ = titlename;
  } else {
    clear_has_titlename();
    titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.BuffListProto bufflst = 10;
inline bool CreatureCreateData_Player::has_bufflst() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreatureCreateData_Player::set_has_bufflst() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreatureCreateData_Player::clear_has_bufflst() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreatureCreateData_Player::clear_bufflst() {
  if (bufflst_ != NULL) bufflst_->::proto_ff::BuffListProto::Clear();
  clear_has_bufflst();
}
inline const ::proto_ff::BuffListProto& CreatureCreateData_Player::bufflst() const {
  return bufflst_ != NULL ? *bufflst_ : *default_instance_->bufflst_;
}
inline ::proto_ff::BuffListProto* CreatureCreateData_Player::mutable_bufflst() {
  set_has_bufflst();
  if (bufflst_ == NULL) bufflst_ = new ::proto_ff::BuffListProto;
  return bufflst_;
}
inline ::proto_ff::BuffListProto* CreatureCreateData_Player::release_bufflst() {
  clear_has_bufflst();
  ::proto_ff::BuffListProto* temp = bufflst_;
  bufflst_ = NULL;
  return temp;
}
inline void CreatureCreateData_Player::set_allocated_bufflst(::proto_ff::BuffListProto* bufflst) {
  delete bufflst_;
  bufflst_ = bufflst;
  if (bufflst) {
    set_has_bufflst();
  } else {
    clear_has_bufflst();
  }
}

// optional int32 head = 11;
inline bool CreatureCreateData_Player::has_head() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreatureCreateData_Player::set_has_head() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreatureCreateData_Player::clear_has_head() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreatureCreateData_Player::clear_head() {
  head_ = 0;
  clear_has_head();
}
inline ::google::protobuf::int32 CreatureCreateData_Player::head() const {
  return head_;
}
inline void CreatureCreateData_Player::set_head(::google::protobuf::int32 value) {
  set_has_head();
  head_ = value;
}

// -------------------------------------------------------------------

// CreatureCreateData_Monster

// required uint64 cid = 1;
inline bool CreatureCreateData_Monster::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureCreateData_Monster::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureCreateData_Monster::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureCreateData_Monster::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureCreateData_Monster::cid() const {
  return cid_;
}
inline void CreatureCreateData_Monster::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint64 cfgid = 2;
inline bool CreatureCreateData_Monster::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatureCreateData_Monster::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatureCreateData_Monster::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatureCreateData_Monster::clear_cfgid() {
  cfgid_ = GOOGLE_ULONGLONG(0);
  clear_has_cfgid();
}
inline ::google::protobuf::uint64 CreatureCreateData_Monster::cfgid() const {
  return cfgid_;
}
inline void CreatureCreateData_Monster::set_cfgid(::google::protobuf::uint64 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// repeated .proto_ff.Attr64 attr = 3;
inline int CreatureCreateData_Monster::attr_size() const {
  return attr_.size();
}
inline void CreatureCreateData_Monster::clear_attr() {
  attr_.Clear();
}
inline const ::proto_ff::Attr64& CreatureCreateData_Monster::attr(int index) const {
  return attr_.Get(index);
}
inline ::proto_ff::Attr64* CreatureCreateData_Monster::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::proto_ff::Attr64* CreatureCreateData_Monster::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
CreatureCreateData_Monster::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
CreatureCreateData_Monster::mutable_attr() {
  return &attr_;
}

// required .proto_ff.Vector3PB pos = 4;
inline bool CreatureCreateData_Monster::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatureCreateData_Monster::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatureCreateData_Monster::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatureCreateData_Monster::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& CreatureCreateData_Monster::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* CreatureCreateData_Monster::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* CreatureCreateData_Monster::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CreatureCreateData_Monster::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required uint32 curstate = 5;
inline bool CreatureCreateData_Monster::has_curstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatureCreateData_Monster::set_has_curstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatureCreateData_Monster::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatureCreateData_Monster::clear_curstate() {
  curstate_ = 0u;
  clear_has_curstate();
}
inline ::google::protobuf::uint32 CreatureCreateData_Monster::curstate() const {
  return curstate_;
}
inline void CreatureCreateData_Monster::set_curstate(::google::protobuf::uint32 value) {
  set_has_curstate();
  curstate_ = value;
}

// optional bool isNewCreate = 6;
inline bool CreatureCreateData_Monster::has_isnewcreate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreatureCreateData_Monster::set_has_isnewcreate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreatureCreateData_Monster::clear_has_isnewcreate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreatureCreateData_Monster::clear_isnewcreate() {
  isnewcreate_ = false;
  clear_has_isnewcreate();
}
inline bool CreatureCreateData_Monster::isnewcreate() const {
  return isnewcreate_;
}
inline void CreatureCreateData_Monster::set_isnewcreate(bool value) {
  set_has_isnewcreate();
  isnewcreate_ = value;
}

// optional uint32 func_type = 7;
inline bool CreatureCreateData_Monster::has_func_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreatureCreateData_Monster::set_has_func_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreatureCreateData_Monster::clear_has_func_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreatureCreateData_Monster::clear_func_type() {
  func_type_ = 0u;
  clear_has_func_type();
}
inline ::google::protobuf::uint32 CreatureCreateData_Monster::func_type() const {
  return func_type_;
}
inline void CreatureCreateData_Monster::set_func_type(::google::protobuf::uint32 value) {
  set_has_func_type();
  func_type_ = value;
}

// required .proto_ff.Vector2PB dir = 8;
inline bool CreatureCreateData_Monster::has_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreatureCreateData_Monster::set_has_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreatureCreateData_Monster::clear_has_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreatureCreateData_Monster::clear_dir() {
  if (dir_ != NULL) dir_->::proto_ff::Vector2PB::Clear();
  clear_has_dir();
}
inline const ::proto_ff::Vector2PB& CreatureCreateData_Monster::dir() const {
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
inline ::proto_ff::Vector2PB* CreatureCreateData_Monster::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) dir_ = new ::proto_ff::Vector2PB;
  return dir_;
}
inline ::proto_ff::Vector2PB* CreatureCreateData_Monster::release_dir() {
  clear_has_dir();
  ::proto_ff::Vector2PB* temp = dir_;
  dir_ = NULL;
  return temp;
}
inline void CreatureCreateData_Monster::set_allocated_dir(::proto_ff::Vector2PB* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
}

// optional int32 left_live_sec = 9;
inline bool CreatureCreateData_Monster::has_left_live_sec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreatureCreateData_Monster::set_has_left_live_sec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreatureCreateData_Monster::clear_has_left_live_sec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreatureCreateData_Monster::clear_left_live_sec() {
  left_live_sec_ = 0;
  clear_has_left_live_sec();
}
inline ::google::protobuf::int32 CreatureCreateData_Monster::left_live_sec() const {
  return left_live_sec_;
}
inline void CreatureCreateData_Monster::set_left_live_sec(::google::protobuf::int32 value) {
  set_has_left_live_sec();
  left_live_sec_ = value;
}

// optional int64 guild_id = 10;
inline bool CreatureCreateData_Monster::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreatureCreateData_Monster::set_has_guild_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreatureCreateData_Monster::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreatureCreateData_Monster::clear_guild_id() {
  guild_id_ = GOOGLE_LONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::int64 CreatureCreateData_Monster::guild_id() const {
  return guild_id_;
}
inline void CreatureCreateData_Monster::set_guild_id(::google::protobuf::int64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional bytes guild_name = 11;
inline bool CreatureCreateData_Monster::has_guild_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreatureCreateData_Monster::set_has_guild_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreatureCreateData_Monster::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreatureCreateData_Monster::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& CreatureCreateData_Monster::guild_name() const {
  return *guild_name_;
}
inline void CreatureCreateData_Monster::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void CreatureCreateData_Monster::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void CreatureCreateData_Monster::set_guild_name(const void* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatureCreateData_Monster::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* CreatureCreateData_Monster::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatureCreateData_Monster::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 12;
inline bool CreatureCreateData_Monster::has_zid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreatureCreateData_Monster::set_has_zid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreatureCreateData_Monster::clear_has_zid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreatureCreateData_Monster::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 CreatureCreateData_Monster::zid() const {
  return zid_;
}
inline void CreatureCreateData_Monster::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 ownercid = 13;
inline bool CreatureCreateData_Monster::has_ownercid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CreatureCreateData_Monster::set_has_ownercid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CreatureCreateData_Monster::clear_has_ownercid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CreatureCreateData_Monster::clear_ownercid() {
  ownercid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownercid();
}
inline ::google::protobuf::uint64 CreatureCreateData_Monster::ownercid() const {
  return ownercid_;
}
inline void CreatureCreateData_Monster::set_ownercid(::google::protobuf::uint64 value) {
  set_has_ownercid();
  ownercid_ = value;
}

// optional bytes ownername = 14;
inline bool CreatureCreateData_Monster::has_ownername() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CreatureCreateData_Monster::set_has_ownername() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CreatureCreateData_Monster::clear_has_ownername() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CreatureCreateData_Monster::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& CreatureCreateData_Monster::ownername() const {
  return *ownername_;
}
inline void CreatureCreateData_Monster::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void CreatureCreateData_Monster::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void CreatureCreateData_Monster::set_ownername(const void* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreatureCreateData_Monster::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* CreatureCreateData_Monster::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreatureCreateData_Monster::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.BuffListProto bufflst = 15;
inline bool CreatureCreateData_Monster::has_bufflst() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CreatureCreateData_Monster::set_has_bufflst() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CreatureCreateData_Monster::clear_has_bufflst() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CreatureCreateData_Monster::clear_bufflst() {
  if (bufflst_ != NULL) bufflst_->::proto_ff::BuffListProto::Clear();
  clear_has_bufflst();
}
inline const ::proto_ff::BuffListProto& CreatureCreateData_Monster::bufflst() const {
  return bufflst_ != NULL ? *bufflst_ : *default_instance_->bufflst_;
}
inline ::proto_ff::BuffListProto* CreatureCreateData_Monster::mutable_bufflst() {
  set_has_bufflst();
  if (bufflst_ == NULL) bufflst_ = new ::proto_ff::BuffListProto;
  return bufflst_;
}
inline ::proto_ff::BuffListProto* CreatureCreateData_Monster::release_bufflst() {
  clear_has_bufflst();
  ::proto_ff::BuffListProto* temp = bufflst_;
  bufflst_ = NULL;
  return temp;
}
inline void CreatureCreateData_Monster::set_allocated_bufflst(::proto_ff::BuffListProto* bufflst) {
  delete bufflst_;
  bufflst_ = bufflst;
  if (bufflst) {
    set_has_bufflst();
  } else {
    clear_has_bufflst();
  }
}

// optional int32 instid = 16;
inline bool CreatureCreateData_Monster::has_instid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CreatureCreateData_Monster::set_has_instid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CreatureCreateData_Monster::clear_has_instid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CreatureCreateData_Monster::clear_instid() {
  instid_ = 0;
  clear_has_instid();
}
inline ::google::protobuf::int32 CreatureCreateData_Monster::instid() const {
  return instid_;
}
inline void CreatureCreateData_Monster::set_instid(::google::protobuf::int32 value) {
  set_has_instid();
  instid_ = value;
}

// -------------------------------------------------------------------

// CreatureCreateData_Drop

// required uint64 cid = 1;
inline bool CreatureCreateData_Drop::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureCreateData_Drop::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureCreateData_Drop::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureCreateData_Drop::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureCreateData_Drop::cid() const {
  return cid_;
}
inline void CreatureCreateData_Drop::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required .proto_ff.Vector3PB pos = 2;
inline bool CreatureCreateData_Drop::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatureCreateData_Drop::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatureCreateData_Drop::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatureCreateData_Drop::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& CreatureCreateData_Drop::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* CreatureCreateData_Drop::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* CreatureCreateData_Drop::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CreatureCreateData_Drop::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required int32 type = 3;
inline bool CreatureCreateData_Drop::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatureCreateData_Drop::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatureCreateData_Drop::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatureCreateData_Drop::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CreatureCreateData_Drop::type() const {
  return type_;
}
inline void CreatureCreateData_Drop::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint64 value = 4;
inline int CreatureCreateData_Drop::value_size() const {
  return value_.size();
}
inline void CreatureCreateData_Drop::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint64 CreatureCreateData_Drop::value(int index) const {
  return value_.Get(index);
}
inline void CreatureCreateData_Drop::set_value(int index, ::google::protobuf::uint64 value) {
  value_.Set(index, value);
}
inline void CreatureCreateData_Drop::add_value(::google::protobuf::uint64 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CreatureCreateData_Drop::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CreatureCreateData_Drop::mutable_value() {
  return &value_;
}

// required uint64 dropTime = 5;
inline bool CreatureCreateData_Drop::has_droptime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatureCreateData_Drop::set_has_droptime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatureCreateData_Drop::clear_has_droptime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatureCreateData_Drop::clear_droptime() {
  droptime_ = GOOGLE_ULONGLONG(0);
  clear_has_droptime();
}
inline ::google::protobuf::uint64 CreatureCreateData_Drop::droptime() const {
  return droptime_;
}
inline void CreatureCreateData_Drop::set_droptime(::google::protobuf::uint64 value) {
  set_has_droptime();
  droptime_ = value;
}

// optional .proto_ff.ItemProtoInfo item = 6;
inline bool CreatureCreateData_Drop::has_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreatureCreateData_Drop::set_has_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreatureCreateData_Drop::clear_has_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreatureCreateData_Drop::clear_item() {
  if (item_ != NULL) item_->::proto_ff::ItemProtoInfo::Clear();
  clear_has_item();
}
inline const ::proto_ff::ItemProtoInfo& CreatureCreateData_Drop::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::proto_ff::ItemProtoInfo* CreatureCreateData_Drop::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::proto_ff::ItemProtoInfo;
  return item_;
}
inline ::proto_ff::ItemProtoInfo* CreatureCreateData_Drop::release_item() {
  clear_has_item();
  ::proto_ff::ItemProtoInfo* temp = item_;
  item_ = NULL;
  return temp;
}
inline void CreatureCreateData_Drop::set_allocated_item(::proto_ff::ItemProtoInfo* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// optional uint32 currency = 7;
inline bool CreatureCreateData_Drop::has_currency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreatureCreateData_Drop::set_has_currency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreatureCreateData_Drop::clear_has_currency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreatureCreateData_Drop::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
inline ::google::protobuf::uint32 CreatureCreateData_Drop::currency() const {
  return currency_;
}
inline void CreatureCreateData_Drop::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
}

// optional uint32 init_protect = 8;
inline bool CreatureCreateData_Drop::has_init_protect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreatureCreateData_Drop::set_has_init_protect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreatureCreateData_Drop::clear_has_init_protect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreatureCreateData_Drop::clear_init_protect() {
  init_protect_ = 0u;
  clear_has_init_protect();
}
inline ::google::protobuf::uint32 CreatureCreateData_Drop::init_protect() const {
  return init_protect_;
}
inline void CreatureCreateData_Drop::set_init_protect(::google::protobuf::uint32 value) {
  set_has_init_protect();
  init_protect_ = value;
}

// optional int32 pick_level = 9;
inline bool CreatureCreateData_Drop::has_pick_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreatureCreateData_Drop::set_has_pick_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreatureCreateData_Drop::clear_has_pick_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreatureCreateData_Drop::clear_pick_level() {
  pick_level_ = 0;
  clear_has_pick_level();
}
inline ::google::protobuf::int32 CreatureCreateData_Drop::pick_level() const {
  return pick_level_;
}
inline void CreatureCreateData_Drop::set_pick_level(::google::protobuf::int32 value) {
  set_has_pick_level();
  pick_level_ = value;
}

// optional int32 currency_type = 10;
inline bool CreatureCreateData_Drop::has_currency_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreatureCreateData_Drop::set_has_currency_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreatureCreateData_Drop::clear_has_currency_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreatureCreateData_Drop::clear_currency_type() {
  currency_type_ = 0;
  clear_has_currency_type();
}
inline ::google::protobuf::int32 CreatureCreateData_Drop::currency_type() const {
  return currency_type_;
}
inline void CreatureCreateData_Drop::set_currency_type(::google::protobuf::int32 value) {
  set_has_currency_type();
  currency_type_ = value;
}

// -------------------------------------------------------------------

// CreatureCreateData

// repeated .proto_ff.CreatureCreateData.Player players = 1;
inline int CreatureCreateData::players_size() const {
  return players_.size();
}
inline void CreatureCreateData::clear_players() {
  players_.Clear();
}
inline const ::proto_ff::CreatureCreateData_Player& CreatureCreateData::players(int index) const {
  return players_.Get(index);
}
inline ::proto_ff::CreatureCreateData_Player* CreatureCreateData::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto_ff::CreatureCreateData_Player* CreatureCreateData::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Player >&
CreatureCreateData::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Player >*
CreatureCreateData::mutable_players() {
  return &players_;
}

// repeated .proto_ff.CreatureCreateData.Monster monsters = 2;
inline int CreatureCreateData::monsters_size() const {
  return monsters_.size();
}
inline void CreatureCreateData::clear_monsters() {
  monsters_.Clear();
}
inline const ::proto_ff::CreatureCreateData_Monster& CreatureCreateData::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::proto_ff::CreatureCreateData_Monster* CreatureCreateData::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::proto_ff::CreatureCreateData_Monster* CreatureCreateData::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Monster >&
CreatureCreateData::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Monster >*
CreatureCreateData::mutable_monsters() {
  return &monsters_;
}

// repeated .proto_ff.CreatureCreateData.Drop drops = 3;
inline int CreatureCreateData::drops_size() const {
  return drops_.size();
}
inline void CreatureCreateData::clear_drops() {
  drops_.Clear();
}
inline const ::proto_ff::CreatureCreateData_Drop& CreatureCreateData::drops(int index) const {
  return drops_.Get(index);
}
inline ::proto_ff::CreatureCreateData_Drop* CreatureCreateData::mutable_drops(int index) {
  return drops_.Mutable(index);
}
inline ::proto_ff::CreatureCreateData_Drop* CreatureCreateData::add_drops() {
  return drops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Drop >&
CreatureCreateData::drops() const {
  return drops_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::CreatureCreateData_Drop >*
CreatureCreateData::mutable_drops() {
  return &drops_;
}

// -------------------------------------------------------------------

// CreatureDestoryData

// repeated uint64 cids = 1;
inline int CreatureDestoryData::cids_size() const {
  return cids_.size();
}
inline void CreatureDestoryData::clear_cids() {
  cids_.Clear();
}
inline ::google::protobuf::uint64 CreatureDestoryData::cids(int index) const {
  return cids_.Get(index);
}
inline void CreatureDestoryData::set_cids(int index, ::google::protobuf::uint64 value) {
  cids_.Set(index, value);
}
inline void CreatureDestoryData::add_cids(::google::protobuf::uint64 value) {
  cids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CreatureDestoryData::cids() const {
  return cids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CreatureDestoryData::mutable_cids() {
  return &cids_;
}

// -------------------------------------------------------------------

// BroadChgName

// required uint64 cid = 1;
inline bool BroadChgName::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadChgName::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadChgName::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadChgName::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 BroadChgName::cid() const {
  return cid_;
}
inline void BroadChgName::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool BroadChgName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadChgName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadChgName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadChgName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BroadChgName::name() const {
  return *name_;
}
inline void BroadChgName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BroadChgName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BroadChgName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadChgName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BroadChgName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BroadChgName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BroadFactionInfo

// required uint64 cid = 1;
inline bool BroadFactionInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadFactionInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadFactionInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadFactionInfo::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 BroadFactionInfo::cid() const {
  return cid_;
}
inline void BroadFactionInfo::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 faction_id = 2;
inline bool BroadFactionInfo::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadFactionInfo::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadFactionInfo::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadFactionInfo::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 BroadFactionInfo::faction_id() const {
  return faction_id_;
}
inline void BroadFactionInfo::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes name = 3;
inline bool BroadFactionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadFactionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BroadFactionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BroadFactionInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BroadFactionInfo::name() const {
  return *name_;
}
inline void BroadFactionInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BroadFactionInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BroadFactionInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadFactionInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BroadFactionInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BroadFactionInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_View_2eproto__INCLUDED
