// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Peractivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Peractivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_PeractivityPeractivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PeractivityPeractivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PeractivityPeractivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PeractivityPeractivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PeractivityWeek_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PeractivityWeek_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PeractivityWeek_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PeractivityWeek_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fPeractivity_2eproto() {
  protobuf_AddDesc_E_5fPeractivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Peractivity.proto");
  GOOGLE_CHECK(file != NULL);
  E_PeractivityPeractivity_descriptor_ = file->message_type(0);
  static const int E_PeractivityPeractivity_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_activename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_opeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_closeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_serverdelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_openingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_advancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_iscross_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, m_isfestvial_),
  };
  E_PeractivityPeractivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PeractivityPeractivity_descriptor_,
      E_PeractivityPeractivity::default_instance_,
      E_PeractivityPeractivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityPeractivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PeractivityPeractivity));
  Sheet_PeractivityPeractivity_descriptor_ = file->message_type(1);
  static const int Sheet_PeractivityPeractivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeractivityPeractivity, e_peractivityperactivity_list_),
  };
  Sheet_PeractivityPeractivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PeractivityPeractivity_descriptor_,
      Sheet_PeractivityPeractivity::default_instance_,
      Sheet_PeractivityPeractivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeractivityPeractivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeractivityPeractivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PeractivityPeractivity));
  E_PeractivityWeek_descriptor_ = file->message_type(2);
  static const int E_PeractivityWeek_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityWeek, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityWeek, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityWeek, m_week_),
  };
  E_PeractivityWeek_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PeractivityWeek_descriptor_,
      E_PeractivityWeek::default_instance_,
      E_PeractivityWeek_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityWeek, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeractivityWeek, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PeractivityWeek));
  Sheet_PeractivityWeek_descriptor_ = file->message_type(3);
  static const int Sheet_PeractivityWeek_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeractivityWeek, e_peractivityweek_list_),
  };
  Sheet_PeractivityWeek_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PeractivityWeek_descriptor_,
      Sheet_PeractivityWeek::default_instance_,
      Sheet_PeractivityWeek_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeractivityWeek, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeractivityWeek, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PeractivityWeek));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fPeractivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PeractivityPeractivity_descriptor_, &E_PeractivityPeractivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PeractivityPeractivity_descriptor_, &Sheet_PeractivityPeractivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PeractivityWeek_descriptor_, &E_PeractivityWeek::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PeractivityWeek_descriptor_, &Sheet_PeractivityWeek::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fPeractivity_2eproto() {
  delete E_PeractivityPeractivity::default_instance_;
  delete E_PeractivityPeractivity_reflection_;
  delete Sheet_PeractivityPeractivity::default_instance_;
  delete Sheet_PeractivityPeractivity_reflection_;
  delete E_PeractivityWeek::default_instance_;
  delete E_PeractivityWeek_reflection_;
  delete Sheet_PeractivityWeek::default_instance_;
  delete Sheet_PeractivityWeek_reflection_;
}

void protobuf_AddDesc_E_5fPeractivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023E_Peractivity.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\"\317\004\n\030E_PeractivityPeractiv"
    "ity\022 \n\nm_activeId\030\001 \001(\003B\014\302\377\024\010\346\264\273\345\212\250ID\022*\n"
    "\014m_activeName\030\002 \001(\tB\024\302\377\024\014\346\264\273\345\212\250\345\220\215\347\247\260\220\301\024"
    "@\022\036\n\010m_typeId\030\003 \001(\005B\014\302\377\024\010\347\261\273\345\236\213ID\022(\n\014m_f"
    "unctionID\030\004 \001(\005B\022\302\377\024\016\345\212\237\350\203\275\345\274\200\346\224\276ID\022&\n\010m"
    "_opeDay\030\005 \001(\tB\024\302\377\024\014\345\274\200\346\224\276\346\227\245\346\234\237\220\301\024@\022(\n\nm"
    "_closeDay\030\006 \001(\tB\024\302\377\024\014\345\205\263\351\227\255\346\227\245\346\234\237\220\301\024@\022=\n"
    "\021m_serverdelayTime\030\007 \001(\005B\"\302\377\024\036\345\274\200\346\234\215\345\220\216\345"
    "\244\232\345\260\221\345\244\251\346\264\273\345\212\250\345\274\200\345\220\257\0225\n\014m_serverTime\030\010 \001"
    "(\005B\037\302\377\024\033\345\274\200\346\234\215\345\220\216\345\244\232\345\260\221\346\264\273\345\212\250\347\273\223\346\235\237\022\'\n\rm"
    "_openingTime\030\t \001(\005B\020\302\377\024\014\345\274\200\345\220\257\346\227\266\351\225\277\022-\n\r"
    "m_advanceTime\030\n \001(\005B\026\302\377\024\022\346\217\220\345\211\215\345\271\277\346\222\255\346\227\266"
    "\351\227\264\022(\n\016m_intervalTime\030\013 \001(\005B\020\302\377\024\014\345\271\277\346\222\255\351"
    "\227\264\351\232\224\022#\n\tm_isCross\030\014 \001(\005B\020\302\377\024\014\346\230\257\345\220\246\350\267\250\346"
    "\234\215\022,\n\014m_isFestvial\030\r \001(\005B\026\302\377\024\022\346\230\257\345\220\246\351\231\220\346"
    "\227\266\346\264\273\345\212\250\"o\n\034Sheet_PeractivityPeractivity"
    "\022O\n\035E_PeractivityPeractivity_List\030\001 \003(\0132"
    "\".proto_ff.E_PeractivityPeractivityB\004\210\301\024"
    " \"n\n\021E_PeractivityWeek\022\030\n\004m_id\030\001 \001(\005B\n\302\377"
    "\024\006\345\272\217\345\217\267\022\036\n\006m_time\030\002 \001(\tB\016\302\377\024\006\346\227\266\351\227\264\220\301\024@"
    "\022\037\n\006m_week\030\003 \003(\tB\017\302\377\024\003\345\221\250\210\301\024\007\220\301\024@\"Z\n\025She"
    "et_PeractivityWeek\022A\n\026E_PeractivityWeek_"
    "List\030\001 \003(\0132\033.proto_ff.E_PeractivityWeekB"
    "\004\210\301\024 ", 965);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Peractivity.proto", &protobuf_RegisterTypes);
  E_PeractivityPeractivity::default_instance_ = new E_PeractivityPeractivity();
  Sheet_PeractivityPeractivity::default_instance_ = new Sheet_PeractivityPeractivity();
  E_PeractivityWeek::default_instance_ = new E_PeractivityWeek();
  Sheet_PeractivityWeek::default_instance_ = new Sheet_PeractivityWeek();
  E_PeractivityPeractivity::default_instance_->InitAsDefaultInstance();
  Sheet_PeractivityPeractivity::default_instance_->InitAsDefaultInstance();
  E_PeractivityWeek::default_instance_->InitAsDefaultInstance();
  Sheet_PeractivityWeek::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fPeractivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fPeractivity_2eproto {
  StaticDescriptorInitializer_E_5fPeractivity_2eproto() {
    protobuf_AddDesc_E_5fPeractivity_2eproto();
  }
} static_descriptor_initializer_E_5fPeractivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_PeractivityPeractivity::kMActiveIdFieldNumber;
const int E_PeractivityPeractivity::kMActiveNameFieldNumber;
const int E_PeractivityPeractivity::kMTypeIdFieldNumber;
const int E_PeractivityPeractivity::kMFunctionIDFieldNumber;
const int E_PeractivityPeractivity::kMOpeDayFieldNumber;
const int E_PeractivityPeractivity::kMCloseDayFieldNumber;
const int E_PeractivityPeractivity::kMServerdelayTimeFieldNumber;
const int E_PeractivityPeractivity::kMServerTimeFieldNumber;
const int E_PeractivityPeractivity::kMOpeningTimeFieldNumber;
const int E_PeractivityPeractivity::kMAdvanceTimeFieldNumber;
const int E_PeractivityPeractivity::kMIntervalTimeFieldNumber;
const int E_PeractivityPeractivity::kMIsCrossFieldNumber;
const int E_PeractivityPeractivity::kMIsFestvialFieldNumber;
#endif  // !_MSC_VER

E_PeractivityPeractivity::E_PeractivityPeractivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PeractivityPeractivity::InitAsDefaultInstance() {
}

E_PeractivityPeractivity::E_PeractivityPeractivity(const E_PeractivityPeractivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PeractivityPeractivity::SharedCtor() {
  _cached_size_ = 0;
  m_activeid_ = GOOGLE_LONGLONG(0);
  m_activename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_typeid_ = 0;
  m_functionid_ = 0;
  m_opeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_closeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_serverdelaytime_ = 0;
  m_servertime_ = 0;
  m_openingtime_ = 0;
  m_advancetime_ = 0;
  m_intervaltime_ = 0;
  m_iscross_ = 0;
  m_isfestvial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PeractivityPeractivity::~E_PeractivityPeractivity() {
  SharedDtor();
}

void E_PeractivityPeractivity::SharedDtor() {
  if (m_activename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activename_;
  }
  if (m_opeday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_opeday_;
  }
  if (m_closeday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_closeday_;
  }
  if (this != default_instance_) {
  }
}

void E_PeractivityPeractivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PeractivityPeractivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PeractivityPeractivity_descriptor_;
}

const E_PeractivityPeractivity& E_PeractivityPeractivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeractivity_2eproto();
  return *default_instance_;
}

E_PeractivityPeractivity* E_PeractivityPeractivity::default_instance_ = NULL;

E_PeractivityPeractivity* E_PeractivityPeractivity::New() const {
  return new E_PeractivityPeractivity;
}

void E_PeractivityPeractivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_activeid_ = GOOGLE_LONGLONG(0);
    if (has_m_activename()) {
      if (m_activename_ != &::google::protobuf::internal::kEmptyString) {
        m_activename_->clear();
      }
    }
    m_typeid_ = 0;
    m_functionid_ = 0;
    if (has_m_opeday()) {
      if (m_opeday_ != &::google::protobuf::internal::kEmptyString) {
        m_opeday_->clear();
      }
    }
    if (has_m_closeday()) {
      if (m_closeday_ != &::google::protobuf::internal::kEmptyString) {
        m_closeday_->clear();
      }
    }
    m_serverdelaytime_ = 0;
    m_servertime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_openingtime_ = 0;
    m_advancetime_ = 0;
    m_intervaltime_ = 0;
    m_iscross_ = 0;
    m_isfestvial_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PeractivityPeractivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_activeid_)));
          set_has_m_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_activeName;
        break;
      }

      // optional string m_activeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_activename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_activename().data(), this->m_activename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_typeId;
        break;
      }

      // optional int32 m_typeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_functionID;
        break;
      }

      // optional int32 m_functionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_opeDay;
        break;
      }

      // optional string m_opeDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_opeDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_opeday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_opeday().data(), this->m_opeday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_closeDay;
        break;
      }

      // optional string m_closeDay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_closeDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_closeday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_closeday().data(), this->m_closeday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_serverdelayTime;
        break;
      }

      // optional int32 m_serverdelayTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serverdelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverdelaytime_)));
          set_has_m_serverdelaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_serverTime;
        break;
      }

      // optional int32 m_serverTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_servertime_)));
          set_has_m_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_openingTime;
        break;
      }

      // optional int32 m_openingTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openingtime_)));
          set_has_m_openingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_advanceTime;
        break;
      }

      // optional int32 m_advanceTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancetime_)));
          set_has_m_advancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_intervalTime;
        break;
      }

      // optional int32 m_intervalTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_intervaltime_)));
          set_has_m_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_isCross;
        break;
      }

      // optional int32 m_isCross = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isCross:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iscross_)));
          set_has_m_iscross();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_isFestvial;
        break;
      }

      // optional int32 m_isFestvial = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isFestvial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isfestvial_)));
          set_has_m_isfestvial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PeractivityPeractivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_activeId = 1;
  if (has_m_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_activeid(), output);
  }

  // optional string m_activeName = 2;
  if (has_m_activename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activename().data(), this->m_activename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_activename(), output);
  }

  // optional int32 m_typeId = 3;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_typeid(), output);
  }

  // optional int32 m_functionID = 4;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_functionid(), output);
  }

  // optional string m_opeDay = 5;
  if (has_m_opeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_opeday().data(), this->m_opeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_opeday(), output);
  }

  // optional string m_closeDay = 6;
  if (has_m_closeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_closeday().data(), this->m_closeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_closeday(), output);
  }

  // optional int32 m_serverdelayTime = 7;
  if (has_m_serverdelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_serverdelaytime(), output);
  }

  // optional int32 m_serverTime = 8;
  if (has_m_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_servertime(), output);
  }

  // optional int32 m_openingTime = 9;
  if (has_m_openingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_openingtime(), output);
  }

  // optional int32 m_advanceTime = 10;
  if (has_m_advancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_advancetime(), output);
  }

  // optional int32 m_intervalTime = 11;
  if (has_m_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_intervaltime(), output);
  }

  // optional int32 m_isCross = 12;
  if (has_m_iscross()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_iscross(), output);
  }

  // optional int32 m_isFestvial = 13;
  if (has_m_isfestvial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_isfestvial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PeractivityPeractivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_activeId = 1;
  if (has_m_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_activeid(), target);
  }

  // optional string m_activeName = 2;
  if (has_m_activename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activename().data(), this->m_activename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_activename(), target);
  }

  // optional int32 m_typeId = 3;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_typeid(), target);
  }

  // optional int32 m_functionID = 4;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_functionid(), target);
  }

  // optional string m_opeDay = 5;
  if (has_m_opeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_opeday().data(), this->m_opeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_opeday(), target);
  }

  // optional string m_closeDay = 6;
  if (has_m_closeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_closeday().data(), this->m_closeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_closeday(), target);
  }

  // optional int32 m_serverdelayTime = 7;
  if (has_m_serverdelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_serverdelaytime(), target);
  }

  // optional int32 m_serverTime = 8;
  if (has_m_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_servertime(), target);
  }

  // optional int32 m_openingTime = 9;
  if (has_m_openingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_openingtime(), target);
  }

  // optional int32 m_advanceTime = 10;
  if (has_m_advancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_advancetime(), target);
  }

  // optional int32 m_intervalTime = 11;
  if (has_m_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_intervaltime(), target);
  }

  // optional int32 m_isCross = 12;
  if (has_m_iscross()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_iscross(), target);
  }

  // optional int32 m_isFestvial = 13;
  if (has_m_isfestvial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_isfestvial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PeractivityPeractivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_activeId = 1;
    if (has_m_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_activeid());
    }

    // optional string m_activeName = 2;
    if (has_m_activename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_activename());
    }

    // optional int32 m_typeId = 3;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_functionID = 4;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional string m_opeDay = 5;
    if (has_m_opeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_opeday());
    }

    // optional string m_closeDay = 6;
    if (has_m_closeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_closeday());
    }

    // optional int32 m_serverdelayTime = 7;
    if (has_m_serverdelaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverdelaytime());
    }

    // optional int32 m_serverTime = 8;
    if (has_m_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_servertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_openingTime = 9;
    if (has_m_openingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openingtime());
    }

    // optional int32 m_advanceTime = 10;
    if (has_m_advancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancetime());
    }

    // optional int32 m_intervalTime = 11;
    if (has_m_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_intervaltime());
    }

    // optional int32 m_isCross = 12;
    if (has_m_iscross()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iscross());
    }

    // optional int32 m_isFestvial = 13;
    if (has_m_isfestvial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isfestvial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PeractivityPeractivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PeractivityPeractivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PeractivityPeractivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PeractivityPeractivity::MergeFrom(const E_PeractivityPeractivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_activeid()) {
      set_m_activeid(from.m_activeid());
    }
    if (from.has_m_activename()) {
      set_m_activename(from.m_activename());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_opeday()) {
      set_m_opeday(from.m_opeday());
    }
    if (from.has_m_closeday()) {
      set_m_closeday(from.m_closeday());
    }
    if (from.has_m_serverdelaytime()) {
      set_m_serverdelaytime(from.m_serverdelaytime());
    }
    if (from.has_m_servertime()) {
      set_m_servertime(from.m_servertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_openingtime()) {
      set_m_openingtime(from.m_openingtime());
    }
    if (from.has_m_advancetime()) {
      set_m_advancetime(from.m_advancetime());
    }
    if (from.has_m_intervaltime()) {
      set_m_intervaltime(from.m_intervaltime());
    }
    if (from.has_m_iscross()) {
      set_m_iscross(from.m_iscross());
    }
    if (from.has_m_isfestvial()) {
      set_m_isfestvial(from.m_isfestvial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PeractivityPeractivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PeractivityPeractivity::CopyFrom(const E_PeractivityPeractivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PeractivityPeractivity::IsInitialized() const {

  return true;
}

void E_PeractivityPeractivity::Swap(E_PeractivityPeractivity* other) {
  if (other != this) {
    std::swap(m_activeid_, other->m_activeid_);
    std::swap(m_activename_, other->m_activename_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_opeday_, other->m_opeday_);
    std::swap(m_closeday_, other->m_closeday_);
    std::swap(m_serverdelaytime_, other->m_serverdelaytime_);
    std::swap(m_servertime_, other->m_servertime_);
    std::swap(m_openingtime_, other->m_openingtime_);
    std::swap(m_advancetime_, other->m_advancetime_);
    std::swap(m_intervaltime_, other->m_intervaltime_);
    std::swap(m_iscross_, other->m_iscross_);
    std::swap(m_isfestvial_, other->m_isfestvial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PeractivityPeractivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PeractivityPeractivity_descriptor_;
  metadata.reflection = E_PeractivityPeractivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PeractivityPeractivity::kEPeractivityPeractivityListFieldNumber;
#endif  // !_MSC_VER

Sheet_PeractivityPeractivity::Sheet_PeractivityPeractivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PeractivityPeractivity::InitAsDefaultInstance() {
}

Sheet_PeractivityPeractivity::Sheet_PeractivityPeractivity(const Sheet_PeractivityPeractivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PeractivityPeractivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PeractivityPeractivity::~Sheet_PeractivityPeractivity() {
  SharedDtor();
}

void Sheet_PeractivityPeractivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PeractivityPeractivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PeractivityPeractivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PeractivityPeractivity_descriptor_;
}

const Sheet_PeractivityPeractivity& Sheet_PeractivityPeractivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeractivity_2eproto();
  return *default_instance_;
}

Sheet_PeractivityPeractivity* Sheet_PeractivityPeractivity::default_instance_ = NULL;

Sheet_PeractivityPeractivity* Sheet_PeractivityPeractivity::New() const {
  return new Sheet_PeractivityPeractivity;
}

void Sheet_PeractivityPeractivity::Clear() {
  e_peractivityperactivity_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PeractivityPeractivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PeractivityPeractivity E_PeractivityPeractivity_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PeractivityPeractivity_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_peractivityperactivity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PeractivityPeractivity_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PeractivityPeractivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PeractivityPeractivity E_PeractivityPeractivity_List = 1;
  for (int i = 0; i < this->e_peractivityperactivity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_peractivityperactivity_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PeractivityPeractivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PeractivityPeractivity E_PeractivityPeractivity_List = 1;
  for (int i = 0; i < this->e_peractivityperactivity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_peractivityperactivity_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PeractivityPeractivity::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PeractivityPeractivity E_PeractivityPeractivity_List = 1;
  total_size += 1 * this->e_peractivityperactivity_list_size();
  for (int i = 0; i < this->e_peractivityperactivity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_peractivityperactivity_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PeractivityPeractivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PeractivityPeractivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PeractivityPeractivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PeractivityPeractivity::MergeFrom(const Sheet_PeractivityPeractivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_peractivityperactivity_list_.MergeFrom(from.e_peractivityperactivity_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PeractivityPeractivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PeractivityPeractivity::CopyFrom(const Sheet_PeractivityPeractivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PeractivityPeractivity::IsInitialized() const {

  return true;
}

void Sheet_PeractivityPeractivity::Swap(Sheet_PeractivityPeractivity* other) {
  if (other != this) {
    e_peractivityperactivity_list_.Swap(&other->e_peractivityperactivity_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PeractivityPeractivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PeractivityPeractivity_descriptor_;
  metadata.reflection = Sheet_PeractivityPeractivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PeractivityWeek::kMIdFieldNumber;
const int E_PeractivityWeek::kMTimeFieldNumber;
const int E_PeractivityWeek::kMWeekFieldNumber;
#endif  // !_MSC_VER

E_PeractivityWeek::E_PeractivityWeek()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PeractivityWeek::InitAsDefaultInstance() {
}

E_PeractivityWeek::E_PeractivityWeek(const E_PeractivityWeek& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PeractivityWeek::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PeractivityWeek::~E_PeractivityWeek() {
  SharedDtor();
}

void E_PeractivityWeek::SharedDtor() {
  if (m_time_ != &::google::protobuf::internal::kEmptyString) {
    delete m_time_;
  }
  if (this != default_instance_) {
  }
}

void E_PeractivityWeek::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PeractivityWeek::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PeractivityWeek_descriptor_;
}

const E_PeractivityWeek& E_PeractivityWeek::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeractivity_2eproto();
  return *default_instance_;
}

E_PeractivityWeek* E_PeractivityWeek::default_instance_ = NULL;

E_PeractivityWeek* E_PeractivityWeek::New() const {
  return new E_PeractivityWeek;
}

void E_PeractivityWeek::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_time()) {
      if (m_time_ != &::google::protobuf::internal::kEmptyString) {
        m_time_->clear();
      }
    }
  }
  m_week_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PeractivityWeek::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_time;
        break;
      }

      // optional string m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_time().data(), this->m_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_week;
        break;
      }

      // repeated string m_week = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_week()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_week(this->m_week_size() - 1).data(),
            this->m_week(this->m_week_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_week;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PeractivityWeek::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_time().data(), this->m_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_time(), output);
  }

  // repeated string m_week = 3;
  for (int i = 0; i < this->m_week_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_week(i).data(), this->m_week(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_week(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PeractivityWeek::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_time().data(), this->m_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_time(), target);
  }

  // repeated string m_week = 3;
  for (int i = 0; i < this->m_week_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_week(i).data(), this->m_week(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->m_week(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PeractivityWeek::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_time());
    }

  }
  // repeated string m_week = 3;
  total_size += 1 * this->m_week_size();
  for (int i = 0; i < this->m_week_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_week(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PeractivityWeek::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PeractivityWeek* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PeractivityWeek*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PeractivityWeek::MergeFrom(const E_PeractivityWeek& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_week_.MergeFrom(from.m_week_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PeractivityWeek::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PeractivityWeek::CopyFrom(const E_PeractivityWeek& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PeractivityWeek::IsInitialized() const {

  return true;
}

void E_PeractivityWeek::Swap(E_PeractivityWeek* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_time_, other->m_time_);
    m_week_.Swap(&other->m_week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PeractivityWeek::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PeractivityWeek_descriptor_;
  metadata.reflection = E_PeractivityWeek_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PeractivityWeek::kEPeractivityWeekListFieldNumber;
#endif  // !_MSC_VER

Sheet_PeractivityWeek::Sheet_PeractivityWeek()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PeractivityWeek::InitAsDefaultInstance() {
}

Sheet_PeractivityWeek::Sheet_PeractivityWeek(const Sheet_PeractivityWeek& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PeractivityWeek::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PeractivityWeek::~Sheet_PeractivityWeek() {
  SharedDtor();
}

void Sheet_PeractivityWeek::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PeractivityWeek::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PeractivityWeek::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PeractivityWeek_descriptor_;
}

const Sheet_PeractivityWeek& Sheet_PeractivityWeek::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeractivity_2eproto();
  return *default_instance_;
}

Sheet_PeractivityWeek* Sheet_PeractivityWeek::default_instance_ = NULL;

Sheet_PeractivityWeek* Sheet_PeractivityWeek::New() const {
  return new Sheet_PeractivityWeek;
}

void Sheet_PeractivityWeek::Clear() {
  e_peractivityweek_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PeractivityWeek::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PeractivityWeek E_PeractivityWeek_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PeractivityWeek_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_peractivityweek_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PeractivityWeek_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PeractivityWeek::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PeractivityWeek E_PeractivityWeek_List = 1;
  for (int i = 0; i < this->e_peractivityweek_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_peractivityweek_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PeractivityWeek::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PeractivityWeek E_PeractivityWeek_List = 1;
  for (int i = 0; i < this->e_peractivityweek_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_peractivityweek_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PeractivityWeek::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PeractivityWeek E_PeractivityWeek_List = 1;
  total_size += 1 * this->e_peractivityweek_list_size();
  for (int i = 0; i < this->e_peractivityweek_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_peractivityweek_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PeractivityWeek::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PeractivityWeek* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PeractivityWeek*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PeractivityWeek::MergeFrom(const Sheet_PeractivityWeek& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_peractivityweek_list_.MergeFrom(from.e_peractivityweek_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PeractivityWeek::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PeractivityWeek::CopyFrom(const Sheet_PeractivityWeek& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PeractivityWeek::IsInitialized() const {

  return true;
}

void Sheet_PeractivityWeek::Swap(Sheet_PeractivityWeek* other) {
  if (other != this) {
    e_peractivityweek_list_.Swap(&other->e_peractivityweek_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PeractivityWeek::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PeractivityWeek_descriptor_;
  metadata.reflection = Sheet_PeractivityWeek_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
