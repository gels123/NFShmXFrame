// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.proto

#ifndef PROTOBUF_equip_2eproto__INCLUDED
#define PROTOBUF_equip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_equip_2eproto();
void protobuf_AssignDesc_equip_2eproto();
void protobuf_ShutdownFile_equip_2eproto();

class equipequipattributeDesc;
class equipequipgodAttributeDesc;
class equipequip;
class Sheet_equipequip;
class equipstrongtypeDesc;
class equipstrong;
class Sheet_equipstrong;
class equipstrongexp;
class Sheet_equipstrongexp;
class equipstrongtotalattributeDesc;
class equipstrongtotal;
class Sheet_equipstrongtotal;
class equipgem;
class Sheet_equipgem;
class equipstoveattattributeDesc;
class equipstoveatt;
class Sheet_equipstoveatt;
class equipstoveexp;
class Sheet_equipstoveexp;
class equipgrade;
class Sheet_equipgrade;

// ===================================================================

class equipequipattributeDesc : public ::google::protobuf::Message {
 public:
  equipequipattributeDesc();
  virtual ~equipequipattributeDesc();

  equipequipattributeDesc(const equipequipattributeDesc& from);

  inline equipequipattributeDesc& operator=(const equipequipattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequipattributeDesc& default_instance();

  void Swap(equipequipattributeDesc* other);

  // implements Message ----------------------------------------------

  equipequipattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequipattributeDesc& from);
  void MergeFrom(const equipequipattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 valueMin = 1;
  inline bool has_valuemin() const;
  inline void clear_valuemin();
  static const int kValueMinFieldNumber = 1;
  inline ::google::protobuf::int32 valuemin() const;
  inline void set_valuemin(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 valueMax = 3;
  inline bool has_valuemax() const;
  inline void clear_valuemax();
  static const int kValueMaxFieldNumber = 3;
  inline ::google::protobuf::int32 valuemax() const;
  inline void set_valuemax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipequipattributeDesc)
 private:
  inline void set_has_valuemin();
  inline void clear_has_valuemin();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_valuemax();
  inline void clear_has_valuemax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 valuemin_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 valuemax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequipattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipequipgodAttributeDesc : public ::google::protobuf::Message {
 public:
  equipequipgodAttributeDesc();
  virtual ~equipequipgodAttributeDesc();

  equipequipgodAttributeDesc(const equipequipgodAttributeDesc& from);

  inline equipequipgodAttributeDesc& operator=(const equipequipgodAttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequipgodAttributeDesc& default_instance();

  void Swap(equipequipgodAttributeDesc* other);

  // implements Message ----------------------------------------------

  equipequipgodAttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequipgodAttributeDesc& from);
  void MergeFrom(const equipequipgodAttributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 valueMin = 1;
  inline bool has_valuemin() const;
  inline void clear_valuemin();
  static const int kValueMinFieldNumber = 1;
  inline ::google::protobuf::int32 valuemin() const;
  inline void set_valuemin(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 valueMax = 3;
  inline bool has_valuemax() const;
  inline void clear_valuemax();
  static const int kValueMaxFieldNumber = 3;
  inline ::google::protobuf::int32 valuemax() const;
  inline void set_valuemax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipequipgodAttributeDesc)
 private:
  inline void set_has_valuemin();
  inline void clear_has_valuemin();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_valuemax();
  inline void clear_has_valuemax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 valuemin_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 valuemax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequipgodAttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipequip : public ::google::protobuf::Message {
 public:
  equipequip();
  virtual ~equipequip();

  equipequip(const equipequip& from);

  inline equipequip& operator=(const equipequip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequip& default_instance();

  void Swap(equipequip* other);

  // implements Message ----------------------------------------------

  equipequip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequip& from);
  void MergeFrom(const equipequip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline const ::std::string& profession() const;
  inline void set_profession(const ::std::string& value);
  inline void set_profession(const char* value);
  inline void set_profession(const char* value, size_t size);
  inline ::std::string* mutable_profession();
  inline ::std::string* release_profession();
  inline void set_allocated_profession(::std::string* profession);

  // optional int32 professionLv = 6;
  inline bool has_professionlv() const;
  inline void clear_professionlv();
  static const int kProfessionLvFieldNumber = 6;
  inline ::google::protobuf::int32 professionlv() const;
  inline void set_professionlv(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 quality = 8;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 8;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 star = 9;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 9;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 refineAttributeDown = 10;
  inline bool has_refineattributedown() const;
  inline void clear_refineattributedown();
  static const int kRefineAttributeDownFieldNumber = 10;
  inline ::google::protobuf::int32 refineattributedown() const;
  inline void set_refineattributedown(::google::protobuf::int32 value);

  // optional int32 refineAttributeUp = 11;
  inline bool has_refineattributeup() const;
  inline void clear_refineattributeup();
  static const int kRefineAttributeUpFieldNumber = 11;
  inline ::google::protobuf::int32 refineattributeup() const;
  inline void set_refineattributeup(::google::protobuf::int32 value);

  // optional string refineAttribute_typeLibrary = 12;
  inline bool has_refineattribute_typelibrary() const;
  inline void clear_refineattribute_typelibrary();
  static const int kRefineAttributeTypeLibraryFieldNumber = 12;
  inline const ::std::string& refineattribute_typelibrary() const;
  inline void set_refineattribute_typelibrary(const ::std::string& value);
  inline void set_refineattribute_typelibrary(const char* value);
  inline void set_refineattribute_typelibrary(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_typelibrary();
  inline ::std::string* release_refineattribute_typelibrary();
  inline void set_allocated_refineattribute_typelibrary(::std::string* refineattribute_typelibrary);

  // optional string refineAttribute_valueMin = 13;
  inline bool has_refineattribute_valuemin() const;
  inline void clear_refineattribute_valuemin();
  static const int kRefineAttributeValueMinFieldNumber = 13;
  inline const ::std::string& refineattribute_valuemin() const;
  inline void set_refineattribute_valuemin(const ::std::string& value);
  inline void set_refineattribute_valuemin(const char* value);
  inline void set_refineattribute_valuemin(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_valuemin();
  inline ::std::string* release_refineattribute_valuemin();
  inline void set_allocated_refineattribute_valuemin(::std::string* refineattribute_valuemin);

  // optional string refineAttribute_valueMax = 14;
  inline bool has_refineattribute_valuemax() const;
  inline void clear_refineattribute_valuemax();
  static const int kRefineAttributeValueMaxFieldNumber = 14;
  inline const ::std::string& refineattribute_valuemax() const;
  inline void set_refineattribute_valuemax(const ::std::string& value);
  inline void set_refineattribute_valuemax(const char* value);
  inline void set_refineattribute_valuemax(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_valuemax();
  inline ::std::string* release_refineattribute_valuemax();
  inline void set_allocated_refineattribute_valuemax(::std::string* refineattribute_valuemax);

  // optional int32 blueStarNum = 15;
  inline bool has_bluestarnum() const;
  inline void clear_bluestarnum();
  static const int kBlueStarNumFieldNumber = 15;
  inline ::google::protobuf::int32 bluestarnum() const;
  inline void set_bluestarnum(::google::protobuf::int32 value);

  // optional string blueStar_type = 16;
  inline bool has_bluestar_type() const;
  inline void clear_bluestar_type();
  static const int kBlueStarTypeFieldNumber = 16;
  inline const ::std::string& bluestar_type() const;
  inline void set_bluestar_type(const ::std::string& value);
  inline void set_bluestar_type(const char* value);
  inline void set_bluestar_type(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_type();
  inline ::std::string* release_bluestar_type();
  inline void set_allocated_bluestar_type(::std::string* bluestar_type);

  // optional string blueStar_lv = 17;
  inline bool has_bluestar_lv() const;
  inline void clear_bluestar_lv();
  static const int kBlueStarLvFieldNumber = 17;
  inline const ::std::string& bluestar_lv() const;
  inline void set_bluestar_lv(const ::std::string& value);
  inline void set_bluestar_lv(const char* value);
  inline void set_bluestar_lv(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_lv();
  inline ::std::string* release_bluestar_lv();
  inline void set_allocated_bluestar_lv(::std::string* bluestar_lv);

  // optional string blueStar_number = 18;
  inline bool has_bluestar_number() const;
  inline void clear_bluestar_number();
  static const int kBlueStarNumberFieldNumber = 18;
  inline const ::std::string& bluestar_number() const;
  inline void set_bluestar_number(const ::std::string& value);
  inline void set_bluestar_number(const char* value);
  inline void set_bluestar_number(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_number();
  inline ::std::string* release_bluestar_number();
  inline void set_allocated_bluestar_number(::std::string* bluestar_number);

  // optional int32 isCanbind = 19;
  inline bool has_iscanbind() const;
  inline void clear_iscanbind();
  static const int kIsCanbindFieldNumber = 19;
  inline ::google::protobuf::int32 iscanbind() const;
  inline void set_iscanbind(::google::protobuf::int32 value);

  // optional int32 isTradeBind = 20;
  inline bool has_istradebind() const;
  inline void clear_istradebind();
  static const int kIsTradeBindFieldNumber = 20;
  inline ::google::protobuf::int32 istradebind() const;
  inline void set_istradebind(::google::protobuf::int32 value);

  // optional int32 sellPrice = 21;
  inline bool has_sellprice() const;
  inline void clear_sellprice();
  static const int kSellPriceFieldNumber = 21;
  inline ::google::protobuf::int32 sellprice() const;
  inline void set_sellprice(::google::protobuf::int32 value);

  // optional string icon = 22;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 22;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 time = 23;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 23;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 broadcast = 24;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 24;
  inline ::google::protobuf::int32 broadcast() const;
  inline void set_broadcast(::google::protobuf::int32 value);

  // optional string meltingResult = 25;
  inline bool has_meltingresult() const;
  inline void clear_meltingresult();
  static const int kMeltingResultFieldNumber = 25;
  inline const ::std::string& meltingresult() const;
  inline void set_meltingresult(const ::std::string& value);
  inline void set_meltingresult(const char* value);
  inline void set_meltingresult(const char* value, size_t size);
  inline ::std::string* mutable_meltingresult();
  inline ::std::string* release_meltingresult();
  inline void set_allocated_meltingresult(::std::string* meltingresult);

  // optional int32 specialAttributeDown = 26;
  inline bool has_specialattributedown() const;
  inline void clear_specialattributedown();
  static const int kSpecialAttributeDownFieldNumber = 26;
  inline ::google::protobuf::int32 specialattributedown() const;
  inline void set_specialattributedown(::google::protobuf::int32 value);

  // optional int32 specialAttributeUp = 27;
  inline bool has_specialattributeup() const;
  inline void clear_specialattributeup();
  static const int kSpecialAttributeUpFieldNumber = 27;
  inline ::google::protobuf::int32 specialattributeup() const;
  inline void set_specialattributeup(::google::protobuf::int32 value);

  // optional string specialAttribute_typeLibrary = 28;
  inline bool has_specialattribute_typelibrary() const;
  inline void clear_specialattribute_typelibrary();
  static const int kSpecialAttributeTypeLibraryFieldNumber = 28;
  inline const ::std::string& specialattribute_typelibrary() const;
  inline void set_specialattribute_typelibrary(const ::std::string& value);
  inline void set_specialattribute_typelibrary(const char* value);
  inline void set_specialattribute_typelibrary(const char* value, size_t size);
  inline ::std::string* mutable_specialattribute_typelibrary();
  inline ::std::string* release_specialattribute_typelibrary();
  inline void set_allocated_specialattribute_typelibrary(::std::string* specialattribute_typelibrary);

  // optional string specialAttribute_valueMin = 29;
  inline bool has_specialattribute_valuemin() const;
  inline void clear_specialattribute_valuemin();
  static const int kSpecialAttributeValueMinFieldNumber = 29;
  inline const ::std::string& specialattribute_valuemin() const;
  inline void set_specialattribute_valuemin(const ::std::string& value);
  inline void set_specialattribute_valuemin(const char* value);
  inline void set_specialattribute_valuemin(const char* value, size_t size);
  inline ::std::string* mutable_specialattribute_valuemin();
  inline ::std::string* release_specialattribute_valuemin();
  inline void set_allocated_specialattribute_valuemin(::std::string* specialattribute_valuemin);

  // optional string specialAttribute_valueMax = 30;
  inline bool has_specialattribute_valuemax() const;
  inline void clear_specialattribute_valuemax();
  static const int kSpecialAttributeValueMaxFieldNumber = 30;
  inline const ::std::string& specialattribute_valuemax() const;
  inline void set_specialattribute_valuemax(const ::std::string& value);
  inline void set_specialattribute_valuemax(const char* value);
  inline void set_specialattribute_valuemax(const char* value, size_t size);
  inline ::std::string* mutable_specialattribute_valuemax();
  inline ::std::string* release_specialattribute_valuemax();
  inline void set_allocated_specialattribute_valuemax(::std::string* specialattribute_valuemax);

  // optional string skillId = 31;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 31;
  inline const ::std::string& skillid() const;
  inline void set_skillid(const ::std::string& value);
  inline void set_skillid(const char* value);
  inline void set_skillid(const char* value, size_t size);
  inline ::std::string* mutable_skillid();
  inline ::std::string* release_skillid();
  inline void set_allocated_skillid(::std::string* skillid);

  // repeated .proto_ff.equipequipattributeDesc attribute = 32;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 32;
  inline const ::proto_ff::equipequipattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipequipattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipequipattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >*
      mutable_attribute();

  // repeated .proto_ff.equipequipgodAttributeDesc godAttribute = 33;
  inline int godattribute_size() const;
  inline void clear_godattribute();
  static const int kGodAttributeFieldNumber = 33;
  inline const ::proto_ff::equipequipgodAttributeDesc& godattribute(int index) const;
  inline ::proto_ff::equipequipgodAttributeDesc* mutable_godattribute(int index);
  inline ::proto_ff::equipequipgodAttributeDesc* add_godattribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipgodAttributeDesc >&
      godattribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipgodAttributeDesc >*
      mutable_godattribute();

  // @@protoc_insertion_point(class_scope:proto_ff.equipequip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_professionlv();
  inline void clear_has_professionlv();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_refineattributedown();
  inline void clear_has_refineattributedown();
  inline void set_has_refineattributeup();
  inline void clear_has_refineattributeup();
  inline void set_has_refineattribute_typelibrary();
  inline void clear_has_refineattribute_typelibrary();
  inline void set_has_refineattribute_valuemin();
  inline void clear_has_refineattribute_valuemin();
  inline void set_has_refineattribute_valuemax();
  inline void clear_has_refineattribute_valuemax();
  inline void set_has_bluestarnum();
  inline void clear_has_bluestarnum();
  inline void set_has_bluestar_type();
  inline void clear_has_bluestar_type();
  inline void set_has_bluestar_lv();
  inline void clear_has_bluestar_lv();
  inline void set_has_bluestar_number();
  inline void clear_has_bluestar_number();
  inline void set_has_iscanbind();
  inline void clear_has_iscanbind();
  inline void set_has_istradebind();
  inline void clear_has_istradebind();
  inline void set_has_sellprice();
  inline void clear_has_sellprice();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_meltingresult();
  inline void clear_has_meltingresult();
  inline void set_has_specialattributedown();
  inline void clear_has_specialattributedown();
  inline void set_has_specialattributeup();
  inline void clear_has_specialattributeup();
  inline void set_has_specialattribute_typelibrary();
  inline void clear_has_specialattribute_typelibrary();
  inline void set_has_specialattribute_valuemin();
  inline void clear_has_specialattribute_valuemin();
  inline void set_has_specialattribute_valuemax();
  inline void clear_has_specialattribute_valuemax();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::int32 position_;
  ::std::string* profession_;
  ::google::protobuf::int32 professionlv_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 refineattributedown_;
  ::google::protobuf::int32 refineattributeup_;
  ::std::string* refineattribute_typelibrary_;
  ::std::string* refineattribute_valuemin_;
  ::std::string* refineattribute_valuemax_;
  ::std::string* bluestar_type_;
  ::std::string* bluestar_lv_;
  ::google::protobuf::int32 bluestarnum_;
  ::google::protobuf::int32 iscanbind_;
  ::std::string* bluestar_number_;
  ::google::protobuf::int32 istradebind_;
  ::google::protobuf::int32 sellprice_;
  ::std::string* icon_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 broadcast_;
  ::std::string* meltingresult_;
  ::google::protobuf::int32 specialattributedown_;
  ::google::protobuf::int32 specialattributeup_;
  ::std::string* specialattribute_typelibrary_;
  ::std::string* specialattribute_valuemin_;
  ::std::string* specialattribute_valuemax_;
  ::std::string* skillid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc > attribute_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipgodAttributeDesc > godattribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequip* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipequip : public ::google::protobuf::Message {
 public:
  Sheet_equipequip();
  virtual ~Sheet_equipequip();

  Sheet_equipequip(const Sheet_equipequip& from);

  inline Sheet_equipequip& operator=(const Sheet_equipequip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipequip& default_instance();

  void Swap(Sheet_equipequip* other);

  // implements Message ----------------------------------------------

  Sheet_equipequip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipequip& from);
  void MergeFrom(const Sheet_equipequip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipequip equipequip_List = 1;
  inline int equipequip_list_size() const;
  inline void clear_equipequip_list();
  static const int kEquipequipListFieldNumber = 1;
  inline const ::proto_ff::equipequip& equipequip_list(int index) const;
  inline ::proto_ff::equipequip* mutable_equipequip_list(int index);
  inline ::proto_ff::equipequip* add_equipequip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >&
      equipequip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >*
      mutable_equipequip_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipequip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip > equipequip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipequip* default_instance_;
};
// -------------------------------------------------------------------

class equipstrongtypeDesc : public ::google::protobuf::Message {
 public:
  equipstrongtypeDesc();
  virtual ~equipstrongtypeDesc();

  equipstrongtypeDesc(const equipstrongtypeDesc& from);

  inline equipstrongtypeDesc& operator=(const equipstrongtypeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrongtypeDesc& default_instance();

  void Swap(equipstrongtypeDesc* other);

  // implements Message ----------------------------------------------

  equipstrongtypeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrongtypeDesc& from);
  void MergeFrom(const equipstrongtypeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline const ::std::string& num() const;
  inline void set_num(const ::std::string& value);
  inline void set_num(const char* value);
  inline void set_num(const char* value, size_t size);
  inline ::std::string* mutable_num();
  inline ::std::string* release_num();
  inline void set_allocated_num(::std::string* num);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrongtypeDesc)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* num_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrongtypeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipstrong : public ::google::protobuf::Message {
 public:
  equipstrong();
  virtual ~equipstrong();

  equipstrong(const equipstrong& from);

  inline equipstrong& operator=(const equipstrong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrong& default_instance();

  void Swap(equipstrong* other);

  // implements Message ----------------------------------------------

  equipstrong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrong& from);
  void MergeFrom(const equipstrong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 srtongUp = 4;
  inline bool has_srtongup() const;
  inline void clear_srtongup();
  static const int kSrtongUpFieldNumber = 4;
  inline ::google::protobuf::int32 srtongup() const;
  inline void set_srtongup(::google::protobuf::int32 value);

  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::proto_ff::equipstrongtypeDesc& type(int index) const;
  inline ::proto_ff::equipstrongtypeDesc* mutable_type(int index);
  inline ::proto_ff::equipstrongtypeDesc* add_type();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >&
      type() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >*
      mutable_type();

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrong)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_srtongup();
  inline void clear_has_srtongup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc > type_;
  ::google::protobuf::int32 srtongup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrong* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstrong : public ::google::protobuf::Message {
 public:
  Sheet_equipstrong();
  virtual ~Sheet_equipstrong();

  Sheet_equipstrong(const Sheet_equipstrong& from);

  inline Sheet_equipstrong& operator=(const Sheet_equipstrong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstrong& default_instance();

  void Swap(Sheet_equipstrong* other);

  // implements Message ----------------------------------------------

  Sheet_equipstrong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstrong& from);
  void MergeFrom(const Sheet_equipstrong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  inline int equipstrong_list_size() const;
  inline void clear_equipstrong_list();
  static const int kEquipstrongListFieldNumber = 1;
  inline const ::proto_ff::equipstrong& equipstrong_list(int index) const;
  inline ::proto_ff::equipstrong* mutable_equipstrong_list(int index);
  inline ::proto_ff::equipstrong* add_equipstrong_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >&
      equipstrong_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >*
      mutable_equipstrong_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstrong)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong > equipstrong_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstrong* default_instance_;
};
// -------------------------------------------------------------------

class equipstrongexp : public ::google::protobuf::Message {
 public:
  equipstrongexp();
  virtual ~equipstrongexp();

  equipstrongexp(const equipstrongexp& from);

  inline equipstrongexp& operator=(const equipstrongexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrongexp& default_instance();

  void Swap(equipstrongexp* other);

  // implements Message ----------------------------------------------

  equipstrongexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrongexp& from);
  void MergeFrom(const equipstrongexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // repeated int32 costItem = 3;
  inline int costitem_size() const;
  inline void clear_costitem();
  static const int kCostItemFieldNumber = 3;
  inline ::google::protobuf::int32 costitem(int index) const;
  inline void set_costitem(int index, ::google::protobuf::int32 value);
  inline void add_costitem(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      costitem() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_costitem();

  // repeated string positionType = 4;
  inline int positiontype_size() const;
  inline void clear_positiontype();
  static const int kPositionTypeFieldNumber = 4;
  inline const ::std::string& positiontype(int index) const;
  inline ::std::string* mutable_positiontype(int index);
  inline void set_positiontype(int index, const ::std::string& value);
  inline void set_positiontype(int index, const char* value);
  inline void set_positiontype(int index, const char* value, size_t size);
  inline ::std::string* add_positiontype();
  inline void add_positiontype(const ::std::string& value);
  inline void add_positiontype(const char* value);
  inline void add_positiontype(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& positiontype() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_positiontype();

  // repeated int32 costNum = 5;
  inline int costnum_size() const;
  inline void clear_costnum();
  static const int kCostNumFieldNumber = 5;
  inline ::google::protobuf::int32 costnum(int index) const;
  inline void set_costnum(int index, ::google::protobuf::int32 value);
  inline void add_costnum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      costnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_costnum();

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrongexp)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > costitem_;
  ::google::protobuf::RepeatedPtrField< ::std::string> positiontype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > costnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrongexp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstrongexp : public ::google::protobuf::Message {
 public:
  Sheet_equipstrongexp();
  virtual ~Sheet_equipstrongexp();

  Sheet_equipstrongexp(const Sheet_equipstrongexp& from);

  inline Sheet_equipstrongexp& operator=(const Sheet_equipstrongexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstrongexp& default_instance();

  void Swap(Sheet_equipstrongexp* other);

  // implements Message ----------------------------------------------

  Sheet_equipstrongexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstrongexp& from);
  void MergeFrom(const Sheet_equipstrongexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  inline int equipstrongexp_list_size() const;
  inline void clear_equipstrongexp_list();
  static const int kEquipstrongexpListFieldNumber = 1;
  inline const ::proto_ff::equipstrongexp& equipstrongexp_list(int index) const;
  inline ::proto_ff::equipstrongexp* mutable_equipstrongexp_list(int index);
  inline ::proto_ff::equipstrongexp* add_equipstrongexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >&
      equipstrongexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >*
      mutable_equipstrongexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstrongexp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp > equipstrongexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstrongexp* default_instance_;
};
// -------------------------------------------------------------------

class equipstrongtotalattributeDesc : public ::google::protobuf::Message {
 public:
  equipstrongtotalattributeDesc();
  virtual ~equipstrongtotalattributeDesc();

  equipstrongtotalattributeDesc(const equipstrongtotalattributeDesc& from);

  inline equipstrongtotalattributeDesc& operator=(const equipstrongtotalattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrongtotalattributeDesc& default_instance();

  void Swap(equipstrongtotalattributeDesc* other);

  // implements Message ----------------------------------------------

  equipstrongtotalattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrongtotalattributeDesc& from);
  void MergeFrom(const equipstrongtotalattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrongtotalattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrongtotalattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipstrongtotal : public ::google::protobuf::Message {
 public:
  equipstrongtotal();
  virtual ~equipstrongtotal();

  equipstrongtotal(const equipstrongtotal& from);

  inline equipstrongtotal& operator=(const equipstrongtotal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrongtotal& default_instance();

  void Swap(equipstrongtotal* other);

  // implements Message ----------------------------------------------

  equipstrongtotal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrongtotal& from);
  void MergeFrom(const equipstrongtotal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 idType = 2;
  inline bool has_idtype() const;
  inline void clear_idtype();
  static const int kIdTypeFieldNumber = 2;
  inline ::google::protobuf::int32 idtype() const;
  inline void set_idtype(::google::protobuf::int32 value);

  // optional int32 idNum = 3;
  inline bool has_idnum() const;
  inline void clear_idnum();
  static const int kIdNumFieldNumber = 3;
  inline ::google::protobuf::int32 idnum() const;
  inline void set_idnum(::google::protobuf::int32 value);

  // repeated .proto_ff.equipstrongtotalattributeDesc attribute = 4;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 4;
  inline const ::proto_ff::equipstrongtotalattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipstrongtotalattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipstrongtotalattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotalattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotalattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrongtotal)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_idtype();
  inline void clear_has_idtype();
  inline void set_has_idnum();
  inline void clear_has_idnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 idtype_;
  ::google::protobuf::int32 idnum_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotalattributeDesc > attribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrongtotal* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstrongtotal : public ::google::protobuf::Message {
 public:
  Sheet_equipstrongtotal();
  virtual ~Sheet_equipstrongtotal();

  Sheet_equipstrongtotal(const Sheet_equipstrongtotal& from);

  inline Sheet_equipstrongtotal& operator=(const Sheet_equipstrongtotal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstrongtotal& default_instance();

  void Swap(Sheet_equipstrongtotal* other);

  // implements Message ----------------------------------------------

  Sheet_equipstrongtotal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstrongtotal& from);
  void MergeFrom(const Sheet_equipstrongtotal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstrongtotal equipstrongtotal_List = 1;
  inline int equipstrongtotal_list_size() const;
  inline void clear_equipstrongtotal_list();
  static const int kEquipstrongtotalListFieldNumber = 1;
  inline const ::proto_ff::equipstrongtotal& equipstrongtotal_list(int index) const;
  inline ::proto_ff::equipstrongtotal* mutable_equipstrongtotal_list(int index);
  inline ::proto_ff::equipstrongtotal* add_equipstrongtotal_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotal >&
      equipstrongtotal_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotal >*
      mutable_equipstrongtotal_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstrongtotal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotal > equipstrongtotal_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstrongtotal* default_instance_;
};
// -------------------------------------------------------------------

class equipgem : public ::google::protobuf::Message {
 public:
  equipgem();
  virtual ~equipgem();

  equipgem(const equipgem& from);

  inline equipgem& operator=(const equipgem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipgem& default_instance();

  void Swap(equipgem* other);

  // implements Message ----------------------------------------------

  equipgem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipgem& from);
  void MergeFrom(const equipgem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string gemType = 2;
  inline bool has_gemtype() const;
  inline void clear_gemtype();
  static const int kGemTypeFieldNumber = 2;
  inline const ::std::string& gemtype() const;
  inline void set_gemtype(const ::std::string& value);
  inline void set_gemtype(const char* value);
  inline void set_gemtype(const char* value, size_t size);
  inline ::std::string* mutable_gemtype();
  inline ::std::string* release_gemtype();
  inline void set_allocated_gemtype(::std::string* gemtype);

  // optional int32 speciallyGemType = 3;
  inline bool has_speciallygemtype() const;
  inline void clear_speciallygemtype();
  static const int kSpeciallyGemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 speciallygemtype() const;
  inline void set_speciallygemtype(::google::protobuf::int32 value);

  // optional int32 payUnlockItem = 4;
  inline bool has_payunlockitem() const;
  inline void clear_payunlockitem();
  static const int kPayUnlockItemFieldNumber = 4;
  inline ::google::protobuf::int32 payunlockitem() const;
  inline void set_payunlockitem(::google::protobuf::int32 value);

  // optional int32 payUnlockNnm = 5;
  inline bool has_payunlocknnm() const;
  inline void clear_payunlocknnm();
  static const int kPayUnlockNnmFieldNumber = 5;
  inline ::google::protobuf::int32 payunlocknnm() const;
  inline void set_payunlocknnm(::google::protobuf::int32 value);

  // repeated int32 gemUnlock = 6;
  inline int gemunlock_size() const;
  inline void clear_gemunlock();
  static const int kGemUnlockFieldNumber = 6;
  inline ::google::protobuf::int32 gemunlock(int index) const;
  inline void set_gemunlock(int index, ::google::protobuf::int32 value);
  inline void add_gemunlock(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gemunlock() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gemunlock();

  // @@protoc_insertion_point(class_scope:proto_ff.equipgem)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_gemtype();
  inline void clear_has_gemtype();
  inline void set_has_speciallygemtype();
  inline void clear_has_speciallygemtype();
  inline void set_has_payunlockitem();
  inline void clear_has_payunlockitem();
  inline void set_has_payunlocknnm();
  inline void clear_has_payunlocknnm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gemtype_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 speciallygemtype_;
  ::google::protobuf::int32 payunlockitem_;
  ::google::protobuf::int32 payunlocknnm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gemunlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipgem* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipgem : public ::google::protobuf::Message {
 public:
  Sheet_equipgem();
  virtual ~Sheet_equipgem();

  Sheet_equipgem(const Sheet_equipgem& from);

  inline Sheet_equipgem& operator=(const Sheet_equipgem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipgem& default_instance();

  void Swap(Sheet_equipgem* other);

  // implements Message ----------------------------------------------

  Sheet_equipgem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipgem& from);
  void MergeFrom(const Sheet_equipgem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipgem equipgem_List = 1;
  inline int equipgem_list_size() const;
  inline void clear_equipgem_list();
  static const int kEquipgemListFieldNumber = 1;
  inline const ::proto_ff::equipgem& equipgem_list(int index) const;
  inline ::proto_ff::equipgem* mutable_equipgem_list(int index);
  inline ::proto_ff::equipgem* add_equipgem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >&
      equipgem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >*
      mutable_equipgem_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipgem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem > equipgem_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipgem* default_instance_;
};
// -------------------------------------------------------------------

class equipstoveattattributeDesc : public ::google::protobuf::Message {
 public:
  equipstoveattattributeDesc();
  virtual ~equipstoveattattributeDesc();

  equipstoveattattributeDesc(const equipstoveattattributeDesc& from);

  inline equipstoveattattributeDesc& operator=(const equipstoveattattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstoveattattributeDesc& default_instance();

  void Swap(equipstoveattattributeDesc* other);

  // implements Message ----------------------------------------------

  equipstoveattattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstoveattattributeDesc& from);
  void MergeFrom(const equipstoveattattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipstoveattattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstoveattattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipstoveatt : public ::google::protobuf::Message {
 public:
  equipstoveatt();
  virtual ~equipstoveatt();

  equipstoveatt(const equipstoveatt& from);

  inline equipstoveatt& operator=(const equipstoveatt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstoveatt& default_instance();

  void Swap(equipstoveatt* other);

  // implements Message ----------------------------------------------

  equipstoveatt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstoveatt& from);
  void MergeFrom(const equipstoveatt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int64 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // repeated .proto_ff.equipstoveattattributeDesc attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::proto_ff::equipstoveattattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipstoveattattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipstoveattattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveattattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveattattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.equipstoveatt)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 exp_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveattattributeDesc > attribute_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstoveatt* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstoveatt : public ::google::protobuf::Message {
 public:
  Sheet_equipstoveatt();
  virtual ~Sheet_equipstoveatt();

  Sheet_equipstoveatt(const Sheet_equipstoveatt& from);

  inline Sheet_equipstoveatt& operator=(const Sheet_equipstoveatt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstoveatt& default_instance();

  void Swap(Sheet_equipstoveatt* other);

  // implements Message ----------------------------------------------

  Sheet_equipstoveatt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstoveatt& from);
  void MergeFrom(const Sheet_equipstoveatt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstoveatt equipstoveatt_List = 1;
  inline int equipstoveatt_list_size() const;
  inline void clear_equipstoveatt_list();
  static const int kEquipstoveattListFieldNumber = 1;
  inline const ::proto_ff::equipstoveatt& equipstoveatt_list(int index) const;
  inline ::proto_ff::equipstoveatt* mutable_equipstoveatt_list(int index);
  inline ::proto_ff::equipstoveatt* add_equipstoveatt_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveatt >&
      equipstoveatt_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveatt >*
      mutable_equipstoveatt_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstoveatt)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveatt > equipstoveatt_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstoveatt* default_instance_;
};
// -------------------------------------------------------------------

class equipstoveexp : public ::google::protobuf::Message {
 public:
  equipstoveexp();
  virtual ~equipstoveexp();

  equipstoveexp(const equipstoveexp& from);

  inline equipstoveexp& operator=(const equipstoveexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstoveexp& default_instance();

  void Swap(equipstoveexp* other);

  // implements Message ----------------------------------------------

  equipstoveexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstoveexp& from);
  void MergeFrom(const equipstoveexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipstoveexp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::int32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstoveexp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstoveexp : public ::google::protobuf::Message {
 public:
  Sheet_equipstoveexp();
  virtual ~Sheet_equipstoveexp();

  Sheet_equipstoveexp(const Sheet_equipstoveexp& from);

  inline Sheet_equipstoveexp& operator=(const Sheet_equipstoveexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstoveexp& default_instance();

  void Swap(Sheet_equipstoveexp* other);

  // implements Message ----------------------------------------------

  Sheet_equipstoveexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstoveexp& from);
  void MergeFrom(const Sheet_equipstoveexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstoveexp equipstoveexp_List = 1;
  inline int equipstoveexp_list_size() const;
  inline void clear_equipstoveexp_list();
  static const int kEquipstoveexpListFieldNumber = 1;
  inline const ::proto_ff::equipstoveexp& equipstoveexp_list(int index) const;
  inline ::proto_ff::equipstoveexp* mutable_equipstoveexp_list(int index);
  inline ::proto_ff::equipstoveexp* add_equipstoveexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveexp >&
      equipstoveexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveexp >*
      mutable_equipstoveexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstoveexp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveexp > equipstoveexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstoveexp* default_instance_;
};
// -------------------------------------------------------------------

class equipgrade : public ::google::protobuf::Message {
 public:
  equipgrade();
  virtual ~equipgrade();

  equipgrade(const equipgrade& from);

  inline equipgrade& operator=(const equipgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipgrade& default_instance();

  void Swap(equipgrade* other);

  // implements Message ----------------------------------------------

  equipgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipgrade& from);
  void MergeFrom(const equipgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipgrade)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipgrade* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipgrade : public ::google::protobuf::Message {
 public:
  Sheet_equipgrade();
  virtual ~Sheet_equipgrade();

  Sheet_equipgrade(const Sheet_equipgrade& from);

  inline Sheet_equipgrade& operator=(const Sheet_equipgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipgrade& default_instance();

  void Swap(Sheet_equipgrade* other);

  // implements Message ----------------------------------------------

  Sheet_equipgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipgrade& from);
  void MergeFrom(const Sheet_equipgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipgrade equipgrade_List = 1;
  inline int equipgrade_list_size() const;
  inline void clear_equipgrade_list();
  static const int kEquipgradeListFieldNumber = 1;
  inline const ::proto_ff::equipgrade& equipgrade_list(int index) const;
  inline ::proto_ff::equipgrade* mutable_equipgrade_list(int index);
  inline ::proto_ff::equipgrade* add_equipgrade_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgrade >&
      equipgrade_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgrade >*
      mutable_equipgrade_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipgrade)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgrade > equipgrade_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipgrade* default_instance_;
};
// ===================================================================


// ===================================================================

// equipequipattributeDesc

// optional int32 valueMin = 1;
inline bool equipequipattributeDesc::has_valuemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequipattributeDesc::set_has_valuemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequipattributeDesc::clear_has_valuemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequipattributeDesc::clear_valuemin() {
  valuemin_ = 0;
  clear_has_valuemin();
}
inline ::google::protobuf::int32 equipequipattributeDesc::valuemin() const {
  return valuemin_;
}
inline void equipequipattributeDesc::set_valuemin(::google::protobuf::int32 value) {
  set_has_valuemin();
  valuemin_ = value;
}

// optional int32 type = 2;
inline bool equipequipattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequipattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequipattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequipattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipequipattributeDesc::type() const {
  return type_;
}
inline void equipequipattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 valueMax = 3;
inline bool equipequipattributeDesc::has_valuemax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequipattributeDesc::set_has_valuemax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequipattributeDesc::clear_has_valuemax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequipattributeDesc::clear_valuemax() {
  valuemax_ = 0;
  clear_has_valuemax();
}
inline ::google::protobuf::int32 equipequipattributeDesc::valuemax() const {
  return valuemax_;
}
inline void equipequipattributeDesc::set_valuemax(::google::protobuf::int32 value) {
  set_has_valuemax();
  valuemax_ = value;
}

// -------------------------------------------------------------------

// equipequipgodAttributeDesc

// optional int32 valueMin = 1;
inline bool equipequipgodAttributeDesc::has_valuemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequipgodAttributeDesc::set_has_valuemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequipgodAttributeDesc::clear_has_valuemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequipgodAttributeDesc::clear_valuemin() {
  valuemin_ = 0;
  clear_has_valuemin();
}
inline ::google::protobuf::int32 equipequipgodAttributeDesc::valuemin() const {
  return valuemin_;
}
inline void equipequipgodAttributeDesc::set_valuemin(::google::protobuf::int32 value) {
  set_has_valuemin();
  valuemin_ = value;
}

// optional int32 type = 2;
inline bool equipequipgodAttributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequipgodAttributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequipgodAttributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequipgodAttributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipequipgodAttributeDesc::type() const {
  return type_;
}
inline void equipequipgodAttributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 valueMax = 3;
inline bool equipequipgodAttributeDesc::has_valuemax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequipgodAttributeDesc::set_has_valuemax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequipgodAttributeDesc::clear_has_valuemax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequipgodAttributeDesc::clear_valuemax() {
  valuemax_ = 0;
  clear_has_valuemax();
}
inline ::google::protobuf::int32 equipequipgodAttributeDesc::valuemax() const {
  return valuemax_;
}
inline void equipequipgodAttributeDesc::set_valuemax(::google::protobuf::int32 value) {
  set_has_valuemax();
  valuemax_ = value;
}

// -------------------------------------------------------------------

// equipequip

// optional int64 id = 1;
inline bool equipequip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequip::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipequip::id() const {
  return id_;
}
inline void equipequip::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool equipequip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& equipequip::name() const {
  return *name_;
}
inline void equipequip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void equipequip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void equipequip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* equipequip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wearQuality = 3;
inline bool equipequip::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequip::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequip::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequip::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipequip::wearquality() const {
  return wearquality_;
}
inline void equipequip::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 position = 4;
inline bool equipequip::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipequip::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipequip::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipequip::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipequip::position() const {
  return position_;
}
inline void equipequip::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional string profession = 5;
inline bool equipequip::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipequip::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipequip::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipequip::clear_profession() {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    profession_->clear();
  }
  clear_has_profession();
}
inline const ::std::string& equipequip::profession() const {
  return *profession_;
}
inline void equipequip::set_profession(const ::std::string& value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipequip::set_profession(const char* value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipequip::set_profession(const char* value, size_t size) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_profession() {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  return profession_;
}
inline ::std::string* equipequip::release_profession() {
  clear_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profession_;
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_profession(::std::string* profession) {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (profession) {
    set_has_profession();
    profession_ = profession;
  } else {
    clear_has_profession();
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 professionLv = 6;
inline bool equipequip::has_professionlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipequip::set_has_professionlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipequip::clear_has_professionlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipequip::clear_professionlv() {
  professionlv_ = 0;
  clear_has_professionlv();
}
inline ::google::protobuf::int32 equipequip::professionlv() const {
  return professionlv_;
}
inline void equipequip::set_professionlv(::google::protobuf::int32 value) {
  set_has_professionlv();
  professionlv_ = value;
}

// optional int32 level = 7;
inline bool equipequip::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void equipequip::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void equipequip::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void equipequip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 equipequip::level() const {
  return level_;
}
inline void equipequip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 quality = 8;
inline bool equipequip::has_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void equipequip::set_has_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void equipequip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void equipequip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 equipequip::quality() const {
  return quality_;
}
inline void equipequip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 star = 9;
inline bool equipequip::has_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void equipequip::set_has_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void equipequip::clear_has_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void equipequip::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 equipequip::star() const {
  return star_;
}
inline void equipequip::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 refineAttributeDown = 10;
inline bool equipequip::has_refineattributedown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void equipequip::set_has_refineattributedown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void equipequip::clear_has_refineattributedown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void equipequip::clear_refineattributedown() {
  refineattributedown_ = 0;
  clear_has_refineattributedown();
}
inline ::google::protobuf::int32 equipequip::refineattributedown() const {
  return refineattributedown_;
}
inline void equipequip::set_refineattributedown(::google::protobuf::int32 value) {
  set_has_refineattributedown();
  refineattributedown_ = value;
}

// optional int32 refineAttributeUp = 11;
inline bool equipequip::has_refineattributeup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void equipequip::set_has_refineattributeup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void equipequip::clear_has_refineattributeup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void equipequip::clear_refineattributeup() {
  refineattributeup_ = 0;
  clear_has_refineattributeup();
}
inline ::google::protobuf::int32 equipequip::refineattributeup() const {
  return refineattributeup_;
}
inline void equipequip::set_refineattributeup(::google::protobuf::int32 value) {
  set_has_refineattributeup();
  refineattributeup_ = value;
}

// optional string refineAttribute_typeLibrary = 12;
inline bool equipequip::has_refineattribute_typelibrary() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void equipequip::set_has_refineattribute_typelibrary() {
  _has_bits_[0] |= 0x00000800u;
}
inline void equipequip::clear_has_refineattribute_typelibrary() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void equipequip::clear_refineattribute_typelibrary() {
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_->clear();
  }
  clear_has_refineattribute_typelibrary();
}
inline const ::std::string& equipequip::refineattribute_typelibrary() const {
  return *refineattribute_typelibrary_;
}
inline void equipequip::set_refineattribute_typelibrary(const ::std::string& value) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(value);
}
inline void equipequip::set_refineattribute_typelibrary(const char* value) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(value);
}
inline void equipequip::set_refineattribute_typelibrary(const char* value, size_t size) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_typelibrary() {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  return refineattribute_typelibrary_;
}
inline ::std::string* equipequip::release_refineattribute_typelibrary() {
  clear_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_typelibrary_;
    refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_typelibrary(::std::string* refineattribute_typelibrary) {
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_typelibrary_;
  }
  if (refineattribute_typelibrary) {
    set_has_refineattribute_typelibrary();
    refineattribute_typelibrary_ = refineattribute_typelibrary;
  } else {
    clear_has_refineattribute_typelibrary();
    refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refineAttribute_valueMin = 13;
inline bool equipequip::has_refineattribute_valuemin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void equipequip::set_has_refineattribute_valuemin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void equipequip::clear_has_refineattribute_valuemin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void equipequip::clear_refineattribute_valuemin() {
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_->clear();
  }
  clear_has_refineattribute_valuemin();
}
inline const ::std::string& equipequip::refineattribute_valuemin() const {
  return *refineattribute_valuemin_;
}
inline void equipequip::set_refineattribute_valuemin(const ::std::string& value) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(value);
}
inline void equipequip::set_refineattribute_valuemin(const char* value) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(value);
}
inline void equipequip::set_refineattribute_valuemin(const char* value, size_t size) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_valuemin() {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  return refineattribute_valuemin_;
}
inline ::std::string* equipequip::release_refineattribute_valuemin() {
  clear_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_valuemin_;
    refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_valuemin(::std::string* refineattribute_valuemin) {
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemin_;
  }
  if (refineattribute_valuemin) {
    set_has_refineattribute_valuemin();
    refineattribute_valuemin_ = refineattribute_valuemin;
  } else {
    clear_has_refineattribute_valuemin();
    refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refineAttribute_valueMax = 14;
inline bool equipequip::has_refineattribute_valuemax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void equipequip::set_has_refineattribute_valuemax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void equipequip::clear_has_refineattribute_valuemax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void equipequip::clear_refineattribute_valuemax() {
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_->clear();
  }
  clear_has_refineattribute_valuemax();
}
inline const ::std::string& equipequip::refineattribute_valuemax() const {
  return *refineattribute_valuemax_;
}
inline void equipequip::set_refineattribute_valuemax(const ::std::string& value) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(value);
}
inline void equipequip::set_refineattribute_valuemax(const char* value) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(value);
}
inline void equipequip::set_refineattribute_valuemax(const char* value, size_t size) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_valuemax() {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  return refineattribute_valuemax_;
}
inline ::std::string* equipequip::release_refineattribute_valuemax() {
  clear_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_valuemax_;
    refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_valuemax(::std::string* refineattribute_valuemax) {
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemax_;
  }
  if (refineattribute_valuemax) {
    set_has_refineattribute_valuemax();
    refineattribute_valuemax_ = refineattribute_valuemax;
  } else {
    clear_has_refineattribute_valuemax();
    refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 blueStarNum = 15;
inline bool equipequip::has_bluestarnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void equipequip::set_has_bluestarnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void equipequip::clear_has_bluestarnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void equipequip::clear_bluestarnum() {
  bluestarnum_ = 0;
  clear_has_bluestarnum();
}
inline ::google::protobuf::int32 equipequip::bluestarnum() const {
  return bluestarnum_;
}
inline void equipequip::set_bluestarnum(::google::protobuf::int32 value) {
  set_has_bluestarnum();
  bluestarnum_ = value;
}

// optional string blueStar_type = 16;
inline bool equipequip::has_bluestar_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void equipequip::set_has_bluestar_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void equipequip::clear_has_bluestar_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void equipequip::clear_bluestar_type() {
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_type_->clear();
  }
  clear_has_bluestar_type();
}
inline const ::std::string& equipequip::bluestar_type() const {
  return *bluestar_type_;
}
inline void equipequip::set_bluestar_type(const ::std::string& value) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(value);
}
inline void equipequip::set_bluestar_type(const char* value) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(value);
}
inline void equipequip::set_bluestar_type(const char* value, size_t size) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_type() {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  return bluestar_type_;
}
inline ::std::string* equipequip::release_bluestar_type() {
  clear_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_type_;
    bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_type(::std::string* bluestar_type) {
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_type) {
    set_has_bluestar_type();
    bluestar_type_ = bluestar_type;
  } else {
    clear_has_bluestar_type();
    bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string blueStar_lv = 17;
inline bool equipequip::has_bluestar_lv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void equipequip::set_has_bluestar_lv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void equipequip::clear_has_bluestar_lv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void equipequip::clear_bluestar_lv() {
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_->clear();
  }
  clear_has_bluestar_lv();
}
inline const ::std::string& equipequip::bluestar_lv() const {
  return *bluestar_lv_;
}
inline void equipequip::set_bluestar_lv(const ::std::string& value) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(value);
}
inline void equipequip::set_bluestar_lv(const char* value) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(value);
}
inline void equipequip::set_bluestar_lv(const char* value, size_t size) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_lv() {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  return bluestar_lv_;
}
inline ::std::string* equipequip::release_bluestar_lv() {
  clear_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_lv_;
    bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_lv(::std::string* bluestar_lv) {
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_lv_;
  }
  if (bluestar_lv) {
    set_has_bluestar_lv();
    bluestar_lv_ = bluestar_lv;
  } else {
    clear_has_bluestar_lv();
    bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string blueStar_number = 18;
inline bool equipequip::has_bluestar_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void equipequip::set_has_bluestar_number() {
  _has_bits_[0] |= 0x00020000u;
}
inline void equipequip::clear_has_bluestar_number() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void equipequip::clear_bluestar_number() {
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_number_->clear();
  }
  clear_has_bluestar_number();
}
inline const ::std::string& equipequip::bluestar_number() const {
  return *bluestar_number_;
}
inline void equipequip::set_bluestar_number(const ::std::string& value) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(value);
}
inline void equipequip::set_bluestar_number(const char* value) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(value);
}
inline void equipequip::set_bluestar_number(const char* value, size_t size) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_number() {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  return bluestar_number_;
}
inline ::std::string* equipequip::release_bluestar_number() {
  clear_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_number_;
    bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_number(::std::string* bluestar_number) {
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_number_;
  }
  if (bluestar_number) {
    set_has_bluestar_number();
    bluestar_number_ = bluestar_number;
  } else {
    clear_has_bluestar_number();
    bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isCanbind = 19;
inline bool equipequip::has_iscanbind() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void equipequip::set_has_iscanbind() {
  _has_bits_[0] |= 0x00040000u;
}
inline void equipequip::clear_has_iscanbind() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void equipequip::clear_iscanbind() {
  iscanbind_ = 0;
  clear_has_iscanbind();
}
inline ::google::protobuf::int32 equipequip::iscanbind() const {
  return iscanbind_;
}
inline void equipequip::set_iscanbind(::google::protobuf::int32 value) {
  set_has_iscanbind();
  iscanbind_ = value;
}

// optional int32 isTradeBind = 20;
inline bool equipequip::has_istradebind() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void equipequip::set_has_istradebind() {
  _has_bits_[0] |= 0x00080000u;
}
inline void equipequip::clear_has_istradebind() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void equipequip::clear_istradebind() {
  istradebind_ = 0;
  clear_has_istradebind();
}
inline ::google::protobuf::int32 equipequip::istradebind() const {
  return istradebind_;
}
inline void equipequip::set_istradebind(::google::protobuf::int32 value) {
  set_has_istradebind();
  istradebind_ = value;
}

// optional int32 sellPrice = 21;
inline bool equipequip::has_sellprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void equipequip::set_has_sellprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void equipequip::clear_has_sellprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void equipequip::clear_sellprice() {
  sellprice_ = 0;
  clear_has_sellprice();
}
inline ::google::protobuf::int32 equipequip::sellprice() const {
  return sellprice_;
}
inline void equipequip::set_sellprice(::google::protobuf::int32 value) {
  set_has_sellprice();
  sellprice_ = value;
}

// optional string icon = 22;
inline bool equipequip::has_icon() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void equipequip::set_has_icon() {
  _has_bits_[0] |= 0x00200000u;
}
inline void equipequip::clear_has_icon() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void equipequip::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& equipequip::icon() const {
  return *icon_;
}
inline void equipequip::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void equipequip::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void equipequip::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* equipequip::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 23;
inline bool equipequip::has_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void equipequip::set_has_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void equipequip::clear_has_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void equipequip::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 equipequip::time() const {
  return time_;
}
inline void equipequip::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 broadcast = 24;
inline bool equipequip::has_broadcast() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void equipequip::set_has_broadcast() {
  _has_bits_[0] |= 0x00800000u;
}
inline void equipequip::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void equipequip::clear_broadcast() {
  broadcast_ = 0;
  clear_has_broadcast();
}
inline ::google::protobuf::int32 equipequip::broadcast() const {
  return broadcast_;
}
inline void equipequip::set_broadcast(::google::protobuf::int32 value) {
  set_has_broadcast();
  broadcast_ = value;
}

// optional string meltingResult = 25;
inline bool equipequip::has_meltingresult() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void equipequip::set_has_meltingresult() {
  _has_bits_[0] |= 0x01000000u;
}
inline void equipequip::clear_has_meltingresult() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void equipequip::clear_meltingresult() {
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    meltingresult_->clear();
  }
  clear_has_meltingresult();
}
inline const ::std::string& equipequip::meltingresult() const {
  return *meltingresult_;
}
inline void equipequip::set_meltingresult(const ::std::string& value) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(value);
}
inline void equipequip::set_meltingresult(const char* value) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(value);
}
inline void equipequip::set_meltingresult(const char* value, size_t size) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_meltingresult() {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  return meltingresult_;
}
inline ::std::string* equipequip::release_meltingresult() {
  clear_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meltingresult_;
    meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_meltingresult(::std::string* meltingresult) {
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    delete meltingresult_;
  }
  if (meltingresult) {
    set_has_meltingresult();
    meltingresult_ = meltingresult;
  } else {
    clear_has_meltingresult();
    meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 specialAttributeDown = 26;
inline bool equipequip::has_specialattributedown() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void equipequip::set_has_specialattributedown() {
  _has_bits_[0] |= 0x02000000u;
}
inline void equipequip::clear_has_specialattributedown() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void equipequip::clear_specialattributedown() {
  specialattributedown_ = 0;
  clear_has_specialattributedown();
}
inline ::google::protobuf::int32 equipequip::specialattributedown() const {
  return specialattributedown_;
}
inline void equipequip::set_specialattributedown(::google::protobuf::int32 value) {
  set_has_specialattributedown();
  specialattributedown_ = value;
}

// optional int32 specialAttributeUp = 27;
inline bool equipequip::has_specialattributeup() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void equipequip::set_has_specialattributeup() {
  _has_bits_[0] |= 0x04000000u;
}
inline void equipequip::clear_has_specialattributeup() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void equipequip::clear_specialattributeup() {
  specialattributeup_ = 0;
  clear_has_specialattributeup();
}
inline ::google::protobuf::int32 equipequip::specialattributeup() const {
  return specialattributeup_;
}
inline void equipequip::set_specialattributeup(::google::protobuf::int32 value) {
  set_has_specialattributeup();
  specialattributeup_ = value;
}

// optional string specialAttribute_typeLibrary = 28;
inline bool equipequip::has_specialattribute_typelibrary() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void equipequip::set_has_specialattribute_typelibrary() {
  _has_bits_[0] |= 0x08000000u;
}
inline void equipequip::clear_has_specialattribute_typelibrary() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void equipequip::clear_specialattribute_typelibrary() {
  if (specialattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    specialattribute_typelibrary_->clear();
  }
  clear_has_specialattribute_typelibrary();
}
inline const ::std::string& equipequip::specialattribute_typelibrary() const {
  return *specialattribute_typelibrary_;
}
inline void equipequip::set_specialattribute_typelibrary(const ::std::string& value) {
  set_has_specialattribute_typelibrary();
  if (specialattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_typelibrary_ = new ::std::string;
  }
  specialattribute_typelibrary_->assign(value);
}
inline void equipequip::set_specialattribute_typelibrary(const char* value) {
  set_has_specialattribute_typelibrary();
  if (specialattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_typelibrary_ = new ::std::string;
  }
  specialattribute_typelibrary_->assign(value);
}
inline void equipequip::set_specialattribute_typelibrary(const char* value, size_t size) {
  set_has_specialattribute_typelibrary();
  if (specialattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_typelibrary_ = new ::std::string;
  }
  specialattribute_typelibrary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_specialattribute_typelibrary() {
  set_has_specialattribute_typelibrary();
  if (specialattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_typelibrary_ = new ::std::string;
  }
  return specialattribute_typelibrary_;
}
inline ::std::string* equipequip::release_specialattribute_typelibrary() {
  clear_has_specialattribute_typelibrary();
  if (specialattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = specialattribute_typelibrary_;
    specialattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_specialattribute_typelibrary(::std::string* specialattribute_typelibrary) {
  if (specialattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete specialattribute_typelibrary_;
  }
  if (specialattribute_typelibrary) {
    set_has_specialattribute_typelibrary();
    specialattribute_typelibrary_ = specialattribute_typelibrary;
  } else {
    clear_has_specialattribute_typelibrary();
    specialattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string specialAttribute_valueMin = 29;
inline bool equipequip::has_specialattribute_valuemin() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void equipequip::set_has_specialattribute_valuemin() {
  _has_bits_[0] |= 0x10000000u;
}
inline void equipequip::clear_has_specialattribute_valuemin() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void equipequip::clear_specialattribute_valuemin() {
  if (specialattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemin_->clear();
  }
  clear_has_specialattribute_valuemin();
}
inline const ::std::string& equipequip::specialattribute_valuemin() const {
  return *specialattribute_valuemin_;
}
inline void equipequip::set_specialattribute_valuemin(const ::std::string& value) {
  set_has_specialattribute_valuemin();
  if (specialattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemin_ = new ::std::string;
  }
  specialattribute_valuemin_->assign(value);
}
inline void equipequip::set_specialattribute_valuemin(const char* value) {
  set_has_specialattribute_valuemin();
  if (specialattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemin_ = new ::std::string;
  }
  specialattribute_valuemin_->assign(value);
}
inline void equipequip::set_specialattribute_valuemin(const char* value, size_t size) {
  set_has_specialattribute_valuemin();
  if (specialattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemin_ = new ::std::string;
  }
  specialattribute_valuemin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_specialattribute_valuemin() {
  set_has_specialattribute_valuemin();
  if (specialattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemin_ = new ::std::string;
  }
  return specialattribute_valuemin_;
}
inline ::std::string* equipequip::release_specialattribute_valuemin() {
  clear_has_specialattribute_valuemin();
  if (specialattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = specialattribute_valuemin_;
    specialattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_specialattribute_valuemin(::std::string* specialattribute_valuemin) {
  if (specialattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete specialattribute_valuemin_;
  }
  if (specialattribute_valuemin) {
    set_has_specialattribute_valuemin();
    specialattribute_valuemin_ = specialattribute_valuemin;
  } else {
    clear_has_specialattribute_valuemin();
    specialattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string specialAttribute_valueMax = 30;
inline bool equipequip::has_specialattribute_valuemax() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void equipequip::set_has_specialattribute_valuemax() {
  _has_bits_[0] |= 0x20000000u;
}
inline void equipequip::clear_has_specialattribute_valuemax() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void equipequip::clear_specialattribute_valuemax() {
  if (specialattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemax_->clear();
  }
  clear_has_specialattribute_valuemax();
}
inline const ::std::string& equipequip::specialattribute_valuemax() const {
  return *specialattribute_valuemax_;
}
inline void equipequip::set_specialattribute_valuemax(const ::std::string& value) {
  set_has_specialattribute_valuemax();
  if (specialattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemax_ = new ::std::string;
  }
  specialattribute_valuemax_->assign(value);
}
inline void equipequip::set_specialattribute_valuemax(const char* value) {
  set_has_specialattribute_valuemax();
  if (specialattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemax_ = new ::std::string;
  }
  specialattribute_valuemax_->assign(value);
}
inline void equipequip::set_specialattribute_valuemax(const char* value, size_t size) {
  set_has_specialattribute_valuemax();
  if (specialattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemax_ = new ::std::string;
  }
  specialattribute_valuemax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_specialattribute_valuemax() {
  set_has_specialattribute_valuemax();
  if (specialattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    specialattribute_valuemax_ = new ::std::string;
  }
  return specialattribute_valuemax_;
}
inline ::std::string* equipequip::release_specialattribute_valuemax() {
  clear_has_specialattribute_valuemax();
  if (specialattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = specialattribute_valuemax_;
    specialattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_specialattribute_valuemax(::std::string* specialattribute_valuemax) {
  if (specialattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete specialattribute_valuemax_;
  }
  if (specialattribute_valuemax) {
    set_has_specialattribute_valuemax();
    specialattribute_valuemax_ = specialattribute_valuemax;
  } else {
    clear_has_specialattribute_valuemax();
    specialattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skillId = 31;
inline bool equipequip::has_skillid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void equipequip::set_has_skillid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void equipequip::clear_has_skillid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void equipequip::clear_skillid() {
  if (skillid_ != &::google::protobuf::internal::kEmptyString) {
    skillid_->clear();
  }
  clear_has_skillid();
}
inline const ::std::string& equipequip::skillid() const {
  return *skillid_;
}
inline void equipequip::set_skillid(const ::std::string& value) {
  set_has_skillid();
  if (skillid_ == &::google::protobuf::internal::kEmptyString) {
    skillid_ = new ::std::string;
  }
  skillid_->assign(value);
}
inline void equipequip::set_skillid(const char* value) {
  set_has_skillid();
  if (skillid_ == &::google::protobuf::internal::kEmptyString) {
    skillid_ = new ::std::string;
  }
  skillid_->assign(value);
}
inline void equipequip::set_skillid(const char* value, size_t size) {
  set_has_skillid();
  if (skillid_ == &::google::protobuf::internal::kEmptyString) {
    skillid_ = new ::std::string;
  }
  skillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_skillid() {
  set_has_skillid();
  if (skillid_ == &::google::protobuf::internal::kEmptyString) {
    skillid_ = new ::std::string;
  }
  return skillid_;
}
inline ::std::string* equipequip::release_skillid() {
  clear_has_skillid();
  if (skillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skillid_;
    skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_skillid(::std::string* skillid) {
  if (skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete skillid_;
  }
  if (skillid) {
    set_has_skillid();
    skillid_ = skillid;
  } else {
    clear_has_skillid();
    skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.equipequipattributeDesc attribute = 32;
inline int equipequip::attribute_size() const {
  return attribute_.size();
}
inline void equipequip::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipequipattributeDesc& equipequip::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipequipattributeDesc* equipequip::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipequipattributeDesc* equipequip::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >&
equipequip::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >*
equipequip::mutable_attribute() {
  return &attribute_;
}

// repeated .proto_ff.equipequipgodAttributeDesc godAttribute = 33;
inline int equipequip::godattribute_size() const {
  return godattribute_.size();
}
inline void equipequip::clear_godattribute() {
  godattribute_.Clear();
}
inline const ::proto_ff::equipequipgodAttributeDesc& equipequip::godattribute(int index) const {
  return godattribute_.Get(index);
}
inline ::proto_ff::equipequipgodAttributeDesc* equipequip::mutable_godattribute(int index) {
  return godattribute_.Mutable(index);
}
inline ::proto_ff::equipequipgodAttributeDesc* equipequip::add_godattribute() {
  return godattribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipgodAttributeDesc >&
equipequip::godattribute() const {
  return godattribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipgodAttributeDesc >*
equipequip::mutable_godattribute() {
  return &godattribute_;
}

// -------------------------------------------------------------------

// Sheet_equipequip

// repeated .proto_ff.equipequip equipequip_List = 1;
inline int Sheet_equipequip::equipequip_list_size() const {
  return equipequip_list_.size();
}
inline void Sheet_equipequip::clear_equipequip_list() {
  equipequip_list_.Clear();
}
inline const ::proto_ff::equipequip& Sheet_equipequip::equipequip_list(int index) const {
  return equipequip_list_.Get(index);
}
inline ::proto_ff::equipequip* Sheet_equipequip::mutable_equipequip_list(int index) {
  return equipequip_list_.Mutable(index);
}
inline ::proto_ff::equipequip* Sheet_equipequip::add_equipequip_list() {
  return equipequip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >&
Sheet_equipequip::equipequip_list() const {
  return equipequip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >*
Sheet_equipequip::mutable_equipequip_list() {
  return &equipequip_list_;
}

// -------------------------------------------------------------------

// equipstrongtypeDesc

// optional string num = 1;
inline bool equipstrongtypeDesc::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrongtypeDesc::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrongtypeDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrongtypeDesc::clear_num() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    num_->clear();
  }
  clear_has_num();
}
inline const ::std::string& equipstrongtypeDesc::num() const {
  return *num_;
}
inline void equipstrongtypeDesc::set_num(const ::std::string& value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(value);
}
inline void equipstrongtypeDesc::set_num(const char* value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(value);
}
inline void equipstrongtypeDesc::set_num(const char* value, size_t size) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipstrongtypeDesc::mutable_num() {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  return num_;
}
inline ::std::string* equipstrongtypeDesc::release_num() {
  clear_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = num_;
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipstrongtypeDesc::set_allocated_num(::std::string* num) {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (num) {
    set_has_num();
    num_ = num;
  } else {
    clear_has_num();
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool equipstrongtypeDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrongtypeDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrongtypeDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrongtypeDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 equipstrongtypeDesc::id() const {
  return id_;
}
inline void equipstrongtypeDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// equipstrong

// optional int64 id = 1;
inline bool equipstrong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrong::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipstrong::id() const {
  return id_;
}
inline void equipstrong::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 2;
inline bool equipstrong::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrong::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrong::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrong::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipstrong::position() const {
  return position_;
}
inline void equipstrong::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 wearQuality = 3;
inline bool equipstrong::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipstrong::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipstrong::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipstrong::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipstrong::wearquality() const {
  return wearquality_;
}
inline void equipstrong::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 srtongUp = 4;
inline bool equipstrong::has_srtongup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipstrong::set_has_srtongup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipstrong::clear_has_srtongup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipstrong::clear_srtongup() {
  srtongup_ = 0;
  clear_has_srtongup();
}
inline ::google::protobuf::int32 equipstrong::srtongup() const {
  return srtongup_;
}
inline void equipstrong::set_srtongup(::google::protobuf::int32 value) {
  set_has_srtongup();
  srtongup_ = value;
}

// repeated .proto_ff.equipstrongtypeDesc type = 5;
inline int equipstrong::type_size() const {
  return type_.size();
}
inline void equipstrong::clear_type() {
  type_.Clear();
}
inline const ::proto_ff::equipstrongtypeDesc& equipstrong::type(int index) const {
  return type_.Get(index);
}
inline ::proto_ff::equipstrongtypeDesc* equipstrong::mutable_type(int index) {
  return type_.Mutable(index);
}
inline ::proto_ff::equipstrongtypeDesc* equipstrong::add_type() {
  return type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >&
equipstrong::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >*
equipstrong::mutable_type() {
  return &type_;
}

// -------------------------------------------------------------------

// Sheet_equipstrong

// repeated .proto_ff.equipstrong equipstrong_List = 1;
inline int Sheet_equipstrong::equipstrong_list_size() const {
  return equipstrong_list_.size();
}
inline void Sheet_equipstrong::clear_equipstrong_list() {
  equipstrong_list_.Clear();
}
inline const ::proto_ff::equipstrong& Sheet_equipstrong::equipstrong_list(int index) const {
  return equipstrong_list_.Get(index);
}
inline ::proto_ff::equipstrong* Sheet_equipstrong::mutable_equipstrong_list(int index) {
  return equipstrong_list_.Mutable(index);
}
inline ::proto_ff::equipstrong* Sheet_equipstrong::add_equipstrong_list() {
  return equipstrong_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >&
Sheet_equipstrong::equipstrong_list() const {
  return equipstrong_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >*
Sheet_equipstrong::mutable_equipstrong_list() {
  return &equipstrong_list_;
}

// -------------------------------------------------------------------

// equipstrongexp

// optional int32 Lv = 1;
inline bool equipstrongexp::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrongexp::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrongexp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrongexp::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 equipstrongexp::lv() const {
  return lv_;
}
inline void equipstrongexp::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 gold = 2;
inline bool equipstrongexp::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrongexp::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrongexp::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrongexp::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 equipstrongexp::gold() const {
  return gold_;
}
inline void equipstrongexp::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// repeated int32 costItem = 3;
inline int equipstrongexp::costitem_size() const {
  return costitem_.size();
}
inline void equipstrongexp::clear_costitem() {
  costitem_.Clear();
}
inline ::google::protobuf::int32 equipstrongexp::costitem(int index) const {
  return costitem_.Get(index);
}
inline void equipstrongexp::set_costitem(int index, ::google::protobuf::int32 value) {
  costitem_.Set(index, value);
}
inline void equipstrongexp::add_costitem(::google::protobuf::int32 value) {
  costitem_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equipstrongexp::costitem() const {
  return costitem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equipstrongexp::mutable_costitem() {
  return &costitem_;
}

// repeated string positionType = 4;
inline int equipstrongexp::positiontype_size() const {
  return positiontype_.size();
}
inline void equipstrongexp::clear_positiontype() {
  positiontype_.Clear();
}
inline const ::std::string& equipstrongexp::positiontype(int index) const {
  return positiontype_.Get(index);
}
inline ::std::string* equipstrongexp::mutable_positiontype(int index) {
  return positiontype_.Mutable(index);
}
inline void equipstrongexp::set_positiontype(int index, const ::std::string& value) {
  positiontype_.Mutable(index)->assign(value);
}
inline void equipstrongexp::set_positiontype(int index, const char* value) {
  positiontype_.Mutable(index)->assign(value);
}
inline void equipstrongexp::set_positiontype(int index, const char* value, size_t size) {
  positiontype_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipstrongexp::add_positiontype() {
  return positiontype_.Add();
}
inline void equipstrongexp::add_positiontype(const ::std::string& value) {
  positiontype_.Add()->assign(value);
}
inline void equipstrongexp::add_positiontype(const char* value) {
  positiontype_.Add()->assign(value);
}
inline void equipstrongexp::add_positiontype(const char* value, size_t size) {
  positiontype_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
equipstrongexp::positiontype() const {
  return positiontype_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
equipstrongexp::mutable_positiontype() {
  return &positiontype_;
}

// repeated int32 costNum = 5;
inline int equipstrongexp::costnum_size() const {
  return costnum_.size();
}
inline void equipstrongexp::clear_costnum() {
  costnum_.Clear();
}
inline ::google::protobuf::int32 equipstrongexp::costnum(int index) const {
  return costnum_.Get(index);
}
inline void equipstrongexp::set_costnum(int index, ::google::protobuf::int32 value) {
  costnum_.Set(index, value);
}
inline void equipstrongexp::add_costnum(::google::protobuf::int32 value) {
  costnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equipstrongexp::costnum() const {
  return costnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equipstrongexp::mutable_costnum() {
  return &costnum_;
}

// -------------------------------------------------------------------

// Sheet_equipstrongexp

// repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
inline int Sheet_equipstrongexp::equipstrongexp_list_size() const {
  return equipstrongexp_list_.size();
}
inline void Sheet_equipstrongexp::clear_equipstrongexp_list() {
  equipstrongexp_list_.Clear();
}
inline const ::proto_ff::equipstrongexp& Sheet_equipstrongexp::equipstrongexp_list(int index) const {
  return equipstrongexp_list_.Get(index);
}
inline ::proto_ff::equipstrongexp* Sheet_equipstrongexp::mutable_equipstrongexp_list(int index) {
  return equipstrongexp_list_.Mutable(index);
}
inline ::proto_ff::equipstrongexp* Sheet_equipstrongexp::add_equipstrongexp_list() {
  return equipstrongexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >&
Sheet_equipstrongexp::equipstrongexp_list() const {
  return equipstrongexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >*
Sheet_equipstrongexp::mutable_equipstrongexp_list() {
  return &equipstrongexp_list_;
}

// -------------------------------------------------------------------

// equipstrongtotalattributeDesc

// optional int32 type = 1;
inline bool equipstrongtotalattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrongtotalattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrongtotalattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrongtotalattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipstrongtotalattributeDesc::type() const {
  return type_;
}
inline void equipstrongtotalattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool equipstrongtotalattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrongtotalattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrongtotalattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrongtotalattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 equipstrongtotalattributeDesc::value() const {
  return value_;
}
inline void equipstrongtotalattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// equipstrongtotal

// optional int64 id = 1;
inline bool equipstrongtotal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrongtotal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrongtotal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrongtotal::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipstrongtotal::id() const {
  return id_;
}
inline void equipstrongtotal::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 idType = 2;
inline bool equipstrongtotal::has_idtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrongtotal::set_has_idtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrongtotal::clear_has_idtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrongtotal::clear_idtype() {
  idtype_ = 0;
  clear_has_idtype();
}
inline ::google::protobuf::int32 equipstrongtotal::idtype() const {
  return idtype_;
}
inline void equipstrongtotal::set_idtype(::google::protobuf::int32 value) {
  set_has_idtype();
  idtype_ = value;
}

// optional int32 idNum = 3;
inline bool equipstrongtotal::has_idnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipstrongtotal::set_has_idnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipstrongtotal::clear_has_idnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipstrongtotal::clear_idnum() {
  idnum_ = 0;
  clear_has_idnum();
}
inline ::google::protobuf::int32 equipstrongtotal::idnum() const {
  return idnum_;
}
inline void equipstrongtotal::set_idnum(::google::protobuf::int32 value) {
  set_has_idnum();
  idnum_ = value;
}

// repeated .proto_ff.equipstrongtotalattributeDesc attribute = 4;
inline int equipstrongtotal::attribute_size() const {
  return attribute_.size();
}
inline void equipstrongtotal::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipstrongtotalattributeDesc& equipstrongtotal::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipstrongtotalattributeDesc* equipstrongtotal::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipstrongtotalattributeDesc* equipstrongtotal::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotalattributeDesc >&
equipstrongtotal::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotalattributeDesc >*
equipstrongtotal::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_equipstrongtotal

// repeated .proto_ff.equipstrongtotal equipstrongtotal_List = 1;
inline int Sheet_equipstrongtotal::equipstrongtotal_list_size() const {
  return equipstrongtotal_list_.size();
}
inline void Sheet_equipstrongtotal::clear_equipstrongtotal_list() {
  equipstrongtotal_list_.Clear();
}
inline const ::proto_ff::equipstrongtotal& Sheet_equipstrongtotal::equipstrongtotal_list(int index) const {
  return equipstrongtotal_list_.Get(index);
}
inline ::proto_ff::equipstrongtotal* Sheet_equipstrongtotal::mutable_equipstrongtotal_list(int index) {
  return equipstrongtotal_list_.Mutable(index);
}
inline ::proto_ff::equipstrongtotal* Sheet_equipstrongtotal::add_equipstrongtotal_list() {
  return equipstrongtotal_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotal >&
Sheet_equipstrongtotal::equipstrongtotal_list() const {
  return equipstrongtotal_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtotal >*
Sheet_equipstrongtotal::mutable_equipstrongtotal_list() {
  return &equipstrongtotal_list_;
}

// -------------------------------------------------------------------

// equipgem

// optional int32 position = 1;
inline bool equipgem::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipgem::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipgem::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipgem::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipgem::position() const {
  return position_;
}
inline void equipgem::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional string gemType = 2;
inline bool equipgem::has_gemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipgem::set_has_gemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipgem::clear_has_gemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipgem::clear_gemtype() {
  if (gemtype_ != &::google::protobuf::internal::kEmptyString) {
    gemtype_->clear();
  }
  clear_has_gemtype();
}
inline const ::std::string& equipgem::gemtype() const {
  return *gemtype_;
}
inline void equipgem::set_gemtype(const ::std::string& value) {
  set_has_gemtype();
  if (gemtype_ == &::google::protobuf::internal::kEmptyString) {
    gemtype_ = new ::std::string;
  }
  gemtype_->assign(value);
}
inline void equipgem::set_gemtype(const char* value) {
  set_has_gemtype();
  if (gemtype_ == &::google::protobuf::internal::kEmptyString) {
    gemtype_ = new ::std::string;
  }
  gemtype_->assign(value);
}
inline void equipgem::set_gemtype(const char* value, size_t size) {
  set_has_gemtype();
  if (gemtype_ == &::google::protobuf::internal::kEmptyString) {
    gemtype_ = new ::std::string;
  }
  gemtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipgem::mutable_gemtype() {
  set_has_gemtype();
  if (gemtype_ == &::google::protobuf::internal::kEmptyString) {
    gemtype_ = new ::std::string;
  }
  return gemtype_;
}
inline ::std::string* equipgem::release_gemtype() {
  clear_has_gemtype();
  if (gemtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gemtype_;
    gemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipgem::set_allocated_gemtype(::std::string* gemtype) {
  if (gemtype_ != &::google::protobuf::internal::kEmptyString) {
    delete gemtype_;
  }
  if (gemtype) {
    set_has_gemtype();
    gemtype_ = gemtype;
  } else {
    clear_has_gemtype();
    gemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 speciallyGemType = 3;
inline bool equipgem::has_speciallygemtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipgem::set_has_speciallygemtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipgem::clear_has_speciallygemtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipgem::clear_speciallygemtype() {
  speciallygemtype_ = 0;
  clear_has_speciallygemtype();
}
inline ::google::protobuf::int32 equipgem::speciallygemtype() const {
  return speciallygemtype_;
}
inline void equipgem::set_speciallygemtype(::google::protobuf::int32 value) {
  set_has_speciallygemtype();
  speciallygemtype_ = value;
}

// optional int32 payUnlockItem = 4;
inline bool equipgem::has_payunlockitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipgem::set_has_payunlockitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipgem::clear_has_payunlockitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipgem::clear_payunlockitem() {
  payunlockitem_ = 0;
  clear_has_payunlockitem();
}
inline ::google::protobuf::int32 equipgem::payunlockitem() const {
  return payunlockitem_;
}
inline void equipgem::set_payunlockitem(::google::protobuf::int32 value) {
  set_has_payunlockitem();
  payunlockitem_ = value;
}

// optional int32 payUnlockNnm = 5;
inline bool equipgem::has_payunlocknnm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipgem::set_has_payunlocknnm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipgem::clear_has_payunlocknnm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipgem::clear_payunlocknnm() {
  payunlocknnm_ = 0;
  clear_has_payunlocknnm();
}
inline ::google::protobuf::int32 equipgem::payunlocknnm() const {
  return payunlocknnm_;
}
inline void equipgem::set_payunlocknnm(::google::protobuf::int32 value) {
  set_has_payunlocknnm();
  payunlocknnm_ = value;
}

// repeated int32 gemUnlock = 6;
inline int equipgem::gemunlock_size() const {
  return gemunlock_.size();
}
inline void equipgem::clear_gemunlock() {
  gemunlock_.Clear();
}
inline ::google::protobuf::int32 equipgem::gemunlock(int index) const {
  return gemunlock_.Get(index);
}
inline void equipgem::set_gemunlock(int index, ::google::protobuf::int32 value) {
  gemunlock_.Set(index, value);
}
inline void equipgem::add_gemunlock(::google::protobuf::int32 value) {
  gemunlock_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equipgem::gemunlock() const {
  return gemunlock_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equipgem::mutable_gemunlock() {
  return &gemunlock_;
}

// -------------------------------------------------------------------

// Sheet_equipgem

// repeated .proto_ff.equipgem equipgem_List = 1;
inline int Sheet_equipgem::equipgem_list_size() const {
  return equipgem_list_.size();
}
inline void Sheet_equipgem::clear_equipgem_list() {
  equipgem_list_.Clear();
}
inline const ::proto_ff::equipgem& Sheet_equipgem::equipgem_list(int index) const {
  return equipgem_list_.Get(index);
}
inline ::proto_ff::equipgem* Sheet_equipgem::mutable_equipgem_list(int index) {
  return equipgem_list_.Mutable(index);
}
inline ::proto_ff::equipgem* Sheet_equipgem::add_equipgem_list() {
  return equipgem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >&
Sheet_equipgem::equipgem_list() const {
  return equipgem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >*
Sheet_equipgem::mutable_equipgem_list() {
  return &equipgem_list_;
}

// -------------------------------------------------------------------

// equipstoveattattributeDesc

// optional int32 type = 1;
inline bool equipstoveattattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstoveattattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstoveattattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstoveattattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipstoveattattributeDesc::type() const {
  return type_;
}
inline void equipstoveattattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool equipstoveattattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstoveattattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstoveattattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstoveattattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 equipstoveattattributeDesc::value() const {
  return value_;
}
inline void equipstoveattattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// equipstoveatt

// optional int32 lv = 1;
inline bool equipstoveatt::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstoveatt::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstoveatt::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstoveatt::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 equipstoveatt::lv() const {
  return lv_;
}
inline void equipstoveatt::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int64 exp = 2;
inline bool equipstoveatt::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstoveatt::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstoveatt::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstoveatt::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 equipstoveatt::exp() const {
  return exp_;
}
inline void equipstoveatt::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .proto_ff.equipstoveattattributeDesc attribute = 3;
inline int equipstoveatt::attribute_size() const {
  return attribute_.size();
}
inline void equipstoveatt::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipstoveattattributeDesc& equipstoveatt::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipstoveattattributeDesc* equipstoveatt::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipstoveattattributeDesc* equipstoveatt::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveattattributeDesc >&
equipstoveatt::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveattattributeDesc >*
equipstoveatt::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_equipstoveatt

// repeated .proto_ff.equipstoveatt equipstoveatt_List = 1;
inline int Sheet_equipstoveatt::equipstoveatt_list_size() const {
  return equipstoveatt_list_.size();
}
inline void Sheet_equipstoveatt::clear_equipstoveatt_list() {
  equipstoveatt_list_.Clear();
}
inline const ::proto_ff::equipstoveatt& Sheet_equipstoveatt::equipstoveatt_list(int index) const {
  return equipstoveatt_list_.Get(index);
}
inline ::proto_ff::equipstoveatt* Sheet_equipstoveatt::mutable_equipstoveatt_list(int index) {
  return equipstoveatt_list_.Mutable(index);
}
inline ::proto_ff::equipstoveatt* Sheet_equipstoveatt::add_equipstoveatt_list() {
  return equipstoveatt_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveatt >&
Sheet_equipstoveatt::equipstoveatt_list() const {
  return equipstoveatt_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveatt >*
Sheet_equipstoveatt::mutable_equipstoveatt_list() {
  return &equipstoveatt_list_;
}

// -------------------------------------------------------------------

// equipstoveexp

// optional int32 ID = 1;
inline bool equipstoveexp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstoveexp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstoveexp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstoveexp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 equipstoveexp::id() const {
  return id_;
}
inline void equipstoveexp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 exp = 2;
inline bool equipstoveexp::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstoveexp::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstoveexp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstoveexp::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 equipstoveexp::exp() const {
  return exp_;
}
inline void equipstoveexp::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 wearQuality = 3;
inline bool equipstoveexp::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipstoveexp::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipstoveexp::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipstoveexp::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipstoveexp::wearquality() const {
  return wearquality_;
}
inline void equipstoveexp::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 quality = 4;
inline bool equipstoveexp::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipstoveexp::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipstoveexp::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipstoveexp::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 equipstoveexp::quality() const {
  return quality_;
}
inline void equipstoveexp::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// Sheet_equipstoveexp

// repeated .proto_ff.equipstoveexp equipstoveexp_List = 1;
inline int Sheet_equipstoveexp::equipstoveexp_list_size() const {
  return equipstoveexp_list_.size();
}
inline void Sheet_equipstoveexp::clear_equipstoveexp_list() {
  equipstoveexp_list_.Clear();
}
inline const ::proto_ff::equipstoveexp& Sheet_equipstoveexp::equipstoveexp_list(int index) const {
  return equipstoveexp_list_.Get(index);
}
inline ::proto_ff::equipstoveexp* Sheet_equipstoveexp::mutable_equipstoveexp_list(int index) {
  return equipstoveexp_list_.Mutable(index);
}
inline ::proto_ff::equipstoveexp* Sheet_equipstoveexp::add_equipstoveexp_list() {
  return equipstoveexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveexp >&
Sheet_equipstoveexp::equipstoveexp_list() const {
  return equipstoveexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstoveexp >*
Sheet_equipstoveexp::mutable_equipstoveexp_list() {
  return &equipstoveexp_list_;
}

// -------------------------------------------------------------------

// equipgrade

// optional int32 ID = 1;
inline bool equipgrade::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipgrade::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipgrade::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipgrade::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 equipgrade::id() const {
  return id_;
}
inline void equipgrade::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Sheet_equipgrade

// repeated .proto_ff.equipgrade equipgrade_List = 1;
inline int Sheet_equipgrade::equipgrade_list_size() const {
  return equipgrade_list_.size();
}
inline void Sheet_equipgrade::clear_equipgrade_list() {
  equipgrade_list_.Clear();
}
inline const ::proto_ff::equipgrade& Sheet_equipgrade::equipgrade_list(int index) const {
  return equipgrade_list_.Get(index);
}
inline ::proto_ff::equipgrade* Sheet_equipgrade::mutable_equipgrade_list(int index) {
  return equipgrade_list_.Mutable(index);
}
inline ::proto_ff::equipgrade* Sheet_equipgrade::add_equipgrade_list() {
  return equipgrade_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgrade >&
Sheet_equipgrade::equipgrade_list() const {
  return equipgrade_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgrade >*
Sheet_equipgrade::mutable_equipgrade_list() {
  return &equipgrade_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_equip_2eproto__INCLUDED
