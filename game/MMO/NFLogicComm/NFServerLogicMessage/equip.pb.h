// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.proto

#ifndef PROTOBUF_equip_2eproto__INCLUDED
#define PROTOBUF_equip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_equip_2eproto();
void protobuf_AssignDesc_equip_2eproto();
void protobuf_ShutdownFile_equip_2eproto();

class equipequipattributeDesc;
class equipequip;
class Sheet_equipequip;

// ===================================================================

class equipequipattributeDesc : public ::google::protobuf::Message {
 public:
  equipequipattributeDesc();
  virtual ~equipequipattributeDesc();

  equipequipattributeDesc(const equipequipattributeDesc& from);

  inline equipequipattributeDesc& operator=(const equipequipattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequipattributeDesc& default_instance();

  void Swap(equipequipattributeDesc* other);

  // implements Message ----------------------------------------------

  equipequipattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequipattributeDesc& from);
  void MergeFrom(const equipequipattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 valueMin = 1;
  inline bool has_valuemin() const;
  inline void clear_valuemin();
  static const int kValueMinFieldNumber = 1;
  inline ::google::protobuf::int32 valuemin() const;
  inline void set_valuemin(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 valueMax = 3;
  inline bool has_valuemax() const;
  inline void clear_valuemax();
  static const int kValueMaxFieldNumber = 3;
  inline ::google::protobuf::int32 valuemax() const;
  inline void set_valuemax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipequipattributeDesc)
 private:
  inline void set_has_valuemin();
  inline void clear_has_valuemin();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_valuemax();
  inline void clear_has_valuemax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 valuemin_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 valuemax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequipattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipequip : public ::google::protobuf::Message {
 public:
  equipequip();
  virtual ~equipequip();

  equipequip(const equipequip& from);

  inline equipequip& operator=(const equipequip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequip& default_instance();

  void Swap(equipequip* other);

  // implements Message ----------------------------------------------

  equipequip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequip& from);
  void MergeFrom(const equipequip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline const ::std::string& profession() const;
  inline void set_profession(const ::std::string& value);
  inline void set_profession(const char* value);
  inline void set_profession(const char* value, size_t size);
  inline ::std::string* mutable_profession();
  inline ::std::string* release_profession();
  inline void set_allocated_profession(::std::string* profession);

  // optional int32 professionLv = 6;
  inline bool has_professionlv() const;
  inline void clear_professionlv();
  static const int kProfessionLvFieldNumber = 6;
  inline ::google::protobuf::int32 professionlv() const;
  inline void set_professionlv(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 quality = 8;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 8;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 star = 9;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 9;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 refineAttributeDown = 10;
  inline bool has_refineattributedown() const;
  inline void clear_refineattributedown();
  static const int kRefineAttributeDownFieldNumber = 10;
  inline ::google::protobuf::int32 refineattributedown() const;
  inline void set_refineattributedown(::google::protobuf::int32 value);

  // optional int32 refineAttributeUp = 11;
  inline bool has_refineattributeup() const;
  inline void clear_refineattributeup();
  static const int kRefineAttributeUpFieldNumber = 11;
  inline ::google::protobuf::int32 refineattributeup() const;
  inline void set_refineattributeup(::google::protobuf::int32 value);

  // optional string refineAttribute_typeLibrary = 12;
  inline bool has_refineattribute_typelibrary() const;
  inline void clear_refineattribute_typelibrary();
  static const int kRefineAttributeTypeLibraryFieldNumber = 12;
  inline const ::std::string& refineattribute_typelibrary() const;
  inline void set_refineattribute_typelibrary(const ::std::string& value);
  inline void set_refineattribute_typelibrary(const char* value);
  inline void set_refineattribute_typelibrary(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_typelibrary();
  inline ::std::string* release_refineattribute_typelibrary();
  inline void set_allocated_refineattribute_typelibrary(::std::string* refineattribute_typelibrary);

  // optional string refineAttribute_valueMin = 13;
  inline bool has_refineattribute_valuemin() const;
  inline void clear_refineattribute_valuemin();
  static const int kRefineAttributeValueMinFieldNumber = 13;
  inline const ::std::string& refineattribute_valuemin() const;
  inline void set_refineattribute_valuemin(const ::std::string& value);
  inline void set_refineattribute_valuemin(const char* value);
  inline void set_refineattribute_valuemin(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_valuemin();
  inline ::std::string* release_refineattribute_valuemin();
  inline void set_allocated_refineattribute_valuemin(::std::string* refineattribute_valuemin);

  // optional string refineAttribute_valueMax = 14;
  inline bool has_refineattribute_valuemax() const;
  inline void clear_refineattribute_valuemax();
  static const int kRefineAttributeValueMaxFieldNumber = 14;
  inline const ::std::string& refineattribute_valuemax() const;
  inline void set_refineattribute_valuemax(const ::std::string& value);
  inline void set_refineattribute_valuemax(const char* value);
  inline void set_refineattribute_valuemax(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_valuemax();
  inline ::std::string* release_refineattribute_valuemax();
  inline void set_allocated_refineattribute_valuemax(::std::string* refineattribute_valuemax);

  // optional int32 blueStarNum = 15;
  inline bool has_bluestarnum() const;
  inline void clear_bluestarnum();
  static const int kBlueStarNumFieldNumber = 15;
  inline ::google::protobuf::int32 bluestarnum() const;
  inline void set_bluestarnum(::google::protobuf::int32 value);

  // optional string blueStar_type = 16;
  inline bool has_bluestar_type() const;
  inline void clear_bluestar_type();
  static const int kBlueStarTypeFieldNumber = 16;
  inline const ::std::string& bluestar_type() const;
  inline void set_bluestar_type(const ::std::string& value);
  inline void set_bluestar_type(const char* value);
  inline void set_bluestar_type(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_type();
  inline ::std::string* release_bluestar_type();
  inline void set_allocated_bluestar_type(::std::string* bluestar_type);

  // optional string blueStar_lv = 17;
  inline bool has_bluestar_lv() const;
  inline void clear_bluestar_lv();
  static const int kBlueStarLvFieldNumber = 17;
  inline const ::std::string& bluestar_lv() const;
  inline void set_bluestar_lv(const ::std::string& value);
  inline void set_bluestar_lv(const char* value);
  inline void set_bluestar_lv(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_lv();
  inline ::std::string* release_bluestar_lv();
  inline void set_allocated_bluestar_lv(::std::string* bluestar_lv);

  // optional string blueStar_number = 18;
  inline bool has_bluestar_number() const;
  inline void clear_bluestar_number();
  static const int kBlueStarNumberFieldNumber = 18;
  inline const ::std::string& bluestar_number() const;
  inline void set_bluestar_number(const ::std::string& value);
  inline void set_bluestar_number(const char* value);
  inline void set_bluestar_number(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_number();
  inline ::std::string* release_bluestar_number();
  inline void set_allocated_bluestar_number(::std::string* bluestar_number);

  // optional int32 isCanbind = 19;
  inline bool has_iscanbind() const;
  inline void clear_iscanbind();
  static const int kIsCanbindFieldNumber = 19;
  inline ::google::protobuf::int32 iscanbind() const;
  inline void set_iscanbind(::google::protobuf::int32 value);

  // optional int32 isTradeBind = 20;
  inline bool has_istradebind() const;
  inline void clear_istradebind();
  static const int kIsTradeBindFieldNumber = 20;
  inline ::google::protobuf::int32 istradebind() const;
  inline void set_istradebind(::google::protobuf::int32 value);

  // optional int32 sellPrice = 21;
  inline bool has_sellprice() const;
  inline void clear_sellprice();
  static const int kSellPriceFieldNumber = 21;
  inline ::google::protobuf::int32 sellprice() const;
  inline void set_sellprice(::google::protobuf::int32 value);

  // optional string icon = 22;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 22;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 time = 23;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 23;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 Combat = 24;
  inline bool has_combat() const;
  inline void clear_combat();
  static const int kCombatFieldNumber = 24;
  inline ::google::protobuf::int32 combat() const;
  inline void set_combat(::google::protobuf::int32 value);

  // optional int32 broadcast = 25;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 25;
  inline ::google::protobuf::int32 broadcast() const;
  inline void set_broadcast(::google::protobuf::int32 value);

  // optional string meltingResult = 26;
  inline bool has_meltingresult() const;
  inline void clear_meltingresult();
  static const int kMeltingResultFieldNumber = 26;
  inline const ::std::string& meltingresult() const;
  inline void set_meltingresult(const ::std::string& value);
  inline void set_meltingresult(const char* value);
  inline void set_meltingresult(const char* value, size_t size);
  inline ::std::string* mutable_meltingresult();
  inline ::std::string* release_meltingresult();
  inline void set_allocated_meltingresult(::std::string* meltingresult);

  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 27;
  inline const ::proto_ff::equipequipattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipequipattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipequipattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.equipequip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_professionlv();
  inline void clear_has_professionlv();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_refineattributedown();
  inline void clear_has_refineattributedown();
  inline void set_has_refineattributeup();
  inline void clear_has_refineattributeup();
  inline void set_has_refineattribute_typelibrary();
  inline void clear_has_refineattribute_typelibrary();
  inline void set_has_refineattribute_valuemin();
  inline void clear_has_refineattribute_valuemin();
  inline void set_has_refineattribute_valuemax();
  inline void clear_has_refineattribute_valuemax();
  inline void set_has_bluestarnum();
  inline void clear_has_bluestarnum();
  inline void set_has_bluestar_type();
  inline void clear_has_bluestar_type();
  inline void set_has_bluestar_lv();
  inline void clear_has_bluestar_lv();
  inline void set_has_bluestar_number();
  inline void clear_has_bluestar_number();
  inline void set_has_iscanbind();
  inline void clear_has_iscanbind();
  inline void set_has_istradebind();
  inline void clear_has_istradebind();
  inline void set_has_sellprice();
  inline void clear_has_sellprice();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_combat();
  inline void clear_has_combat();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_meltingresult();
  inline void clear_has_meltingresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::int32 position_;
  ::std::string* profession_;
  ::google::protobuf::int32 professionlv_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 refineattributedown_;
  ::google::protobuf::int32 refineattributeup_;
  ::std::string* refineattribute_typelibrary_;
  ::std::string* refineattribute_valuemin_;
  ::std::string* refineattribute_valuemax_;
  ::std::string* bluestar_type_;
  ::std::string* bluestar_lv_;
  ::google::protobuf::int32 bluestarnum_;
  ::google::protobuf::int32 iscanbind_;
  ::std::string* bluestar_number_;
  ::google::protobuf::int32 istradebind_;
  ::google::protobuf::int32 sellprice_;
  ::std::string* icon_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 combat_;
  ::std::string* meltingresult_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc > attribute_;
  ::google::protobuf::int32 broadcast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequip* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipequip : public ::google::protobuf::Message {
 public:
  Sheet_equipequip();
  virtual ~Sheet_equipequip();

  Sheet_equipequip(const Sheet_equipequip& from);

  inline Sheet_equipequip& operator=(const Sheet_equipequip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipequip& default_instance();

  void Swap(Sheet_equipequip* other);

  // implements Message ----------------------------------------------

  Sheet_equipequip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipequip& from);
  void MergeFrom(const Sheet_equipequip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipequip equipequip_List = 1;
  inline int equipequip_list_size() const;
  inline void clear_equipequip_list();
  static const int kEquipequipListFieldNumber = 1;
  inline const ::proto_ff::equipequip& equipequip_list(int index) const;
  inline ::proto_ff::equipequip* mutable_equipequip_list(int index);
  inline ::proto_ff::equipequip* add_equipequip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >&
      equipequip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >*
      mutable_equipequip_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipequip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip > equipequip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipequip* default_instance_;
};
// ===================================================================


// ===================================================================

// equipequipattributeDesc

// optional int32 valueMin = 1;
inline bool equipequipattributeDesc::has_valuemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequipattributeDesc::set_has_valuemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequipattributeDesc::clear_has_valuemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequipattributeDesc::clear_valuemin() {
  valuemin_ = 0;
  clear_has_valuemin();
}
inline ::google::protobuf::int32 equipequipattributeDesc::valuemin() const {
  return valuemin_;
}
inline void equipequipattributeDesc::set_valuemin(::google::protobuf::int32 value) {
  set_has_valuemin();
  valuemin_ = value;
}

// optional int32 type = 2;
inline bool equipequipattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequipattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequipattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequipattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipequipattributeDesc::type() const {
  return type_;
}
inline void equipequipattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 valueMax = 3;
inline bool equipequipattributeDesc::has_valuemax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequipattributeDesc::set_has_valuemax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequipattributeDesc::clear_has_valuemax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequipattributeDesc::clear_valuemax() {
  valuemax_ = 0;
  clear_has_valuemax();
}
inline ::google::protobuf::int32 equipequipattributeDesc::valuemax() const {
  return valuemax_;
}
inline void equipequipattributeDesc::set_valuemax(::google::protobuf::int32 value) {
  set_has_valuemax();
  valuemax_ = value;
}

// -------------------------------------------------------------------

// equipequip

// optional int64 id = 1;
inline bool equipequip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequip::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipequip::id() const {
  return id_;
}
inline void equipequip::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool equipequip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& equipequip::name() const {
  return *name_;
}
inline void equipequip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void equipequip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void equipequip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* equipequip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wearQuality = 3;
inline bool equipequip::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequip::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequip::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequip::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipequip::wearquality() const {
  return wearquality_;
}
inline void equipequip::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 position = 4;
inline bool equipequip::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipequip::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipequip::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipequip::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipequip::position() const {
  return position_;
}
inline void equipequip::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional string profession = 5;
inline bool equipequip::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipequip::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipequip::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipequip::clear_profession() {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    profession_->clear();
  }
  clear_has_profession();
}
inline const ::std::string& equipequip::profession() const {
  return *profession_;
}
inline void equipequip::set_profession(const ::std::string& value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipequip::set_profession(const char* value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipequip::set_profession(const char* value, size_t size) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_profession() {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  return profession_;
}
inline ::std::string* equipequip::release_profession() {
  clear_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profession_;
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_profession(::std::string* profession) {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (profession) {
    set_has_profession();
    profession_ = profession;
  } else {
    clear_has_profession();
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 professionLv = 6;
inline bool equipequip::has_professionlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipequip::set_has_professionlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipequip::clear_has_professionlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipequip::clear_professionlv() {
  professionlv_ = 0;
  clear_has_professionlv();
}
inline ::google::protobuf::int32 equipequip::professionlv() const {
  return professionlv_;
}
inline void equipequip::set_professionlv(::google::protobuf::int32 value) {
  set_has_professionlv();
  professionlv_ = value;
}

// optional int32 level = 7;
inline bool equipequip::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void equipequip::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void equipequip::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void equipequip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 equipequip::level() const {
  return level_;
}
inline void equipequip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 quality = 8;
inline bool equipequip::has_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void equipequip::set_has_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void equipequip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void equipequip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 equipequip::quality() const {
  return quality_;
}
inline void equipequip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 star = 9;
inline bool equipequip::has_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void equipequip::set_has_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void equipequip::clear_has_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void equipequip::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 equipequip::star() const {
  return star_;
}
inline void equipequip::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 refineAttributeDown = 10;
inline bool equipequip::has_refineattributedown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void equipequip::set_has_refineattributedown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void equipequip::clear_has_refineattributedown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void equipequip::clear_refineattributedown() {
  refineattributedown_ = 0;
  clear_has_refineattributedown();
}
inline ::google::protobuf::int32 equipequip::refineattributedown() const {
  return refineattributedown_;
}
inline void equipequip::set_refineattributedown(::google::protobuf::int32 value) {
  set_has_refineattributedown();
  refineattributedown_ = value;
}

// optional int32 refineAttributeUp = 11;
inline bool equipequip::has_refineattributeup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void equipequip::set_has_refineattributeup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void equipequip::clear_has_refineattributeup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void equipequip::clear_refineattributeup() {
  refineattributeup_ = 0;
  clear_has_refineattributeup();
}
inline ::google::protobuf::int32 equipequip::refineattributeup() const {
  return refineattributeup_;
}
inline void equipequip::set_refineattributeup(::google::protobuf::int32 value) {
  set_has_refineattributeup();
  refineattributeup_ = value;
}

// optional string refineAttribute_typeLibrary = 12;
inline bool equipequip::has_refineattribute_typelibrary() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void equipequip::set_has_refineattribute_typelibrary() {
  _has_bits_[0] |= 0x00000800u;
}
inline void equipequip::clear_has_refineattribute_typelibrary() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void equipequip::clear_refineattribute_typelibrary() {
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_->clear();
  }
  clear_has_refineattribute_typelibrary();
}
inline const ::std::string& equipequip::refineattribute_typelibrary() const {
  return *refineattribute_typelibrary_;
}
inline void equipequip::set_refineattribute_typelibrary(const ::std::string& value) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(value);
}
inline void equipequip::set_refineattribute_typelibrary(const char* value) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(value);
}
inline void equipequip::set_refineattribute_typelibrary(const char* value, size_t size) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_typelibrary() {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  return refineattribute_typelibrary_;
}
inline ::std::string* equipequip::release_refineattribute_typelibrary() {
  clear_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_typelibrary_;
    refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_typelibrary(::std::string* refineattribute_typelibrary) {
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_typelibrary_;
  }
  if (refineattribute_typelibrary) {
    set_has_refineattribute_typelibrary();
    refineattribute_typelibrary_ = refineattribute_typelibrary;
  } else {
    clear_has_refineattribute_typelibrary();
    refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refineAttribute_valueMin = 13;
inline bool equipequip::has_refineattribute_valuemin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void equipequip::set_has_refineattribute_valuemin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void equipequip::clear_has_refineattribute_valuemin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void equipequip::clear_refineattribute_valuemin() {
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_->clear();
  }
  clear_has_refineattribute_valuemin();
}
inline const ::std::string& equipequip::refineattribute_valuemin() const {
  return *refineattribute_valuemin_;
}
inline void equipequip::set_refineattribute_valuemin(const ::std::string& value) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(value);
}
inline void equipequip::set_refineattribute_valuemin(const char* value) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(value);
}
inline void equipequip::set_refineattribute_valuemin(const char* value, size_t size) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_valuemin() {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  return refineattribute_valuemin_;
}
inline ::std::string* equipequip::release_refineattribute_valuemin() {
  clear_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_valuemin_;
    refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_valuemin(::std::string* refineattribute_valuemin) {
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemin_;
  }
  if (refineattribute_valuemin) {
    set_has_refineattribute_valuemin();
    refineattribute_valuemin_ = refineattribute_valuemin;
  } else {
    clear_has_refineattribute_valuemin();
    refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refineAttribute_valueMax = 14;
inline bool equipequip::has_refineattribute_valuemax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void equipequip::set_has_refineattribute_valuemax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void equipequip::clear_has_refineattribute_valuemax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void equipequip::clear_refineattribute_valuemax() {
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_->clear();
  }
  clear_has_refineattribute_valuemax();
}
inline const ::std::string& equipequip::refineattribute_valuemax() const {
  return *refineattribute_valuemax_;
}
inline void equipequip::set_refineattribute_valuemax(const ::std::string& value) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(value);
}
inline void equipequip::set_refineattribute_valuemax(const char* value) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(value);
}
inline void equipequip::set_refineattribute_valuemax(const char* value, size_t size) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_valuemax() {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  return refineattribute_valuemax_;
}
inline ::std::string* equipequip::release_refineattribute_valuemax() {
  clear_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_valuemax_;
    refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_valuemax(::std::string* refineattribute_valuemax) {
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemax_;
  }
  if (refineattribute_valuemax) {
    set_has_refineattribute_valuemax();
    refineattribute_valuemax_ = refineattribute_valuemax;
  } else {
    clear_has_refineattribute_valuemax();
    refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 blueStarNum = 15;
inline bool equipequip::has_bluestarnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void equipequip::set_has_bluestarnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void equipequip::clear_has_bluestarnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void equipequip::clear_bluestarnum() {
  bluestarnum_ = 0;
  clear_has_bluestarnum();
}
inline ::google::protobuf::int32 equipequip::bluestarnum() const {
  return bluestarnum_;
}
inline void equipequip::set_bluestarnum(::google::protobuf::int32 value) {
  set_has_bluestarnum();
  bluestarnum_ = value;
}

// optional string blueStar_type = 16;
inline bool equipequip::has_bluestar_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void equipequip::set_has_bluestar_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void equipequip::clear_has_bluestar_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void equipequip::clear_bluestar_type() {
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_type_->clear();
  }
  clear_has_bluestar_type();
}
inline const ::std::string& equipequip::bluestar_type() const {
  return *bluestar_type_;
}
inline void equipequip::set_bluestar_type(const ::std::string& value) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(value);
}
inline void equipequip::set_bluestar_type(const char* value) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(value);
}
inline void equipequip::set_bluestar_type(const char* value, size_t size) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_type() {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  return bluestar_type_;
}
inline ::std::string* equipequip::release_bluestar_type() {
  clear_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_type_;
    bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_type(::std::string* bluestar_type) {
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_type) {
    set_has_bluestar_type();
    bluestar_type_ = bluestar_type;
  } else {
    clear_has_bluestar_type();
    bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string blueStar_lv = 17;
inline bool equipequip::has_bluestar_lv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void equipequip::set_has_bluestar_lv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void equipequip::clear_has_bluestar_lv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void equipequip::clear_bluestar_lv() {
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_->clear();
  }
  clear_has_bluestar_lv();
}
inline const ::std::string& equipequip::bluestar_lv() const {
  return *bluestar_lv_;
}
inline void equipequip::set_bluestar_lv(const ::std::string& value) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(value);
}
inline void equipequip::set_bluestar_lv(const char* value) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(value);
}
inline void equipequip::set_bluestar_lv(const char* value, size_t size) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_lv() {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  return bluestar_lv_;
}
inline ::std::string* equipequip::release_bluestar_lv() {
  clear_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_lv_;
    bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_lv(::std::string* bluestar_lv) {
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_lv_;
  }
  if (bluestar_lv) {
    set_has_bluestar_lv();
    bluestar_lv_ = bluestar_lv;
  } else {
    clear_has_bluestar_lv();
    bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string blueStar_number = 18;
inline bool equipequip::has_bluestar_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void equipequip::set_has_bluestar_number() {
  _has_bits_[0] |= 0x00020000u;
}
inline void equipequip::clear_has_bluestar_number() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void equipequip::clear_bluestar_number() {
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_number_->clear();
  }
  clear_has_bluestar_number();
}
inline const ::std::string& equipequip::bluestar_number() const {
  return *bluestar_number_;
}
inline void equipequip::set_bluestar_number(const ::std::string& value) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(value);
}
inline void equipequip::set_bluestar_number(const char* value) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(value);
}
inline void equipequip::set_bluestar_number(const char* value, size_t size) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_number() {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  return bluestar_number_;
}
inline ::std::string* equipequip::release_bluestar_number() {
  clear_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_number_;
    bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_number(::std::string* bluestar_number) {
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_number_;
  }
  if (bluestar_number) {
    set_has_bluestar_number();
    bluestar_number_ = bluestar_number;
  } else {
    clear_has_bluestar_number();
    bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isCanbind = 19;
inline bool equipequip::has_iscanbind() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void equipequip::set_has_iscanbind() {
  _has_bits_[0] |= 0x00040000u;
}
inline void equipequip::clear_has_iscanbind() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void equipequip::clear_iscanbind() {
  iscanbind_ = 0;
  clear_has_iscanbind();
}
inline ::google::protobuf::int32 equipequip::iscanbind() const {
  return iscanbind_;
}
inline void equipequip::set_iscanbind(::google::protobuf::int32 value) {
  set_has_iscanbind();
  iscanbind_ = value;
}

// optional int32 isTradeBind = 20;
inline bool equipequip::has_istradebind() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void equipequip::set_has_istradebind() {
  _has_bits_[0] |= 0x00080000u;
}
inline void equipequip::clear_has_istradebind() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void equipequip::clear_istradebind() {
  istradebind_ = 0;
  clear_has_istradebind();
}
inline ::google::protobuf::int32 equipequip::istradebind() const {
  return istradebind_;
}
inline void equipequip::set_istradebind(::google::protobuf::int32 value) {
  set_has_istradebind();
  istradebind_ = value;
}

// optional int32 sellPrice = 21;
inline bool equipequip::has_sellprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void equipequip::set_has_sellprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void equipequip::clear_has_sellprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void equipequip::clear_sellprice() {
  sellprice_ = 0;
  clear_has_sellprice();
}
inline ::google::protobuf::int32 equipequip::sellprice() const {
  return sellprice_;
}
inline void equipequip::set_sellprice(::google::protobuf::int32 value) {
  set_has_sellprice();
  sellprice_ = value;
}

// optional string icon = 22;
inline bool equipequip::has_icon() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void equipequip::set_has_icon() {
  _has_bits_[0] |= 0x00200000u;
}
inline void equipequip::clear_has_icon() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void equipequip::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& equipequip::icon() const {
  return *icon_;
}
inline void equipequip::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void equipequip::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void equipequip::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* equipequip::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 23;
inline bool equipequip::has_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void equipequip::set_has_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void equipequip::clear_has_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void equipequip::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 equipequip::time() const {
  return time_;
}
inline void equipequip::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 Combat = 24;
inline bool equipequip::has_combat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void equipequip::set_has_combat() {
  _has_bits_[0] |= 0x00800000u;
}
inline void equipequip::clear_has_combat() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void equipequip::clear_combat() {
  combat_ = 0;
  clear_has_combat();
}
inline ::google::protobuf::int32 equipequip::combat() const {
  return combat_;
}
inline void equipequip::set_combat(::google::protobuf::int32 value) {
  set_has_combat();
  combat_ = value;
}

// optional int32 broadcast = 25;
inline bool equipequip::has_broadcast() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void equipequip::set_has_broadcast() {
  _has_bits_[0] |= 0x01000000u;
}
inline void equipequip::clear_has_broadcast() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void equipequip::clear_broadcast() {
  broadcast_ = 0;
  clear_has_broadcast();
}
inline ::google::protobuf::int32 equipequip::broadcast() const {
  return broadcast_;
}
inline void equipequip::set_broadcast(::google::protobuf::int32 value) {
  set_has_broadcast();
  broadcast_ = value;
}

// optional string meltingResult = 26;
inline bool equipequip::has_meltingresult() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void equipequip::set_has_meltingresult() {
  _has_bits_[0] |= 0x02000000u;
}
inline void equipequip::clear_has_meltingresult() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void equipequip::clear_meltingresult() {
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    meltingresult_->clear();
  }
  clear_has_meltingresult();
}
inline const ::std::string& equipequip::meltingresult() const {
  return *meltingresult_;
}
inline void equipequip::set_meltingresult(const ::std::string& value) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(value);
}
inline void equipequip::set_meltingresult(const char* value) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(value);
}
inline void equipequip::set_meltingresult(const char* value, size_t size) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_meltingresult() {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  return meltingresult_;
}
inline ::std::string* equipequip::release_meltingresult() {
  clear_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meltingresult_;
    meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_meltingresult(::std::string* meltingresult) {
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    delete meltingresult_;
  }
  if (meltingresult) {
    set_has_meltingresult();
    meltingresult_ = meltingresult;
  } else {
    clear_has_meltingresult();
    meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.equipequipattributeDesc attribute = 27;
inline int equipequip::attribute_size() const {
  return attribute_.size();
}
inline void equipequip::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipequipattributeDesc& equipequip::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipequipattributeDesc* equipequip::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipequipattributeDesc* equipequip::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >&
equipequip::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >*
equipequip::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_equipequip

// repeated .proto_ff.equipequip equipequip_List = 1;
inline int Sheet_equipequip::equipequip_list_size() const {
  return equipequip_list_.size();
}
inline void Sheet_equipequip::clear_equipequip_list() {
  equipequip_list_.Clear();
}
inline const ::proto_ff::equipequip& Sheet_equipequip::equipequip_list(int index) const {
  return equipequip_list_.Get(index);
}
inline ::proto_ff::equipequip* Sheet_equipequip::mutable_equipequip_list(int index) {
  return equipequip_list_.Mutable(index);
}
inline ::proto_ff::equipequip* Sheet_equipequip::add_equipequip_list() {
  return equipequip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >&
Sheet_equipequip::equipequip_list() const {
  return equipequip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >*
Sheet_equipequip::mutable_equipequip_list() {
  return &equipequip_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_equip_2eproto__INCLUDED
