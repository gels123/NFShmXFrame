// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.proto

#ifndef PROTOBUF_equip_2eproto__INCLUDED
#define PROTOBUF_equip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_equip_2eproto();
void protobuf_AssignDesc_equip_2eproto();
void protobuf_ShutdownFile_equip_2eproto();

class equipequipattributeDesc;
class equipequip;
class Sheet_equipequip;
class equipstrongtypeDesc;
class equipstrong;
class Sheet_equipstrong;
class equipgemfinedateDesc;
class equipgemfine;
class Sheet_equipgemfine;
class equipgem;
class Sheet_equipgem;
class equipatt;
class Sheet_equipatt;
class equipsuitattributeDesc;
class equipsuit;
class Sheet_equipsuit;
class equipclear;
class Sheet_equipclear;
class equipstrongexp;
class Sheet_equipstrongexp;
class equipgemfineexp;
class Sheet_equipgemfineexp;
class equipclearteamSectionDesc;
class equipclearteam;
class Sheet_equipclearteam;
class equipawakeningawakenDesc;
class equipawakening;
class Sheet_equipawakening;
class equipenchantingtypeDesc;
class equipenchantingenchantDesc;
class equipenchanting;
class Sheet_equipenchanting;
class equipmarryattributeDesc;
class equipmarry;
class Sheet_equipmarry;

// ===================================================================

class equipequipattributeDesc : public ::google::protobuf::Message {
 public:
  equipequipattributeDesc();
  virtual ~equipequipattributeDesc();

  equipequipattributeDesc(const equipequipattributeDesc& from);

  inline equipequipattributeDesc& operator=(const equipequipattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequipattributeDesc& default_instance();

  void Swap(equipequipattributeDesc* other);

  // implements Message ----------------------------------------------

  equipequipattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequipattributeDesc& from);
  void MergeFrom(const equipequipattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 valueMin = 1;
  inline bool has_valuemin() const;
  inline void clear_valuemin();
  static const int kValueMinFieldNumber = 1;
  inline ::google::protobuf::int32 valuemin() const;
  inline void set_valuemin(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 valueMax = 3;
  inline bool has_valuemax() const;
  inline void clear_valuemax();
  static const int kValueMaxFieldNumber = 3;
  inline ::google::protobuf::int32 valuemax() const;
  inline void set_valuemax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipequipattributeDesc)
 private:
  inline void set_has_valuemin();
  inline void clear_has_valuemin();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_valuemax();
  inline void clear_has_valuemax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 valuemin_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 valuemax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequipattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipequip : public ::google::protobuf::Message {
 public:
  equipequip();
  virtual ~equipequip();

  equipequip(const equipequip& from);

  inline equipequip& operator=(const equipequip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipequip& default_instance();

  void Swap(equipequip* other);

  // implements Message ----------------------------------------------

  equipequip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipequip& from);
  void MergeFrom(const equipequip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline const ::std::string& profession() const;
  inline void set_profession(const ::std::string& value);
  inline void set_profession(const char* value);
  inline void set_profession(const char* value, size_t size);
  inline ::std::string* mutable_profession();
  inline ::std::string* release_profession();
  inline void set_allocated_profession(::std::string* profession);

  // optional int32 professionLv = 6;
  inline bool has_professionlv() const;
  inline void clear_professionlv();
  static const int kProfessionLvFieldNumber = 6;
  inline ::google::protobuf::int32 professionlv() const;
  inline void set_professionlv(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 quality = 8;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 8;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 star = 9;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 9;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 refineAttributeDown = 10;
  inline bool has_refineattributedown() const;
  inline void clear_refineattributedown();
  static const int kRefineAttributeDownFieldNumber = 10;
  inline ::google::protobuf::int32 refineattributedown() const;
  inline void set_refineattributedown(::google::protobuf::int32 value);

  // optional int32 refineAttributeUp = 11;
  inline bool has_refineattributeup() const;
  inline void clear_refineattributeup();
  static const int kRefineAttributeUpFieldNumber = 11;
  inline ::google::protobuf::int32 refineattributeup() const;
  inline void set_refineattributeup(::google::protobuf::int32 value);

  // optional string refineAttribute_typeLibrary = 12;
  inline bool has_refineattribute_typelibrary() const;
  inline void clear_refineattribute_typelibrary();
  static const int kRefineAttributeTypeLibraryFieldNumber = 12;
  inline const ::std::string& refineattribute_typelibrary() const;
  inline void set_refineattribute_typelibrary(const ::std::string& value);
  inline void set_refineattribute_typelibrary(const char* value);
  inline void set_refineattribute_typelibrary(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_typelibrary();
  inline ::std::string* release_refineattribute_typelibrary();
  inline void set_allocated_refineattribute_typelibrary(::std::string* refineattribute_typelibrary);

  // optional string refineAttribute_valueMin = 13;
  inline bool has_refineattribute_valuemin() const;
  inline void clear_refineattribute_valuemin();
  static const int kRefineAttributeValueMinFieldNumber = 13;
  inline const ::std::string& refineattribute_valuemin() const;
  inline void set_refineattribute_valuemin(const ::std::string& value);
  inline void set_refineattribute_valuemin(const char* value);
  inline void set_refineattribute_valuemin(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_valuemin();
  inline ::std::string* release_refineattribute_valuemin();
  inline void set_allocated_refineattribute_valuemin(::std::string* refineattribute_valuemin);

  // optional string refineAttribute_valueMax = 14;
  inline bool has_refineattribute_valuemax() const;
  inline void clear_refineattribute_valuemax();
  static const int kRefineAttributeValueMaxFieldNumber = 14;
  inline const ::std::string& refineattribute_valuemax() const;
  inline void set_refineattribute_valuemax(const ::std::string& value);
  inline void set_refineattribute_valuemax(const char* value);
  inline void set_refineattribute_valuemax(const char* value, size_t size);
  inline ::std::string* mutable_refineattribute_valuemax();
  inline ::std::string* release_refineattribute_valuemax();
  inline void set_allocated_refineattribute_valuemax(::std::string* refineattribute_valuemax);

  // optional int32 blueStarNum = 15;
  inline bool has_bluestarnum() const;
  inline void clear_bluestarnum();
  static const int kBlueStarNumFieldNumber = 15;
  inline ::google::protobuf::int32 bluestarnum() const;
  inline void set_bluestarnum(::google::protobuf::int32 value);

  // optional string blueStar_type = 16;
  inline bool has_bluestar_type() const;
  inline void clear_bluestar_type();
  static const int kBlueStarTypeFieldNumber = 16;
  inline const ::std::string& bluestar_type() const;
  inline void set_bluestar_type(const ::std::string& value);
  inline void set_bluestar_type(const char* value);
  inline void set_bluestar_type(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_type();
  inline ::std::string* release_bluestar_type();
  inline void set_allocated_bluestar_type(::std::string* bluestar_type);

  // optional string blueStar_lv = 17;
  inline bool has_bluestar_lv() const;
  inline void clear_bluestar_lv();
  static const int kBlueStarLvFieldNumber = 17;
  inline const ::std::string& bluestar_lv() const;
  inline void set_bluestar_lv(const ::std::string& value);
  inline void set_bluestar_lv(const char* value);
  inline void set_bluestar_lv(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_lv();
  inline ::std::string* release_bluestar_lv();
  inline void set_allocated_bluestar_lv(::std::string* bluestar_lv);

  // optional string blueStar_number = 18;
  inline bool has_bluestar_number() const;
  inline void clear_bluestar_number();
  static const int kBlueStarNumberFieldNumber = 18;
  inline const ::std::string& bluestar_number() const;
  inline void set_bluestar_number(const ::std::string& value);
  inline void set_bluestar_number(const char* value);
  inline void set_bluestar_number(const char* value, size_t size);
  inline ::std::string* mutable_bluestar_number();
  inline ::std::string* release_bluestar_number();
  inline void set_allocated_bluestar_number(::std::string* bluestar_number);

  // optional int32 isCanbind = 19;
  inline bool has_iscanbind() const;
  inline void clear_iscanbind();
  static const int kIsCanbindFieldNumber = 19;
  inline ::google::protobuf::int32 iscanbind() const;
  inline void set_iscanbind(::google::protobuf::int32 value);

  // optional int32 isTradeBind = 20;
  inline bool has_istradebind() const;
  inline void clear_istradebind();
  static const int kIsTradeBindFieldNumber = 20;
  inline ::google::protobuf::int32 istradebind() const;
  inline void set_istradebind(::google::protobuf::int32 value);

  // optional int32 sellPrice = 21;
  inline bool has_sellprice() const;
  inline void clear_sellprice();
  static const int kSellPriceFieldNumber = 21;
  inline ::google::protobuf::int32 sellprice() const;
  inline void set_sellprice(::google::protobuf::int32 value);

  // optional string icon = 22;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 22;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 time = 23;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 23;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 Combat = 24;
  inline bool has_combat() const;
  inline void clear_combat();
  static const int kCombatFieldNumber = 24;
  inline ::google::protobuf::int32 combat() const;
  inline void set_combat(::google::protobuf::int32 value);

  // optional int32 broadcast = 25;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 25;
  inline ::google::protobuf::int32 broadcast() const;
  inline void set_broadcast(::google::protobuf::int32 value);

  // optional string meltingResult = 26;
  inline bool has_meltingresult() const;
  inline void clear_meltingresult();
  static const int kMeltingResultFieldNumber = 26;
  inline const ::std::string& meltingresult() const;
  inline void set_meltingresult(const ::std::string& value);
  inline void set_meltingresult(const char* value);
  inline void set_meltingresult(const char* value, size_t size);
  inline ::std::string* mutable_meltingresult();
  inline ::std::string* release_meltingresult();
  inline void set_allocated_meltingresult(::std::string* meltingresult);

  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 27;
  inline const ::proto_ff::equipequipattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipequipattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipequipattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.equipequip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_professionlv();
  inline void clear_has_professionlv();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_refineattributedown();
  inline void clear_has_refineattributedown();
  inline void set_has_refineattributeup();
  inline void clear_has_refineattributeup();
  inline void set_has_refineattribute_typelibrary();
  inline void clear_has_refineattribute_typelibrary();
  inline void set_has_refineattribute_valuemin();
  inline void clear_has_refineattribute_valuemin();
  inline void set_has_refineattribute_valuemax();
  inline void clear_has_refineattribute_valuemax();
  inline void set_has_bluestarnum();
  inline void clear_has_bluestarnum();
  inline void set_has_bluestar_type();
  inline void clear_has_bluestar_type();
  inline void set_has_bluestar_lv();
  inline void clear_has_bluestar_lv();
  inline void set_has_bluestar_number();
  inline void clear_has_bluestar_number();
  inline void set_has_iscanbind();
  inline void clear_has_iscanbind();
  inline void set_has_istradebind();
  inline void clear_has_istradebind();
  inline void set_has_sellprice();
  inline void clear_has_sellprice();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_combat();
  inline void clear_has_combat();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_meltingresult();
  inline void clear_has_meltingresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::int32 position_;
  ::std::string* profession_;
  ::google::protobuf::int32 professionlv_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 refineattributedown_;
  ::google::protobuf::int32 refineattributeup_;
  ::std::string* refineattribute_typelibrary_;
  ::std::string* refineattribute_valuemin_;
  ::std::string* refineattribute_valuemax_;
  ::std::string* bluestar_type_;
  ::std::string* bluestar_lv_;
  ::google::protobuf::int32 bluestarnum_;
  ::google::protobuf::int32 iscanbind_;
  ::std::string* bluestar_number_;
  ::google::protobuf::int32 istradebind_;
  ::google::protobuf::int32 sellprice_;
  ::std::string* icon_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 combat_;
  ::std::string* meltingresult_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc > attribute_;
  ::google::protobuf::int32 broadcast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipequip* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipequip : public ::google::protobuf::Message {
 public:
  Sheet_equipequip();
  virtual ~Sheet_equipequip();

  Sheet_equipequip(const Sheet_equipequip& from);

  inline Sheet_equipequip& operator=(const Sheet_equipequip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipequip& default_instance();

  void Swap(Sheet_equipequip* other);

  // implements Message ----------------------------------------------

  Sheet_equipequip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipequip& from);
  void MergeFrom(const Sheet_equipequip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipequip equipequip_List = 1;
  inline int equipequip_list_size() const;
  inline void clear_equipequip_list();
  static const int kEquipequipListFieldNumber = 1;
  inline const ::proto_ff::equipequip& equipequip_list(int index) const;
  inline ::proto_ff::equipequip* mutable_equipequip_list(int index);
  inline ::proto_ff::equipequip* add_equipequip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >&
      equipequip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >*
      mutable_equipequip_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipequip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip > equipequip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipequip* default_instance_;
};
// -------------------------------------------------------------------

class equipstrongtypeDesc : public ::google::protobuf::Message {
 public:
  equipstrongtypeDesc();
  virtual ~equipstrongtypeDesc();

  equipstrongtypeDesc(const equipstrongtypeDesc& from);

  inline equipstrongtypeDesc& operator=(const equipstrongtypeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrongtypeDesc& default_instance();

  void Swap(equipstrongtypeDesc* other);

  // implements Message ----------------------------------------------

  equipstrongtypeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrongtypeDesc& from);
  void MergeFrom(const equipstrongtypeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline const ::std::string& num() const;
  inline void set_num(const ::std::string& value);
  inline void set_num(const char* value);
  inline void set_num(const char* value, size_t size);
  inline ::std::string* mutable_num();
  inline ::std::string* release_num();
  inline void set_allocated_num(::std::string* num);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrongtypeDesc)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* num_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrongtypeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipstrong : public ::google::protobuf::Message {
 public:
  equipstrong();
  virtual ~equipstrong();

  equipstrong(const equipstrong& from);

  inline equipstrong& operator=(const equipstrong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrong& default_instance();

  void Swap(equipstrong* other);

  // implements Message ----------------------------------------------

  equipstrong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrong& from);
  void MergeFrom(const equipstrong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 srtongUp = 4;
  inline bool has_srtongup() const;
  inline void clear_srtongup();
  static const int kSrtongUpFieldNumber = 4;
  inline ::google::protobuf::int32 srtongup() const;
  inline void set_srtongup(::google::protobuf::int32 value);

  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::proto_ff::equipstrongtypeDesc& type(int index) const;
  inline ::proto_ff::equipstrongtypeDesc* mutable_type(int index);
  inline ::proto_ff::equipstrongtypeDesc* add_type();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >&
      type() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >*
      mutable_type();

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrong)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_srtongup();
  inline void clear_has_srtongup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc > type_;
  ::google::protobuf::int32 srtongup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrong* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstrong : public ::google::protobuf::Message {
 public:
  Sheet_equipstrong();
  virtual ~Sheet_equipstrong();

  Sheet_equipstrong(const Sheet_equipstrong& from);

  inline Sheet_equipstrong& operator=(const Sheet_equipstrong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstrong& default_instance();

  void Swap(Sheet_equipstrong* other);

  // implements Message ----------------------------------------------

  Sheet_equipstrong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstrong& from);
  void MergeFrom(const Sheet_equipstrong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  inline int equipstrong_list_size() const;
  inline void clear_equipstrong_list();
  static const int kEquipstrongListFieldNumber = 1;
  inline const ::proto_ff::equipstrong& equipstrong_list(int index) const;
  inline ::proto_ff::equipstrong* mutable_equipstrong_list(int index);
  inline ::proto_ff::equipstrong* add_equipstrong_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >&
      equipstrong_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >*
      mutable_equipstrong_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstrong)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong > equipstrong_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstrong* default_instance_;
};
// -------------------------------------------------------------------

class equipgemfinedateDesc : public ::google::protobuf::Message {
 public:
  equipgemfinedateDesc();
  virtual ~equipgemfinedateDesc();

  equipgemfinedateDesc(const equipgemfinedateDesc& from);

  inline equipgemfinedateDesc& operator=(const equipgemfinedateDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipgemfinedateDesc& default_instance();

  void Swap(equipgemfinedateDesc* other);

  // implements Message ----------------------------------------------

  equipgemfinedateDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipgemfinedateDesc& from);
  void MergeFrom(const equipgemfinedateDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int64 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipgemfinedateDesc)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipgemfinedateDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipgemfine : public ::google::protobuf::Message {
 public:
  equipgemfine();
  virtual ~equipgemfine();

  equipgemfine(const equipgemfine& from);

  inline equipgemfine& operator=(const equipgemfine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipgemfine& default_instance();

  void Swap(equipgemfine* other);

  // implements Message ----------------------------------------------

  equipgemfine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipgemfine& from);
  void MergeFrom(const equipgemfine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 wearQuality = 3;
  inline bool has_wearquality() const;
  inline void clear_wearquality();
  static const int kWearQualityFieldNumber = 3;
  inline ::google::protobuf::int32 wearquality() const;
  inline void set_wearquality(::google::protobuf::int32 value);

  // optional int32 gemUp = 4;
  inline bool has_gemup() const;
  inline void clear_gemup();
  static const int kGemUpFieldNumber = 4;
  inline ::google::protobuf::int32 gemup() const;
  inline void set_gemup(::google::protobuf::int32 value);

  // optional int32 gemNumber = 5;
  inline bool has_gemnumber() const;
  inline void clear_gemnumber();
  static const int kGemNumberFieldNumber = 5;
  inline ::google::protobuf::int32 gemnumber() const;
  inline void set_gemnumber(::google::protobuf::int32 value);

  // repeated .proto_ff.equipgemfinedateDesc date = 6;
  inline int date_size() const;
  inline void clear_date();
  static const int kDateFieldNumber = 6;
  inline const ::proto_ff::equipgemfinedateDesc& date(int index) const;
  inline ::proto_ff::equipgemfinedateDesc* mutable_date(int index);
  inline ::proto_ff::equipgemfinedateDesc* add_date();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfinedateDesc >&
      date() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfinedateDesc >*
      mutable_date();

  // @@protoc_insertion_point(class_scope:proto_ff.equipgemfine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_wearquality();
  inline void clear_has_wearquality();
  inline void set_has_gemup();
  inline void clear_has_gemup();
  inline void set_has_gemnumber();
  inline void clear_has_gemnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 wearquality_;
  ::google::protobuf::int32 gemup_;
  ::google::protobuf::int32 gemnumber_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfinedateDesc > date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipgemfine* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipgemfine : public ::google::protobuf::Message {
 public:
  Sheet_equipgemfine();
  virtual ~Sheet_equipgemfine();

  Sheet_equipgemfine(const Sheet_equipgemfine& from);

  inline Sheet_equipgemfine& operator=(const Sheet_equipgemfine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipgemfine& default_instance();

  void Swap(Sheet_equipgemfine* other);

  // implements Message ----------------------------------------------

  Sheet_equipgemfine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipgemfine& from);
  void MergeFrom(const Sheet_equipgemfine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipgemfine equipgemfine_List = 1;
  inline int equipgemfine_list_size() const;
  inline void clear_equipgemfine_list();
  static const int kEquipgemfineListFieldNumber = 1;
  inline const ::proto_ff::equipgemfine& equipgemfine_list(int index) const;
  inline ::proto_ff::equipgemfine* mutable_equipgemfine_list(int index);
  inline ::proto_ff::equipgemfine* add_equipgemfine_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfine >&
      equipgemfine_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfine >*
      mutable_equipgemfine_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipgemfine)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfine > equipgemfine_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipgemfine* default_instance_;
};
// -------------------------------------------------------------------

class equipgem : public ::google::protobuf::Message {
 public:
  equipgem();
  virtual ~equipgem();

  equipgem(const equipgem& from);

  inline equipgem& operator=(const equipgem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipgem& default_instance();

  void Swap(equipgem* other);

  // implements Message ----------------------------------------------

  equipgem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipgem& from);
  void MergeFrom(const equipgem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 gemType = 2;
  inline bool has_gemtype() const;
  inline void clear_gemtype();
  static const int kGemTypeFieldNumber = 2;
  inline ::google::protobuf::int32 gemtype() const;
  inline void set_gemtype(::google::protobuf::int32 value);

  // optional int32 VipUnlock = 3;
  inline bool has_vipunlock() const;
  inline void clear_vipunlock();
  static const int kVipUnlockFieldNumber = 3;
  inline ::google::protobuf::int32 vipunlock() const;
  inline void set_vipunlock(::google::protobuf::int32 value);

  // repeated int32 gemUnlock = 4;
  inline int gemunlock_size() const;
  inline void clear_gemunlock();
  static const int kGemUnlockFieldNumber = 4;
  inline ::google::protobuf::int32 gemunlock(int index) const;
  inline void set_gemunlock(int index, ::google::protobuf::int32 value);
  inline void add_gemunlock(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gemunlock() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gemunlock();

  // @@protoc_insertion_point(class_scope:proto_ff.equipgem)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_gemtype();
  inline void clear_has_gemtype();
  inline void set_has_vipunlock();
  inline void clear_has_vipunlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 gemtype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gemunlock_;
  ::google::protobuf::int32 vipunlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipgem* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipgem : public ::google::protobuf::Message {
 public:
  Sheet_equipgem();
  virtual ~Sheet_equipgem();

  Sheet_equipgem(const Sheet_equipgem& from);

  inline Sheet_equipgem& operator=(const Sheet_equipgem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipgem& default_instance();

  void Swap(Sheet_equipgem* other);

  // implements Message ----------------------------------------------

  Sheet_equipgem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipgem& from);
  void MergeFrom(const Sheet_equipgem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipgem equipgem_List = 1;
  inline int equipgem_list_size() const;
  inline void clear_equipgem_list();
  static const int kEquipgemListFieldNumber = 1;
  inline const ::proto_ff::equipgem& equipgem_list(int index) const;
  inline ::proto_ff::equipgem* mutable_equipgem_list(int index);
  inline ::proto_ff::equipgem* add_equipgem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >&
      equipgem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >*
      mutable_equipgem_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipgem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem > equipgem_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipgem* default_instance_;
};
// -------------------------------------------------------------------

class equipatt : public ::google::protobuf::Message {
 public:
  equipatt();
  virtual ~equipatt();

  equipatt(const equipatt& from);

  inline equipatt& operator=(const equipatt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipatt& default_instance();

  void Swap(equipatt* other);

  // implements Message ----------------------------------------------

  equipatt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipatt& from);
  void MergeFrom(const equipatt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 idType = 2;
  inline bool has_idtype() const;
  inline void clear_idtype();
  static const int kIdTypeFieldNumber = 2;
  inline ::google::protobuf::int32 idtype() const;
  inline void set_idtype(::google::protobuf::int32 value);

  // optional int32 idNum = 3;
  inline bool has_idnum() const;
  inline void clear_idnum();
  static const int kIdNumFieldNumber = 3;
  inline ::google::protobuf::int32 idnum() const;
  inline void set_idnum(::google::protobuf::int32 value);

  // optional string att = 4;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 4;
  inline const ::std::string& att() const;
  inline void set_att(const ::std::string& value);
  inline void set_att(const char* value);
  inline void set_att(const char* value, size_t size);
  inline ::std::string* mutable_att();
  inline ::std::string* release_att();
  inline void set_allocated_att(::std::string* att);

  // @@protoc_insertion_point(class_scope:proto_ff.equipatt)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_idtype();
  inline void clear_has_idtype();
  inline void set_has_idnum();
  inline void clear_has_idnum();
  inline void set_has_att();
  inline void clear_has_att();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 idtype_;
  ::google::protobuf::int32 idnum_;
  ::std::string* att_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipatt* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipatt : public ::google::protobuf::Message {
 public:
  Sheet_equipatt();
  virtual ~Sheet_equipatt();

  Sheet_equipatt(const Sheet_equipatt& from);

  inline Sheet_equipatt& operator=(const Sheet_equipatt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipatt& default_instance();

  void Swap(Sheet_equipatt* other);

  // implements Message ----------------------------------------------

  Sheet_equipatt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipatt& from);
  void MergeFrom(const Sheet_equipatt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipatt equipatt_List = 1;
  inline int equipatt_list_size() const;
  inline void clear_equipatt_list();
  static const int kEquipattListFieldNumber = 1;
  inline const ::proto_ff::equipatt& equipatt_list(int index) const;
  inline ::proto_ff::equipatt* mutable_equipatt_list(int index);
  inline ::proto_ff::equipatt* add_equipatt_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipatt >&
      equipatt_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipatt >*
      mutable_equipatt_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipatt)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipatt > equipatt_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipatt* default_instance_;
};
// -------------------------------------------------------------------

class equipsuitattributeDesc : public ::google::protobuf::Message {
 public:
  equipsuitattributeDesc();
  virtual ~equipsuitattributeDesc();

  equipsuitattributeDesc(const equipsuitattributeDesc& from);

  inline equipsuitattributeDesc& operator=(const equipsuitattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipsuitattributeDesc& default_instance();

  void Swap(equipsuitattributeDesc* other);

  // implements Message ----------------------------------------------

  equipsuitattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipsuitattributeDesc& from);
  void MergeFrom(const equipsuitattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sctivation = 1;
  inline bool has_sctivation() const;
  inline void clear_sctivation();
  static const int kSctivationFieldNumber = 1;
  inline ::google::protobuf::int32 sctivation() const;
  inline void set_sctivation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipsuitattributeDesc)
 private:
  inline void set_has_sctivation();
  inline void clear_has_sctivation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sctivation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipsuitattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipsuit : public ::google::protobuf::Message {
 public:
  equipsuit();
  virtual ~equipsuit();

  equipsuit(const equipsuit& from);

  inline equipsuit& operator=(const equipsuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipsuit& default_instance();

  void Swap(equipsuit* other);

  // implements Message ----------------------------------------------

  equipsuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipsuit& from);
  void MergeFrom(const equipsuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string profession = 2;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 2;
  inline const ::std::string& profession() const;
  inline void set_profession(const ::std::string& value);
  inline void set_profession(const char* value);
  inline void set_profession(const char* value, size_t size);
  inline ::std::string* mutable_profession();
  inline ::std::string* release_profession();
  inline void set_allocated_profession(::std::string* profession);

  // optional int32 suitLv = 3;
  inline bool has_suitlv() const;
  inline void clear_suitlv();
  static const int kSuitLvFieldNumber = 3;
  inline ::google::protobuf::int32 suitlv() const;
  inline void set_suitlv(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 colour = 5;
  inline bool has_colour() const;
  inline void clear_colour();
  static const int kColourFieldNumber = 5;
  inline ::google::protobuf::int32 colour() const;
  inline void set_colour(::google::protobuf::int32 value);

  // optional string afterName = 6;
  inline bool has_aftername() const;
  inline void clear_aftername();
  static const int kAfterNameFieldNumber = 6;
  inline const ::std::string& aftername() const;
  inline void set_aftername(const ::std::string& value);
  inline void set_aftername(const char* value);
  inline void set_aftername(const char* value, size_t size);
  inline ::std::string* mutable_aftername();
  inline ::std::string* release_aftername();
  inline void set_allocated_aftername(::std::string* aftername);

  // optional int32 suiteValue = 7;
  inline bool has_suitevalue() const;
  inline void clear_suitevalue();
  static const int kSuiteValueFieldNumber = 7;
  inline ::google::protobuf::int32 suitevalue() const;
  inline void set_suitevalue(::google::protobuf::int32 value);

  // repeated .proto_ff.equipsuitattributeDesc attribute = 8;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 8;
  inline const ::proto_ff::equipsuitattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipsuitattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipsuitattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuitattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuitattributeDesc >*
      mutable_attribute();

  // repeated string position = 9;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 9;
  inline const ::std::string& position(int index) const;
  inline ::std::string* mutable_position(int index);
  inline void set_position(int index, const ::std::string& value);
  inline void set_position(int index, const char* value);
  inline void set_position(int index, const char* value, size_t size);
  inline ::std::string* add_position();
  inline void add_position(const ::std::string& value);
  inline void add_position(const char* value);
  inline void add_position(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& position() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_position();

  // @@protoc_insertion_point(class_scope:proto_ff.equipsuit)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_suitlv();
  inline void clear_has_suitlv();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_colour();
  inline void clear_has_colour();
  inline void set_has_aftername();
  inline void clear_has_aftername();
  inline void set_has_suitevalue();
  inline void clear_has_suitevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* profession_;
  ::google::protobuf::int32 suitlv_;
  ::google::protobuf::int32 level_;
  ::std::string* aftername_;
  ::google::protobuf::int32 colour_;
  ::google::protobuf::int32 suitevalue_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuitattributeDesc > attribute_;
  ::google::protobuf::RepeatedPtrField< ::std::string> position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipsuit* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipsuit : public ::google::protobuf::Message {
 public:
  Sheet_equipsuit();
  virtual ~Sheet_equipsuit();

  Sheet_equipsuit(const Sheet_equipsuit& from);

  inline Sheet_equipsuit& operator=(const Sheet_equipsuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipsuit& default_instance();

  void Swap(Sheet_equipsuit* other);

  // implements Message ----------------------------------------------

  Sheet_equipsuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipsuit& from);
  void MergeFrom(const Sheet_equipsuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipsuit equipsuit_List = 1;
  inline int equipsuit_list_size() const;
  inline void clear_equipsuit_list();
  static const int kEquipsuitListFieldNumber = 1;
  inline const ::proto_ff::equipsuit& equipsuit_list(int index) const;
  inline ::proto_ff::equipsuit* mutable_equipsuit_list(int index);
  inline ::proto_ff::equipsuit* add_equipsuit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuit >&
      equipsuit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuit >*
      mutable_equipsuit_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipsuit)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuit > equipsuit_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipsuit* default_instance_;
};
// -------------------------------------------------------------------

class equipclear : public ::google::protobuf::Message {
 public:
  equipclear();
  virtual ~equipclear();

  equipclear(const equipclear& from);

  inline equipclear& operator=(const equipclear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipclear& default_instance();

  void Swap(equipclear* other);

  // implements Message ----------------------------------------------

  equipclear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipclear& from);
  void MergeFrom(const equipclear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 Lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional string value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // repeated int64 teamId = 5;
  inline int teamid_size() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::int64 teamid(int index) const;
  inline void set_teamid(int index, ::google::protobuf::int64 value);
  inline void add_teamid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      teamid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_teamid();

  // @@protoc_insertion_point(class_scope:proto_ff.equipclear)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 lv_;
  ::std::string* value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipclear* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipclear : public ::google::protobuf::Message {
 public:
  Sheet_equipclear();
  virtual ~Sheet_equipclear();

  Sheet_equipclear(const Sheet_equipclear& from);

  inline Sheet_equipclear& operator=(const Sheet_equipclear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipclear& default_instance();

  void Swap(Sheet_equipclear* other);

  // implements Message ----------------------------------------------

  Sheet_equipclear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipclear& from);
  void MergeFrom(const Sheet_equipclear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipclear equipclear_List = 1;
  inline int equipclear_list_size() const;
  inline void clear_equipclear_list();
  static const int kEquipclearListFieldNumber = 1;
  inline const ::proto_ff::equipclear& equipclear_list(int index) const;
  inline ::proto_ff::equipclear* mutable_equipclear_list(int index);
  inline ::proto_ff::equipclear* add_equipclear_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclear >&
      equipclear_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclear >*
      mutable_equipclear_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipclear)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclear > equipclear_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipclear* default_instance_;
};
// -------------------------------------------------------------------

class equipstrongexp : public ::google::protobuf::Message {
 public:
  equipstrongexp();
  virtual ~equipstrongexp();

  equipstrongexp(const equipstrongexp& from);

  inline equipstrongexp& operator=(const equipstrongexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipstrongexp& default_instance();

  void Swap(equipstrongexp* other);

  // implements Message ----------------------------------------------

  equipstrongexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipstrongexp& from);
  void MergeFrom(const equipstrongexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int64 expUp = 4;
  inline bool has_expup() const;
  inline void clear_expup();
  static const int kExpUpFieldNumber = 4;
  inline ::google::protobuf::int64 expup() const;
  inline void set_expup(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipstrongexp)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_expup();
  inline void clear_has_expup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int64 expup_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipstrongexp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipstrongexp : public ::google::protobuf::Message {
 public:
  Sheet_equipstrongexp();
  virtual ~Sheet_equipstrongexp();

  Sheet_equipstrongexp(const Sheet_equipstrongexp& from);

  inline Sheet_equipstrongexp& operator=(const Sheet_equipstrongexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipstrongexp& default_instance();

  void Swap(Sheet_equipstrongexp* other);

  // implements Message ----------------------------------------------

  Sheet_equipstrongexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipstrongexp& from);
  void MergeFrom(const Sheet_equipstrongexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  inline int equipstrongexp_list_size() const;
  inline void clear_equipstrongexp_list();
  static const int kEquipstrongexpListFieldNumber = 1;
  inline const ::proto_ff::equipstrongexp& equipstrongexp_list(int index) const;
  inline ::proto_ff::equipstrongexp* mutable_equipstrongexp_list(int index);
  inline ::proto_ff::equipstrongexp* add_equipstrongexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >&
      equipstrongexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >*
      mutable_equipstrongexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipstrongexp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp > equipstrongexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipstrongexp* default_instance_;
};
// -------------------------------------------------------------------

class equipgemfineexp : public ::google::protobuf::Message {
 public:
  equipgemfineexp();
  virtual ~equipgemfineexp();

  equipgemfineexp(const equipgemfineexp& from);

  inline equipgemfineexp& operator=(const equipgemfineexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipgemfineexp& default_instance();

  void Swap(equipgemfineexp* other);

  // implements Message ----------------------------------------------

  equipgemfineexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipgemfineexp& from);
  void MergeFrom(const equipgemfineexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int64 expUp = 2;
  inline bool has_expup() const;
  inline void clear_expup();
  static const int kExpUpFieldNumber = 2;
  inline ::google::protobuf::int64 expup() const;
  inline void set_expup(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipgemfineexp)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_expup();
  inline void clear_has_expup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expup_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipgemfineexp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipgemfineexp : public ::google::protobuf::Message {
 public:
  Sheet_equipgemfineexp();
  virtual ~Sheet_equipgemfineexp();

  Sheet_equipgemfineexp(const Sheet_equipgemfineexp& from);

  inline Sheet_equipgemfineexp& operator=(const Sheet_equipgemfineexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipgemfineexp& default_instance();

  void Swap(Sheet_equipgemfineexp* other);

  // implements Message ----------------------------------------------

  Sheet_equipgemfineexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipgemfineexp& from);
  void MergeFrom(const Sheet_equipgemfineexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipgemfineexp equipgemfineexp_List = 1;
  inline int equipgemfineexp_list_size() const;
  inline void clear_equipgemfineexp_list();
  static const int kEquipgemfineexpListFieldNumber = 1;
  inline const ::proto_ff::equipgemfineexp& equipgemfineexp_list(int index) const;
  inline ::proto_ff::equipgemfineexp* mutable_equipgemfineexp_list(int index);
  inline ::proto_ff::equipgemfineexp* add_equipgemfineexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfineexp >&
      equipgemfineexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfineexp >*
      mutable_equipgemfineexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipgemfineexp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfineexp > equipgemfineexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipgemfineexp* default_instance_;
};
// -------------------------------------------------------------------

class equipclearteamSectionDesc : public ::google::protobuf::Message {
 public:
  equipclearteamSectionDesc();
  virtual ~equipclearteamSectionDesc();

  equipclearteamSectionDesc(const equipclearteamSectionDesc& from);

  inline equipclearteamSectionDesc& operator=(const equipclearteamSectionDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipclearteamSectionDesc& default_instance();

  void Swap(equipclearteamSectionDesc* other);

  // implements Message ----------------------------------------------

  equipclearteamSectionDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipclearteamSectionDesc& from);
  void MergeFrom(const equipclearteamSectionDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string down = 1;
  inline bool has_down() const;
  inline void clear_down();
  static const int kDownFieldNumber = 1;
  inline const ::std::string& down() const;
  inline void set_down(const ::std::string& value);
  inline void set_down(const char* value);
  inline void set_down(const char* value, size_t size);
  inline ::std::string* mutable_down();
  inline ::std::string* release_down();
  inline void set_allocated_down(::std::string* down);

  // optional int32 p = 2;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 2;
  inline ::google::protobuf::int32 p() const;
  inline void set_p(::google::protobuf::int32 value);

  // optional string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string up = 4;
  inline bool has_up() const;
  inline void clear_up();
  static const int kUpFieldNumber = 4;
  inline const ::std::string& up() const;
  inline void set_up(const ::std::string& value);
  inline void set_up(const char* value);
  inline void set_up(const char* value, size_t size);
  inline ::std::string* mutable_up();
  inline ::std::string* release_up();
  inline void set_allocated_up(::std::string* up);

  // optional string g = 5;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 5;
  inline const ::std::string& g() const;
  inline void set_g(const ::std::string& value);
  inline void set_g(const char* value);
  inline void set_g(const char* value, size_t size);
  inline ::std::string* mutable_g();
  inline ::std::string* release_g();
  inline void set_allocated_g(::std::string* g);

  // @@protoc_insertion_point(class_scope:proto_ff.equipclearteamSectionDesc)
 private:
  inline void set_has_down();
  inline void clear_has_down();
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_up();
  inline void clear_has_up();
  inline void set_has_g();
  inline void clear_has_g();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* down_;
  ::std::string* type_;
  ::std::string* up_;
  ::std::string* g_;
  ::google::protobuf::int32 p_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipclearteamSectionDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipclearteam : public ::google::protobuf::Message {
 public:
  equipclearteam();
  virtual ~equipclearteam();

  equipclearteam(const equipclearteam& from);

  inline equipclearteam& operator=(const equipclearteam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipclearteam& default_instance();

  void Swap(equipclearteam* other);

  // implements Message ----------------------------------------------

  equipclearteam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipclearteam& from);
  void MergeFrom(const equipclearteam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 combat = 2;
  inline bool has_combat() const;
  inline void clear_combat();
  static const int kCombatFieldNumber = 2;
  inline ::google::protobuf::int64 combat() const;
  inline void set_combat(::google::protobuf::int64 value);

  // optional int64 shengId = 3;
  inline bool has_shengid() const;
  inline void clear_shengid();
  static const int kShengIdFieldNumber = 3;
  inline ::google::protobuf::int64 shengid() const;
  inline void set_shengid(::google::protobuf::int64 value);

  // optional int32 shengNum = 4;
  inline bool has_shengnum() const;
  inline void clear_shengnum();
  static const int kShengNumFieldNumber = 4;
  inline ::google::protobuf::int32 shengnum() const;
  inline void set_shengnum(::google::protobuf::int32 value);

  // optional int64 consumeId = 5;
  inline bool has_consumeid() const;
  inline void clear_consumeid();
  static const int kConsumeIdFieldNumber = 5;
  inline ::google::protobuf::int64 consumeid() const;
  inline void set_consumeid(::google::protobuf::int64 value);

  // optional string consumeNum = 6;
  inline bool has_consumenum() const;
  inline void clear_consumenum();
  static const int kConsumeNumFieldNumber = 6;
  inline const ::std::string& consumenum() const;
  inline void set_consumenum(const ::std::string& value);
  inline void set_consumenum(const char* value);
  inline void set_consumenum(const char* value, size_t size);
  inline ::std::string* mutable_consumenum();
  inline ::std::string* release_consumenum();
  inline void set_allocated_consumenum(::std::string* consumenum);

  // optional string lockingId = 7;
  inline bool has_lockingid() const;
  inline void clear_lockingid();
  static const int kLockingIdFieldNumber = 7;
  inline const ::std::string& lockingid() const;
  inline void set_lockingid(const ::std::string& value);
  inline void set_lockingid(const char* value);
  inline void set_lockingid(const char* value, size_t size);
  inline ::std::string* mutable_lockingid();
  inline ::std::string* release_lockingid();
  inline void set_allocated_lockingid(::std::string* lockingid);

  // optional string lockingNum = 8;
  inline bool has_lockingnum() const;
  inline void clear_lockingnum();
  static const int kLockingNumFieldNumber = 8;
  inline const ::std::string& lockingnum() const;
  inline void set_lockingnum(const ::std::string& value);
  inline void set_lockingnum(const char* value);
  inline void set_lockingnum(const char* value, size_t size);
  inline ::std::string* mutable_lockingnum();
  inline ::std::string* release_lockingnum();
  inline void set_allocated_lockingnum(::std::string* lockingnum);

  // repeated .proto_ff.equipclearteamSectionDesc Section = 9;
  inline int section_size() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 9;
  inline const ::proto_ff::equipclearteamSectionDesc& section(int index) const;
  inline ::proto_ff::equipclearteamSectionDesc* mutable_section(int index);
  inline ::proto_ff::equipclearteamSectionDesc* add_section();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteamSectionDesc >&
      section() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteamSectionDesc >*
      mutable_section();

  // @@protoc_insertion_point(class_scope:proto_ff.equipclearteam)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_combat();
  inline void clear_has_combat();
  inline void set_has_shengid();
  inline void clear_has_shengid();
  inline void set_has_shengnum();
  inline void clear_has_shengnum();
  inline void set_has_consumeid();
  inline void clear_has_consumeid();
  inline void set_has_consumenum();
  inline void clear_has_consumenum();
  inline void set_has_lockingid();
  inline void clear_has_lockingid();
  inline void set_has_lockingnum();
  inline void clear_has_lockingnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 combat_;
  ::google::protobuf::int64 shengid_;
  ::google::protobuf::int64 consumeid_;
  ::std::string* consumenum_;
  ::std::string* lockingid_;
  ::std::string* lockingnum_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteamSectionDesc > section_;
  ::google::protobuf::int32 shengnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipclearteam* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipclearteam : public ::google::protobuf::Message {
 public:
  Sheet_equipclearteam();
  virtual ~Sheet_equipclearteam();

  Sheet_equipclearteam(const Sheet_equipclearteam& from);

  inline Sheet_equipclearteam& operator=(const Sheet_equipclearteam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipclearteam& default_instance();

  void Swap(Sheet_equipclearteam* other);

  // implements Message ----------------------------------------------

  Sheet_equipclearteam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipclearteam& from);
  void MergeFrom(const Sheet_equipclearteam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipclearteam equipclearteam_List = 1;
  inline int equipclearteam_list_size() const;
  inline void clear_equipclearteam_list();
  static const int kEquipclearteamListFieldNumber = 1;
  inline const ::proto_ff::equipclearteam& equipclearteam_list(int index) const;
  inline ::proto_ff::equipclearteam* mutable_equipclearteam_list(int index);
  inline ::proto_ff::equipclearteam* add_equipclearteam_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteam >&
      equipclearteam_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteam >*
      mutable_equipclearteam_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipclearteam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteam > equipclearteam_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipclearteam* default_instance_;
};
// -------------------------------------------------------------------

class equipawakeningawakenDesc : public ::google::protobuf::Message {
 public:
  equipawakeningawakenDesc();
  virtual ~equipawakeningawakenDesc();

  equipawakeningawakenDesc(const equipawakeningawakenDesc& from);

  inline equipawakeningawakenDesc& operator=(const equipawakeningawakenDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipawakeningawakenDesc& default_instance();

  void Swap(equipawakeningawakenDesc* other);

  // implements Message ----------------------------------------------

  equipawakeningawakenDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipawakeningawakenDesc& from);
  void MergeFrom(const equipawakeningawakenDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline ::google::protobuf::int64 item() const;
  inline void set_item(::google::protobuf::int64 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipawakeningawakenDesc)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipawakeningawakenDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipawakening : public ::google::protobuf::Message {
 public:
  equipawakening();
  virtual ~equipawakening();

  equipawakening(const equipawakening& from);

  inline equipawakening& operator=(const equipawakening& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipawakening& default_instance();

  void Swap(equipawakening* other);

  // implements Message ----------------------------------------------

  equipawakening* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipawakening& from);
  void MergeFrom(const equipawakening& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 awakenLv = 3;
  inline bool has_awakenlv() const;
  inline void clear_awakenlv();
  static const int kAwakenLvFieldNumber = 3;
  inline ::google::protobuf::int32 awakenlv() const;
  inline void set_awakenlv(::google::protobuf::int32 value);

  // optional int32 needWearQuality = 4;
  inline bool has_needwearquality() const;
  inline void clear_needwearquality();
  static const int kNeedWearQualityFieldNumber = 4;
  inline ::google::protobuf::int32 needwearquality() const;
  inline void set_needwearquality(::google::protobuf::int32 value);

  // optional int32 strong = 5;
  inline bool has_strong() const;
  inline void clear_strong();
  static const int kStrongFieldNumber = 5;
  inline ::google::protobuf::int32 strong() const;
  inline void set_strong(::google::protobuf::int32 value);

  // optional int32 attribute = 6;
  inline bool has_attribute() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 6;
  inline ::google::protobuf::int32 attribute() const;
  inline void set_attribute(::google::protobuf::int32 value);

  // repeated .proto_ff.equipawakeningawakenDesc awaken = 7;
  inline int awaken_size() const;
  inline void clear_awaken();
  static const int kAwakenFieldNumber = 7;
  inline const ::proto_ff::equipawakeningawakenDesc& awaken(int index) const;
  inline ::proto_ff::equipawakeningawakenDesc* mutable_awaken(int index);
  inline ::proto_ff::equipawakeningawakenDesc* add_awaken();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakeningawakenDesc >&
      awaken() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakeningawakenDesc >*
      mutable_awaken();

  // @@protoc_insertion_point(class_scope:proto_ff.equipawakening)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_awakenlv();
  inline void clear_has_awakenlv();
  inline void set_has_needwearquality();
  inline void clear_has_needwearquality();
  inline void set_has_strong();
  inline void clear_has_strong();
  inline void set_has_attribute();
  inline void clear_has_attribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 awakenlv_;
  ::google::protobuf::int32 needwearquality_;
  ::google::protobuf::int32 strong_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakeningawakenDesc > awaken_;
  ::google::protobuf::int32 attribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipawakening* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipawakening : public ::google::protobuf::Message {
 public:
  Sheet_equipawakening();
  virtual ~Sheet_equipawakening();

  Sheet_equipawakening(const Sheet_equipawakening& from);

  inline Sheet_equipawakening& operator=(const Sheet_equipawakening& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipawakening& default_instance();

  void Swap(Sheet_equipawakening* other);

  // implements Message ----------------------------------------------

  Sheet_equipawakening* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipawakening& from);
  void MergeFrom(const Sheet_equipawakening& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipawakening equipawakening_List = 1;
  inline int equipawakening_list_size() const;
  inline void clear_equipawakening_list();
  static const int kEquipawakeningListFieldNumber = 1;
  inline const ::proto_ff::equipawakening& equipawakening_list(int index) const;
  inline ::proto_ff::equipawakening* mutable_equipawakening_list(int index);
  inline ::proto_ff::equipawakening* add_equipawakening_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakening >&
      equipawakening_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakening >*
      mutable_equipawakening_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipawakening)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakening > equipawakening_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipawakening* default_instance_;
};
// -------------------------------------------------------------------

class equipenchantingtypeDesc : public ::google::protobuf::Message {
 public:
  equipenchantingtypeDesc();
  virtual ~equipenchantingtypeDesc();

  equipenchantingtypeDesc(const equipenchantingtypeDesc& from);

  inline equipenchantingtypeDesc& operator=(const equipenchantingtypeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipenchantingtypeDesc& default_instance();

  void Swap(equipenchantingtypeDesc* other);

  // implements Message ----------------------------------------------

  equipenchantingtypeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipenchantingtypeDesc& from);
  void MergeFrom(const equipenchantingtypeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipenchantingtypeDesc)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipenchantingtypeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipenchantingenchantDesc : public ::google::protobuf::Message {
 public:
  equipenchantingenchantDesc();
  virtual ~equipenchantingenchantDesc();

  equipenchantingenchantDesc(const equipenchantingenchantDesc& from);

  inline equipenchantingenchantDesc& operator=(const equipenchantingenchantDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipenchantingenchantDesc& default_instance();

  void Swap(equipenchantingenchantDesc* other);

  // implements Message ----------------------------------------------

  equipenchantingenchantDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipenchantingenchantDesc& from);
  void MergeFrom(const equipenchantingenchantDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline ::google::protobuf::int64 item() const;
  inline void set_item(::google::protobuf::int64 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipenchantingenchantDesc)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipenchantingenchantDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipenchanting : public ::google::protobuf::Message {
 public:
  equipenchanting();
  virtual ~equipenchanting();

  equipenchanting(const equipenchanting& from);

  inline equipenchanting& operator=(const equipenchanting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipenchanting& default_instance();

  void Swap(equipenchanting* other);

  // implements Message ----------------------------------------------

  equipenchanting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipenchanting& from);
  void MergeFrom(const equipenchanting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 enchantLv = 3;
  inline bool has_enchantlv() const;
  inline void clear_enchantlv();
  static const int kEnchantLvFieldNumber = 3;
  inline ::google::protobuf::int32 enchantlv() const;
  inline void set_enchantlv(::google::protobuf::int32 value);

  // optional int32 needWearQuality = 4;
  inline bool has_needwearquality() const;
  inline void clear_needwearquality();
  static const int kNeedWearQualityFieldNumber = 4;
  inline ::google::protobuf::int32 needwearquality() const;
  inline void set_needwearquality(::google::protobuf::int32 value);

  // optional int32 equip = 5;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 5;
  inline ::google::protobuf::int32 equip() const;
  inline void set_equip(::google::protobuf::int32 value);

  // repeated .proto_ff.equipenchantingtypeDesc type = 6;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline const ::proto_ff::equipenchantingtypeDesc& type(int index) const;
  inline ::proto_ff::equipenchantingtypeDesc* mutable_type(int index);
  inline ::proto_ff::equipenchantingtypeDesc* add_type();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingtypeDesc >&
      type() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingtypeDesc >*
      mutable_type();

  // repeated .proto_ff.equipenchantingenchantDesc enchant = 7;
  inline int enchant_size() const;
  inline void clear_enchant();
  static const int kEnchantFieldNumber = 7;
  inline const ::proto_ff::equipenchantingenchantDesc& enchant(int index) const;
  inline ::proto_ff::equipenchantingenchantDesc* mutable_enchant(int index);
  inline ::proto_ff::equipenchantingenchantDesc* add_enchant();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingenchantDesc >&
      enchant() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingenchantDesc >*
      mutable_enchant();

  // @@protoc_insertion_point(class_scope:proto_ff.equipenchanting)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_enchantlv();
  inline void clear_has_enchantlv();
  inline void set_has_needwearquality();
  inline void clear_has_needwearquality();
  inline void set_has_equip();
  inline void clear_has_equip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 enchantlv_;
  ::google::protobuf::int32 needwearquality_;
  ::google::protobuf::int32 equip_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingtypeDesc > type_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingenchantDesc > enchant_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipenchanting* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipenchanting : public ::google::protobuf::Message {
 public:
  Sheet_equipenchanting();
  virtual ~Sheet_equipenchanting();

  Sheet_equipenchanting(const Sheet_equipenchanting& from);

  inline Sheet_equipenchanting& operator=(const Sheet_equipenchanting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipenchanting& default_instance();

  void Swap(Sheet_equipenchanting* other);

  // implements Message ----------------------------------------------

  Sheet_equipenchanting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipenchanting& from);
  void MergeFrom(const Sheet_equipenchanting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipenchanting equipenchanting_List = 1;
  inline int equipenchanting_list_size() const;
  inline void clear_equipenchanting_list();
  static const int kEquipenchantingListFieldNumber = 1;
  inline const ::proto_ff::equipenchanting& equipenchanting_list(int index) const;
  inline ::proto_ff::equipenchanting* mutable_equipenchanting_list(int index);
  inline ::proto_ff::equipenchanting* add_equipenchanting_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchanting >&
      equipenchanting_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchanting >*
      mutable_equipenchanting_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipenchanting)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchanting > equipenchanting_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipenchanting* default_instance_;
};
// -------------------------------------------------------------------

class equipmarryattributeDesc : public ::google::protobuf::Message {
 public:
  equipmarryattributeDesc();
  virtual ~equipmarryattributeDesc();

  equipmarryattributeDesc(const equipmarryattributeDesc& from);

  inline equipmarryattributeDesc& operator=(const equipmarryattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipmarryattributeDesc& default_instance();

  void Swap(equipmarryattributeDesc* other);

  // implements Message ----------------------------------------------

  equipmarryattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipmarryattributeDesc& from);
  void MergeFrom(const equipmarryattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.equipmarryattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipmarryattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class equipmarry : public ::google::protobuf::Message {
 public:
  equipmarry();
  virtual ~equipmarry();

  equipmarry(const equipmarry& from);

  inline equipmarry& operator=(const equipmarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equipmarry& default_instance();

  void Swap(equipmarry* other);

  // implements Message ----------------------------------------------

  equipmarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equipmarry& from);
  void MergeFrom(const equipmarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 materialID = 5;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 5;
  inline ::google::protobuf::int64 materialid() const;
  inline void set_materialid(::google::protobuf::int64 value);

  // optional int32 materialEXP = 6;
  inline bool has_materialexp() const;
  inline void clear_materialexp();
  static const int kMaterialEXPFieldNumber = 6;
  inline ::google::protobuf::int32 materialexp() const;
  inline void set_materialexp(::google::protobuf::int32 value);

  // optional int32 need = 7;
  inline bool has_need() const;
  inline void clear_need();
  static const int kNeedFieldNumber = 7;
  inline ::google::protobuf::int32 need() const;
  inline void set_need(::google::protobuf::int32 value);

  // repeated .proto_ff.equipmarryattributeDesc attribute = 8;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 8;
  inline const ::proto_ff::equipmarryattributeDesc& attribute(int index) const;
  inline ::proto_ff::equipmarryattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::equipmarryattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarryattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarryattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.equipmarry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_materialexp();
  inline void clear_has_materialexp();
  inline void set_has_need();
  inline void clear_has_need();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 materialid_;
  ::google::protobuf::int32 materialexp_;
  ::google::protobuf::int32 need_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarryattributeDesc > attribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static equipmarry* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_equipmarry : public ::google::protobuf::Message {
 public:
  Sheet_equipmarry();
  virtual ~Sheet_equipmarry();

  Sheet_equipmarry(const Sheet_equipmarry& from);

  inline Sheet_equipmarry& operator=(const Sheet_equipmarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_equipmarry& default_instance();

  void Swap(Sheet_equipmarry* other);

  // implements Message ----------------------------------------------

  Sheet_equipmarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_equipmarry& from);
  void MergeFrom(const Sheet_equipmarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.equipmarry equipmarry_List = 1;
  inline int equipmarry_list_size() const;
  inline void clear_equipmarry_list();
  static const int kEquipmarryListFieldNumber = 1;
  inline const ::proto_ff::equipmarry& equipmarry_list(int index) const;
  inline ::proto_ff::equipmarry* mutable_equipmarry_list(int index);
  inline ::proto_ff::equipmarry* add_equipmarry_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarry >&
      equipmarry_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarry >*
      mutable_equipmarry_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_equipmarry)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarry > equipmarry_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_equip_2eproto();
  friend void protobuf_AssignDesc_equip_2eproto();
  friend void protobuf_ShutdownFile_equip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_equipmarry* default_instance_;
};
// ===================================================================


// ===================================================================

// equipequipattributeDesc

// optional int32 valueMin = 1;
inline bool equipequipattributeDesc::has_valuemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequipattributeDesc::set_has_valuemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequipattributeDesc::clear_has_valuemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequipattributeDesc::clear_valuemin() {
  valuemin_ = 0;
  clear_has_valuemin();
}
inline ::google::protobuf::int32 equipequipattributeDesc::valuemin() const {
  return valuemin_;
}
inline void equipequipattributeDesc::set_valuemin(::google::protobuf::int32 value) {
  set_has_valuemin();
  valuemin_ = value;
}

// optional int32 type = 2;
inline bool equipequipattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequipattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequipattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequipattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipequipattributeDesc::type() const {
  return type_;
}
inline void equipequipattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 valueMax = 3;
inline bool equipequipattributeDesc::has_valuemax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequipattributeDesc::set_has_valuemax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequipattributeDesc::clear_has_valuemax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequipattributeDesc::clear_valuemax() {
  valuemax_ = 0;
  clear_has_valuemax();
}
inline ::google::protobuf::int32 equipequipattributeDesc::valuemax() const {
  return valuemax_;
}
inline void equipequipattributeDesc::set_valuemax(::google::protobuf::int32 value) {
  set_has_valuemax();
  valuemax_ = value;
}

// -------------------------------------------------------------------

// equipequip

// optional int64 id = 1;
inline bool equipequip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipequip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipequip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipequip::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipequip::id() const {
  return id_;
}
inline void equipequip::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool equipequip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipequip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipequip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipequip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& equipequip::name() const {
  return *name_;
}
inline void equipequip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void equipequip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void equipequip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* equipequip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wearQuality = 3;
inline bool equipequip::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipequip::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipequip::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipequip::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipequip::wearquality() const {
  return wearquality_;
}
inline void equipequip::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 position = 4;
inline bool equipequip::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipequip::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipequip::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipequip::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipequip::position() const {
  return position_;
}
inline void equipequip::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional string profession = 5;
inline bool equipequip::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipequip::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipequip::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipequip::clear_profession() {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    profession_->clear();
  }
  clear_has_profession();
}
inline const ::std::string& equipequip::profession() const {
  return *profession_;
}
inline void equipequip::set_profession(const ::std::string& value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipequip::set_profession(const char* value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipequip::set_profession(const char* value, size_t size) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_profession() {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  return profession_;
}
inline ::std::string* equipequip::release_profession() {
  clear_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profession_;
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_profession(::std::string* profession) {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (profession) {
    set_has_profession();
    profession_ = profession;
  } else {
    clear_has_profession();
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 professionLv = 6;
inline bool equipequip::has_professionlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipequip::set_has_professionlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipequip::clear_has_professionlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipequip::clear_professionlv() {
  professionlv_ = 0;
  clear_has_professionlv();
}
inline ::google::protobuf::int32 equipequip::professionlv() const {
  return professionlv_;
}
inline void equipequip::set_professionlv(::google::protobuf::int32 value) {
  set_has_professionlv();
  professionlv_ = value;
}

// optional int32 level = 7;
inline bool equipequip::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void equipequip::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void equipequip::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void equipequip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 equipequip::level() const {
  return level_;
}
inline void equipequip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 quality = 8;
inline bool equipequip::has_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void equipequip::set_has_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void equipequip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void equipequip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 equipequip::quality() const {
  return quality_;
}
inline void equipequip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 star = 9;
inline bool equipequip::has_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void equipequip::set_has_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void equipequip::clear_has_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void equipequip::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 equipequip::star() const {
  return star_;
}
inline void equipequip::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 refineAttributeDown = 10;
inline bool equipequip::has_refineattributedown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void equipequip::set_has_refineattributedown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void equipequip::clear_has_refineattributedown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void equipequip::clear_refineattributedown() {
  refineattributedown_ = 0;
  clear_has_refineattributedown();
}
inline ::google::protobuf::int32 equipequip::refineattributedown() const {
  return refineattributedown_;
}
inline void equipequip::set_refineattributedown(::google::protobuf::int32 value) {
  set_has_refineattributedown();
  refineattributedown_ = value;
}

// optional int32 refineAttributeUp = 11;
inline bool equipequip::has_refineattributeup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void equipequip::set_has_refineattributeup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void equipequip::clear_has_refineattributeup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void equipequip::clear_refineattributeup() {
  refineattributeup_ = 0;
  clear_has_refineattributeup();
}
inline ::google::protobuf::int32 equipequip::refineattributeup() const {
  return refineattributeup_;
}
inline void equipequip::set_refineattributeup(::google::protobuf::int32 value) {
  set_has_refineattributeup();
  refineattributeup_ = value;
}

// optional string refineAttribute_typeLibrary = 12;
inline bool equipequip::has_refineattribute_typelibrary() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void equipequip::set_has_refineattribute_typelibrary() {
  _has_bits_[0] |= 0x00000800u;
}
inline void equipequip::clear_has_refineattribute_typelibrary() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void equipequip::clear_refineattribute_typelibrary() {
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_->clear();
  }
  clear_has_refineattribute_typelibrary();
}
inline const ::std::string& equipequip::refineattribute_typelibrary() const {
  return *refineattribute_typelibrary_;
}
inline void equipequip::set_refineattribute_typelibrary(const ::std::string& value) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(value);
}
inline void equipequip::set_refineattribute_typelibrary(const char* value) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(value);
}
inline void equipequip::set_refineattribute_typelibrary(const char* value, size_t size) {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  refineattribute_typelibrary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_typelibrary() {
  set_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_typelibrary_ = new ::std::string;
  }
  return refineattribute_typelibrary_;
}
inline ::std::string* equipequip::release_refineattribute_typelibrary() {
  clear_has_refineattribute_typelibrary();
  if (refineattribute_typelibrary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_typelibrary_;
    refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_typelibrary(::std::string* refineattribute_typelibrary) {
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_typelibrary_;
  }
  if (refineattribute_typelibrary) {
    set_has_refineattribute_typelibrary();
    refineattribute_typelibrary_ = refineattribute_typelibrary;
  } else {
    clear_has_refineattribute_typelibrary();
    refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refineAttribute_valueMin = 13;
inline bool equipequip::has_refineattribute_valuemin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void equipequip::set_has_refineattribute_valuemin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void equipequip::clear_has_refineattribute_valuemin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void equipequip::clear_refineattribute_valuemin() {
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_->clear();
  }
  clear_has_refineattribute_valuemin();
}
inline const ::std::string& equipequip::refineattribute_valuemin() const {
  return *refineattribute_valuemin_;
}
inline void equipequip::set_refineattribute_valuemin(const ::std::string& value) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(value);
}
inline void equipequip::set_refineattribute_valuemin(const char* value) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(value);
}
inline void equipequip::set_refineattribute_valuemin(const char* value, size_t size) {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  refineattribute_valuemin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_valuemin() {
  set_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemin_ = new ::std::string;
  }
  return refineattribute_valuemin_;
}
inline ::std::string* equipequip::release_refineattribute_valuemin() {
  clear_has_refineattribute_valuemin();
  if (refineattribute_valuemin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_valuemin_;
    refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_valuemin(::std::string* refineattribute_valuemin) {
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemin_;
  }
  if (refineattribute_valuemin) {
    set_has_refineattribute_valuemin();
    refineattribute_valuemin_ = refineattribute_valuemin;
  } else {
    clear_has_refineattribute_valuemin();
    refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refineAttribute_valueMax = 14;
inline bool equipequip::has_refineattribute_valuemax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void equipequip::set_has_refineattribute_valuemax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void equipequip::clear_has_refineattribute_valuemax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void equipequip::clear_refineattribute_valuemax() {
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_->clear();
  }
  clear_has_refineattribute_valuemax();
}
inline const ::std::string& equipequip::refineattribute_valuemax() const {
  return *refineattribute_valuemax_;
}
inline void equipequip::set_refineattribute_valuemax(const ::std::string& value) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(value);
}
inline void equipequip::set_refineattribute_valuemax(const char* value) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(value);
}
inline void equipequip::set_refineattribute_valuemax(const char* value, size_t size) {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  refineattribute_valuemax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_refineattribute_valuemax() {
  set_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    refineattribute_valuemax_ = new ::std::string;
  }
  return refineattribute_valuemax_;
}
inline ::std::string* equipequip::release_refineattribute_valuemax() {
  clear_has_refineattribute_valuemax();
  if (refineattribute_valuemax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refineattribute_valuemax_;
    refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_refineattribute_valuemax(::std::string* refineattribute_valuemax) {
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemax_;
  }
  if (refineattribute_valuemax) {
    set_has_refineattribute_valuemax();
    refineattribute_valuemax_ = refineattribute_valuemax;
  } else {
    clear_has_refineattribute_valuemax();
    refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 blueStarNum = 15;
inline bool equipequip::has_bluestarnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void equipequip::set_has_bluestarnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void equipequip::clear_has_bluestarnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void equipequip::clear_bluestarnum() {
  bluestarnum_ = 0;
  clear_has_bluestarnum();
}
inline ::google::protobuf::int32 equipequip::bluestarnum() const {
  return bluestarnum_;
}
inline void equipequip::set_bluestarnum(::google::protobuf::int32 value) {
  set_has_bluestarnum();
  bluestarnum_ = value;
}

// optional string blueStar_type = 16;
inline bool equipequip::has_bluestar_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void equipequip::set_has_bluestar_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void equipequip::clear_has_bluestar_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void equipequip::clear_bluestar_type() {
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_type_->clear();
  }
  clear_has_bluestar_type();
}
inline const ::std::string& equipequip::bluestar_type() const {
  return *bluestar_type_;
}
inline void equipequip::set_bluestar_type(const ::std::string& value) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(value);
}
inline void equipequip::set_bluestar_type(const char* value) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(value);
}
inline void equipequip::set_bluestar_type(const char* value, size_t size) {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  bluestar_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_type() {
  set_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_type_ = new ::std::string;
  }
  return bluestar_type_;
}
inline ::std::string* equipequip::release_bluestar_type() {
  clear_has_bluestar_type();
  if (bluestar_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_type_;
    bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_type(::std::string* bluestar_type) {
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_type) {
    set_has_bluestar_type();
    bluestar_type_ = bluestar_type;
  } else {
    clear_has_bluestar_type();
    bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string blueStar_lv = 17;
inline bool equipequip::has_bluestar_lv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void equipequip::set_has_bluestar_lv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void equipequip::clear_has_bluestar_lv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void equipequip::clear_bluestar_lv() {
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_->clear();
  }
  clear_has_bluestar_lv();
}
inline const ::std::string& equipequip::bluestar_lv() const {
  return *bluestar_lv_;
}
inline void equipequip::set_bluestar_lv(const ::std::string& value) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(value);
}
inline void equipequip::set_bluestar_lv(const char* value) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(value);
}
inline void equipequip::set_bluestar_lv(const char* value, size_t size) {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  bluestar_lv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_lv() {
  set_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_lv_ = new ::std::string;
  }
  return bluestar_lv_;
}
inline ::std::string* equipequip::release_bluestar_lv() {
  clear_has_bluestar_lv();
  if (bluestar_lv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_lv_;
    bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_lv(::std::string* bluestar_lv) {
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_lv_;
  }
  if (bluestar_lv) {
    set_has_bluestar_lv();
    bluestar_lv_ = bluestar_lv;
  } else {
    clear_has_bluestar_lv();
    bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string blueStar_number = 18;
inline bool equipequip::has_bluestar_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void equipequip::set_has_bluestar_number() {
  _has_bits_[0] |= 0x00020000u;
}
inline void equipequip::clear_has_bluestar_number() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void equipequip::clear_bluestar_number() {
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    bluestar_number_->clear();
  }
  clear_has_bluestar_number();
}
inline const ::std::string& equipequip::bluestar_number() const {
  return *bluestar_number_;
}
inline void equipequip::set_bluestar_number(const ::std::string& value) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(value);
}
inline void equipequip::set_bluestar_number(const char* value) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(value);
}
inline void equipequip::set_bluestar_number(const char* value, size_t size) {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  bluestar_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_bluestar_number() {
  set_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    bluestar_number_ = new ::std::string;
  }
  return bluestar_number_;
}
inline ::std::string* equipequip::release_bluestar_number() {
  clear_has_bluestar_number();
  if (bluestar_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluestar_number_;
    bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_bluestar_number(::std::string* bluestar_number) {
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_number_;
  }
  if (bluestar_number) {
    set_has_bluestar_number();
    bluestar_number_ = bluestar_number;
  } else {
    clear_has_bluestar_number();
    bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isCanbind = 19;
inline bool equipequip::has_iscanbind() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void equipequip::set_has_iscanbind() {
  _has_bits_[0] |= 0x00040000u;
}
inline void equipequip::clear_has_iscanbind() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void equipequip::clear_iscanbind() {
  iscanbind_ = 0;
  clear_has_iscanbind();
}
inline ::google::protobuf::int32 equipequip::iscanbind() const {
  return iscanbind_;
}
inline void equipequip::set_iscanbind(::google::protobuf::int32 value) {
  set_has_iscanbind();
  iscanbind_ = value;
}

// optional int32 isTradeBind = 20;
inline bool equipequip::has_istradebind() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void equipequip::set_has_istradebind() {
  _has_bits_[0] |= 0x00080000u;
}
inline void equipequip::clear_has_istradebind() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void equipequip::clear_istradebind() {
  istradebind_ = 0;
  clear_has_istradebind();
}
inline ::google::protobuf::int32 equipequip::istradebind() const {
  return istradebind_;
}
inline void equipequip::set_istradebind(::google::protobuf::int32 value) {
  set_has_istradebind();
  istradebind_ = value;
}

// optional int32 sellPrice = 21;
inline bool equipequip::has_sellprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void equipequip::set_has_sellprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void equipequip::clear_has_sellprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void equipequip::clear_sellprice() {
  sellprice_ = 0;
  clear_has_sellprice();
}
inline ::google::protobuf::int32 equipequip::sellprice() const {
  return sellprice_;
}
inline void equipequip::set_sellprice(::google::protobuf::int32 value) {
  set_has_sellprice();
  sellprice_ = value;
}

// optional string icon = 22;
inline bool equipequip::has_icon() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void equipequip::set_has_icon() {
  _has_bits_[0] |= 0x00200000u;
}
inline void equipequip::clear_has_icon() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void equipequip::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& equipequip::icon() const {
  return *icon_;
}
inline void equipequip::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void equipequip::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void equipequip::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* equipequip::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 23;
inline bool equipequip::has_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void equipequip::set_has_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void equipequip::clear_has_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void equipequip::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 equipequip::time() const {
  return time_;
}
inline void equipequip::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 Combat = 24;
inline bool equipequip::has_combat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void equipequip::set_has_combat() {
  _has_bits_[0] |= 0x00800000u;
}
inline void equipequip::clear_has_combat() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void equipequip::clear_combat() {
  combat_ = 0;
  clear_has_combat();
}
inline ::google::protobuf::int32 equipequip::combat() const {
  return combat_;
}
inline void equipequip::set_combat(::google::protobuf::int32 value) {
  set_has_combat();
  combat_ = value;
}

// optional int32 broadcast = 25;
inline bool equipequip::has_broadcast() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void equipequip::set_has_broadcast() {
  _has_bits_[0] |= 0x01000000u;
}
inline void equipequip::clear_has_broadcast() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void equipequip::clear_broadcast() {
  broadcast_ = 0;
  clear_has_broadcast();
}
inline ::google::protobuf::int32 equipequip::broadcast() const {
  return broadcast_;
}
inline void equipequip::set_broadcast(::google::protobuf::int32 value) {
  set_has_broadcast();
  broadcast_ = value;
}

// optional string meltingResult = 26;
inline bool equipequip::has_meltingresult() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void equipequip::set_has_meltingresult() {
  _has_bits_[0] |= 0x02000000u;
}
inline void equipequip::clear_has_meltingresult() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void equipequip::clear_meltingresult() {
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    meltingresult_->clear();
  }
  clear_has_meltingresult();
}
inline const ::std::string& equipequip::meltingresult() const {
  return *meltingresult_;
}
inline void equipequip::set_meltingresult(const ::std::string& value) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(value);
}
inline void equipequip::set_meltingresult(const char* value) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(value);
}
inline void equipequip::set_meltingresult(const char* value, size_t size) {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  meltingresult_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipequip::mutable_meltingresult() {
  set_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    meltingresult_ = new ::std::string;
  }
  return meltingresult_;
}
inline ::std::string* equipequip::release_meltingresult() {
  clear_has_meltingresult();
  if (meltingresult_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meltingresult_;
    meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipequip::set_allocated_meltingresult(::std::string* meltingresult) {
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    delete meltingresult_;
  }
  if (meltingresult) {
    set_has_meltingresult();
    meltingresult_ = meltingresult;
  } else {
    clear_has_meltingresult();
    meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.equipequipattributeDesc attribute = 27;
inline int equipequip::attribute_size() const {
  return attribute_.size();
}
inline void equipequip::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipequipattributeDesc& equipequip::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipequipattributeDesc* equipequip::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipequipattributeDesc* equipequip::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >&
equipequip::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequipattributeDesc >*
equipequip::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_equipequip

// repeated .proto_ff.equipequip equipequip_List = 1;
inline int Sheet_equipequip::equipequip_list_size() const {
  return equipequip_list_.size();
}
inline void Sheet_equipequip::clear_equipequip_list() {
  equipequip_list_.Clear();
}
inline const ::proto_ff::equipequip& Sheet_equipequip::equipequip_list(int index) const {
  return equipequip_list_.Get(index);
}
inline ::proto_ff::equipequip* Sheet_equipequip::mutable_equipequip_list(int index) {
  return equipequip_list_.Mutable(index);
}
inline ::proto_ff::equipequip* Sheet_equipequip::add_equipequip_list() {
  return equipequip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >&
Sheet_equipequip::equipequip_list() const {
  return equipequip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipequip >*
Sheet_equipequip::mutable_equipequip_list() {
  return &equipequip_list_;
}

// -------------------------------------------------------------------

// equipstrongtypeDesc

// optional string num = 1;
inline bool equipstrongtypeDesc::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrongtypeDesc::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrongtypeDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrongtypeDesc::clear_num() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    num_->clear();
  }
  clear_has_num();
}
inline const ::std::string& equipstrongtypeDesc::num() const {
  return *num_;
}
inline void equipstrongtypeDesc::set_num(const ::std::string& value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(value);
}
inline void equipstrongtypeDesc::set_num(const char* value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(value);
}
inline void equipstrongtypeDesc::set_num(const char* value, size_t size) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipstrongtypeDesc::mutable_num() {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  return num_;
}
inline ::std::string* equipstrongtypeDesc::release_num() {
  clear_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = num_;
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipstrongtypeDesc::set_allocated_num(::std::string* num) {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (num) {
    set_has_num();
    num_ = num;
  } else {
    clear_has_num();
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool equipstrongtypeDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrongtypeDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrongtypeDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrongtypeDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 equipstrongtypeDesc::id() const {
  return id_;
}
inline void equipstrongtypeDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// equipstrong

// optional int64 id = 1;
inline bool equipstrong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrong::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipstrong::id() const {
  return id_;
}
inline void equipstrong::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 2;
inline bool equipstrong::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrong::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrong::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrong::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipstrong::position() const {
  return position_;
}
inline void equipstrong::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 wearQuality = 3;
inline bool equipstrong::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipstrong::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipstrong::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipstrong::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipstrong::wearquality() const {
  return wearquality_;
}
inline void equipstrong::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 srtongUp = 4;
inline bool equipstrong::has_srtongup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipstrong::set_has_srtongup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipstrong::clear_has_srtongup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipstrong::clear_srtongup() {
  srtongup_ = 0;
  clear_has_srtongup();
}
inline ::google::protobuf::int32 equipstrong::srtongup() const {
  return srtongup_;
}
inline void equipstrong::set_srtongup(::google::protobuf::int32 value) {
  set_has_srtongup();
  srtongup_ = value;
}

// repeated .proto_ff.equipstrongtypeDesc type = 5;
inline int equipstrong::type_size() const {
  return type_.size();
}
inline void equipstrong::clear_type() {
  type_.Clear();
}
inline const ::proto_ff::equipstrongtypeDesc& equipstrong::type(int index) const {
  return type_.Get(index);
}
inline ::proto_ff::equipstrongtypeDesc* equipstrong::mutable_type(int index) {
  return type_.Mutable(index);
}
inline ::proto_ff::equipstrongtypeDesc* equipstrong::add_type() {
  return type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >&
equipstrong::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongtypeDesc >*
equipstrong::mutable_type() {
  return &type_;
}

// -------------------------------------------------------------------

// Sheet_equipstrong

// repeated .proto_ff.equipstrong equipstrong_List = 1;
inline int Sheet_equipstrong::equipstrong_list_size() const {
  return equipstrong_list_.size();
}
inline void Sheet_equipstrong::clear_equipstrong_list() {
  equipstrong_list_.Clear();
}
inline const ::proto_ff::equipstrong& Sheet_equipstrong::equipstrong_list(int index) const {
  return equipstrong_list_.Get(index);
}
inline ::proto_ff::equipstrong* Sheet_equipstrong::mutable_equipstrong_list(int index) {
  return equipstrong_list_.Mutable(index);
}
inline ::proto_ff::equipstrong* Sheet_equipstrong::add_equipstrong_list() {
  return equipstrong_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >&
Sheet_equipstrong::equipstrong_list() const {
  return equipstrong_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrong >*
Sheet_equipstrong::mutable_equipstrong_list() {
  return &equipstrong_list_;
}

// -------------------------------------------------------------------

// equipgemfinedateDesc

// optional int32 Num = 1;
inline bool equipgemfinedateDesc::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipgemfinedateDesc::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipgemfinedateDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipgemfinedateDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 equipgemfinedateDesc::num() const {
  return num_;
}
inline void equipgemfinedateDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 Id = 2;
inline bool equipgemfinedateDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipgemfinedateDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipgemfinedateDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipgemfinedateDesc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipgemfinedateDesc::id() const {
  return id_;
}
inline void equipgemfinedateDesc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// equipgemfine

// optional int64 id = 1;
inline bool equipgemfine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipgemfine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipgemfine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipgemfine::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipgemfine::id() const {
  return id_;
}
inline void equipgemfine::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 2;
inline bool equipgemfine::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipgemfine::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipgemfine::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipgemfine::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipgemfine::position() const {
  return position_;
}
inline void equipgemfine::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 wearQuality = 3;
inline bool equipgemfine::has_wearquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipgemfine::set_has_wearquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipgemfine::clear_has_wearquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipgemfine::clear_wearquality() {
  wearquality_ = 0;
  clear_has_wearquality();
}
inline ::google::protobuf::int32 equipgemfine::wearquality() const {
  return wearquality_;
}
inline void equipgemfine::set_wearquality(::google::protobuf::int32 value) {
  set_has_wearquality();
  wearquality_ = value;
}

// optional int32 gemUp = 4;
inline bool equipgemfine::has_gemup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipgemfine::set_has_gemup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipgemfine::clear_has_gemup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipgemfine::clear_gemup() {
  gemup_ = 0;
  clear_has_gemup();
}
inline ::google::protobuf::int32 equipgemfine::gemup() const {
  return gemup_;
}
inline void equipgemfine::set_gemup(::google::protobuf::int32 value) {
  set_has_gemup();
  gemup_ = value;
}

// optional int32 gemNumber = 5;
inline bool equipgemfine::has_gemnumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipgemfine::set_has_gemnumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipgemfine::clear_has_gemnumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipgemfine::clear_gemnumber() {
  gemnumber_ = 0;
  clear_has_gemnumber();
}
inline ::google::protobuf::int32 equipgemfine::gemnumber() const {
  return gemnumber_;
}
inline void equipgemfine::set_gemnumber(::google::protobuf::int32 value) {
  set_has_gemnumber();
  gemnumber_ = value;
}

// repeated .proto_ff.equipgemfinedateDesc date = 6;
inline int equipgemfine::date_size() const {
  return date_.size();
}
inline void equipgemfine::clear_date() {
  date_.Clear();
}
inline const ::proto_ff::equipgemfinedateDesc& equipgemfine::date(int index) const {
  return date_.Get(index);
}
inline ::proto_ff::equipgemfinedateDesc* equipgemfine::mutable_date(int index) {
  return date_.Mutable(index);
}
inline ::proto_ff::equipgemfinedateDesc* equipgemfine::add_date() {
  return date_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfinedateDesc >&
equipgemfine::date() const {
  return date_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfinedateDesc >*
equipgemfine::mutable_date() {
  return &date_;
}

// -------------------------------------------------------------------

// Sheet_equipgemfine

// repeated .proto_ff.equipgemfine equipgemfine_List = 1;
inline int Sheet_equipgemfine::equipgemfine_list_size() const {
  return equipgemfine_list_.size();
}
inline void Sheet_equipgemfine::clear_equipgemfine_list() {
  equipgemfine_list_.Clear();
}
inline const ::proto_ff::equipgemfine& Sheet_equipgemfine::equipgemfine_list(int index) const {
  return equipgemfine_list_.Get(index);
}
inline ::proto_ff::equipgemfine* Sheet_equipgemfine::mutable_equipgemfine_list(int index) {
  return equipgemfine_list_.Mutable(index);
}
inline ::proto_ff::equipgemfine* Sheet_equipgemfine::add_equipgemfine_list() {
  return equipgemfine_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfine >&
Sheet_equipgemfine::equipgemfine_list() const {
  return equipgemfine_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfine >*
Sheet_equipgemfine::mutable_equipgemfine_list() {
  return &equipgemfine_list_;
}

// -------------------------------------------------------------------

// equipgem

// optional int32 position = 1;
inline bool equipgem::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipgem::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipgem::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipgem::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipgem::position() const {
  return position_;
}
inline void equipgem::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 gemType = 2;
inline bool equipgem::has_gemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipgem::set_has_gemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipgem::clear_has_gemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipgem::clear_gemtype() {
  gemtype_ = 0;
  clear_has_gemtype();
}
inline ::google::protobuf::int32 equipgem::gemtype() const {
  return gemtype_;
}
inline void equipgem::set_gemtype(::google::protobuf::int32 value) {
  set_has_gemtype();
  gemtype_ = value;
}

// optional int32 VipUnlock = 3;
inline bool equipgem::has_vipunlock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipgem::set_has_vipunlock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipgem::clear_has_vipunlock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipgem::clear_vipunlock() {
  vipunlock_ = 0;
  clear_has_vipunlock();
}
inline ::google::protobuf::int32 equipgem::vipunlock() const {
  return vipunlock_;
}
inline void equipgem::set_vipunlock(::google::protobuf::int32 value) {
  set_has_vipunlock();
  vipunlock_ = value;
}

// repeated int32 gemUnlock = 4;
inline int equipgem::gemunlock_size() const {
  return gemunlock_.size();
}
inline void equipgem::clear_gemunlock() {
  gemunlock_.Clear();
}
inline ::google::protobuf::int32 equipgem::gemunlock(int index) const {
  return gemunlock_.Get(index);
}
inline void equipgem::set_gemunlock(int index, ::google::protobuf::int32 value) {
  gemunlock_.Set(index, value);
}
inline void equipgem::add_gemunlock(::google::protobuf::int32 value) {
  gemunlock_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equipgem::gemunlock() const {
  return gemunlock_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equipgem::mutable_gemunlock() {
  return &gemunlock_;
}

// -------------------------------------------------------------------

// Sheet_equipgem

// repeated .proto_ff.equipgem equipgem_List = 1;
inline int Sheet_equipgem::equipgem_list_size() const {
  return equipgem_list_.size();
}
inline void Sheet_equipgem::clear_equipgem_list() {
  equipgem_list_.Clear();
}
inline const ::proto_ff::equipgem& Sheet_equipgem::equipgem_list(int index) const {
  return equipgem_list_.Get(index);
}
inline ::proto_ff::equipgem* Sheet_equipgem::mutable_equipgem_list(int index) {
  return equipgem_list_.Mutable(index);
}
inline ::proto_ff::equipgem* Sheet_equipgem::add_equipgem_list() {
  return equipgem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >&
Sheet_equipgem::equipgem_list() const {
  return equipgem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgem >*
Sheet_equipgem::mutable_equipgem_list() {
  return &equipgem_list_;
}

// -------------------------------------------------------------------

// equipatt

// optional int64 id = 1;
inline bool equipatt::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipatt::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipatt::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipatt::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipatt::id() const {
  return id_;
}
inline void equipatt::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 idType = 2;
inline bool equipatt::has_idtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipatt::set_has_idtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipatt::clear_has_idtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipatt::clear_idtype() {
  idtype_ = 0;
  clear_has_idtype();
}
inline ::google::protobuf::int32 equipatt::idtype() const {
  return idtype_;
}
inline void equipatt::set_idtype(::google::protobuf::int32 value) {
  set_has_idtype();
  idtype_ = value;
}

// optional int32 idNum = 3;
inline bool equipatt::has_idnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipatt::set_has_idnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipatt::clear_has_idnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipatt::clear_idnum() {
  idnum_ = 0;
  clear_has_idnum();
}
inline ::google::protobuf::int32 equipatt::idnum() const {
  return idnum_;
}
inline void equipatt::set_idnum(::google::protobuf::int32 value) {
  set_has_idnum();
  idnum_ = value;
}

// optional string att = 4;
inline bool equipatt::has_att() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipatt::set_has_att() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipatt::clear_has_att() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipatt::clear_att() {
  if (att_ != &::google::protobuf::internal::kEmptyString) {
    att_->clear();
  }
  clear_has_att();
}
inline const ::std::string& equipatt::att() const {
  return *att_;
}
inline void equipatt::set_att(const ::std::string& value) {
  set_has_att();
  if (att_ == &::google::protobuf::internal::kEmptyString) {
    att_ = new ::std::string;
  }
  att_->assign(value);
}
inline void equipatt::set_att(const char* value) {
  set_has_att();
  if (att_ == &::google::protobuf::internal::kEmptyString) {
    att_ = new ::std::string;
  }
  att_->assign(value);
}
inline void equipatt::set_att(const char* value, size_t size) {
  set_has_att();
  if (att_ == &::google::protobuf::internal::kEmptyString) {
    att_ = new ::std::string;
  }
  att_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipatt::mutable_att() {
  set_has_att();
  if (att_ == &::google::protobuf::internal::kEmptyString) {
    att_ = new ::std::string;
  }
  return att_;
}
inline ::std::string* equipatt::release_att() {
  clear_has_att();
  if (att_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = att_;
    att_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipatt::set_allocated_att(::std::string* att) {
  if (att_ != &::google::protobuf::internal::kEmptyString) {
    delete att_;
  }
  if (att) {
    set_has_att();
    att_ = att;
  } else {
    clear_has_att();
    att_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_equipatt

// repeated .proto_ff.equipatt equipatt_List = 1;
inline int Sheet_equipatt::equipatt_list_size() const {
  return equipatt_list_.size();
}
inline void Sheet_equipatt::clear_equipatt_list() {
  equipatt_list_.Clear();
}
inline const ::proto_ff::equipatt& Sheet_equipatt::equipatt_list(int index) const {
  return equipatt_list_.Get(index);
}
inline ::proto_ff::equipatt* Sheet_equipatt::mutable_equipatt_list(int index) {
  return equipatt_list_.Mutable(index);
}
inline ::proto_ff::equipatt* Sheet_equipatt::add_equipatt_list() {
  return equipatt_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipatt >&
Sheet_equipatt::equipatt_list() const {
  return equipatt_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipatt >*
Sheet_equipatt::mutable_equipatt_list() {
  return &equipatt_list_;
}

// -------------------------------------------------------------------

// equipsuitattributeDesc

// optional int32 sctivation = 1;
inline bool equipsuitattributeDesc::has_sctivation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipsuitattributeDesc::set_has_sctivation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipsuitattributeDesc::clear_has_sctivation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipsuitattributeDesc::clear_sctivation() {
  sctivation_ = 0;
  clear_has_sctivation();
}
inline ::google::protobuf::int32 equipsuitattributeDesc::sctivation() const {
  return sctivation_;
}
inline void equipsuitattributeDesc::set_sctivation(::google::protobuf::int32 value) {
  set_has_sctivation();
  sctivation_ = value;
}

// -------------------------------------------------------------------

// equipsuit

// optional int64 id = 1;
inline bool equipsuit::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipsuit::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipsuit::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipsuit::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipsuit::id() const {
  return id_;
}
inline void equipsuit::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string profession = 2;
inline bool equipsuit::has_profession() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipsuit::set_has_profession() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipsuit::clear_has_profession() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipsuit::clear_profession() {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    profession_->clear();
  }
  clear_has_profession();
}
inline const ::std::string& equipsuit::profession() const {
  return *profession_;
}
inline void equipsuit::set_profession(const ::std::string& value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipsuit::set_profession(const char* value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void equipsuit::set_profession(const char* value, size_t size) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipsuit::mutable_profession() {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  return profession_;
}
inline ::std::string* equipsuit::release_profession() {
  clear_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profession_;
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipsuit::set_allocated_profession(::std::string* profession) {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (profession) {
    set_has_profession();
    profession_ = profession;
  } else {
    clear_has_profession();
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 suitLv = 3;
inline bool equipsuit::has_suitlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipsuit::set_has_suitlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipsuit::clear_has_suitlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipsuit::clear_suitlv() {
  suitlv_ = 0;
  clear_has_suitlv();
}
inline ::google::protobuf::int32 equipsuit::suitlv() const {
  return suitlv_;
}
inline void equipsuit::set_suitlv(::google::protobuf::int32 value) {
  set_has_suitlv();
  suitlv_ = value;
}

// optional int32 level = 4;
inline bool equipsuit::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipsuit::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipsuit::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipsuit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 equipsuit::level() const {
  return level_;
}
inline void equipsuit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 colour = 5;
inline bool equipsuit::has_colour() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipsuit::set_has_colour() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipsuit::clear_has_colour() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipsuit::clear_colour() {
  colour_ = 0;
  clear_has_colour();
}
inline ::google::protobuf::int32 equipsuit::colour() const {
  return colour_;
}
inline void equipsuit::set_colour(::google::protobuf::int32 value) {
  set_has_colour();
  colour_ = value;
}

// optional string afterName = 6;
inline bool equipsuit::has_aftername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipsuit::set_has_aftername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipsuit::clear_has_aftername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipsuit::clear_aftername() {
  if (aftername_ != &::google::protobuf::internal::kEmptyString) {
    aftername_->clear();
  }
  clear_has_aftername();
}
inline const ::std::string& equipsuit::aftername() const {
  return *aftername_;
}
inline void equipsuit::set_aftername(const ::std::string& value) {
  set_has_aftername();
  if (aftername_ == &::google::protobuf::internal::kEmptyString) {
    aftername_ = new ::std::string;
  }
  aftername_->assign(value);
}
inline void equipsuit::set_aftername(const char* value) {
  set_has_aftername();
  if (aftername_ == &::google::protobuf::internal::kEmptyString) {
    aftername_ = new ::std::string;
  }
  aftername_->assign(value);
}
inline void equipsuit::set_aftername(const char* value, size_t size) {
  set_has_aftername();
  if (aftername_ == &::google::protobuf::internal::kEmptyString) {
    aftername_ = new ::std::string;
  }
  aftername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipsuit::mutable_aftername() {
  set_has_aftername();
  if (aftername_ == &::google::protobuf::internal::kEmptyString) {
    aftername_ = new ::std::string;
  }
  return aftername_;
}
inline ::std::string* equipsuit::release_aftername() {
  clear_has_aftername();
  if (aftername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aftername_;
    aftername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipsuit::set_allocated_aftername(::std::string* aftername) {
  if (aftername_ != &::google::protobuf::internal::kEmptyString) {
    delete aftername_;
  }
  if (aftername) {
    set_has_aftername();
    aftername_ = aftername;
  } else {
    clear_has_aftername();
    aftername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 suiteValue = 7;
inline bool equipsuit::has_suitevalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void equipsuit::set_has_suitevalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void equipsuit::clear_has_suitevalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void equipsuit::clear_suitevalue() {
  suitevalue_ = 0;
  clear_has_suitevalue();
}
inline ::google::protobuf::int32 equipsuit::suitevalue() const {
  return suitevalue_;
}
inline void equipsuit::set_suitevalue(::google::protobuf::int32 value) {
  set_has_suitevalue();
  suitevalue_ = value;
}

// repeated .proto_ff.equipsuitattributeDesc attribute = 8;
inline int equipsuit::attribute_size() const {
  return attribute_.size();
}
inline void equipsuit::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipsuitattributeDesc& equipsuit::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipsuitattributeDesc* equipsuit::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipsuitattributeDesc* equipsuit::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuitattributeDesc >&
equipsuit::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuitattributeDesc >*
equipsuit::mutable_attribute() {
  return &attribute_;
}

// repeated string position = 9;
inline int equipsuit::position_size() const {
  return position_.size();
}
inline void equipsuit::clear_position() {
  position_.Clear();
}
inline const ::std::string& equipsuit::position(int index) const {
  return position_.Get(index);
}
inline ::std::string* equipsuit::mutable_position(int index) {
  return position_.Mutable(index);
}
inline void equipsuit::set_position(int index, const ::std::string& value) {
  position_.Mutable(index)->assign(value);
}
inline void equipsuit::set_position(int index, const char* value) {
  position_.Mutable(index)->assign(value);
}
inline void equipsuit::set_position(int index, const char* value, size_t size) {
  position_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipsuit::add_position() {
  return position_.Add();
}
inline void equipsuit::add_position(const ::std::string& value) {
  position_.Add()->assign(value);
}
inline void equipsuit::add_position(const char* value) {
  position_.Add()->assign(value);
}
inline void equipsuit::add_position(const char* value, size_t size) {
  position_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
equipsuit::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
equipsuit::mutable_position() {
  return &position_;
}

// -------------------------------------------------------------------

// Sheet_equipsuit

// repeated .proto_ff.equipsuit equipsuit_List = 1;
inline int Sheet_equipsuit::equipsuit_list_size() const {
  return equipsuit_list_.size();
}
inline void Sheet_equipsuit::clear_equipsuit_list() {
  equipsuit_list_.Clear();
}
inline const ::proto_ff::equipsuit& Sheet_equipsuit::equipsuit_list(int index) const {
  return equipsuit_list_.Get(index);
}
inline ::proto_ff::equipsuit* Sheet_equipsuit::mutable_equipsuit_list(int index) {
  return equipsuit_list_.Mutable(index);
}
inline ::proto_ff::equipsuit* Sheet_equipsuit::add_equipsuit_list() {
  return equipsuit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuit >&
Sheet_equipsuit::equipsuit_list() const {
  return equipsuit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipsuit >*
Sheet_equipsuit::mutable_equipsuit_list() {
  return &equipsuit_list_;
}

// -------------------------------------------------------------------

// equipclear

// optional int64 id = 1;
inline bool equipclear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipclear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipclear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipclear::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipclear::id() const {
  return id_;
}
inline void equipclear::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 2;
inline bool equipclear::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipclear::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipclear::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipclear::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipclear::position() const {
  return position_;
}
inline void equipclear::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 Lv = 3;
inline bool equipclear::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipclear::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipclear::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipclear::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 equipclear::lv() const {
  return lv_;
}
inline void equipclear::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string value = 4;
inline bool equipclear::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipclear::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipclear::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipclear::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& equipclear::value() const {
  return *value_;
}
inline void equipclear::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void equipclear::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void equipclear::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclear::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* equipclear::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclear::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 teamId = 5;
inline int equipclear::teamid_size() const {
  return teamid_.size();
}
inline void equipclear::clear_teamid() {
  teamid_.Clear();
}
inline ::google::protobuf::int64 equipclear::teamid(int index) const {
  return teamid_.Get(index);
}
inline void equipclear::set_teamid(int index, ::google::protobuf::int64 value) {
  teamid_.Set(index, value);
}
inline void equipclear::add_teamid(::google::protobuf::int64 value) {
  teamid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
equipclear::teamid() const {
  return teamid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
equipclear::mutable_teamid() {
  return &teamid_;
}

// -------------------------------------------------------------------

// Sheet_equipclear

// repeated .proto_ff.equipclear equipclear_List = 1;
inline int Sheet_equipclear::equipclear_list_size() const {
  return equipclear_list_.size();
}
inline void Sheet_equipclear::clear_equipclear_list() {
  equipclear_list_.Clear();
}
inline const ::proto_ff::equipclear& Sheet_equipclear::equipclear_list(int index) const {
  return equipclear_list_.Get(index);
}
inline ::proto_ff::equipclear* Sheet_equipclear::mutable_equipclear_list(int index) {
  return equipclear_list_.Mutable(index);
}
inline ::proto_ff::equipclear* Sheet_equipclear::add_equipclear_list() {
  return equipclear_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclear >&
Sheet_equipclear::equipclear_list() const {
  return equipclear_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclear >*
Sheet_equipclear::mutable_equipclear_list() {
  return &equipclear_list_;
}

// -------------------------------------------------------------------

// equipstrongexp

// optional int32 Lv = 1;
inline bool equipstrongexp::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipstrongexp::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipstrongexp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipstrongexp::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 equipstrongexp::lv() const {
  return lv_;
}
inline void equipstrongexp::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 gold = 2;
inline bool equipstrongexp::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipstrongexp::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipstrongexp::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipstrongexp::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 equipstrongexp::gold() const {
  return gold_;
}
inline void equipstrongexp::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 exp = 3;
inline bool equipstrongexp::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipstrongexp::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipstrongexp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipstrongexp::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 equipstrongexp::exp() const {
  return exp_;
}
inline void equipstrongexp::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 expUp = 4;
inline bool equipstrongexp::has_expup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipstrongexp::set_has_expup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipstrongexp::clear_has_expup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipstrongexp::clear_expup() {
  expup_ = GOOGLE_LONGLONG(0);
  clear_has_expup();
}
inline ::google::protobuf::int64 equipstrongexp::expup() const {
  return expup_;
}
inline void equipstrongexp::set_expup(::google::protobuf::int64 value) {
  set_has_expup();
  expup_ = value;
}

// -------------------------------------------------------------------

// Sheet_equipstrongexp

// repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
inline int Sheet_equipstrongexp::equipstrongexp_list_size() const {
  return equipstrongexp_list_.size();
}
inline void Sheet_equipstrongexp::clear_equipstrongexp_list() {
  equipstrongexp_list_.Clear();
}
inline const ::proto_ff::equipstrongexp& Sheet_equipstrongexp::equipstrongexp_list(int index) const {
  return equipstrongexp_list_.Get(index);
}
inline ::proto_ff::equipstrongexp* Sheet_equipstrongexp::mutable_equipstrongexp_list(int index) {
  return equipstrongexp_list_.Mutable(index);
}
inline ::proto_ff::equipstrongexp* Sheet_equipstrongexp::add_equipstrongexp_list() {
  return equipstrongexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >&
Sheet_equipstrongexp::equipstrongexp_list() const {
  return equipstrongexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipstrongexp >*
Sheet_equipstrongexp::mutable_equipstrongexp_list() {
  return &equipstrongexp_list_;
}

// -------------------------------------------------------------------

// equipgemfineexp

// optional int32 Lv = 1;
inline bool equipgemfineexp::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipgemfineexp::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipgemfineexp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipgemfineexp::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 equipgemfineexp::lv() const {
  return lv_;
}
inline void equipgemfineexp::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int64 expUp = 2;
inline bool equipgemfineexp::has_expup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipgemfineexp::set_has_expup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipgemfineexp::clear_has_expup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipgemfineexp::clear_expup() {
  expup_ = GOOGLE_LONGLONG(0);
  clear_has_expup();
}
inline ::google::protobuf::int64 equipgemfineexp::expup() const {
  return expup_;
}
inline void equipgemfineexp::set_expup(::google::protobuf::int64 value) {
  set_has_expup();
  expup_ = value;
}

// -------------------------------------------------------------------

// Sheet_equipgemfineexp

// repeated .proto_ff.equipgemfineexp equipgemfineexp_List = 1;
inline int Sheet_equipgemfineexp::equipgemfineexp_list_size() const {
  return equipgemfineexp_list_.size();
}
inline void Sheet_equipgemfineexp::clear_equipgemfineexp_list() {
  equipgemfineexp_list_.Clear();
}
inline const ::proto_ff::equipgemfineexp& Sheet_equipgemfineexp::equipgemfineexp_list(int index) const {
  return equipgemfineexp_list_.Get(index);
}
inline ::proto_ff::equipgemfineexp* Sheet_equipgemfineexp::mutable_equipgemfineexp_list(int index) {
  return equipgemfineexp_list_.Mutable(index);
}
inline ::proto_ff::equipgemfineexp* Sheet_equipgemfineexp::add_equipgemfineexp_list() {
  return equipgemfineexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfineexp >&
Sheet_equipgemfineexp::equipgemfineexp_list() const {
  return equipgemfineexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipgemfineexp >*
Sheet_equipgemfineexp::mutable_equipgemfineexp_list() {
  return &equipgemfineexp_list_;
}

// -------------------------------------------------------------------

// equipclearteamSectionDesc

// optional string down = 1;
inline bool equipclearteamSectionDesc::has_down() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipclearteamSectionDesc::set_has_down() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipclearteamSectionDesc::clear_has_down() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipclearteamSectionDesc::clear_down() {
  if (down_ != &::google::protobuf::internal::kEmptyString) {
    down_->clear();
  }
  clear_has_down();
}
inline const ::std::string& equipclearteamSectionDesc::down() const {
  return *down_;
}
inline void equipclearteamSectionDesc::set_down(const ::std::string& value) {
  set_has_down();
  if (down_ == &::google::protobuf::internal::kEmptyString) {
    down_ = new ::std::string;
  }
  down_->assign(value);
}
inline void equipclearteamSectionDesc::set_down(const char* value) {
  set_has_down();
  if (down_ == &::google::protobuf::internal::kEmptyString) {
    down_ = new ::std::string;
  }
  down_->assign(value);
}
inline void equipclearteamSectionDesc::set_down(const char* value, size_t size) {
  set_has_down();
  if (down_ == &::google::protobuf::internal::kEmptyString) {
    down_ = new ::std::string;
  }
  down_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteamSectionDesc::mutable_down() {
  set_has_down();
  if (down_ == &::google::protobuf::internal::kEmptyString) {
    down_ = new ::std::string;
  }
  return down_;
}
inline ::std::string* equipclearteamSectionDesc::release_down() {
  clear_has_down();
  if (down_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = down_;
    down_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteamSectionDesc::set_allocated_down(::std::string* down) {
  if (down_ != &::google::protobuf::internal::kEmptyString) {
    delete down_;
  }
  if (down) {
    set_has_down();
    down_ = down;
  } else {
    clear_has_down();
    down_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 p = 2;
inline bool equipclearteamSectionDesc::has_p() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipclearteamSectionDesc::set_has_p() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipclearteamSectionDesc::clear_has_p() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipclearteamSectionDesc::clear_p() {
  p_ = 0;
  clear_has_p();
}
inline ::google::protobuf::int32 equipclearteamSectionDesc::p() const {
  return p_;
}
inline void equipclearteamSectionDesc::set_p(::google::protobuf::int32 value) {
  set_has_p();
  p_ = value;
}

// optional string type = 3;
inline bool equipclearteamSectionDesc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipclearteamSectionDesc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipclearteamSectionDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipclearteamSectionDesc::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& equipclearteamSectionDesc::type() const {
  return *type_;
}
inline void equipclearteamSectionDesc::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void equipclearteamSectionDesc::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void equipclearteamSectionDesc::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteamSectionDesc::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* equipclearteamSectionDesc::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteamSectionDesc::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string up = 4;
inline bool equipclearteamSectionDesc::has_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipclearteamSectionDesc::set_has_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipclearteamSectionDesc::clear_has_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipclearteamSectionDesc::clear_up() {
  if (up_ != &::google::protobuf::internal::kEmptyString) {
    up_->clear();
  }
  clear_has_up();
}
inline const ::std::string& equipclearteamSectionDesc::up() const {
  return *up_;
}
inline void equipclearteamSectionDesc::set_up(const ::std::string& value) {
  set_has_up();
  if (up_ == &::google::protobuf::internal::kEmptyString) {
    up_ = new ::std::string;
  }
  up_->assign(value);
}
inline void equipclearteamSectionDesc::set_up(const char* value) {
  set_has_up();
  if (up_ == &::google::protobuf::internal::kEmptyString) {
    up_ = new ::std::string;
  }
  up_->assign(value);
}
inline void equipclearteamSectionDesc::set_up(const char* value, size_t size) {
  set_has_up();
  if (up_ == &::google::protobuf::internal::kEmptyString) {
    up_ = new ::std::string;
  }
  up_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteamSectionDesc::mutable_up() {
  set_has_up();
  if (up_ == &::google::protobuf::internal::kEmptyString) {
    up_ = new ::std::string;
  }
  return up_;
}
inline ::std::string* equipclearteamSectionDesc::release_up() {
  clear_has_up();
  if (up_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = up_;
    up_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteamSectionDesc::set_allocated_up(::std::string* up) {
  if (up_ != &::google::protobuf::internal::kEmptyString) {
    delete up_;
  }
  if (up) {
    set_has_up();
    up_ = up;
  } else {
    clear_has_up();
    up_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string g = 5;
inline bool equipclearteamSectionDesc::has_g() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipclearteamSectionDesc::set_has_g() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipclearteamSectionDesc::clear_has_g() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipclearteamSectionDesc::clear_g() {
  if (g_ != &::google::protobuf::internal::kEmptyString) {
    g_->clear();
  }
  clear_has_g();
}
inline const ::std::string& equipclearteamSectionDesc::g() const {
  return *g_;
}
inline void equipclearteamSectionDesc::set_g(const ::std::string& value) {
  set_has_g();
  if (g_ == &::google::protobuf::internal::kEmptyString) {
    g_ = new ::std::string;
  }
  g_->assign(value);
}
inline void equipclearteamSectionDesc::set_g(const char* value) {
  set_has_g();
  if (g_ == &::google::protobuf::internal::kEmptyString) {
    g_ = new ::std::string;
  }
  g_->assign(value);
}
inline void equipclearteamSectionDesc::set_g(const char* value, size_t size) {
  set_has_g();
  if (g_ == &::google::protobuf::internal::kEmptyString) {
    g_ = new ::std::string;
  }
  g_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteamSectionDesc::mutable_g() {
  set_has_g();
  if (g_ == &::google::protobuf::internal::kEmptyString) {
    g_ = new ::std::string;
  }
  return g_;
}
inline ::std::string* equipclearteamSectionDesc::release_g() {
  clear_has_g();
  if (g_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = g_;
    g_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteamSectionDesc::set_allocated_g(::std::string* g) {
  if (g_ != &::google::protobuf::internal::kEmptyString) {
    delete g_;
  }
  if (g) {
    set_has_g();
    g_ = g;
  } else {
    clear_has_g();
    g_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// equipclearteam

// optional int64 id = 1;
inline bool equipclearteam::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipclearteam::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipclearteam::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipclearteam::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipclearteam::id() const {
  return id_;
}
inline void equipclearteam::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 combat = 2;
inline bool equipclearteam::has_combat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipclearteam::set_has_combat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipclearteam::clear_has_combat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipclearteam::clear_combat() {
  combat_ = GOOGLE_LONGLONG(0);
  clear_has_combat();
}
inline ::google::protobuf::int64 equipclearteam::combat() const {
  return combat_;
}
inline void equipclearteam::set_combat(::google::protobuf::int64 value) {
  set_has_combat();
  combat_ = value;
}

// optional int64 shengId = 3;
inline bool equipclearteam::has_shengid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipclearteam::set_has_shengid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipclearteam::clear_has_shengid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipclearteam::clear_shengid() {
  shengid_ = GOOGLE_LONGLONG(0);
  clear_has_shengid();
}
inline ::google::protobuf::int64 equipclearteam::shengid() const {
  return shengid_;
}
inline void equipclearteam::set_shengid(::google::protobuf::int64 value) {
  set_has_shengid();
  shengid_ = value;
}

// optional int32 shengNum = 4;
inline bool equipclearteam::has_shengnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipclearteam::set_has_shengnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipclearteam::clear_has_shengnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipclearteam::clear_shengnum() {
  shengnum_ = 0;
  clear_has_shengnum();
}
inline ::google::protobuf::int32 equipclearteam::shengnum() const {
  return shengnum_;
}
inline void equipclearteam::set_shengnum(::google::protobuf::int32 value) {
  set_has_shengnum();
  shengnum_ = value;
}

// optional int64 consumeId = 5;
inline bool equipclearteam::has_consumeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipclearteam::set_has_consumeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipclearteam::clear_has_consumeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipclearteam::clear_consumeid() {
  consumeid_ = GOOGLE_LONGLONG(0);
  clear_has_consumeid();
}
inline ::google::protobuf::int64 equipclearteam::consumeid() const {
  return consumeid_;
}
inline void equipclearteam::set_consumeid(::google::protobuf::int64 value) {
  set_has_consumeid();
  consumeid_ = value;
}

// optional string consumeNum = 6;
inline bool equipclearteam::has_consumenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipclearteam::set_has_consumenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipclearteam::clear_has_consumenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipclearteam::clear_consumenum() {
  if (consumenum_ != &::google::protobuf::internal::kEmptyString) {
    consumenum_->clear();
  }
  clear_has_consumenum();
}
inline const ::std::string& equipclearteam::consumenum() const {
  return *consumenum_;
}
inline void equipclearteam::set_consumenum(const ::std::string& value) {
  set_has_consumenum();
  if (consumenum_ == &::google::protobuf::internal::kEmptyString) {
    consumenum_ = new ::std::string;
  }
  consumenum_->assign(value);
}
inline void equipclearteam::set_consumenum(const char* value) {
  set_has_consumenum();
  if (consumenum_ == &::google::protobuf::internal::kEmptyString) {
    consumenum_ = new ::std::string;
  }
  consumenum_->assign(value);
}
inline void equipclearteam::set_consumenum(const char* value, size_t size) {
  set_has_consumenum();
  if (consumenum_ == &::google::protobuf::internal::kEmptyString) {
    consumenum_ = new ::std::string;
  }
  consumenum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteam::mutable_consumenum() {
  set_has_consumenum();
  if (consumenum_ == &::google::protobuf::internal::kEmptyString) {
    consumenum_ = new ::std::string;
  }
  return consumenum_;
}
inline ::std::string* equipclearteam::release_consumenum() {
  clear_has_consumenum();
  if (consumenum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = consumenum_;
    consumenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteam::set_allocated_consumenum(::std::string* consumenum) {
  if (consumenum_ != &::google::protobuf::internal::kEmptyString) {
    delete consumenum_;
  }
  if (consumenum) {
    set_has_consumenum();
    consumenum_ = consumenum;
  } else {
    clear_has_consumenum();
    consumenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lockingId = 7;
inline bool equipclearteam::has_lockingid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void equipclearteam::set_has_lockingid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void equipclearteam::clear_has_lockingid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void equipclearteam::clear_lockingid() {
  if (lockingid_ != &::google::protobuf::internal::kEmptyString) {
    lockingid_->clear();
  }
  clear_has_lockingid();
}
inline const ::std::string& equipclearteam::lockingid() const {
  return *lockingid_;
}
inline void equipclearteam::set_lockingid(const ::std::string& value) {
  set_has_lockingid();
  if (lockingid_ == &::google::protobuf::internal::kEmptyString) {
    lockingid_ = new ::std::string;
  }
  lockingid_->assign(value);
}
inline void equipclearteam::set_lockingid(const char* value) {
  set_has_lockingid();
  if (lockingid_ == &::google::protobuf::internal::kEmptyString) {
    lockingid_ = new ::std::string;
  }
  lockingid_->assign(value);
}
inline void equipclearteam::set_lockingid(const char* value, size_t size) {
  set_has_lockingid();
  if (lockingid_ == &::google::protobuf::internal::kEmptyString) {
    lockingid_ = new ::std::string;
  }
  lockingid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteam::mutable_lockingid() {
  set_has_lockingid();
  if (lockingid_ == &::google::protobuf::internal::kEmptyString) {
    lockingid_ = new ::std::string;
  }
  return lockingid_;
}
inline ::std::string* equipclearteam::release_lockingid() {
  clear_has_lockingid();
  if (lockingid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lockingid_;
    lockingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteam::set_allocated_lockingid(::std::string* lockingid) {
  if (lockingid_ != &::google::protobuf::internal::kEmptyString) {
    delete lockingid_;
  }
  if (lockingid) {
    set_has_lockingid();
    lockingid_ = lockingid;
  } else {
    clear_has_lockingid();
    lockingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lockingNum = 8;
inline bool equipclearteam::has_lockingnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void equipclearteam::set_has_lockingnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void equipclearteam::clear_has_lockingnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void equipclearteam::clear_lockingnum() {
  if (lockingnum_ != &::google::protobuf::internal::kEmptyString) {
    lockingnum_->clear();
  }
  clear_has_lockingnum();
}
inline const ::std::string& equipclearteam::lockingnum() const {
  return *lockingnum_;
}
inline void equipclearteam::set_lockingnum(const ::std::string& value) {
  set_has_lockingnum();
  if (lockingnum_ == &::google::protobuf::internal::kEmptyString) {
    lockingnum_ = new ::std::string;
  }
  lockingnum_->assign(value);
}
inline void equipclearteam::set_lockingnum(const char* value) {
  set_has_lockingnum();
  if (lockingnum_ == &::google::protobuf::internal::kEmptyString) {
    lockingnum_ = new ::std::string;
  }
  lockingnum_->assign(value);
}
inline void equipclearteam::set_lockingnum(const char* value, size_t size) {
  set_has_lockingnum();
  if (lockingnum_ == &::google::protobuf::internal::kEmptyString) {
    lockingnum_ = new ::std::string;
  }
  lockingnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equipclearteam::mutable_lockingnum() {
  set_has_lockingnum();
  if (lockingnum_ == &::google::protobuf::internal::kEmptyString) {
    lockingnum_ = new ::std::string;
  }
  return lockingnum_;
}
inline ::std::string* equipclearteam::release_lockingnum() {
  clear_has_lockingnum();
  if (lockingnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lockingnum_;
    lockingnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equipclearteam::set_allocated_lockingnum(::std::string* lockingnum) {
  if (lockingnum_ != &::google::protobuf::internal::kEmptyString) {
    delete lockingnum_;
  }
  if (lockingnum) {
    set_has_lockingnum();
    lockingnum_ = lockingnum;
  } else {
    clear_has_lockingnum();
    lockingnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.equipclearteamSectionDesc Section = 9;
inline int equipclearteam::section_size() const {
  return section_.size();
}
inline void equipclearteam::clear_section() {
  section_.Clear();
}
inline const ::proto_ff::equipclearteamSectionDesc& equipclearteam::section(int index) const {
  return section_.Get(index);
}
inline ::proto_ff::equipclearteamSectionDesc* equipclearteam::mutable_section(int index) {
  return section_.Mutable(index);
}
inline ::proto_ff::equipclearteamSectionDesc* equipclearteam::add_section() {
  return section_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteamSectionDesc >&
equipclearteam::section() const {
  return section_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteamSectionDesc >*
equipclearteam::mutable_section() {
  return &section_;
}

// -------------------------------------------------------------------

// Sheet_equipclearteam

// repeated .proto_ff.equipclearteam equipclearteam_List = 1;
inline int Sheet_equipclearteam::equipclearteam_list_size() const {
  return equipclearteam_list_.size();
}
inline void Sheet_equipclearteam::clear_equipclearteam_list() {
  equipclearteam_list_.Clear();
}
inline const ::proto_ff::equipclearteam& Sheet_equipclearteam::equipclearteam_list(int index) const {
  return equipclearteam_list_.Get(index);
}
inline ::proto_ff::equipclearteam* Sheet_equipclearteam::mutable_equipclearteam_list(int index) {
  return equipclearteam_list_.Mutable(index);
}
inline ::proto_ff::equipclearteam* Sheet_equipclearteam::add_equipclearteam_list() {
  return equipclearteam_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteam >&
Sheet_equipclearteam::equipclearteam_list() const {
  return equipclearteam_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipclearteam >*
Sheet_equipclearteam::mutable_equipclearteam_list() {
  return &equipclearteam_list_;
}

// -------------------------------------------------------------------

// equipawakeningawakenDesc

// optional int64 Item = 1;
inline bool equipawakeningawakenDesc::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipawakeningawakenDesc::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipawakeningawakenDesc::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipawakeningawakenDesc::clear_item() {
  item_ = GOOGLE_LONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::int64 equipawakeningawakenDesc::item() const {
  return item_;
}
inline void equipawakeningawakenDesc::set_item(::google::protobuf::int64 value) {
  set_has_item();
  item_ = value;
}

// optional int32 Num = 2;
inline bool equipawakeningawakenDesc::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipawakeningawakenDesc::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipawakeningawakenDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipawakeningawakenDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 equipawakeningawakenDesc::num() const {
  return num_;
}
inline void equipawakeningawakenDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// equipawakening

// optional int64 id = 1;
inline bool equipawakening::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipawakening::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipawakening::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipawakening::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipawakening::id() const {
  return id_;
}
inline void equipawakening::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 2;
inline bool equipawakening::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipawakening::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipawakening::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipawakening::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipawakening::position() const {
  return position_;
}
inline void equipawakening::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 awakenLv = 3;
inline bool equipawakening::has_awakenlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipawakening::set_has_awakenlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipawakening::clear_has_awakenlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipawakening::clear_awakenlv() {
  awakenlv_ = 0;
  clear_has_awakenlv();
}
inline ::google::protobuf::int32 equipawakening::awakenlv() const {
  return awakenlv_;
}
inline void equipawakening::set_awakenlv(::google::protobuf::int32 value) {
  set_has_awakenlv();
  awakenlv_ = value;
}

// optional int32 needWearQuality = 4;
inline bool equipawakening::has_needwearquality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipawakening::set_has_needwearquality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipawakening::clear_has_needwearquality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipawakening::clear_needwearquality() {
  needwearquality_ = 0;
  clear_has_needwearquality();
}
inline ::google::protobuf::int32 equipawakening::needwearquality() const {
  return needwearquality_;
}
inline void equipawakening::set_needwearquality(::google::protobuf::int32 value) {
  set_has_needwearquality();
  needwearquality_ = value;
}

// optional int32 strong = 5;
inline bool equipawakening::has_strong() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipawakening::set_has_strong() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipawakening::clear_has_strong() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipawakening::clear_strong() {
  strong_ = 0;
  clear_has_strong();
}
inline ::google::protobuf::int32 equipawakening::strong() const {
  return strong_;
}
inline void equipawakening::set_strong(::google::protobuf::int32 value) {
  set_has_strong();
  strong_ = value;
}

// optional int32 attribute = 6;
inline bool equipawakening::has_attribute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipawakening::set_has_attribute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipawakening::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipawakening::clear_attribute() {
  attribute_ = 0;
  clear_has_attribute();
}
inline ::google::protobuf::int32 equipawakening::attribute() const {
  return attribute_;
}
inline void equipawakening::set_attribute(::google::protobuf::int32 value) {
  set_has_attribute();
  attribute_ = value;
}

// repeated .proto_ff.equipawakeningawakenDesc awaken = 7;
inline int equipawakening::awaken_size() const {
  return awaken_.size();
}
inline void equipawakening::clear_awaken() {
  awaken_.Clear();
}
inline const ::proto_ff::equipawakeningawakenDesc& equipawakening::awaken(int index) const {
  return awaken_.Get(index);
}
inline ::proto_ff::equipawakeningawakenDesc* equipawakening::mutable_awaken(int index) {
  return awaken_.Mutable(index);
}
inline ::proto_ff::equipawakeningawakenDesc* equipawakening::add_awaken() {
  return awaken_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakeningawakenDesc >&
equipawakening::awaken() const {
  return awaken_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakeningawakenDesc >*
equipawakening::mutable_awaken() {
  return &awaken_;
}

// -------------------------------------------------------------------

// Sheet_equipawakening

// repeated .proto_ff.equipawakening equipawakening_List = 1;
inline int Sheet_equipawakening::equipawakening_list_size() const {
  return equipawakening_list_.size();
}
inline void Sheet_equipawakening::clear_equipawakening_list() {
  equipawakening_list_.Clear();
}
inline const ::proto_ff::equipawakening& Sheet_equipawakening::equipawakening_list(int index) const {
  return equipawakening_list_.Get(index);
}
inline ::proto_ff::equipawakening* Sheet_equipawakening::mutable_equipawakening_list(int index) {
  return equipawakening_list_.Mutable(index);
}
inline ::proto_ff::equipawakening* Sheet_equipawakening::add_equipawakening_list() {
  return equipawakening_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakening >&
Sheet_equipawakening::equipawakening_list() const {
  return equipawakening_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipawakening >*
Sheet_equipawakening::mutable_equipawakening_list() {
  return &equipawakening_list_;
}

// -------------------------------------------------------------------

// equipenchantingtypeDesc

// optional int32 num = 1;
inline bool equipenchantingtypeDesc::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipenchantingtypeDesc::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipenchantingtypeDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipenchantingtypeDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 equipenchantingtypeDesc::num() const {
  return num_;
}
inline void equipenchantingtypeDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 id = 2;
inline bool equipenchantingtypeDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipenchantingtypeDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipenchantingtypeDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipenchantingtypeDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 equipenchantingtypeDesc::id() const {
  return id_;
}
inline void equipenchantingtypeDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// equipenchantingenchantDesc

// optional int64 Item = 1;
inline bool equipenchantingenchantDesc::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipenchantingenchantDesc::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipenchantingenchantDesc::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipenchantingenchantDesc::clear_item() {
  item_ = GOOGLE_LONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::int64 equipenchantingenchantDesc::item() const {
  return item_;
}
inline void equipenchantingenchantDesc::set_item(::google::protobuf::int64 value) {
  set_has_item();
  item_ = value;
}

// optional int32 Num = 2;
inline bool equipenchantingenchantDesc::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipenchantingenchantDesc::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipenchantingenchantDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipenchantingenchantDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 equipenchantingenchantDesc::num() const {
  return num_;
}
inline void equipenchantingenchantDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// equipenchanting

// optional int64 id = 1;
inline bool equipenchanting::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipenchanting::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipenchanting::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipenchanting::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 equipenchanting::id() const {
  return id_;
}
inline void equipenchanting::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 2;
inline bool equipenchanting::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipenchanting::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipenchanting::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipenchanting::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipenchanting::position() const {
  return position_;
}
inline void equipenchanting::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 enchantLv = 3;
inline bool equipenchanting::has_enchantlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipenchanting::set_has_enchantlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipenchanting::clear_has_enchantlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipenchanting::clear_enchantlv() {
  enchantlv_ = 0;
  clear_has_enchantlv();
}
inline ::google::protobuf::int32 equipenchanting::enchantlv() const {
  return enchantlv_;
}
inline void equipenchanting::set_enchantlv(::google::protobuf::int32 value) {
  set_has_enchantlv();
  enchantlv_ = value;
}

// optional int32 needWearQuality = 4;
inline bool equipenchanting::has_needwearquality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipenchanting::set_has_needwearquality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipenchanting::clear_has_needwearquality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipenchanting::clear_needwearquality() {
  needwearquality_ = 0;
  clear_has_needwearquality();
}
inline ::google::protobuf::int32 equipenchanting::needwearquality() const {
  return needwearquality_;
}
inline void equipenchanting::set_needwearquality(::google::protobuf::int32 value) {
  set_has_needwearquality();
  needwearquality_ = value;
}

// optional int32 equip = 5;
inline bool equipenchanting::has_equip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipenchanting::set_has_equip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipenchanting::clear_has_equip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipenchanting::clear_equip() {
  equip_ = 0;
  clear_has_equip();
}
inline ::google::protobuf::int32 equipenchanting::equip() const {
  return equip_;
}
inline void equipenchanting::set_equip(::google::protobuf::int32 value) {
  set_has_equip();
  equip_ = value;
}

// repeated .proto_ff.equipenchantingtypeDesc type = 6;
inline int equipenchanting::type_size() const {
  return type_.size();
}
inline void equipenchanting::clear_type() {
  type_.Clear();
}
inline const ::proto_ff::equipenchantingtypeDesc& equipenchanting::type(int index) const {
  return type_.Get(index);
}
inline ::proto_ff::equipenchantingtypeDesc* equipenchanting::mutable_type(int index) {
  return type_.Mutable(index);
}
inline ::proto_ff::equipenchantingtypeDesc* equipenchanting::add_type() {
  return type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingtypeDesc >&
equipenchanting::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingtypeDesc >*
equipenchanting::mutable_type() {
  return &type_;
}

// repeated .proto_ff.equipenchantingenchantDesc enchant = 7;
inline int equipenchanting::enchant_size() const {
  return enchant_.size();
}
inline void equipenchanting::clear_enchant() {
  enchant_.Clear();
}
inline const ::proto_ff::equipenchantingenchantDesc& equipenchanting::enchant(int index) const {
  return enchant_.Get(index);
}
inline ::proto_ff::equipenchantingenchantDesc* equipenchanting::mutable_enchant(int index) {
  return enchant_.Mutable(index);
}
inline ::proto_ff::equipenchantingenchantDesc* equipenchanting::add_enchant() {
  return enchant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingenchantDesc >&
equipenchanting::enchant() const {
  return enchant_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchantingenchantDesc >*
equipenchanting::mutable_enchant() {
  return &enchant_;
}

// -------------------------------------------------------------------

// Sheet_equipenchanting

// repeated .proto_ff.equipenchanting equipenchanting_List = 1;
inline int Sheet_equipenchanting::equipenchanting_list_size() const {
  return equipenchanting_list_.size();
}
inline void Sheet_equipenchanting::clear_equipenchanting_list() {
  equipenchanting_list_.Clear();
}
inline const ::proto_ff::equipenchanting& Sheet_equipenchanting::equipenchanting_list(int index) const {
  return equipenchanting_list_.Get(index);
}
inline ::proto_ff::equipenchanting* Sheet_equipenchanting::mutable_equipenchanting_list(int index) {
  return equipenchanting_list_.Mutable(index);
}
inline ::proto_ff::equipenchanting* Sheet_equipenchanting::add_equipenchanting_list() {
  return equipenchanting_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchanting >&
Sheet_equipenchanting::equipenchanting_list() const {
  return equipenchanting_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipenchanting >*
Sheet_equipenchanting::mutable_equipenchanting_list() {
  return &equipenchanting_list_;
}

// -------------------------------------------------------------------

// equipmarryattributeDesc

// optional int32 type = 1;
inline bool equipmarryattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipmarryattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipmarryattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipmarryattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipmarryattributeDesc::type() const {
  return type_;
}
inline void equipmarryattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool equipmarryattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipmarryattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipmarryattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipmarryattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 equipmarryattributeDesc::value() const {
  return value_;
}
inline void equipmarryattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// equipmarry

// optional int32 id = 1;
inline bool equipmarry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equipmarry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equipmarry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equipmarry::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 equipmarry::id() const {
  return id_;
}
inline void equipmarry::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 lv = 2;
inline bool equipmarry::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equipmarry::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equipmarry::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equipmarry::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 equipmarry::lv() const {
  return lv_;
}
inline void equipmarry::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 position = 3;
inline bool equipmarry::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equipmarry::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equipmarry::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equipmarry::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 equipmarry::position() const {
  return position_;
}
inline void equipmarry::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 type = 4;
inline bool equipmarry::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void equipmarry::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void equipmarry::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void equipmarry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 equipmarry::type() const {
  return type_;
}
inline void equipmarry::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 materialID = 5;
inline bool equipmarry::has_materialid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void equipmarry::set_has_materialid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void equipmarry::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void equipmarry::clear_materialid() {
  materialid_ = GOOGLE_LONGLONG(0);
  clear_has_materialid();
}
inline ::google::protobuf::int64 equipmarry::materialid() const {
  return materialid_;
}
inline void equipmarry::set_materialid(::google::protobuf::int64 value) {
  set_has_materialid();
  materialid_ = value;
}

// optional int32 materialEXP = 6;
inline bool equipmarry::has_materialexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void equipmarry::set_has_materialexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void equipmarry::clear_has_materialexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void equipmarry::clear_materialexp() {
  materialexp_ = 0;
  clear_has_materialexp();
}
inline ::google::protobuf::int32 equipmarry::materialexp() const {
  return materialexp_;
}
inline void equipmarry::set_materialexp(::google::protobuf::int32 value) {
  set_has_materialexp();
  materialexp_ = value;
}

// optional int32 need = 7;
inline bool equipmarry::has_need() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void equipmarry::set_has_need() {
  _has_bits_[0] |= 0x00000040u;
}
inline void equipmarry::clear_has_need() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void equipmarry::clear_need() {
  need_ = 0;
  clear_has_need();
}
inline ::google::protobuf::int32 equipmarry::need() const {
  return need_;
}
inline void equipmarry::set_need(::google::protobuf::int32 value) {
  set_has_need();
  need_ = value;
}

// repeated .proto_ff.equipmarryattributeDesc attribute = 8;
inline int equipmarry::attribute_size() const {
  return attribute_.size();
}
inline void equipmarry::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::equipmarryattributeDesc& equipmarry::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::equipmarryattributeDesc* equipmarry::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::equipmarryattributeDesc* equipmarry::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarryattributeDesc >&
equipmarry::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarryattributeDesc >*
equipmarry::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_equipmarry

// repeated .proto_ff.equipmarry equipmarry_List = 1;
inline int Sheet_equipmarry::equipmarry_list_size() const {
  return equipmarry_list_.size();
}
inline void Sheet_equipmarry::clear_equipmarry_list() {
  equipmarry_list_.Clear();
}
inline const ::proto_ff::equipmarry& Sheet_equipmarry::equipmarry_list(int index) const {
  return equipmarry_list_.Get(index);
}
inline ::proto_ff::equipmarry* Sheet_equipmarry::mutable_equipmarry_list(int index) {
  return equipmarry_list_.Mutable(index);
}
inline ::proto_ff::equipmarry* Sheet_equipmarry::add_equipmarry_list() {
  return equipmarry_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarry >&
Sheet_equipmarry::equipmarry_list() const {
  return equipmarry_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::equipmarry >*
Sheet_equipmarry::mutable_equipmarry_list() {
  return &equipmarry_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_equip_2eproto__INCLUDED
