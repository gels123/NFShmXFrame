// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indultTask.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "indultTask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* indultTaskindultTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  indultTaskindultTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_indultTaskindultTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_indultTaskindultTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* indultTasktask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  indultTasktask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_indultTasktask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_indultTasktask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_indultTask_2eproto() {
  protobuf_AddDesc_indultTask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "indultTask.proto");
  GOOGLE_CHECK(file != NULL);
  indultTaskindultTask_descriptor_ = file->message_type(0);
  static const int indultTaskindultTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, functionunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, tasknum_),
  };
  indultTaskindultTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      indultTaskindultTask_descriptor_,
      indultTaskindultTask::default_instance_,
      indultTaskindultTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTaskindultTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(indultTaskindultTask));
  Sheet_indultTaskindultTask_descriptor_ = file->message_type(1);
  static const int Sheet_indultTaskindultTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_indultTaskindultTask, indulttaskindulttask_list_),
  };
  Sheet_indultTaskindultTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_indultTaskindultTask_descriptor_,
      Sheet_indultTaskindultTask::default_instance_,
      Sheet_indultTaskindultTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_indultTaskindultTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_indultTaskindultTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_indultTaskindultTask));
  indultTasktask_descriptor_ = file->message_type(2);
  static const int indultTasktask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTasktask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTasktask, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTasktask, taskparam_),
  };
  indultTasktask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      indultTasktask_descriptor_,
      indultTasktask::default_instance_,
      indultTasktask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTasktask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indultTasktask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(indultTasktask));
  Sheet_indultTasktask_descriptor_ = file->message_type(3);
  static const int Sheet_indultTasktask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_indultTasktask, indulttasktask_list_),
  };
  Sheet_indultTasktask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_indultTasktask_descriptor_,
      Sheet_indultTasktask::default_instance_,
      Sheet_indultTasktask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_indultTasktask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_indultTasktask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_indultTasktask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_indultTask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    indultTaskindultTask_descriptor_, &indultTaskindultTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_indultTaskindultTask_descriptor_, &Sheet_indultTaskindultTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    indultTasktask_descriptor_, &indultTasktask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_indultTasktask_descriptor_, &Sheet_indultTasktask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_indultTask_2eproto() {
  delete indultTaskindultTask::default_instance_;
  delete indultTaskindultTask_reflection_;
  delete Sheet_indultTaskindultTask::default_instance_;
  delete Sheet_indultTaskindultTask_reflection_;
  delete indultTasktask::default_instance_;
  delete indultTasktask_reflection_;
  delete Sheet_indultTasktask::default_instance_;
  delete Sheet_indultTasktask_reflection_;
}

void protobuf_AddDesc_indultTask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020indultTask.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"\345\001\n\024indultTaskindultTask\022\022\n\002"
    "id\030\001 \001(\005B\006\302\377\024\002id\022\037\n\005order\030\002 \001(\005B\020\302\377\024\014\345\211\215"
    "\347\275\256\346\264\273\345\212\250\022(\n\016functionUnlock\030\003 \001(\005B\020\302\377\024\014\350"
    "\247\243\351\224\201\345\274\200\345\205\263\022\031\n\005boxid\030\004 \001(\003B\n\302\377\024\006\345\245\226\345\212\261\022$"
    "\n\006taskID\030\005 \001(\tB\024\302\377\024\014\345\214\205\345\220\253\344\273\273\345\212\241\220\301\024 \022-\n\007"
    "taskNum\030\006 \001(\005B\034\302\377\024\030\351\234\200\350\246\201\345\256\214\346\210\220\344\273\273\345\212\241\346\225\260"
    "\351\207\217\"e\n\032Sheet_indultTaskindultTask\022G\n\031ind"
    "ultTaskindultTask_List\030\001 \003(\0132\036.proto_ff."
    "indultTaskindultTaskB\004\210\301\024s\"m\n\016indultTask"
    "task\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\004task\030\002 \001(\005B\020"
    "\302\377\024\014\346\235\241\344\273\266\347\261\273\345\236\213\022\'\n\ttaskParam\030\003 \001(\tB\024\302\377\024"
    "\014\346\235\241\344\273\266\345\217\202\346\225\260\220\301\024/\"S\n\024Sheet_indultTasktas"
    "k\022;\n\023indultTasktask_List\030\001 \003(\0132\030.proto_f"
    "f.indultTasktaskB\004\210\301\024p", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "indultTask.proto", &protobuf_RegisterTypes);
  indultTaskindultTask::default_instance_ = new indultTaskindultTask();
  Sheet_indultTaskindultTask::default_instance_ = new Sheet_indultTaskindultTask();
  indultTasktask::default_instance_ = new indultTasktask();
  Sheet_indultTasktask::default_instance_ = new Sheet_indultTasktask();
  indultTaskindultTask::default_instance_->InitAsDefaultInstance();
  Sheet_indultTaskindultTask::default_instance_->InitAsDefaultInstance();
  indultTasktask::default_instance_->InitAsDefaultInstance();
  Sheet_indultTasktask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_indultTask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_indultTask_2eproto {
  StaticDescriptorInitializer_indultTask_2eproto() {
    protobuf_AddDesc_indultTask_2eproto();
  }
} static_descriptor_initializer_indultTask_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int indultTaskindultTask::kIdFieldNumber;
const int indultTaskindultTask::kOrderFieldNumber;
const int indultTaskindultTask::kFunctionUnlockFieldNumber;
const int indultTaskindultTask::kBoxidFieldNumber;
const int indultTaskindultTask::kTaskIDFieldNumber;
const int indultTaskindultTask::kTaskNumFieldNumber;
#endif  // !_MSC_VER

indultTaskindultTask::indultTaskindultTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void indultTaskindultTask::InitAsDefaultInstance() {
}

indultTaskindultTask::indultTaskindultTask(const indultTaskindultTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void indultTaskindultTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  order_ = 0;
  functionunlock_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tasknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indultTaskindultTask::~indultTaskindultTask() {
  SharedDtor();
}

void indultTaskindultTask::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
  }
}

void indultTaskindultTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* indultTaskindultTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return indultTaskindultTask_descriptor_;
}

const indultTaskindultTask& indultTaskindultTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indultTask_2eproto();
  return *default_instance_;
}

indultTaskindultTask* indultTaskindultTask::default_instance_ = NULL;

indultTaskindultTask* indultTaskindultTask::New() const {
  return new indultTaskindultTask;
}

void indultTaskindultTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    order_ = 0;
    functionunlock_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    tasknum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool indultTaskindultTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_functionUnlock;
        break;
      }

      // optional int32 functionUnlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionunlock_)));
          set_has_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taskID;
        break;
      }

      // optional string taskID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_taskNum;
        break;
      }

      // optional int32 taskNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasknum_)));
          set_has_tasknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void indultTaskindultTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional int32 functionUnlock = 3;
  if (has_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->functionunlock(), output);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->boxid(), output);
  }

  // optional string taskID = 5;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->taskid(), output);
  }

  // optional int32 taskNum = 6;
  if (has_tasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tasknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* indultTaskindultTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // optional int32 functionUnlock = 3;
  if (has_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->functionunlock(), target);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->boxid(), target);
  }

  // optional string taskID = 5;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->taskid(), target);
  }

  // optional int32 taskNum = 6;
  if (has_tasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tasknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int indultTaskindultTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 functionUnlock = 3;
    if (has_functionunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionunlock());
    }

    // optional int64 boxid = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional string taskID = 5;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // optional int32 taskNum = 6;
    if (has_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indultTaskindultTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const indultTaskindultTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const indultTaskindultTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void indultTaskindultTask::MergeFrom(const indultTaskindultTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_functionunlock()) {
      set_functionunlock(from.functionunlock());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_tasknum()) {
      set_tasknum(from.tasknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void indultTaskindultTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void indultTaskindultTask::CopyFrom(const indultTaskindultTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indultTaskindultTask::IsInitialized() const {

  return true;
}

void indultTaskindultTask::Swap(indultTaskindultTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(order_, other->order_);
    std::swap(functionunlock_, other->functionunlock_);
    std::swap(boxid_, other->boxid_);
    std::swap(taskid_, other->taskid_);
    std::swap(tasknum_, other->tasknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata indultTaskindultTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = indultTaskindultTask_descriptor_;
  metadata.reflection = indultTaskindultTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_indultTaskindultTask::kIndultTaskindultTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_indultTaskindultTask::Sheet_indultTaskindultTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_indultTaskindultTask::InitAsDefaultInstance() {
}

Sheet_indultTaskindultTask::Sheet_indultTaskindultTask(const Sheet_indultTaskindultTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_indultTaskindultTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_indultTaskindultTask::~Sheet_indultTaskindultTask() {
  SharedDtor();
}

void Sheet_indultTaskindultTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_indultTaskindultTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_indultTaskindultTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_indultTaskindultTask_descriptor_;
}

const Sheet_indultTaskindultTask& Sheet_indultTaskindultTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indultTask_2eproto();
  return *default_instance_;
}

Sheet_indultTaskindultTask* Sheet_indultTaskindultTask::default_instance_ = NULL;

Sheet_indultTaskindultTask* Sheet_indultTaskindultTask::New() const {
  return new Sheet_indultTaskindultTask;
}

void Sheet_indultTaskindultTask::Clear() {
  indulttaskindulttask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_indultTaskindultTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.indultTaskindultTask indultTaskindultTask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indultTaskindultTask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indulttaskindulttask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_indultTaskindultTask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_indultTaskindultTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.indultTaskindultTask indultTaskindultTask_List = 1;
  for (int i = 0; i < this->indulttaskindulttask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->indulttaskindulttask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_indultTaskindultTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.indultTaskindultTask indultTaskindultTask_List = 1;
  for (int i = 0; i < this->indulttaskindulttask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->indulttaskindulttask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_indultTaskindultTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.indultTaskindultTask indultTaskindultTask_List = 1;
  total_size += 1 * this->indulttaskindulttask_list_size();
  for (int i = 0; i < this->indulttaskindulttask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indulttaskindulttask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_indultTaskindultTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_indultTaskindultTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_indultTaskindultTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_indultTaskindultTask::MergeFrom(const Sheet_indultTaskindultTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  indulttaskindulttask_list_.MergeFrom(from.indulttaskindulttask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_indultTaskindultTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_indultTaskindultTask::CopyFrom(const Sheet_indultTaskindultTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_indultTaskindultTask::IsInitialized() const {

  return true;
}

void Sheet_indultTaskindultTask::Swap(Sheet_indultTaskindultTask* other) {
  if (other != this) {
    indulttaskindulttask_list_.Swap(&other->indulttaskindulttask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_indultTaskindultTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_indultTaskindultTask_descriptor_;
  metadata.reflection = Sheet_indultTaskindultTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int indultTasktask::kIdFieldNumber;
const int indultTasktask::kTaskFieldNumber;
const int indultTasktask::kTaskParamFieldNumber;
#endif  // !_MSC_VER

indultTasktask::indultTasktask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void indultTasktask::InitAsDefaultInstance() {
}

indultTasktask::indultTasktask(const indultTasktask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void indultTasktask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  task_ = 0;
  taskparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indultTasktask::~indultTasktask() {
  SharedDtor();
}

void indultTasktask::SharedDtor() {
  if (taskparam_ != &::google::protobuf::internal::kEmptyString) {
    delete taskparam_;
  }
  if (this != default_instance_) {
  }
}

void indultTasktask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* indultTasktask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return indultTasktask_descriptor_;
}

const indultTasktask& indultTasktask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indultTask_2eproto();
  return *default_instance_;
}

indultTasktask* indultTasktask::default_instance_ = NULL;

indultTasktask* indultTasktask::New() const {
  return new indultTasktask;
}

void indultTasktask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    task_ = 0;
    if (has_taskparam()) {
      if (taskparam_ != &::google::protobuf::internal::kEmptyString) {
        taskparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool indultTasktask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task;
        break;
      }

      // optional int32 task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_taskParam;
        break;
      }

      // optional string taskParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskparam().data(), this->taskparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void indultTasktask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 task = 2;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task(), output);
  }

  // optional string taskParam = 3;
  if (has_taskparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskparam().data(), this->taskparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->taskparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* indultTasktask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 task = 2;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task(), target);
  }

  // optional string taskParam = 3;
  if (has_taskparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskparam().data(), this->taskparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->taskparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int indultTasktask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 task = 2;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task());
    }

    // optional string taskParam = 3;
    if (has_taskparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indultTasktask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const indultTasktask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const indultTasktask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void indultTasktask::MergeFrom(const indultTasktask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_taskparam()) {
      set_taskparam(from.taskparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void indultTasktask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void indultTasktask::CopyFrom(const indultTasktask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indultTasktask::IsInitialized() const {

  return true;
}

void indultTasktask::Swap(indultTasktask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(task_, other->task_);
    std::swap(taskparam_, other->taskparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata indultTasktask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = indultTasktask_descriptor_;
  metadata.reflection = indultTasktask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_indultTasktask::kIndultTasktaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_indultTasktask::Sheet_indultTasktask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_indultTasktask::InitAsDefaultInstance() {
}

Sheet_indultTasktask::Sheet_indultTasktask(const Sheet_indultTasktask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_indultTasktask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_indultTasktask::~Sheet_indultTasktask() {
  SharedDtor();
}

void Sheet_indultTasktask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_indultTasktask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_indultTasktask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_indultTasktask_descriptor_;
}

const Sheet_indultTasktask& Sheet_indultTasktask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indultTask_2eproto();
  return *default_instance_;
}

Sheet_indultTasktask* Sheet_indultTasktask::default_instance_ = NULL;

Sheet_indultTasktask* Sheet_indultTasktask::New() const {
  return new Sheet_indultTasktask;
}

void Sheet_indultTasktask::Clear() {
  indulttasktask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_indultTasktask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.indultTasktask indultTasktask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indultTasktask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indulttasktask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_indultTasktask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_indultTasktask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.indultTasktask indultTasktask_List = 1;
  for (int i = 0; i < this->indulttasktask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->indulttasktask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_indultTasktask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.indultTasktask indultTasktask_List = 1;
  for (int i = 0; i < this->indulttasktask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->indulttasktask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_indultTasktask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.indultTasktask indultTasktask_List = 1;
  total_size += 1 * this->indulttasktask_list_size();
  for (int i = 0; i < this->indulttasktask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indulttasktask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_indultTasktask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_indultTasktask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_indultTasktask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_indultTasktask::MergeFrom(const Sheet_indultTasktask& from) {
  GOOGLE_CHECK_NE(&from, this);
  indulttasktask_list_.MergeFrom(from.indulttasktask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_indultTasktask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_indultTasktask::CopyFrom(const Sheet_indultTasktask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_indultTasktask::IsInitialized() const {

  return true;
}

void Sheet_indultTasktask::Swap(Sheet_indultTasktask* other) {
  if (other != this) {
    indulttasktask_list_.Swap(&other->indulttasktask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_indultTasktask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_indultTasktask_descriptor_;
  metadata.reflection = Sheet_indultTasktask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
