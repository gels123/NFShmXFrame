// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* skillskillstateBagDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skillskillstateBagDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* skillskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skillskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_skillskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_skillskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* skillbuffeffectDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skillbuffeffectDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* skillbuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skillbuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_skillbuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_skillbuff_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_skill_2eproto() {
  protobuf_AddDesc_skill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "skill.proto");
  GOOGLE_CHECK(file != NULL);
  skillskillstateBagDesc_descriptor_ = file->message_type(0);
  static const int skillskillstateBagDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, id_),
  };
  skillskillstateBagDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skillskillstateBagDesc_descriptor_,
      skillskillstateBagDesc::default_instance_,
      skillskillstateBagDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskillstateBagDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skillskillstateBagDesc));
  skillskill_descriptor_ = file->message_type(1);
  static const int skillskill_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, specialskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, cdskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, addskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, addskilltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, releasetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, processtypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, flyspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, readytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, damagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, displacetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, displacesign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, displacespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, distimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, attackdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, rangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, rangetypevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, warn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, dazetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, warntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, infomationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, summontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, summonvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, attackmindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, goalmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, damagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, attackvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, attackrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, damagevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, damagerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, addhitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, statebag_),
  };
  skillskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skillskill_descriptor_,
      skillskill::default_instance_,
      skillskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skillskill));
  Sheet_skillskill_descriptor_ = file->message_type(2);
  static const int Sheet_skillskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_skillskill, skillskill_list_),
  };
  Sheet_skillskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_skillskill_descriptor_,
      Sheet_skillskill::default_instance_,
      Sheet_skillskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_skillskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_skillskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_skillskill));
  skillbuffeffectDesc_descriptor_ = file->message_type(3);
  static const int skillbuffeffectDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuffeffectDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuffeffectDesc, param_),
  };
  skillbuffeffectDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skillbuffeffectDesc_descriptor_,
      skillbuffeffectDesc::default_instance_,
      skillbuffeffectDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuffeffectDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuffeffectDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skillbuffeffectDesc));
  skillbuff_descriptor_ = file->message_type(4);
  static const int skillbuff_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, statebagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, statebagname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, statebagicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, effectresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, starttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, startprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, starttypevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, endtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, statebagrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, statebagcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, effect_),
  };
  skillbuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skillbuff_descriptor_,
      skillbuff::default_instance_,
      skillbuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillbuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skillbuff));
  Sheet_skillbuff_descriptor_ = file->message_type(5);
  static const int Sheet_skillbuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_skillbuff, skillbuff_list_),
  };
  Sheet_skillbuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_skillbuff_descriptor_,
      Sheet_skillbuff::default_instance_,
      Sheet_skillbuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_skillbuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_skillbuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_skillbuff));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_skill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skillskillstateBagDesc_descriptor_, &skillskillstateBagDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skillskill_descriptor_, &skillskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_skillskill_descriptor_, &Sheet_skillskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skillbuffeffectDesc_descriptor_, &skillbuffeffectDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skillbuff_descriptor_, &skillbuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_skillbuff_descriptor_, &Sheet_skillbuff::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_skill_2eproto() {
  delete skillskillstateBagDesc::default_instance_;
  delete skillskillstateBagDesc_reflection_;
  delete skillskill::default_instance_;
  delete skillskill_reflection_;
  delete Sheet_skillskill::default_instance_;
  delete Sheet_skillskill_reflection_;
  delete skillbuffeffectDesc::default_instance_;
  delete skillbuffeffectDesc_reflection_;
  delete skillbuff::default_instance_;
  delete skillbuff_reflection_;
  delete Sheet_skillbuff::default_instance_;
  delete Sheet_skillbuff_reflection_;
}

void protobuf_AddDesc_skill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013skill.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\353\001\n\026skillskillstateBagDesc\022\032\n\006Tar"
    "get\030\001 \001(\005B\n\302\377\024\006\345\275\222\345\261\236\022\034\n\005Point\030\002 \001(\005B\r\302\377"
    "\024\t\347\224\237\346\225\210\347\202\271\022!\n\tParameter\030\003 \001(\tB\016\302\377\024\006\345\217\202\346"
    "\225\260\220\301\024<\022\"\n\004Rate\030\004 \001(\tB\024\302\377\024\014\346\210\220\345\212\237\345\207\240\347\216\207\220\301"
    "\024<\022\"\n\004Time\030\005 \001(\tB\024\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\220\301\024<\022\030"
    "\n\004Type\030\006 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\022\n\002ID\030\007 \001(\003B\006\302\377"
    "\024\002id\"\276\r\n\nskillskill\022\035\n\007skillID\030\001 \001(\003B\014\302\377"
    "\024\010\346\212\200\350\203\275id\022\034\n\004name\030\002 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024<"
    "\022#\n\tskillType\030\003 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236\213\022/\n"
    "\014specialSkill\030\004 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\344\270\272\347\211\271\346\256\212"
    "\346\212\200\350\203\275\022#\n\007cdSkill\030\005 \001(\005B\022\302\377\024\016CD\350\203\275\345\220\246\345\207\217"
    "\345\260\221\022\"\n\010Relation\030\006 \001(\003B\020\302\377\024\014\346\231\256\346\224\273\345\205\263\350\201\224\022"
    "\"\n\010AddSkill\030\007 \001(\003B\020\302\377\024\014\350\277\275\345\212\240\346\212\200\350\203\275\022,\n\014A"
    "ddSkillTime\030\010 \001(\005B\026\302\377\024\022\350\277\275\345\212\240\346\212\200\350\203\275\346\227\266\351\227"
    "\264\022%\n\013unlockLevel\030\t \001(\005B\020\302\377\024\014\350\247\243\351\224\201\347\255\211\347\272\247"
    "\022\036\n\004type\030\n \001(\005B\020\302\377\024\014\347\233\256\346\240\207\347\261\273\345\236\213\022\022\n\002cd\030\013"
    " \001(\005B\006\302\377\024\002cd\022+\n\010priority\030\014 \001(\005B\031\302\377\024\025\346\214\202\346"
    "\234\272\344\275\277\347\224\250\344\274\230\345\205\210\347\272\247\022#\n\010fighting\030\r \001(\tB\021\302\377\024"
    "\t\346\210\230\346\226\227\345\212\233\220\301\024<\022%\n\013releaseType\030\016 \001(\005B\020\302\377\024"
    "\014\351\207\212\346\224\276\347\261\273\345\236\213\022&\n\014processTypes\030\017 \001(\005B\020\302\377\024"
    "\014\350\277\207\347\250\213\347\261\273\345\236\213\022\"\n\010flySpeed\030\020 \001(\005B\020\302\377\024\014\351\243\236"
    "\350\241\214\351\200\237\345\272\246\022#\n\treadyTime\030\021 \001(\005B\020\302\377\024\014\345\207\206\345\244\207"
    "\346\227\266\351\227\264\022\'\n\nattackTime\030\022 \001(\005B\023\302\377\024\017\346\224\273\345\207\273\346\200"
    "\273\346\227\266\351\227\264\0221\n\ndamageTime\030\023 \001(\tB\035\302\377\024\025\344\274\244\345\256\263\347"
    "\224\237\346\225\210\346\227\266\351\227\264\347\202\271\220\301\024P\022/\n\014displaceTime\030\024 \001(\005"
    "B\031\302\377\024\025\344\275\215\347\247\273\345\274\200\345\247\213\346\227\266\351\227\264\347\202\271\022,\n\014displaceS"
    "ign\030\025 \001(\005B\026\302\377\024\022\344\275\215\347\247\273\346\255\243\350\264\237\346\240\207\350\256\260\022+\n\rdis"
    "placeSpeed\030\026 \001(\tB\024\302\377\024\014\344\275\215\347\247\273\351\200\237\345\272\246\220\301\024<\022&"
    "\n\010disTimes\030\027 \001(\tB\024\302\377\024\014\344\275\215\347\247\273\346\227\266\351\227\264\220\301\024<\022("
    "\n\016attackDistance\030\030 \001(\005B\020\302\377\024\014\346\224\273\345\207\273\350\267\235\347\246\273"
    "\022#\n\trangeType\030\031 \001(\005B\020\302\377\024\014\350\214\203\345\233\264\347\261\273\345\236\213\022/\n"
    "\016rangeTypeValue\030\032 \001(\tB\027\302\377\024\017\350\214\203\345\233\264\347\261\273\345\236\213\345"
    "\200\274\220\301\024<\022\032\n\004warn\030\033 \001(\005B\014\302\377\024\010\351\242\204\350\255\246id\022\"\n\010da"
    "zeTime\030\034 \001(\005B\020\302\377\024\014\345\217\221\345\221\206\346\227\266\351\227\264\022\"\n\010warnTi"
    "me\030\035 \001(\005B\020\302\377\024\014\351\242\204\350\255\246\346\227\266\351\227\264\022&\n\014infomation"
    "Id\030\036 \001(\tB\020\302\377\024\010\346\217\220\347\244\272ID\220\301\024<\022-\n\nsummonType"
    "\030\037 \001(\005B\031\302\377\024\025\345\217\254\345\224\244\347\211\251\344\275\215\347\275\256\347\261\273\345\236\213\022/\n\013sum"
    "monValue\030  \001(\tB\032\302\377\024\022\345\217\254\345\224\244\347\211\251\344\275\215\347\275\256\345\200\274\220\301"
    "\024<\0221\n\021attackMinDistance\030! \001(\005B\026\302\377\024\022\346\224\273\345\207"
    "\273\346\234\200\345\260\217\350\267\235\347\246\273\022*\n\ngoalMaxNum\030\" \001(\005B\026\302\377\024\022\347"
    "\233\256\346\240\207\346\234\200\345\244\247\346\225\260\351\207\217\022$\n\ndamageType\030# \001(\005B\020\302"
    "\377\024\014\344\274\244\345\256\263\347\261\273\345\236\213\0225\n\013attackValue\030$ \001(\tB \302\377"
    "\024\030\351\231\204\345\212\240\346\224\273\345\207\273\345\212\233\345\233\272\345\256\232\345\200\274\220\301\024<\0221\n\nattack"
    "Rate\030% \001(\tB\035\302\377\024\025\351\231\204\345\212\240\346\224\273\345\207\273\345\212\233\345\200\215\347\216\207\220\301\024"
    "<\0222\n\013damageValue\030& \001(\tB\035\302\377\024\025\351\231\204\345\212\240\344\274\244\345\256\263"
    "\345\233\272\345\256\232\345\200\274\220\301\024<\022.\n\ndamageRate\030\' \001(\tB\032\302\377\024\022\351"
    "\231\204\345\212\240\344\274\244\345\256\263\345\200\215\347\216\207\220\301\024d\022\'\n\naddhitrate\030( \001("
    "\005B\023\302\377\024\017\351\231\204\345\212\240\345\221\275\344\270\255\347\216\207\022E\n\010stateBag\030) \003(\013"
    "2 .proto_ff.skillskillstateBagDescB\021\302\377\024\t"
    "\347\212\266\346\200\201\345\214\205\210\301\024\020\"H\n\020Sheet_skillskill\0224\n\017ski"
    "llskill_List\030\001 \003(\0132\024.proto_ff.skillskill"
    "B\005\210\301\024\320\017\"N\n\023skillbuffeffectDesc\022\030\n\004Type\030\001"
    " \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\035\n\005Param\030\002 \001(\tB\016\302\377\024\006\345\217\202"
    "\346\225\260\220\301\024<\"\365\004\n\tskillbuff\022)\n\nstateBagID\030\001 \001("
    "\003B\025\302\377\024\021\351\231\204\345\212\240\347\212\266\346\200\201\345\214\205id\022-\n\014stateBagName"
    "\030\002 \001(\tB\027\302\377\024\017\347\212\266\346\200\201\345\214\205\345\220\215\347\247\260\220\301\024P\022-\n\014state"
    "BagIcon\030\003 \001(\tB\027\302\377\024\017\347\212\266\346\200\201\345\214\205\345\233\276\346\240\207\220\301\024<\022-"
    "\n\017effectResources\030\004 \001(\tB\024\302\377\024\014\347\211\271\346\225\210\350\267\257\345\276"
    "\204\220\301\024<\022#\n\tstartType\030\005 \001(\005B\020\302\377\024\014\347\224\237\346\225\210\346\235\241\344"
    "\273\266\022*\n\020startProbability\030\006 \001(\005B\020\302\377\024\014\347\224\237\346\225\210"
    "\346\246\202\347\216\207\0222\n\016startTypeValue\030\007 \001(\tB\032\302\377\024\022\347\224\237\346"
    "\225\210\346\235\241\344\273\266\345\217\202\346\225\260\220\301\024<\022+\n\007endType\030\010 \001(\tB\032\302\377\024"
    "\022\345\270\270\350\247\204\347\273\223\346\235\237\346\235\241\344\273\266\220\301\024<\022\036\n\004save\030\t \001(\005B\020\302"
    "\377\024\014\346\230\257\345\220\246\345\255\230\347\233\230\0229\n\014stateBagRule\030\n \001(\tB#\302"
    "\377\024\033\345\220\214\344\270\200\347\212\266\346\200\201\345\214\205\345\217\240\345\212\240\350\247\204\345\210\231\220\301\024<\022\037\n\005la"
    "bel\030\013 \001(\005B\020\302\377\024\014\347\212\266\346\200\201\346\240\207\347\255\276\022+\n\nstateBagC"
    "d\030\014 \001(\tB\027\302\377\024\017\347\212\266\346\200\201\345\214\205\345\206\267\345\215\264\220\301\024<\022\026\n\004mask"
    "\030\r \003(\005B\010\302\377\024\000\210\301\024 \022=\n\006effect\030\016 \003(\0132\035.proto"
    "_ff.skillbuffeffectDescB\016\302\377\024\006\346\225\210\346\236\234\210\301\024\005\""
    "E\n\017Sheet_skillbuff\0222\n\016skillbuff_List\030\001 \003"
    "(\0132\023.proto_ff.skillbuffB\005\210\301\024\220\003", 2870);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "skill.proto", &protobuf_RegisterTypes);
  skillskillstateBagDesc::default_instance_ = new skillskillstateBagDesc();
  skillskill::default_instance_ = new skillskill();
  Sheet_skillskill::default_instance_ = new Sheet_skillskill();
  skillbuffeffectDesc::default_instance_ = new skillbuffeffectDesc();
  skillbuff::default_instance_ = new skillbuff();
  Sheet_skillbuff::default_instance_ = new Sheet_skillbuff();
  skillskillstateBagDesc::default_instance_->InitAsDefaultInstance();
  skillskill::default_instance_->InitAsDefaultInstance();
  Sheet_skillskill::default_instance_->InitAsDefaultInstance();
  skillbuffeffectDesc::default_instance_->InitAsDefaultInstance();
  skillbuff::default_instance_->InitAsDefaultInstance();
  Sheet_skillbuff::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skill_2eproto {
  StaticDescriptorInitializer_skill_2eproto() {
    protobuf_AddDesc_skill_2eproto();
  }
} static_descriptor_initializer_skill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int skillskillstateBagDesc::kTargetFieldNumber;
const int skillskillstateBagDesc::kPointFieldNumber;
const int skillskillstateBagDesc::kParameterFieldNumber;
const int skillskillstateBagDesc::kRateFieldNumber;
const int skillskillstateBagDesc::kTimeFieldNumber;
const int skillskillstateBagDesc::kTypeFieldNumber;
const int skillskillstateBagDesc::kIDFieldNumber;
#endif  // !_MSC_VER

skillskillstateBagDesc::skillskillstateBagDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skillskillstateBagDesc::InitAsDefaultInstance() {
}

skillskillstateBagDesc::skillskillstateBagDesc(const skillskillstateBagDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skillskillstateBagDesc::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
  point_ = 0;
  parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skillskillstateBagDesc::~skillskillstateBagDesc() {
  SharedDtor();
}

void skillskillstateBagDesc::SharedDtor() {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_;
  }
  if (rate_ != &::google::protobuf::internal::kEmptyString) {
    delete rate_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void skillskillstateBagDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skillskillstateBagDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skillskillstateBagDesc_descriptor_;
}

const skillskillstateBagDesc& skillskillstateBagDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

skillskillstateBagDesc* skillskillstateBagDesc::default_instance_ = NULL;

skillskillstateBagDesc* skillskillstateBagDesc::New() const {
  return new skillskillstateBagDesc;
}

void skillskillstateBagDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0;
    point_ = 0;
    if (has_parameter()) {
      if (parameter_ != &::google::protobuf::internal::kEmptyString) {
        parameter_->clear();
      }
    }
    if (has_rate()) {
      if (rate_ != &::google::protobuf::internal::kEmptyString) {
        rate_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    type_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skillskillstateBagDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Point;
        break;
      }

      // optional int32 Point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Parameter;
        break;
      }

      // optional string Parameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameter().data(), this->parameter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Rate;
        break;
      }

      // optional string Rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rate().data(), this->rate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Time;
        break;
      }

      // optional string Time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Type;
        break;
      }

      // optional int32 Type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ID;
        break;
      }

      // optional int64 ID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skillskillstateBagDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  // optional int32 Point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // optional string Parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parameter(), output);
  }

  // optional string Rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rate().data(), this->rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rate(), output);
  }

  // optional string Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  // optional int32 Type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional int64 ID = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skillskillstateBagDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  // optional int32 Point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // optional string Parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameter(), target);
  }

  // optional string Rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rate().data(), this->rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rate(), target);
  }

  // optional string Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // optional int32 Type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // optional int64 ID = 7;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skillskillstateBagDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 Point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional string Parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter());
    }

    // optional string Rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rate());
    }

    // optional string Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional int32 Type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 ID = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skillskillstateBagDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skillskillstateBagDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skillskillstateBagDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skillskillstateBagDesc::MergeFrom(const skillskillstateBagDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skillskillstateBagDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skillskillstateBagDesc::CopyFrom(const skillskillstateBagDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skillskillstateBagDesc::IsInitialized() const {

  return true;
}

void skillskillstateBagDesc::Swap(skillskillstateBagDesc* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(point_, other->point_);
    std::swap(parameter_, other->parameter_);
    std::swap(rate_, other->rate_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skillskillstateBagDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skillskillstateBagDesc_descriptor_;
  metadata.reflection = skillskillstateBagDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skillskill::kSkillIDFieldNumber;
const int skillskill::kNameFieldNumber;
const int skillskill::kSkillTypeFieldNumber;
const int skillskill::kSpecialSkillFieldNumber;
const int skillskill::kCdSkillFieldNumber;
const int skillskill::kRelationFieldNumber;
const int skillskill::kAddSkillFieldNumber;
const int skillskill::kAddSkillTimeFieldNumber;
const int skillskill::kUnlockLevelFieldNumber;
const int skillskill::kTypeFieldNumber;
const int skillskill::kCdFieldNumber;
const int skillskill::kPriorityFieldNumber;
const int skillskill::kFightingFieldNumber;
const int skillskill::kReleaseTypeFieldNumber;
const int skillskill::kProcessTypesFieldNumber;
const int skillskill::kFlySpeedFieldNumber;
const int skillskill::kReadyTimeFieldNumber;
const int skillskill::kAttackTimeFieldNumber;
const int skillskill::kDamageTimeFieldNumber;
const int skillskill::kDisplaceTimeFieldNumber;
const int skillskill::kDisplaceSignFieldNumber;
const int skillskill::kDisplaceSpeedFieldNumber;
const int skillskill::kDisTimesFieldNumber;
const int skillskill::kAttackDistanceFieldNumber;
const int skillskill::kRangeTypeFieldNumber;
const int skillskill::kRangeTypeValueFieldNumber;
const int skillskill::kWarnFieldNumber;
const int skillskill::kDazeTimeFieldNumber;
const int skillskill::kWarnTimeFieldNumber;
const int skillskill::kInfomationIdFieldNumber;
const int skillskill::kSummonTypeFieldNumber;
const int skillskill::kSummonValueFieldNumber;
const int skillskill::kAttackMinDistanceFieldNumber;
const int skillskill::kGoalMaxNumFieldNumber;
const int skillskill::kDamageTypeFieldNumber;
const int skillskill::kAttackValueFieldNumber;
const int skillskill::kAttackRateFieldNumber;
const int skillskill::kDamageValueFieldNumber;
const int skillskill::kDamageRateFieldNumber;
const int skillskill::kAddhitrateFieldNumber;
const int skillskill::kStateBagFieldNumber;
#endif  // !_MSC_VER

skillskill::skillskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skillskill::InitAsDefaultInstance() {
}

skillskill::skillskill(const skillskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skillskill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skilltype_ = 0;
  specialskill_ = 0;
  cdskill_ = 0;
  relation_ = GOOGLE_LONGLONG(0);
  addskill_ = GOOGLE_LONGLONG(0);
  addskilltime_ = 0;
  unlocklevel_ = 0;
  type_ = 0;
  cd_ = 0;
  priority_ = 0;
  fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  releasetype_ = 0;
  processtypes_ = 0;
  flyspeed_ = 0;
  readytime_ = 0;
  attacktime_ = 0;
  damagetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displacetime_ = 0;
  displacesign_ = 0;
  displacespeed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  distimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackdistance_ = 0;
  rangetype_ = 0;
  rangetypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  warn_ = 0;
  dazetime_ = 0;
  warntime_ = 0;
  infomationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  summontype_ = 0;
  summonvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackmindistance_ = 0;
  goalmaxnum_ = 0;
  damagetype_ = 0;
  attackvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damagevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damagerate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addhitrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skillskill::~skillskill() {
  SharedDtor();
}

void skillskill::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (fighting_ != &::google::protobuf::internal::kEmptyString) {
    delete fighting_;
  }
  if (damagetime_ != &::google::protobuf::internal::kEmptyString) {
    delete damagetime_;
  }
  if (displacespeed_ != &::google::protobuf::internal::kEmptyString) {
    delete displacespeed_;
  }
  if (distimes_ != &::google::protobuf::internal::kEmptyString) {
    delete distimes_;
  }
  if (rangetypevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete rangetypevalue_;
  }
  if (infomationid_ != &::google::protobuf::internal::kEmptyString) {
    delete infomationid_;
  }
  if (summonvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete summonvalue_;
  }
  if (attackvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attackvalue_;
  }
  if (attackrate_ != &::google::protobuf::internal::kEmptyString) {
    delete attackrate_;
  }
  if (damagevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete damagevalue_;
  }
  if (damagerate_ != &::google::protobuf::internal::kEmptyString) {
    delete damagerate_;
  }
  if (this != default_instance_) {
  }
}

void skillskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skillskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skillskill_descriptor_;
}

const skillskill& skillskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

skillskill* skillskill::default_instance_ = NULL;

skillskill* skillskill::New() const {
  return new skillskill;
}

void skillskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    skilltype_ = 0;
    specialskill_ = 0;
    cdskill_ = 0;
    relation_ = GOOGLE_LONGLONG(0);
    addskill_ = GOOGLE_LONGLONG(0);
    addskilltime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unlocklevel_ = 0;
    type_ = 0;
    cd_ = 0;
    priority_ = 0;
    if (has_fighting()) {
      if (fighting_ != &::google::protobuf::internal::kEmptyString) {
        fighting_->clear();
      }
    }
    releasetype_ = 0;
    processtypes_ = 0;
    flyspeed_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    readytime_ = 0;
    attacktime_ = 0;
    if (has_damagetime()) {
      if (damagetime_ != &::google::protobuf::internal::kEmptyString) {
        damagetime_->clear();
      }
    }
    displacetime_ = 0;
    displacesign_ = 0;
    if (has_displacespeed()) {
      if (displacespeed_ != &::google::protobuf::internal::kEmptyString) {
        displacespeed_->clear();
      }
    }
    if (has_distimes()) {
      if (distimes_ != &::google::protobuf::internal::kEmptyString) {
        distimes_->clear();
      }
    }
    attackdistance_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    rangetype_ = 0;
    if (has_rangetypevalue()) {
      if (rangetypevalue_ != &::google::protobuf::internal::kEmptyString) {
        rangetypevalue_->clear();
      }
    }
    warn_ = 0;
    dazetime_ = 0;
    warntime_ = 0;
    if (has_infomationid()) {
      if (infomationid_ != &::google::protobuf::internal::kEmptyString) {
        infomationid_->clear();
      }
    }
    summontype_ = 0;
    if (has_summonvalue()) {
      if (summonvalue_ != &::google::protobuf::internal::kEmptyString) {
        summonvalue_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    attackmindistance_ = 0;
    goalmaxnum_ = 0;
    damagetype_ = 0;
    if (has_attackvalue()) {
      if (attackvalue_ != &::google::protobuf::internal::kEmptyString) {
        attackvalue_->clear();
      }
    }
    if (has_attackrate()) {
      if (attackrate_ != &::google::protobuf::internal::kEmptyString) {
        attackrate_->clear();
      }
    }
    if (has_damagevalue()) {
      if (damagevalue_ != &::google::protobuf::internal::kEmptyString) {
        damagevalue_->clear();
      }
    }
    if (has_damagerate()) {
      if (damagerate_ != &::google::protobuf::internal::kEmptyString) {
        damagerate_->clear();
      }
    }
    addhitrate_ = 0;
  }
  statebag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skillskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillType;
        break;
      }

      // optional int32 skillType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));
          set_has_skilltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_specialSkill;
        break;
      }

      // optional int32 specialSkill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialskill_)));
          set_has_specialskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cdSkill;
        break;
      }

      // optional int32 cdSkill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdskill_)));
          set_has_cdskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Relation;
        break;
      }

      // optional int64 Relation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AddSkill;
        break;
      }

      // optional int64 AddSkill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addskill_)));
          set_has_addskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AddSkillTime;
        break;
      }

      // optional int32 AddSkillTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddSkillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addskilltime_)));
          set_has_addskilltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unlockLevel;
        break;
      }

      // optional int32 unlockLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional int32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cd;
        break;
      }

      // optional int32 cd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_priority;
        break;
      }

      // optional int32 priority = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_fighting;
        break;
      }

      // optional string fighting = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fighting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fighting().data(), this->fighting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_releaseType;
        break;
      }

      // optional int32 releaseType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_releaseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &releasetype_)));
          set_has_releasetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_processTypes;
        break;
      }

      // optional int32 processTypes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processTypes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processtypes_)));
          set_has_processtypes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_flySpeed;
        break;
      }

      // optional int32 flySpeed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flyspeed_)));
          set_has_flyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_readyTime;
        break;
      }

      // optional int32 readyTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readytime_)));
          set_has_readytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_attackTime;
        break;
      }

      // optional int32 attackTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacktime_)));
          set_has_attacktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_damageTime;
        break;
      }

      // optional string damageTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damagetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->damagetime().data(), this->damagetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_displaceTime;
        break;
      }

      // optional int32 displaceTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displaceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displacetime_)));
          set_has_displacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_displaceSign;
        break;
      }

      // optional int32 displaceSign = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displaceSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displacesign_)));
          set_has_displacesign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_displaceSpeed;
        break;
      }

      // optional string displaceSpeed = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displaceSpeed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displacespeed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displacespeed().data(), this->displacespeed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_disTimes;
        break;
      }

      // optional string disTimes = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->distimes().data(), this->distimes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_attackDistance;
        break;
      }

      // optional int32 attackDistance = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackdistance_)));
          set_has_attackdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_rangeType;
        break;
      }

      // optional int32 rangeType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangetype_)));
          set_has_rangetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_rangeTypeValue;
        break;
      }

      // optional string rangeTypeValue = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rangeTypeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rangetypevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rangetypevalue().data(), this->rangetypevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_warn;
        break;
      }

      // optional int32 warn = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warn_)));
          set_has_warn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_dazeTime;
        break;
      }

      // optional int32 dazeTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dazeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dazetime_)));
          set_has_dazetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_warnTime;
        break;
      }

      // optional int32 warnTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warnTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warntime_)));
          set_has_warntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_infomationId;
        break;
      }

      // optional string infomationId = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infomationId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infomationid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infomationid().data(), this->infomationid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_summonType;
        break;
      }

      // optional int32 summonType = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &summontype_)));
          set_has_summontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_summonValue;
        break;
      }

      // optional string summonValue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summonValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summonvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->summonvalue().data(), this->summonvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_attackMinDistance;
        break;
      }

      // optional int32 attackMinDistance = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackMinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackmindistance_)));
          set_has_attackmindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_goalMaxNum;
        break;
      }

      // optional int32 goalMaxNum = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goalMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goalmaxnum_)));
          set_has_goalmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_damageType;
        break;
      }

      // optional int32 damageType = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagetype_)));
          set_has_damagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_attackValue;
        break;
      }

      // optional string attackValue = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackvalue().data(), this->attackvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_attackRate;
        break;
      }

      // optional string attackRate = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackrate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackrate().data(), this->attackrate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_damageValue;
        break;
      }

      // optional string damageValue = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damagevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->damagevalue().data(), this->damagevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_damageRate;
        break;
      }

      // optional string damageRate = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damagerate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->damagerate().data(), this->damagerate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_addhitrate;
        break;
      }

      // optional int32 addhitrate = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addhitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhitrate_)));
          set_has_addhitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_stateBag;
        break;
      }

      // repeated .proto_ff.skillskillstateBagDesc stateBag = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statebag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_stateBag;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skillskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skillid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 skillType = 3;
  if (has_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skilltype(), output);
  }

  // optional int32 specialSkill = 4;
  if (has_specialskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->specialskill(), output);
  }

  // optional int32 cdSkill = 5;
  if (has_cdskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cdskill(), output);
  }

  // optional int64 Relation = 6;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->relation(), output);
  }

  // optional int64 AddSkill = 7;
  if (has_addskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->addskill(), output);
  }

  // optional int32 AddSkillTime = 8;
  if (has_addskilltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->addskilltime(), output);
  }

  // optional int32 unlockLevel = 9;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->unlocklevel(), output);
  }

  // optional int32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  // optional int32 cd = 11;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cd(), output);
  }

  // optional int32 priority = 12;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->priority(), output);
  }

  // optional string fighting = 13;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fighting().data(), this->fighting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->fighting(), output);
  }

  // optional int32 releaseType = 14;
  if (has_releasetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->releasetype(), output);
  }

  // optional int32 processTypes = 15;
  if (has_processtypes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->processtypes(), output);
  }

  // optional int32 flySpeed = 16;
  if (has_flyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->flyspeed(), output);
  }

  // optional int32 readyTime = 17;
  if (has_readytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->readytime(), output);
  }

  // optional int32 attackTime = 18;
  if (has_attacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->attacktime(), output);
  }

  // optional string damageTime = 19;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagetime().data(), this->damagetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->damagetime(), output);
  }

  // optional int32 displaceTime = 20;
  if (has_displacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->displacetime(), output);
  }

  // optional int32 displaceSign = 21;
  if (has_displacesign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->displacesign(), output);
  }

  // optional string displaceSpeed = 22;
  if (has_displacespeed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displacespeed().data(), this->displacespeed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->displacespeed(), output);
  }

  // optional string disTimes = 23;
  if (has_distimes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->distimes().data(), this->distimes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->distimes(), output);
  }

  // optional int32 attackDistance = 24;
  if (has_attackdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->attackdistance(), output);
  }

  // optional int32 rangeType = 25;
  if (has_rangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->rangetype(), output);
  }

  // optional string rangeTypeValue = 26;
  if (has_rangetypevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rangetypevalue().data(), this->rangetypevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->rangetypevalue(), output);
  }

  // optional int32 warn = 27;
  if (has_warn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->warn(), output);
  }

  // optional int32 dazeTime = 28;
  if (has_dazetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->dazetime(), output);
  }

  // optional int32 warnTime = 29;
  if (has_warntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->warntime(), output);
  }

  // optional string infomationId = 30;
  if (has_infomationid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infomationid().data(), this->infomationid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->infomationid(), output);
  }

  // optional int32 summonType = 31;
  if (has_summontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->summontype(), output);
  }

  // optional string summonValue = 32;
  if (has_summonvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summonvalue().data(), this->summonvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->summonvalue(), output);
  }

  // optional int32 attackMinDistance = 33;
  if (has_attackmindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->attackmindistance(), output);
  }

  // optional int32 goalMaxNum = 34;
  if (has_goalmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->goalmaxnum(), output);
  }

  // optional int32 damageType = 35;
  if (has_damagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->damagetype(), output);
  }

  // optional string attackValue = 36;
  if (has_attackvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackvalue().data(), this->attackvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->attackvalue(), output);
  }

  // optional string attackRate = 37;
  if (has_attackrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackrate().data(), this->attackrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->attackrate(), output);
  }

  // optional string damageValue = 38;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagevalue().data(), this->damagevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->damagevalue(), output);
  }

  // optional string damageRate = 39;
  if (has_damagerate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagerate().data(), this->damagerate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->damagerate(), output);
  }

  // optional int32 addhitrate = 40;
  if (has_addhitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->addhitrate(), output);
  }

  // repeated .proto_ff.skillskillstateBagDesc stateBag = 41;
  for (int i = 0; i < this->statebag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->statebag(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skillskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skillid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 skillType = 3;
  if (has_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skilltype(), target);
  }

  // optional int32 specialSkill = 4;
  if (has_specialskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->specialskill(), target);
  }

  // optional int32 cdSkill = 5;
  if (has_cdskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cdskill(), target);
  }

  // optional int64 Relation = 6;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->relation(), target);
  }

  // optional int64 AddSkill = 7;
  if (has_addskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->addskill(), target);
  }

  // optional int32 AddSkillTime = 8;
  if (has_addskilltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->addskilltime(), target);
  }

  // optional int32 unlockLevel = 9;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->unlocklevel(), target);
  }

  // optional int32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  // optional int32 cd = 11;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cd(), target);
  }

  // optional int32 priority = 12;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->priority(), target);
  }

  // optional string fighting = 13;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fighting().data(), this->fighting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->fighting(), target);
  }

  // optional int32 releaseType = 14;
  if (has_releasetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->releasetype(), target);
  }

  // optional int32 processTypes = 15;
  if (has_processtypes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->processtypes(), target);
  }

  // optional int32 flySpeed = 16;
  if (has_flyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->flyspeed(), target);
  }

  // optional int32 readyTime = 17;
  if (has_readytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->readytime(), target);
  }

  // optional int32 attackTime = 18;
  if (has_attacktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->attacktime(), target);
  }

  // optional string damageTime = 19;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagetime().data(), this->damagetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->damagetime(), target);
  }

  // optional int32 displaceTime = 20;
  if (has_displacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->displacetime(), target);
  }

  // optional int32 displaceSign = 21;
  if (has_displacesign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->displacesign(), target);
  }

  // optional string displaceSpeed = 22;
  if (has_displacespeed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displacespeed().data(), this->displacespeed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->displacespeed(), target);
  }

  // optional string disTimes = 23;
  if (has_distimes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->distimes().data(), this->distimes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->distimes(), target);
  }

  // optional int32 attackDistance = 24;
  if (has_attackdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->attackdistance(), target);
  }

  // optional int32 rangeType = 25;
  if (has_rangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->rangetype(), target);
  }

  // optional string rangeTypeValue = 26;
  if (has_rangetypevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rangetypevalue().data(), this->rangetypevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->rangetypevalue(), target);
  }

  // optional int32 warn = 27;
  if (has_warn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->warn(), target);
  }

  // optional int32 dazeTime = 28;
  if (has_dazetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->dazetime(), target);
  }

  // optional int32 warnTime = 29;
  if (has_warntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->warntime(), target);
  }

  // optional string infomationId = 30;
  if (has_infomationid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infomationid().data(), this->infomationid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->infomationid(), target);
  }

  // optional int32 summonType = 31;
  if (has_summontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->summontype(), target);
  }

  // optional string summonValue = 32;
  if (has_summonvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summonvalue().data(), this->summonvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->summonvalue(), target);
  }

  // optional int32 attackMinDistance = 33;
  if (has_attackmindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->attackmindistance(), target);
  }

  // optional int32 goalMaxNum = 34;
  if (has_goalmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->goalmaxnum(), target);
  }

  // optional int32 damageType = 35;
  if (has_damagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->damagetype(), target);
  }

  // optional string attackValue = 36;
  if (has_attackvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackvalue().data(), this->attackvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->attackvalue(), target);
  }

  // optional string attackRate = 37;
  if (has_attackrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackrate().data(), this->attackrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->attackrate(), target);
  }

  // optional string damageValue = 38;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagevalue().data(), this->damagevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->damagevalue(), target);
  }

  // optional string damageRate = 39;
  if (has_damagerate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagerate().data(), this->damagerate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->damagerate(), target);
  }

  // optional int32 addhitrate = 40;
  if (has_addhitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->addhitrate(), target);
  }

  // repeated .proto_ff.skillskillstateBagDesc stateBag = 41;
  for (int i = 0; i < this->statebag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->statebag(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skillskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 skillType = 3;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltype());
    }

    // optional int32 specialSkill = 4;
    if (has_specialskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialskill());
    }

    // optional int32 cdSkill = 5;
    if (has_cdskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdskill());
    }

    // optional int64 Relation = 6;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relation());
    }

    // optional int64 AddSkill = 7;
    if (has_addskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addskill());
    }

    // optional int32 AddSkillTime = 8;
    if (has_addskilltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addskilltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 unlockLevel = 9;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlocklevel());
    }

    // optional int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cd = 11;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional int32 priority = 12;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string fighting = 13;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fighting());
    }

    // optional int32 releaseType = 14;
    if (has_releasetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->releasetype());
    }

    // optional int32 processTypes = 15;
    if (has_processtypes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processtypes());
    }

    // optional int32 flySpeed = 16;
    if (has_flyspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flyspeed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 readyTime = 17;
    if (has_readytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readytime());
    }

    // optional int32 attackTime = 18;
    if (has_attacktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktime());
    }

    // optional string damageTime = 19;
    if (has_damagetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damagetime());
    }

    // optional int32 displaceTime = 20;
    if (has_displacetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displacetime());
    }

    // optional int32 displaceSign = 21;
    if (has_displacesign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displacesign());
    }

    // optional string displaceSpeed = 22;
    if (has_displacespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displacespeed());
    }

    // optional string disTimes = 23;
    if (has_distimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->distimes());
    }

    // optional int32 attackDistance = 24;
    if (has_attackdistance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackdistance());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 rangeType = 25;
    if (has_rangetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rangetype());
    }

    // optional string rangeTypeValue = 26;
    if (has_rangetypevalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rangetypevalue());
    }

    // optional int32 warn = 27;
    if (has_warn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warn());
    }

    // optional int32 dazeTime = 28;
    if (has_dazetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dazetime());
    }

    // optional int32 warnTime = 29;
    if (has_warntime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warntime());
    }

    // optional string infomationId = 30;
    if (has_infomationid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infomationid());
    }

    // optional int32 summonType = 31;
    if (has_summontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->summontype());
    }

    // optional string summonValue = 32;
    if (has_summonvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summonvalue());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 attackMinDistance = 33;
    if (has_attackmindistance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackmindistance());
    }

    // optional int32 goalMaxNum = 34;
    if (has_goalmaxnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goalmaxnum());
    }

    // optional int32 damageType = 35;
    if (has_damagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagetype());
    }

    // optional string attackValue = 36;
    if (has_attackvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackvalue());
    }

    // optional string attackRate = 37;
    if (has_attackrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackrate());
    }

    // optional string damageValue = 38;
    if (has_damagevalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damagevalue());
    }

    // optional string damageRate = 39;
    if (has_damagerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damagerate());
    }

    // optional int32 addhitrate = 40;
    if (has_addhitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhitrate());
    }

  }
  // repeated .proto_ff.skillskillstateBagDesc stateBag = 41;
  total_size += 2 * this->statebag_size();
  for (int i = 0; i < this->statebag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statebag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skillskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skillskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skillskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skillskill::MergeFrom(const skillskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  statebag_.MergeFrom(from.statebag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_skilltype()) {
      set_skilltype(from.skilltype());
    }
    if (from.has_specialskill()) {
      set_specialskill(from.specialskill());
    }
    if (from.has_cdskill()) {
      set_cdskill(from.cdskill());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_addskill()) {
      set_addskill(from.addskill());
    }
    if (from.has_addskilltime()) {
      set_addskilltime(from.addskilltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_releasetype()) {
      set_releasetype(from.releasetype());
    }
    if (from.has_processtypes()) {
      set_processtypes(from.processtypes());
    }
    if (from.has_flyspeed()) {
      set_flyspeed(from.flyspeed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_readytime()) {
      set_readytime(from.readytime());
    }
    if (from.has_attacktime()) {
      set_attacktime(from.attacktime());
    }
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
    if (from.has_displacetime()) {
      set_displacetime(from.displacetime());
    }
    if (from.has_displacesign()) {
      set_displacesign(from.displacesign());
    }
    if (from.has_displacespeed()) {
      set_displacespeed(from.displacespeed());
    }
    if (from.has_distimes()) {
      set_distimes(from.distimes());
    }
    if (from.has_attackdistance()) {
      set_attackdistance(from.attackdistance());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_rangetype()) {
      set_rangetype(from.rangetype());
    }
    if (from.has_rangetypevalue()) {
      set_rangetypevalue(from.rangetypevalue());
    }
    if (from.has_warn()) {
      set_warn(from.warn());
    }
    if (from.has_dazetime()) {
      set_dazetime(from.dazetime());
    }
    if (from.has_warntime()) {
      set_warntime(from.warntime());
    }
    if (from.has_infomationid()) {
      set_infomationid(from.infomationid());
    }
    if (from.has_summontype()) {
      set_summontype(from.summontype());
    }
    if (from.has_summonvalue()) {
      set_summonvalue(from.summonvalue());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_attackmindistance()) {
      set_attackmindistance(from.attackmindistance());
    }
    if (from.has_goalmaxnum()) {
      set_goalmaxnum(from.goalmaxnum());
    }
    if (from.has_damagetype()) {
      set_damagetype(from.damagetype());
    }
    if (from.has_attackvalue()) {
      set_attackvalue(from.attackvalue());
    }
    if (from.has_attackrate()) {
      set_attackrate(from.attackrate());
    }
    if (from.has_damagevalue()) {
      set_damagevalue(from.damagevalue());
    }
    if (from.has_damagerate()) {
      set_damagerate(from.damagerate());
    }
    if (from.has_addhitrate()) {
      set_addhitrate(from.addhitrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skillskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skillskill::CopyFrom(const skillskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skillskill::IsInitialized() const {

  return true;
}

void skillskill::Swap(skillskill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(name_, other->name_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(specialskill_, other->specialskill_);
    std::swap(cdskill_, other->cdskill_);
    std::swap(relation_, other->relation_);
    std::swap(addskill_, other->addskill_);
    std::swap(addskilltime_, other->addskilltime_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(type_, other->type_);
    std::swap(cd_, other->cd_);
    std::swap(priority_, other->priority_);
    std::swap(fighting_, other->fighting_);
    std::swap(releasetype_, other->releasetype_);
    std::swap(processtypes_, other->processtypes_);
    std::swap(flyspeed_, other->flyspeed_);
    std::swap(readytime_, other->readytime_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(damagetime_, other->damagetime_);
    std::swap(displacetime_, other->displacetime_);
    std::swap(displacesign_, other->displacesign_);
    std::swap(displacespeed_, other->displacespeed_);
    std::swap(distimes_, other->distimes_);
    std::swap(attackdistance_, other->attackdistance_);
    std::swap(rangetype_, other->rangetype_);
    std::swap(rangetypevalue_, other->rangetypevalue_);
    std::swap(warn_, other->warn_);
    std::swap(dazetime_, other->dazetime_);
    std::swap(warntime_, other->warntime_);
    std::swap(infomationid_, other->infomationid_);
    std::swap(summontype_, other->summontype_);
    std::swap(summonvalue_, other->summonvalue_);
    std::swap(attackmindistance_, other->attackmindistance_);
    std::swap(goalmaxnum_, other->goalmaxnum_);
    std::swap(damagetype_, other->damagetype_);
    std::swap(attackvalue_, other->attackvalue_);
    std::swap(attackrate_, other->attackrate_);
    std::swap(damagevalue_, other->damagevalue_);
    std::swap(damagerate_, other->damagerate_);
    std::swap(addhitrate_, other->addhitrate_);
    statebag_.Swap(&other->statebag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skillskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skillskill_descriptor_;
  metadata.reflection = skillskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_skillskill::kSkillskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_skillskill::Sheet_skillskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_skillskill::InitAsDefaultInstance() {
}

Sheet_skillskill::Sheet_skillskill(const Sheet_skillskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_skillskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_skillskill::~Sheet_skillskill() {
  SharedDtor();
}

void Sheet_skillskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_skillskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_skillskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_skillskill_descriptor_;
}

const Sheet_skillskill& Sheet_skillskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Sheet_skillskill* Sheet_skillskill::default_instance_ = NULL;

Sheet_skillskill* Sheet_skillskill::New() const {
  return new Sheet_skillskill;
}

void Sheet_skillskill::Clear() {
  skillskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_skillskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.skillskill skillskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_skillskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.skillskill skillskill_List = 1;
  for (int i = 0; i < this->skillskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_skillskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.skillskill skillskill_List = 1;
  for (int i = 0; i < this->skillskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_skillskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.skillskill skillskill_List = 1;
  total_size += 1 * this->skillskill_list_size();
  for (int i = 0; i < this->skillskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_skillskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_skillskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_skillskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_skillskill::MergeFrom(const Sheet_skillskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillskill_list_.MergeFrom(from.skillskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_skillskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_skillskill::CopyFrom(const Sheet_skillskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_skillskill::IsInitialized() const {

  return true;
}

void Sheet_skillskill::Swap(Sheet_skillskill* other) {
  if (other != this) {
    skillskill_list_.Swap(&other->skillskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_skillskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_skillskill_descriptor_;
  metadata.reflection = Sheet_skillskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skillbuffeffectDesc::kTypeFieldNumber;
const int skillbuffeffectDesc::kParamFieldNumber;
#endif  // !_MSC_VER

skillbuffeffectDesc::skillbuffeffectDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skillbuffeffectDesc::InitAsDefaultInstance() {
}

skillbuffeffectDesc::skillbuffeffectDesc(const skillbuffeffectDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skillbuffeffectDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skillbuffeffectDesc::~skillbuffeffectDesc() {
  SharedDtor();
}

void skillbuffeffectDesc::SharedDtor() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void skillbuffeffectDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skillbuffeffectDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skillbuffeffectDesc_descriptor_;
}

const skillbuffeffectDesc& skillbuffeffectDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

skillbuffeffectDesc* skillbuffeffectDesc::default_instance_ = NULL;

skillbuffeffectDesc* skillbuffeffectDesc::New() const {
  return new skillbuffeffectDesc;
}

void skillbuffeffectDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skillbuffeffectDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Param;
        break;
      }

      // optional string Param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skillbuffeffectDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string Param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skillbuffeffectDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string Param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skillbuffeffectDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string Param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skillbuffeffectDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skillbuffeffectDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skillbuffeffectDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skillbuffeffectDesc::MergeFrom(const skillbuffeffectDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skillbuffeffectDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skillbuffeffectDesc::CopyFrom(const skillbuffeffectDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skillbuffeffectDesc::IsInitialized() const {

  return true;
}

void skillbuffeffectDesc::Swap(skillbuffeffectDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skillbuffeffectDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skillbuffeffectDesc_descriptor_;
  metadata.reflection = skillbuffeffectDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skillbuff::kStateBagIDFieldNumber;
const int skillbuff::kStateBagNameFieldNumber;
const int skillbuff::kStateBagIconFieldNumber;
const int skillbuff::kEffectResourcesFieldNumber;
const int skillbuff::kStartTypeFieldNumber;
const int skillbuff::kStartProbabilityFieldNumber;
const int skillbuff::kStartTypeValueFieldNumber;
const int skillbuff::kEndTypeFieldNumber;
const int skillbuff::kSaveFieldNumber;
const int skillbuff::kStateBagRuleFieldNumber;
const int skillbuff::kLabelFieldNumber;
const int skillbuff::kStateBagCdFieldNumber;
const int skillbuff::kMaskFieldNumber;
const int skillbuff::kEffectFieldNumber;
#endif  // !_MSC_VER

skillbuff::skillbuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skillbuff::InitAsDefaultInstance() {
}

skillbuff::skillbuff(const skillbuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skillbuff::SharedCtor() {
  _cached_size_ = 0;
  statebagid_ = GOOGLE_LONGLONG(0);
  statebagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  statebagicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effectresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttype_ = 0;
  startprobability_ = 0;
  starttypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  save_ = 0;
  statebagrule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = 0;
  statebagcd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skillbuff::~skillbuff() {
  SharedDtor();
}

void skillbuff::SharedDtor() {
  if (statebagname_ != &::google::protobuf::internal::kEmptyString) {
    delete statebagname_;
  }
  if (statebagicon_ != &::google::protobuf::internal::kEmptyString) {
    delete statebagicon_;
  }
  if (effectresources_ != &::google::protobuf::internal::kEmptyString) {
    delete effectresources_;
  }
  if (starttypevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete starttypevalue_;
  }
  if (endtype_ != &::google::protobuf::internal::kEmptyString) {
    delete endtype_;
  }
  if (statebagrule_ != &::google::protobuf::internal::kEmptyString) {
    delete statebagrule_;
  }
  if (statebagcd_ != &::google::protobuf::internal::kEmptyString) {
    delete statebagcd_;
  }
  if (this != default_instance_) {
  }
}

void skillbuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skillbuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skillbuff_descriptor_;
}

const skillbuff& skillbuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

skillbuff* skillbuff::default_instance_ = NULL;

skillbuff* skillbuff::New() const {
  return new skillbuff;
}

void skillbuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statebagid_ = GOOGLE_LONGLONG(0);
    if (has_statebagname()) {
      if (statebagname_ != &::google::protobuf::internal::kEmptyString) {
        statebagname_->clear();
      }
    }
    if (has_statebagicon()) {
      if (statebagicon_ != &::google::protobuf::internal::kEmptyString) {
        statebagicon_->clear();
      }
    }
    if (has_effectresources()) {
      if (effectresources_ != &::google::protobuf::internal::kEmptyString) {
        effectresources_->clear();
      }
    }
    starttype_ = 0;
    startprobability_ = 0;
    if (has_starttypevalue()) {
      if (starttypevalue_ != &::google::protobuf::internal::kEmptyString) {
        starttypevalue_->clear();
      }
    }
    if (has_endtype()) {
      if (endtype_ != &::google::protobuf::internal::kEmptyString) {
        endtype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    save_ = 0;
    if (has_statebagrule()) {
      if (statebagrule_ != &::google::protobuf::internal::kEmptyString) {
        statebagrule_->clear();
      }
    }
    label_ = 0;
    if (has_statebagcd()) {
      if (statebagcd_ != &::google::protobuf::internal::kEmptyString) {
        statebagcd_->clear();
      }
    }
  }
  mask_.Clear();
  effect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skillbuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stateBagID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &statebagid_)));
          set_has_statebagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stateBagName;
        break;
      }

      // optional string stateBagName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateBagName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statebagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statebagname().data(), this->statebagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stateBagIcon;
        break;
      }

      // optional string stateBagIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateBagIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statebagicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statebagicon().data(), this->statebagicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_effectResources;
        break;
      }

      // optional string effectResources = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effectResources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectresources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effectresources().data(), this->effectresources().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_startType;
        break;
      }

      // optional int32 startType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttype_)));
          set_has_starttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startProbability;
        break;
      }

      // optional int32 startProbability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startProbability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startprobability_)));
          set_has_startprobability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_startTypeValue;
        break;
      }

      // optional string startTypeValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTypeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttypevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttypevalue().data(), this->starttypevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_endType;
        break;
      }

      // optional string endType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtype().data(), this->endtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_save;
        break;
      }

      // optional int32 save = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_)));
          set_has_save();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stateBagRule;
        break;
      }

      // optional string stateBagRule = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateBagRule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statebagrule()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statebagrule().data(), this->statebagrule().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_label;
        break;
      }

      // optional int32 label = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stateBagCd;
        break;
      }

      // optional string stateBagCd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateBagCd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statebagcd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statebagcd().data(), this->statebagcd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mask;
        break;
      }

      // repeated int32 mask = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_mask())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mask())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mask;
        if (input->ExpectTag(114)) goto parse_effect;
        break;
      }

      // repeated .proto_ff.skillbuffeffectDesc effect = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_effect;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skillbuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 stateBagID = 1;
  if (has_statebagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->statebagid(), output);
  }

  // optional string stateBagName = 2;
  if (has_statebagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagname().data(), this->statebagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->statebagname(), output);
  }

  // optional string stateBagIcon = 3;
  if (has_statebagicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagicon().data(), this->statebagicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->statebagicon(), output);
  }

  // optional string effectResources = 4;
  if (has_effectresources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effectresources().data(), this->effectresources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->effectresources(), output);
  }

  // optional int32 startType = 5;
  if (has_starttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starttype(), output);
  }

  // optional int32 startProbability = 6;
  if (has_startprobability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->startprobability(), output);
  }

  // optional string startTypeValue = 7;
  if (has_starttypevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttypevalue().data(), this->starttypevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->starttypevalue(), output);
  }

  // optional string endType = 8;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtype().data(), this->endtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->endtype(), output);
  }

  // optional int32 save = 9;
  if (has_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->save(), output);
  }

  // optional string stateBagRule = 10;
  if (has_statebagrule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagrule().data(), this->statebagrule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->statebagrule(), output);
  }

  // optional int32 label = 11;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->label(), output);
  }

  // optional string stateBagCd = 12;
  if (has_statebagcd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagcd().data(), this->statebagcd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->statebagcd(), output);
  }

  // repeated int32 mask = 13;
  for (int i = 0; i < this->mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->mask(i), output);
  }

  // repeated .proto_ff.skillbuffeffectDesc effect = 14;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->effect(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skillbuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 stateBagID = 1;
  if (has_statebagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->statebagid(), target);
  }

  // optional string stateBagName = 2;
  if (has_statebagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagname().data(), this->statebagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->statebagname(), target);
  }

  // optional string stateBagIcon = 3;
  if (has_statebagicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagicon().data(), this->statebagicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->statebagicon(), target);
  }

  // optional string effectResources = 4;
  if (has_effectresources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effectresources().data(), this->effectresources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->effectresources(), target);
  }

  // optional int32 startType = 5;
  if (has_starttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starttype(), target);
  }

  // optional int32 startProbability = 6;
  if (has_startprobability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->startprobability(), target);
  }

  // optional string startTypeValue = 7;
  if (has_starttypevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttypevalue().data(), this->starttypevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->starttypevalue(), target);
  }

  // optional string endType = 8;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtype().data(), this->endtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->endtype(), target);
  }

  // optional int32 save = 9;
  if (has_save()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->save(), target);
  }

  // optional string stateBagRule = 10;
  if (has_statebagrule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagrule().data(), this->statebagrule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->statebagrule(), target);
  }

  // optional int32 label = 11;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->label(), target);
  }

  // optional string stateBagCd = 12;
  if (has_statebagcd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statebagcd().data(), this->statebagcd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->statebagcd(), target);
  }

  // repeated int32 mask = 13;
  for (int i = 0; i < this->mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->mask(i), target);
  }

  // repeated .proto_ff.skillbuffeffectDesc effect = 14;
  for (int i = 0; i < this->effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->effect(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skillbuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 stateBagID = 1;
    if (has_statebagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->statebagid());
    }

    // optional string stateBagName = 2;
    if (has_statebagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statebagname());
    }

    // optional string stateBagIcon = 3;
    if (has_statebagicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statebagicon());
    }

    // optional string effectResources = 4;
    if (has_effectresources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectresources());
    }

    // optional int32 startType = 5;
    if (has_starttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttype());
    }

    // optional int32 startProbability = 6;
    if (has_startprobability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startprobability());
    }

    // optional string startTypeValue = 7;
    if (has_starttypevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttypevalue());
    }

    // optional string endType = 8;
    if (has_endtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 save = 9;
    if (has_save()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save());
    }

    // optional string stateBagRule = 10;
    if (has_statebagrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statebagrule());
    }

    // optional int32 label = 11;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional string stateBagCd = 12;
    if (has_statebagcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statebagcd());
    }

  }
  // repeated int32 mask = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->mask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mask(i));
    }
    total_size += 1 * this->mask_size() + data_size;
  }

  // repeated .proto_ff.skillbuffeffectDesc effect = 14;
  total_size += 1 * this->effect_size();
  for (int i = 0; i < this->effect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skillbuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skillbuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skillbuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skillbuff::MergeFrom(const skillbuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  mask_.MergeFrom(from.mask_);
  effect_.MergeFrom(from.effect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statebagid()) {
      set_statebagid(from.statebagid());
    }
    if (from.has_statebagname()) {
      set_statebagname(from.statebagname());
    }
    if (from.has_statebagicon()) {
      set_statebagicon(from.statebagicon());
    }
    if (from.has_effectresources()) {
      set_effectresources(from.effectresources());
    }
    if (from.has_starttype()) {
      set_starttype(from.starttype());
    }
    if (from.has_startprobability()) {
      set_startprobability(from.startprobability());
    }
    if (from.has_starttypevalue()) {
      set_starttypevalue(from.starttypevalue());
    }
    if (from.has_endtype()) {
      set_endtype(from.endtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_save()) {
      set_save(from.save());
    }
    if (from.has_statebagrule()) {
      set_statebagrule(from.statebagrule());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_statebagcd()) {
      set_statebagcd(from.statebagcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skillbuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skillbuff::CopyFrom(const skillbuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skillbuff::IsInitialized() const {

  return true;
}

void skillbuff::Swap(skillbuff* other) {
  if (other != this) {
    std::swap(statebagid_, other->statebagid_);
    std::swap(statebagname_, other->statebagname_);
    std::swap(statebagicon_, other->statebagicon_);
    std::swap(effectresources_, other->effectresources_);
    std::swap(starttype_, other->starttype_);
    std::swap(startprobability_, other->startprobability_);
    std::swap(starttypevalue_, other->starttypevalue_);
    std::swap(endtype_, other->endtype_);
    std::swap(save_, other->save_);
    std::swap(statebagrule_, other->statebagrule_);
    std::swap(label_, other->label_);
    std::swap(statebagcd_, other->statebagcd_);
    mask_.Swap(&other->mask_);
    effect_.Swap(&other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skillbuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skillbuff_descriptor_;
  metadata.reflection = skillbuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_skillbuff::kSkillbuffListFieldNumber;
#endif  // !_MSC_VER

Sheet_skillbuff::Sheet_skillbuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_skillbuff::InitAsDefaultInstance() {
}

Sheet_skillbuff::Sheet_skillbuff(const Sheet_skillbuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_skillbuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_skillbuff::~Sheet_skillbuff() {
  SharedDtor();
}

void Sheet_skillbuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_skillbuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_skillbuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_skillbuff_descriptor_;
}

const Sheet_skillbuff& Sheet_skillbuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

Sheet_skillbuff* Sheet_skillbuff::default_instance_ = NULL;

Sheet_skillbuff* Sheet_skillbuff::New() const {
  return new Sheet_skillbuff;
}

void Sheet_skillbuff::Clear() {
  skillbuff_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_skillbuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.skillbuff skillbuff_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillbuff_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillbuff_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillbuff_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_skillbuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.skillbuff skillbuff_List = 1;
  for (int i = 0; i < this->skillbuff_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillbuff_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_skillbuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.skillbuff skillbuff_List = 1;
  for (int i = 0; i < this->skillbuff_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillbuff_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_skillbuff::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.skillbuff skillbuff_List = 1;
  total_size += 1 * this->skillbuff_list_size();
  for (int i = 0; i < this->skillbuff_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillbuff_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_skillbuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_skillbuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_skillbuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_skillbuff::MergeFrom(const Sheet_skillbuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillbuff_list_.MergeFrom(from.skillbuff_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_skillbuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_skillbuff::CopyFrom(const Sheet_skillbuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_skillbuff::IsInitialized() const {

  return true;
}

void Sheet_skillbuff::Swap(Sheet_skillbuff* other) {
  if (other != this) {
    skillbuff_list_.Swap(&other->skillbuff_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_skillbuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_skillbuff_descriptor_;
  metadata.reflection = Sheet_skillbuff_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
