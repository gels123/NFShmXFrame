// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Vip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Vip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_VipVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_VipPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_VipChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_VipCosntant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipCosntant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipCosntant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipCosntant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_VipExplimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipExplimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipExplimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipExplimit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fVip_2eproto() {
  protobuf_AddDesc_E_5fVip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Vip.proto");
  GOOGLE_CHECK(file != NULL);
  E_VipVip_descriptor_ = file->message_type(0);
  static const int E_VipVip_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_privilege_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_dailybox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_vipgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_originalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_price_),
  };
  E_VipVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipVip_descriptor_,
      E_VipVip::default_instance_,
      E_VipVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipVip));
  Sheet_VipVip_descriptor_ = file->message_type(1);
  static const int Sheet_VipVip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipVip, e_vipvip_list_),
  };
  Sheet_VipVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipVip_descriptor_,
      Sheet_VipVip::default_instance_,
      Sheet_VipVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipVip));
  E_VipPrivilege_descriptor_ = file->message_type(2);
  static const int E_VipPrivilege_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_args_),
  };
  E_VipPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipPrivilege_descriptor_,
      E_VipPrivilege::default_instance_,
      E_VipPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipPrivilege));
  Sheet_VipPrivilege_descriptor_ = file->message_type(3);
  static const int Sheet_VipPrivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipPrivilege, e_vipprivilege_list_),
  };
  Sheet_VipPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipPrivilege_descriptor_,
      Sheet_VipPrivilege::default_instance_,
      Sheet_VipPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipPrivilege));
  E_VipChat_descriptor_ = file->message_type(4);
  static const int E_VipChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipChat, m_id_),
  };
  E_VipChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipChat_descriptor_,
      E_VipChat::default_instance_,
      E_VipChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipChat));
  Sheet_VipChat_descriptor_ = file->message_type(5);
  static const int Sheet_VipChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipChat, e_vipchat_list_),
  };
  Sheet_VipChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipChat_descriptor_,
      Sheet_VipChat::default_instance_,
      Sheet_VipChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipChat));
  E_VipCosntant_descriptor_ = file->message_type(6);
  static const int E_VipCosntant_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_fvipprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_fviprtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_fvipprivage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_fviplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_fvipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_vipitemicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_foreverguide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_unactiveguide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, m_vipexp_),
  };
  E_VipCosntant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipCosntant_descriptor_,
      E_VipCosntant::default_instance_,
      E_VipCosntant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipCosntant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipCosntant));
  Sheet_VipCosntant_descriptor_ = file->message_type(7);
  static const int Sheet_VipCosntant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipCosntant, e_vipcosntant_list_),
  };
  Sheet_VipCosntant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipCosntant_descriptor_,
      Sheet_VipCosntant::default_instance_,
      Sheet_VipCosntant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipCosntant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipCosntant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipCosntant));
  E_VipExplimit_descriptor_ = file->message_type(8);
  static const int E_VipExplimit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipExplimit, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipExplimit, m_limit_),
  };
  E_VipExplimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipExplimit_descriptor_,
      E_VipExplimit::default_instance_,
      E_VipExplimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipExplimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipExplimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipExplimit));
  Sheet_VipExplimit_descriptor_ = file->message_type(9);
  static const int Sheet_VipExplimit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipExplimit, e_vipexplimit_list_),
  };
  Sheet_VipExplimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipExplimit_descriptor_,
      Sheet_VipExplimit::default_instance_,
      Sheet_VipExplimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipExplimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipExplimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipExplimit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fVip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipVip_descriptor_, &E_VipVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipVip_descriptor_, &Sheet_VipVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipPrivilege_descriptor_, &E_VipPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipPrivilege_descriptor_, &Sheet_VipPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipChat_descriptor_, &E_VipChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipChat_descriptor_, &Sheet_VipChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipCosntant_descriptor_, &E_VipCosntant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipCosntant_descriptor_, &Sheet_VipCosntant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipExplimit_descriptor_, &E_VipExplimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipExplimit_descriptor_, &Sheet_VipExplimit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fVip_2eproto() {
  delete E_VipVip::default_instance_;
  delete E_VipVip_reflection_;
  delete Sheet_VipVip::default_instance_;
  delete Sheet_VipVip_reflection_;
  delete E_VipPrivilege::default_instance_;
  delete E_VipPrivilege_reflection_;
  delete Sheet_VipPrivilege::default_instance_;
  delete Sheet_VipPrivilege_reflection_;
  delete E_VipChat::default_instance_;
  delete E_VipChat_reflection_;
  delete Sheet_VipChat::default_instance_;
  delete Sheet_VipChat_reflection_;
  delete E_VipCosntant::default_instance_;
  delete E_VipCosntant_reflection_;
  delete Sheet_VipCosntant::default_instance_;
  delete Sheet_VipCosntant_reflection_;
  delete E_VipExplimit::default_instance_;
  delete E_VipExplimit_reflection_;
  delete Sheet_VipExplimit::default_instance_;
  delete Sheet_VipExplimit_reflection_;
}

void protobuf_AddDesc_E_5fVip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013E_Vip.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\351\002\n\010E_VipVip\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002i"
    "d\022\036\n\007m_level\030\002 \001(\005B\r\302\377\024\tvip\347\255\211\347\272\247\022\034\n\005m_e"
    "xp\030\003 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\022(\n\021m_privilege_g"
    "roup\030\004 \001(\005B\r\302\377\024\t\347\211\271\346\235\203\347\273\204\022*\n\nm_dailybox\030"
    "\005 \001(\005B\026\302\377\024\022\346\257\217\346\227\245\347\246\217\345\210\251\345\245\226\345\212\261\022&\n\tm_vipgi"
    "ft\030\006 \001(\005B\023\302\377\024\017\344\270\223\345\261\236\347\244\274\345\214\205box\0221\n\013m_price"
    "type\030\007 \001(\005B\034\302\377\024\030\344\270\223\345\261\236\347\244\274\345\214\205\344\273\267\346\240\274\347\261\273\345\236\213"
    "\022/\n\017m_originalprice\030\010 \001(\005B\026\302\377\024\022\344\270\223\345\261\236\347\244\274"
    "\345\214\205\345\216\237\344\273\267\022\'\n\007m_price\030\t \001(\005B\026\302\377\024\022\344\270\223\345\261\236\347\244"
    "\274\345\214\205\344\273\267\346\240\274\"\?\n\014Sheet_VipVip\022/\n\rE_VipVip_L"
    "ist\030\001 \003(\0132\022.proto_ff.E_VipVipB\004\210\301\024\020\"\265\001\n\016"
    "E_VipPrivilege\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002ID\022\036\n\007"
    "m_group\030\002 \001(\005B\r\302\377\024\t\347\211\271\346\235\203\347\273\204\022 \n\006m_type\030\003"
    " \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261\273\345\236\213\022\037\n\005m_arg\030\004 \001(\005B\020\302"
    "\377\024\014\345\212\237\350\203\275\345\217\202\346\225\260\022*\n\006m_args\030\005 \001(\tB\032\302\377\024\022\346\225\264"
    "\346\225\260\345\212\237\350\203\275\345\217\202\346\225\260\220\301\024@\"R\n\022Sheet_VipPrivileg"
    "e\022<\n\023E_VipPrivilege_List\030\001 \003(\0132\030.proto_f"
    "f.E_VipPrivilegeB\005\210\301\024\200\004\"!\n\tE_VipChat\022\024\n\004"
    "m_id\030\001 \001(\005B\006\302\377\024\002id\"B\n\rSheet_VipChat\0221\n\016E"
    "_VipChat_List\030\001 \003(\0132\023.proto_ff.E_VipChat"
    "B\004\210\301\024\020\"\314\003\n\rE_VipCosntant\022\024\n\004m_id\030\001 \001(\005B\006"
    "\302\377\024\002id\022+\n\013m_fvipprice\030\002 \001(\005B\026\302\377\024\022\351\233\266\345\205\203v"
    "ip\347\232\204\344\273\267\346\240\274\0227\n\013m_fviprtime\030\003 \001(\005B\"\302\377\024\036\351\233"
    "\266\345\205\203vip\347\232\204\350\277\224\350\277\230\345\274\200\346\234\215\346\227\266\351\227\264\022-\n\rm_fvippr"
    "ivage\030\004 \001(\005B\026\302\377\024\022\351\233\266\345\205\203VIP\347\232\204\347\211\271\346\235\203\0221\n\010m"
    "_fviplv\030\005 \001(\005B\037\302\377\024\033\351\233\266\345\205\203vip\345\257\271\345\272\224\347\232\204vip"
    "\347\255\211\347\272\247\022)\n\tm_fvipexp\030\006 \001(\005B\026\302\377\024\022\350\216\267\345\276\227\347\232\204"
    "vip\347\273\217\351\252\214\022*\n\rm_vipitemicon\030\007 \001(\005B\023\302\377\024\017vi"
    "p\351\201\223\345\205\267\345\233\276\346\240\207\022.\n\016m_foreverguide\030\010 \001(\005B\026\302"
    "\377\024\022\346\260\270\344\271\205\347\216\251\346\263\225\346\230\240\345\260\204\022/\n\017m_unactiveguide"
    "\030\t \001(\005B\026\302\377\024\022\344\270\264\346\227\266\347\216\251\346\263\225\346\230\240\345\260\204\022%\n\010m_vipe"
    "xp\030\n \001(\005B\023\302\377\024\017vip\346\266\210\350\264\271\347\273\217\351\252\214\"N\n\021Sheet_V"
    "ipCosntant\0229\n\022E_VipCosntant_List\030\001 \003(\0132\027"
    ".proto_ff.E_VipCosntantB\004\210\301\024\002\"L\n\rE_VipEx"
    "plimit\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022!\n\007m_li"
    "mit\030\002 \001(\003B\020\302\377\024\014\347\273\217\351\252\214\344\270\212\351\231\220\"O\n\021Sheet_Vip"
    "Explimit\022:\n\022E_VipExplimit_List\030\001 \003(\0132\027.p"
    "roto_ff.E_VipExplimitB\005\210\301\024\200\020", 1548);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Vip.proto", &protobuf_RegisterTypes);
  E_VipVip::default_instance_ = new E_VipVip();
  Sheet_VipVip::default_instance_ = new Sheet_VipVip();
  E_VipPrivilege::default_instance_ = new E_VipPrivilege();
  Sheet_VipPrivilege::default_instance_ = new Sheet_VipPrivilege();
  E_VipChat::default_instance_ = new E_VipChat();
  Sheet_VipChat::default_instance_ = new Sheet_VipChat();
  E_VipCosntant::default_instance_ = new E_VipCosntant();
  Sheet_VipCosntant::default_instance_ = new Sheet_VipCosntant();
  E_VipExplimit::default_instance_ = new E_VipExplimit();
  Sheet_VipExplimit::default_instance_ = new Sheet_VipExplimit();
  E_VipVip::default_instance_->InitAsDefaultInstance();
  Sheet_VipVip::default_instance_->InitAsDefaultInstance();
  E_VipPrivilege::default_instance_->InitAsDefaultInstance();
  Sheet_VipPrivilege::default_instance_->InitAsDefaultInstance();
  E_VipChat::default_instance_->InitAsDefaultInstance();
  Sheet_VipChat::default_instance_->InitAsDefaultInstance();
  E_VipCosntant::default_instance_->InitAsDefaultInstance();
  Sheet_VipCosntant::default_instance_->InitAsDefaultInstance();
  E_VipExplimit::default_instance_->InitAsDefaultInstance();
  Sheet_VipExplimit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fVip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fVip_2eproto {
  StaticDescriptorInitializer_E_5fVip_2eproto() {
    protobuf_AddDesc_E_5fVip_2eproto();
  }
} static_descriptor_initializer_E_5fVip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_VipVip::kMIdFieldNumber;
const int E_VipVip::kMLevelFieldNumber;
const int E_VipVip::kMExpFieldNumber;
const int E_VipVip::kMPrivilegeGroupFieldNumber;
const int E_VipVip::kMDailyboxFieldNumber;
const int E_VipVip::kMVipgiftFieldNumber;
const int E_VipVip::kMPricetypeFieldNumber;
const int E_VipVip::kMOriginalpriceFieldNumber;
const int E_VipVip::kMPriceFieldNumber;
#endif  // !_MSC_VER

E_VipVip::E_VipVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipVip::InitAsDefaultInstance() {
}

E_VipVip::E_VipVip(const E_VipVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipVip::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_level_ = 0;
  m_exp_ = 0;
  m_privilege_group_ = 0;
  m_dailybox_ = 0;
  m_vipgift_ = 0;
  m_pricetype_ = 0;
  m_originalprice_ = 0;
  m_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipVip::~E_VipVip() {
  SharedDtor();
}

void E_VipVip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_VipVip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipVip_descriptor_;
}

const E_VipVip& E_VipVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

E_VipVip* E_VipVip::default_instance_ = NULL;

E_VipVip* E_VipVip::New() const {
  return new E_VipVip;
}

void E_VipVip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_level_ = 0;
    m_exp_ = 0;
    m_privilege_group_ = 0;
    m_dailybox_ = 0;
    m_vipgift_ = 0;
    m_pricetype_ = 0;
    m_originalprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_privilege_group;
        break;
      }

      // optional int32 m_privilege_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_privilege_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_privilege_group_)));
          set_has_m_privilege_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_dailybox;
        break;
      }

      // optional int32 m_dailybox = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dailybox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dailybox_)));
          set_has_m_dailybox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vipgift;
        break;
      }

      // optional int32 m_vipgift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vipgift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vipgift_)));
          set_has_m_vipgift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_pricetype;
        break;
      }

      // optional int32 m_pricetype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pricetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pricetype_)));
          set_has_m_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_originalprice;
        break;
      }

      // optional int32 m_originalprice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_originalprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_originalprice_)));
          set_has_m_originalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_level(), output);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exp(), output);
  }

  // optional int32 m_privilege_group = 4;
  if (has_m_privilege_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_privilege_group(), output);
  }

  // optional int32 m_dailybox = 5;
  if (has_m_dailybox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_dailybox(), output);
  }

  // optional int32 m_vipgift = 6;
  if (has_m_vipgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_vipgift(), output);
  }

  // optional int32 m_pricetype = 7;
  if (has_m_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_pricetype(), output);
  }

  // optional int32 m_originalprice = 8;
  if (has_m_originalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_originalprice(), output);
  }

  // optional int32 m_price = 9;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_level(), target);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exp(), target);
  }

  // optional int32 m_privilege_group = 4;
  if (has_m_privilege_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_privilege_group(), target);
  }

  // optional int32 m_dailybox = 5;
  if (has_m_dailybox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_dailybox(), target);
  }

  // optional int32 m_vipgift = 6;
  if (has_m_vipgift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_vipgift(), target);
  }

  // optional int32 m_pricetype = 7;
  if (has_m_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_pricetype(), target);
  }

  // optional int32 m_originalprice = 8;
  if (has_m_originalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_originalprice(), target);
  }

  // optional int32 m_price = 9;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipVip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_level = 2;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_exp = 3;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_privilege_group = 4;
    if (has_m_privilege_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_privilege_group());
    }

    // optional int32 m_dailybox = 5;
    if (has_m_dailybox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dailybox());
    }

    // optional int32 m_vipgift = 6;
    if (has_m_vipgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vipgift());
    }

    // optional int32 m_pricetype = 7;
    if (has_m_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pricetype());
    }

    // optional int32 m_originalprice = 8;
    if (has_m_originalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_originalprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_price = 9;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipVip::MergeFrom(const E_VipVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_privilege_group()) {
      set_m_privilege_group(from.m_privilege_group());
    }
    if (from.has_m_dailybox()) {
      set_m_dailybox(from.m_dailybox());
    }
    if (from.has_m_vipgift()) {
      set_m_vipgift(from.m_vipgift());
    }
    if (from.has_m_pricetype()) {
      set_m_pricetype(from.m_pricetype());
    }
    if (from.has_m_originalprice()) {
      set_m_originalprice(from.m_originalprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipVip::CopyFrom(const E_VipVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipVip::IsInitialized() const {

  return true;
}

void E_VipVip::Swap(E_VipVip* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_privilege_group_, other->m_privilege_group_);
    std::swap(m_dailybox_, other->m_dailybox_);
    std::swap(m_vipgift_, other->m_vipgift_);
    std::swap(m_pricetype_, other->m_pricetype_);
    std::swap(m_originalprice_, other->m_originalprice_);
    std::swap(m_price_, other->m_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipVip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipVip_descriptor_;
  metadata.reflection = E_VipVip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipVip::kEVipVipListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipVip::Sheet_VipVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipVip::InitAsDefaultInstance() {
}

Sheet_VipVip::Sheet_VipVip(const Sheet_VipVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipVip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipVip::~Sheet_VipVip() {
  SharedDtor();
}

void Sheet_VipVip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipVip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipVip_descriptor_;
}

const Sheet_VipVip& Sheet_VipVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

Sheet_VipVip* Sheet_VipVip::default_instance_ = NULL;

Sheet_VipVip* Sheet_VipVip::New() const {
  return new Sheet_VipVip;
}

void Sheet_VipVip::Clear() {
  e_vipvip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipVip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipvip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipVip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  for (int i = 0; i < this->e_vipvip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipvip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  for (int i = 0; i < this->e_vipvip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipvip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipVip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  total_size += 1 * this->e_vipvip_list_size();
  for (int i = 0; i < this->e_vipvip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipvip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipVip::MergeFrom(const Sheet_VipVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipvip_list_.MergeFrom(from.e_vipvip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipVip::CopyFrom(const Sheet_VipVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipVip::IsInitialized() const {

  return true;
}

void Sheet_VipVip::Swap(Sheet_VipVip* other) {
  if (other != this) {
    e_vipvip_list_.Swap(&other->e_vipvip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipVip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipVip_descriptor_;
  metadata.reflection = Sheet_VipVip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_VipPrivilege::kMIdFieldNumber;
const int E_VipPrivilege::kMGroupFieldNumber;
const int E_VipPrivilege::kMTypeFieldNumber;
const int E_VipPrivilege::kMArgFieldNumber;
const int E_VipPrivilege::kMArgsFieldNumber;
#endif  // !_MSC_VER

E_VipPrivilege::E_VipPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipPrivilege::InitAsDefaultInstance() {
}

E_VipPrivilege::E_VipPrivilege(const E_VipPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipPrivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_group_ = 0;
  m_type_ = 0;
  m_arg_ = 0;
  m_args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipPrivilege::~E_VipPrivilege() {
  SharedDtor();
}

void E_VipPrivilege::SharedDtor() {
  if (m_args_ != &::google::protobuf::internal::kEmptyString) {
    delete m_args_;
  }
  if (this != default_instance_) {
  }
}

void E_VipPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipPrivilege_descriptor_;
}

const E_VipPrivilege& E_VipPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

E_VipPrivilege* E_VipPrivilege::default_instance_ = NULL;

E_VipPrivilege* E_VipPrivilege::New() const {
  return new E_VipPrivilege;
}

void E_VipPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_group_ = 0;
    m_type_ = 0;
    m_arg_ = 0;
    if (has_m_args()) {
      if (m_args_ != &::google::protobuf::internal::kEmptyString) {
        m_args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_arg;
        break;
      }

      // optional int32 m_arg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_arg_)));
          set_has_m_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_args;
        break;
      }

      // optional string m_args = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_args().data(), this->m_args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_arg = 4;
  if (has_m_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_arg(), output);
  }

  // optional string m_args = 5;
  if (has_m_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_args().data(), this->m_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_arg = 4;
  if (has_m_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_arg(), target);
  }

  // optional string m_args = 5;
  if (has_m_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_args().data(), this->m_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipPrivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_arg = 4;
    if (has_m_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_arg());
    }

    // optional string m_args = 5;
    if (has_m_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipPrivilege::MergeFrom(const E_VipPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_arg()) {
      set_m_arg(from.m_arg());
    }
    if (from.has_m_args()) {
      set_m_args(from.m_args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipPrivilege::CopyFrom(const E_VipPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipPrivilege::IsInitialized() const {

  return true;
}

void E_VipPrivilege::Swap(E_VipPrivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_arg_, other->m_arg_);
    std::swap(m_args_, other->m_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipPrivilege_descriptor_;
  metadata.reflection = E_VipPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipPrivilege::kEVipPrivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipPrivilege::Sheet_VipPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipPrivilege::InitAsDefaultInstance() {
}

Sheet_VipPrivilege::Sheet_VipPrivilege(const Sheet_VipPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipPrivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipPrivilege::~Sheet_VipPrivilege() {
  SharedDtor();
}

void Sheet_VipPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipPrivilege_descriptor_;
}

const Sheet_VipPrivilege& Sheet_VipPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

Sheet_VipPrivilege* Sheet_VipPrivilege::default_instance_ = NULL;

Sheet_VipPrivilege* Sheet_VipPrivilege::New() const {
  return new Sheet_VipPrivilege;
}

void Sheet_VipPrivilege::Clear() {
  e_vipprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipPrivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipPrivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  for (int i = 0; i < this->e_vipprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  for (int i = 0; i < this->e_vipprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipPrivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  total_size += 1 * this->e_vipprivilege_list_size();
  for (int i = 0; i < this->e_vipprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipPrivilege::MergeFrom(const Sheet_VipPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipprivilege_list_.MergeFrom(from.e_vipprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipPrivilege::CopyFrom(const Sheet_VipPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipPrivilege::IsInitialized() const {

  return true;
}

void Sheet_VipPrivilege::Swap(Sheet_VipPrivilege* other) {
  if (other != this) {
    e_vipprivilege_list_.Swap(&other->e_vipprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipPrivilege_descriptor_;
  metadata.reflection = Sheet_VipPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_VipChat::kMIdFieldNumber;
#endif  // !_MSC_VER

E_VipChat::E_VipChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipChat::InitAsDefaultInstance() {
}

E_VipChat::E_VipChat(const E_VipChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipChat::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipChat::~E_VipChat() {
  SharedDtor();
}

void E_VipChat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_VipChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipChat_descriptor_;
}

const E_VipChat& E_VipChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

E_VipChat* E_VipChat::default_instance_ = NULL;

E_VipChat* E_VipChat::New() const {
  return new E_VipChat;
}

void E_VipChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipChat::MergeFrom(const E_VipChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipChat::CopyFrom(const E_VipChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipChat::IsInitialized() const {

  return true;
}

void E_VipChat::Swap(E_VipChat* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipChat_descriptor_;
  metadata.reflection = E_VipChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipChat::kEVipChatListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipChat::Sheet_VipChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipChat::InitAsDefaultInstance() {
}

Sheet_VipChat::Sheet_VipChat(const Sheet_VipChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipChat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipChat::~Sheet_VipChat() {
  SharedDtor();
}

void Sheet_VipChat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipChat_descriptor_;
}

const Sheet_VipChat& Sheet_VipChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

Sheet_VipChat* Sheet_VipChat::default_instance_ = NULL;

Sheet_VipChat* Sheet_VipChat::New() const {
  return new Sheet_VipChat;
}

void Sheet_VipChat::Clear() {
  e_vipchat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipChat E_VipChat_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipChat_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipchat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipChat_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipChat E_VipChat_List = 1;
  for (int i = 0; i < this->e_vipchat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipchat_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipChat E_VipChat_List = 1;
  for (int i = 0; i < this->e_vipchat_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipchat_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipChat::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipChat E_VipChat_List = 1;
  total_size += 1 * this->e_vipchat_list_size();
  for (int i = 0; i < this->e_vipchat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipchat_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipChat::MergeFrom(const Sheet_VipChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipchat_list_.MergeFrom(from.e_vipchat_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipChat::CopyFrom(const Sheet_VipChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipChat::IsInitialized() const {

  return true;
}

void Sheet_VipChat::Swap(Sheet_VipChat* other) {
  if (other != this) {
    e_vipchat_list_.Swap(&other->e_vipchat_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipChat_descriptor_;
  metadata.reflection = Sheet_VipChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_VipCosntant::kMIdFieldNumber;
const int E_VipCosntant::kMFvippriceFieldNumber;
const int E_VipCosntant::kMFviprtimeFieldNumber;
const int E_VipCosntant::kMFvipprivageFieldNumber;
const int E_VipCosntant::kMFviplvFieldNumber;
const int E_VipCosntant::kMFvipexpFieldNumber;
const int E_VipCosntant::kMVipitemiconFieldNumber;
const int E_VipCosntant::kMForeverguideFieldNumber;
const int E_VipCosntant::kMUnactiveguideFieldNumber;
const int E_VipCosntant::kMVipexpFieldNumber;
#endif  // !_MSC_VER

E_VipCosntant::E_VipCosntant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipCosntant::InitAsDefaultInstance() {
}

E_VipCosntant::E_VipCosntant(const E_VipCosntant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipCosntant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_fvipprice_ = 0;
  m_fviprtime_ = 0;
  m_fvipprivage_ = 0;
  m_fviplv_ = 0;
  m_fvipexp_ = 0;
  m_vipitemicon_ = 0;
  m_foreverguide_ = 0;
  m_unactiveguide_ = 0;
  m_vipexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipCosntant::~E_VipCosntant() {
  SharedDtor();
}

void E_VipCosntant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_VipCosntant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipCosntant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipCosntant_descriptor_;
}

const E_VipCosntant& E_VipCosntant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

E_VipCosntant* E_VipCosntant::default_instance_ = NULL;

E_VipCosntant* E_VipCosntant::New() const {
  return new E_VipCosntant;
}

void E_VipCosntant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_fvipprice_ = 0;
    m_fviprtime_ = 0;
    m_fvipprivage_ = 0;
    m_fviplv_ = 0;
    m_fvipexp_ = 0;
    m_vipitemicon_ = 0;
    m_foreverguide_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_unactiveguide_ = 0;
    m_vipexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipCosntant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fvipprice;
        break;
      }

      // optional int32 m_fvipprice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fvipprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fvipprice_)));
          set_has_m_fvipprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fviprtime;
        break;
      }

      // optional int32 m_fviprtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fviprtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fviprtime_)));
          set_has_m_fviprtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_fvipprivage;
        break;
      }

      // optional int32 m_fvipprivage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fvipprivage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fvipprivage_)));
          set_has_m_fvipprivage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_fviplv;
        break;
      }

      // optional int32 m_fviplv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fviplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fviplv_)));
          set_has_m_fviplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_fvipexp;
        break;
      }

      // optional int32 m_fvipexp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fvipexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fvipexp_)));
          set_has_m_fvipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_vipitemicon;
        break;
      }

      // optional int32 m_vipitemicon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vipitemicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vipitemicon_)));
          set_has_m_vipitemicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_foreverguide;
        break;
      }

      // optional int32 m_foreverguide = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_foreverguide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_foreverguide_)));
          set_has_m_foreverguide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_unactiveguide;
        break;
      }

      // optional int32 m_unactiveguide = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unactiveguide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unactiveguide_)));
          set_has_m_unactiveguide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_vipexp;
        break;
      }

      // optional int32 m_vipexp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vipexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vipexp_)));
          set_has_m_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipCosntant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_fvipprice = 2;
  if (has_m_fvipprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fvipprice(), output);
  }

  // optional int32 m_fviprtime = 3;
  if (has_m_fviprtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fviprtime(), output);
  }

  // optional int32 m_fvipprivage = 4;
  if (has_m_fvipprivage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_fvipprivage(), output);
  }

  // optional int32 m_fviplv = 5;
  if (has_m_fviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_fviplv(), output);
  }

  // optional int32 m_fvipexp = 6;
  if (has_m_fvipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_fvipexp(), output);
  }

  // optional int32 m_vipitemicon = 7;
  if (has_m_vipitemicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_vipitemicon(), output);
  }

  // optional int32 m_foreverguide = 8;
  if (has_m_foreverguide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_foreverguide(), output);
  }

  // optional int32 m_unactiveguide = 9;
  if (has_m_unactiveguide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_unactiveguide(), output);
  }

  // optional int32 m_vipexp = 10;
  if (has_m_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_vipexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipCosntant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_fvipprice = 2;
  if (has_m_fvipprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fvipprice(), target);
  }

  // optional int32 m_fviprtime = 3;
  if (has_m_fviprtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fviprtime(), target);
  }

  // optional int32 m_fvipprivage = 4;
  if (has_m_fvipprivage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_fvipprivage(), target);
  }

  // optional int32 m_fviplv = 5;
  if (has_m_fviplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_fviplv(), target);
  }

  // optional int32 m_fvipexp = 6;
  if (has_m_fvipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_fvipexp(), target);
  }

  // optional int32 m_vipitemicon = 7;
  if (has_m_vipitemicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_vipitemicon(), target);
  }

  // optional int32 m_foreverguide = 8;
  if (has_m_foreverguide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_foreverguide(), target);
  }

  // optional int32 m_unactiveguide = 9;
  if (has_m_unactiveguide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_unactiveguide(), target);
  }

  // optional int32 m_vipexp = 10;
  if (has_m_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_vipexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipCosntant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_fvipprice = 2;
    if (has_m_fvipprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fvipprice());
    }

    // optional int32 m_fviprtime = 3;
    if (has_m_fviprtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fviprtime());
    }

    // optional int32 m_fvipprivage = 4;
    if (has_m_fvipprivage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fvipprivage());
    }

    // optional int32 m_fviplv = 5;
    if (has_m_fviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fviplv());
    }

    // optional int32 m_fvipexp = 6;
    if (has_m_fvipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fvipexp());
    }

    // optional int32 m_vipitemicon = 7;
    if (has_m_vipitemicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vipitemicon());
    }

    // optional int32 m_foreverguide = 8;
    if (has_m_foreverguide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_foreverguide());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_unactiveguide = 9;
    if (has_m_unactiveguide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unactiveguide());
    }

    // optional int32 m_vipexp = 10;
    if (has_m_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vipexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipCosntant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipCosntant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipCosntant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipCosntant::MergeFrom(const E_VipCosntant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_fvipprice()) {
      set_m_fvipprice(from.m_fvipprice());
    }
    if (from.has_m_fviprtime()) {
      set_m_fviprtime(from.m_fviprtime());
    }
    if (from.has_m_fvipprivage()) {
      set_m_fvipprivage(from.m_fvipprivage());
    }
    if (from.has_m_fviplv()) {
      set_m_fviplv(from.m_fviplv());
    }
    if (from.has_m_fvipexp()) {
      set_m_fvipexp(from.m_fvipexp());
    }
    if (from.has_m_vipitemicon()) {
      set_m_vipitemicon(from.m_vipitemicon());
    }
    if (from.has_m_foreverguide()) {
      set_m_foreverguide(from.m_foreverguide());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_unactiveguide()) {
      set_m_unactiveguide(from.m_unactiveguide());
    }
    if (from.has_m_vipexp()) {
      set_m_vipexp(from.m_vipexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipCosntant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipCosntant::CopyFrom(const E_VipCosntant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipCosntant::IsInitialized() const {

  return true;
}

void E_VipCosntant::Swap(E_VipCosntant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_fvipprice_, other->m_fvipprice_);
    std::swap(m_fviprtime_, other->m_fviprtime_);
    std::swap(m_fvipprivage_, other->m_fvipprivage_);
    std::swap(m_fviplv_, other->m_fviplv_);
    std::swap(m_fvipexp_, other->m_fvipexp_);
    std::swap(m_vipitemicon_, other->m_vipitemicon_);
    std::swap(m_foreverguide_, other->m_foreverguide_);
    std::swap(m_unactiveguide_, other->m_unactiveguide_);
    std::swap(m_vipexp_, other->m_vipexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipCosntant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipCosntant_descriptor_;
  metadata.reflection = E_VipCosntant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipCosntant::kEVipCosntantListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipCosntant::Sheet_VipCosntant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipCosntant::InitAsDefaultInstance() {
}

Sheet_VipCosntant::Sheet_VipCosntant(const Sheet_VipCosntant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipCosntant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipCosntant::~Sheet_VipCosntant() {
  SharedDtor();
}

void Sheet_VipCosntant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipCosntant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipCosntant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipCosntant_descriptor_;
}

const Sheet_VipCosntant& Sheet_VipCosntant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

Sheet_VipCosntant* Sheet_VipCosntant::default_instance_ = NULL;

Sheet_VipCosntant* Sheet_VipCosntant::New() const {
  return new Sheet_VipCosntant;
}

void Sheet_VipCosntant::Clear() {
  e_vipcosntant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipCosntant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipCosntant E_VipCosntant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipCosntant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipcosntant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipCosntant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipCosntant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipCosntant E_VipCosntant_List = 1;
  for (int i = 0; i < this->e_vipcosntant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipcosntant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipCosntant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipCosntant E_VipCosntant_List = 1;
  for (int i = 0; i < this->e_vipcosntant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipcosntant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipCosntant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipCosntant E_VipCosntant_List = 1;
  total_size += 1 * this->e_vipcosntant_list_size();
  for (int i = 0; i < this->e_vipcosntant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipcosntant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipCosntant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipCosntant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipCosntant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipCosntant::MergeFrom(const Sheet_VipCosntant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipcosntant_list_.MergeFrom(from.e_vipcosntant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipCosntant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipCosntant::CopyFrom(const Sheet_VipCosntant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipCosntant::IsInitialized() const {

  return true;
}

void Sheet_VipCosntant::Swap(Sheet_VipCosntant* other) {
  if (other != this) {
    e_vipcosntant_list_.Swap(&other->e_vipcosntant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipCosntant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipCosntant_descriptor_;
  metadata.reflection = Sheet_VipCosntant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_VipExplimit::kMLvFieldNumber;
const int E_VipExplimit::kMLimitFieldNumber;
#endif  // !_MSC_VER

E_VipExplimit::E_VipExplimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipExplimit::InitAsDefaultInstance() {
}

E_VipExplimit::E_VipExplimit(const E_VipExplimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipExplimit::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_limit_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipExplimit::~E_VipExplimit() {
  SharedDtor();
}

void E_VipExplimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_VipExplimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipExplimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipExplimit_descriptor_;
}

const E_VipExplimit& E_VipExplimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

E_VipExplimit* E_VipExplimit::default_instance_ = NULL;

E_VipExplimit* E_VipExplimit::New() const {
  return new E_VipExplimit;
}

void E_VipExplimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_limit_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipExplimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_limit;
        break;
      }

      // optional int64 m_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_limit_)));
          set_has_m_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipExplimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int64 m_limit = 2;
  if (has_m_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipExplimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int64 m_limit = 2;
  if (has_m_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipExplimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int64 m_limit = 2;
    if (has_m_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipExplimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipExplimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipExplimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipExplimit::MergeFrom(const E_VipExplimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_limit()) {
      set_m_limit(from.m_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipExplimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipExplimit::CopyFrom(const E_VipExplimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipExplimit::IsInitialized() const {

  return true;
}

void E_VipExplimit::Swap(E_VipExplimit* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_limit_, other->m_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipExplimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipExplimit_descriptor_;
  metadata.reflection = E_VipExplimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipExplimit::kEVipExplimitListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipExplimit::Sheet_VipExplimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipExplimit::InitAsDefaultInstance() {
}

Sheet_VipExplimit::Sheet_VipExplimit(const Sheet_VipExplimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipExplimit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipExplimit::~Sheet_VipExplimit() {
  SharedDtor();
}

void Sheet_VipExplimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipExplimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipExplimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipExplimit_descriptor_;
}

const Sheet_VipExplimit& Sheet_VipExplimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fVip_2eproto();
  return *default_instance_;
}

Sheet_VipExplimit* Sheet_VipExplimit::default_instance_ = NULL;

Sheet_VipExplimit* Sheet_VipExplimit::New() const {
  return new Sheet_VipExplimit;
}

void Sheet_VipExplimit::Clear() {
  e_vipexplimit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipExplimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipExplimit E_VipExplimit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipExplimit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipexplimit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipExplimit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipExplimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipExplimit E_VipExplimit_List = 1;
  for (int i = 0; i < this->e_vipexplimit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipexplimit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipExplimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipExplimit E_VipExplimit_List = 1;
  for (int i = 0; i < this->e_vipexplimit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipexplimit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipExplimit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipExplimit E_VipExplimit_List = 1;
  total_size += 1 * this->e_vipexplimit_list_size();
  for (int i = 0; i < this->e_vipexplimit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipexplimit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipExplimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipExplimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipExplimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipExplimit::MergeFrom(const Sheet_VipExplimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipexplimit_list_.MergeFrom(from.e_vipexplimit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipExplimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipExplimit::CopyFrom(const Sheet_VipExplimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipExplimit::IsInitialized() const {

  return true;
}

void Sheet_VipExplimit::Swap(Sheet_VipExplimit* other) {
  if (other != this) {
    e_vipexplimit_list_.Swap(&other->e_vipexplimit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipExplimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipExplimit_descriptor_;
  metadata.reflection = Sheet_VipExplimit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
