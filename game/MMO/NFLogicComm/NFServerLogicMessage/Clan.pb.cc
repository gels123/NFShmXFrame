// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Clan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ClanLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanComInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanComInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyClanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyClanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3MemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3MemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyClanListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyClanListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyApplyClanList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyApplyClanList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyClanReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyClanReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyClanRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyClanRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClan3Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyClanInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyClanInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyClanInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyClanInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanApplyOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanApplyOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanApplyOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanApplyOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanRoleOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanRoleOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanRoleOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanRoleOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanInviteInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanInviteInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClanInviteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClanInviteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanInviteRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanInviteRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanInviteRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanInviteRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAddClanInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAddClanInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteTargetOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteTargetOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteTargetOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteTargetOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleClanRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleClanRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleJoinClan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleJoinClan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanComInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanComInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3InfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3InfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan5InfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan5InfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanRoleComInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanRoleComInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3RoleInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3RoleInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan5RoleInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan5RoleInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanSysOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanSysOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClanSynRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClanSynRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LModifyClanInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LModifyClanInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CModifyClanInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CModifyClanInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Clan_2eproto() {
  protobuf_AddDesc_Clan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Clan.proto");
  GOOGLE_CHECK(file != NULL);
  ClanLog_descriptor_ = file->message_type(0);
  static const int ClanLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanLog, chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanLog, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanLog, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanLog, time_),
  };
  ClanLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanLog_descriptor_,
      ClanLog::default_instance_,
      ClanLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanLog));
  ClanComInfo_descriptor_ = file->message_type(1);
  static const int ClanComInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, badge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, badge_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, clan_join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, clan_win_num_),
  };
  ClanComInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanComInfo_descriptor_,
      ClanComInfo::default_instance_,
      ClanComInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanComInfo));
  ApplyClanInfo_descriptor_ = file->message_type(2);
  static const int ApplyClanInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanInfo, clan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanInfo, leader_name_),
  };
  ApplyClanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyClanInfo_descriptor_,
      ApplyClanInfo::default_instance_,
      ApplyClanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyClanInfo));
  Clan3MemberInfo_descriptor_ = file->message_type(3);
  static const int Clan3MemberInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, mini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, last_join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, leader_),
  };
  Clan3MemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3MemberInfo_descriptor_,
      Clan3MemberInfo::default_instance_,
      Clan3MemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3MemberInfo));
  ApplyClanListReq_descriptor_ = file->message_type(4);
  static const int ApplyClanListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanListReq, clan_type_),
  };
  ApplyClanListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyClanListReq_descriptor_,
      ApplyClanListReq::default_instance_,
      ApplyClanListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyClanListReq));
  NotifyApplyClanList_descriptor_ = file->message_type(5);
  static const int NotifyApplyClanList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyApplyClanList, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyApplyClanList, info_),
  };
  NotifyApplyClanList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyApplyClanList_descriptor_,
      NotifyApplyClanList::default_instance_,
      NotifyApplyClanList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyApplyClanList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyApplyClanList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyApplyClanList));
  ApplyClanReq_descriptor_ = file->message_type(6);
  static const int ApplyClanReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanReq, clan_id_),
  };
  ApplyClanReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyClanReq_descriptor_,
      ApplyClanReq::default_instance_,
      ApplyClanReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyClanReq));
  ApplyClanRsp_descriptor_ = file->message_type(7);
  static const int ApplyClanRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanRsp, clan_id_),
  };
  ApplyClanRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyClanRsp_descriptor_,
      ApplyClanRsp::default_instance_,
      ApplyClanRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyClanRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyClanRsp));
  ClanCreateReq_descriptor_ = file->message_type(8);
  static const int ClanCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateReq, clan_name_),
  };
  ClanCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanCreateReq_descriptor_,
      ClanCreateReq::default_instance_,
      ClanCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanCreateReq));
  ClanCreateRsp_descriptor_ = file->message_type(9);
  static const int ClanCreateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateRsp, clan_name_),
  };
  ClanCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanCreateRsp_descriptor_,
      ClanCreateRsp::default_instance_,
      ClanCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanCreateRsp));
  ClanDataReq_descriptor_ = file->message_type(10);
  static const int ClanDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDataReq, clan_type_),
  };
  ClanDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanDataReq_descriptor_,
      ClanDataReq::default_instance_,
      ClanDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanDataReq));
  NotifyClan3Data_descriptor_ = file->message_type(11);
  static const int NotifyClan3Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Data, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Data, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Data, open_badges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Data, apply_),
  };
  NotifyClan3Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3Data_descriptor_,
      NotifyClan3Data::default_instance_,
      NotifyClan3Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3Data));
  ModifyClanInfoReq_descriptor_ = file->message_type(12);
  static const int ModifyClanInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoReq, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoReq, badge_id_),
  };
  ModifyClanInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyClanInfoReq_descriptor_,
      ModifyClanInfoReq::default_instance_,
      ModifyClanInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyClanInfoReq));
  ModifyClanInfoRsp_descriptor_ = file->message_type(13);
  static const int ModifyClanInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, badge_id_),
  };
  ModifyClanInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyClanInfoRsp_descriptor_,
      ModifyClanInfoRsp::default_instance_,
      ModifyClanInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyClanInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyClanInfoRsp));
  ClanApplyOptReq_descriptor_ = file->message_type(14);
  static const int ClanApplyOptReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptReq, target_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptReq, flag_),
  };
  ClanApplyOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanApplyOptReq_descriptor_,
      ClanApplyOptReq::default_instance_,
      ClanApplyOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanApplyOptReq));
  ClanApplyOptRsp_descriptor_ = file->message_type(15);
  static const int ClanApplyOptRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptRsp, target_cid_),
  };
  ClanApplyOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanApplyOptRsp_descriptor_,
      ClanApplyOptRsp::default_instance_,
      ClanApplyOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanApplyOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanApplyOptRsp));
  ClanRoleOptReq_descriptor_ = file->message_type(16);
  static const int ClanRoleOptReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptReq, target_cid_),
  };
  ClanRoleOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanRoleOptReq_descriptor_,
      ClanRoleOptReq::default_instance_,
      ClanRoleOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanRoleOptReq));
  ClanRoleOptRsp_descriptor_ = file->message_type(17);
  static const int ClanRoleOptRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptRsp, target_cid_),
  };
  ClanRoleOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanRoleOptRsp_descriptor_,
      ClanRoleOptRsp::default_instance_,
      ClanRoleOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanRoleOptRsp));
  ClanInviteInfoReq_descriptor_ = file->message_type(18);
  static const int ClanInviteInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteInfoReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteInfoReq, type_),
  };
  ClanInviteInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanInviteInfoReq_descriptor_,
      ClanInviteInfoReq::default_instance_,
      ClanInviteInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanInviteInfoReq));
  NotifyClanInviteInfo_descriptor_ = file->message_type(19);
  static const int NotifyClanInviteInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanInviteInfo, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanInviteInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanInviteInfo, infos_),
  };
  NotifyClanInviteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClanInviteInfo_descriptor_,
      NotifyClanInviteInfo::default_instance_,
      NotifyClanInviteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanInviteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanInviteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClanInviteInfo));
  ClanInviteRoleReq_descriptor_ = file->message_type(20);
  static const int ClanInviteRoleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleReq, target_cids_),
  };
  ClanInviteRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanInviteRoleReq_descriptor_,
      ClanInviteRoleReq::default_instance_,
      ClanInviteRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanInviteRoleReq));
  ClanInviteRoleRsp_descriptor_ = file->message_type(21);
  static const int ClanInviteRoleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleRsp, target_cids_),
  };
  ClanInviteRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanInviteRoleRsp_descriptor_,
      ClanInviteRoleRsp::default_instance_,
      ClanInviteRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanInviteRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanInviteRoleRsp));
  NotifyAddClanInvite_descriptor_ = file->message_type(22);
  static const int NotifyAddClanInvite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, send_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, clan_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, clan_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, fight_),
  };
  NotifyAddClanInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAddClanInvite_descriptor_,
      NotifyAddClanInvite::default_instance_,
      NotifyAddClanInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddClanInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAddClanInvite));
  InviteTargetOptReq_descriptor_ = file->message_type(23);
  static const int InviteTargetOptReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptReq, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptReq, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptReq, flag_),
  };
  InviteTargetOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteTargetOptReq_descriptor_,
      InviteTargetOptReq::default_instance_,
      InviteTargetOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteTargetOptReq));
  InviteTargetOptRsp_descriptor_ = file->message_type(24);
  static const int InviteTargetOptRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, clan_score_),
  };
  InviteTargetOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteTargetOptRsp_descriptor_,
      InviteTargetOptRsp::default_instance_,
      InviteTargetOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteTargetOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteTargetOptRsp));
  NotifyRoleClanRank_descriptor_ = file->message_type(25);
  static const int NotifyRoleClanRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleClanRank, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleClanRank, rank_),
  };
  NotifyRoleClanRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleClanRank_descriptor_,
      NotifyRoleClanRank::default_instance_,
      NotifyRoleClanRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleClanRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleClanRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleClanRank));
  NotifyRoleJoinClan_descriptor_ = file->message_type(26);
  static const int NotifyRoleJoinClan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleJoinClan, clan_id_),
  };
  NotifyRoleJoinClan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleJoinClan_descriptor_,
      NotifyRoleJoinClan::default_instance_,
      NotifyRoleJoinClan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleJoinClan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleJoinClan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleJoinClan));
  ClanComInfoDB_descriptor_ = file->message_type(27);
  static const int ClanComInfoDB_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, badge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, badge_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, refuse_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, update_score_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, clan_join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, clan_win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, open_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, fight_),
  };
  ClanComInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanComInfoDB_descriptor_,
      ClanComInfoDB::default_instance_,
      ClanComInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanComInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanComInfoDB));
  Clan3InfoDB_descriptor_ = file->message_type(28);
  static const int Clan3InfoDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3InfoDB, com_),
  };
  Clan3InfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3InfoDB_descriptor_,
      Clan3InfoDB::default_instance_,
      Clan3InfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3InfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3InfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3InfoDB));
  Clan5InfoDB_descriptor_ = file->message_type(29);
  static const int Clan5InfoDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan5InfoDB, com_),
  };
  Clan5InfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan5InfoDB_descriptor_,
      Clan5InfoDB::default_instance_,
      Clan5InfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan5InfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan5InfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan5InfoDB));
  ClanRoleComInfoDB_descriptor_ = file->message_type(30);
  static const int ClanRoleComInfoDB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, ban_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, refuse_invite_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, last_join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, invite_list_),
  };
  ClanRoleComInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanRoleComInfoDB_descriptor_,
      ClanRoleComInfoDB::default_instance_,
      ClanRoleComInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanRoleComInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanRoleComInfoDB));
  Clan3RoleInfoDB_descriptor_ = file->message_type(31);
  static const int Clan3RoleInfoDB_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, role_join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, role_win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, role_cw_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, role_dead_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, role_cl_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, day_join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, day_recv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, mvp_num_),
  };
  Clan3RoleInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3RoleInfoDB_descriptor_,
      Clan3RoleInfoDB::default_instance_,
      Clan3RoleInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RoleInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3RoleInfoDB));
  Clan5RoleInfoDB_descriptor_ = file->message_type(32);
  static const int Clan5RoleInfoDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan5RoleInfoDB, com_),
  };
  Clan5RoleInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan5RoleInfoDB_descriptor_,
      Clan5RoleInfoDB::default_instance_,
      Clan5RoleInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan5RoleInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan5RoleInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan5RoleInfoDB));
  ClanSimple_descriptor_ = file->message_type(33);
  static const int ClanSimple_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, badge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, badge_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, update_score_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, fight_),
  };
  ClanSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanSimple_descriptor_,
      ClanSimple::default_instance_,
      ClanSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanSimple));
  ClanSysOptReq_descriptor_ = file->message_type(34);
  static const int ClanSysOptReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, cids_),
  };
  ClanSysOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanSysOptReq_descriptor_,
      ClanSysOptReq::default_instance_,
      ClanSysOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanSysOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanSysOptReq));
  NotifyClanSynRank_descriptor_ = file->message_type(35);
  static const int NotifyClanSynRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanSynRank, clan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanSynRank, rank_),
  };
  NotifyClanSynRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClanSynRank_descriptor_,
      NotifyClanSynRank::default_instance_,
      NotifyClanSynRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanSynRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClanSynRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClanSynRank));
  C2LModifyClanInfoReq_descriptor_ = file->message_type(36);
  static const int C2LModifyClanInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LModifyClanInfoReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LModifyClanInfoReq, req_),
  };
  C2LModifyClanInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LModifyClanInfoReq_descriptor_,
      C2LModifyClanInfoReq::default_instance_,
      C2LModifyClanInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LModifyClanInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LModifyClanInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LModifyClanInfoReq));
  L2CModifyClanInfoRsp_descriptor_ = file->message_type(37);
  static const int L2CModifyClanInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CModifyClanInfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CModifyClanInfoRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CModifyClanInfoRsp, req_),
  };
  L2CModifyClanInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CModifyClanInfoRsp_descriptor_,
      L2CModifyClanInfoRsp::default_instance_,
      L2CModifyClanInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CModifyClanInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CModifyClanInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CModifyClanInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Clan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanLog_descriptor_, &ClanLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanComInfo_descriptor_, &ClanComInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyClanInfo_descriptor_, &ApplyClanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3MemberInfo_descriptor_, &Clan3MemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyClanListReq_descriptor_, &ApplyClanListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyApplyClanList_descriptor_, &NotifyApplyClanList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyClanReq_descriptor_, &ApplyClanReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyClanRsp_descriptor_, &ApplyClanRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanCreateReq_descriptor_, &ClanCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanCreateRsp_descriptor_, &ClanCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanDataReq_descriptor_, &ClanDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3Data_descriptor_, &NotifyClan3Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyClanInfoReq_descriptor_, &ModifyClanInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyClanInfoRsp_descriptor_, &ModifyClanInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanApplyOptReq_descriptor_, &ClanApplyOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanApplyOptRsp_descriptor_, &ClanApplyOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanRoleOptReq_descriptor_, &ClanRoleOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanRoleOptRsp_descriptor_, &ClanRoleOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanInviteInfoReq_descriptor_, &ClanInviteInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClanInviteInfo_descriptor_, &NotifyClanInviteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanInviteRoleReq_descriptor_, &ClanInviteRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanInviteRoleRsp_descriptor_, &ClanInviteRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAddClanInvite_descriptor_, &NotifyAddClanInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteTargetOptReq_descriptor_, &InviteTargetOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteTargetOptRsp_descriptor_, &InviteTargetOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleClanRank_descriptor_, &NotifyRoleClanRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleJoinClan_descriptor_, &NotifyRoleJoinClan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanComInfoDB_descriptor_, &ClanComInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3InfoDB_descriptor_, &Clan3InfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan5InfoDB_descriptor_, &Clan5InfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanRoleComInfoDB_descriptor_, &ClanRoleComInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3RoleInfoDB_descriptor_, &Clan3RoleInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan5RoleInfoDB_descriptor_, &Clan5RoleInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanSimple_descriptor_, &ClanSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanSysOptReq_descriptor_, &ClanSysOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClanSynRank_descriptor_, &NotifyClanSynRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LModifyClanInfoReq_descriptor_, &C2LModifyClanInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CModifyClanInfoRsp_descriptor_, &L2CModifyClanInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Clan_2eproto() {
  delete ClanLog::default_instance_;
  delete ClanLog_reflection_;
  delete ClanComInfo::default_instance_;
  delete ClanComInfo_reflection_;
  delete ApplyClanInfo::default_instance_;
  delete ApplyClanInfo_reflection_;
  delete Clan3MemberInfo::default_instance_;
  delete Clan3MemberInfo_reflection_;
  delete ApplyClanListReq::default_instance_;
  delete ApplyClanListReq_reflection_;
  delete NotifyApplyClanList::default_instance_;
  delete NotifyApplyClanList_reflection_;
  delete ApplyClanReq::default_instance_;
  delete ApplyClanReq_reflection_;
  delete ApplyClanRsp::default_instance_;
  delete ApplyClanRsp_reflection_;
  delete ClanCreateReq::default_instance_;
  delete ClanCreateReq_reflection_;
  delete ClanCreateRsp::default_instance_;
  delete ClanCreateRsp_reflection_;
  delete ClanDataReq::default_instance_;
  delete ClanDataReq_reflection_;
  delete NotifyClan3Data::default_instance_;
  delete NotifyClan3Data_reflection_;
  delete ModifyClanInfoReq::default_instance_;
  delete ModifyClanInfoReq_reflection_;
  delete ModifyClanInfoRsp::default_instance_;
  delete ModifyClanInfoRsp_reflection_;
  delete ClanApplyOptReq::default_instance_;
  delete ClanApplyOptReq_reflection_;
  delete ClanApplyOptRsp::default_instance_;
  delete ClanApplyOptRsp_reflection_;
  delete ClanRoleOptReq::default_instance_;
  delete ClanRoleOptReq_reflection_;
  delete ClanRoleOptRsp::default_instance_;
  delete ClanRoleOptRsp_reflection_;
  delete ClanInviteInfoReq::default_instance_;
  delete ClanInviteInfoReq_reflection_;
  delete NotifyClanInviteInfo::default_instance_;
  delete NotifyClanInviteInfo_reflection_;
  delete ClanInviteRoleReq::default_instance_;
  delete ClanInviteRoleReq_reflection_;
  delete ClanInviteRoleRsp::default_instance_;
  delete ClanInviteRoleRsp_reflection_;
  delete NotifyAddClanInvite::default_instance_;
  delete NotifyAddClanInvite_reflection_;
  delete InviteTargetOptReq::default_instance_;
  delete InviteTargetOptReq_reflection_;
  delete InviteTargetOptRsp::default_instance_;
  delete InviteTargetOptRsp_reflection_;
  delete NotifyRoleClanRank::default_instance_;
  delete NotifyRoleClanRank_reflection_;
  delete NotifyRoleJoinClan::default_instance_;
  delete NotifyRoleJoinClan_reflection_;
  delete ClanComInfoDB::default_instance_;
  delete ClanComInfoDB_reflection_;
  delete Clan3InfoDB::default_instance_;
  delete Clan3InfoDB_reflection_;
  delete Clan5InfoDB::default_instance_;
  delete Clan5InfoDB_reflection_;
  delete ClanRoleComInfoDB::default_instance_;
  delete ClanRoleComInfoDB_reflection_;
  delete Clan3RoleInfoDB::default_instance_;
  delete Clan3RoleInfoDB_reflection_;
  delete Clan5RoleInfoDB::default_instance_;
  delete Clan5RoleInfoDB_reflection_;
  delete ClanSimple::default_instance_;
  delete ClanSimple_reflection_;
  delete ClanSysOptReq::default_instance_;
  delete ClanSysOptReq_reflection_;
  delete NotifyClanSynRank::default_instance_;
  delete NotifyClanSynRank_reflection_;
  delete C2LModifyClanInfoReq::default_instance_;
  delete C2LModifyClanInfoReq_reflection_;
  delete L2CModifyClanInfoRsp::default_instance_;
  delete L2CModifyClanInfoRsp_reflection_;
}

void protobuf_AddDesc_Clan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nClan.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"F\n\007ClanLog\022\017\n\007chat_id\030\001 \001(\005\022\014"
    "\n\004text\030\002 \003(\014\022\016\n\006params\030\003 \003(\004\022\014\n\004time\030\004 \001"
    "(\004\"\351\001\n\013ClanComInfo\022\017\n\007clan_id\030\001 \001(\004\022\014\n\004n"
    "ame\030\002 \001(\014\022\r\n\005score\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\013"
    "\n\003zid\030\005 \001(\005\022\020\n\010badge_id\030\006 \001(\005\022\022\n\nbadge_n"
    "ame\030\007 \001(\014\022\r\n\005fight\030\010 \001(\004\022\016\n\006notice\030\t \001(\014"
    "\022\037\n\004logs\030\n \003(\0132\021.proto_ff.ClanLog\022\025\n\rcla"
    "n_join_num\030\013 \001(\005\022\024\n\014clan_win_num\030\014 \001(\005\"e"
    "\n\rApplyClanInfo\022#\n\004clan\030\001 \001(\0132\025.proto_ff"
    ".ClanComInfo\022\r\n\005state\030\002 \001(\005\022\013\n\003num\030\003 \001(\005"
    "\022\023\n\013leader_name\030\004 \001(\014\"\210\001\n\017Clan3MemberInf"
    "o\022*\n\004mini\030\001 \001(\0132\034.proto_ff.RolePlayerMin"
    "iInfo\022\026\n\016last_join_time\030\002 \001(\004\022\017\n\007win_num"
    "\030\003 \001(\005\022\020\n\010join_num\030\004 \001(\005\022\016\n\006leader\030\005 \001(\005"
    "\"%\n\020ApplyClanListReq\022\021\n\tclan_type\030\001 \001(\005\""
    "O\n\023NotifyApplyClanList\022\021\n\tclan_type\030\001 \001("
    "\005\022%\n\004info\030\002 \003(\0132\027.proto_ff.ApplyClanInfo"
    "\"2\n\014ApplyClanReq\022\021\n\tclan_type\030\001 \001(\005\022\017\n\007c"
    "lan_id\030\002 \003(\004\"\?\n\014ApplyClanRsp\022\013\n\003ret\030\001 \001("
    "\005\022\021\n\tclan_type\030\002 \001(\005\022\017\n\007clan_id\030\003 \003(\004\"5\n"
    "\rClanCreateReq\022\021\n\tclan_type\030\001 \001(\005\022\021\n\tcla"
    "n_name\030\002 \001(\014\"B\n\rClanCreateRsp\022\013\n\003ret\030\001 \001"
    "(\005\022\021\n\tclan_type\030\002 \001(\005\022\021\n\tclan_name\030\003 \001(\014"
    "\" \n\013ClanDataReq\022\021\n\tclan_type\030\001 \001(\005\"\244\001\n\017N"
    "otifyClan3Data\022#\n\004info\030\001 \001(\0132\025.proto_ff."
    "ClanComInfo\022*\n\007members\030\002 \003(\0132\031.proto_ff."
    "Clan3MemberInfo\022\023\n\013open_badges\030\003 \003(\005\022+\n\005"
    "apply\030\004 \003(\0132\034.proto_ff.RolePlayerMiniInf"
    "o\"X\n\021ModifyClanInfoReq\022\021\n\tclan_type\030\001 \001("
    "\005\022\020\n\010opt_type\030\002 \001(\005\022\014\n\004name\030\003 \001(\014\022\020\n\010bad"
    "ge_id\030\004 \001(\005\"e\n\021ModifyClanInfoRsp\022\013\n\003ret\030"
    "\001 \001(\005\022\021\n\tclan_type\030\002 \001(\005\022\020\n\010opt_type\030\003 \001"
    "(\005\022\014\n\004name\030\004 \001(\014\022\020\n\010badge_id\030\005 \001(\005\"T\n\017Cl"
    "anApplyOptReq\022\021\n\tclan_type\030\001 \001(\005\022\014\n\004type"
    "\030\002 \001(\005\022\022\n\ntarget_cid\030\003 \001(\004\022\014\n\004flag\030\004 \001(\005"
    "\"S\n\017ClanApplyOptRsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tclan"
    "_type\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\022\n\ntarget_cid\030"
    "\004 \001(\004\"E\n\016ClanRoleOptReq\022\021\n\tclan_type\030\001 \001"
    "(\005\022\014\n\004type\030\002 \001(\005\022\022\n\ntarget_cid\030\003 \001(\004\"Q\n\016"
    "ClanRoleOptRsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tclan_type"
    "\030\002 \001(\005\022\013\n\003opt\030\003 \001(\005\022\022\n\ntarget_cid\030\004 \001(\004\""
    "4\n\021ClanInviteInfoReq\022\021\n\tclan_type\030\001 \001(\005\022"
    "\014\n\004type\030\002 \001(\005\"d\n\024NotifyClanInviteInfo\022\021\n"
    "\tclan_type\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022+\n\005infos\030"
    "\003 \003(\0132\034.proto_ff.RolePlayerMiniInfo\"I\n\021C"
    "lanInviteRoleReq\022\021\n\tclan_type\030\001 \001(\005\022\014\n\004t"
    "ype\030\002 \001(\005\022\023\n\013target_cids\030\003 \003(\004\"V\n\021ClanIn"
    "viteRoleRsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tclan_type\030\002 "
    "\001(\005\022\014\n\004type\030\003 \001(\005\022\023\n\013target_cids\030\004 \003(\004\"\224"
    "\001\n\023NotifyAddClanInvite\022\020\n\010send_cid\030\001 \001(\004"
    "\022\021\n\tsend_name\030\002 \001(\014\022\021\n\tclan_type\030\003 \001(\005\022\017"
    "\n\007clan_id\030\004 \001(\004\022\021\n\tclan_name\030\005 \001(\014\022\022\n\ncl"
    "an_score\030\006 \001(\005\022\r\n\005fight\030\007 \001(\005\"X\n\022InviteT"
    "argetOptReq\022\021\n\tclan_type\030\001 \001(\005\022\017\n\007clan_i"
    "d\030\002 \001(\004\022\020\n\010opt_type\030\003 \001(\005\022\014\n\004flag\030\004 \001(\005\""
    "k\n\022InviteTargetOptRsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tcl"
    "an_type\030\002 \001(\005\022\017\n\007clan_id\030\003 \001(\004\022\020\n\010opt_ty"
    "pe\030\004 \001(\005\022\022\n\nclan_score\030\005 \001(\005\"5\n\022NotifyRo"
    "leClanRank\022\021\n\tclan_type\030\001 \001(\005\022\014\n\004rank\030\002 "
    "\001(\005\"%\n\022NotifyRoleJoinClan\022\017\n\007clan_id\030\001 \001"
    "(\004\"\360\002\n\rClanComInfoDB\022\017\n\007clan_id\030\001 \001(\004\022\013\n"
    "\003zid\030\002 \001(\005\022\014\n\004name\030\003 \001(\014\022\r\n\005score\030\004 \001(\005\022"
    "\020\n\010badge_id\030\005 \001(\005\022\022\n\nbadge_name\030\006 \001(\014\022\016\n"
    "\006notice\030\007 \001(\014\022\037\n\004logs\030\010 \003(\0132\021.proto_ff.C"
    "lanLog\022\022\n\nleader_cid\030\t \001(\004\022\017\n\007members\030\n "
    "\003(\004\022\023\n\013refuse_list\030\013 \003(\004\022\022\n\napply_list\030\014"
    " \003(\004\022\031\n\021update_score_time\030\r \001(\004\022\025\n\rclan_"
    "join_num\030\016 \001(\005\022\024\n\014clan_win_num\030\017 \001(\005\022\022\n\n"
    "open_badge\030\020 \003(\005\022\024\n\014refresh_time\030\021 \001(\004\022\r"
    "\n\005fight\030\022 \001(\004\"3\n\013Clan3InfoDB\022$\n\003com\030\001 \001("
    "\0132\027.proto_ff.ClanComInfoDB\"3\n\013Clan5InfoD"
    "B\022$\n\003com\030\001 \001(\0132\027.proto_ff.ClanComInfoDB\""
    "\220\001\n\021ClanRoleComInfoDB\022\013\n\003cid\030\001 \001(\004\022\020\n\010ba"
    "n_time\030\002 \001(\004\022\032\n\022refuse_invite_list\030\003 \003(\004"
    "\022\023\n\013update_time\030\004 \001(\004\022\026\n\016last_join_time\030"
    "\005 \001(\004\022\023\n\013invite_list\030\006 \003(\004\"\345\001\n\017Clan3Role"
    "InfoDB\022(\n\003com\030\001 \001(\0132\033.proto_ff.ClanRoleC"
    "omInfoDB\022\025\n\rrole_join_num\030\002 \001(\005\022\024\n\014role_"
    "win_num\030\003 \001(\005\022\023\n\013role_cw_num\030\004 \001(\005\022\025\n\rro"
    "le_dead_num\030\005 \001(\005\022\023\n\013role_cl_num\030\006 \001(\005\022\024"
    "\n\014day_join_num\030\007 \001(\005\022\023\n\013day_recv_id\030\010 \003("
    "\005\022\017\n\007mvp_num\030\t \001(\005\";\n\017Clan5RoleInfoDB\022(\n"
    "\003com\030\001 \001(\0132\033.proto_ff.ClanRoleComInfoDB\""
    "\274\001\n\nClanSimple\022\017\n\007clan_id\030\001 \001(\004\022\013\n\003zid\030\002"
    " \001(\005\022\014\n\004name\030\003 \001(\014\022\r\n\005score\030\004 \001(\005\022\020\n\010bad"
    "ge_id\030\005 \001(\005\022\022\n\nbadge_name\030\006 \001(\014\022\022\n\nleade"
    "r_cid\030\007 \001(\004\022\017\n\007members\030\010 \003(\004\022\031\n\021update_s"
    "core_time\030\t \001(\004\022\r\n\005fight\030\n \001(\004\"p\n\rClanSy"
    "sOptReq\022\014\n\004type\030\001 \001(\005\022\021\n\tclan_type\030\002 \001(\005"
    "\022\013\n\003zid\030\003 \001(\005\022#\n\005infos\030\004 \003(\0132\024.proto_ff."
    "ClanSimple\022\014\n\004cids\030\005 \003(\004\"I\n\021NotifyClanSy"
    "nRank\022\021\n\tclan_type\030\001 \001(\005\022!\n\004rank\030\002 \003(\0132\023"
    ".proto_ff.ComPair64\"M\n\024C2LModifyClanInfo"
    "Req\022\013\n\003cid\030\001 \001(\004\022(\n\003req\030\002 \001(\0132\033.proto_ff"
    ".ModifyClanInfoReq\"Z\n\024L2CModifyClanInfoR"
    "sp\022\013\n\003ret\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022(\n\003req\030\003 \001("
    "\0132\033.proto_ff.ModifyClanInfoReq", 3910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Clan.proto", &protobuf_RegisterTypes);
  ClanLog::default_instance_ = new ClanLog();
  ClanComInfo::default_instance_ = new ClanComInfo();
  ApplyClanInfo::default_instance_ = new ApplyClanInfo();
  Clan3MemberInfo::default_instance_ = new Clan3MemberInfo();
  ApplyClanListReq::default_instance_ = new ApplyClanListReq();
  NotifyApplyClanList::default_instance_ = new NotifyApplyClanList();
  ApplyClanReq::default_instance_ = new ApplyClanReq();
  ApplyClanRsp::default_instance_ = new ApplyClanRsp();
  ClanCreateReq::default_instance_ = new ClanCreateReq();
  ClanCreateRsp::default_instance_ = new ClanCreateRsp();
  ClanDataReq::default_instance_ = new ClanDataReq();
  NotifyClan3Data::default_instance_ = new NotifyClan3Data();
  ModifyClanInfoReq::default_instance_ = new ModifyClanInfoReq();
  ModifyClanInfoRsp::default_instance_ = new ModifyClanInfoRsp();
  ClanApplyOptReq::default_instance_ = new ClanApplyOptReq();
  ClanApplyOptRsp::default_instance_ = new ClanApplyOptRsp();
  ClanRoleOptReq::default_instance_ = new ClanRoleOptReq();
  ClanRoleOptRsp::default_instance_ = new ClanRoleOptRsp();
  ClanInviteInfoReq::default_instance_ = new ClanInviteInfoReq();
  NotifyClanInviteInfo::default_instance_ = new NotifyClanInviteInfo();
  ClanInviteRoleReq::default_instance_ = new ClanInviteRoleReq();
  ClanInviteRoleRsp::default_instance_ = new ClanInviteRoleRsp();
  NotifyAddClanInvite::default_instance_ = new NotifyAddClanInvite();
  InviteTargetOptReq::default_instance_ = new InviteTargetOptReq();
  InviteTargetOptRsp::default_instance_ = new InviteTargetOptRsp();
  NotifyRoleClanRank::default_instance_ = new NotifyRoleClanRank();
  NotifyRoleJoinClan::default_instance_ = new NotifyRoleJoinClan();
  ClanComInfoDB::default_instance_ = new ClanComInfoDB();
  Clan3InfoDB::default_instance_ = new Clan3InfoDB();
  Clan5InfoDB::default_instance_ = new Clan5InfoDB();
  ClanRoleComInfoDB::default_instance_ = new ClanRoleComInfoDB();
  Clan3RoleInfoDB::default_instance_ = new Clan3RoleInfoDB();
  Clan5RoleInfoDB::default_instance_ = new Clan5RoleInfoDB();
  ClanSimple::default_instance_ = new ClanSimple();
  ClanSysOptReq::default_instance_ = new ClanSysOptReq();
  NotifyClanSynRank::default_instance_ = new NotifyClanSynRank();
  C2LModifyClanInfoReq::default_instance_ = new C2LModifyClanInfoReq();
  L2CModifyClanInfoRsp::default_instance_ = new L2CModifyClanInfoRsp();
  ClanLog::default_instance_->InitAsDefaultInstance();
  ClanComInfo::default_instance_->InitAsDefaultInstance();
  ApplyClanInfo::default_instance_->InitAsDefaultInstance();
  Clan3MemberInfo::default_instance_->InitAsDefaultInstance();
  ApplyClanListReq::default_instance_->InitAsDefaultInstance();
  NotifyApplyClanList::default_instance_->InitAsDefaultInstance();
  ApplyClanReq::default_instance_->InitAsDefaultInstance();
  ApplyClanRsp::default_instance_->InitAsDefaultInstance();
  ClanCreateReq::default_instance_->InitAsDefaultInstance();
  ClanCreateRsp::default_instance_->InitAsDefaultInstance();
  ClanDataReq::default_instance_->InitAsDefaultInstance();
  NotifyClan3Data::default_instance_->InitAsDefaultInstance();
  ModifyClanInfoReq::default_instance_->InitAsDefaultInstance();
  ModifyClanInfoRsp::default_instance_->InitAsDefaultInstance();
  ClanApplyOptReq::default_instance_->InitAsDefaultInstance();
  ClanApplyOptRsp::default_instance_->InitAsDefaultInstance();
  ClanRoleOptReq::default_instance_->InitAsDefaultInstance();
  ClanRoleOptRsp::default_instance_->InitAsDefaultInstance();
  ClanInviteInfoReq::default_instance_->InitAsDefaultInstance();
  NotifyClanInviteInfo::default_instance_->InitAsDefaultInstance();
  ClanInviteRoleReq::default_instance_->InitAsDefaultInstance();
  ClanInviteRoleRsp::default_instance_->InitAsDefaultInstance();
  NotifyAddClanInvite::default_instance_->InitAsDefaultInstance();
  InviteTargetOptReq::default_instance_->InitAsDefaultInstance();
  InviteTargetOptRsp::default_instance_->InitAsDefaultInstance();
  NotifyRoleClanRank::default_instance_->InitAsDefaultInstance();
  NotifyRoleJoinClan::default_instance_->InitAsDefaultInstance();
  ClanComInfoDB::default_instance_->InitAsDefaultInstance();
  Clan3InfoDB::default_instance_->InitAsDefaultInstance();
  Clan5InfoDB::default_instance_->InitAsDefaultInstance();
  ClanRoleComInfoDB::default_instance_->InitAsDefaultInstance();
  Clan3RoleInfoDB::default_instance_->InitAsDefaultInstance();
  Clan5RoleInfoDB::default_instance_->InitAsDefaultInstance();
  ClanSimple::default_instance_->InitAsDefaultInstance();
  ClanSysOptReq::default_instance_->InitAsDefaultInstance();
  NotifyClanSynRank::default_instance_->InitAsDefaultInstance();
  C2LModifyClanInfoReq::default_instance_->InitAsDefaultInstance();
  L2CModifyClanInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Clan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Clan_2eproto {
  StaticDescriptorInitializer_Clan_2eproto() {
    protobuf_AddDesc_Clan_2eproto();
  }
} static_descriptor_initializer_Clan_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClanLog::kChatIdFieldNumber;
const int ClanLog::kTextFieldNumber;
const int ClanLog::kParamsFieldNumber;
const int ClanLog::kTimeFieldNumber;
#endif  // !_MSC_VER

ClanLog::ClanLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanLog::InitAsDefaultInstance() {
}

ClanLog::ClanLog(const ClanLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanLog::SharedCtor() {
  _cached_size_ = 0;
  chat_id_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanLog::~ClanLog() {
  SharedDtor();
}

void ClanLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanLog_descriptor_;
}

const ClanLog& ClanLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanLog* ClanLog::default_instance_ = NULL;

ClanLog* ClanLog::New() const {
  return new ClanLog;
}

void ClanLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_id_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  text_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_id_)));
          set_has_chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // repeated bytes text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        if (input->ExpectTag(24)) goto parse_params;
        break;
      }

      // repeated uint64 params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_params;
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chat_id(), output);
  }

  // repeated bytes text = 2;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->text(i), output);
  }

  // repeated uint64 params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->params(i), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chat_id = 1;
  if (has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chat_id(), target);
  }

  // repeated bytes text = 2;
  for (int i = 0; i < this->text_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->text(i), target);
  }

  // repeated uint64 params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->params(i), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_id());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated bytes text = 2;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->text(i));
  }

  // repeated uint64 params = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanLog::MergeFrom(const ClanLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_.MergeFrom(from.text_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanLog::CopyFrom(const ClanLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanLog::IsInitialized() const {

  return true;
}

void ClanLog::Swap(ClanLog* other) {
  if (other != this) {
    std::swap(chat_id_, other->chat_id_);
    text_.Swap(&other->text_);
    params_.Swap(&other->params_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanLog_descriptor_;
  metadata.reflection = ClanLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanComInfo::kClanIdFieldNumber;
const int ClanComInfo::kNameFieldNumber;
const int ClanComInfo::kScoreFieldNumber;
const int ClanComInfo::kRankFieldNumber;
const int ClanComInfo::kZidFieldNumber;
const int ClanComInfo::kBadgeIdFieldNumber;
const int ClanComInfo::kBadgeNameFieldNumber;
const int ClanComInfo::kFightFieldNumber;
const int ClanComInfo::kNoticeFieldNumber;
const int ClanComInfo::kLogsFieldNumber;
const int ClanComInfo::kClanJoinNumFieldNumber;
const int ClanComInfo::kClanWinNumFieldNumber;
#endif  // !_MSC_VER

ClanComInfo::ClanComInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanComInfo::InitAsDefaultInstance() {
}

ClanComInfo::ClanComInfo(const ClanComInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanComInfo::SharedCtor() {
  _cached_size_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  rank_ = 0;
  zid_ = 0;
  badge_id_ = 0;
  badge_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clan_join_num_ = 0;
  clan_win_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanComInfo::~ClanComInfo() {
  SharedDtor();
}

void ClanComInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (badge_name_ != &::google::protobuf::internal::kEmptyString) {
    delete badge_name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void ClanComInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanComInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanComInfo_descriptor_;
}

const ClanComInfo& ClanComInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanComInfo* ClanComInfo::default_instance_ = NULL;

ClanComInfo* ClanComInfo::New() const {
  return new ClanComInfo;
}

void ClanComInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
    rank_ = 0;
    zid_ = 0;
    badge_id_ = 0;
    if (has_badge_name()) {
      if (badge_name_ != &::google::protobuf::internal::kEmptyString) {
        badge_name_->clear();
      }
    }
    fight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    clan_join_num_ = 0;
    clan_win_num_ = 0;
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanComInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clan_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional int32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_badge_id;
        break;
      }

      // optional int32 badge_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_id_)));
          set_has_badge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_badge_name;
        break;
      }

      // optional bytes badge_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_badge_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_badge_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // optional bytes notice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_logs;
        break;
      }

      // repeated .proto_ff.ClanLog logs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_logs;
        if (input->ExpectTag(88)) goto parse_clan_join_num;
        break;
      }

      // optional int32 clan_join_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_join_num_)));
          set_has_clan_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_clan_win_num;
        break;
      }

      // optional int32 clan_win_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_win_num_)));
          set_has_clan_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanComInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clan_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zid(), output);
  }

  // optional int32 badge_id = 6;
  if (has_badge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->badge_id(), output);
  }

  // optional bytes badge_name = 7;
  if (has_badge_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->badge_name(), output);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight(), output);
  }

  // optional bytes notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->notice(), output);
  }

  // repeated .proto_ff.ClanLog logs = 10;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->logs(i), output);
  }

  // optional int32 clan_join_num = 11;
  if (has_clan_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->clan_join_num(), output);
  }

  // optional int32 clan_win_num = 12;
  if (has_clan_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->clan_win_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanComInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clan_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zid(), target);
  }

  // optional int32 badge_id = 6;
  if (has_badge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->badge_id(), target);
  }

  // optional bytes badge_name = 7;
  if (has_badge_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->badge_name(), target);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight(), target);
  }

  // optional bytes notice = 9;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->notice(), target);
  }

  // repeated .proto_ff.ClanLog logs = 10;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->logs(i), target);
  }

  // optional int32 clan_join_num = 11;
  if (has_clan_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->clan_join_num(), target);
  }

  // optional int32 clan_win_num = 12;
  if (has_clan_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->clan_win_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanComInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clan_id = 1;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional int32 badge_id = 6;
    if (has_badge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_id());
    }

    // optional bytes badge_name = 7;
    if (has_badge_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->badge_name());
    }

    // optional uint64 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

    // optional int32 clan_join_num = 11;
    if (has_clan_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_join_num());
    }

    // optional int32 clan_win_num = 12;
    if (has_clan_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_win_num());
    }

  }
  // repeated .proto_ff.ClanLog logs = 10;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanComInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanComInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanComInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanComInfo::MergeFrom(const ClanComInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_badge_id()) {
      set_badge_id(from.badge_id());
    }
    if (from.has_badge_name()) {
      set_badge_name(from.badge_name());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_clan_join_num()) {
      set_clan_join_num(from.clan_join_num());
    }
    if (from.has_clan_win_num()) {
      set_clan_win_num(from.clan_win_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanComInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanComInfo::CopyFrom(const ClanComInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanComInfo::IsInitialized() const {

  return true;
}

void ClanComInfo::Swap(ClanComInfo* other) {
  if (other != this) {
    std::swap(clan_id_, other->clan_id_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(zid_, other->zid_);
    std::swap(badge_id_, other->badge_id_);
    std::swap(badge_name_, other->badge_name_);
    std::swap(fight_, other->fight_);
    std::swap(notice_, other->notice_);
    logs_.Swap(&other->logs_);
    std::swap(clan_join_num_, other->clan_join_num_);
    std::swap(clan_win_num_, other->clan_win_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanComInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanComInfo_descriptor_;
  metadata.reflection = ClanComInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyClanInfo::kClanFieldNumber;
const int ApplyClanInfo::kStateFieldNumber;
const int ApplyClanInfo::kNumFieldNumber;
const int ApplyClanInfo::kLeaderNameFieldNumber;
#endif  // !_MSC_VER

ApplyClanInfo::ApplyClanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyClanInfo::InitAsDefaultInstance() {
  clan_ = const_cast< ::proto_ff::ClanComInfo*>(&::proto_ff::ClanComInfo::default_instance());
}

ApplyClanInfo::ApplyClanInfo(const ApplyClanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyClanInfo::SharedCtor() {
  _cached_size_ = 0;
  clan_ = NULL;
  state_ = 0;
  num_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyClanInfo::~ApplyClanInfo() {
  SharedDtor();
}

void ApplyClanInfo::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
    delete clan_;
  }
}

void ApplyClanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyClanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyClanInfo_descriptor_;
}

const ApplyClanInfo& ApplyClanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ApplyClanInfo* ApplyClanInfo::default_instance_ = NULL;

ApplyClanInfo* ApplyClanInfo::New() const {
  return new ApplyClanInfo;
}

void ApplyClanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clan()) {
      if (clan_ != NULL) clan_->::proto_ff::ClanComInfo::Clear();
    }
    state_ = 0;
    num_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyClanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanComInfo clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyClanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanComInfo clan = 1;
  if (has_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clan(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional bytes leader_name = 4;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->leader_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyClanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanComInfo clan = 1;
  if (has_clan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clan(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional bytes leader_name = 4;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->leader_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyClanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanComInfo clan = 1;
    if (has_clan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clan());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional bytes leader_name = 4;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyClanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyClanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyClanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyClanInfo::MergeFrom(const ApplyClanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan()) {
      mutable_clan()->::proto_ff::ClanComInfo::MergeFrom(from.clan());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyClanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyClanInfo::CopyFrom(const ApplyClanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyClanInfo::IsInitialized() const {

  return true;
}

void ApplyClanInfo::Swap(ApplyClanInfo* other) {
  if (other != this) {
    std::swap(clan_, other->clan_);
    std::swap(state_, other->state_);
    std::swap(num_, other->num_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyClanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyClanInfo_descriptor_;
  metadata.reflection = ApplyClanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3MemberInfo::kMiniFieldNumber;
const int Clan3MemberInfo::kLastJoinTimeFieldNumber;
const int Clan3MemberInfo::kWinNumFieldNumber;
const int Clan3MemberInfo::kJoinNumFieldNumber;
const int Clan3MemberInfo::kLeaderFieldNumber;
#endif  // !_MSC_VER

Clan3MemberInfo::Clan3MemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3MemberInfo::InitAsDefaultInstance() {
  mini_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

Clan3MemberInfo::Clan3MemberInfo(const Clan3MemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  mini_ = NULL;
  last_join_time_ = GOOGLE_ULONGLONG(0);
  win_num_ = 0;
  join_num_ = 0;
  leader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3MemberInfo::~Clan3MemberInfo() {
  SharedDtor();
}

void Clan3MemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mini_;
  }
}

void Clan3MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3MemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3MemberInfo_descriptor_;
}

const Clan3MemberInfo& Clan3MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

Clan3MemberInfo* Clan3MemberInfo::default_instance_ = NULL;

Clan3MemberInfo* Clan3MemberInfo::New() const {
  return new Clan3MemberInfo;
}

void Clan3MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mini()) {
      if (mini_ != NULL) mini_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    last_join_time_ = GOOGLE_ULONGLONG(0);
    win_num_ = 0;
    join_num_ = 0;
    leader_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo mini = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mini()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_join_time;
        break;
      }

      // optional uint64 last_join_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_join_time_)));
          set_has_last_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_join_num;
        break;
      }

      // optional int32 join_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_num_)));
          set_has_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leader;
        break;
      }

      // optional int32 leader = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo mini = 1;
  if (has_mini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mini(), output);
  }

  // optional uint64 last_join_time = 2;
  if (has_last_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_join_time(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  // optional int32 join_num = 4;
  if (has_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->join_num(), output);
  }

  // optional int32 leader = 5;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3MemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo mini = 1;
  if (has_mini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mini(), target);
  }

  // optional uint64 last_join_time = 2;
  if (has_last_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_join_time(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  // optional int32 join_num = 4;
  if (has_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->join_num(), target);
  }

  // optional int32 leader = 5;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3MemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo mini = 1;
    if (has_mini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mini());
    }

    // optional uint64 last_join_time = 2;
    if (has_last_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_join_time());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 join_num = 4;
    if (has_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_num());
    }

    // optional int32 leader = 5;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3MemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3MemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3MemberInfo::MergeFrom(const Clan3MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mini()) {
      mutable_mini()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.mini());
    }
    if (from.has_last_join_time()) {
      set_last_join_time(from.last_join_time());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_join_num()) {
      set_join_num(from.join_num());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3MemberInfo::CopyFrom(const Clan3MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3MemberInfo::IsInitialized() const {

  if (has_mini()) {
    if (!this->mini().IsInitialized()) return false;
  }
  return true;
}

void Clan3MemberInfo::Swap(Clan3MemberInfo* other) {
  if (other != this) {
    std::swap(mini_, other->mini_);
    std::swap(last_join_time_, other->last_join_time_);
    std::swap(win_num_, other->win_num_);
    std::swap(join_num_, other->join_num_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3MemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3MemberInfo_descriptor_;
  metadata.reflection = Clan3MemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyClanListReq::kClanTypeFieldNumber;
#endif  // !_MSC_VER

ApplyClanListReq::ApplyClanListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyClanListReq::InitAsDefaultInstance() {
}

ApplyClanListReq::ApplyClanListReq(const ApplyClanListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyClanListReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyClanListReq::~ApplyClanListReq() {
  SharedDtor();
}

void ApplyClanListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyClanListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyClanListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyClanListReq_descriptor_;
}

const ApplyClanListReq& ApplyClanListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ApplyClanListReq* ApplyClanListReq::default_instance_ = NULL;

ApplyClanListReq* ApplyClanListReq::New() const {
  return new ApplyClanListReq;
}

void ApplyClanListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyClanListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyClanListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyClanListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyClanListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyClanListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyClanListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyClanListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyClanListReq::MergeFrom(const ApplyClanListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyClanListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyClanListReq::CopyFrom(const ApplyClanListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyClanListReq::IsInitialized() const {

  return true;
}

void ApplyClanListReq::Swap(ApplyClanListReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyClanListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyClanListReq_descriptor_;
  metadata.reflection = ApplyClanListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyApplyClanList::kClanTypeFieldNumber;
const int NotifyApplyClanList::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyApplyClanList::NotifyApplyClanList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyApplyClanList::InitAsDefaultInstance() {
}

NotifyApplyClanList::NotifyApplyClanList(const NotifyApplyClanList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyApplyClanList::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyApplyClanList::~NotifyApplyClanList() {
  SharedDtor();
}

void NotifyApplyClanList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyApplyClanList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyApplyClanList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyApplyClanList_descriptor_;
}

const NotifyApplyClanList& NotifyApplyClanList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyApplyClanList* NotifyApplyClanList::default_instance_ = NULL;

NotifyApplyClanList* NotifyApplyClanList::New() const {
  return new NotifyApplyClanList;
}

void NotifyApplyClanList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyApplyClanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.ApplyClanInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyApplyClanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // repeated .proto_ff.ApplyClanInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyApplyClanList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // repeated .proto_ff.ApplyClanInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyApplyClanList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

  }
  // repeated .proto_ff.ApplyClanInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyApplyClanList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyApplyClanList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyApplyClanList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyApplyClanList::MergeFrom(const NotifyApplyClanList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyApplyClanList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyApplyClanList::CopyFrom(const NotifyApplyClanList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyApplyClanList::IsInitialized() const {

  return true;
}

void NotifyApplyClanList::Swap(NotifyApplyClanList* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyApplyClanList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyApplyClanList_descriptor_;
  metadata.reflection = NotifyApplyClanList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyClanReq::kClanTypeFieldNumber;
const int ApplyClanReq::kClanIdFieldNumber;
#endif  // !_MSC_VER

ApplyClanReq::ApplyClanReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyClanReq::InitAsDefaultInstance() {
}

ApplyClanReq::ApplyClanReq(const ApplyClanReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyClanReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyClanReq::~ApplyClanReq() {
  SharedDtor();
}

void ApplyClanReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyClanReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyClanReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyClanReq_descriptor_;
}

const ApplyClanReq& ApplyClanReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ApplyClanReq* ApplyClanReq::default_instance_ = NULL;

ApplyClanReq* ApplyClanReq::New() const {
  return new ApplyClanReq;
}

void ApplyClanReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
  }
  clan_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyClanReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_id;
        break;
      }

      // repeated uint64 clan_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_clan_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_clan_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyClanReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // repeated uint64 clan_id = 2;
  for (int i = 0; i < this->clan_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->clan_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyClanReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // repeated uint64 clan_id = 2;
  for (int i = 0; i < this->clan_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->clan_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyClanReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

  }
  // repeated uint64 clan_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->clan_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->clan_id(i));
    }
    total_size += 1 * this->clan_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyClanReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyClanReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyClanReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyClanReq::MergeFrom(const ApplyClanReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  clan_id_.MergeFrom(from.clan_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyClanReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyClanReq::CopyFrom(const ApplyClanReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyClanReq::IsInitialized() const {

  return true;
}

void ApplyClanReq::Swap(ApplyClanReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    clan_id_.Swap(&other->clan_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyClanReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyClanReq_descriptor_;
  metadata.reflection = ApplyClanReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyClanRsp::kRetFieldNumber;
const int ApplyClanRsp::kClanTypeFieldNumber;
const int ApplyClanRsp::kClanIdFieldNumber;
#endif  // !_MSC_VER

ApplyClanRsp::ApplyClanRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyClanRsp::InitAsDefaultInstance() {
}

ApplyClanRsp::ApplyClanRsp(const ApplyClanRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyClanRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyClanRsp::~ApplyClanRsp() {
  SharedDtor();
}

void ApplyClanRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyClanRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyClanRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyClanRsp_descriptor_;
}

const ApplyClanRsp& ApplyClanRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ApplyClanRsp* ApplyClanRsp::default_instance_ = NULL;

ApplyClanRsp* ApplyClanRsp::New() const {
  return new ApplyClanRsp;
}

void ApplyClanRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
  }
  clan_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyClanRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_id;
        break;
      }

      // repeated uint64 clan_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_clan_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_clan_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyClanRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // repeated uint64 clan_id = 3;
  for (int i = 0; i < this->clan_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->clan_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyClanRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // repeated uint64 clan_id = 3;
  for (int i = 0; i < this->clan_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->clan_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyClanRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

  }
  // repeated uint64 clan_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->clan_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->clan_id(i));
    }
    total_size += 1 * this->clan_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyClanRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyClanRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyClanRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyClanRsp::MergeFrom(const ApplyClanRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  clan_id_.MergeFrom(from.clan_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyClanRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyClanRsp::CopyFrom(const ApplyClanRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyClanRsp::IsInitialized() const {

  return true;
}

void ApplyClanRsp::Swap(ApplyClanRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    clan_id_.Swap(&other->clan_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyClanRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyClanRsp_descriptor_;
  metadata.reflection = ApplyClanRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanCreateReq::kClanTypeFieldNumber;
const int ClanCreateReq::kClanNameFieldNumber;
#endif  // !_MSC_VER

ClanCreateReq::ClanCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanCreateReq::InitAsDefaultInstance() {
}

ClanCreateReq::ClanCreateReq(const ClanCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanCreateReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanCreateReq::~ClanCreateReq() {
  SharedDtor();
}

void ClanCreateReq::SharedDtor() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (this != default_instance_) {
  }
}

void ClanCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanCreateReq_descriptor_;
}

const ClanCreateReq& ClanCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanCreateReq* ClanCreateReq::default_instance_ = NULL;

ClanCreateReq* ClanCreateReq::New() const {
  return new ClanCreateReq;
}

void ClanCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    if (has_clan_name()) {
      if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
        clan_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clan_name;
        break;
      }

      // optional bytes clan_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional bytes clan_name = 2;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->clan_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional bytes clan_name = 2;
  if (has_clan_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clan_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional bytes clan_name = 2;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clan_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanCreateReq::MergeFrom(const ClanCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_clan_name()) {
      set_clan_name(from.clan_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanCreateReq::CopyFrom(const ClanCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanCreateReq::IsInitialized() const {

  return true;
}

void ClanCreateReq::Swap(ClanCreateReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(clan_name_, other->clan_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanCreateReq_descriptor_;
  metadata.reflection = ClanCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanCreateRsp::kRetFieldNumber;
const int ClanCreateRsp::kClanTypeFieldNumber;
const int ClanCreateRsp::kClanNameFieldNumber;
#endif  // !_MSC_VER

ClanCreateRsp::ClanCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanCreateRsp::InitAsDefaultInstance() {
}

ClanCreateRsp::ClanCreateRsp(const ClanCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanCreateRsp::~ClanCreateRsp() {
  SharedDtor();
}

void ClanCreateRsp::SharedDtor() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (this != default_instance_) {
  }
}

void ClanCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanCreateRsp_descriptor_;
}

const ClanCreateRsp& ClanCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanCreateRsp* ClanCreateRsp::default_instance_ = NULL;

ClanCreateRsp* ClanCreateRsp::New() const {
  return new ClanCreateRsp;
}

void ClanCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
    if (has_clan_name()) {
      if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
        clan_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clan_name;
        break;
      }

      // optional bytes clan_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional bytes clan_name = 3;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->clan_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional bytes clan_name = 3;
  if (has_clan_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->clan_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional bytes clan_name = 3;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clan_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanCreateRsp::MergeFrom(const ClanCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_clan_name()) {
      set_clan_name(from.clan_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanCreateRsp::CopyFrom(const ClanCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanCreateRsp::IsInitialized() const {

  return true;
}

void ClanCreateRsp::Swap(ClanCreateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(clan_name_, other->clan_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanCreateRsp_descriptor_;
  metadata.reflection = ClanCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanDataReq::kClanTypeFieldNumber;
#endif  // !_MSC_VER

ClanDataReq::ClanDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanDataReq::InitAsDefaultInstance() {
}

ClanDataReq::ClanDataReq(const ClanDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanDataReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanDataReq::~ClanDataReq() {
  SharedDtor();
}

void ClanDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanDataReq_descriptor_;
}

const ClanDataReq& ClanDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanDataReq* ClanDataReq::default_instance_ = NULL;

ClanDataReq* ClanDataReq::New() const {
  return new ClanDataReq;
}

void ClanDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanDataReq::MergeFrom(const ClanDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanDataReq::CopyFrom(const ClanDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanDataReq::IsInitialized() const {

  return true;
}

void ClanDataReq::Swap(ClanDataReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanDataReq_descriptor_;
  metadata.reflection = ClanDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3Data::kInfoFieldNumber;
const int NotifyClan3Data::kMembersFieldNumber;
const int NotifyClan3Data::kOpenBadgesFieldNumber;
const int NotifyClan3Data::kApplyFieldNumber;
#endif  // !_MSC_VER

NotifyClan3Data::NotifyClan3Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3Data::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::ClanComInfo*>(&::proto_ff::ClanComInfo::default_instance());
}

NotifyClan3Data::NotifyClan3Data(const NotifyClan3Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3Data::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3Data::~NotifyClan3Data() {
  SharedDtor();
}

void NotifyClan3Data::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifyClan3Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3Data_descriptor_;
}

const NotifyClan3Data& NotifyClan3Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyClan3Data* NotifyClan3Data::default_instance_ = NULL;

NotifyClan3Data* NotifyClan3Data::New() const {
  return new NotifyClan3Data;
}

void NotifyClan3Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::ClanComInfo::Clear();
    }
  }
  members_.Clear();
  open_badges_.Clear();
  apply_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanComInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .proto_ff.Clan3MemberInfo members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(24)) goto parse_open_badges;
        break;
      }

      // repeated int32 open_badges = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_badges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_open_badges())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_badges())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_badges;
        if (input->ExpectTag(34)) goto parse_apply;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo apply = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_apply;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanComInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .proto_ff.Clan3MemberInfo members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // repeated int32 open_badges = 3;
  for (int i = 0; i < this->open_badges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->open_badges(i), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo apply = 4;
  for (int i = 0; i < this->apply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->apply(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanComInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .proto_ff.Clan3MemberInfo members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // repeated int32 open_badges = 3;
  for (int i = 0; i < this->open_badges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->open_badges(i), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo apply = 4;
  for (int i = 0; i < this->apply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->apply(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanComInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .proto_ff.Clan3MemberInfo members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated int32 open_badges = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_badges_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_badges(i));
    }
    total_size += 1 * this->open_badges_size() + data_size;
  }

  // repeated .proto_ff.RolePlayerMiniInfo apply = 4;
  total_size += 1 * this->apply_size();
  for (int i = 0; i < this->apply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3Data::MergeFrom(const NotifyClan3Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  open_badges_.MergeFrom(from.open_badges_);
  apply_.MergeFrom(from.apply_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::ClanComInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3Data::CopyFrom(const NotifyClan3Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3Data::IsInitialized() const {

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  for (int i = 0; i < apply_size(); i++) {
    if (!this->apply(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyClan3Data::Swap(NotifyClan3Data* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    members_.Swap(&other->members_);
    open_badges_.Swap(&other->open_badges_);
    apply_.Swap(&other->apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3Data_descriptor_;
  metadata.reflection = NotifyClan3Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyClanInfoReq::kClanTypeFieldNumber;
const int ModifyClanInfoReq::kOptTypeFieldNumber;
const int ModifyClanInfoReq::kNameFieldNumber;
const int ModifyClanInfoReq::kBadgeIdFieldNumber;
#endif  // !_MSC_VER

ModifyClanInfoReq::ModifyClanInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyClanInfoReq::InitAsDefaultInstance() {
}

ModifyClanInfoReq::ModifyClanInfoReq(const ModifyClanInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyClanInfoReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  opt_type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  badge_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyClanInfoReq::~ModifyClanInfoReq() {
  SharedDtor();
}

void ModifyClanInfoReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModifyClanInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyClanInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyClanInfoReq_descriptor_;
}

const ModifyClanInfoReq& ModifyClanInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ModifyClanInfoReq* ModifyClanInfoReq::default_instance_ = NULL;

ModifyClanInfoReq* ModifyClanInfoReq::New() const {
  return new ModifyClanInfoReq;
}

void ModifyClanInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    opt_type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    badge_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyClanInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt_type;
        break;
      }

      // optional int32 opt_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_badge_id;
        break;
      }

      // optional int32 badge_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_id_)));
          set_has_badge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyClanInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 opt_type = 2;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt_type(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 badge_id = 4;
  if (has_badge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->badge_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyClanInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 opt_type = 2;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt_type(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 badge_id = 4;
  if (has_badge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->badge_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyClanInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 opt_type = 2;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_type());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 badge_id = 4;
    if (has_badge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyClanInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyClanInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyClanInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyClanInfoReq::MergeFrom(const ModifyClanInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_badge_id()) {
      set_badge_id(from.badge_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyClanInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyClanInfoReq::CopyFrom(const ModifyClanInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyClanInfoReq::IsInitialized() const {

  return true;
}

void ModifyClanInfoReq::Swap(ModifyClanInfoReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(name_, other->name_);
    std::swap(badge_id_, other->badge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyClanInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyClanInfoReq_descriptor_;
  metadata.reflection = ModifyClanInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyClanInfoRsp::kRetFieldNumber;
const int ModifyClanInfoRsp::kClanTypeFieldNumber;
const int ModifyClanInfoRsp::kOptTypeFieldNumber;
const int ModifyClanInfoRsp::kNameFieldNumber;
const int ModifyClanInfoRsp::kBadgeIdFieldNumber;
#endif  // !_MSC_VER

ModifyClanInfoRsp::ModifyClanInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyClanInfoRsp::InitAsDefaultInstance() {
}

ModifyClanInfoRsp::ModifyClanInfoRsp(const ModifyClanInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyClanInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  opt_type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  badge_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyClanInfoRsp::~ModifyClanInfoRsp() {
  SharedDtor();
}

void ModifyClanInfoRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModifyClanInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyClanInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyClanInfoRsp_descriptor_;
}

const ModifyClanInfoRsp& ModifyClanInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ModifyClanInfoRsp* ModifyClanInfoRsp::default_instance_ = NULL;

ModifyClanInfoRsp* ModifyClanInfoRsp::New() const {
  return new ModifyClanInfoRsp;
}

void ModifyClanInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
    opt_type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    badge_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyClanInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt_type;
        break;
      }

      // optional int32 opt_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_badge_id;
        break;
      }

      // optional int32 badge_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_id_)));
          set_has_badge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyClanInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional int32 opt_type = 3;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt_type(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional int32 badge_id = 5;
  if (has_badge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->badge_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyClanInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional int32 opt_type = 3;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt_type(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 badge_id = 5;
  if (has_badge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->badge_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyClanInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 opt_type = 3;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_type());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 badge_id = 5;
    if (has_badge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyClanInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyClanInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyClanInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyClanInfoRsp::MergeFrom(const ModifyClanInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_badge_id()) {
      set_badge_id(from.badge_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyClanInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyClanInfoRsp::CopyFrom(const ModifyClanInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyClanInfoRsp::IsInitialized() const {

  return true;
}

void ModifyClanInfoRsp::Swap(ModifyClanInfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(name_, other->name_);
    std::swap(badge_id_, other->badge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyClanInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyClanInfoRsp_descriptor_;
  metadata.reflection = ModifyClanInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanApplyOptReq::kClanTypeFieldNumber;
const int ClanApplyOptReq::kTypeFieldNumber;
const int ClanApplyOptReq::kTargetCidFieldNumber;
const int ClanApplyOptReq::kFlagFieldNumber;
#endif  // !_MSC_VER

ClanApplyOptReq::ClanApplyOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanApplyOptReq::InitAsDefaultInstance() {
}

ClanApplyOptReq::ClanApplyOptReq(const ClanApplyOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanApplyOptReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  type_ = 0;
  target_cid_ = GOOGLE_ULONGLONG(0);
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanApplyOptReq::~ClanApplyOptReq() {
  SharedDtor();
}

void ClanApplyOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanApplyOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanApplyOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanApplyOptReq_descriptor_;
}

const ClanApplyOptReq& ClanApplyOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanApplyOptReq* ClanApplyOptReq::default_instance_ = NULL;

ClanApplyOptReq* ClanApplyOptReq::New() const {
  return new ClanApplyOptReq;
}

void ClanApplyOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    type_ = 0;
    target_cid_ = GOOGLE_ULONGLONG(0);
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanApplyOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_cid;
        break;
      }

      // optional uint64 target_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_cid_)));
          set_has_target_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanApplyOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 target_cid = 3;
  if (has_target_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_cid(), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanApplyOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 target_cid = 3;
  if (has_target_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_cid(), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanApplyOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 target_cid = 3;
    if (has_target_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_cid());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanApplyOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanApplyOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanApplyOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanApplyOptReq::MergeFrom(const ClanApplyOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_cid()) {
      set_target_cid(from.target_cid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanApplyOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanApplyOptReq::CopyFrom(const ClanApplyOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanApplyOptReq::IsInitialized() const {

  return true;
}

void ClanApplyOptReq::Swap(ClanApplyOptReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    std::swap(target_cid_, other->target_cid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanApplyOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanApplyOptReq_descriptor_;
  metadata.reflection = ClanApplyOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanApplyOptRsp::kRetFieldNumber;
const int ClanApplyOptRsp::kClanTypeFieldNumber;
const int ClanApplyOptRsp::kTypeFieldNumber;
const int ClanApplyOptRsp::kTargetCidFieldNumber;
#endif  // !_MSC_VER

ClanApplyOptRsp::ClanApplyOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanApplyOptRsp::InitAsDefaultInstance() {
}

ClanApplyOptRsp::ClanApplyOptRsp(const ClanApplyOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanApplyOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  type_ = 0;
  target_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanApplyOptRsp::~ClanApplyOptRsp() {
  SharedDtor();
}

void ClanApplyOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanApplyOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanApplyOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanApplyOptRsp_descriptor_;
}

const ClanApplyOptRsp& ClanApplyOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanApplyOptRsp* ClanApplyOptRsp::default_instance_ = NULL;

ClanApplyOptRsp* ClanApplyOptRsp::New() const {
  return new ClanApplyOptRsp;
}

void ClanApplyOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
    type_ = 0;
    target_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanApplyOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_cid;
        break;
      }

      // optional uint64 target_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_cid_)));
          set_has_target_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanApplyOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional uint64 target_cid = 4;
  if (has_target_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanApplyOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional uint64 target_cid = 4;
  if (has_target_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanApplyOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 target_cid = 4;
    if (has_target_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanApplyOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanApplyOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanApplyOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanApplyOptRsp::MergeFrom(const ClanApplyOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_cid()) {
      set_target_cid(from.target_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanApplyOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanApplyOptRsp::CopyFrom(const ClanApplyOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanApplyOptRsp::IsInitialized() const {

  return true;
}

void ClanApplyOptRsp::Swap(ClanApplyOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    std::swap(target_cid_, other->target_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanApplyOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanApplyOptRsp_descriptor_;
  metadata.reflection = ClanApplyOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanRoleOptReq::kClanTypeFieldNumber;
const int ClanRoleOptReq::kTypeFieldNumber;
const int ClanRoleOptReq::kTargetCidFieldNumber;
#endif  // !_MSC_VER

ClanRoleOptReq::ClanRoleOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanRoleOptReq::InitAsDefaultInstance() {
}

ClanRoleOptReq::ClanRoleOptReq(const ClanRoleOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanRoleOptReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  type_ = 0;
  target_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanRoleOptReq::~ClanRoleOptReq() {
  SharedDtor();
}

void ClanRoleOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanRoleOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanRoleOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanRoleOptReq_descriptor_;
}

const ClanRoleOptReq& ClanRoleOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanRoleOptReq* ClanRoleOptReq::default_instance_ = NULL;

ClanRoleOptReq* ClanRoleOptReq::New() const {
  return new ClanRoleOptReq;
}

void ClanRoleOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    type_ = 0;
    target_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanRoleOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_cid;
        break;
      }

      // optional uint64 target_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_cid_)));
          set_has_target_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanRoleOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 target_cid = 3;
  if (has_target_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanRoleOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 target_cid = 3;
  if (has_target_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanRoleOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 target_cid = 3;
    if (has_target_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanRoleOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanRoleOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanRoleOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanRoleOptReq::MergeFrom(const ClanRoleOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_cid()) {
      set_target_cid(from.target_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanRoleOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanRoleOptReq::CopyFrom(const ClanRoleOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanRoleOptReq::IsInitialized() const {

  return true;
}

void ClanRoleOptReq::Swap(ClanRoleOptReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    std::swap(target_cid_, other->target_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanRoleOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanRoleOptReq_descriptor_;
  metadata.reflection = ClanRoleOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanRoleOptRsp::kRetFieldNumber;
const int ClanRoleOptRsp::kClanTypeFieldNumber;
const int ClanRoleOptRsp::kOptFieldNumber;
const int ClanRoleOptRsp::kTargetCidFieldNumber;
#endif  // !_MSC_VER

ClanRoleOptRsp::ClanRoleOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanRoleOptRsp::InitAsDefaultInstance() {
}

ClanRoleOptRsp::ClanRoleOptRsp(const ClanRoleOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanRoleOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  opt_ = 0;
  target_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanRoleOptRsp::~ClanRoleOptRsp() {
  SharedDtor();
}

void ClanRoleOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanRoleOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanRoleOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanRoleOptRsp_descriptor_;
}

const ClanRoleOptRsp& ClanRoleOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanRoleOptRsp* ClanRoleOptRsp::default_instance_ = NULL;

ClanRoleOptRsp* ClanRoleOptRsp::New() const {
  return new ClanRoleOptRsp;
}

void ClanRoleOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
    opt_ = 0;
    target_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanRoleOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional int32 opt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_cid;
        break;
      }

      // optional uint64 target_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_cid_)));
          set_has_target_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanRoleOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt(), output);
  }

  // optional uint64 target_cid = 4;
  if (has_target_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanRoleOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt(), target);
  }

  // optional uint64 target_cid = 4;
  if (has_target_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanRoleOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional uint64 target_cid = 4;
    if (has_target_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanRoleOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanRoleOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanRoleOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanRoleOptRsp::MergeFrom(const ClanRoleOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_target_cid()) {
      set_target_cid(from.target_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanRoleOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanRoleOptRsp::CopyFrom(const ClanRoleOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanRoleOptRsp::IsInitialized() const {

  return true;
}

void ClanRoleOptRsp::Swap(ClanRoleOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(opt_, other->opt_);
    std::swap(target_cid_, other->target_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanRoleOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanRoleOptRsp_descriptor_;
  metadata.reflection = ClanRoleOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanInviteInfoReq::kClanTypeFieldNumber;
const int ClanInviteInfoReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ClanInviteInfoReq::ClanInviteInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanInviteInfoReq::InitAsDefaultInstance() {
}

ClanInviteInfoReq::ClanInviteInfoReq(const ClanInviteInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanInviteInfoReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanInviteInfoReq::~ClanInviteInfoReq() {
  SharedDtor();
}

void ClanInviteInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanInviteInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanInviteInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanInviteInfoReq_descriptor_;
}

const ClanInviteInfoReq& ClanInviteInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanInviteInfoReq* ClanInviteInfoReq::default_instance_ = NULL;

ClanInviteInfoReq* ClanInviteInfoReq::New() const {
  return new ClanInviteInfoReq;
}

void ClanInviteInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanInviteInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanInviteInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanInviteInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanInviteInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanInviteInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanInviteInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanInviteInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanInviteInfoReq::MergeFrom(const ClanInviteInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanInviteInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanInviteInfoReq::CopyFrom(const ClanInviteInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanInviteInfoReq::IsInitialized() const {

  return true;
}

void ClanInviteInfoReq::Swap(ClanInviteInfoReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanInviteInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanInviteInfoReq_descriptor_;
  metadata.reflection = ClanInviteInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClanInviteInfo::kClanTypeFieldNumber;
const int NotifyClanInviteInfo::kTypeFieldNumber;
const int NotifyClanInviteInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyClanInviteInfo::NotifyClanInviteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClanInviteInfo::InitAsDefaultInstance() {
}

NotifyClanInviteInfo::NotifyClanInviteInfo(const NotifyClanInviteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClanInviteInfo::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClanInviteInfo::~NotifyClanInviteInfo() {
  SharedDtor();
}

void NotifyClanInviteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClanInviteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClanInviteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClanInviteInfo_descriptor_;
}

const NotifyClanInviteInfo& NotifyClanInviteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyClanInviteInfo* NotifyClanInviteInfo::default_instance_ = NULL;

NotifyClanInviteInfo* NotifyClanInviteInfo::New() const {
  return new NotifyClanInviteInfo;
}

void NotifyClanInviteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClanInviteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClanInviteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClanInviteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClanInviteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClanInviteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClanInviteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClanInviteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClanInviteInfo::MergeFrom(const NotifyClanInviteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClanInviteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClanInviteInfo::CopyFrom(const NotifyClanInviteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClanInviteInfo::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyClanInviteInfo::Swap(NotifyClanInviteInfo* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClanInviteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClanInviteInfo_descriptor_;
  metadata.reflection = NotifyClanInviteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanInviteRoleReq::kClanTypeFieldNumber;
const int ClanInviteRoleReq::kTypeFieldNumber;
const int ClanInviteRoleReq::kTargetCidsFieldNumber;
#endif  // !_MSC_VER

ClanInviteRoleReq::ClanInviteRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanInviteRoleReq::InitAsDefaultInstance() {
}

ClanInviteRoleReq::ClanInviteRoleReq(const ClanInviteRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanInviteRoleReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanInviteRoleReq::~ClanInviteRoleReq() {
  SharedDtor();
}

void ClanInviteRoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanInviteRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanInviteRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanInviteRoleReq_descriptor_;
}

const ClanInviteRoleReq& ClanInviteRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanInviteRoleReq* ClanInviteRoleReq::default_instance_ = NULL;

ClanInviteRoleReq* ClanInviteRoleReq::New() const {
  return new ClanInviteRoleReq;
}

void ClanInviteRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    type_ = 0;
  }
  target_cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanInviteRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_cids;
        break;
      }

      // repeated uint64 target_cids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_target_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_target_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanInviteRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated uint64 target_cids = 3;
  for (int i = 0; i < this->target_cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->target_cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanInviteRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated uint64 target_cids = 3;
  for (int i = 0; i < this->target_cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->target_cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanInviteRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated uint64 target_cids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->target_cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->target_cids(i));
    }
    total_size += 1 * this->target_cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanInviteRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanInviteRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanInviteRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanInviteRoleReq::MergeFrom(const ClanInviteRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_cids_.MergeFrom(from.target_cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanInviteRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanInviteRoleReq::CopyFrom(const ClanInviteRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanInviteRoleReq::IsInitialized() const {

  return true;
}

void ClanInviteRoleReq::Swap(ClanInviteRoleReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    target_cids_.Swap(&other->target_cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanInviteRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanInviteRoleReq_descriptor_;
  metadata.reflection = ClanInviteRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanInviteRoleRsp::kRetFieldNumber;
const int ClanInviteRoleRsp::kClanTypeFieldNumber;
const int ClanInviteRoleRsp::kTypeFieldNumber;
const int ClanInviteRoleRsp::kTargetCidsFieldNumber;
#endif  // !_MSC_VER

ClanInviteRoleRsp::ClanInviteRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanInviteRoleRsp::InitAsDefaultInstance() {
}

ClanInviteRoleRsp::ClanInviteRoleRsp(const ClanInviteRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanInviteRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanInviteRoleRsp::~ClanInviteRoleRsp() {
  SharedDtor();
}

void ClanInviteRoleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanInviteRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanInviteRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanInviteRoleRsp_descriptor_;
}

const ClanInviteRoleRsp& ClanInviteRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanInviteRoleRsp* ClanInviteRoleRsp::default_instance_ = NULL;

ClanInviteRoleRsp* ClanInviteRoleRsp::New() const {
  return new ClanInviteRoleRsp;
}

void ClanInviteRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
    type_ = 0;
  }
  target_cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanInviteRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_cids;
        break;
      }

      // repeated uint64 target_cids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_target_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_target_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanInviteRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated uint64 target_cids = 4;
  for (int i = 0; i < this->target_cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->target_cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanInviteRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated uint64 target_cids = 4;
  for (int i = 0; i < this->target_cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->target_cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanInviteRoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated uint64 target_cids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->target_cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->target_cids(i));
    }
    total_size += 1 * this->target_cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanInviteRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanInviteRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanInviteRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanInviteRoleRsp::MergeFrom(const ClanInviteRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_cids_.MergeFrom(from.target_cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanInviteRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanInviteRoleRsp::CopyFrom(const ClanInviteRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanInviteRoleRsp::IsInitialized() const {

  return true;
}

void ClanInviteRoleRsp::Swap(ClanInviteRoleRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(type_, other->type_);
    target_cids_.Swap(&other->target_cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanInviteRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanInviteRoleRsp_descriptor_;
  metadata.reflection = ClanInviteRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAddClanInvite::kSendCidFieldNumber;
const int NotifyAddClanInvite::kSendNameFieldNumber;
const int NotifyAddClanInvite::kClanTypeFieldNumber;
const int NotifyAddClanInvite::kClanIdFieldNumber;
const int NotifyAddClanInvite::kClanNameFieldNumber;
const int NotifyAddClanInvite::kClanScoreFieldNumber;
const int NotifyAddClanInvite::kFightFieldNumber;
#endif  // !_MSC_VER

NotifyAddClanInvite::NotifyAddClanInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAddClanInvite::InitAsDefaultInstance() {
}

NotifyAddClanInvite::NotifyAddClanInvite(const NotifyAddClanInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAddClanInvite::SharedCtor() {
  _cached_size_ = 0;
  send_cid_ = GOOGLE_ULONGLONG(0);
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clan_type_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clan_score_ = 0;
  fight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAddClanInvite::~NotifyAddClanInvite() {
  SharedDtor();
}

void NotifyAddClanInvite::SharedDtor() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (this != default_instance_) {
  }
}

void NotifyAddClanInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAddClanInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAddClanInvite_descriptor_;
}

const NotifyAddClanInvite& NotifyAddClanInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyAddClanInvite* NotifyAddClanInvite::default_instance_ = NULL;

NotifyAddClanInvite* NotifyAddClanInvite::New() const {
  return new NotifyAddClanInvite;
}

void NotifyAddClanInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    send_cid_ = GOOGLE_ULONGLONG(0);
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    clan_type_ = 0;
    clan_id_ = GOOGLE_ULONGLONG(0);
    if (has_clan_name()) {
      if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
        clan_name_->clear();
      }
    }
    clan_score_ = 0;
    fight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAddClanInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 send_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_cid_)));
          set_has_send_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_send_name;
        break;
      }

      // optional bytes send_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clan_id;
        break;
      }

      // optional uint64 clan_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clan_name;
        break;
      }

      // optional bytes clan_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clan_score;
        break;
      }

      // optional int32 clan_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_score_)));
          set_has_clan_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight;
        break;
      }

      // optional int32 fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAddClanInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 send_cid = 1;
  if (has_send_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->send_cid(), output);
  }

  // optional bytes send_name = 2;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->send_name(), output);
  }

  // optional int32 clan_type = 3;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clan_type(), output);
  }

  // optional uint64 clan_id = 4;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->clan_id(), output);
  }

  // optional bytes clan_name = 5;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->clan_name(), output);
  }

  // optional int32 clan_score = 6;
  if (has_clan_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clan_score(), output);
  }

  // optional int32 fight = 7;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAddClanInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 send_cid = 1;
  if (has_send_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->send_cid(), target);
  }

  // optional bytes send_name = 2;
  if (has_send_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->send_name(), target);
  }

  // optional int32 clan_type = 3;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clan_type(), target);
  }

  // optional uint64 clan_id = 4;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->clan_id(), target);
  }

  // optional bytes clan_name = 5;
  if (has_clan_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->clan_name(), target);
  }

  // optional int32 clan_score = 6;
  if (has_clan_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clan_score(), target);
  }

  // optional int32 fight = 7;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAddClanInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 send_cid = 1;
    if (has_send_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_cid());
    }

    // optional bytes send_name = 2;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_name());
    }

    // optional int32 clan_type = 3;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional uint64 clan_id = 4;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional bytes clan_name = 5;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clan_name());
    }

    // optional int32 clan_score = 6;
    if (has_clan_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_score());
    }

    // optional int32 fight = 7;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAddClanInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAddClanInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAddClanInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAddClanInvite::MergeFrom(const NotifyAddClanInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_send_cid()) {
      set_send_cid(from.send_cid());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_clan_name()) {
      set_clan_name(from.clan_name());
    }
    if (from.has_clan_score()) {
      set_clan_score(from.clan_score());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAddClanInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAddClanInvite::CopyFrom(const NotifyAddClanInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAddClanInvite::IsInitialized() const {

  return true;
}

void NotifyAddClanInvite::Swap(NotifyAddClanInvite* other) {
  if (other != this) {
    std::swap(send_cid_, other->send_cid_);
    std::swap(send_name_, other->send_name_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(clan_id_, other->clan_id_);
    std::swap(clan_name_, other->clan_name_);
    std::swap(clan_score_, other->clan_score_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAddClanInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAddClanInvite_descriptor_;
  metadata.reflection = NotifyAddClanInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteTargetOptReq::kClanTypeFieldNumber;
const int InviteTargetOptReq::kClanIdFieldNumber;
const int InviteTargetOptReq::kOptTypeFieldNumber;
const int InviteTargetOptReq::kFlagFieldNumber;
#endif  // !_MSC_VER

InviteTargetOptReq::InviteTargetOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteTargetOptReq::InitAsDefaultInstance() {
}

InviteTargetOptReq::InviteTargetOptReq(const InviteTargetOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteTargetOptReq::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  opt_type_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteTargetOptReq::~InviteTargetOptReq() {
  SharedDtor();
}

void InviteTargetOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteTargetOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteTargetOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteTargetOptReq_descriptor_;
}

const InviteTargetOptReq& InviteTargetOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

InviteTargetOptReq* InviteTargetOptReq::default_instance_ = NULL;

InviteTargetOptReq* InviteTargetOptReq::New() const {
  return new InviteTargetOptReq;
}

void InviteTargetOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    clan_id_ = GOOGLE_ULONGLONG(0);
    opt_type_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteTargetOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_id;
        break;
      }

      // optional uint64 clan_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt_type;
        break;
      }

      // optional int32 opt_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteTargetOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional uint64 clan_id = 2;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clan_id(), output);
  }

  // optional int32 opt_type = 3;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt_type(), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteTargetOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional uint64 clan_id = 2;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clan_id(), target);
  }

  // optional int32 opt_type = 3;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt_type(), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteTargetOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional uint64 clan_id = 2;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional int32 opt_type = 3;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_type());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteTargetOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteTargetOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteTargetOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteTargetOptReq::MergeFrom(const InviteTargetOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteTargetOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteTargetOptReq::CopyFrom(const InviteTargetOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteTargetOptReq::IsInitialized() const {

  return true;
}

void InviteTargetOptReq::Swap(InviteTargetOptReq* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(clan_id_, other->clan_id_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteTargetOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteTargetOptReq_descriptor_;
  metadata.reflection = InviteTargetOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteTargetOptRsp::kRetFieldNumber;
const int InviteTargetOptRsp::kClanTypeFieldNumber;
const int InviteTargetOptRsp::kClanIdFieldNumber;
const int InviteTargetOptRsp::kOptTypeFieldNumber;
const int InviteTargetOptRsp::kClanScoreFieldNumber;
#endif  // !_MSC_VER

InviteTargetOptRsp::InviteTargetOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteTargetOptRsp::InitAsDefaultInstance() {
}

InviteTargetOptRsp::InviteTargetOptRsp(const InviteTargetOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteTargetOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clan_type_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  opt_type_ = 0;
  clan_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteTargetOptRsp::~InviteTargetOptRsp() {
  SharedDtor();
}

void InviteTargetOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteTargetOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteTargetOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteTargetOptRsp_descriptor_;
}

const InviteTargetOptRsp& InviteTargetOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

InviteTargetOptRsp* InviteTargetOptRsp::default_instance_ = NULL;

InviteTargetOptRsp* InviteTargetOptRsp::New() const {
  return new InviteTargetOptRsp;
}

void InviteTargetOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    clan_type_ = 0;
    clan_id_ = GOOGLE_ULONGLONG(0);
    opt_type_ = 0;
    clan_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteTargetOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_id;
        break;
      }

      // optional uint64 clan_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt_type;
        break;
      }

      // optional int32 opt_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clan_score;
        break;
      }

      // optional int32 clan_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_score_)));
          set_has_clan_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteTargetOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional uint64 clan_id = 3;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clan_id(), output);
  }

  // optional int32 opt_type = 4;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opt_type(), output);
  }

  // optional int32 clan_score = 5;
  if (has_clan_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clan_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteTargetOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional uint64 clan_id = 3;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clan_id(), target);
  }

  // optional int32 opt_type = 4;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opt_type(), target);
  }

  // optional int32 clan_score = 5;
  if (has_clan_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clan_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteTargetOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional uint64 clan_id = 3;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional int32 opt_type = 4;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_type());
    }

    // optional int32 clan_score = 5;
    if (has_clan_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteTargetOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteTargetOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteTargetOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteTargetOptRsp::MergeFrom(const InviteTargetOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_clan_score()) {
      set_clan_score(from.clan_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteTargetOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteTargetOptRsp::CopyFrom(const InviteTargetOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteTargetOptRsp::IsInitialized() const {

  return true;
}

void InviteTargetOptRsp::Swap(InviteTargetOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(clan_id_, other->clan_id_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(clan_score_, other->clan_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteTargetOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteTargetOptRsp_descriptor_;
  metadata.reflection = InviteTargetOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleClanRank::kClanTypeFieldNumber;
const int NotifyRoleClanRank::kRankFieldNumber;
#endif  // !_MSC_VER

NotifyRoleClanRank::NotifyRoleClanRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleClanRank::InitAsDefaultInstance() {
}

NotifyRoleClanRank::NotifyRoleClanRank(const NotifyRoleClanRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleClanRank::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleClanRank::~NotifyRoleClanRank() {
  SharedDtor();
}

void NotifyRoleClanRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRoleClanRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleClanRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleClanRank_descriptor_;
}

const NotifyRoleClanRank& NotifyRoleClanRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyRoleClanRank* NotifyRoleClanRank::default_instance_ = NULL;

NotifyRoleClanRank* NotifyRoleClanRank::New() const {
  return new NotifyRoleClanRank;
}

void NotifyRoleClanRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleClanRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleClanRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleClanRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleClanRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleClanRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleClanRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleClanRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleClanRank::MergeFrom(const NotifyRoleClanRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleClanRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleClanRank::CopyFrom(const NotifyRoleClanRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleClanRank::IsInitialized() const {

  return true;
}

void NotifyRoleClanRank::Swap(NotifyRoleClanRank* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleClanRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleClanRank_descriptor_;
  metadata.reflection = NotifyRoleClanRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleJoinClan::kClanIdFieldNumber;
#endif  // !_MSC_VER

NotifyRoleJoinClan::NotifyRoleJoinClan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleJoinClan::InitAsDefaultInstance() {
}

NotifyRoleJoinClan::NotifyRoleJoinClan(const NotifyRoleJoinClan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleJoinClan::SharedCtor() {
  _cached_size_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleJoinClan::~NotifyRoleJoinClan() {
  SharedDtor();
}

void NotifyRoleJoinClan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRoleJoinClan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleJoinClan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleJoinClan_descriptor_;
}

const NotifyRoleJoinClan& NotifyRoleJoinClan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyRoleJoinClan* NotifyRoleJoinClan::default_instance_ = NULL;

NotifyRoleJoinClan* NotifyRoleJoinClan::New() const {
  return new NotifyRoleJoinClan;
}

void NotifyRoleJoinClan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleJoinClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clan_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleJoinClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clan_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleJoinClan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clan_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleJoinClan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clan_id = 1;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleJoinClan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleJoinClan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleJoinClan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleJoinClan::MergeFrom(const NotifyRoleJoinClan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleJoinClan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleJoinClan::CopyFrom(const NotifyRoleJoinClan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleJoinClan::IsInitialized() const {

  return true;
}

void NotifyRoleJoinClan::Swap(NotifyRoleJoinClan* other) {
  if (other != this) {
    std::swap(clan_id_, other->clan_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleJoinClan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleJoinClan_descriptor_;
  metadata.reflection = NotifyRoleJoinClan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanComInfoDB::kClanIdFieldNumber;
const int ClanComInfoDB::kZidFieldNumber;
const int ClanComInfoDB::kNameFieldNumber;
const int ClanComInfoDB::kScoreFieldNumber;
const int ClanComInfoDB::kBadgeIdFieldNumber;
const int ClanComInfoDB::kBadgeNameFieldNumber;
const int ClanComInfoDB::kNoticeFieldNumber;
const int ClanComInfoDB::kLogsFieldNumber;
const int ClanComInfoDB::kLeaderCidFieldNumber;
const int ClanComInfoDB::kMembersFieldNumber;
const int ClanComInfoDB::kRefuseListFieldNumber;
const int ClanComInfoDB::kApplyListFieldNumber;
const int ClanComInfoDB::kUpdateScoreTimeFieldNumber;
const int ClanComInfoDB::kClanJoinNumFieldNumber;
const int ClanComInfoDB::kClanWinNumFieldNumber;
const int ClanComInfoDB::kOpenBadgeFieldNumber;
const int ClanComInfoDB::kRefreshTimeFieldNumber;
const int ClanComInfoDB::kFightFieldNumber;
#endif  // !_MSC_VER

ClanComInfoDB::ClanComInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanComInfoDB::InitAsDefaultInstance() {
}

ClanComInfoDB::ClanComInfoDB(const ClanComInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanComInfoDB::SharedCtor() {
  _cached_size_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  badge_id_ = 0;
  badge_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_cid_ = GOOGLE_ULONGLONG(0);
  update_score_time_ = GOOGLE_ULONGLONG(0);
  clan_join_num_ = 0;
  clan_win_num_ = 0;
  refresh_time_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanComInfoDB::~ClanComInfoDB() {
  SharedDtor();
}

void ClanComInfoDB::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (badge_name_ != &::google::protobuf::internal::kEmptyString) {
    delete badge_name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void ClanComInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanComInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanComInfoDB_descriptor_;
}

const ClanComInfoDB& ClanComInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanComInfoDB* ClanComInfoDB::default_instance_ = NULL;

ClanComInfoDB* ClanComInfoDB::New() const {
  return new ClanComInfoDB;
}

void ClanComInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_id_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
    badge_id_ = 0;
    if (has_badge_name()) {
      if (badge_name_ != &::google::protobuf::internal::kEmptyString) {
        badge_name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leader_cid_ = GOOGLE_ULONGLONG(0);
    update_score_time_ = GOOGLE_ULONGLONG(0);
    clan_join_num_ = 0;
    clan_win_num_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    refresh_time_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  logs_.Clear();
  members_.Clear();
  refuse_list_.Clear();
  apply_list_.Clear();
  open_badge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanComInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clan_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_badge_id;
        break;
      }

      // optional int32 badge_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_id_)));
          set_has_badge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_badge_name;
        break;
      }

      // optional bytes badge_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_badge_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_badge_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notice;
        break;
      }

      // optional bytes notice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_logs;
        break;
      }

      // repeated .proto_ff.ClanLog logs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_logs;
        if (input->ExpectTag(72)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_members;
        break;
      }

      // repeated uint64 members = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_members;
        if (input->ExpectTag(88)) goto parse_refuse_list;
        break;
      }

      // repeated uint64 refuse_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 88, input, this->mutable_refuse_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_refuse_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refuse_list;
        if (input->ExpectTag(96)) goto parse_apply_list;
        break;
      }

      // repeated uint64 apply_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 96, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_apply_list;
        if (input->ExpectTag(104)) goto parse_update_score_time;
        break;
      }

      // optional uint64 update_score_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_score_time_)));
          set_has_update_score_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_clan_join_num;
        break;
      }

      // optional int32 clan_join_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_join_num_)));
          set_has_clan_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_clan_win_num;
        break;
      }

      // optional int32 clan_win_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_win_num_)));
          set_has_clan_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_open_badge;
        break;
      }

      // repeated int32 open_badge = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_open_badge())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_badge())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_open_badge;
        if (input->ExpectTag(136)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanComInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clan_id(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 badge_id = 5;
  if (has_badge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->badge_id(), output);
  }

  // optional bytes badge_name = 6;
  if (has_badge_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->badge_name(), output);
  }

  // optional bytes notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->notice(), output);
  }

  // repeated .proto_ff.ClanLog logs = 8;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->logs(i), output);
  }

  // optional uint64 leader_cid = 9;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->leader_cid(), output);
  }

  // repeated uint64 members = 10;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->members(i), output);
  }

  // repeated uint64 refuse_list = 11;
  for (int i = 0; i < this->refuse_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      11, this->refuse_list(i), output);
  }

  // repeated uint64 apply_list = 12;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      12, this->apply_list(i), output);
  }

  // optional uint64 update_score_time = 13;
  if (has_update_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->update_score_time(), output);
  }

  // optional int32 clan_join_num = 14;
  if (has_clan_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->clan_join_num(), output);
  }

  // optional int32 clan_win_num = 15;
  if (has_clan_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->clan_win_num(), output);
  }

  // repeated int32 open_badge = 16;
  for (int i = 0; i < this->open_badge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->open_badge(i), output);
  }

  // optional uint64 refresh_time = 17;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->refresh_time(), output);
  }

  // optional uint64 fight = 18;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanComInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clan_id(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 badge_id = 5;
  if (has_badge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->badge_id(), target);
  }

  // optional bytes badge_name = 6;
  if (has_badge_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->badge_name(), target);
  }

  // optional bytes notice = 7;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->notice(), target);
  }

  // repeated .proto_ff.ClanLog logs = 8;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->logs(i), target);
  }

  // optional uint64 leader_cid = 9;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->leader_cid(), target);
  }

  // repeated uint64 members = 10;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->members(i), target);
  }

  // repeated uint64 refuse_list = 11;
  for (int i = 0; i < this->refuse_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(11, this->refuse_list(i), target);
  }

  // repeated uint64 apply_list = 12;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(12, this->apply_list(i), target);
  }

  // optional uint64 update_score_time = 13;
  if (has_update_score_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->update_score_time(), target);
  }

  // optional int32 clan_join_num = 14;
  if (has_clan_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->clan_join_num(), target);
  }

  // optional int32 clan_win_num = 15;
  if (has_clan_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->clan_win_num(), target);
  }

  // repeated int32 open_badge = 16;
  for (int i = 0; i < this->open_badge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->open_badge(i), target);
  }

  // optional uint64 refresh_time = 17;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->refresh_time(), target);
  }

  // optional uint64 fight = 18;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanComInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clan_id = 1;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 badge_id = 5;
    if (has_badge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_id());
    }

    // optional bytes badge_name = 6;
    if (has_badge_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->badge_name());
    }

    // optional bytes notice = 7;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 leader_cid = 9;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional uint64 update_score_time = 13;
    if (has_update_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_score_time());
    }

    // optional int32 clan_join_num = 14;
    if (has_clan_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_join_num());
    }

    // optional int32 clan_win_num = 15;
    if (has_clan_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_win_num());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 refresh_time = 17;
    if (has_refresh_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional uint64 fight = 18;
    if (has_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  // repeated .proto_ff.ClanLog logs = 8;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  // repeated uint64 members = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  // repeated uint64 refuse_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->refuse_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->refuse_list(i));
    }
    total_size += 1 * this->refuse_list_size() + data_size;
  }

  // repeated uint64 apply_list = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  // repeated int32 open_badge = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_badge_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_badge(i));
    }
    total_size += 2 * this->open_badge_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanComInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanComInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanComInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanComInfoDB::MergeFrom(const ClanComInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  members_.MergeFrom(from.members_);
  refuse_list_.MergeFrom(from.refuse_list_);
  apply_list_.MergeFrom(from.apply_list_);
  open_badge_.MergeFrom(from.open_badge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_badge_id()) {
      set_badge_id(from.badge_id());
    }
    if (from.has_badge_name()) {
      set_badge_name(from.badge_name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_update_score_time()) {
      set_update_score_time(from.update_score_time());
    }
    if (from.has_clan_join_num()) {
      set_clan_join_num(from.clan_join_num());
    }
    if (from.has_clan_win_num()) {
      set_clan_win_num(from.clan_win_num());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanComInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanComInfoDB::CopyFrom(const ClanComInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanComInfoDB::IsInitialized() const {

  return true;
}

void ClanComInfoDB::Swap(ClanComInfoDB* other) {
  if (other != this) {
    std::swap(clan_id_, other->clan_id_);
    std::swap(zid_, other->zid_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(badge_id_, other->badge_id_);
    std::swap(badge_name_, other->badge_name_);
    std::swap(notice_, other->notice_);
    logs_.Swap(&other->logs_);
    std::swap(leader_cid_, other->leader_cid_);
    members_.Swap(&other->members_);
    refuse_list_.Swap(&other->refuse_list_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(update_score_time_, other->update_score_time_);
    std::swap(clan_join_num_, other->clan_join_num_);
    std::swap(clan_win_num_, other->clan_win_num_);
    open_badge_.Swap(&other->open_badge_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanComInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanComInfoDB_descriptor_;
  metadata.reflection = ClanComInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3InfoDB::kComFieldNumber;
#endif  // !_MSC_VER

Clan3InfoDB::Clan3InfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3InfoDB::InitAsDefaultInstance() {
  com_ = const_cast< ::proto_ff::ClanComInfoDB*>(&::proto_ff::ClanComInfoDB::default_instance());
}

Clan3InfoDB::Clan3InfoDB(const Clan3InfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3InfoDB::SharedCtor() {
  _cached_size_ = 0;
  com_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3InfoDB::~Clan3InfoDB() {
  SharedDtor();
}

void Clan3InfoDB::SharedDtor() {
  if (this != default_instance_) {
    delete com_;
  }
}

void Clan3InfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3InfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3InfoDB_descriptor_;
}

const Clan3InfoDB& Clan3InfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

Clan3InfoDB* Clan3InfoDB::default_instance_ = NULL;

Clan3InfoDB* Clan3InfoDB::New() const {
  return new Clan3InfoDB;
}

void Clan3InfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_com()) {
      if (com_ != NULL) com_->::proto_ff::ClanComInfoDB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3InfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanComInfoDB com = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_com()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3InfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanComInfoDB com = 1;
  if (has_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->com(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3InfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanComInfoDB com = 1;
  if (has_com()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->com(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3InfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanComInfoDB com = 1;
    if (has_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->com());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3InfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3InfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3InfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3InfoDB::MergeFrom(const Clan3InfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_com()) {
      mutable_com()->::proto_ff::ClanComInfoDB::MergeFrom(from.com());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3InfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3InfoDB::CopyFrom(const Clan3InfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3InfoDB::IsInitialized() const {

  return true;
}

void Clan3InfoDB::Swap(Clan3InfoDB* other) {
  if (other != this) {
    std::swap(com_, other->com_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3InfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3InfoDB_descriptor_;
  metadata.reflection = Clan3InfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan5InfoDB::kComFieldNumber;
#endif  // !_MSC_VER

Clan5InfoDB::Clan5InfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan5InfoDB::InitAsDefaultInstance() {
  com_ = const_cast< ::proto_ff::ClanComInfoDB*>(&::proto_ff::ClanComInfoDB::default_instance());
}

Clan5InfoDB::Clan5InfoDB(const Clan5InfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan5InfoDB::SharedCtor() {
  _cached_size_ = 0;
  com_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan5InfoDB::~Clan5InfoDB() {
  SharedDtor();
}

void Clan5InfoDB::SharedDtor() {
  if (this != default_instance_) {
    delete com_;
  }
}

void Clan5InfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan5InfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan5InfoDB_descriptor_;
}

const Clan5InfoDB& Clan5InfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

Clan5InfoDB* Clan5InfoDB::default_instance_ = NULL;

Clan5InfoDB* Clan5InfoDB::New() const {
  return new Clan5InfoDB;
}

void Clan5InfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_com()) {
      if (com_ != NULL) com_->::proto_ff::ClanComInfoDB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan5InfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanComInfoDB com = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_com()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan5InfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanComInfoDB com = 1;
  if (has_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->com(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan5InfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanComInfoDB com = 1;
  if (has_com()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->com(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan5InfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanComInfoDB com = 1;
    if (has_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->com());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan5InfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan5InfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan5InfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan5InfoDB::MergeFrom(const Clan5InfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_com()) {
      mutable_com()->::proto_ff::ClanComInfoDB::MergeFrom(from.com());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan5InfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan5InfoDB::CopyFrom(const Clan5InfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan5InfoDB::IsInitialized() const {

  return true;
}

void Clan5InfoDB::Swap(Clan5InfoDB* other) {
  if (other != this) {
    std::swap(com_, other->com_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan5InfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan5InfoDB_descriptor_;
  metadata.reflection = Clan5InfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanRoleComInfoDB::kCidFieldNumber;
const int ClanRoleComInfoDB::kBanTimeFieldNumber;
const int ClanRoleComInfoDB::kRefuseInviteListFieldNumber;
const int ClanRoleComInfoDB::kUpdateTimeFieldNumber;
const int ClanRoleComInfoDB::kLastJoinTimeFieldNumber;
const int ClanRoleComInfoDB::kInviteListFieldNumber;
#endif  // !_MSC_VER

ClanRoleComInfoDB::ClanRoleComInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanRoleComInfoDB::InitAsDefaultInstance() {
}

ClanRoleComInfoDB::ClanRoleComInfoDB(const ClanRoleComInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanRoleComInfoDB::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ban_time_ = GOOGLE_ULONGLONG(0);
  update_time_ = GOOGLE_ULONGLONG(0);
  last_join_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanRoleComInfoDB::~ClanRoleComInfoDB() {
  SharedDtor();
}

void ClanRoleComInfoDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanRoleComInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanRoleComInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanRoleComInfoDB_descriptor_;
}

const ClanRoleComInfoDB& ClanRoleComInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanRoleComInfoDB* ClanRoleComInfoDB::default_instance_ = NULL;

ClanRoleComInfoDB* ClanRoleComInfoDB::New() const {
  return new ClanRoleComInfoDB;
}

void ClanRoleComInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    ban_time_ = GOOGLE_ULONGLONG(0);
    update_time_ = GOOGLE_ULONGLONG(0);
    last_join_time_ = GOOGLE_ULONGLONG(0);
  }
  refuse_invite_list_.Clear();
  invite_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanRoleComInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ban_time;
        break;
      }

      // optional uint64 ban_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ban_time_)));
          set_has_ban_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refuse_invite_list;
        break;
      }

      // repeated uint64 refuse_invite_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuse_invite_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_refuse_invite_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_refuse_invite_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refuse_invite_list;
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // optional uint64 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_join_time;
        break;
      }

      // optional uint64 last_join_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_join_time_)));
          set_has_last_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_invite_list;
        break;
      }

      // repeated uint64 invite_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_invite_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_invite_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_invite_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanRoleComInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 ban_time = 2;
  if (has_ban_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ban_time(), output);
  }

  // repeated uint64 refuse_invite_list = 3;
  for (int i = 0; i < this->refuse_invite_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->refuse_invite_list(i), output);
  }

  // optional uint64 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->update_time(), output);
  }

  // optional uint64 last_join_time = 5;
  if (has_last_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_join_time(), output);
  }

  // repeated uint64 invite_list = 6;
  for (int i = 0; i < this->invite_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->invite_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanRoleComInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 ban_time = 2;
  if (has_ban_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ban_time(), target);
  }

  // repeated uint64 refuse_invite_list = 3;
  for (int i = 0; i < this->refuse_invite_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->refuse_invite_list(i), target);
  }

  // optional uint64 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->update_time(), target);
  }

  // optional uint64 last_join_time = 5;
  if (has_last_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_join_time(), target);
  }

  // repeated uint64 invite_list = 6;
  for (int i = 0; i < this->invite_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->invite_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanRoleComInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 ban_time = 2;
    if (has_ban_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ban_time());
    }

    // optional uint64 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional uint64 last_join_time = 5;
    if (has_last_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_join_time());
    }

  }
  // repeated uint64 refuse_invite_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->refuse_invite_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->refuse_invite_list(i));
    }
    total_size += 1 * this->refuse_invite_list_size() + data_size;
  }

  // repeated uint64 invite_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->invite_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->invite_list(i));
    }
    total_size += 1 * this->invite_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanRoleComInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanRoleComInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanRoleComInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanRoleComInfoDB::MergeFrom(const ClanRoleComInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  refuse_invite_list_.MergeFrom(from.refuse_invite_list_);
  invite_list_.MergeFrom(from.invite_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_ban_time()) {
      set_ban_time(from.ban_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_last_join_time()) {
      set_last_join_time(from.last_join_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanRoleComInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanRoleComInfoDB::CopyFrom(const ClanRoleComInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanRoleComInfoDB::IsInitialized() const {

  return true;
}

void ClanRoleComInfoDB::Swap(ClanRoleComInfoDB* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(ban_time_, other->ban_time_);
    refuse_invite_list_.Swap(&other->refuse_invite_list_);
    std::swap(update_time_, other->update_time_);
    std::swap(last_join_time_, other->last_join_time_);
    invite_list_.Swap(&other->invite_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanRoleComInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanRoleComInfoDB_descriptor_;
  metadata.reflection = ClanRoleComInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3RoleInfoDB::kComFieldNumber;
const int Clan3RoleInfoDB::kRoleJoinNumFieldNumber;
const int Clan3RoleInfoDB::kRoleWinNumFieldNumber;
const int Clan3RoleInfoDB::kRoleCwNumFieldNumber;
const int Clan3RoleInfoDB::kRoleDeadNumFieldNumber;
const int Clan3RoleInfoDB::kRoleClNumFieldNumber;
const int Clan3RoleInfoDB::kDayJoinNumFieldNumber;
const int Clan3RoleInfoDB::kDayRecvIdFieldNumber;
const int Clan3RoleInfoDB::kMvpNumFieldNumber;
#endif  // !_MSC_VER

Clan3RoleInfoDB::Clan3RoleInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3RoleInfoDB::InitAsDefaultInstance() {
  com_ = const_cast< ::proto_ff::ClanRoleComInfoDB*>(&::proto_ff::ClanRoleComInfoDB::default_instance());
}

Clan3RoleInfoDB::Clan3RoleInfoDB(const Clan3RoleInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3RoleInfoDB::SharedCtor() {
  _cached_size_ = 0;
  com_ = NULL;
  role_join_num_ = 0;
  role_win_num_ = 0;
  role_cw_num_ = 0;
  role_dead_num_ = 0;
  role_cl_num_ = 0;
  day_join_num_ = 0;
  mvp_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3RoleInfoDB::~Clan3RoleInfoDB() {
  SharedDtor();
}

void Clan3RoleInfoDB::SharedDtor() {
  if (this != default_instance_) {
    delete com_;
  }
}

void Clan3RoleInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3RoleInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3RoleInfoDB_descriptor_;
}

const Clan3RoleInfoDB& Clan3RoleInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

Clan3RoleInfoDB* Clan3RoleInfoDB::default_instance_ = NULL;

Clan3RoleInfoDB* Clan3RoleInfoDB::New() const {
  return new Clan3RoleInfoDB;
}

void Clan3RoleInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_com()) {
      if (com_ != NULL) com_->::proto_ff::ClanRoleComInfoDB::Clear();
    }
    role_join_num_ = 0;
    role_win_num_ = 0;
    role_cw_num_ = 0;
    role_dead_num_ = 0;
    role_cl_num_ = 0;
    day_join_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mvp_num_ = 0;
  }
  day_recv_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3RoleInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanRoleComInfoDB com = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_com()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_join_num;
        break;
      }

      // optional int32 role_join_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_join_num_)));
          set_has_role_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_win_num;
        break;
      }

      // optional int32 role_win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_win_num_)));
          set_has_role_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_cw_num;
        break;
      }

      // optional int32 role_cw_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_cw_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_cw_num_)));
          set_has_role_cw_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_dead_num;
        break;
      }

      // optional int32 role_dead_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_dead_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_dead_num_)));
          set_has_role_dead_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_cl_num;
        break;
      }

      // optional int32 role_cl_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_cl_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_cl_num_)));
          set_has_role_cl_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_day_join_num;
        break;
      }

      // optional int32 day_join_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_join_num_)));
          set_has_day_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_day_recv_id;
        break;
      }

      // repeated int32 day_recv_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_recv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_day_recv_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_day_recv_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_day_recv_id;
        if (input->ExpectTag(72)) goto parse_mvp_num;
        break;
      }

      // optional int32 mvp_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvp_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mvp_num_)));
          set_has_mvp_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3RoleInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanRoleComInfoDB com = 1;
  if (has_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->com(), output);
  }

  // optional int32 role_join_num = 2;
  if (has_role_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_join_num(), output);
  }

  // optional int32 role_win_num = 3;
  if (has_role_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_win_num(), output);
  }

  // optional int32 role_cw_num = 4;
  if (has_role_cw_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_cw_num(), output);
  }

  // optional int32 role_dead_num = 5;
  if (has_role_dead_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_dead_num(), output);
  }

  // optional int32 role_cl_num = 6;
  if (has_role_cl_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_cl_num(), output);
  }

  // optional int32 day_join_num = 7;
  if (has_day_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->day_join_num(), output);
  }

  // repeated int32 day_recv_id = 8;
  for (int i = 0; i < this->day_recv_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->day_recv_id(i), output);
  }

  // optional int32 mvp_num = 9;
  if (has_mvp_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mvp_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3RoleInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanRoleComInfoDB com = 1;
  if (has_com()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->com(), target);
  }

  // optional int32 role_join_num = 2;
  if (has_role_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_join_num(), target);
  }

  // optional int32 role_win_num = 3;
  if (has_role_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_win_num(), target);
  }

  // optional int32 role_cw_num = 4;
  if (has_role_cw_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_cw_num(), target);
  }

  // optional int32 role_dead_num = 5;
  if (has_role_dead_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_dead_num(), target);
  }

  // optional int32 role_cl_num = 6;
  if (has_role_cl_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_cl_num(), target);
  }

  // optional int32 day_join_num = 7;
  if (has_day_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->day_join_num(), target);
  }

  // repeated int32 day_recv_id = 8;
  for (int i = 0; i < this->day_recv_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->day_recv_id(i), target);
  }

  // optional int32 mvp_num = 9;
  if (has_mvp_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mvp_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3RoleInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanRoleComInfoDB com = 1;
    if (has_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->com());
    }

    // optional int32 role_join_num = 2;
    if (has_role_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_join_num());
    }

    // optional int32 role_win_num = 3;
    if (has_role_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_win_num());
    }

    // optional int32 role_cw_num = 4;
    if (has_role_cw_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_cw_num());
    }

    // optional int32 role_dead_num = 5;
    if (has_role_dead_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_dead_num());
    }

    // optional int32 role_cl_num = 6;
    if (has_role_cl_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_cl_num());
    }

    // optional int32 day_join_num = 7;
    if (has_day_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_join_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mvp_num = 9;
    if (has_mvp_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mvp_num());
    }

  }
  // repeated int32 day_recv_id = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->day_recv_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->day_recv_id(i));
    }
    total_size += 1 * this->day_recv_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3RoleInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3RoleInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3RoleInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3RoleInfoDB::MergeFrom(const Clan3RoleInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_recv_id_.MergeFrom(from.day_recv_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_com()) {
      mutable_com()->::proto_ff::ClanRoleComInfoDB::MergeFrom(from.com());
    }
    if (from.has_role_join_num()) {
      set_role_join_num(from.role_join_num());
    }
    if (from.has_role_win_num()) {
      set_role_win_num(from.role_win_num());
    }
    if (from.has_role_cw_num()) {
      set_role_cw_num(from.role_cw_num());
    }
    if (from.has_role_dead_num()) {
      set_role_dead_num(from.role_dead_num());
    }
    if (from.has_role_cl_num()) {
      set_role_cl_num(from.role_cl_num());
    }
    if (from.has_day_join_num()) {
      set_day_join_num(from.day_join_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mvp_num()) {
      set_mvp_num(from.mvp_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3RoleInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3RoleInfoDB::CopyFrom(const Clan3RoleInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3RoleInfoDB::IsInitialized() const {

  return true;
}

void Clan3RoleInfoDB::Swap(Clan3RoleInfoDB* other) {
  if (other != this) {
    std::swap(com_, other->com_);
    std::swap(role_join_num_, other->role_join_num_);
    std::swap(role_win_num_, other->role_win_num_);
    std::swap(role_cw_num_, other->role_cw_num_);
    std::swap(role_dead_num_, other->role_dead_num_);
    std::swap(role_cl_num_, other->role_cl_num_);
    std::swap(day_join_num_, other->day_join_num_);
    day_recv_id_.Swap(&other->day_recv_id_);
    std::swap(mvp_num_, other->mvp_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3RoleInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3RoleInfoDB_descriptor_;
  metadata.reflection = Clan3RoleInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan5RoleInfoDB::kComFieldNumber;
#endif  // !_MSC_VER

Clan5RoleInfoDB::Clan5RoleInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan5RoleInfoDB::InitAsDefaultInstance() {
  com_ = const_cast< ::proto_ff::ClanRoleComInfoDB*>(&::proto_ff::ClanRoleComInfoDB::default_instance());
}

Clan5RoleInfoDB::Clan5RoleInfoDB(const Clan5RoleInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan5RoleInfoDB::SharedCtor() {
  _cached_size_ = 0;
  com_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan5RoleInfoDB::~Clan5RoleInfoDB() {
  SharedDtor();
}

void Clan5RoleInfoDB::SharedDtor() {
  if (this != default_instance_) {
    delete com_;
  }
}

void Clan5RoleInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan5RoleInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan5RoleInfoDB_descriptor_;
}

const Clan5RoleInfoDB& Clan5RoleInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

Clan5RoleInfoDB* Clan5RoleInfoDB::default_instance_ = NULL;

Clan5RoleInfoDB* Clan5RoleInfoDB::New() const {
  return new Clan5RoleInfoDB;
}

void Clan5RoleInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_com()) {
      if (com_ != NULL) com_->::proto_ff::ClanRoleComInfoDB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan5RoleInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanRoleComInfoDB com = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_com()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan5RoleInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanRoleComInfoDB com = 1;
  if (has_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->com(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan5RoleInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanRoleComInfoDB com = 1;
  if (has_com()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->com(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan5RoleInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanRoleComInfoDB com = 1;
    if (has_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->com());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan5RoleInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan5RoleInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan5RoleInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan5RoleInfoDB::MergeFrom(const Clan5RoleInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_com()) {
      mutable_com()->::proto_ff::ClanRoleComInfoDB::MergeFrom(from.com());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan5RoleInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan5RoleInfoDB::CopyFrom(const Clan5RoleInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan5RoleInfoDB::IsInitialized() const {

  return true;
}

void Clan5RoleInfoDB::Swap(Clan5RoleInfoDB* other) {
  if (other != this) {
    std::swap(com_, other->com_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan5RoleInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan5RoleInfoDB_descriptor_;
  metadata.reflection = Clan5RoleInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanSimple::kClanIdFieldNumber;
const int ClanSimple::kZidFieldNumber;
const int ClanSimple::kNameFieldNumber;
const int ClanSimple::kScoreFieldNumber;
const int ClanSimple::kBadgeIdFieldNumber;
const int ClanSimple::kBadgeNameFieldNumber;
const int ClanSimple::kLeaderCidFieldNumber;
const int ClanSimple::kMembersFieldNumber;
const int ClanSimple::kUpdateScoreTimeFieldNumber;
const int ClanSimple::kFightFieldNumber;
#endif  // !_MSC_VER

ClanSimple::ClanSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanSimple::InitAsDefaultInstance() {
}

ClanSimple::ClanSimple(const ClanSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanSimple::SharedCtor() {
  _cached_size_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  badge_id_ = 0;
  badge_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_cid_ = GOOGLE_ULONGLONG(0);
  update_score_time_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanSimple::~ClanSimple() {
  SharedDtor();
}

void ClanSimple::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (badge_name_ != &::google::protobuf::internal::kEmptyString) {
    delete badge_name_;
  }
  if (this != default_instance_) {
  }
}

void ClanSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanSimple_descriptor_;
}

const ClanSimple& ClanSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanSimple* ClanSimple::default_instance_ = NULL;

ClanSimple* ClanSimple::New() const {
  return new ClanSimple;
}

void ClanSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_id_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
    badge_id_ = 0;
    if (has_badge_name()) {
      if (badge_name_ != &::google::protobuf::internal::kEmptyString) {
        badge_name_->clear();
      }
    }
    leader_cid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    update_score_time_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clan_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_badge_id;
        break;
      }

      // optional int32 badge_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_id_)));
          set_has_badge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_badge_name;
        break;
      }

      // optional bytes badge_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_badge_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_badge_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_members;
        break;
      }

      // repeated uint64 members = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_members;
        if (input->ExpectTag(72)) goto parse_update_score_time;
        break;
      }

      // optional uint64 update_score_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_score_time_)));
          set_has_update_score_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clan_id(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 badge_id = 5;
  if (has_badge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->badge_id(), output);
  }

  // optional bytes badge_name = 6;
  if (has_badge_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->badge_name(), output);
  }

  // optional uint64 leader_cid = 7;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->leader_cid(), output);
  }

  // repeated uint64 members = 8;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->members(i), output);
  }

  // optional uint64 update_score_time = 9;
  if (has_update_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->update_score_time(), output);
  }

  // optional uint64 fight = 10;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clan_id = 1;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clan_id(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 badge_id = 5;
  if (has_badge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->badge_id(), target);
  }

  // optional bytes badge_name = 6;
  if (has_badge_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->badge_name(), target);
  }

  // optional uint64 leader_cid = 7;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->leader_cid(), target);
  }

  // repeated uint64 members = 8;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->members(i), target);
  }

  // optional uint64 update_score_time = 9;
  if (has_update_score_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->update_score_time(), target);
  }

  // optional uint64 fight = 10;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanSimple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clan_id = 1;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 badge_id = 5;
    if (has_badge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_id());
    }

    // optional bytes badge_name = 6;
    if (has_badge_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->badge_name());
    }

    // optional uint64 leader_cid = 7;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 update_score_time = 9;
    if (has_update_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_score_time());
    }

    // optional uint64 fight = 10;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  // repeated uint64 members = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanSimple::MergeFrom(const ClanSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_badge_id()) {
      set_badge_id(from.badge_id());
    }
    if (from.has_badge_name()) {
      set_badge_name(from.badge_name());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_score_time()) {
      set_update_score_time(from.update_score_time());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanSimple::CopyFrom(const ClanSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanSimple::IsInitialized() const {

  return true;
}

void ClanSimple::Swap(ClanSimple* other) {
  if (other != this) {
    std::swap(clan_id_, other->clan_id_);
    std::swap(zid_, other->zid_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(badge_id_, other->badge_id_);
    std::swap(badge_name_, other->badge_name_);
    std::swap(leader_cid_, other->leader_cid_);
    members_.Swap(&other->members_);
    std::swap(update_score_time_, other->update_score_time_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanSimple_descriptor_;
  metadata.reflection = ClanSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanSysOptReq::kTypeFieldNumber;
const int ClanSysOptReq::kClanTypeFieldNumber;
const int ClanSysOptReq::kZidFieldNumber;
const int ClanSysOptReq::kInfosFieldNumber;
const int ClanSysOptReq::kCidsFieldNumber;
#endif  // !_MSC_VER

ClanSysOptReq::ClanSysOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanSysOptReq::InitAsDefaultInstance() {
}

ClanSysOptReq::ClanSysOptReq(const ClanSysOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanSysOptReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  clan_type_ = 0;
  zid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanSysOptReq::~ClanSysOptReq() {
  SharedDtor();
}

void ClanSysOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanSysOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanSysOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanSysOptReq_descriptor_;
}

const ClanSysOptReq& ClanSysOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

ClanSysOptReq* ClanSysOptReq::default_instance_ = NULL;

ClanSysOptReq* ClanSysOptReq::New() const {
  return new ClanSysOptReq;
}

void ClanSysOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    clan_type_ = 0;
    zid_ = 0;
  }
  infos_.Clear();
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanSysOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clan_type;
        break;
      }

      // optional int32 clan_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional int32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.ClanSimple infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectTag(40)) goto parse_cids;
        break;
      }

      // repeated uint64 cids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanSysOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clan_type(), output);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zid(), output);
  }

  // repeated .proto_ff.ClanSimple infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  // repeated uint64 cids = 5;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanSysOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 clan_type = 2;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clan_type(), target);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zid(), target);
  }

  // repeated .proto_ff.ClanSimple infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  // repeated uint64 cids = 5;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanSysOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 clan_type = 2;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

    // optional int32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

  }
  // repeated .proto_ff.ClanSimple infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated uint64 cids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanSysOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanSysOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanSysOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanSysOptReq::MergeFrom(const ClanSysOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanSysOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanSysOptReq::CopyFrom(const ClanSysOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanSysOptReq::IsInitialized() const {

  return true;
}

void ClanSysOptReq::Swap(ClanSysOptReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(clan_type_, other->clan_type_);
    std::swap(zid_, other->zid_);
    infos_.Swap(&other->infos_);
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanSysOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanSysOptReq_descriptor_;
  metadata.reflection = ClanSysOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClanSynRank::kClanTypeFieldNumber;
const int NotifyClanSynRank::kRankFieldNumber;
#endif  // !_MSC_VER

NotifyClanSynRank::NotifyClanSynRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClanSynRank::InitAsDefaultInstance() {
}

NotifyClanSynRank::NotifyClanSynRank(const NotifyClanSynRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClanSynRank::SharedCtor() {
  _cached_size_ = 0;
  clan_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClanSynRank::~NotifyClanSynRank() {
  SharedDtor();
}

void NotifyClanSynRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClanSynRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClanSynRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClanSynRank_descriptor_;
}

const NotifyClanSynRank& NotifyClanSynRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

NotifyClanSynRank* NotifyClanSynRank::default_instance_ = NULL;

NotifyClanSynRank* NotifyClanSynRank::New() const {
  return new NotifyClanSynRank;
}

void NotifyClanSynRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_type_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClanSynRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_type_)));
          set_has_clan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.ComPair64 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClanSynRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_type(), output);
  }

  // repeated .proto_ff.ComPair64 rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClanSynRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_type = 1;
  if (has_clan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_type(), target);
  }

  // repeated .proto_ff.ComPair64 rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClanSynRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_type = 1;
    if (has_clan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_type());
    }

  }
  // repeated .proto_ff.ComPair64 rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClanSynRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClanSynRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClanSynRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClanSynRank::MergeFrom(const NotifyClanSynRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_type()) {
      set_clan_type(from.clan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClanSynRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClanSynRank::CopyFrom(const NotifyClanSynRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClanSynRank::IsInitialized() const {

  return true;
}

void NotifyClanSynRank::Swap(NotifyClanSynRank* other) {
  if (other != this) {
    std::swap(clan_type_, other->clan_type_);
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClanSynRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClanSynRank_descriptor_;
  metadata.reflection = NotifyClanSynRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LModifyClanInfoReq::kCidFieldNumber;
const int C2LModifyClanInfoReq::kReqFieldNumber;
#endif  // !_MSC_VER

C2LModifyClanInfoReq::C2LModifyClanInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LModifyClanInfoReq::InitAsDefaultInstance() {
  req_ = const_cast< ::proto_ff::ModifyClanInfoReq*>(&::proto_ff::ModifyClanInfoReq::default_instance());
}

C2LModifyClanInfoReq::C2LModifyClanInfoReq(const C2LModifyClanInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LModifyClanInfoReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LModifyClanInfoReq::~C2LModifyClanInfoReq() {
  SharedDtor();
}

void C2LModifyClanInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void C2LModifyClanInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LModifyClanInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LModifyClanInfoReq_descriptor_;
}

const C2LModifyClanInfoReq& C2LModifyClanInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

C2LModifyClanInfoReq* C2LModifyClanInfoReq::default_instance_ = NULL;

C2LModifyClanInfoReq* C2LModifyClanInfoReq::New() const {
  return new C2LModifyClanInfoReq;
}

void C2LModifyClanInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_req()) {
      if (req_ != NULL) req_->::proto_ff::ModifyClanInfoReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LModifyClanInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req;
        break;
      }

      // optional .proto_ff.ModifyClanInfoReq req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LModifyClanInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.ModifyClanInfoReq req = 2;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LModifyClanInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.ModifyClanInfoReq req = 2;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LModifyClanInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.ModifyClanInfoReq req = 2;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LModifyClanInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LModifyClanInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LModifyClanInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LModifyClanInfoReq::MergeFrom(const C2LModifyClanInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_req()) {
      mutable_req()->::proto_ff::ModifyClanInfoReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LModifyClanInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LModifyClanInfoReq::CopyFrom(const C2LModifyClanInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LModifyClanInfoReq::IsInitialized() const {

  return true;
}

void C2LModifyClanInfoReq::Swap(C2LModifyClanInfoReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LModifyClanInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LModifyClanInfoReq_descriptor_;
  metadata.reflection = C2LModifyClanInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CModifyClanInfoRsp::kRetFieldNumber;
const int L2CModifyClanInfoRsp::kCidFieldNumber;
const int L2CModifyClanInfoRsp::kReqFieldNumber;
#endif  // !_MSC_VER

L2CModifyClanInfoRsp::L2CModifyClanInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CModifyClanInfoRsp::InitAsDefaultInstance() {
  req_ = const_cast< ::proto_ff::ModifyClanInfoReq*>(&::proto_ff::ModifyClanInfoReq::default_instance());
}

L2CModifyClanInfoRsp::L2CModifyClanInfoRsp(const L2CModifyClanInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CModifyClanInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CModifyClanInfoRsp::~L2CModifyClanInfoRsp() {
  SharedDtor();
}

void L2CModifyClanInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void L2CModifyClanInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CModifyClanInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CModifyClanInfoRsp_descriptor_;
}

const L2CModifyClanInfoRsp& L2CModifyClanInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2eproto();
  return *default_instance_;
}

L2CModifyClanInfoRsp* L2CModifyClanInfoRsp::default_instance_ = NULL;

L2CModifyClanInfoRsp* L2CModifyClanInfoRsp::New() const {
  return new L2CModifyClanInfoRsp;
}

void L2CModifyClanInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_req()) {
      if (req_ != NULL) req_->::proto_ff::ModifyClanInfoReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CModifyClanInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .proto_ff.ModifyClanInfoReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CModifyClanInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional .proto_ff.ModifyClanInfoReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CModifyClanInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional .proto_ff.ModifyClanInfoReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CModifyClanInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.ModifyClanInfoReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CModifyClanInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CModifyClanInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CModifyClanInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CModifyClanInfoRsp::MergeFrom(const L2CModifyClanInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_req()) {
      mutable_req()->::proto_ff::ModifyClanInfoReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CModifyClanInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CModifyClanInfoRsp::CopyFrom(const L2CModifyClanInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CModifyClanInfoRsp::IsInitialized() const {

  return true;
}

void L2CModifyClanInfoRsp::Swap(L2CModifyClanInfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CModifyClanInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CModifyClanInfoRsp_descriptor_;
  metadata.reflection = L2CModifyClanInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
