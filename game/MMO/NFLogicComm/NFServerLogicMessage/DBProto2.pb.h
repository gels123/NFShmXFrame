// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProto2.proto

#ifndef PROTOBUF_DBProto2_2eproto__INCLUDED
#define PROTOBUF_DBProto2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "Com.pb.h"
#include "ComDefine.pb.h"
#include "DBProto.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DBProto2_2eproto();
void protobuf_AssignDesc_DBProto2_2eproto();
void protobuf_ShutdownFile_DBProto2_2eproto();

class GetRegisterNum_RoleDBData;
class RoleDBSimpleData;
class MyFriendInfo;
class RoleDBSnsDetail;
class RoleEnterSceneData;

// ===================================================================

class GetRegisterNum_RoleDBData : public ::google::protobuf::Message {
 public:
  GetRegisterNum_RoleDBData();
  virtual ~GetRegisterNum_RoleDBData();

  GetRegisterNum_RoleDBData(const GetRegisterNum_RoleDBData& from);

  inline GetRegisterNum_RoleDBData& operator=(const GetRegisterNum_RoleDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegisterNum_RoleDBData& default_instance();

  void Swap(GetRegisterNum_RoleDBData* other);

  // implements Message ----------------------------------------------

  GetRegisterNum_RoleDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegisterNum_RoleDBData& from);
  void MergeFrom(const GetRegisterNum_RoleDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GetRegisterNum_RoleDBData)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto2_2eproto();
  friend void protobuf_AssignDesc_DBProto2_2eproto();
  friend void protobuf_ShutdownFile_DBProto2_2eproto();

  void InitAsDefaultInstance();
  static GetRegisterNum_RoleDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBSimpleData : public ::google::protobuf::Message {
 public:
  RoleDBSimpleData();
  virtual ~RoleDBSimpleData();

  RoleDBSimpleData(const RoleDBSimpleData& from);

  inline RoleDBSimpleData& operator=(const RoleDBSimpleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBSimpleData& default_instance();

  void Swap(RoleDBSimpleData* other);

  // implements Message ----------------------------------------------

  RoleDBSimpleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBSimpleData& from);
  void MergeFrom(const RoleDBSimpleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleDBBaseData base = 4;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 4;
  inline const ::proto_ff::RoleDBBaseData& base() const;
  inline ::proto_ff::RoleDBBaseData* mutable_base();
  inline ::proto_ff::RoleDBBaseData* release_base();
  inline void set_allocated_base(::proto_ff::RoleDBBaseData* base);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBSimpleData)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::RoleDBBaseData* base_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto2_2eproto();
  friend void protobuf_AssignDesc_DBProto2_2eproto();
  friend void protobuf_ShutdownFile_DBProto2_2eproto();

  void InitAsDefaultInstance();
  static RoleDBSimpleData* default_instance_;
};
// -------------------------------------------------------------------

class MyFriendInfo : public ::google::protobuf::Message {
 public:
  MyFriendInfo();
  virtual ~MyFriendInfo();

  MyFriendInfo(const MyFriendInfo& from);

  inline MyFriendInfo& operator=(const MyFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyFriendInfo& default_instance();

  void Swap(MyFriendInfo* other);

  // implements Message ----------------------------------------------

  MyFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyFriendInfo& from);
  void MergeFrom(const MyFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.MyFriendInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProto2_2eproto();
  friend void protobuf_AssignDesc_DBProto2_2eproto();
  friend void protobuf_ShutdownFile_DBProto2_2eproto();

  void InitAsDefaultInstance();
  static MyFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBSnsDetail : public ::google::protobuf::Message {
 public:
  RoleDBSnsDetail();
  virtual ~RoleDBSnsDetail();

  RoleDBSnsDetail(const RoleDBSnsDetail& from);

  inline RoleDBSnsDetail& operator=(const RoleDBSnsDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBSnsDetail& default_instance();

  void Swap(RoleDBSnsDetail* other);

  // implements Message ----------------------------------------------

  RoleDBSnsDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBSnsDetail& from);
  void MergeFrom(const RoleDBSnsDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional .proto_ff.MyFriendInfo friend_info = 2;
  inline bool has_friend_info() const;
  inline void clear_friend_info();
  static const int kFriendInfoFieldNumber = 2;
  inline const ::proto_ff::MyFriendInfo& friend_info() const;
  inline ::proto_ff::MyFriendInfo* mutable_friend_info();
  inline ::proto_ff::MyFriendInfo* release_friend_info();
  inline void set_allocated_friend_info(::proto_ff::MyFriendInfo* friend_info);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBSnsDetail)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_friend_info();
  inline void clear_has_friend_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::proto_ff::MyFriendInfo* friend_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto2_2eproto();
  friend void protobuf_AssignDesc_DBProto2_2eproto();
  friend void protobuf_ShutdownFile_DBProto2_2eproto();

  void InitAsDefaultInstance();
  static RoleDBSnsDetail* default_instance_;
};
// -------------------------------------------------------------------

class RoleEnterSceneData : public ::google::protobuf::Message {
 public:
  RoleEnterSceneData();
  virtual ~RoleEnterSceneData();

  RoleEnterSceneData(const RoleEnterSceneData& from);

  inline RoleEnterSceneData& operator=(const RoleEnterSceneData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleEnterSceneData& default_instance();

  void Swap(RoleEnterSceneData* other);

  // implements Message ----------------------------------------------

  RoleEnterSceneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleEnterSceneData& from);
  void MergeFrom(const RoleEnterSceneData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleDBBaseData base = 10;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 10;
  inline const ::proto_ff::RoleDBBaseData& base() const;
  inline ::proto_ff::RoleDBBaseData* mutable_base();
  inline ::proto_ff::RoleDBBaseData* release_base();
  inline void set_allocated_base(::proto_ff::RoleDBBaseData* base);

  // optional .proto_ff.AttrDBData attr = 11;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 11;
  inline const ::proto_ff::AttrDBData& attr() const;
  inline ::proto_ff::AttrDBData* mutable_attr();
  inline ::proto_ff::AttrDBData* release_attr();
  inline void set_allocated_attr(::proto_ff::AttrDBData* attr);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleEnterSceneData)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_attr();
  inline void clear_has_attr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::RoleDBBaseData* base_;
  ::proto_ff::AttrDBData* attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto2_2eproto();
  friend void protobuf_AssignDesc_DBProto2_2eproto();
  friend void protobuf_ShutdownFile_DBProto2_2eproto();

  void InitAsDefaultInstance();
  static RoleEnterSceneData* default_instance_;
};
// ===================================================================


// ===================================================================

// GetRegisterNum_RoleDBData

// optional uint32 num = 1;
inline bool GetRegisterNum_RoleDBData::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegisterNum_RoleDBData::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegisterNum_RoleDBData::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegisterNum_RoleDBData::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 GetRegisterNum_RoleDBData::num() const {
  return num_;
}
inline void GetRegisterNum_RoleDBData::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// RoleDBSimpleData

// optional uint64 cid = 1;
inline bool RoleDBSimpleData::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBSimpleData::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBSimpleData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBSimpleData::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleDBSimpleData::cid() const {
  return cid_;
}
inline void RoleDBSimpleData::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 zid = 2;
inline bool RoleDBSimpleData::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBSimpleData::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBSimpleData::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBSimpleData::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleDBSimpleData::zid() const {
  return zid_;
}
inline void RoleDBSimpleData::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 uid = 3;
inline bool RoleDBSimpleData::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDBSimpleData::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDBSimpleData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDBSimpleData::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleDBSimpleData::uid() const {
  return uid_;
}
inline void RoleDBSimpleData::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.RoleDBBaseData base = 4;
inline bool RoleDBSimpleData::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBSimpleData::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBSimpleData::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBSimpleData::clear_base() {
  if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
  clear_has_base();
}
inline const ::proto_ff::RoleDBBaseData& RoleDBSimpleData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::RoleDBBaseData* RoleDBSimpleData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::RoleDBBaseData;
  return base_;
}
inline ::proto_ff::RoleDBBaseData* RoleDBSimpleData::release_base() {
  clear_has_base();
  ::proto_ff::RoleDBBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoleDBSimpleData::set_allocated_base(::proto_ff::RoleDBBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// -------------------------------------------------------------------

// MyFriendInfo

// -------------------------------------------------------------------

// RoleDBSnsDetail

// optional uint64 cid = 1;
inline bool RoleDBSnsDetail::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBSnsDetail::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBSnsDetail::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBSnsDetail::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleDBSnsDetail::cid() const {
  return cid_;
}
inline void RoleDBSnsDetail::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional .proto_ff.MyFriendInfo friend_info = 2;
inline bool RoleDBSnsDetail::has_friend_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBSnsDetail::set_has_friend_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBSnsDetail::clear_has_friend_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBSnsDetail::clear_friend_info() {
  if (friend_info_ != NULL) friend_info_->::proto_ff::MyFriendInfo::Clear();
  clear_has_friend_info();
}
inline const ::proto_ff::MyFriendInfo& RoleDBSnsDetail::friend_info() const {
  return friend_info_ != NULL ? *friend_info_ : *default_instance_->friend_info_;
}
inline ::proto_ff::MyFriendInfo* RoleDBSnsDetail::mutable_friend_info() {
  set_has_friend_info();
  if (friend_info_ == NULL) friend_info_ = new ::proto_ff::MyFriendInfo;
  return friend_info_;
}
inline ::proto_ff::MyFriendInfo* RoleDBSnsDetail::release_friend_info() {
  clear_has_friend_info();
  ::proto_ff::MyFriendInfo* temp = friend_info_;
  friend_info_ = NULL;
  return temp;
}
inline void RoleDBSnsDetail::set_allocated_friend_info(::proto_ff::MyFriendInfo* friend_info) {
  delete friend_info_;
  friend_info_ = friend_info;
  if (friend_info) {
    set_has_friend_info();
  } else {
    clear_has_friend_info();
  }
}

// -------------------------------------------------------------------

// RoleEnterSceneData

// optional uint64 cid = 1;
inline bool RoleEnterSceneData::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleEnterSceneData::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleEnterSceneData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleEnterSceneData::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleEnterSceneData::cid() const {
  return cid_;
}
inline void RoleEnterSceneData::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 zid = 2;
inline bool RoleEnterSceneData::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleEnterSceneData::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleEnterSceneData::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleEnterSceneData::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleEnterSceneData::zid() const {
  return zid_;
}
inline void RoleEnterSceneData::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 uid = 3;
inline bool RoleEnterSceneData::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleEnterSceneData::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleEnterSceneData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleEnterSceneData::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleEnterSceneData::uid() const {
  return uid_;
}
inline void RoleEnterSceneData::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.RoleDBBaseData base = 10;
inline bool RoleEnterSceneData::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleEnterSceneData::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleEnterSceneData::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleEnterSceneData::clear_base() {
  if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
  clear_has_base();
}
inline const ::proto_ff::RoleDBBaseData& RoleEnterSceneData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::RoleDBBaseData* RoleEnterSceneData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::RoleDBBaseData;
  return base_;
}
inline ::proto_ff::RoleDBBaseData* RoleEnterSceneData::release_base() {
  clear_has_base();
  ::proto_ff::RoleDBBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoleEnterSceneData::set_allocated_base(::proto_ff::RoleDBBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .proto_ff.AttrDBData attr = 11;
inline bool RoleEnterSceneData::has_attr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleEnterSceneData::set_has_attr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleEnterSceneData::clear_has_attr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleEnterSceneData::clear_attr() {
  if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
  clear_has_attr();
}
inline const ::proto_ff::AttrDBData& RoleEnterSceneData::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::proto_ff::AttrDBData* RoleEnterSceneData::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::proto_ff::AttrDBData;
  return attr_;
}
inline ::proto_ff::AttrDBData* RoleEnterSceneData::release_attr() {
  clear_has_attr();
  ::proto_ff::AttrDBData* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void RoleEnterSceneData::set_allocated_attr(::proto_ff::AttrDBData* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBProto2_2eproto__INCLUDED
