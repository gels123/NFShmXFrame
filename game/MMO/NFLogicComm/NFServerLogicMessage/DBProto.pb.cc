// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* RoleReliveProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleReliveProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagItemsDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItemsDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagDBSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagDBSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBUnitBagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBUnitBagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBBagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBBagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartEntryDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartEntryDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayUseItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayUseItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterArenaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterArenaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiniDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiniDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBAdvPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBAdvPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBAdvInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBAdvInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillCdDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillCdDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiniActivityDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiniActivityDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerDBRecordEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerDBRecordEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerDBRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerDBRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBCdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBCdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossSimpleInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossSimpleInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDBRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDBRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvoyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvoyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmorDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmorDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMirrorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMirrorData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleMirrorData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FactionMemDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMultMemDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMultMemDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionApplyDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionApplyDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMultApplyDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMultApplyDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRecordDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRecordDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMutRecordDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMutRecordDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionAllDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionAllDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoleDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoleDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoleDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoleDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoUpdateDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoUpdateDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleChgNameDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleChgNameDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleChgNameDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleChgNameDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSimpleListDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSimpleListDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSimpleListDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSimpleListDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureTransLogicDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureTransLogicDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureTransLogicDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureTransLogicDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewMailDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewMailDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailDBOperateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailDBOperateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveMailDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveMailDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveMailDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveMailDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMailDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMailDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMailDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMailDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxMailIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxMailIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxMailIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxMailIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCharacterMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCharacterMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneMailSaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneMailSaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneMailTransCharacterMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneMailTransCharacterMailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailDBDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailDBDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailDBDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailDBDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFriendDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFriendDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelteFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelteFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalComData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalComData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActSaveDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActSaveDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllArenaDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllArenaDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaMoreDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaMoreDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllArenaDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllArenaDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveArenaDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveArenaDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteArenaDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteArenaDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMirrorDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMirrorDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMirrorDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMirrorDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDataDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDataDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDataDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDataDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSaveDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSaveDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDelDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDelDBReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBProto_2eproto() {
  protobuf_AddDesc_DBProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBProto.proto");
  GOOGLE_CHECK(file != NULL);
  RoleReliveProto_descriptor_ = file->message_type(0);
  static const int RoleReliveProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, tired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, relive_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, is_tired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, map_relive_num_),
  };
  RoleReliveProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleReliveProto_descriptor_,
      RoleReliveProto::default_instance_,
      RoleReliveProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleReliveProto));
  RoleDBBaseData_descriptor_ = file->message_type(1);
  static const int RoleDBBaseData_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, hanguptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, relive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, dia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, arenacoin_),
  };
  RoleDBBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBBaseData_descriptor_,
      RoleDBBaseData::default_instance_,
      RoleDBBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBBaseData));
  BagItemsDBData_descriptor_ = file->message_type(2);
  static const int BagItemsDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, offset_),
  };
  BagItemsDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItemsDBData_descriptor_,
      BagItemsDBData::default_instance_,
      BagItemsDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItemsDBData));
  BagDBSimpleData_descriptor_ = file->message_type(3);
  static const int BagDBSimpleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, package_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, expand_num_),
  };
  BagDBSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagDBSimpleData_descriptor_,
      BagDBSimpleData::default_instance_,
      BagDBSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagDBSimpleData));
  RoleDBUnitBagData_descriptor_ = file->message_type(4);
  static const int RoleDBUnitBagData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, simple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, parts_),
  };
  RoleDBUnitBagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBUnitBagData_descriptor_,
      RoleDBUnitBagData::default_instance_,
      RoleDBUnitBagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBUnitBagData));
  RoleDBBagData_descriptor_ = file->message_type(5);
  static const int RoleDBBagData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBagData, bags_),
  };
  RoleDBBagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBBagData_descriptor_,
      RoleDBBagData::default_instance_,
      RoleDBBagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBBagData));
  RoleDBEquipData_descriptor_ = file->message_type(6);
  static const int RoleDBEquipData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, lv_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, stove_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, stove_exp_),
  };
  RoleDBEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBEquipData_descriptor_,
      RoleDBEquipData::default_instance_,
      RoleDBEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBEquipData));
  RoleDBTaskData_descriptor_ = file->message_type(7);
  static const int RoleDBTaskData_offsets_[1] = {
  };
  RoleDBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBTaskData_descriptor_,
      RoleDBTaskData::default_instance_,
      RoleDBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBTaskData));
  GrowPartEntryDBInfo_descriptor_ = file->message_type(8);
  static const int GrowPartEntryDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, lv_),
  };
  GrowPartEntryDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartEntryDBInfo_descriptor_,
      GrowPartEntryDBInfo::default_instance_,
      GrowPartEntryDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartEntryDBInfo));
  GrowPartDBData_descriptor_ = file->message_type(9);
  static const int GrowPartDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, curid_),
  };
  GrowPartDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartDBData_descriptor_,
      GrowPartDBData::default_instance_,
      GrowPartDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartDBData));
  GrowDBData_descriptor_ = file->message_type(10);
  static const int GrowDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowDBData, parts_),
  };
  GrowDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowDBData_descriptor_,
      GrowDBData::default_instance_,
      GrowDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowDBData));
  DayUseItemData_descriptor_ = file->message_type(11);
  static const int DayUseItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayUseItemData, info_),
  };
  DayUseItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayUseItemData_descriptor_,
      DayUseItemData::default_instance_,
      DayUseItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayUseItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayUseItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayUseItemData));
  CharacterArenaData_descriptor_ = file->message_type(12);
  static const int CharacterArenaData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, historyrankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, buychallengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, chall_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, allchallengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, rank_id_),
  };
  CharacterArenaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterArenaData_descriptor_,
      CharacterArenaData::default_instance_,
      CharacterArenaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterArenaData));
  MiniDBData_descriptor_ = file->message_type(13);
  static const int MiniDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, useitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, arena_data_),
  };
  MiniDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiniDBData_descriptor_,
      MiniDBData::default_instance_,
      MiniDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiniDBData));
  FacadeDataInfo_descriptor_ = file->message_type(14);
  static const int FacadeDataInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, use_soul_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, equip_fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, fantasy_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, fragment_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, soul_data_),
  };
  FacadeDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeDataInfo_descriptor_,
      FacadeDataInfo::default_instance_,
      FacadeDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeDataInfo));
  MountDataInfo_descriptor_ = file->message_type(15);
  static const int MountDataInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, equip_fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, fantasy_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, fragment_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, kun_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, blood_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, baby_slot_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, ride_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, last_mount_model_id_),
  };
  MountDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountDataInfo_descriptor_,
      MountDataInfo::default_instance_,
      MountDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountDataInfo));
  DeityDataInfo_descriptor_ = file->message_type(16);
  static const int DeityDataInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, deity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, deity_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, deity_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, fantasy_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, fragment_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, battle_data_),
  };
  DeityDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityDataInfo_descriptor_,
      DeityDataInfo::default_instance_,
      DeityDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityDataInfo));
  FacadeDBData_descriptor_ = file->message_type(17);
  static const int FacadeDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDBData, data_),
  };
  FacadeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeDBData_descriptor_,
      FacadeDBData::default_instance_,
      FacadeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeDBData));
  SkillDBInfo_descriptor_ = file->message_type(18);
  static const int SkillDBInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, wakeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, use_msc_),
  };
  SkillDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBInfo_descriptor_,
      SkillDBInfo::default_instance_,
      SkillDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBInfo));
  SkillDBPos_descriptor_ = file->message_type(19);
  static const int SkillDBPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, use_),
  };
  SkillDBPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBPos_descriptor_,
      SkillDBPos::default_instance_,
      SkillDBPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBPos));
  SkillDBAdvPos_descriptor_ = file->message_type(20);
  static const int SkillDBAdvPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, unlock_),
  };
  SkillDBAdvPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBAdvPos_descriptor_,
      SkillDBAdvPos::default_instance_,
      SkillDBAdvPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBAdvPos));
  SkillDBAdvInfo_descriptor_ = file->message_type(21);
  static const int SkillDBAdvInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, level_),
  };
  SkillDBAdvInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBAdvInfo_descriptor_,
      SkillDBAdvInfo::default_instance_,
      SkillDBAdvInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBAdvInfo));
  SkillDBGroup_descriptor_ = file->message_type(22);
  static const int SkillDBGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, chg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, pos_lst_),
  };
  SkillDBGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBGroup_descriptor_,
      SkillDBGroup::default_instance_,
      SkillDBGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBGroup));
  PetSkillCdDB_descriptor_ = file->message_type(23);
  static const int PetSkillCdDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, use_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, pet_instid_),
  };
  PetSkillCdDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillCdDB_descriptor_,
      PetSkillCdDB::default_instance_,
      PetSkillCdDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillCdDB));
  SkillDBData_descriptor_ = file->message_type(24);
  static const int SkillDBData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, group_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, last_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, adv_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, adv_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, cur_advpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, pet_cd_),
  };
  SkillDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBData_descriptor_,
      SkillDBData::default_instance_,
      SkillDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBData));
  GodRelicsActivityData_descriptor_ = file->message_type(25);
  static const int GodRelicsActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, group_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, cur_group_id_),
  };
  GodRelicsActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsActivityData_descriptor_,
      GodRelicsActivityData::default_instance_,
      GodRelicsActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsActivityData));
  MiniActivityDBData_descriptor_ = file->message_type(26);
  static const int MiniActivityDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, god_relics_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, daily_data_),
  };
  MiniActivityDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiniActivityDBData_descriptor_,
      MiniActivityDBData::default_instance_,
      MiniActivityDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiniActivityDBData));
  DupRecord_descriptor_ = file->message_type(27);
  static const int DupRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, star_),
  };
  DupRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupRecord_descriptor_,
      DupRecord::default_instance_,
      DupRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupRecord));
  DupGroupData_descriptor_ = file->message_type(28);
  static const int DupGroupData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, enternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, usenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, lastfresh_),
  };
  DupGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupGroupData_descriptor_,
      DupGroupData::default_instance_,
      DupGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupGroupData));
  DupTowerDBRecordEntry_descriptor_ = file->message_type(29);
  static const int DupTowerDBRecordEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, cid_),
  };
  DupTowerDBRecordEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerDBRecordEntry_descriptor_,
      DupTowerDBRecordEntry::default_instance_,
      DupTowerDBRecordEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerDBRecordEntry));
  DupTowerDBRecord_descriptor_ = file->message_type(30);
  static const int DupTowerDBRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, entrys_),
  };
  DupTowerDBRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerDBRecord_descriptor_,
      DupTowerDBRecord::default_instance_,
      DupTowerDBRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerDBRecord));
  DupTowerDBData_descriptor_ = file->message_type(31);
  static const int DupTowerDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBData, ids_),
  };
  DupTowerDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerDBData_descriptor_,
      DupTowerDBData::default_instance_,
      DupTowerDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerDBData));
  DupDBData_descriptor_ = file->message_type(32);
  static const int DupDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, tower_),
  };
  DupDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupDBData_descriptor_,
      DupDBData::default_instance_,
      DupDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupDBData));
  BuffDBInfo_descriptor_ = file->message_type(33);
  static const int BuffDBInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, skilllev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, is_forever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, startmsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, is_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, extramsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, is_end_),
  };
  BuffDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBInfo_descriptor_,
      BuffDBInfo::default_instance_,
      BuffDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBInfo));
  BuffDBCdInfo_descriptor_ = file->message_type(34);
  static const int BuffDBCdInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, lastmsec_),
  };
  BuffDBCdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBCdInfo_descriptor_,
      BuffDBCdInfo::default_instance_,
      BuffDBCdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBCdInfo));
  BuffDBData_descriptor_ = file->message_type(35);
  static const int BuffDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, cd_lst_),
  };
  BuffDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBData_descriptor_,
      BuffDBData::default_instance_,
      BuffDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBData));
  BossSimpleInfoDB_descriptor_ = file->message_type(36);
  static const int BossSimpleInfoDB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, boss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, back_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, back_max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, use_item_num_),
  };
  BossSimpleInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossSimpleInfoDB_descriptor_,
      BossSimpleInfoDB::default_instance_,
      BossSimpleInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossSimpleInfoDB));
  BossDBData_descriptor_ = file->message_type(37);
  static const int BossDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, attents_),
  };
  BossDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDBData_descriptor_,
      BossDBData::default_instance_,
      BossDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDBData));
  VipDBData_descriptor_ = file->message_type(38);
  static const int VipDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, expdiamond_),
  };
  VipDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipDBData_descriptor_,
      VipDBData::default_instance_,
      VipDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipDBData));
  AttrDBData_descriptor_ = file->message_type(39);
  static const int AttrDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrDBData, attr_lst_),
  };
  AttrDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrDBData_descriptor_,
      AttrDBData::default_instance_,
      AttrDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrDBData));
  PetDBRecord_descriptor_ = file->message_type(40);
  static const int PetDBRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, costpet_),
  };
  PetDBRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDBRecord_descriptor_,
      PetDBRecord::default_instance_,
      PetDBRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDBRecord));
  PetDBData_descriptor_ = file->message_type(41);
  static const int PetDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, fetter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, hatchs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, cfgids_),
  };
  PetDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDBData_descriptor_,
      PetDBData::default_instance_,
      PetDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDBData));
  MallDBInfo_descriptor_ = file->message_type(42);
  static const int MallDBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, time_),
  };
  MallDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallDBInfo_descriptor_,
      MallDBInfo::default_instance_,
      MallDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallDBInfo));
  MallDBData_descriptor_ = file->message_type(43);
  static const int MallDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, forever_),
  };
  MallDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallDBData_descriptor_,
      MallDBData::default_instance_,
      MallDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallDBData));
  ConvoyData_descriptor_ = file->message_type(44);
  static const int ConvoyData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, escortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, freenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, genescortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, resettime_),
  };
  ConvoyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvoyData_descriptor_,
      ConvoyData::default_instance_,
      ConvoyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvoyData));
  ArmorDBData_descriptor_ = file->message_type(45);
  static const int ArmorDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorDBData, infos_),
  };
  ArmorDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmorDBData_descriptor_,
      ArmorDBData::default_instance_,
      ArmorDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmorDBData));
  AssistDBData_descriptor_ = file->message_type(46);
  static const int AssistDBData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, dayprestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, sendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, helpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, allsendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, allhelpnum_),
  };
  AssistDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistDBData_descriptor_,
      AssistDBData::default_instance_,
      AssistDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistDBData));
  RoleDBData_descriptor_ = file->message_type(47);
  static const int RoleDBData_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, unlockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, grow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mini_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, deity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, convoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, assist_),
  };
  RoleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBData_descriptor_,
      RoleDBData::default_instance_,
      RoleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBData));
  RoleMirrorData_descriptor_ = file->message_type(48);
  static const int RoleMirrorData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, base_),
  };
  RoleMirrorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMirrorData_descriptor_,
      RoleMirrorData::default_instance_,
      RoleMirrorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMirrorData));
  RoleMirrorData_Type_descriptor_ = RoleMirrorData_descriptor_->enum_type(0);
  FactionMemDBProto_descriptor_ = file->message_type(49);
  static const int FactionMemDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, total_contri_),
  };
  FactionMemDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemDBProto_descriptor_,
      FactionMemDBProto::default_instance_,
      FactionMemDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemDBProto));
  FactionMultMemDBProto_descriptor_ = file->message_type(50);
  static const int FactionMultMemDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultMemDBProto, mem_lst_),
  };
  FactionMultMemDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMultMemDBProto_descriptor_,
      FactionMultMemDBProto::default_instance_,
      FactionMultMemDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultMemDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultMemDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMultMemDBProto));
  FactionApplyDBProto_descriptor_ = file->message_type(51);
  static const int FactionApplyDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, time_),
  };
  FactionApplyDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionApplyDBProto_descriptor_,
      FactionApplyDBProto::default_instance_,
      FactionApplyDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionApplyDBProto));
  FactionMultApplyDBProto_descriptor_ = file->message_type(52);
  static const int FactionMultApplyDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultApplyDBProto, apply_lst_),
  };
  FactionMultApplyDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMultApplyDBProto_descriptor_,
      FactionMultApplyDBProto::default_instance_,
      FactionMultApplyDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultApplyDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultApplyDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMultApplyDBProto));
  FactionRecordDBProto_descriptor_ = file->message_type(53);
  static const int FactionRecordDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, param1_),
  };
  FactionRecordDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRecordDBProto_descriptor_,
      FactionRecordDBProto::default_instance_,
      FactionRecordDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRecordDBProto));
  FactionMutRecordDBProto_descriptor_ = file->message_type(54);
  static const int FactionMutRecordDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMutRecordDBProto, record_lst_),
  };
  FactionMutRecordDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMutRecordDBProto_descriptor_,
      FactionMutRecordDBProto::default_instance_,
      FactionMutRecordDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMutRecordDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMutRecordDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMutRecordDBProto));
  FactionDBBase_descriptor_ = file->message_type(55);
  static const int FactionDBBase_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, last_notice_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, proxy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, record_),
  };
  FactionDBBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBBase_descriptor_,
      FactionDBBase::default_instance_,
      FactionDBBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBBase));
  FactionDBData_descriptor_ = file->message_type(56);
  static const int FactionDBData_offsets_[1] = {
  };
  FactionDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBData_descriptor_,
      FactionDBData::default_instance_,
      FactionDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBData));
  FactionAllDBData_descriptor_ = file->message_type(57);
  static const int FactionAllDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, data_),
  };
  FactionAllDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionAllDBData_descriptor_,
      FactionAllDBData::default_instance_,
      FactionAllDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionAllDBData));
  RoleListDBReq_descriptor_ = file->message_type(58);
  static const int RoleListDBReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, born_zid_),
  };
  RoleListDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListDBReq_descriptor_,
      RoleListDBReq::default_instance_,
      RoleListDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListDBReq));
  RoleListDBRsp_descriptor_ = file->message_type(59);
  static const int RoleListDBRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, role_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, regnum_),
  };
  RoleListDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListDBRsp_descriptor_,
      RoleListDBRsp::default_instance_,
      RoleListDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListDBRsp));
  CreateRoleDBReq_descriptor_ = file->message_type(60);
  static const int CreateRoleDBReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, zone_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, born_zid_),
  };
  CreateRoleDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoleDBReq_descriptor_,
      CreateRoleDBReq::default_instance_,
      CreateRoleDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoleDBReq));
  CreateRoleDBRsp_descriptor_ = file->message_type(61);
  static const int CreateRoleDBRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, born_zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, simple_),
  };
  CreateRoleDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoleDBRsp_descriptor_,
      CreateRoleDBRsp::default_instance_,
      CreateRoleDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoleDBRsp));
  RoleInfoDBReq_descriptor_ = file->message_type(62);
  static const int RoleInfoDBReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, change_),
  };
  RoleInfoDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfoDBReq_descriptor_,
      RoleInfoDBReq::default_instance_,
      RoleInfoDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfoDBReq));
  RoleInfoDBRsp_descriptor_ = file->message_type(63);
  static const int RoleInfoDBRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, info_),
  };
  RoleInfoDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfoDBRsp_descriptor_,
      RoleInfoDBRsp::default_instance_,
      RoleInfoDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfoDBRsp));
  RoleInfoUpdateDBReq_descriptor_ = file->message_type(64);
  static const int RoleInfoUpdateDBReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, info_),
  };
  RoleInfoUpdateDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfoUpdateDBReq_descriptor_,
      RoleInfoUpdateDBReq::default_instance_,
      RoleInfoUpdateDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfoUpdateDBReq));
  RoleChgNameDBReq_descriptor_ = file->message_type(65);
  static const int RoleChgNameDBReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, name_),
  };
  RoleChgNameDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleChgNameDBReq_descriptor_,
      RoleChgNameDBReq::default_instance_,
      RoleChgNameDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleChgNameDBReq));
  RoleChgNameDBRsp_descriptor_ = file->message_type(66);
  static const int RoleChgNameDBRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, name_),
  };
  RoleChgNameDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleChgNameDBRsp_descriptor_,
      RoleChgNameDBRsp::default_instance_,
      RoleChgNameDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleChgNameDBRsp));
  RoleSimpleListDBReq_descriptor_ = file->message_type(67);
  static const int RoleSimpleListDBReq_offsets_[1] = {
  };
  RoleSimpleListDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSimpleListDBReq_descriptor_,
      RoleSimpleListDBReq::default_instance_,
      RoleSimpleListDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSimpleListDBReq));
  RoleSimpleListDBRsp_descriptor_ = file->message_type(68);
  static const int RoleSimpleListDBRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, finish_flag_),
  };
  RoleSimpleListDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSimpleListDBRsp_descriptor_,
      RoleSimpleListDBRsp::default_instance_,
      RoleSimpleListDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSimpleListDBRsp));
  CreatureTransLogicDBReq_descriptor_ = file->message_type(69);
  static const int CreatureTransLogicDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBReq, trans_data_),
  };
  CreatureTransLogicDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureTransLogicDBReq_descriptor_,
      CreatureTransLogicDBReq::default_instance_,
      CreatureTransLogicDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureTransLogicDBReq));
  CreatureTransLogicDBRsp_descriptor_ = file->message_type(70);
  static const int CreatureTransLogicDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, cid_),
  };
  CreatureTransLogicDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureTransLogicDBRsp_descriptor_,
      CreatureTransLogicDBRsp::default_instance_,
      CreatureTransLogicDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureTransLogicDBRsp));
  NewMailDBInfo_descriptor_ = file->message_type(71);
  static const int NewMailDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, result_),
  };
  NewMailDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewMailDBInfo_descriptor_,
      NewMailDBInfo::default_instance_,
      NewMailDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewMailDBInfo));
  MailDBOperateInfo_descriptor_ = file->message_type(72);
  static const int MailDBOperateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, mid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, result_),
  };
  MailDBOperateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailDBOperateInfo_descriptor_,
      MailDBOperateInfo::default_instance_,
      MailDBOperateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailDBOperateInfo));
  SaveMailDBReq_descriptor_ = file->message_type(73);
  static const int SaveMailDBReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, notify_),
  };
  SaveMailDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveMailDBReq_descriptor_,
      SaveMailDBReq::default_instance_,
      SaveMailDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveMailDBReq));
  SaveMailDBRsp_descriptor_ = file->message_type(74);
  static const int SaveMailDBRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, notify_),
  };
  SaveMailDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveMailDBRsp_descriptor_,
      SaveMailDBRsp::default_instance_,
      SaveMailDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveMailDBRsp));
  CharacterMailDBRequest_descriptor_ = file->message_type(75);
  static const int CharacterMailDBRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, zone_mail_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, reqid_),
  };
  CharacterMailDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMailDBRequest_descriptor_,
      CharacterMailDBRequest::default_instance_,
      CharacterMailDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMailDBRequest));
  CharacterMailDBResponse_descriptor_ = file->message_type(76);
  static const int CharacterMailDBResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, zonemailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, reqid_),
  };
  CharacterMailDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMailDBResponse_descriptor_,
      CharacterMailDBResponse::default_instance_,
      CharacterMailDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMailDBResponse));
  MaxMailIDRequest_descriptor_ = file->message_type(77);
  static const int MaxMailIDRequest_offsets_[1] = {
  };
  MaxMailIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxMailIDRequest_descriptor_,
      MaxMailIDRequest::default_instance_,
      MaxMailIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxMailIDRequest));
  MaxMailIDResponse_descriptor_ = file->message_type(78);
  static const int MaxMailIDResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, maxzonemailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, maxmailid_),
  };
  MaxMailIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxMailIDResponse_descriptor_,
      MaxMailIDResponse::default_instance_,
      MaxMailIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxMailIDResponse));
  DeleteCharacterMail_descriptor_ = file->message_type(79);
  static const int DeleteCharacterMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, charid_),
  };
  DeleteCharacterMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCharacterMail_descriptor_,
      DeleteCharacterMail::default_instance_,
      DeleteCharacterMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCharacterMail));
  ZoneMailSaveRsp_descriptor_ = file->message_type(80);
  static const int ZoneMailSaveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailSaveRsp, mailid_),
  };
  ZoneMailSaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneMailSaveRsp_descriptor_,
      ZoneMailSaveRsp::default_instance_,
      ZoneMailSaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailSaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailSaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneMailSaveRsp));
  ZoneMailTransCharacterMailReq_descriptor_ = file->message_type(81);
  static const int ZoneMailTransCharacterMailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, cid_),
  };
  ZoneMailTransCharacterMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneMailTransCharacterMailReq_descriptor_,
      ZoneMailTransCharacterMailReq::default_instance_,
      ZoneMailTransCharacterMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneMailTransCharacterMailReq));
  ZoneMailTransCharacterMailRsp_descriptor_ = file->message_type(82);
  static const int ZoneMailTransCharacterMailRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, data_),
  };
  ZoneMailTransCharacterMailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneMailTransCharacterMailRsp_descriptor_,
      ZoneMailTransCharacterMailRsp::default_instance_,
      ZoneMailTransCharacterMailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneMailTransCharacterMailRsp));
  WebMailDBDataReq_descriptor_ = file->message_type(83);
  static const int WebMailDBDataReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, pernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, id_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, webid_),
  };
  WebMailDBDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailDBDataReq_descriptor_,
      WebMailDBDataReq::default_instance_,
      WebMailDBDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailDBDataReq));
  WebMailDBDataRsp_descriptor_ = file->message_type(84);
  static const int WebMailDBDataRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, id_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, webid_),
  };
  WebMailDBDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailDBDataRsp_descriptor_,
      WebMailDBDataRsp::default_instance_,
      WebMailDBDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailDBDataRsp));
  FriendDBInfo_descriptor_ = file->message_type(85);
  static const int FriendDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, data_),
  };
  FriendDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBInfo_descriptor_,
      FriendDBInfo::default_instance_,
      FriendDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBInfo));
  FriendDBRequest_descriptor_ = file->message_type(86);
  static const int FriendDBRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, dstid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, query_times_),
  };
  FriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBRequest_descriptor_,
      FriendDBRequest::default_instance_,
      FriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBRequest));
  FriendDBResponse_descriptor_ = file->message_type(87);
  static const int FriendDBResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, last_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, query_times_),
  };
  FriendDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBResponse_descriptor_,
      FriendDBResponse::default_instance_,
      FriendDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBResponse));
  AllFriendDBRequest_descriptor_ = file->message_type(88);
  static const int AllFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, offset_),
  };
  AllFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFriendDBRequest_descriptor_,
      AllFriendDBRequest::default_instance_,
      AllFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFriendDBRequest));
  AllFriendDBResponse_descriptor_ = file->message_type(89);
  static const int AllFriendDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, info_),
  };
  AllFriendDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFriendDBResponse_descriptor_,
      AllFriendDBResponse::default_instance_,
      AllFriendDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFriendDBResponse));
  SaveFriendDBRequest_descriptor_ = file->message_type(90);
  static const int SaveFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, info_),
  };
  SaveFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveFriendDBRequest_descriptor_,
      SaveFriendDBRequest::default_instance_,
      SaveFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveFriendDBRequest));
  DelteFriendDBRequest_descriptor_ = file->message_type(91);
  static const int DelteFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelteFriendDBRequest, charid_),
  };
  DelteFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelteFriendDBRequest_descriptor_,
      DelteFriendDBRequest::default_instance_,
      DelteFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelteFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelteFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelteFriendDBRequest));
  GlobalDBRequst_descriptor_ = file->message_type(92);
  static const int GlobalDBRequst_offsets_[1] = {
  };
  GlobalDBRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBRequst_descriptor_,
      GlobalDBRequst::default_instance_,
      GlobalDBRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBRequst));
  GlobalDBEntry_descriptor_ = file->message_type(93);
  static const int GlobalDBEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, data_),
  };
  GlobalDBEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBEntry_descriptor_,
      GlobalDBEntry::default_instance_,
      GlobalDBEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBEntry));
  GlobalDBResponse_descriptor_ = file->message_type(94);
  static const int GlobalDBResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, isfinish_),
  };
  GlobalDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBResponse_descriptor_,
      GlobalDBResponse::default_instance_,
      GlobalDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBResponse));
  GlobalDBSetRequest_descriptor_ = file->message_type(95);
  static const int GlobalDBSetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, data_),
  };
  GlobalDBSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBSetRequest_descriptor_,
      GlobalDBSetRequest::default_instance_,
      GlobalDBSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBSetRequest));
  GlobalDBSetResponse_descriptor_ = file->message_type(96);
  static const int GlobalDBSetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, type_id_),
  };
  GlobalDBSetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBSetResponse_descriptor_,
      GlobalDBSetResponse::default_instance_,
      GlobalDBSetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBSetResponse));
  GlobalComData_descriptor_ = file->message_type(97);
  static const int GlobalComData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalComData, towerdupreward_),
  };
  GlobalComData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalComData_descriptor_,
      GlobalComData::default_instance_,
      GlobalComData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalComData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalComData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalComData));
  ActDBProto_descriptor_ = file->message_type(98);
  static const int ActDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, finishtime_),
  };
  ActDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActDBProto_descriptor_,
      ActDBProto::default_instance_,
      ActDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActDBProto));
  ActDBReq_descriptor_ = file->message_type(99);
  static const int ActDBReq_offsets_[1] = {
  };
  ActDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActDBReq_descriptor_,
      ActDBReq::default_instance_,
      ActDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActDBReq));
  ActDBRsp_descriptor_ = file->message_type(100);
  static const int ActDBRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBRsp, lst_),
  };
  ActDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActDBRsp_descriptor_,
      ActDBRsp::default_instance_,
      ActDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActDBRsp));
  ActSaveDBReq_descriptor_ = file->message_type(101);
  static const int ActSaveDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActSaveDBReq, lst_),
  };
  ActSaveDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActSaveDBReq_descriptor_,
      ActSaveDBReq::default_instance_,
      ActSaveDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActSaveDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActSaveDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActSaveDBReq));
  AllArenaDBRequest_descriptor_ = file->message_type(102);
  static const int AllArenaDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, retnum_),
  };
  AllArenaDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllArenaDBRequest_descriptor_,
      AllArenaDBRequest::default_instance_,
      AllArenaDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllArenaDBRequest));
  ArenaDBInfo_descriptor_ = file->message_type(103);
  static const int ArenaDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, rankid_),
  };
  ArenaDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaDBInfo_descriptor_,
      ArenaDBInfo::default_instance_,
      ArenaDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaDBInfo));
  ArenaMoreDBInfo_descriptor_ = file->message_type(104);
  static const int ArenaMoreDBInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, givereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, max_rank_),
  };
  ArenaMoreDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaMoreDBInfo_descriptor_,
      ArenaMoreDBInfo::default_instance_,
      ArenaMoreDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaMoreDBInfo));
  AllArenaDBResponse_descriptor_ = file->message_type(105);
  static const int AllArenaDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, info_),
  };
  AllArenaDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllArenaDBResponse_descriptor_,
      AllArenaDBResponse::default_instance_,
      AllArenaDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllArenaDBResponse));
  SaveArenaDBRequest_descriptor_ = file->message_type(106);
  static const int SaveArenaDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveArenaDBRequest, info_),
  };
  SaveArenaDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveArenaDBRequest_descriptor_,
      SaveArenaDBRequest::default_instance_,
      SaveArenaDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveArenaDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveArenaDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveArenaDBRequest));
  DeleteArenaDBRequest_descriptor_ = file->message_type(107);
  static const int DeleteArenaDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteArenaDBRequest, charid_),
  };
  DeleteArenaDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteArenaDBRequest_descriptor_,
      DeleteArenaDBRequest::default_instance_,
      DeleteArenaDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteArenaDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteArenaDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteArenaDBRequest));
  RoleMirrorDBReq_descriptor_ = file->message_type(108);
  static const int RoleMirrorDBReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, reqtype_),
  };
  RoleMirrorDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMirrorDBReq_descriptor_,
      RoleMirrorDBReq::default_instance_,
      RoleMirrorDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMirrorDBReq));
  RoleMirrorDBRsp_descriptor_ = file->message_type(109);
  static const int RoleMirrorDBRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, data_),
  };
  RoleMirrorDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMirrorDBRsp_descriptor_,
      RoleMirrorDBRsp::default_instance_,
      RoleMirrorDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMirrorDBRsp));
  FactionDataDBReq_descriptor_ = file->message_type(110);
  static const int FactionDataDBReq_offsets_[1] = {
  };
  FactionDataDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDataDBReq_descriptor_,
      FactionDataDBReq::default_instance_,
      FactionDataDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDataDBReq));
  FactionDataDBRsp_descriptor_ = file->message_type(111);
  static const int FactionDataDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, data_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, finish_),
  };
  FactionDataDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDataDBRsp_descriptor_,
      FactionDataDBRsp::default_instance_,
      FactionDataDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDataDBRsp));
  FactionSaveDBReq_descriptor_ = file->message_type(112);
  static const int FactionSaveDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSaveDBReq, data_),
  };
  FactionSaveDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSaveDBReq_descriptor_,
      FactionSaveDBReq::default_instance_,
      FactionSaveDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSaveDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSaveDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSaveDBReq));
  FactionDelDBReq_descriptor_ = file->message_type(113);
  static const int FactionDelDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDelDBReq, faction_id_),
  };
  FactionDelDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDelDBReq_descriptor_,
      FactionDelDBReq::default_instance_,
      FactionDelDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDelDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDelDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDelDBReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleReliveProto_descriptor_, &RoleReliveProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBBaseData_descriptor_, &RoleDBBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItemsDBData_descriptor_, &BagItemsDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagDBSimpleData_descriptor_, &BagDBSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBUnitBagData_descriptor_, &RoleDBUnitBagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBBagData_descriptor_, &RoleDBBagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBEquipData_descriptor_, &RoleDBEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBTaskData_descriptor_, &RoleDBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartEntryDBInfo_descriptor_, &GrowPartEntryDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartDBData_descriptor_, &GrowPartDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowDBData_descriptor_, &GrowDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayUseItemData_descriptor_, &DayUseItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterArenaData_descriptor_, &CharacterArenaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiniDBData_descriptor_, &MiniDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeDataInfo_descriptor_, &FacadeDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountDataInfo_descriptor_, &MountDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityDataInfo_descriptor_, &DeityDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeDBData_descriptor_, &FacadeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBInfo_descriptor_, &SkillDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBPos_descriptor_, &SkillDBPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBAdvPos_descriptor_, &SkillDBAdvPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBAdvInfo_descriptor_, &SkillDBAdvInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBGroup_descriptor_, &SkillDBGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillCdDB_descriptor_, &PetSkillCdDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBData_descriptor_, &SkillDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsActivityData_descriptor_, &GodRelicsActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiniActivityDBData_descriptor_, &MiniActivityDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupRecord_descriptor_, &DupRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupGroupData_descriptor_, &DupGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerDBRecordEntry_descriptor_, &DupTowerDBRecordEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerDBRecord_descriptor_, &DupTowerDBRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerDBData_descriptor_, &DupTowerDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupDBData_descriptor_, &DupDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBInfo_descriptor_, &BuffDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBCdInfo_descriptor_, &BuffDBCdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBData_descriptor_, &BuffDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossSimpleInfoDB_descriptor_, &BossSimpleInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDBData_descriptor_, &BossDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipDBData_descriptor_, &VipDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrDBData_descriptor_, &AttrDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDBRecord_descriptor_, &PetDBRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDBData_descriptor_, &PetDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallDBInfo_descriptor_, &MallDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallDBData_descriptor_, &MallDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvoyData_descriptor_, &ConvoyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmorDBData_descriptor_, &ArmorDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistDBData_descriptor_, &AssistDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBData_descriptor_, &RoleDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMirrorData_descriptor_, &RoleMirrorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemDBProto_descriptor_, &FactionMemDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMultMemDBProto_descriptor_, &FactionMultMemDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionApplyDBProto_descriptor_, &FactionApplyDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMultApplyDBProto_descriptor_, &FactionMultApplyDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRecordDBProto_descriptor_, &FactionRecordDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMutRecordDBProto_descriptor_, &FactionMutRecordDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBBase_descriptor_, &FactionDBBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBData_descriptor_, &FactionDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionAllDBData_descriptor_, &FactionAllDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListDBReq_descriptor_, &RoleListDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListDBRsp_descriptor_, &RoleListDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoleDBReq_descriptor_, &CreateRoleDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoleDBRsp_descriptor_, &CreateRoleDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfoDBReq_descriptor_, &RoleInfoDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfoDBRsp_descriptor_, &RoleInfoDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfoUpdateDBReq_descriptor_, &RoleInfoUpdateDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleChgNameDBReq_descriptor_, &RoleChgNameDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleChgNameDBRsp_descriptor_, &RoleChgNameDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSimpleListDBReq_descriptor_, &RoleSimpleListDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSimpleListDBRsp_descriptor_, &RoleSimpleListDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureTransLogicDBReq_descriptor_, &CreatureTransLogicDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureTransLogicDBRsp_descriptor_, &CreatureTransLogicDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewMailDBInfo_descriptor_, &NewMailDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailDBOperateInfo_descriptor_, &MailDBOperateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveMailDBReq_descriptor_, &SaveMailDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveMailDBRsp_descriptor_, &SaveMailDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMailDBRequest_descriptor_, &CharacterMailDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMailDBResponse_descriptor_, &CharacterMailDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxMailIDRequest_descriptor_, &MaxMailIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxMailIDResponse_descriptor_, &MaxMailIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCharacterMail_descriptor_, &DeleteCharacterMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneMailSaveRsp_descriptor_, &ZoneMailSaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneMailTransCharacterMailReq_descriptor_, &ZoneMailTransCharacterMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneMailTransCharacterMailRsp_descriptor_, &ZoneMailTransCharacterMailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailDBDataReq_descriptor_, &WebMailDBDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailDBDataRsp_descriptor_, &WebMailDBDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBInfo_descriptor_, &FriendDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBRequest_descriptor_, &FriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBResponse_descriptor_, &FriendDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFriendDBRequest_descriptor_, &AllFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFriendDBResponse_descriptor_, &AllFriendDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveFriendDBRequest_descriptor_, &SaveFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelteFriendDBRequest_descriptor_, &DelteFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBRequst_descriptor_, &GlobalDBRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBEntry_descriptor_, &GlobalDBEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBResponse_descriptor_, &GlobalDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBSetRequest_descriptor_, &GlobalDBSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBSetResponse_descriptor_, &GlobalDBSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalComData_descriptor_, &GlobalComData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActDBProto_descriptor_, &ActDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActDBReq_descriptor_, &ActDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActDBRsp_descriptor_, &ActDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActSaveDBReq_descriptor_, &ActSaveDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllArenaDBRequest_descriptor_, &AllArenaDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaDBInfo_descriptor_, &ArenaDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaMoreDBInfo_descriptor_, &ArenaMoreDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllArenaDBResponse_descriptor_, &AllArenaDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveArenaDBRequest_descriptor_, &SaveArenaDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteArenaDBRequest_descriptor_, &DeleteArenaDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMirrorDBReq_descriptor_, &RoleMirrorDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMirrorDBRsp_descriptor_, &RoleMirrorDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDataDBReq_descriptor_, &FactionDataDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDataDBRsp_descriptor_, &FactionDataDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSaveDBReq_descriptor_, &FactionSaveDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDelDBReq_descriptor_, &FactionDelDBReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBProto_2eproto() {
  delete RoleReliveProto::default_instance_;
  delete RoleReliveProto_reflection_;
  delete RoleDBBaseData::default_instance_;
  delete RoleDBBaseData_reflection_;
  delete BagItemsDBData::default_instance_;
  delete BagItemsDBData_reflection_;
  delete BagDBSimpleData::default_instance_;
  delete BagDBSimpleData_reflection_;
  delete RoleDBUnitBagData::default_instance_;
  delete RoleDBUnitBagData_reflection_;
  delete RoleDBBagData::default_instance_;
  delete RoleDBBagData_reflection_;
  delete RoleDBEquipData::default_instance_;
  delete RoleDBEquipData_reflection_;
  delete RoleDBTaskData::default_instance_;
  delete RoleDBTaskData_reflection_;
  delete GrowPartEntryDBInfo::default_instance_;
  delete GrowPartEntryDBInfo_reflection_;
  delete GrowPartDBData::default_instance_;
  delete GrowPartDBData_reflection_;
  delete GrowDBData::default_instance_;
  delete GrowDBData_reflection_;
  delete DayUseItemData::default_instance_;
  delete DayUseItemData_reflection_;
  delete CharacterArenaData::default_instance_;
  delete CharacterArenaData_reflection_;
  delete MiniDBData::default_instance_;
  delete MiniDBData_reflection_;
  delete FacadeDataInfo::default_instance_;
  delete FacadeDataInfo_reflection_;
  delete MountDataInfo::default_instance_;
  delete MountDataInfo_reflection_;
  delete DeityDataInfo::default_instance_;
  delete DeityDataInfo_reflection_;
  delete FacadeDBData::default_instance_;
  delete FacadeDBData_reflection_;
  delete SkillDBInfo::default_instance_;
  delete SkillDBInfo_reflection_;
  delete SkillDBPos::default_instance_;
  delete SkillDBPos_reflection_;
  delete SkillDBAdvPos::default_instance_;
  delete SkillDBAdvPos_reflection_;
  delete SkillDBAdvInfo::default_instance_;
  delete SkillDBAdvInfo_reflection_;
  delete SkillDBGroup::default_instance_;
  delete SkillDBGroup_reflection_;
  delete PetSkillCdDB::default_instance_;
  delete PetSkillCdDB_reflection_;
  delete SkillDBData::default_instance_;
  delete SkillDBData_reflection_;
  delete GodRelicsActivityData::default_instance_;
  delete GodRelicsActivityData_reflection_;
  delete MiniActivityDBData::default_instance_;
  delete MiniActivityDBData_reflection_;
  delete DupRecord::default_instance_;
  delete DupRecord_reflection_;
  delete DupGroupData::default_instance_;
  delete DupGroupData_reflection_;
  delete DupTowerDBRecordEntry::default_instance_;
  delete DupTowerDBRecordEntry_reflection_;
  delete DupTowerDBRecord::default_instance_;
  delete DupTowerDBRecord_reflection_;
  delete DupTowerDBData::default_instance_;
  delete DupTowerDBData_reflection_;
  delete DupDBData::default_instance_;
  delete DupDBData_reflection_;
  delete BuffDBInfo::default_instance_;
  delete BuffDBInfo_reflection_;
  delete BuffDBCdInfo::default_instance_;
  delete BuffDBCdInfo_reflection_;
  delete BuffDBData::default_instance_;
  delete BuffDBData_reflection_;
  delete BossSimpleInfoDB::default_instance_;
  delete BossSimpleInfoDB_reflection_;
  delete BossDBData::default_instance_;
  delete BossDBData_reflection_;
  delete VipDBData::default_instance_;
  delete VipDBData_reflection_;
  delete AttrDBData::default_instance_;
  delete AttrDBData_reflection_;
  delete PetDBRecord::default_instance_;
  delete PetDBRecord_reflection_;
  delete PetDBData::default_instance_;
  delete PetDBData_reflection_;
  delete MallDBInfo::default_instance_;
  delete MallDBInfo_reflection_;
  delete MallDBData::default_instance_;
  delete MallDBData_reflection_;
  delete ConvoyData::default_instance_;
  delete ConvoyData_reflection_;
  delete ArmorDBData::default_instance_;
  delete ArmorDBData_reflection_;
  delete AssistDBData::default_instance_;
  delete AssistDBData_reflection_;
  delete RoleDBData::default_instance_;
  delete RoleDBData_reflection_;
  delete RoleMirrorData::default_instance_;
  delete RoleMirrorData_reflection_;
  delete FactionMemDBProto::default_instance_;
  delete FactionMemDBProto_reflection_;
  delete FactionMultMemDBProto::default_instance_;
  delete FactionMultMemDBProto_reflection_;
  delete FactionApplyDBProto::default_instance_;
  delete FactionApplyDBProto_reflection_;
  delete FactionMultApplyDBProto::default_instance_;
  delete FactionMultApplyDBProto_reflection_;
  delete FactionRecordDBProto::default_instance_;
  delete FactionRecordDBProto_reflection_;
  delete FactionMutRecordDBProto::default_instance_;
  delete FactionMutRecordDBProto_reflection_;
  delete FactionDBBase::default_instance_;
  delete FactionDBBase_reflection_;
  delete FactionDBData::default_instance_;
  delete FactionDBData_reflection_;
  delete FactionAllDBData::default_instance_;
  delete FactionAllDBData_reflection_;
  delete RoleListDBReq::default_instance_;
  delete RoleListDBReq_reflection_;
  delete RoleListDBRsp::default_instance_;
  delete RoleListDBRsp_reflection_;
  delete CreateRoleDBReq::default_instance_;
  delete CreateRoleDBReq_reflection_;
  delete CreateRoleDBRsp::default_instance_;
  delete CreateRoleDBRsp_reflection_;
  delete RoleInfoDBReq::default_instance_;
  delete RoleInfoDBReq_reflection_;
  delete RoleInfoDBRsp::default_instance_;
  delete RoleInfoDBRsp_reflection_;
  delete RoleInfoUpdateDBReq::default_instance_;
  delete RoleInfoUpdateDBReq_reflection_;
  delete RoleChgNameDBReq::default_instance_;
  delete RoleChgNameDBReq_reflection_;
  delete RoleChgNameDBRsp::default_instance_;
  delete RoleChgNameDBRsp_reflection_;
  delete RoleSimpleListDBReq::default_instance_;
  delete RoleSimpleListDBReq_reflection_;
  delete RoleSimpleListDBRsp::default_instance_;
  delete RoleSimpleListDBRsp_reflection_;
  delete CreatureTransLogicDBReq::default_instance_;
  delete CreatureTransLogicDBReq_reflection_;
  delete CreatureTransLogicDBRsp::default_instance_;
  delete CreatureTransLogicDBRsp_reflection_;
  delete NewMailDBInfo::default_instance_;
  delete NewMailDBInfo_reflection_;
  delete MailDBOperateInfo::default_instance_;
  delete MailDBOperateInfo_reflection_;
  delete SaveMailDBReq::default_instance_;
  delete SaveMailDBReq_reflection_;
  delete SaveMailDBRsp::default_instance_;
  delete SaveMailDBRsp_reflection_;
  delete CharacterMailDBRequest::default_instance_;
  delete CharacterMailDBRequest_reflection_;
  delete CharacterMailDBResponse::default_instance_;
  delete CharacterMailDBResponse_reflection_;
  delete MaxMailIDRequest::default_instance_;
  delete MaxMailIDRequest_reflection_;
  delete MaxMailIDResponse::default_instance_;
  delete MaxMailIDResponse_reflection_;
  delete DeleteCharacterMail::default_instance_;
  delete DeleteCharacterMail_reflection_;
  delete ZoneMailSaveRsp::default_instance_;
  delete ZoneMailSaveRsp_reflection_;
  delete ZoneMailTransCharacterMailReq::default_instance_;
  delete ZoneMailTransCharacterMailReq_reflection_;
  delete ZoneMailTransCharacterMailRsp::default_instance_;
  delete ZoneMailTransCharacterMailRsp_reflection_;
  delete WebMailDBDataReq::default_instance_;
  delete WebMailDBDataReq_reflection_;
  delete WebMailDBDataRsp::default_instance_;
  delete WebMailDBDataRsp_reflection_;
  delete FriendDBInfo::default_instance_;
  delete FriendDBInfo_reflection_;
  delete FriendDBRequest::default_instance_;
  delete FriendDBRequest_reflection_;
  delete FriendDBResponse::default_instance_;
  delete FriendDBResponse_reflection_;
  delete AllFriendDBRequest::default_instance_;
  delete AllFriendDBRequest_reflection_;
  delete AllFriendDBResponse::default_instance_;
  delete AllFriendDBResponse_reflection_;
  delete SaveFriendDBRequest::default_instance_;
  delete SaveFriendDBRequest_reflection_;
  delete DelteFriendDBRequest::default_instance_;
  delete DelteFriendDBRequest_reflection_;
  delete GlobalDBRequst::default_instance_;
  delete GlobalDBRequst_reflection_;
  delete GlobalDBEntry::default_instance_;
  delete GlobalDBEntry_reflection_;
  delete GlobalDBResponse::default_instance_;
  delete GlobalDBResponse_reflection_;
  delete GlobalDBSetRequest::default_instance_;
  delete GlobalDBSetRequest_reflection_;
  delete GlobalDBSetResponse::default_instance_;
  delete GlobalDBSetResponse_reflection_;
  delete GlobalComData::default_instance_;
  delete GlobalComData_reflection_;
  delete ActDBProto::default_instance_;
  delete ActDBProto_reflection_;
  delete ActDBReq::default_instance_;
  delete ActDBReq_reflection_;
  delete ActDBRsp::default_instance_;
  delete ActDBRsp_reflection_;
  delete ActSaveDBReq::default_instance_;
  delete ActSaveDBReq_reflection_;
  delete AllArenaDBRequest::default_instance_;
  delete AllArenaDBRequest_reflection_;
  delete ArenaDBInfo::default_instance_;
  delete ArenaDBInfo_reflection_;
  delete ArenaMoreDBInfo::default_instance_;
  delete ArenaMoreDBInfo_reflection_;
  delete AllArenaDBResponse::default_instance_;
  delete AllArenaDBResponse_reflection_;
  delete SaveArenaDBRequest::default_instance_;
  delete SaveArenaDBRequest_reflection_;
  delete DeleteArenaDBRequest::default_instance_;
  delete DeleteArenaDBRequest_reflection_;
  delete RoleMirrorDBReq::default_instance_;
  delete RoleMirrorDBReq_reflection_;
  delete RoleMirrorDBRsp::default_instance_;
  delete RoleMirrorDBRsp_reflection_;
  delete FactionDataDBReq::default_instance_;
  delete FactionDataDBReq_reflection_;
  delete FactionDataDBRsp::default_instance_;
  delete FactionDataDBRsp_reflection_;
  delete FactionSaveDBReq::default_instance_;
  delete FactionSaveDBReq_reflection_;
  delete FactionDelDBReq::default_instance_;
  delete FactionDelDBReq_reflection_;
}

void protobuf_AddDesc_DBProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rDBProto.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\tCom.proto\032\017ComDefine.proto\"r\n\017"
    "RoleReliveProto\022\022\n\ntired_time\030\001 \001(\004\022\022\n\nr"
    "elive_num\030\002 \001(\005\022\020\n\010is_tired\030\003 \001(\005\022\r\n\005map"
    "id\030\004 \001(\004\022\026\n\016map_relive_num\030\005 \001(\005\"\333\004\n\016Rol"
    "eDBBaseData\022\014\n\004name\030\001 \002(\t\022\014\n\004prof\030\002 \002(\r\022"
    "\r\n\005level\030\003 \002(\r\022\013\n\003exp\030\004 \002(\003\022\n\n\002hp\030\005 \002(\003\022"
    "\r\n\005fight\030\006 \002(\003\022\022\n\ncreateTime\030\007 \002(\004\022\021\n\tlo"
    "ginTime\030\010 \002(\004\022\022\n\nlogoutTime\030\t \002(\004\022\026\n\016ent"
    "er_scene_id\030\n \002(\004\022\024\n\014enter_map_id\030\013 \002(\004\022"
    "\021\n\tenterposx\030\014 \002(\002\022\021\n\tenterposy\030\r \002(\002\022\021\n"
    "\tenterposz\030\016 \002(\002\022\023\n\013lastsceneid\030\017 \001(\004\022\021\n"
    "\tlastmapid\030\020 \001(\004\022\020\n\010lastposx\030\021 \001(\002\022\020\n\010la"
    "stposy\030\022 \001(\002\022\020\n\010lastposz\030\023 \001(\002\022)\n\006facade"
    "\030\024 \001(\0132\031.proto_ff.RoleFacadeProto\022\021\n\tvip"
    "_level\030\025 \001(\r\022\r\n\005state\030\026 \001(\005\022\022\n\nhanguptim"
    "e\030\027 \001(\004\022)\n\006relive\030\030 \001(\0132\031.proto_ff.RoleR"
    "eliveProto\022\014\n\004gold\030\031 \001(\003\022\013\n\003dia\030\032 \001(\003\022\014\n"
    "\004bdia\030\033 \001(\003\022\r\n\005magic\030\034 \001(\003\022\020\n\010prestige\030\035"
    " \001(\003\022\r\n\005vipLv\030\036 \001(\005\022\021\n\tarenacoin\030\037 \001(\003\"G"
    "\n\016BagItemsDBData\022%\n\004data\030\001 \003(\0132\027.proto_f"
    "f.ItemProtoInfo\022\016\n\006offset\030\002 \001(\005\";\n\017BagDB"
    "SimpleData\022\024\n\014package_type\030\001 \001(\r\022\022\n\nexpa"
    "nd_num\030\002 \001(\r\"{\n\021RoleDBUnitBagData\022\022\n\ntab"
    "le_name\030\001 \001(\t\022)\n\006simple\030\002 \001(\0132\031.proto_ff"
    ".BagDBSimpleData\022\'\n\005parts\030\003 \003(\0132\030.proto_"
    "ff.BagItemsDBData\":\n\rRoleDBBagData\022)\n\004ba"
    "gs\030\001 \003(\0132\033.proto_ff.RoleDBUnitBagData\"\211\001"
    "\n\017RoleDBEquipData\022\"\n\005infos\030\001 \003(\0132\023.proto"
    "_ff.EquipInfo\022*\n\007lv_attr\030\002 \003(\0132\031.proto_f"
    "f.EquipLvAttrInfo\022\023\n\013stove_level\030\003 \001(\r\022\021"
    "\n\tstove_exp\030\004 \001(\004\"\020\n\016RoleDBTaskData\"-\n\023G"
    "rowPartEntryDBInfo\022\n\n\002id\030\001 \001(\003\022\n\n\002lv\030\002 \001"
    "(\005\"\\\n\016GrowPartDBData\022\014\n\004type\030\001 \001(\005\022-\n\006en"
    "trys\030\002 \003(\0132\035.proto_ff.GrowPartEntryDBInf"
    "o\022\r\n\005curId\030\003 \001(\003\"5\n\nGrowDBData\022\'\n\005parts\030"
    "\001 \003(\0132\030.proto_ff.GrowPartDBData\"3\n\016DayUs"
    "eItemData\022!\n\004info\030\001 \003(\0132\023.proto_ff.ComPa"
    "ir64\"\203\002\n\022CharacterArenaData\022\026\n\016challenge"
    "Times\030\001 \001(\r\022\022\n\nupdateTime\030\002 \001(\004\022\034\n\rhisto"
    "ryRankId\030\003 \001(\r:\00520001\022\031\n\021buyChallengeTim"
    "es\030\004 \001(\r\022*\n\006result\030\005 \003(\0132\032.proto_ff.Aren"
    "aChallResult\0220\n\014chall_reward\030\007 \003(\0132\032.pro"
    "to_ff.ChallArenaReward\022\031\n\021allChallengeTi"
    "mes\030\010 \001(\005\022\017\n\007rank_id\030\t \001(\005\"{\n\nMiniDBData"
    "\022\020\n\010lastTime\030\001 \001(\004\022)\n\007useItem\030\002 \001(\0132\030.pr"
    "oto_ff.DayUseItemData\0220\n\narena_data\030\003 \001("
    "\0132\034.proto_ff.CharacterArenaData\"\347\002\n\016Faca"
    "deDataInfo\022\023\n\013facade_type\030\001 \001(\r\022\021\n\tfacad"
    "e_id\030\002 \001(\004\022\022\n\nfacade_lev\030\003 \001(\r\022\022\n\nfacade"
    "_exp\030\004 \001(\004\022\025\n\ruse_soul_item\030\005 \001(\010\022\022\n\nuse"
    "_facade\030\006 \001(\010\022\030\n\020equip_fantasy_id\030\007 \001(\004\022"
    "0\n\013fantasy_map\030\010 \003(\0132\033.proto_ff.FacadeFa"
    "ntasyData\0222\n\014fragment_map\030\t \003(\0132\034.proto_"
    "ff.FacadeFragmentData\022-\n\nskill_data\030\n \003("
    "\0132\031.proto_ff.FacadeSkillData\022+\n\tsoul_dat"
    "a\030\013 \001(\0132\030.proto_ff.FacadeSoulData\"\335\003\n\rMo"
    "untDataInfo\022\020\n\010mount_id\030\001 \001(\004\022\021\n\tmount_l"
    "ev\030\002 \001(\r\022\021\n\tmount_exp\030\003 \001(\004\022\022\n\nuse_facad"
    "e\030\004 \001(\010\022\030\n\020equip_fantasy_id\030\005 \001(\004\022/\n\013fan"
    "tasy_map\030\006 \003(\0132\032.proto_ff.MountFantasyDa"
    "ta\0221\n\014fragment_map\030\007 \003(\0132\033.proto_ff.Moun"
    "tFragmentData\022,\n\nskill_data\030\010 \003(\0132\030.prot"
    "o_ff.MountSkillData\022(\n\010kun_data\030\t \003(\0132\026."
    "proto_ff.MountKunData\022,\n\nblood_data\030\n \003("
    "\0132\030.proto_ff.MountBloodData\0223\n\016baby_slot"
    "_data\030\013 \003(\0132\033.proto_ff.MountBabySlotData"
    "\022\022\n\nride_state\030\014 \001(\r\022\026\n\016mount_model_id\030\r"
    " \001(\004\022\033\n\023last_mount_model_id\030\016 \001(\004\"\215\002\n\rDe"
    "ityDataInfo\022\020\n\010deity_id\030\001 \001(\004\022\021\n\tdeity_l"
    "ev\030\002 \001(\r\022\021\n\tdeity_exp\030\003 \001(\004\022/\n\013fantasy_m"
    "ap\030\004 \003(\0132\032.proto_ff.DeityFantasyData\0221\n\014"
    "fragment_map\030\005 \003(\0132\033.proto_ff.DeityFragm"
    "entData\022,\n\nskill_data\030\006 \003(\0132\030.proto_ff.D"
    "eitySkillData\0222\n\013battle_data\030\007 \003(\0132\035.pro"
    "to_ff.DeityBattleSlotData\"6\n\014FacadeDBDat"
    "a\022&\n\004data\030\001 \003(\0132\030.proto_ff.FacadeDataInf"
    "o\"O\n\013SkillDBInfo\022\020\n\010skill_id\030\001 \001(\004\022\r\n\005le"
    "vel\030\002 \001(\005\022\016\n\006wakeup\030\003 \001(\005\022\017\n\007use_msc\030\004 \001"
    "(\003\"8\n\nSkillDBPos\022\020\n\010skill_id\030\001 \001(\004\022\013\n\003po"
    "s\030\002 \001(\r\022\013\n\003use\030\003 \001(\005\"=\n\rSkillDBAdvPos\022\013\n"
    "\003pos\030\001 \001(\r\022\017\n\007advance\030\002 \001(\r\022\016\n\006unlock\030\003 "
    "\001(\r\"0\n\016SkillDBAdvInfo\022\017\n\007advance\030\001 \001(\005\022\r"
    "\n\005level\030\002 \001(\005\"Q\n\014SkillDBGroup\022\r\n\005group\030\001"
    " \001(\r\022\013\n\003chg\030\002 \001(\005\022%\n\007pos_lst\030\003 \003(\0132\024.pro"
    "to_ff.SkillDBPos\"F\n\014PetSkillCdDB\022\020\n\010skil"
    "l_id\030\001 \001(\004\022\020\n\010use_msec\030\002 \001(\004\022\022\n\npet_inst"
    "id\030\003 \001(\003\"\226\002\n\013SkillDBData\022\'\n\010info_lst\030\001 \003"
    "(\0132\025.proto_ff.SkillDBInfo\022)\n\tgroup_lst\030\002"
    " \003(\0132\026.proto_ff.SkillDBGroup\022\r\n\005group\030\003 "
    "\001(\r\022\022\n\nlast_group\030\004 \001(\004\022(\n\007adv_pos\030\005 \003(\013"
    "2\027.proto_ff.SkillDBAdvPos\022*\n\010adv_info\030\006 "
    "\003(\0132\030.proto_ff.SkillDBAdvInfo\022\022\n\ncur_adv"
    "pos\030\007 \001(\r\022&\n\006pet_cd\030\010 \003(\0132\026.proto_ff.Pet"
    "SkillCdDB\"d\n\025GodRelicsActivityData\0225\n\ngr"
    "oup_data\030\001 \003(\0132!.proto_ff.GodRelicsTaskG"
    "roupEntry\022\024\n\014cur_group_id\030\002 \001(\003\"~\n\022MiniA"
    "ctivityDBData\0228\n\017god_relics_data\030\001 \001(\0132\037"
    ".proto_ff.GodRelicsActivityData\022.\n\ndaily"
    "_data\030\002 \001(\0132\032.proto_ff.DailyTaskAllData\""
    "(\n\tDupRecord\022\r\n\005dupId\030\001 \001(\004\022\014\n\004star\030\002 \001("
    "\005\"b\n\014DupGroupData\022\r\n\005group\030\001 \001(\005\022\020\n\010ente"
    "rNum\030\002 \001(\005\022\016\n\006buyNum\030\003 \001(\005\022\016\n\006useNum\030\004 \001"
    "(\005\022\021\n\tlastFresh\030\005 \001(\004\"@\n\025DupTowerDBRecor"
    "dEntry\022\014\n\004name\030\001 \001(\t\022\014\n\004time\030\002 \001(\004\022\013\n\003ci"
    "d\030\003 \001(\004\"O\n\020DupTowerDBRecord\022\n\n\002id\030\001 \001(\004\022"
    "/\n\006entrys\030\002 \003(\0132\037.proto_ff.DupTowerDBRec"
    "ordEntry\"\035\n\016DupTowerDBData\022\013\n\003ids\030\001 \003(\004\""
    "\201\001\n\tDupDBData\022#\n\006record\030\001 \003(\0132\023.proto_ff"
    ".DupRecord\022&\n\006groups\030\002 \003(\0132\026.proto_ff.Du"
    "pGroupData\022\'\n\005tower\030\003 \001(\0132\030.proto_ff.Dup"
    "TowerDBData\"\313\001\n\nBuffDBInfo\022\016\n\006buffid\030\001 \001"
    "(\004\022\r\n\005index\030\002 \001(\004\022\017\n\007skillid\030\003 \001(\004\022\020\n\010sk"
    "illlev\030\004 \001(\r\022\022\n\nis_forever\030\005 \001(\010\022\021\n\tstar"
    "tmsec\030\006 \001(\003\022\021\n\tis_effect\030\007 \001(\010\022\016\n\006param1"
    "\030\010 \001(\003\022\016\n\006param2\030\t \001(\003\022\021\n\textramsec\030\n \001("
    "\003\022\016\n\006is_end\030\013 \001(\005\"0\n\014BuffDBCdInfo\022\016\n\006buf"
    "fid\030\001 \001(\004\022\020\n\010lastmsec\030\002 \001(\004\"\\\n\nBuffDBDat"
    "a\022&\n\010info_lst\030\001 \003(\0132\024.proto_ff.BuffDBInf"
    "o\022&\n\006cd_lst\030\002 \003(\0132\026.proto_ff.BuffDBCdInf"
    "o\"\207\001\n\020BossSimpleInfoDB\022\021\n\tboss_type\030\001 \001("
    "\005\022\017\n\007cur_num\030\002 \001(\005\022\020\n\010back_num\030\004 \001(\005\022\024\n\014"
    "back_max_num\030\005 \001(\005\022\021\n\tenter_num\030\006 \001(\005\022\024\n"
    "\014use_item_num\030\007 \001(\005\"Z\n\nBossDBData\022)\n\005inf"
    "os\030\001 \003(\0132\032.proto_ff.BossSimpleInfoDB\022\020\n\010"
    "lastTime\030\002 \001(\004\022\017\n\007attents\030\003 \003(\003\"/\n\tVipDB"
    "Data\022\016\n\006vipExp\030\001 \001(\005\022\022\n\nexpDiamond\030\002 \001(\005"
    "\"0\n\nAttrDBData\022\"\n\010attr_lst\030\001 \003(\0132\020.proto"
    "_ff.Attr64\"j\n\013PetDBRecord\022\016\n\006instId\030\001 \001("
    "\005\022%\n\010costItem\030\002 \003(\0132\023.proto_ff.ComPair64"
    "\022$\n\007costPet\030\003 \003(\0132\023.proto_ff.ComPair64\"\234"
    "\001\n\tPetDBData\022\016\n\006fetter\030\001 \003(\005\022\037\n\004pets\030\002 \003"
    "(\0132\021.proto_ff.PetInfo\022&\n\006hatchs\030\003 \003(\0132\026."
    "proto_ff.PetHatchInfo\022&\n\007records\030\004 \003(\0132\025"
    ".proto_ff.PetDBRecord\022\016\n\006cfgids\030\005 \003(\003\"3\n"
    "\nMallDBInfo\022\n\n\002id\030\001 \001(\003\022\013\n\003num\030\002 \001(\r\022\014\n\004"
    "time\030\003 \001(\004\"z\n\nMallDBData\022!\n\003day\030\001 \003(\0132\024."
    "proto_ff.MallDBInfo\022\"\n\004week\030\002 \003(\0132\024.prot"
    "o_ff.MallDBInfo\022%\n\007forever\030\003 \003(\0132\024.proto"
    "_ff.MallDBInfo\"x\n\nConvoyData\022\016\n\006daynum\030\001"
    " \001(\005\022\020\n\010escortid\030\002 \001(\005\022\017\n\007endTime\030\003 \001(\004\022"
    "\017\n\007freeNum\030\004 \001(\005\022\023\n\013genEscortId\030\005 \001(\005\022\021\n"
    "\tresetTime\030\006 \001(\004\"1\n\013ArmorDBData\022\"\n\005infos"
    "\030\001 \003(\0132\023.proto_ff.ArmorInfo\"\200\001\n\014AssistDB"
    "Data\022\021\n\tresetTime\030\001 \001(\004\022\023\n\013dayPrestige\030\002"
    " \001(\005\022\017\n\007sendNum\030\003 \001(\005\022\017\n\007helpNum\030\004 \001(\005\022\022"
    "\n\nallSendNum\030\005 \001(\005\022\022\n\nallHelpNum\030\006 \001(\005\"\241"
    "\007\n\nRoleDBData\022\021\n\003cid\030\001 \002(\004B\004\300\202\024\002\022\021\n\003zid\030"
    "\002 \002(\rB\004\300\202\024\003\022\021\n\003uid\030\003 \001(\rB\004\300\202\024\003\022&\n\004base\030\004"
    " \001(\0132\030.proto_ff.RoleDBBaseData\022$\n\003bag\030\005 "
    "\001(\0132\027.proto_ff.RoleDBBagData\022(\n\005equip\030\006 "
    "\001(\0132\031.proto_ff.RoleDBEquipData\022+\n\004task\030\007"
    " \001(\0132\035.proto_ff.CharacterDBTaskData\0220\n\nu"
    "nlockinfo\030\010 \001(\0132\034.proto_ff.FunctionUnloc"
    "kInfo\022\"\n\004grow\030\t \001(\0132\024.proto_ff.GrowDBDat"
    "a\022\"\n\004mini\030\n \001(\0132\024.proto_ff.MiniDBData\022&\n"
    "\006facade\030\013 \001(\0132\026.proto_ff.FacadeDBData\022$\n"
    "\005skill\030\014 \001(\0132\025.proto_ff.SkillDBData\0223\n\rm"
    "ini_activity\030\r \001(\0132\034.proto_ff.MiniActivi"
    "tyDBData\022 \n\003dup\030\016 \001(\0132\023.proto_ff.DupDBDa"
    "ta\022\"\n\004buff\030\017 \001(\0132\024.proto_ff.BuffDBData\022\""
    "\n\004boss\030\020 \001(\0132\024.proto_ff.BossDBData\022 \n\003vi"
    "p\030\021 \001(\0132\023.proto_ff.VipDBData\022\"\n\004attr\030\022 \001"
    "(\0132\024.proto_ff.AttrDBData\022&\n\005mount\030\023 \001(\0132"
    "\027.proto_ff.MountDataInfo\022&\n\005deity\030\024 \001(\0132"
    "\027.proto_ff.DeityDataInfo\022 \n\003pet\030\025 \001(\0132\023."
    "proto_ff.PetDBData\022\"\n\004mall\030\026 \001(\0132\024.proto"
    "_ff.MallDBData\022$\n\006convoy\030\027 \001(\0132\024.proto_f"
    "f.ConvoyData\022$\n\005armor\030\030 \001(\0132\025.proto_ff.A"
    "rmorDBData\022&\n\006assist\030\031 \001(\0132\026.proto_ff.As"
    "sistDBData\"\364\001\n\016RoleMirrorData\022\013\n\003cid\030\001 \001"
    "(\004\022\014\n\004type\030\002 \001(\005\022\016\n\006teamid\030\003 \001(\r\022\013\n\003zid\030"
    "\004 \001(\r\022\"\n\004attr\030\005 \001(\0132\024.proto_ff.AttrDBDat"
    "a\022$\n\005skill\030\006 \001(\0132\025.proto_ff.SkillDBData\022"
    "&\n\004base\030\007 \001(\0132\030.proto_ff.RoleDBBaseData\""
    "8\n\004Type\022\010\n\004Role\020\001\022\t\n\005Rebot\020\002\022\014\n\010TeamRole"
    "\020\003\022\r\n\tTeamRebot\020\004\"W\n\021FactionMemDBProto\022\013"
    "\n\003cid\030\001 \001(\004\022\014\n\004duty\030\002 \001(\005\022\021\n\tjoin_time\030\003"
    " \001(\004\022\024\n\014total_contri\030\004 \001(\r\"E\n\025FactionMul"
    "tMemDBProto\022,\n\007mem_lst\030\001 \003(\0132\033.proto_ff."
    "FactionMemDBProto\"0\n\023FactionApplyDBProto"
    "\022\013\n\003cid\030\001 \001(\004\022\014\n\004time\030\002 \001(\004\"K\n\027FactionMu"
    "ltApplyDBProto\0220\n\tapply_lst\030\001 \003(\0132\035.prot"
    "o_ff.FactionApplyDBProto\"M\n\024FactionRecor"
    "dDBProto\022\013\n\003cid\030\001 \001(\004\022\014\n\004time\030\002 \001(\004\022\n\n\002o"
    "p\030\003 \001(\005\022\016\n\006param1\030\004 \001(\003\"M\n\027FactionMutRec"
    "ordDBProto\0222\n\nrecord_lst\030\001 \003(\0132\036.proto_f"
    "f.FactionRecordDBProto\"\371\002\n\rFactionDBBase"
    "\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\021\n\tle"
    "ader_id\030\003 \001(\004\022\r\n\005fight\030\004 \001(\004\022\016\n\006notice\030\005"
    " \001(\014\022\030\n\020last_notice_time\030\006 \001(\004\022\r\n\005level\030"
    "\007 \001(\r\022\013\n\003exp\030\010 \001(\004\022\023\n\013create_time\030\t \001(\004\022"
    "\020\n\010proxy_id\030\n \001(\004\022\022\n\nproxy_time\030\013 \001(\004\022\r\n"
    "\005grade\030\014 \001(\005\022/\n\006member\030\r \001(\0132\037.proto_ff."
    "FactionMultMemDBProto\0220\n\005apply\030\016 \001(\0132!.p"
    "roto_ff.FactionMultApplyDBProto\0221\n\006recor"
    "d\030\017 \001(\0132!.proto_ff.FactionMutRecordDBPro"
    "to\"\017\n\rFactionDBData\"t\n\020FactionAllDBData\022"
    "\022\n\nfaction_id\030\001 \001(\r\022%\n\004base\030\002 \001(\0132\027.prot"
    "o_ff.FactionDBBase\022%\n\004data\030\003 \001(\0132\027.proto"
    "_ff.FactionDBData\"M\n\rRoleListDBReq\022\r\n\005re"
    "qid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\r\022\016\n\006gateid\030\003 \002(\r\022\020"
    "\n\010born_zid\030\004 \002(\r\"\205\001\n\rRoleListDBRsp\022\013\n\003re"
    "t\030\001 \002(\005\022\r\n\005reqid\030\002 \002(\004\022\013\n\003uid\030\003 \002(\r\022\016\n\006g"
    "ateid\030\004 \002(\r\022+\n\010role_lst\030\005 \003(\0132\031.proto_ff"
    ".RoleListDBProto\022\016\n\006regnum\030\006 \001(\r\"\246\001\n\017Cre"
    "ateRoleDBReq\022\r\n\005reqid\030\001 \002(\004\022\013\n\003zid\030\002 \002(\r"
    "\022\016\n\006gateid\030\003 \002(\r\022\"\n\004data\030\004 \002(\0132\024.proto_f"
    "f.RoleDBData\022\013\n\003uid\030\005 \001(\r\022\022\n\nchannel_id\030"
    "\006 \001(\r\022\020\n\010zone_mid\030\007 \001(\r\022\020\n\010born_zid\030\010 \001("
    "\r\"\260\001\n\017CreateRoleDBRsp\022\013\n\003ret\030\001 \002(\005\022\r\n\005re"
    "qid\030\002 \002(\004\022\013\n\003uid\030\003 \002(\r\022\016\n\006gateid\030\004 \002(\r\022\'"
    "\n\004info\030\005 \001(\0132\031.proto_ff.RoleListDBProto\022"
    "\020\n\010born_zid\030\006 \001(\r\022)\n\006simple\030\007 \001(\0132\031.prot"
    "o_ff.CenterRoleProto\";\n\rRoleInfoDBReq\022\r\n"
    "\005reqid\030\001 \002(\004\022\013\n\003cid\030\002 \002(\004\022\016\n\006change\030\003 \001("
    "\005\"l\n\rRoleInfoDBRsp\022\013\n\003ret\030\001 \002(\005\022\r\n\005reqid"
    "\030\002 \002(\004\022\013\n\003cid\030\003 \002(\004\022\016\n\006change\030\004 \001(\005\022\"\n\004i"
    "nfo\030\005 \001(\0132\024.proto_ff.RoleDBData\"S\n\023RoleI"
    "nfoUpdateDBReq\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\r"
    "\022\"\n\004info\030\003 \001(\0132\024.proto_ff.RoleDBData\"-\n\020"
    "RoleChgNameDBReq\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 "
    "\002(\t\":\n\020RoleChgNameDBRsp\022\013\n\003ret\030\001 \002(\005\022\013\n\003"
    "cid\030\002 \002(\004\022\014\n\004name\030\003 \002(\t\"\025\n\023RoleSimpleLis"
    "tDBReq\"`\n\023RoleSimpleListDBRsp\022\013\n\003ret\030\001 \002"
    "(\005\022\'\n\004info\030\002 \003(\0132\031.proto_ff.CenterRolePr"
    "oto\022\023\n\013finish_flag\030\003 \001(\005\"-\n\027CreatureTran"
    "sLogicDBReq\022\022\n\ntrans_data\030\001 \001(\t\"7\n\027Creat"
    "ureTransLogicDBRsp\022\017\n\007retcode\030\001 \002(\005\022\013\n\003c"
    "id\030\002 \001(\004\"A\n\rNewMailDBInfo\022 \n\004data\030\001 \003(\0132"
    "\022.proto_ff.MailInfo\022\016\n\006result\030\002 \001(\005\"4\n\021M"
    "ailDBOperateInfo\022\017\n\007mid_lst\030\001 \003(\r\022\016\n\006res"
    "ult\030\002 \001(\005\"\327\001\n\rSaveMailDBReq\022\016\n\006charid\030\001 "
    "\002(\004\022%\n\004info\030\002 \001(\0132\027.proto_ff.NewMailDBIn"
    "fo\022(\n\003del\030\003 \001(\0132\033.proto_ff.MailDBOperate"
    "Info\022*\n\005fetch\030\004 \001(\0132\033.proto_ff.MailDBOpe"
    "rateInfo\022)\n\004read\030\005 \001(\0132\033.proto_ff.MailDB"
    "OperateInfo\022\016\n\006notify\030\006 \001(\005\"\327\001\n\rSaveMail"
    "DBRsp\022\016\n\006charid\030\001 \002(\004\022%\n\004info\030\002 \001(\0132\027.pr"
    "oto_ff.NewMailDBInfo\022(\n\003del\030\003 \001(\0132\033.prot"
    "o_ff.MailDBOperateInfo\022*\n\005fetch\030\004 \001(\0132\033."
    "proto_ff.MailDBOperateInfo\022)\n\004read\030\005 \001(\013"
    "2\033.proto_ff.MailDBOperateInfo\022\016\n\006notify\030"
    "\006 \001(\005\"_\n\026CharacterMailDBRequest\022\016\n\006charI"
    "D\030\001 \001(\004\022\026\n\016zone_mail_flag\030\002 \001(\r\022\016\n\006offse"
    "t\030\003 \001(\005\022\r\n\005reqid\030\004 \001(\r\"~\n\027CharacterMailD"
    "BResponse\022\016\n\006charID\030\001 \001(\004\022 \n\004info\030\002 \003(\0132"
    "\022.proto_ff.MailInfo\022\022\n\nzoneMailId\030\003 \001(\r\022"
    "\016\n\006offset\030\004 \001(\005\022\r\n\005reqid\030\005 \001(\r\"\022\n\020MaxMai"
    "lIDRequest\"=\n\021MaxMailIDResponse\022\025\n\rmaxZo"
    "neMailId\030\001 \002(\r\022\021\n\tmaxMailId\030\002 \001(\r\"%\n\023Del"
    "eteCharacterMail\022\016\n\006charID\030\001 \002(\004\"!\n\017Zone"
    "MailSaveRsp\022\016\n\006mailId\030\001 \002(\r\"<\n\035ZoneMailT"
    "ransCharacterMailReq\022\016\n\006mailId\030\001 \002(\r\022\013\n\003"
    "cid\030\002 \002(\004\"N\n\035ZoneMailTransCharacterMailR"
    "sp\022\013\n\003cid\030\001 \002(\004\022 \n\004data\030\002 \003(\0132\022.proto_ff"
    ".MailInfo\"p\n\020WebMailDBDataReq\022\017\n\007op_type"
    "\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\016\n\006pernum\030\003 \001(\r\022\017\n\007c"
    "urpage\030\004 \001(\r\022\016\n\006id_lst\030\005 \003(\r\022\r\n\005webId\030\006 "
    "\002(\t\"\242\001\n\020WebMailDBDataRsp\022\017\n\007op_type\030\001 \001("
    "\005\022\013\n\003cid\030\002 \001(\004\022\017\n\007curpage\030\003 \001(\r\022\022\n\ntotal"
    "count\030\004 \001(\r\022\016\n\006id_lst\030\005 \003(\r\022,\n\010info_lst\030"
    "\006 \003(\0132\032.proto_ff.WebMailDataProto\022\r\n\005web"
    "Id\030\007 \002(\t\"F\n\014FriendDBInfo\022\016\n\006charID\030\001 \001(\004"
    "\022&\n\004data\030\002 \001(\0132\030.proto_ff.RelationDBInfo"
    "\"m\n\017FriendDBRequest\022\016\n\006charid\030\001 \001(\004\022\021\n\td"
    "stid_lst\030\002 \003(\004\022\024\n\014operate_type\030\003 \001(\r\022\014\n\004"
    "data\030\004 \001(\014\022\023\n\013query_times\030\005 \001(\r\"\250\001\n\020Frie"
    "ndDBResponse\022\017\n\007retcode\030\001 \001(\005\022\016\n\006charid\030"
    "\002 \001(\004\022\024\n\014operate_type\030\003 \001(\r\022(\n\010info_lst\030"
    "\004 \003(\0132\026.proto_ff.FriendDBInfo\022\020\n\010last_ls"
    "t\030\005 \003(\004\022\014\n\004data\030\006 \001(\014\022\023\n\013query_times\030\007 \001"
    "(\r\"$\n\022AllFriendDBRequest\022\016\n\006offset\030\001 \002(\005"
    "\"\\\n\023AllFriendDBResponse\022\017\n\007retcode\030\001 \002(\005"
    "\022\016\n\006offset\030\002 \002(\005\022$\n\004info\030\003 \003(\0132\026.proto_f"
    "f.FriendDBInfo\";\n\023SaveFriendDBRequest\022$\n"
    "\004info\030\001 \003(\0132\026.proto_ff.FriendDBInfo\"&\n\024D"
    "elteFriendDBRequest\022\016\n\006charId\030\001 \001(\004\"\020\n\016G"
    "lobalDBRequst\".\n\rGlobalDBEntry\022\017\n\007type_i"
    "d\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"L\n\020GlobalDBRespons"
    "e\022&\n\005entry\030\001 \003(\0132\027.proto_ff.GlobalDBEntr"
    "y\022\020\n\010isfinish\030\002 \001(\005\"3\n\022GlobalDBSetReques"
    "t\022\017\n\007type_id\030\001 \002(\005\022\014\n\004data\030\002 \001(\014\"7\n\023Glob"
    "alDBSetResponse\022\017\n\007retcode\030\001 \002(\005\022\017\n\007type"
    "_id\030\002 \002(\005\"C\n\rGlobalComData\0222\n\016towerDupRe"
    "ward\030\001 \003(\0132\032.proto_ff.DupTowerDBRecord\"<"
    "\n\nActDBProto\022\r\n\005actid\030\001 \001(\004\022\013\n\003zid\030\002 \001(\r"
    "\022\022\n\nfinishtime\030\003 \001(\004\"\n\n\010ActDBReq\"-\n\010ActD"
    "BRsp\022!\n\003lst\030\001 \003(\0132\024.proto_ff.ActDBProto\""
    "1\n\014ActSaveDBReq\022!\n\003lst\030\001 \003(\0132\024.proto_ff."
    "ActDBProto\"3\n\021AllArenaDBRequest\022\016\n\006offse"
    "t\030\001 \002(\005\022\016\n\006retnum\030\002 \002(\005\"-\n\013ArenaDBInfo\022\016"
    "\n\006charID\030\001 \001(\004\022\016\n\006rankId\030\002 \001(\r\"i\n\017ArenaM"
    "oreDBInfo\022#\n\004info\030\001 \003(\0132\025.proto_ff.Arena"
    "DBInfo\022\013\n\003day\030\002 \001(\r\022\022\n\ngiveReward\030\003 \001(\r\022"
    "\020\n\010max_rank\030\004 \001(\r\"Z\n\022AllArenaDBResponse\022"
    "\017\n\007retcode\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005\022#\n\004info"
    "\030\003 \003(\0132\025.proto_ff.ArenaDBInfo\"9\n\022SaveAre"
    "naDBRequest\022#\n\004info\030\001 \003(\0132\025.proto_ff.Are"
    "naDBInfo\"&\n\024DeleteArenaDBRequest\022\016\n\006char"
    "Id\030\001 \001(\004\"U\n\017RoleMirrorDBReq\022\013\n\003cid\030\001 \002(\004"
    "\022\021\n\tint_param\030\002 \002(\003\022\021\n\tstr_param\030\003 \002(\t\022\017"
    "\n\007reqtype\030\004 \002(\r\"\212\001\n\017RoleMirrorDBRsp\022\013\n\003r"
    "et\030\001 \002(\005\022\013\n\003cid\030\002 \002(\004\022\021\n\tint_param\030\003 \002(\003"
    "\022\021\n\tstr_param\030\004 \002(\t\022\017\n\007reqtype\030\005 \002(\r\022&\n\004"
    "data\030\006 \001(\0132\030.proto_ff.RoleMirrorData\"\022\n\020"
    "FactionDataDBReq\"P\n\020FactionDataDBRsp\022,\n\010"
    "data_lst\030\001 \003(\0132\032.proto_ff.FactionAllDBDa"
    "ta\022\016\n\006finish\030\002 \001(\005\"<\n\020FactionSaveDBReq\022("
    "\n\004data\030\001 \001(\0132\032.proto_ff.FactionAllDBData"
    "\"%\n\017FactionDelDBReq\022\022\n\nfaction_id\030\001 \001(\r", 12439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBProto.proto", &protobuf_RegisterTypes);
  RoleReliveProto::default_instance_ = new RoleReliveProto();
  RoleDBBaseData::default_instance_ = new RoleDBBaseData();
  BagItemsDBData::default_instance_ = new BagItemsDBData();
  BagDBSimpleData::default_instance_ = new BagDBSimpleData();
  RoleDBUnitBagData::default_instance_ = new RoleDBUnitBagData();
  RoleDBBagData::default_instance_ = new RoleDBBagData();
  RoleDBEquipData::default_instance_ = new RoleDBEquipData();
  RoleDBTaskData::default_instance_ = new RoleDBTaskData();
  GrowPartEntryDBInfo::default_instance_ = new GrowPartEntryDBInfo();
  GrowPartDBData::default_instance_ = new GrowPartDBData();
  GrowDBData::default_instance_ = new GrowDBData();
  DayUseItemData::default_instance_ = new DayUseItemData();
  CharacterArenaData::default_instance_ = new CharacterArenaData();
  MiniDBData::default_instance_ = new MiniDBData();
  FacadeDataInfo::default_instance_ = new FacadeDataInfo();
  MountDataInfo::default_instance_ = new MountDataInfo();
  DeityDataInfo::default_instance_ = new DeityDataInfo();
  FacadeDBData::default_instance_ = new FacadeDBData();
  SkillDBInfo::default_instance_ = new SkillDBInfo();
  SkillDBPos::default_instance_ = new SkillDBPos();
  SkillDBAdvPos::default_instance_ = new SkillDBAdvPos();
  SkillDBAdvInfo::default_instance_ = new SkillDBAdvInfo();
  SkillDBGroup::default_instance_ = new SkillDBGroup();
  PetSkillCdDB::default_instance_ = new PetSkillCdDB();
  SkillDBData::default_instance_ = new SkillDBData();
  GodRelicsActivityData::default_instance_ = new GodRelicsActivityData();
  MiniActivityDBData::default_instance_ = new MiniActivityDBData();
  DupRecord::default_instance_ = new DupRecord();
  DupGroupData::default_instance_ = new DupGroupData();
  DupTowerDBRecordEntry::default_instance_ = new DupTowerDBRecordEntry();
  DupTowerDBRecord::default_instance_ = new DupTowerDBRecord();
  DupTowerDBData::default_instance_ = new DupTowerDBData();
  DupDBData::default_instance_ = new DupDBData();
  BuffDBInfo::default_instance_ = new BuffDBInfo();
  BuffDBCdInfo::default_instance_ = new BuffDBCdInfo();
  BuffDBData::default_instance_ = new BuffDBData();
  BossSimpleInfoDB::default_instance_ = new BossSimpleInfoDB();
  BossDBData::default_instance_ = new BossDBData();
  VipDBData::default_instance_ = new VipDBData();
  AttrDBData::default_instance_ = new AttrDBData();
  PetDBRecord::default_instance_ = new PetDBRecord();
  PetDBData::default_instance_ = new PetDBData();
  MallDBInfo::default_instance_ = new MallDBInfo();
  MallDBData::default_instance_ = new MallDBData();
  ConvoyData::default_instance_ = new ConvoyData();
  ArmorDBData::default_instance_ = new ArmorDBData();
  AssistDBData::default_instance_ = new AssistDBData();
  RoleDBData::default_instance_ = new RoleDBData();
  RoleMirrorData::default_instance_ = new RoleMirrorData();
  FactionMemDBProto::default_instance_ = new FactionMemDBProto();
  FactionMultMemDBProto::default_instance_ = new FactionMultMemDBProto();
  FactionApplyDBProto::default_instance_ = new FactionApplyDBProto();
  FactionMultApplyDBProto::default_instance_ = new FactionMultApplyDBProto();
  FactionRecordDBProto::default_instance_ = new FactionRecordDBProto();
  FactionMutRecordDBProto::default_instance_ = new FactionMutRecordDBProto();
  FactionDBBase::default_instance_ = new FactionDBBase();
  FactionDBData::default_instance_ = new FactionDBData();
  FactionAllDBData::default_instance_ = new FactionAllDBData();
  RoleListDBReq::default_instance_ = new RoleListDBReq();
  RoleListDBRsp::default_instance_ = new RoleListDBRsp();
  CreateRoleDBReq::default_instance_ = new CreateRoleDBReq();
  CreateRoleDBRsp::default_instance_ = new CreateRoleDBRsp();
  RoleInfoDBReq::default_instance_ = new RoleInfoDBReq();
  RoleInfoDBRsp::default_instance_ = new RoleInfoDBRsp();
  RoleInfoUpdateDBReq::default_instance_ = new RoleInfoUpdateDBReq();
  RoleChgNameDBReq::default_instance_ = new RoleChgNameDBReq();
  RoleChgNameDBRsp::default_instance_ = new RoleChgNameDBRsp();
  RoleSimpleListDBReq::default_instance_ = new RoleSimpleListDBReq();
  RoleSimpleListDBRsp::default_instance_ = new RoleSimpleListDBRsp();
  CreatureTransLogicDBReq::default_instance_ = new CreatureTransLogicDBReq();
  CreatureTransLogicDBRsp::default_instance_ = new CreatureTransLogicDBRsp();
  NewMailDBInfo::default_instance_ = new NewMailDBInfo();
  MailDBOperateInfo::default_instance_ = new MailDBOperateInfo();
  SaveMailDBReq::default_instance_ = new SaveMailDBReq();
  SaveMailDBRsp::default_instance_ = new SaveMailDBRsp();
  CharacterMailDBRequest::default_instance_ = new CharacterMailDBRequest();
  CharacterMailDBResponse::default_instance_ = new CharacterMailDBResponse();
  MaxMailIDRequest::default_instance_ = new MaxMailIDRequest();
  MaxMailIDResponse::default_instance_ = new MaxMailIDResponse();
  DeleteCharacterMail::default_instance_ = new DeleteCharacterMail();
  ZoneMailSaveRsp::default_instance_ = new ZoneMailSaveRsp();
  ZoneMailTransCharacterMailReq::default_instance_ = new ZoneMailTransCharacterMailReq();
  ZoneMailTransCharacterMailRsp::default_instance_ = new ZoneMailTransCharacterMailRsp();
  WebMailDBDataReq::default_instance_ = new WebMailDBDataReq();
  WebMailDBDataRsp::default_instance_ = new WebMailDBDataRsp();
  FriendDBInfo::default_instance_ = new FriendDBInfo();
  FriendDBRequest::default_instance_ = new FriendDBRequest();
  FriendDBResponse::default_instance_ = new FriendDBResponse();
  AllFriendDBRequest::default_instance_ = new AllFriendDBRequest();
  AllFriendDBResponse::default_instance_ = new AllFriendDBResponse();
  SaveFriendDBRequest::default_instance_ = new SaveFriendDBRequest();
  DelteFriendDBRequest::default_instance_ = new DelteFriendDBRequest();
  GlobalDBRequst::default_instance_ = new GlobalDBRequst();
  GlobalDBEntry::default_instance_ = new GlobalDBEntry();
  GlobalDBResponse::default_instance_ = new GlobalDBResponse();
  GlobalDBSetRequest::default_instance_ = new GlobalDBSetRequest();
  GlobalDBSetResponse::default_instance_ = new GlobalDBSetResponse();
  GlobalComData::default_instance_ = new GlobalComData();
  ActDBProto::default_instance_ = new ActDBProto();
  ActDBReq::default_instance_ = new ActDBReq();
  ActDBRsp::default_instance_ = new ActDBRsp();
  ActSaveDBReq::default_instance_ = new ActSaveDBReq();
  AllArenaDBRequest::default_instance_ = new AllArenaDBRequest();
  ArenaDBInfo::default_instance_ = new ArenaDBInfo();
  ArenaMoreDBInfo::default_instance_ = new ArenaMoreDBInfo();
  AllArenaDBResponse::default_instance_ = new AllArenaDBResponse();
  SaveArenaDBRequest::default_instance_ = new SaveArenaDBRequest();
  DeleteArenaDBRequest::default_instance_ = new DeleteArenaDBRequest();
  RoleMirrorDBReq::default_instance_ = new RoleMirrorDBReq();
  RoleMirrorDBRsp::default_instance_ = new RoleMirrorDBRsp();
  FactionDataDBReq::default_instance_ = new FactionDataDBReq();
  FactionDataDBRsp::default_instance_ = new FactionDataDBRsp();
  FactionSaveDBReq::default_instance_ = new FactionSaveDBReq();
  FactionDelDBReq::default_instance_ = new FactionDelDBReq();
  RoleReliveProto::default_instance_->InitAsDefaultInstance();
  RoleDBBaseData::default_instance_->InitAsDefaultInstance();
  BagItemsDBData::default_instance_->InitAsDefaultInstance();
  BagDBSimpleData::default_instance_->InitAsDefaultInstance();
  RoleDBUnitBagData::default_instance_->InitAsDefaultInstance();
  RoleDBBagData::default_instance_->InitAsDefaultInstance();
  RoleDBEquipData::default_instance_->InitAsDefaultInstance();
  RoleDBTaskData::default_instance_->InitAsDefaultInstance();
  GrowPartEntryDBInfo::default_instance_->InitAsDefaultInstance();
  GrowPartDBData::default_instance_->InitAsDefaultInstance();
  GrowDBData::default_instance_->InitAsDefaultInstance();
  DayUseItemData::default_instance_->InitAsDefaultInstance();
  CharacterArenaData::default_instance_->InitAsDefaultInstance();
  MiniDBData::default_instance_->InitAsDefaultInstance();
  FacadeDataInfo::default_instance_->InitAsDefaultInstance();
  MountDataInfo::default_instance_->InitAsDefaultInstance();
  DeityDataInfo::default_instance_->InitAsDefaultInstance();
  FacadeDBData::default_instance_->InitAsDefaultInstance();
  SkillDBInfo::default_instance_->InitAsDefaultInstance();
  SkillDBPos::default_instance_->InitAsDefaultInstance();
  SkillDBAdvPos::default_instance_->InitAsDefaultInstance();
  SkillDBAdvInfo::default_instance_->InitAsDefaultInstance();
  SkillDBGroup::default_instance_->InitAsDefaultInstance();
  PetSkillCdDB::default_instance_->InitAsDefaultInstance();
  SkillDBData::default_instance_->InitAsDefaultInstance();
  GodRelicsActivityData::default_instance_->InitAsDefaultInstance();
  MiniActivityDBData::default_instance_->InitAsDefaultInstance();
  DupRecord::default_instance_->InitAsDefaultInstance();
  DupGroupData::default_instance_->InitAsDefaultInstance();
  DupTowerDBRecordEntry::default_instance_->InitAsDefaultInstance();
  DupTowerDBRecord::default_instance_->InitAsDefaultInstance();
  DupTowerDBData::default_instance_->InitAsDefaultInstance();
  DupDBData::default_instance_->InitAsDefaultInstance();
  BuffDBInfo::default_instance_->InitAsDefaultInstance();
  BuffDBCdInfo::default_instance_->InitAsDefaultInstance();
  BuffDBData::default_instance_->InitAsDefaultInstance();
  BossSimpleInfoDB::default_instance_->InitAsDefaultInstance();
  BossDBData::default_instance_->InitAsDefaultInstance();
  VipDBData::default_instance_->InitAsDefaultInstance();
  AttrDBData::default_instance_->InitAsDefaultInstance();
  PetDBRecord::default_instance_->InitAsDefaultInstance();
  PetDBData::default_instance_->InitAsDefaultInstance();
  MallDBInfo::default_instance_->InitAsDefaultInstance();
  MallDBData::default_instance_->InitAsDefaultInstance();
  ConvoyData::default_instance_->InitAsDefaultInstance();
  ArmorDBData::default_instance_->InitAsDefaultInstance();
  AssistDBData::default_instance_->InitAsDefaultInstance();
  RoleDBData::default_instance_->InitAsDefaultInstance();
  RoleMirrorData::default_instance_->InitAsDefaultInstance();
  FactionMemDBProto::default_instance_->InitAsDefaultInstance();
  FactionMultMemDBProto::default_instance_->InitAsDefaultInstance();
  FactionApplyDBProto::default_instance_->InitAsDefaultInstance();
  FactionMultApplyDBProto::default_instance_->InitAsDefaultInstance();
  FactionRecordDBProto::default_instance_->InitAsDefaultInstance();
  FactionMutRecordDBProto::default_instance_->InitAsDefaultInstance();
  FactionDBBase::default_instance_->InitAsDefaultInstance();
  FactionDBData::default_instance_->InitAsDefaultInstance();
  FactionAllDBData::default_instance_->InitAsDefaultInstance();
  RoleListDBReq::default_instance_->InitAsDefaultInstance();
  RoleListDBRsp::default_instance_->InitAsDefaultInstance();
  CreateRoleDBReq::default_instance_->InitAsDefaultInstance();
  CreateRoleDBRsp::default_instance_->InitAsDefaultInstance();
  RoleInfoDBReq::default_instance_->InitAsDefaultInstance();
  RoleInfoDBRsp::default_instance_->InitAsDefaultInstance();
  RoleInfoUpdateDBReq::default_instance_->InitAsDefaultInstance();
  RoleChgNameDBReq::default_instance_->InitAsDefaultInstance();
  RoleChgNameDBRsp::default_instance_->InitAsDefaultInstance();
  RoleSimpleListDBReq::default_instance_->InitAsDefaultInstance();
  RoleSimpleListDBRsp::default_instance_->InitAsDefaultInstance();
  CreatureTransLogicDBReq::default_instance_->InitAsDefaultInstance();
  CreatureTransLogicDBRsp::default_instance_->InitAsDefaultInstance();
  NewMailDBInfo::default_instance_->InitAsDefaultInstance();
  MailDBOperateInfo::default_instance_->InitAsDefaultInstance();
  SaveMailDBReq::default_instance_->InitAsDefaultInstance();
  SaveMailDBRsp::default_instance_->InitAsDefaultInstance();
  CharacterMailDBRequest::default_instance_->InitAsDefaultInstance();
  CharacterMailDBResponse::default_instance_->InitAsDefaultInstance();
  MaxMailIDRequest::default_instance_->InitAsDefaultInstance();
  MaxMailIDResponse::default_instance_->InitAsDefaultInstance();
  DeleteCharacterMail::default_instance_->InitAsDefaultInstance();
  ZoneMailSaveRsp::default_instance_->InitAsDefaultInstance();
  ZoneMailTransCharacterMailReq::default_instance_->InitAsDefaultInstance();
  ZoneMailTransCharacterMailRsp::default_instance_->InitAsDefaultInstance();
  WebMailDBDataReq::default_instance_->InitAsDefaultInstance();
  WebMailDBDataRsp::default_instance_->InitAsDefaultInstance();
  FriendDBInfo::default_instance_->InitAsDefaultInstance();
  FriendDBRequest::default_instance_->InitAsDefaultInstance();
  FriendDBResponse::default_instance_->InitAsDefaultInstance();
  AllFriendDBRequest::default_instance_->InitAsDefaultInstance();
  AllFriendDBResponse::default_instance_->InitAsDefaultInstance();
  SaveFriendDBRequest::default_instance_->InitAsDefaultInstance();
  DelteFriendDBRequest::default_instance_->InitAsDefaultInstance();
  GlobalDBRequst::default_instance_->InitAsDefaultInstance();
  GlobalDBEntry::default_instance_->InitAsDefaultInstance();
  GlobalDBResponse::default_instance_->InitAsDefaultInstance();
  GlobalDBSetRequest::default_instance_->InitAsDefaultInstance();
  GlobalDBSetResponse::default_instance_->InitAsDefaultInstance();
  GlobalComData::default_instance_->InitAsDefaultInstance();
  ActDBProto::default_instance_->InitAsDefaultInstance();
  ActDBReq::default_instance_->InitAsDefaultInstance();
  ActDBRsp::default_instance_->InitAsDefaultInstance();
  ActSaveDBReq::default_instance_->InitAsDefaultInstance();
  AllArenaDBRequest::default_instance_->InitAsDefaultInstance();
  ArenaDBInfo::default_instance_->InitAsDefaultInstance();
  ArenaMoreDBInfo::default_instance_->InitAsDefaultInstance();
  AllArenaDBResponse::default_instance_->InitAsDefaultInstance();
  SaveArenaDBRequest::default_instance_->InitAsDefaultInstance();
  DeleteArenaDBRequest::default_instance_->InitAsDefaultInstance();
  RoleMirrorDBReq::default_instance_->InitAsDefaultInstance();
  RoleMirrorDBRsp::default_instance_->InitAsDefaultInstance();
  FactionDataDBReq::default_instance_->InitAsDefaultInstance();
  FactionDataDBRsp::default_instance_->InitAsDefaultInstance();
  FactionSaveDBReq::default_instance_->InitAsDefaultInstance();
  FactionDelDBReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBProto_2eproto {
  StaticDescriptorInitializer_DBProto_2eproto() {
    protobuf_AddDesc_DBProto_2eproto();
  }
} static_descriptor_initializer_DBProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoleReliveProto::kTiredTimeFieldNumber;
const int RoleReliveProto::kReliveNumFieldNumber;
const int RoleReliveProto::kIsTiredFieldNumber;
const int RoleReliveProto::kMapidFieldNumber;
const int RoleReliveProto::kMapReliveNumFieldNumber;
#endif  // !_MSC_VER

RoleReliveProto::RoleReliveProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleReliveProto::InitAsDefaultInstance() {
}

RoleReliveProto::RoleReliveProto(const RoleReliveProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleReliveProto::SharedCtor() {
  _cached_size_ = 0;
  tired_time_ = GOOGLE_ULONGLONG(0);
  relive_num_ = 0;
  is_tired_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  map_relive_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleReliveProto::~RoleReliveProto() {
  SharedDtor();
}

void RoleReliveProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleReliveProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleReliveProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleReliveProto_descriptor_;
}

const RoleReliveProto& RoleReliveProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleReliveProto* RoleReliveProto::default_instance_ = NULL;

RoleReliveProto* RoleReliveProto::New() const {
  return new RoleReliveProto;
}

void RoleReliveProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tired_time_ = GOOGLE_ULONGLONG(0);
    relive_num_ = 0;
    is_tired_ = 0;
    mapid_ = GOOGLE_ULONGLONG(0);
    map_relive_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleReliveProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tired_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tired_time_)));
          set_has_tired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relive_num;
        break;
      }

      // optional int32 relive_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_num_)));
          set_has_relive_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_tired;
        break;
      }

      // optional int32 is_tired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_tired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_tired_)));
          set_has_is_tired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_relive_num;
        break;
      }

      // optional int32 map_relive_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_relive_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_relive_num_)));
          set_has_map_relive_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleReliveProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tired_time = 1;
  if (has_tired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tired_time(), output);
  }

  // optional int32 relive_num = 2;
  if (has_relive_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relive_num(), output);
  }

  // optional int32 is_tired = 3;
  if (has_is_tired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_tired(), output);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mapid(), output);
  }

  // optional int32 map_relive_num = 5;
  if (has_map_relive_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_relive_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleReliveProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tired_time = 1;
  if (has_tired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tired_time(), target);
  }

  // optional int32 relive_num = 2;
  if (has_relive_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relive_num(), target);
  }

  // optional int32 is_tired = 3;
  if (has_is_tired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_tired(), target);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mapid(), target);
  }

  // optional int32 map_relive_num = 5;
  if (has_map_relive_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_relive_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleReliveProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tired_time = 1;
    if (has_tired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tired_time());
    }

    // optional int32 relive_num = 2;
    if (has_relive_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_num());
    }

    // optional int32 is_tired = 3;
    if (has_is_tired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_tired());
    }

    // optional uint64 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional int32 map_relive_num = 5;
    if (has_map_relive_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_relive_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleReliveProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleReliveProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleReliveProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleReliveProto::MergeFrom(const RoleReliveProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tired_time()) {
      set_tired_time(from.tired_time());
    }
    if (from.has_relive_num()) {
      set_relive_num(from.relive_num());
    }
    if (from.has_is_tired()) {
      set_is_tired(from.is_tired());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_map_relive_num()) {
      set_map_relive_num(from.map_relive_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleReliveProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleReliveProto::CopyFrom(const RoleReliveProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleReliveProto::IsInitialized() const {

  return true;
}

void RoleReliveProto::Swap(RoleReliveProto* other) {
  if (other != this) {
    std::swap(tired_time_, other->tired_time_);
    std::swap(relive_num_, other->relive_num_);
    std::swap(is_tired_, other->is_tired_);
    std::swap(mapid_, other->mapid_);
    std::swap(map_relive_num_, other->map_relive_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleReliveProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleReliveProto_descriptor_;
  metadata.reflection = RoleReliveProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBBaseData::kNameFieldNumber;
const int RoleDBBaseData::kProfFieldNumber;
const int RoleDBBaseData::kLevelFieldNumber;
const int RoleDBBaseData::kExpFieldNumber;
const int RoleDBBaseData::kHpFieldNumber;
const int RoleDBBaseData::kFightFieldNumber;
const int RoleDBBaseData::kCreateTimeFieldNumber;
const int RoleDBBaseData::kLoginTimeFieldNumber;
const int RoleDBBaseData::kLogoutTimeFieldNumber;
const int RoleDBBaseData::kEnterSceneIdFieldNumber;
const int RoleDBBaseData::kEnterMapIdFieldNumber;
const int RoleDBBaseData::kEnterposxFieldNumber;
const int RoleDBBaseData::kEnterposyFieldNumber;
const int RoleDBBaseData::kEnterposzFieldNumber;
const int RoleDBBaseData::kLastsceneidFieldNumber;
const int RoleDBBaseData::kLastmapidFieldNumber;
const int RoleDBBaseData::kLastposxFieldNumber;
const int RoleDBBaseData::kLastposyFieldNumber;
const int RoleDBBaseData::kLastposzFieldNumber;
const int RoleDBBaseData::kFacadeFieldNumber;
const int RoleDBBaseData::kVipLevelFieldNumber;
const int RoleDBBaseData::kStateFieldNumber;
const int RoleDBBaseData::kHanguptimeFieldNumber;
const int RoleDBBaseData::kReliveFieldNumber;
const int RoleDBBaseData::kGoldFieldNumber;
const int RoleDBBaseData::kDiaFieldNumber;
const int RoleDBBaseData::kBdiaFieldNumber;
const int RoleDBBaseData::kMagicFieldNumber;
const int RoleDBBaseData::kPrestigeFieldNumber;
const int RoleDBBaseData::kVipLvFieldNumber;
const int RoleDBBaseData::kArenacoinFieldNumber;
#endif  // !_MSC_VER

RoleDBBaseData::RoleDBBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBBaseData::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  relive_ = const_cast< ::proto_ff::RoleReliveProto*>(&::proto_ff::RoleReliveProto::default_instance());
}

RoleDBBaseData::RoleDBBaseData(const RoleDBBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBBaseData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = GOOGLE_LONGLONG(0);
  fight_ = GOOGLE_LONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  logintime_ = GOOGLE_ULONGLONG(0);
  logouttime_ = GOOGLE_ULONGLONG(0);
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  facade_ = NULL;
  vip_level_ = 0u;
  state_ = 0;
  hanguptime_ = GOOGLE_ULONGLONG(0);
  relive_ = NULL;
  gold_ = GOOGLE_LONGLONG(0);
  dia_ = GOOGLE_LONGLONG(0);
  bdia_ = GOOGLE_LONGLONG(0);
  magic_ = GOOGLE_LONGLONG(0);
  prestige_ = GOOGLE_LONGLONG(0);
  viplv_ = 0;
  arenacoin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBBaseData::~RoleDBBaseData() {
  SharedDtor();
}

void RoleDBBaseData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete relive_;
  }
}

void RoleDBBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBBaseData_descriptor_;
}

const RoleDBBaseData& RoleDBBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleDBBaseData* RoleDBBaseData::default_instance_ = NULL;

RoleDBBaseData* RoleDBBaseData::New() const {
  return new RoleDBBaseData;
}

void RoleDBBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    exp_ = GOOGLE_LONGLONG(0);
    hp_ = GOOGLE_LONGLONG(0);
    fight_ = GOOGLE_LONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    logintime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logouttime_ = GOOGLE_ULONGLONG(0);
    enter_scene_id_ = GOOGLE_ULONGLONG(0);
    enter_map_id_ = GOOGLE_ULONGLONG(0);
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    lastsceneid_ = GOOGLE_ULONGLONG(0);
    lastmapid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lastposx_ = 0;
    lastposy_ = 0;
    lastposz_ = 0;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    vip_level_ = 0u;
    state_ = 0;
    hanguptime_ = GOOGLE_ULONGLONG(0);
    if (has_relive()) {
      if (relive_ != NULL) relive_->::proto_ff::RoleReliveProto::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    dia_ = GOOGLE_LONGLONG(0);
    bdia_ = GOOGLE_LONGLONG(0);
    magic_ = GOOGLE_LONGLONG(0);
    prestige_ = GOOGLE_LONGLONG(0);
    viplv_ = 0;
    arenacoin_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prof;
        break;
      }

      // required uint32 prof = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required int64 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // required int64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // required uint64 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_loginTime;
        break;
      }

      // required uint64 loginTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_logoutTime;
        break;
      }

      // required uint64 logoutTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enter_scene_id;
        break;
      }

      // required uint64 enter_scene_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enter_map_id;
        break;
      }

      // required uint64 enter_map_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_enterposx;
        break;
      }

      // required float enterposx = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_enterposy;
        break;
      }

      // required float enterposy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_enterposz;
        break;
      }

      // required float enterposz = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lastsceneid;
        break;
      }

      // optional uint64 lastsceneid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lastmapid;
        break;
      }

      // optional uint64 lastmapid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lastposx;
        break;
      }

      // optional float lastposx = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_lastposy;
        break;
      }

      // optional float lastposy = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_lastposz;
        break;
      }

      // optional float lastposz = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_state;
        break;
      }

      // optional int32 state = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_hanguptime;
        break;
      }

      // optional uint64 hanguptime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hanguptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hanguptime_)));
          set_has_hanguptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_relive;
        break;
      }

      // optional .proto_ff.RoleReliveProto relive = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_gold;
        break;
      }

      // optional int64 gold = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_dia;
        break;
      }

      // optional int64 dia = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dia_)));
          set_has_dia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bdia;
        break;
      }

      // optional int64 bdia = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bdia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bdia_)));
          set_has_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_magic;
        break;
      }

      // optional int64 magic = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_prestige;
        break;
      }

      // optional int64 prestige = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_vipLv;
        break;
      }

      // optional int32 vipLv = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_arenacoin;
        break;
      }

      // optional int64 arenacoin = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenacoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 prof = 2;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prof(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }

  // required int64 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hp(), output);
  }

  // required int64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fight(), output);
  }

  // required uint64 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->createtime(), output);
  }

  // required uint64 loginTime = 8;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->logintime(), output);
  }

  // required uint64 logoutTime = 9;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->logouttime(), output);
  }

  // required uint64 enter_scene_id = 10;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->enter_scene_id(), output);
  }

  // required uint64 enter_map_id = 11;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->enter_map_id(), output);
  }

  // required float enterposx = 12;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->enterposx(), output);
  }

  // required float enterposy = 13;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->enterposy(), output);
  }

  // required float enterposz = 14;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->enterposz(), output);
  }

  // optional uint64 lastsceneid = 15;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->lastsceneid(), output);
  }

  // optional uint64 lastmapid = 16;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->lastmapid(), output);
  }

  // optional float lastposx = 17;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->lastposx(), output);
  }

  // optional float lastposy = 18;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->lastposy(), output);
  }

  // optional float lastposz = 19;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->lastposz(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 20;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->facade(), output);
  }

  // optional uint32 vip_level = 21;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vip_level(), output);
  }

  // optional int32 state = 22;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->state(), output);
  }

  // optional uint64 hanguptime = 23;
  if (has_hanguptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->hanguptime(), output);
  }

  // optional .proto_ff.RoleReliveProto relive = 24;
  if (has_relive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->relive(), output);
  }

  // optional int64 gold = 25;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->gold(), output);
  }

  // optional int64 dia = 26;
  if (has_dia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->dia(), output);
  }

  // optional int64 bdia = 27;
  if (has_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->bdia(), output);
  }

  // optional int64 magic = 28;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->magic(), output);
  }

  // optional int64 prestige = 29;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->prestige(), output);
  }

  // optional int32 vipLv = 30;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->viplv(), output);
  }

  // optional int64 arenacoin = 31;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->arenacoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 prof = 2;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prof(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }

  // required int64 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hp(), target);
  }

  // required int64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fight(), target);
  }

  // required uint64 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->createtime(), target);
  }

  // required uint64 loginTime = 8;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->logintime(), target);
  }

  // required uint64 logoutTime = 9;
  if (has_logouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->logouttime(), target);
  }

  // required uint64 enter_scene_id = 10;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->enter_scene_id(), target);
  }

  // required uint64 enter_map_id = 11;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->enter_map_id(), target);
  }

  // required float enterposx = 12;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->enterposx(), target);
  }

  // required float enterposy = 13;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->enterposy(), target);
  }

  // required float enterposz = 14;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->enterposz(), target);
  }

  // optional uint64 lastsceneid = 15;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->lastsceneid(), target);
  }

  // optional uint64 lastmapid = 16;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->lastmapid(), target);
  }

  // optional float lastposx = 17;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->lastposx(), target);
  }

  // optional float lastposy = 18;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->lastposy(), target);
  }

  // optional float lastposz = 19;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->lastposz(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 20;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->facade(), target);
  }

  // optional uint32 vip_level = 21;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->vip_level(), target);
  }

  // optional int32 state = 22;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->state(), target);
  }

  // optional uint64 hanguptime = 23;
  if (has_hanguptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->hanguptime(), target);
  }

  // optional .proto_ff.RoleReliveProto relive = 24;
  if (has_relive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->relive(), target);
  }

  // optional int64 gold = 25;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->gold(), target);
  }

  // optional int64 dia = 26;
  if (has_dia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->dia(), target);
  }

  // optional int64 bdia = 27;
  if (has_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->bdia(), target);
  }

  // optional int64 magic = 28;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->magic(), target);
  }

  // optional int64 prestige = 29;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->prestige(), target);
  }

  // optional int32 vipLv = 30;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->viplv(), target);
  }

  // optional int64 arenacoin = 31;
  if (has_arenacoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->arenacoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 prof = 2;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int64 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // required int64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight());
    }

    // required uint64 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // required uint64 loginTime = 8;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 logoutTime = 9;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logouttime());
    }

    // required uint64 enter_scene_id = 10;
    if (has_enter_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_scene_id());
    }

    // required uint64 enter_map_id = 11;
    if (has_enter_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_map_id());
    }

    // required float enterposx = 12;
    if (has_enterposx()) {
      total_size += 1 + 4;
    }

    // required float enterposy = 13;
    if (has_enterposy()) {
      total_size += 1 + 4;
    }

    // required float enterposz = 14;
    if (has_enterposz()) {
      total_size += 1 + 4;
    }

    // optional uint64 lastsceneid = 15;
    if (has_lastsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

    // optional uint64 lastmapid = 16;
    if (has_lastmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float lastposx = 17;
    if (has_lastposx()) {
      total_size += 2 + 4;
    }

    // optional float lastposy = 18;
    if (has_lastposy()) {
      total_size += 2 + 4;
    }

    // optional float lastposz = 19;
    if (has_lastposz()) {
      total_size += 2 + 4;
    }

    // optional .proto_ff.RoleFacadeProto facade = 20;
    if (has_facade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint32 vip_level = 21;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional int32 state = 22;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 hanguptime = 23;
    if (has_hanguptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hanguptime());
    }

    // optional .proto_ff.RoleReliveProto relive = 24;
    if (has_relive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relive());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 gold = 25;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 dia = 26;
    if (has_dia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dia());
    }

    // optional int64 bdia = 27;
    if (has_bdia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bdia());
    }

    // optional int64 magic = 28;
    if (has_magic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magic());
    }

    // optional int64 prestige = 29;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prestige());
    }

    // optional int32 vipLv = 30;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int64 arenacoin = 31;
    if (has_arenacoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arenacoin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBBaseData::MergeFrom(const RoleDBBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hanguptime()) {
      set_hanguptime(from.hanguptime());
    }
    if (from.has_relive()) {
      mutable_relive()->::proto_ff::RoleReliveProto::MergeFrom(from.relive());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_dia()) {
      set_dia(from.dia());
    }
    if (from.has_bdia()) {
      set_bdia(from.bdia());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBBaseData::CopyFrom(const RoleDBBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBBaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void RoleDBBaseData::Swap(RoleDBBaseData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(fight_, other->fight_);
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(state_, other->state_);
    std::swap(hanguptime_, other->hanguptime_);
    std::swap(relive_, other->relive_);
    std::swap(gold_, other->gold_);
    std::swap(dia_, other->dia_);
    std::swap(bdia_, other->bdia_);
    std::swap(magic_, other->magic_);
    std::swap(prestige_, other->prestige_);
    std::swap(viplv_, other->viplv_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBBaseData_descriptor_;
  metadata.reflection = RoleDBBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagItemsDBData::kDataFieldNumber;
const int BagItemsDBData::kOffsetFieldNumber;
#endif  // !_MSC_VER

BagItemsDBData::BagItemsDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItemsDBData::InitAsDefaultInstance() {
}

BagItemsDBData::BagItemsDBData(const BagItemsDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItemsDBData::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItemsDBData::~BagItemsDBData() {
  SharedDtor();
}

void BagItemsDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItemsDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItemsDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItemsDBData_descriptor_;
}

const BagItemsDBData& BagItemsDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BagItemsDBData* BagItemsDBData::default_instance_ = NULL;

BagItemsDBData* BagItemsDBData::New() const {
  return new BagItemsDBData;
}

void BagItemsDBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    offset_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItemsDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItemsDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItemsDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItemsDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.ItemProtoInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItemsDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItemsDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItemsDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItemsDBData::MergeFrom(const BagItemsDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItemsDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItemsDBData::CopyFrom(const BagItemsDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItemsDBData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void BagItemsDBData::Swap(BagItemsDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItemsDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItemsDBData_descriptor_;
  metadata.reflection = BagItemsDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagDBSimpleData::kPackageTypeFieldNumber;
const int BagDBSimpleData::kExpandNumFieldNumber;
#endif  // !_MSC_VER

BagDBSimpleData::BagDBSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagDBSimpleData::InitAsDefaultInstance() {
}

BagDBSimpleData::BagDBSimpleData(const BagDBSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagDBSimpleData::SharedCtor() {
  _cached_size_ = 0;
  package_type_ = 0u;
  expand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagDBSimpleData::~BagDBSimpleData() {
  SharedDtor();
}

void BagDBSimpleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagDBSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagDBSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagDBSimpleData_descriptor_;
}

const BagDBSimpleData& BagDBSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BagDBSimpleData* BagDBSimpleData::default_instance_ = NULL;

BagDBSimpleData* BagDBSimpleData::New() const {
  return new BagDBSimpleData;
}

void BagDBSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_type_ = 0u;
    expand_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagDBSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_type_)));
          set_has_package_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expand_num;
        break;
      }

      // optional uint32 expand_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expand_num_)));
          set_has_expand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagDBSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_type = 1;
  if (has_package_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_type(), output);
  }

  // optional uint32 expand_num = 2;
  if (has_expand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expand_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagDBSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 package_type = 1;
  if (has_package_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_type(), target);
  }

  // optional uint32 expand_num = 2;
  if (has_expand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expand_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagDBSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_type = 1;
    if (has_package_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_type());
    }

    // optional uint32 expand_num = 2;
    if (has_expand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expand_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagDBSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagDBSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagDBSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagDBSimpleData::MergeFrom(const BagDBSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_type()) {
      set_package_type(from.package_type());
    }
    if (from.has_expand_num()) {
      set_expand_num(from.expand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagDBSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagDBSimpleData::CopyFrom(const BagDBSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagDBSimpleData::IsInitialized() const {

  return true;
}

void BagDBSimpleData::Swap(BagDBSimpleData* other) {
  if (other != this) {
    std::swap(package_type_, other->package_type_);
    std::swap(expand_num_, other->expand_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagDBSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagDBSimpleData_descriptor_;
  metadata.reflection = BagDBSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBUnitBagData::kTableNameFieldNumber;
const int RoleDBUnitBagData::kSimpleFieldNumber;
const int RoleDBUnitBagData::kPartsFieldNumber;
#endif  // !_MSC_VER

RoleDBUnitBagData::RoleDBUnitBagData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBUnitBagData::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::BagDBSimpleData*>(&::proto_ff::BagDBSimpleData::default_instance());
}

RoleDBUnitBagData::RoleDBUnitBagData(const RoleDBUnitBagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBUnitBagData::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBUnitBagData::~RoleDBUnitBagData() {
  SharedDtor();
}

void RoleDBUnitBagData::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
    delete simple_;
  }
}

void RoleDBUnitBagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBUnitBagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBUnitBagData_descriptor_;
}

const RoleDBUnitBagData& RoleDBUnitBagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleDBUnitBagData* RoleDBUnitBagData::default_instance_ = NULL;

RoleDBUnitBagData* RoleDBUnitBagData::New() const {
  return new RoleDBUnitBagData;
}

void RoleDBUnitBagData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::BagDBSimpleData::Clear();
    }
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBUnitBagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple;
        break;
      }

      // optional .proto_ff.BagDBSimpleData simple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        break;
      }

      // repeated .proto_ff.BagItemsDBData parts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBUnitBagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // optional .proto_ff.BagDBSimpleData simple = 2;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple(), output);
  }

  // repeated .proto_ff.BagItemsDBData parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBUnitBagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional .proto_ff.BagDBSimpleData simple = 2;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple(), target);
  }

  // repeated .proto_ff.BagItemsDBData parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBUnitBagData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional .proto_ff.BagDBSimpleData simple = 2;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  // repeated .proto_ff.BagItemsDBData parts = 3;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBUnitBagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBUnitBagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBUnitBagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBUnitBagData::MergeFrom(const RoleDBUnitBagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::BagDBSimpleData::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBUnitBagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBUnitBagData::CopyFrom(const RoleDBUnitBagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBUnitBagData::IsInitialized() const {

  for (int i = 0; i < parts_size(); i++) {
    if (!this->parts(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBUnitBagData::Swap(RoleDBUnitBagData* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(simple_, other->simple_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBUnitBagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBUnitBagData_descriptor_;
  metadata.reflection = RoleDBUnitBagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBBagData::kBagsFieldNumber;
#endif  // !_MSC_VER

RoleDBBagData::RoleDBBagData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBBagData::InitAsDefaultInstance() {
}

RoleDBBagData::RoleDBBagData(const RoleDBBagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBBagData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBBagData::~RoleDBBagData() {
  SharedDtor();
}

void RoleDBBagData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDBBagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBBagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBBagData_descriptor_;
}

const RoleDBBagData& RoleDBBagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleDBBagData* RoleDBBagData::default_instance_ = NULL;

RoleDBBagData* RoleDBBagData::New() const {
  return new RoleDBBagData;
}

void RoleDBBagData::Clear() {
  bags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBBagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RoleDBUnitBagData bags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBBagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBBagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBBagData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBBagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBBagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBBagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBBagData::MergeFrom(const RoleDBBagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBBagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBBagData::CopyFrom(const RoleDBBagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBBagData::IsInitialized() const {

  for (int i = 0; i < bags_size(); i++) {
    if (!this->bags(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBBagData::Swap(RoleDBBagData* other) {
  if (other != this) {
    bags_.Swap(&other->bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBBagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBBagData_descriptor_;
  metadata.reflection = RoleDBBagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBEquipData::kInfosFieldNumber;
const int RoleDBEquipData::kLvAttrFieldNumber;
const int RoleDBEquipData::kStoveLevelFieldNumber;
const int RoleDBEquipData::kStoveExpFieldNumber;
#endif  // !_MSC_VER

RoleDBEquipData::RoleDBEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBEquipData::InitAsDefaultInstance() {
}

RoleDBEquipData::RoleDBEquipData(const RoleDBEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBEquipData::SharedCtor() {
  _cached_size_ = 0;
  stove_level_ = 0u;
  stove_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBEquipData::~RoleDBEquipData() {
  SharedDtor();
}

void RoleDBEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDBEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBEquipData_descriptor_;
}

const RoleDBEquipData& RoleDBEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleDBEquipData* RoleDBEquipData::default_instance_ = NULL;

RoleDBEquipData* RoleDBEquipData::New() const {
  return new RoleDBEquipData;
}

void RoleDBEquipData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    stove_level_ = 0u;
    stove_exp_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  lv_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EquipInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(18)) goto parse_lv_attr;
        break;
      }

      // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lv_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_attr;
        if (input->ExpectTag(24)) goto parse_stove_level;
        break;
      }

      // optional uint32 stove_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stove_level_)));
          set_has_stove_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stove_exp;
        break;
      }

      // optional uint64 stove_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stove_exp_)));
          set_has_stove_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lv_attr(i), output);
  }

  // optional uint32 stove_level = 3;
  if (has_stove_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stove_level(), output);
  }

  // optional uint64 stove_exp = 4;
  if (has_stove_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->stove_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lv_attr(i), target);
  }

  // optional uint32 stove_level = 3;
  if (has_stove_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stove_level(), target);
  }

  // optional uint64 stove_exp = 4;
  if (has_stove_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->stove_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBEquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 stove_level = 3;
    if (has_stove_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stove_level());
    }

    // optional uint64 stove_exp = 4;
    if (has_stove_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stove_exp());
    }

  }
  // repeated .proto_ff.EquipInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  total_size += 1 * this->lv_attr_size();
  for (int i = 0; i < this->lv_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lv_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBEquipData::MergeFrom(const RoleDBEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  lv_attr_.MergeFrom(from.lv_attr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_stove_level()) {
      set_stove_level(from.stove_level());
    }
    if (from.has_stove_exp()) {
      set_stove_exp(from.stove_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBEquipData::CopyFrom(const RoleDBEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBEquipData::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBEquipData::Swap(RoleDBEquipData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    lv_attr_.Swap(&other->lv_attr_);
    std::swap(stove_level_, other->stove_level_);
    std::swap(stove_exp_, other->stove_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBEquipData_descriptor_;
  metadata.reflection = RoleDBEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleDBTaskData::RoleDBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBTaskData::InitAsDefaultInstance() {
}

RoleDBTaskData::RoleDBTaskData(const RoleDBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBTaskData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBTaskData::~RoleDBTaskData() {
  SharedDtor();
}

void RoleDBTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBTaskData_descriptor_;
}

const RoleDBTaskData& RoleDBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleDBTaskData* RoleDBTaskData::default_instance_ = NULL;

RoleDBTaskData* RoleDBTaskData::New() const {
  return new RoleDBTaskData;
}

void RoleDBTaskData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleDBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBTaskData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBTaskData::MergeFrom(const RoleDBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBTaskData::CopyFrom(const RoleDBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBTaskData::IsInitialized() const {

  return true;
}

void RoleDBTaskData::Swap(RoleDBTaskData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBTaskData_descriptor_;
  metadata.reflection = RoleDBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartEntryDBInfo::kIdFieldNumber;
const int GrowPartEntryDBInfo::kLvFieldNumber;
#endif  // !_MSC_VER

GrowPartEntryDBInfo::GrowPartEntryDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartEntryDBInfo::InitAsDefaultInstance() {
}

GrowPartEntryDBInfo::GrowPartEntryDBInfo(const GrowPartEntryDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartEntryDBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartEntryDBInfo::~GrowPartEntryDBInfo() {
  SharedDtor();
}

void GrowPartEntryDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartEntryDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartEntryDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartEntryDBInfo_descriptor_;
}

const GrowPartEntryDBInfo& GrowPartEntryDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GrowPartEntryDBInfo* GrowPartEntryDBInfo::default_instance_ = NULL;

GrowPartEntryDBInfo* GrowPartEntryDBInfo::New() const {
  return new GrowPartEntryDBInfo;
}

void GrowPartEntryDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartEntryDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartEntryDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartEntryDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartEntryDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartEntryDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartEntryDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartEntryDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartEntryDBInfo::MergeFrom(const GrowPartEntryDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartEntryDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartEntryDBInfo::CopyFrom(const GrowPartEntryDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartEntryDBInfo::IsInitialized() const {

  return true;
}

void GrowPartEntryDBInfo::Swap(GrowPartEntryDBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartEntryDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartEntryDBInfo_descriptor_;
  metadata.reflection = GrowPartEntryDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartDBData::kTypeFieldNumber;
const int GrowPartDBData::kEntrysFieldNumber;
const int GrowPartDBData::kCurIdFieldNumber;
#endif  // !_MSC_VER

GrowPartDBData::GrowPartDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartDBData::InitAsDefaultInstance() {
}

GrowPartDBData::GrowPartDBData(const GrowPartDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartDBData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  curid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartDBData::~GrowPartDBData() {
  SharedDtor();
}

void GrowPartDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartDBData_descriptor_;
}

const GrowPartDBData& GrowPartDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GrowPartDBData* GrowPartDBData::default_instance_ = NULL;

GrowPartDBData* GrowPartDBData::New() const {
  return new GrowPartDBData;
}

void GrowPartDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    curid_ = GOOGLE_LONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_curId;
        break;
      }

      // optional int64 curId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int64 curId = 3;
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int64 curId = 3;
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 curId = 3;
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curid());
    }

  }
  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartDBData::MergeFrom(const GrowPartDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_curid()) {
      set_curid(from.curid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartDBData::CopyFrom(const GrowPartDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartDBData::IsInitialized() const {

  return true;
}

void GrowPartDBData::Swap(GrowPartDBData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    entrys_.Swap(&other->entrys_);
    std::swap(curid_, other->curid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartDBData_descriptor_;
  metadata.reflection = GrowPartDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowDBData::kPartsFieldNumber;
#endif  // !_MSC_VER

GrowDBData::GrowDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowDBData::InitAsDefaultInstance() {
}

GrowDBData::GrowDBData(const GrowDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowDBData::~GrowDBData() {
  SharedDtor();
}

void GrowDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowDBData_descriptor_;
}

const GrowDBData& GrowDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GrowDBData* GrowDBData::default_instance_ = NULL;

GrowDBData* GrowDBData::New() const {
  return new GrowDBData;
}

void GrowDBData::Clear() {
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GrowPartDBData parts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_parts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GrowPartDBData parts = 1;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GrowPartDBData parts = 1;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GrowPartDBData parts = 1;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowDBData::MergeFrom(const GrowDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowDBData::CopyFrom(const GrowDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowDBData::IsInitialized() const {

  return true;
}

void GrowDBData::Swap(GrowDBData* other) {
  if (other != this) {
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowDBData_descriptor_;
  metadata.reflection = GrowDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayUseItemData::kInfoFieldNumber;
#endif  // !_MSC_VER

DayUseItemData::DayUseItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayUseItemData::InitAsDefaultInstance() {
}

DayUseItemData::DayUseItemData(const DayUseItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayUseItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayUseItemData::~DayUseItemData() {
  SharedDtor();
}

void DayUseItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayUseItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayUseItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayUseItemData_descriptor_;
}

const DayUseItemData& DayUseItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DayUseItemData* DayUseItemData::default_instance_ = NULL;

DayUseItemData* DayUseItemData::New() const {
  return new DayUseItemData;
}

void DayUseItemData::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayUseItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayUseItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayUseItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayUseItemData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair64 info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayUseItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayUseItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayUseItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayUseItemData::MergeFrom(const DayUseItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayUseItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayUseItemData::CopyFrom(const DayUseItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayUseItemData::IsInitialized() const {

  return true;
}

void DayUseItemData::Swap(DayUseItemData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayUseItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayUseItemData_descriptor_;
  metadata.reflection = DayUseItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterArenaData::kChallengeTimesFieldNumber;
const int CharacterArenaData::kUpdateTimeFieldNumber;
const int CharacterArenaData::kHistoryRankIdFieldNumber;
const int CharacterArenaData::kBuyChallengeTimesFieldNumber;
const int CharacterArenaData::kResultFieldNumber;
const int CharacterArenaData::kChallRewardFieldNumber;
const int CharacterArenaData::kAllChallengeTimesFieldNumber;
const int CharacterArenaData::kRankIdFieldNumber;
#endif  // !_MSC_VER

CharacterArenaData::CharacterArenaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterArenaData::InitAsDefaultInstance() {
}

CharacterArenaData::CharacterArenaData(const CharacterArenaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterArenaData::SharedCtor() {
  _cached_size_ = 0;
  challengetimes_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  historyrankid_ = 20001u;
  buychallengetimes_ = 0u;
  allchallengetimes_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterArenaData::~CharacterArenaData() {
  SharedDtor();
}

void CharacterArenaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterArenaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterArenaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterArenaData_descriptor_;
}

const CharacterArenaData& CharacterArenaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CharacterArenaData* CharacterArenaData::default_instance_ = NULL;

CharacterArenaData* CharacterArenaData::New() const {
  return new CharacterArenaData;
}

void CharacterArenaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challengetimes_ = 0u;
    updatetime_ = GOOGLE_ULONGLONG(0);
    historyrankid_ = 20001u;
    buychallengetimes_ = 0u;
    allchallengetimes_ = 0;
    rank_id_ = 0;
  }
  result_.Clear();
  chall_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterArenaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challengeTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }

      // optional uint64 updateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_historyRankId;
        break;
      }

      // optional uint32 historyRankId = 3 [default = 20001];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historyrankid_)));
          set_has_historyrankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyChallengeTimes;
        break;
      }

      // optional uint32 buyChallengeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengetimes_)));
          set_has_buychallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // repeated .proto_ff.ArenaChallResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        if (input->ExpectTag(58)) goto parse_chall_reward;
        break;
      }

      // repeated .proto_ff.ChallArenaReward chall_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chall_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chall_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chall_reward;
        if (input->ExpectTag(64)) goto parse_allChallengeTimes;
        break;
      }

      // optional int32 allChallengeTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allchallengetimes_)));
          set_has_allchallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterArenaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 challengeTimes = 1;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challengetimes(), output);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatetime(), output);
  }

  // optional uint32 historyRankId = 3 [default = 20001];
  if (has_historyrankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->historyrankid(), output);
  }

  // optional uint32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buychallengetimes(), output);
  }

  // repeated .proto_ff.ArenaChallResult result = 5;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->result(i), output);
  }

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  for (int i = 0; i < this->chall_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chall_reward(i), output);
  }

  // optional int32 allChallengeTimes = 8;
  if (has_allchallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->allchallengetimes(), output);
  }

  // optional int32 rank_id = 9;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rank_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterArenaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 challengeTimes = 1;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challengetimes(), target);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatetime(), target);
  }

  // optional uint32 historyRankId = 3 [default = 20001];
  if (has_historyrankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->historyrankid(), target);
  }

  // optional uint32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buychallengetimes(), target);
  }

  // repeated .proto_ff.ArenaChallResult result = 5;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->result(i), target);
  }

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  for (int i = 0; i < this->chall_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chall_reward(i), target);
  }

  // optional int32 allChallengeTimes = 8;
  if (has_allchallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->allchallengetimes(), target);
  }

  // optional int32 rank_id = 9;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rank_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterArenaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 challengeTimes = 1;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetimes());
    }

    // optional uint64 updateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional uint32 historyRankId = 3 [default = 20001];
    if (has_historyrankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historyrankid());
    }

    // optional uint32 buyChallengeTimes = 4;
    if (has_buychallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengetimes());
    }

    // optional int32 allChallengeTimes = 8;
    if (has_allchallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allchallengetimes());
    }

    // optional int32 rank_id = 9;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  // repeated .proto_ff.ArenaChallResult result = 5;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  total_size += 1 * this->chall_reward_size();
  for (int i = 0; i < this->chall_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chall_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterArenaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterArenaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterArenaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterArenaData::MergeFrom(const CharacterArenaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  chall_reward_.MergeFrom(from.chall_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_historyrankid()) {
      set_historyrankid(from.historyrankid());
    }
    if (from.has_buychallengetimes()) {
      set_buychallengetimes(from.buychallengetimes());
    }
    if (from.has_allchallengetimes()) {
      set_allchallengetimes(from.allchallengetimes());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterArenaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterArenaData::CopyFrom(const CharacterArenaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterArenaData::IsInitialized() const {

  return true;
}

void CharacterArenaData::Swap(CharacterArenaData* other) {
  if (other != this) {
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(historyrankid_, other->historyrankid_);
    std::swap(buychallengetimes_, other->buychallengetimes_);
    result_.Swap(&other->result_);
    chall_reward_.Swap(&other->chall_reward_);
    std::swap(allchallengetimes_, other->allchallengetimes_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterArenaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterArenaData_descriptor_;
  metadata.reflection = CharacterArenaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiniDBData::kLastTimeFieldNumber;
const int MiniDBData::kUseItemFieldNumber;
const int MiniDBData::kArenaDataFieldNumber;
#endif  // !_MSC_VER

MiniDBData::MiniDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiniDBData::InitAsDefaultInstance() {
  useitem_ = const_cast< ::proto_ff::DayUseItemData*>(&::proto_ff::DayUseItemData::default_instance());
  arena_data_ = const_cast< ::proto_ff::CharacterArenaData*>(&::proto_ff::CharacterArenaData::default_instance());
}

MiniDBData::MiniDBData(const MiniDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiniDBData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  useitem_ = NULL;
  arena_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiniDBData::~MiniDBData() {
  SharedDtor();
}

void MiniDBData::SharedDtor() {
  if (this != default_instance_) {
    delete useitem_;
    delete arena_data_;
  }
}

void MiniDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniDBData_descriptor_;
}

const MiniDBData& MiniDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MiniDBData* MiniDBData::default_instance_ = NULL;

MiniDBData* MiniDBData::New() const {
  return new MiniDBData;
}

void MiniDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
    if (has_useitem()) {
      if (useitem_ != NULL) useitem_->::proto_ff::DayUseItemData::Clear();
    }
    if (has_arena_data()) {
      if (arena_data_ != NULL) arena_data_->::proto_ff::CharacterArenaData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiniDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lastTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_useItem;
        break;
      }

      // optional .proto_ff.DayUseItemData useItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_arena_data;
        break;
      }

      // optional .proto_ff.CharacterArenaData arena_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiniDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lastTime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lasttime(), output);
  }

  // optional .proto_ff.DayUseItemData useItem = 2;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->useitem(), output);
  }

  // optional .proto_ff.CharacterArenaData arena_data = 3;
  if (has_arena_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arena_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiniDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 lastTime = 1;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lasttime(), target);
  }

  // optional .proto_ff.DayUseItemData useItem = 2;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->useitem(), target);
  }

  // optional .proto_ff.CharacterArenaData arena_data = 3;
  if (has_arena_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arena_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiniDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lastTime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

    // optional .proto_ff.DayUseItemData useItem = 2;
    if (has_useitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->useitem());
    }

    // optional .proto_ff.CharacterArenaData arena_data = 3;
    if (has_arena_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiniDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiniDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiniDBData::MergeFrom(const MiniDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_useitem()) {
      mutable_useitem()->::proto_ff::DayUseItemData::MergeFrom(from.useitem());
    }
    if (from.has_arena_data()) {
      mutable_arena_data()->::proto_ff::CharacterArenaData::MergeFrom(from.arena_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiniDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniDBData::CopyFrom(const MiniDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniDBData::IsInitialized() const {

  return true;
}

void MiniDBData::Swap(MiniDBData* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(useitem_, other->useitem_);
    std::swap(arena_data_, other->arena_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiniDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiniDBData_descriptor_;
  metadata.reflection = MiniDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeDataInfo::kFacadeTypeFieldNumber;
const int FacadeDataInfo::kFacadeIdFieldNumber;
const int FacadeDataInfo::kFacadeLevFieldNumber;
const int FacadeDataInfo::kFacadeExpFieldNumber;
const int FacadeDataInfo::kUseSoulItemFieldNumber;
const int FacadeDataInfo::kUseFacadeFieldNumber;
const int FacadeDataInfo::kEquipFantasyIdFieldNumber;
const int FacadeDataInfo::kFantasyMapFieldNumber;
const int FacadeDataInfo::kFragmentMapFieldNumber;
const int FacadeDataInfo::kSkillDataFieldNumber;
const int FacadeDataInfo::kSoulDataFieldNumber;
#endif  // !_MSC_VER

FacadeDataInfo::FacadeDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeDataInfo::InitAsDefaultInstance() {
  soul_data_ = const_cast< ::proto_ff::FacadeSoulData*>(&::proto_ff::FacadeSoulData::default_instance());
}

FacadeDataInfo::FacadeDataInfo(const FacadeDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeDataInfo::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  facade_id_ = GOOGLE_ULONGLONG(0);
  facade_lev_ = 0u;
  facade_exp_ = GOOGLE_ULONGLONG(0);
  use_soul_item_ = false;
  use_facade_ = false;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  soul_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeDataInfo::~FacadeDataInfo() {
  SharedDtor();
}

void FacadeDataInfo::SharedDtor() {
  if (this != default_instance_) {
    delete soul_data_;
  }
}

void FacadeDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeDataInfo_descriptor_;
}

const FacadeDataInfo& FacadeDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FacadeDataInfo* FacadeDataInfo::default_instance_ = NULL;

FacadeDataInfo* FacadeDataInfo::New() const {
  return new FacadeDataInfo;
}

void FacadeDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    facade_id_ = GOOGLE_ULONGLONG(0);
    facade_lev_ = 0u;
    facade_exp_ = GOOGLE_ULONGLONG(0);
    use_soul_item_ = false;
    use_facade_ = false;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_soul_data()) {
      if (soul_data_ != NULL) soul_data_->::proto_ff::FacadeSoulData::Clear();
    }
  }
  fantasy_map_.Clear();
  fragment_map_.Clear();
  skill_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_facade_id;
        break;
      }

      // optional uint64 facade_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_id_)));
          set_has_facade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_facade_lev;
        break;
      }

      // optional uint32 facade_lev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_lev_)));
          set_has_facade_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_facade_exp;
        break;
      }

      // optional uint64 facade_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_exp_)));
          set_has_facade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_soul_item;
        break;
      }

      // optional bool use_soul_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_soul_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_soul_item_)));
          set_has_use_soul_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fantasy_map;
        break;
      }

      // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fantasy_map;
        if (input->ExpectTag(74)) goto parse_fragment_map;
        break;
      }

      // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fragment_map;
        if (input->ExpectTag(82)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.FacadeSkillData skill_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_skill_data;
        if (input->ExpectTag(90)) goto parse_soul_data;
        break;
      }

      // optional .proto_ff.FacadeSoulData soul_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soul_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 facade_id = 2;
  if (has_facade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->facade_id(), output);
  }

  // optional uint32 facade_lev = 3;
  if (has_facade_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->facade_lev(), output);
  }

  // optional uint64 facade_exp = 4;
  if (has_facade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->facade_exp(), output);
  }

  // optional bool use_soul_item = 5;
  if (has_use_soul_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_soul_item(), output);
  }

  // optional bool use_facade = 6;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_facade(), output);
  }

  // optional uint64 equip_fantasy_id = 7;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->equip_fantasy_id(), output);
  }

  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fantasy_map(i), output);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fragment_map(i), output);
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->skill_data(i), output);
  }

  // optional .proto_ff.FacadeSoulData soul_data = 11;
  if (has_soul_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->soul_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 facade_id = 2;
  if (has_facade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->facade_id(), target);
  }

  // optional uint32 facade_lev = 3;
  if (has_facade_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->facade_lev(), target);
  }

  // optional uint64 facade_exp = 4;
  if (has_facade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->facade_exp(), target);
  }

  // optional bool use_soul_item = 5;
  if (has_use_soul_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_soul_item(), target);
  }

  // optional bool use_facade = 6;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_facade(), target);
  }

  // optional uint64 equip_fantasy_id = 7;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->equip_fantasy_id(), target);
  }

  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fantasy_map(i), target);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fragment_map(i), target);
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->skill_data(i), target);
  }

  // optional .proto_ff.FacadeSoulData soul_data = 11;
  if (has_soul_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->soul_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 facade_id = 2;
    if (has_facade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_id());
    }

    // optional uint32 facade_lev = 3;
    if (has_facade_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_lev());
    }

    // optional uint64 facade_exp = 4;
    if (has_facade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_exp());
    }

    // optional bool use_soul_item = 5;
    if (has_use_soul_item()) {
      total_size += 1 + 1;
    }

    // optional bool use_facade = 6;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional uint64 equip_fantasy_id = 7;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .proto_ff.FacadeSoulData soul_data = 11;
    if (has_soul_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soul_data());
    }

  }
  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  total_size += 1 * this->fantasy_map_size();
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_map(i));
  }

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  total_size += 1 * this->fragment_map_size();
  for (int i = 0; i < this->fragment_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_map(i));
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeDataInfo::MergeFrom(const FacadeDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_map_.MergeFrom(from.fantasy_map_);
  fragment_map_.MergeFrom(from.fragment_map_);
  skill_data_.MergeFrom(from.skill_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_facade_id()) {
      set_facade_id(from.facade_id());
    }
    if (from.has_facade_lev()) {
      set_facade_lev(from.facade_lev());
    }
    if (from.has_facade_exp()) {
      set_facade_exp(from.facade_exp());
    }
    if (from.has_use_soul_item()) {
      set_use_soul_item(from.use_soul_item());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_soul_data()) {
      mutable_soul_data()->::proto_ff::FacadeSoulData::MergeFrom(from.soul_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeDataInfo::CopyFrom(const FacadeDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeDataInfo::IsInitialized() const {

  return true;
}

void FacadeDataInfo::Swap(FacadeDataInfo* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(facade_id_, other->facade_id_);
    std::swap(facade_lev_, other->facade_lev_);
    std::swap(facade_exp_, other->facade_exp_);
    std::swap(use_soul_item_, other->use_soul_item_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    fantasy_map_.Swap(&other->fantasy_map_);
    fragment_map_.Swap(&other->fragment_map_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(soul_data_, other->soul_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeDataInfo_descriptor_;
  metadata.reflection = FacadeDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountDataInfo::kMountIdFieldNumber;
const int MountDataInfo::kMountLevFieldNumber;
const int MountDataInfo::kMountExpFieldNumber;
const int MountDataInfo::kUseFacadeFieldNumber;
const int MountDataInfo::kEquipFantasyIdFieldNumber;
const int MountDataInfo::kFantasyMapFieldNumber;
const int MountDataInfo::kFragmentMapFieldNumber;
const int MountDataInfo::kSkillDataFieldNumber;
const int MountDataInfo::kKunDataFieldNumber;
const int MountDataInfo::kBloodDataFieldNumber;
const int MountDataInfo::kBabySlotDataFieldNumber;
const int MountDataInfo::kRideStateFieldNumber;
const int MountDataInfo::kMountModelIdFieldNumber;
const int MountDataInfo::kLastMountModelIdFieldNumber;
#endif  // !_MSC_VER

MountDataInfo::MountDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountDataInfo::InitAsDefaultInstance() {
}

MountDataInfo::MountDataInfo(const MountDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountDataInfo::SharedCtor() {
  _cached_size_ = 0;
  mount_id_ = GOOGLE_ULONGLONG(0);
  mount_lev_ = 0u;
  mount_exp_ = GOOGLE_ULONGLONG(0);
  use_facade_ = false;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  ride_state_ = 0u;
  mount_model_id_ = GOOGLE_ULONGLONG(0);
  last_mount_model_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountDataInfo::~MountDataInfo() {
  SharedDtor();
}

void MountDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountDataInfo_descriptor_;
}

const MountDataInfo& MountDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MountDataInfo* MountDataInfo::default_instance_ = NULL;

MountDataInfo* MountDataInfo::New() const {
  return new MountDataInfo;
}

void MountDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_id_ = GOOGLE_ULONGLONG(0);
    mount_lev_ = 0u;
    mount_exp_ = GOOGLE_ULONGLONG(0);
    use_facade_ = false;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    ride_state_ = 0u;
    mount_model_id_ = GOOGLE_ULONGLONG(0);
    last_mount_model_id_ = GOOGLE_ULONGLONG(0);
  }
  fantasy_map_.Clear();
  fragment_map_.Clear();
  skill_data_.Clear();
  kun_data_.Clear();
  blood_data_.Clear();
  baby_slot_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mount_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_lev;
        break;
      }

      // optional uint32 mount_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_lev_)));
          set_has_mount_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mount_exp;
        break;
      }

      // optional uint64 mount_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mount_exp_)));
          set_has_mount_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fantasy_map;
        break;
      }

      // repeated .proto_ff.MountFantasyData fantasy_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fantasy_map;
        if (input->ExpectTag(58)) goto parse_fragment_map;
        break;
      }

      // repeated .proto_ff.MountFragmentData fragment_map = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fragment_map;
        if (input->ExpectTag(66)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.MountSkillData skill_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill_data;
        if (input->ExpectTag(74)) goto parse_kun_data;
        break;
      }

      // repeated .proto_ff.MountKunData kun_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kun_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kun_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kun_data;
        if (input->ExpectTag(82)) goto parse_blood_data;
        break;
      }

      // repeated .proto_ff.MountBloodData blood_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blood_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blood_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_blood_data;
        if (input->ExpectTag(90)) goto parse_baby_slot_data;
        break;
      }

      // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baby_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baby_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_baby_slot_data;
        if (input->ExpectTag(96)) goto parse_ride_state;
        break;
      }

      // optional uint32 ride_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ride_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ride_state_)));
          set_has_ride_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mount_model_id;
        break;
      }

      // optional uint64 mount_model_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mount_model_id_)));
          set_has_mount_model_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_last_mount_model_id;
        break;
      }

      // optional uint64 last_mount_model_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_mount_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_mount_model_id_)));
          set_has_last_mount_model_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mount_id = 1;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mount_id(), output);
  }

  // optional uint32 mount_lev = 2;
  if (has_mount_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mount_lev(), output);
  }

  // optional uint64 mount_exp = 3;
  if (has_mount_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mount_exp(), output);
  }

  // optional bool use_facade = 4;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_facade(), output);
  }

  // optional uint64 equip_fantasy_id = 5;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->equip_fantasy_id(), output);
  }

  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fantasy_map(i), output);
  }

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fragment_map(i), output);
  }

  // repeated .proto_ff.MountSkillData skill_data = 8;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skill_data(i), output);
  }

  // repeated .proto_ff.MountKunData kun_data = 9;
  for (int i = 0; i < this->kun_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kun_data(i), output);
  }

  // repeated .proto_ff.MountBloodData blood_data = 10;
  for (int i = 0; i < this->blood_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->blood_data(i), output);
  }

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  for (int i = 0; i < this->baby_slot_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->baby_slot_data(i), output);
  }

  // optional uint32 ride_state = 12;
  if (has_ride_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ride_state(), output);
  }

  // optional uint64 mount_model_id = 13;
  if (has_mount_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->mount_model_id(), output);
  }

  // optional uint64 last_mount_model_id = 14;
  if (has_last_mount_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->last_mount_model_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mount_id = 1;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mount_id(), target);
  }

  // optional uint32 mount_lev = 2;
  if (has_mount_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mount_lev(), target);
  }

  // optional uint64 mount_exp = 3;
  if (has_mount_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mount_exp(), target);
  }

  // optional bool use_facade = 4;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_facade(), target);
  }

  // optional uint64 equip_fantasy_id = 5;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->equip_fantasy_id(), target);
  }

  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fantasy_map(i), target);
  }

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fragment_map(i), target);
  }

  // repeated .proto_ff.MountSkillData skill_data = 8;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skill_data(i), target);
  }

  // repeated .proto_ff.MountKunData kun_data = 9;
  for (int i = 0; i < this->kun_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kun_data(i), target);
  }

  // repeated .proto_ff.MountBloodData blood_data = 10;
  for (int i = 0; i < this->blood_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->blood_data(i), target);
  }

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  for (int i = 0; i < this->baby_slot_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->baby_slot_data(i), target);
  }

  // optional uint32 ride_state = 12;
  if (has_ride_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ride_state(), target);
  }

  // optional uint64 mount_model_id = 13;
  if (has_mount_model_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->mount_model_id(), target);
  }

  // optional uint64 last_mount_model_id = 14;
  if (has_last_mount_model_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->last_mount_model_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mount_id = 1;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mount_id());
    }

    // optional uint32 mount_lev = 2;
    if (has_mount_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_lev());
    }

    // optional uint64 mount_exp = 3;
    if (has_mount_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mount_exp());
    }

    // optional bool use_facade = 4;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional uint64 equip_fantasy_id = 5;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 ride_state = 12;
    if (has_ride_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ride_state());
    }

    // optional uint64 mount_model_id = 13;
    if (has_mount_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mount_model_id());
    }

    // optional uint64 last_mount_model_id = 14;
    if (has_last_mount_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_mount_model_id());
    }

  }
  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  total_size += 1 * this->fantasy_map_size();
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_map(i));
  }

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  total_size += 1 * this->fragment_map_size();
  for (int i = 0; i < this->fragment_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_map(i));
  }

  // repeated .proto_ff.MountSkillData skill_data = 8;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.MountKunData kun_data = 9;
  total_size += 1 * this->kun_data_size();
  for (int i = 0; i < this->kun_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kun_data(i));
  }

  // repeated .proto_ff.MountBloodData blood_data = 10;
  total_size += 1 * this->blood_data_size();
  for (int i = 0; i < this->blood_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blood_data(i));
  }

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  total_size += 1 * this->baby_slot_data_size();
  for (int i = 0; i < this->baby_slot_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baby_slot_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountDataInfo::MergeFrom(const MountDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_map_.MergeFrom(from.fantasy_map_);
  fragment_map_.MergeFrom(from.fragment_map_);
  skill_data_.MergeFrom(from.skill_data_);
  kun_data_.MergeFrom(from.kun_data_);
  blood_data_.MergeFrom(from.blood_data_);
  baby_slot_data_.MergeFrom(from.baby_slot_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_mount_lev()) {
      set_mount_lev(from.mount_lev());
    }
    if (from.has_mount_exp()) {
      set_mount_exp(from.mount_exp());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_ride_state()) {
      set_ride_state(from.ride_state());
    }
    if (from.has_mount_model_id()) {
      set_mount_model_id(from.mount_model_id());
    }
    if (from.has_last_mount_model_id()) {
      set_last_mount_model_id(from.last_mount_model_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountDataInfo::CopyFrom(const MountDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountDataInfo::IsInitialized() const {

  return true;
}

void MountDataInfo::Swap(MountDataInfo* other) {
  if (other != this) {
    std::swap(mount_id_, other->mount_id_);
    std::swap(mount_lev_, other->mount_lev_);
    std::swap(mount_exp_, other->mount_exp_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    fantasy_map_.Swap(&other->fantasy_map_);
    fragment_map_.Swap(&other->fragment_map_);
    skill_data_.Swap(&other->skill_data_);
    kun_data_.Swap(&other->kun_data_);
    blood_data_.Swap(&other->blood_data_);
    baby_slot_data_.Swap(&other->baby_slot_data_);
    std::swap(ride_state_, other->ride_state_);
    std::swap(mount_model_id_, other->mount_model_id_);
    std::swap(last_mount_model_id_, other->last_mount_model_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountDataInfo_descriptor_;
  metadata.reflection = MountDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityDataInfo::kDeityIdFieldNumber;
const int DeityDataInfo::kDeityLevFieldNumber;
const int DeityDataInfo::kDeityExpFieldNumber;
const int DeityDataInfo::kFantasyMapFieldNumber;
const int DeityDataInfo::kFragmentMapFieldNumber;
const int DeityDataInfo::kSkillDataFieldNumber;
const int DeityDataInfo::kBattleDataFieldNumber;
#endif  // !_MSC_VER

DeityDataInfo::DeityDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityDataInfo::InitAsDefaultInstance() {
}

DeityDataInfo::DeityDataInfo(const DeityDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityDataInfo::SharedCtor() {
  _cached_size_ = 0;
  deity_id_ = GOOGLE_ULONGLONG(0);
  deity_lev_ = 0u;
  deity_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityDataInfo::~DeityDataInfo() {
  SharedDtor();
}

void DeityDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityDataInfo_descriptor_;
}

const DeityDataInfo& DeityDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DeityDataInfo* DeityDataInfo::default_instance_ = NULL;

DeityDataInfo* DeityDataInfo::New() const {
  return new DeityDataInfo;
}

void DeityDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deity_id_ = GOOGLE_ULONGLONG(0);
    deity_lev_ = 0u;
    deity_exp_ = GOOGLE_ULONGLONG(0);
  }
  fantasy_map_.Clear();
  fragment_map_.Clear();
  skill_data_.Clear();
  battle_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 deity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deity_id_)));
          set_has_deity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deity_lev;
        break;
      }

      // optional uint32 deity_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deity_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deity_lev_)));
          set_has_deity_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deity_exp;
        break;
      }

      // optional uint64 deity_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deity_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deity_exp_)));
          set_has_deity_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasy_map;
        break;
      }

      // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasy_map;
        if (input->ExpectTag(42)) goto parse_fragment_map;
        break;
      }

      // repeated .proto_ff.DeityFragmentData fragment_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fragment_map;
        if (input->ExpectTag(50)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.DeitySkillData skill_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill_data;
        if (input->ExpectTag(58)) goto parse_battle_data;
        break;
      }

      // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_battle_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 deity_id = 1;
  if (has_deity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->deity_id(), output);
  }

  // optional uint32 deity_lev = 2;
  if (has_deity_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deity_lev(), output);
  }

  // optional uint64 deity_exp = 3;
  if (has_deity_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->deity_exp(), output);
  }

  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fantasy_map(i), output);
  }

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fragment_map(i), output);
  }

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill_data(i), output);
  }

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  for (int i = 0; i < this->battle_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->battle_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 deity_id = 1;
  if (has_deity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->deity_id(), target);
  }

  // optional uint32 deity_lev = 2;
  if (has_deity_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deity_lev(), target);
  }

  // optional uint64 deity_exp = 3;
  if (has_deity_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->deity_exp(), target);
  }

  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fantasy_map(i), target);
  }

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fragment_map(i), target);
  }

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill_data(i), target);
  }

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  for (int i = 0; i < this->battle_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->battle_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 deity_id = 1;
    if (has_deity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deity_id());
    }

    // optional uint32 deity_lev = 2;
    if (has_deity_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deity_lev());
    }

    // optional uint64 deity_exp = 3;
    if (has_deity_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deity_exp());
    }

  }
  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  total_size += 1 * this->fantasy_map_size();
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_map(i));
  }

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  total_size += 1 * this->fragment_map_size();
  for (int i = 0; i < this->fragment_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_map(i));
  }

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  total_size += 1 * this->battle_data_size();
  for (int i = 0; i < this->battle_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityDataInfo::MergeFrom(const DeityDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_map_.MergeFrom(from.fantasy_map_);
  fragment_map_.MergeFrom(from.fragment_map_);
  skill_data_.MergeFrom(from.skill_data_);
  battle_data_.MergeFrom(from.battle_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deity_id()) {
      set_deity_id(from.deity_id());
    }
    if (from.has_deity_lev()) {
      set_deity_lev(from.deity_lev());
    }
    if (from.has_deity_exp()) {
      set_deity_exp(from.deity_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityDataInfo::CopyFrom(const DeityDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityDataInfo::IsInitialized() const {

  for (int i = 0; i < fantasy_map_size(); i++) {
    if (!this->fantasy_map(i).IsInitialized()) return false;
  }
  return true;
}

void DeityDataInfo::Swap(DeityDataInfo* other) {
  if (other != this) {
    std::swap(deity_id_, other->deity_id_);
    std::swap(deity_lev_, other->deity_lev_);
    std::swap(deity_exp_, other->deity_exp_);
    fantasy_map_.Swap(&other->fantasy_map_);
    fragment_map_.Swap(&other->fragment_map_);
    skill_data_.Swap(&other->skill_data_);
    battle_data_.Swap(&other->battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityDataInfo_descriptor_;
  metadata.reflection = DeityDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeDBData::kDataFieldNumber;
#endif  // !_MSC_VER

FacadeDBData::FacadeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeDBData::InitAsDefaultInstance() {
}

FacadeDBData::FacadeDBData(const FacadeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeDBData::~FacadeDBData() {
  SharedDtor();
}

void FacadeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeDBData_descriptor_;
}

const FacadeDBData& FacadeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FacadeDBData* FacadeDBData::default_instance_ = NULL;

FacadeDBData* FacadeDBData::New() const {
  return new FacadeDBData;
}

void FacadeDBData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FacadeDataInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FacadeDataInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FacadeDataInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FacadeDataInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeDBData::MergeFrom(const FacadeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeDBData::CopyFrom(const FacadeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeDBData::IsInitialized() const {

  return true;
}

void FacadeDBData::Swap(FacadeDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeDBData_descriptor_;
  metadata.reflection = FacadeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBInfo::kSkillIdFieldNumber;
const int SkillDBInfo::kLevelFieldNumber;
const int SkillDBInfo::kWakeupFieldNumber;
const int SkillDBInfo::kUseMscFieldNumber;
#endif  // !_MSC_VER

SkillDBInfo::SkillDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBInfo::InitAsDefaultInstance() {
}

SkillDBInfo::SkillDBInfo(const SkillDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  wakeup_ = 0;
  use_msc_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBInfo::~SkillDBInfo() {
  SharedDtor();
}

void SkillDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBInfo_descriptor_;
}

const SkillDBInfo& SkillDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SkillDBInfo* SkillDBInfo::default_instance_ = NULL;

SkillDBInfo* SkillDBInfo::New() const {
  return new SkillDBInfo;
}

void SkillDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    wakeup_ = 0;
    use_msc_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wakeup;
        break;
      }

      // optional int32 wakeup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wakeup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeup_)));
          set_has_wakeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_msc;
        break;
      }

      // optional int64 use_msc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_msc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_msc_)));
          set_has_use_msc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 wakeup = 3;
  if (has_wakeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wakeup(), output);
  }

  // optional int64 use_msc = 4;
  if (has_use_msc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->use_msc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 wakeup = 3;
  if (has_wakeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wakeup(), target);
  }

  // optional int64 use_msc = 4;
  if (has_use_msc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->use_msc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 wakeup = 3;
    if (has_wakeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wakeup());
    }

    // optional int64 use_msc = 4;
    if (has_use_msc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_msc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBInfo::MergeFrom(const SkillDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_wakeup()) {
      set_wakeup(from.wakeup());
    }
    if (from.has_use_msc()) {
      set_use_msc(from.use_msc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBInfo::CopyFrom(const SkillDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBInfo::IsInitialized() const {

  return true;
}

void SkillDBInfo::Swap(SkillDBInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(wakeup_, other->wakeup_);
    std::swap(use_msc_, other->use_msc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBInfo_descriptor_;
  metadata.reflection = SkillDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBPos::kSkillIdFieldNumber;
const int SkillDBPos::kPosFieldNumber;
const int SkillDBPos::kUseFieldNumber;
#endif  // !_MSC_VER

SkillDBPos::SkillDBPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBPos::InitAsDefaultInstance() {
}

SkillDBPos::SkillDBPos(const SkillDBPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBPos::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  use_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBPos::~SkillDBPos() {
  SharedDtor();
}

void SkillDBPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBPos_descriptor_;
}

const SkillDBPos& SkillDBPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SkillDBPos* SkillDBPos::default_instance_ = NULL;

SkillDBPos* SkillDBPos::New() const {
  return new SkillDBPos;
}

void SkillDBPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
    use_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use;
        break;
      }

      // optional int32 use = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_)));
          set_has_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional int32 use = 3;
  if (has_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional int32 use = 3;
  if (has_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional int32 use = 3;
    if (has_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBPos::MergeFrom(const SkillDBPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_use()) {
      set_use(from.use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBPos::CopyFrom(const SkillDBPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBPos::IsInitialized() const {

  return true;
}

void SkillDBPos::Swap(SkillDBPos* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(pos_, other->pos_);
    std::swap(use_, other->use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBPos_descriptor_;
  metadata.reflection = SkillDBPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBAdvPos::kPosFieldNumber;
const int SkillDBAdvPos::kAdvanceFieldNumber;
const int SkillDBAdvPos::kUnlockFieldNumber;
#endif  // !_MSC_VER

SkillDBAdvPos::SkillDBAdvPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBAdvPos::InitAsDefaultInstance() {
}

SkillDBAdvPos::SkillDBAdvPos(const SkillDBAdvPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBAdvPos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  advance_ = 0u;
  unlock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBAdvPos::~SkillDBAdvPos() {
  SharedDtor();
}

void SkillDBAdvPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBAdvPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBAdvPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBAdvPos_descriptor_;
}

const SkillDBAdvPos& SkillDBAdvPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SkillDBAdvPos* SkillDBAdvPos::default_instance_ = NULL;

SkillDBAdvPos* SkillDBAdvPos::New() const {
  return new SkillDBAdvPos;
}

void SkillDBAdvPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    advance_ = 0u;
    unlock_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBAdvPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advance;
        break;
      }

      // optional uint32 advance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional uint32 unlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBAdvPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 advance = 2;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advance(), output);
  }

  // optional uint32 unlock = 3;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBAdvPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 advance = 2;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advance(), target);
  }

  // optional uint32 unlock = 3;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBAdvPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 advance = 2;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance());
    }

    // optional uint32 unlock = 3;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBAdvPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBAdvPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBAdvPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBAdvPos::MergeFrom(const SkillDBAdvPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBAdvPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBAdvPos::CopyFrom(const SkillDBAdvPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBAdvPos::IsInitialized() const {

  return true;
}

void SkillDBAdvPos::Swap(SkillDBAdvPos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(advance_, other->advance_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBAdvPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBAdvPos_descriptor_;
  metadata.reflection = SkillDBAdvPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBAdvInfo::kAdvanceFieldNumber;
const int SkillDBAdvInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillDBAdvInfo::SkillDBAdvInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBAdvInfo::InitAsDefaultInstance() {
}

SkillDBAdvInfo::SkillDBAdvInfo(const SkillDBAdvInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBAdvInfo::SharedCtor() {
  _cached_size_ = 0;
  advance_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBAdvInfo::~SkillDBAdvInfo() {
  SharedDtor();
}

void SkillDBAdvInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBAdvInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBAdvInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBAdvInfo_descriptor_;
}

const SkillDBAdvInfo& SkillDBAdvInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SkillDBAdvInfo* SkillDBAdvInfo::default_instance_ = NULL;

SkillDBAdvInfo* SkillDBAdvInfo::New() const {
  return new SkillDBAdvInfo;
}

void SkillDBAdvInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advance_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBAdvInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 advance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBAdvInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 advance = 1;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->advance(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBAdvInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 advance = 1;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->advance(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBAdvInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 advance = 1;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBAdvInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBAdvInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBAdvInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBAdvInfo::MergeFrom(const SkillDBAdvInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBAdvInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBAdvInfo::CopyFrom(const SkillDBAdvInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBAdvInfo::IsInitialized() const {

  return true;
}

void SkillDBAdvInfo::Swap(SkillDBAdvInfo* other) {
  if (other != this) {
    std::swap(advance_, other->advance_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBAdvInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBAdvInfo_descriptor_;
  metadata.reflection = SkillDBAdvInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBGroup::kGroupFieldNumber;
const int SkillDBGroup::kChgFieldNumber;
const int SkillDBGroup::kPosLstFieldNumber;
#endif  // !_MSC_VER

SkillDBGroup::SkillDBGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBGroup::InitAsDefaultInstance() {
}

SkillDBGroup::SkillDBGroup(const SkillDBGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBGroup::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  chg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBGroup::~SkillDBGroup() {
  SharedDtor();
}

void SkillDBGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBGroup_descriptor_;
}

const SkillDBGroup& SkillDBGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SkillDBGroup* SkillDBGroup::default_instance_ = NULL;

SkillDBGroup* SkillDBGroup::New() const {
  return new SkillDBGroup;
}

void SkillDBGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
    chg_ = 0;
  }
  pos_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chg;
        break;
      }

      // optional int32 chg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chg_)));
          set_has_chg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_lst;
        break;
      }

      // repeated .proto_ff.SkillDBPos pos_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  // optional int32 chg = 2;
  if (has_chg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chg(), output);
  }

  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  // optional int32 chg = 2;
  if (has_chg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chg(), target);
  }

  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 chg = 2;
    if (has_chg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chg());
    }

  }
  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  total_size += 1 * this->pos_lst_size();
  for (int i = 0; i < this->pos_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBGroup::MergeFrom(const SkillDBGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_lst_.MergeFrom(from.pos_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_chg()) {
      set_chg(from.chg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBGroup::CopyFrom(const SkillDBGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBGroup::IsInitialized() const {

  return true;
}

void SkillDBGroup::Swap(SkillDBGroup* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(chg_, other->chg_);
    pos_lst_.Swap(&other->pos_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBGroup_descriptor_;
  metadata.reflection = SkillDBGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillCdDB::kSkillIdFieldNumber;
const int PetSkillCdDB::kUseMsecFieldNumber;
const int PetSkillCdDB::kPetInstidFieldNumber;
#endif  // !_MSC_VER

PetSkillCdDB::PetSkillCdDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillCdDB::InitAsDefaultInstance() {
}

PetSkillCdDB::PetSkillCdDB(const PetSkillCdDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillCdDB::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  use_msec_ = GOOGLE_ULONGLONG(0);
  pet_instid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillCdDB::~PetSkillCdDB() {
  SharedDtor();
}

void PetSkillCdDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillCdDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillCdDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillCdDB_descriptor_;
}

const PetSkillCdDB& PetSkillCdDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

PetSkillCdDB* PetSkillCdDB::default_instance_ = NULL;

PetSkillCdDB* PetSkillCdDB::New() const {
  return new PetSkillCdDB;
}

void PetSkillCdDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    use_msec_ = GOOGLE_ULONGLONG(0);
    pet_instid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillCdDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_msec;
        break;
      }

      // optional uint64 use_msec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &use_msec_)));
          set_has_use_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_instid;
        break;
      }

      // optional int64 pet_instid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_instid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pet_instid_)));
          set_has_pet_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillCdDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint64 use_msec = 2;
  if (has_use_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->use_msec(), output);
  }

  // optional int64 pet_instid = 3;
  if (has_pet_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pet_instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillCdDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint64 use_msec = 2;
  if (has_use_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->use_msec(), target);
  }

  // optional int64 pet_instid = 3;
  if (has_pet_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pet_instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillCdDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint64 use_msec = 2;
    if (has_use_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->use_msec());
    }

    // optional int64 pet_instid = 3;
    if (has_pet_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pet_instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillCdDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillCdDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillCdDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillCdDB::MergeFrom(const PetSkillCdDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_use_msec()) {
      set_use_msec(from.use_msec());
    }
    if (from.has_pet_instid()) {
      set_pet_instid(from.pet_instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillCdDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillCdDB::CopyFrom(const PetSkillCdDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillCdDB::IsInitialized() const {

  return true;
}

void PetSkillCdDB::Swap(PetSkillCdDB* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(use_msec_, other->use_msec_);
    std::swap(pet_instid_, other->pet_instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillCdDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillCdDB_descriptor_;
  metadata.reflection = PetSkillCdDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBData::kInfoLstFieldNumber;
const int SkillDBData::kGroupLstFieldNumber;
const int SkillDBData::kGroupFieldNumber;
const int SkillDBData::kLastGroupFieldNumber;
const int SkillDBData::kAdvPosFieldNumber;
const int SkillDBData::kAdvInfoFieldNumber;
const int SkillDBData::kCurAdvposFieldNumber;
const int SkillDBData::kPetCdFieldNumber;
#endif  // !_MSC_VER

SkillDBData::SkillDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBData::InitAsDefaultInstance() {
}

SkillDBData::SkillDBData(const SkillDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBData::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  last_group_ = GOOGLE_ULONGLONG(0);
  cur_advpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBData::~SkillDBData() {
  SharedDtor();
}

void SkillDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBData_descriptor_;
}

const SkillDBData& SkillDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SkillDBData* SkillDBData::default_instance_ = NULL;

SkillDBData* SkillDBData::New() const {
  return new SkillDBData;
}

void SkillDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    group_ = 0u;
    last_group_ = GOOGLE_ULONGLONG(0);
    cur_advpos_ = 0u;
  }
  info_lst_.Clear();
  group_lst_.Clear();
  adv_pos_.Clear();
  adv_info_.Clear();
  pet_cd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillDBInfo info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectTag(18)) goto parse_group_lst;
        break;
      }

      // repeated .proto_ff.SkillDBGroup group_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_lst;
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional uint32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_group;
        break;
      }

      // optional uint64 last_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_group_)));
          set_has_last_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_adv_pos;
        break;
      }

      // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adv_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adv_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_adv_pos;
        if (input->ExpectTag(50)) goto parse_adv_info;
        break;
      }

      // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adv_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adv_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_adv_info;
        if (input->ExpectTag(56)) goto parse_cur_advpos;
        break;
      }

      // optional uint32 cur_advpos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_advpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_advpos_)));
          set_has_cur_advpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pet_cd;
        break;
      }

      // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pet_cd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  for (int i = 0; i < this->group_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_lst(i), output);
  }

  // optional uint32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group(), output);
  }

  // optional uint64 last_group = 4;
  if (has_last_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_group(), output);
  }

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  for (int i = 0; i < this->adv_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->adv_pos(i), output);
  }

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  for (int i = 0; i < this->adv_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->adv_info(i), output);
  }

  // optional uint32 cur_advpos = 7;
  if (has_cur_advpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_advpos(), output);
  }

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  for (int i = 0; i < this->pet_cd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pet_cd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  for (int i = 0; i < this->group_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_lst(i), target);
  }

  // optional uint32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group(), target);
  }

  // optional uint64 last_group = 4;
  if (has_last_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_group(), target);
  }

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  for (int i = 0; i < this->adv_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->adv_pos(i), target);
  }

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  for (int i = 0; i < this->adv_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->adv_info(i), target);
  }

  // optional uint32 cur_advpos = 7;
  if (has_cur_advpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_advpos(), target);
  }

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  for (int i = 0; i < this->pet_cd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pet_cd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint64 last_group = 4;
    if (has_last_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_group());
    }

    // optional uint32 cur_advpos = 7;
    if (has_cur_advpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_advpos());
    }

  }
  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  total_size += 1 * this->group_lst_size();
  for (int i = 0; i < this->group_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_lst(i));
  }

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  total_size += 1 * this->adv_pos_size();
  for (int i = 0; i < this->adv_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adv_pos(i));
  }

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  total_size += 1 * this->adv_info_size();
  for (int i = 0; i < this->adv_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adv_info(i));
  }

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  total_size += 1 * this->pet_cd_size();
  for (int i = 0; i < this->pet_cd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_cd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBData::MergeFrom(const SkillDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  group_lst_.MergeFrom(from.group_lst_);
  adv_pos_.MergeFrom(from.adv_pos_);
  adv_info_.MergeFrom(from.adv_info_);
  pet_cd_.MergeFrom(from.pet_cd_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_last_group()) {
      set_last_group(from.last_group());
    }
    if (from.has_cur_advpos()) {
      set_cur_advpos(from.cur_advpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBData::CopyFrom(const SkillDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBData::IsInitialized() const {

  return true;
}

void SkillDBData::Swap(SkillDBData* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    group_lst_.Swap(&other->group_lst_);
    std::swap(group_, other->group_);
    std::swap(last_group_, other->last_group_);
    adv_pos_.Swap(&other->adv_pos_);
    adv_info_.Swap(&other->adv_info_);
    std::swap(cur_advpos_, other->cur_advpos_);
    pet_cd_.Swap(&other->pet_cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBData_descriptor_;
  metadata.reflection = SkillDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsActivityData::kGroupDataFieldNumber;
const int GodRelicsActivityData::kCurGroupIdFieldNumber;
#endif  // !_MSC_VER

GodRelicsActivityData::GodRelicsActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsActivityData::InitAsDefaultInstance() {
}

GodRelicsActivityData::GodRelicsActivityData(const GodRelicsActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsActivityData::SharedCtor() {
  _cached_size_ = 0;
  cur_group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsActivityData::~GodRelicsActivityData() {
  SharedDtor();
}

void GodRelicsActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsActivityData_descriptor_;
}

const GodRelicsActivityData& GodRelicsActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GodRelicsActivityData* GodRelicsActivityData::default_instance_ = NULL;

GodRelicsActivityData* GodRelicsActivityData::New() const {
  return new GodRelicsActivityData;
}

void GodRelicsActivityData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_group_id_ = GOOGLE_LONGLONG(0);
  }
  group_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_data;
        if (input->ExpectTag(16)) goto parse_cur_group_id;
        break;
      }

      // optional int64 cur_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_group_id_)));
          set_has_cur_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  for (int i = 0; i < this->group_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_data(i), output);
  }

  // optional int64 cur_group_id = 2;
  if (has_cur_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cur_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  for (int i = 0; i < this->group_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_data(i), target);
  }

  // optional int64 cur_group_id = 2;
  if (has_cur_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cur_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 cur_group_id = 2;
    if (has_cur_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_group_id());
    }

  }
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  total_size += 1 * this->group_data_size();
  for (int i = 0; i < this->group_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsActivityData::MergeFrom(const GodRelicsActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_data_.MergeFrom(from.group_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_group_id()) {
      set_cur_group_id(from.cur_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsActivityData::CopyFrom(const GodRelicsActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsActivityData::IsInitialized() const {

  return true;
}

void GodRelicsActivityData::Swap(GodRelicsActivityData* other) {
  if (other != this) {
    group_data_.Swap(&other->group_data_);
    std::swap(cur_group_id_, other->cur_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsActivityData_descriptor_;
  metadata.reflection = GodRelicsActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiniActivityDBData::kGodRelicsDataFieldNumber;
const int MiniActivityDBData::kDailyDataFieldNumber;
#endif  // !_MSC_VER

MiniActivityDBData::MiniActivityDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiniActivityDBData::InitAsDefaultInstance() {
  god_relics_data_ = const_cast< ::proto_ff::GodRelicsActivityData*>(&::proto_ff::GodRelicsActivityData::default_instance());
  daily_data_ = const_cast< ::proto_ff::DailyTaskAllData*>(&::proto_ff::DailyTaskAllData::default_instance());
}

MiniActivityDBData::MiniActivityDBData(const MiniActivityDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiniActivityDBData::SharedCtor() {
  _cached_size_ = 0;
  god_relics_data_ = NULL;
  daily_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiniActivityDBData::~MiniActivityDBData() {
  SharedDtor();
}

void MiniActivityDBData::SharedDtor() {
  if (this != default_instance_) {
    delete god_relics_data_;
    delete daily_data_;
  }
}

void MiniActivityDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniActivityDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniActivityDBData_descriptor_;
}

const MiniActivityDBData& MiniActivityDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MiniActivityDBData* MiniActivityDBData::default_instance_ = NULL;

MiniActivityDBData* MiniActivityDBData::New() const {
  return new MiniActivityDBData;
}

void MiniActivityDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_god_relics_data()) {
      if (god_relics_data_ != NULL) god_relics_data_->::proto_ff::GodRelicsActivityData::Clear();
    }
    if (has_daily_data()) {
      if (daily_data_ != NULL) daily_data_->::proto_ff::DailyTaskAllData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiniActivityDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_god_relics_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_data;
        break;
      }

      // optional .proto_ff.DailyTaskAllData daily_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiniActivityDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
  if (has_god_relics_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->god_relics_data(), output);
  }

  // optional .proto_ff.DailyTaskAllData daily_data = 2;
  if (has_daily_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiniActivityDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
  if (has_god_relics_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->god_relics_data(), target);
  }

  // optional .proto_ff.DailyTaskAllData daily_data = 2;
  if (has_daily_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiniActivityDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
    if (has_god_relics_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->god_relics_data());
    }

    // optional .proto_ff.DailyTaskAllData daily_data = 2;
    if (has_daily_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniActivityDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiniActivityDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiniActivityDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiniActivityDBData::MergeFrom(const MiniActivityDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_god_relics_data()) {
      mutable_god_relics_data()->::proto_ff::GodRelicsActivityData::MergeFrom(from.god_relics_data());
    }
    if (from.has_daily_data()) {
      mutable_daily_data()->::proto_ff::DailyTaskAllData::MergeFrom(from.daily_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiniActivityDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniActivityDBData::CopyFrom(const MiniActivityDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniActivityDBData::IsInitialized() const {

  return true;
}

void MiniActivityDBData::Swap(MiniActivityDBData* other) {
  if (other != this) {
    std::swap(god_relics_data_, other->god_relics_data_);
    std::swap(daily_data_, other->daily_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiniActivityDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiniActivityDBData_descriptor_;
  metadata.reflection = MiniActivityDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupRecord::kDupIdFieldNumber;
const int DupRecord::kStarFieldNumber;
#endif  // !_MSC_VER

DupRecord::DupRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupRecord::InitAsDefaultInstance() {
}

DupRecord::DupRecord(const DupRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupRecord::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupRecord::~DupRecord() {
  SharedDtor();
}

void DupRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupRecord_descriptor_;
}

const DupRecord& DupRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DupRecord* DupRecord::default_instance_ = NULL;

DupRecord* DupRecord::New() const {
  return new DupRecord;
}

void DupRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupRecord::MergeFrom(const DupRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupRecord::CopyFrom(const DupRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupRecord::IsInitialized() const {

  return true;
}

void DupRecord::Swap(DupRecord* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupRecord_descriptor_;
  metadata.reflection = DupRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupGroupData::kGroupFieldNumber;
const int DupGroupData::kEnterNumFieldNumber;
const int DupGroupData::kBuyNumFieldNumber;
const int DupGroupData::kUseNumFieldNumber;
const int DupGroupData::kLastFreshFieldNumber;
#endif  // !_MSC_VER

DupGroupData::DupGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupGroupData::InitAsDefaultInstance() {
}

DupGroupData::DupGroupData(const DupGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupGroupData::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  enternum_ = 0;
  buynum_ = 0;
  usenum_ = 0;
  lastfresh_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupGroupData::~DupGroupData() {
  SharedDtor();
}

void DupGroupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupGroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupGroupData_descriptor_;
}

const DupGroupData& DupGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DupGroupData* DupGroupData::default_instance_ = NULL;

DupGroupData* DupGroupData::New() const {
  return new DupGroupData;
}

void DupGroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    enternum_ = 0;
    buynum_ = 0;
    usenum_ = 0;
    lastfresh_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enterNum;
        break;
      }

      // optional int32 enterNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enternum_)));
          set_has_enternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useNum;
        break;
      }

      // optional int32 useNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usenum_)));
          set_has_usenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastFresh;
        break;
      }

      // optional uint64 lastFresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastFresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastfresh_)));
          set_has_lastfresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // optional int32 enterNum = 2;
  if (has_enternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enternum(), output);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buynum(), output);
  }

  // optional int32 useNum = 4;
  if (has_usenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usenum(), output);
  }

  // optional uint64 lastFresh = 5;
  if (has_lastfresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastfresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // optional int32 enterNum = 2;
  if (has_enternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enternum(), target);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buynum(), target);
  }

  // optional int32 useNum = 4;
  if (has_usenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usenum(), target);
  }

  // optional uint64 lastFresh = 5;
  if (has_lastfresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastfresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupGroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 enterNum = 2;
    if (has_enternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enternum());
    }

    // optional int32 buyNum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

    // optional int32 useNum = 4;
    if (has_usenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usenum());
    }

    // optional uint64 lastFresh = 5;
    if (has_lastfresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastfresh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupGroupData::MergeFrom(const DupGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_enternum()) {
      set_enternum(from.enternum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_usenum()) {
      set_usenum(from.usenum());
    }
    if (from.has_lastfresh()) {
      set_lastfresh(from.lastfresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupGroupData::CopyFrom(const DupGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupGroupData::IsInitialized() const {

  return true;
}

void DupGroupData::Swap(DupGroupData* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(enternum_, other->enternum_);
    std::swap(buynum_, other->buynum_);
    std::swap(usenum_, other->usenum_);
    std::swap(lastfresh_, other->lastfresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupGroupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupGroupData_descriptor_;
  metadata.reflection = DupGroupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerDBRecordEntry::kNameFieldNumber;
const int DupTowerDBRecordEntry::kTimeFieldNumber;
const int DupTowerDBRecordEntry::kCidFieldNumber;
#endif  // !_MSC_VER

DupTowerDBRecordEntry::DupTowerDBRecordEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerDBRecordEntry::InitAsDefaultInstance() {
}

DupTowerDBRecordEntry::DupTowerDBRecordEntry(const DupTowerDBRecordEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerDBRecordEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerDBRecordEntry::~DupTowerDBRecordEntry() {
  SharedDtor();
}

void DupTowerDBRecordEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DupTowerDBRecordEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerDBRecordEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerDBRecordEntry_descriptor_;
}

const DupTowerDBRecordEntry& DupTowerDBRecordEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DupTowerDBRecordEntry* DupTowerDBRecordEntry::default_instance_ = NULL;

DupTowerDBRecordEntry* DupTowerDBRecordEntry::New() const {
  return new DupTowerDBRecordEntry;
}

void DupTowerDBRecordEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerDBRecordEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerDBRecordEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerDBRecordEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerDBRecordEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerDBRecordEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerDBRecordEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerDBRecordEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerDBRecordEntry::MergeFrom(const DupTowerDBRecordEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerDBRecordEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerDBRecordEntry::CopyFrom(const DupTowerDBRecordEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerDBRecordEntry::IsInitialized() const {

  return true;
}

void DupTowerDBRecordEntry::Swap(DupTowerDBRecordEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerDBRecordEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerDBRecordEntry_descriptor_;
  metadata.reflection = DupTowerDBRecordEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerDBRecord::kIdFieldNumber;
const int DupTowerDBRecord::kEntrysFieldNumber;
#endif  // !_MSC_VER

DupTowerDBRecord::DupTowerDBRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerDBRecord::InitAsDefaultInstance() {
}

DupTowerDBRecord::DupTowerDBRecord(const DupTowerDBRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerDBRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerDBRecord::~DupTowerDBRecord() {
  SharedDtor();
}

void DupTowerDBRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerDBRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerDBRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerDBRecord_descriptor_;
}

const DupTowerDBRecord& DupTowerDBRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DupTowerDBRecord* DupTowerDBRecord::default_instance_ = NULL;

DupTowerDBRecord* DupTowerDBRecord::New() const {
  return new DupTowerDBRecord;
}

void DupTowerDBRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerDBRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerDBRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerDBRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerDBRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerDBRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerDBRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerDBRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerDBRecord::MergeFrom(const DupTowerDBRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerDBRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerDBRecord::CopyFrom(const DupTowerDBRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerDBRecord::IsInitialized() const {

  return true;
}

void DupTowerDBRecord::Swap(DupTowerDBRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerDBRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerDBRecord_descriptor_;
  metadata.reflection = DupTowerDBRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerDBData::kIdsFieldNumber;
#endif  // !_MSC_VER

DupTowerDBData::DupTowerDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerDBData::InitAsDefaultInstance() {
}

DupTowerDBData::DupTowerDBData(const DupTowerDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerDBData::~DupTowerDBData() {
  SharedDtor();
}

void DupTowerDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerDBData_descriptor_;
}

const DupTowerDBData& DupTowerDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DupTowerDBData* DupTowerDBData::default_instance_ = NULL;

DupTowerDBData* DupTowerDBData::New() const {
  return new DupTowerDBData;
}

void DupTowerDBData::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerDBData::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerDBData::MergeFrom(const DupTowerDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerDBData::CopyFrom(const DupTowerDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerDBData::IsInitialized() const {

  return true;
}

void DupTowerDBData::Swap(DupTowerDBData* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerDBData_descriptor_;
  metadata.reflection = DupTowerDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupDBData::kRecordFieldNumber;
const int DupDBData::kGroupsFieldNumber;
const int DupDBData::kTowerFieldNumber;
#endif  // !_MSC_VER

DupDBData::DupDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupDBData::InitAsDefaultInstance() {
  tower_ = const_cast< ::proto_ff::DupTowerDBData*>(&::proto_ff::DupTowerDBData::default_instance());
}

DupDBData::DupDBData(const DupDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupDBData::SharedCtor() {
  _cached_size_ = 0;
  tower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupDBData::~DupDBData() {
  SharedDtor();
}

void DupDBData::SharedDtor() {
  if (this != default_instance_) {
    delete tower_;
  }
}

void DupDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupDBData_descriptor_;
}

const DupDBData& DupDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DupDBData* DupDBData::default_instance_ = NULL;

DupDBData* DupDBData::New() const {
  return new DupDBData;
}

void DupDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_tower()) {
      if (tower_ != NULL) tower_->::proto_ff::DupTowerDBData::Clear();
    }
  }
  record_.Clear();
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectTag(18)) goto parse_groups;
        break;
      }

      // repeated .proto_ff.DupGroupData groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        if (input->ExpectTag(26)) goto parse_tower;
        break;
      }

      // optional .proto_ff.DupTowerDBData tower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  // repeated .proto_ff.DupGroupData groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  // optional .proto_ff.DupTowerDBData tower = 3;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  // repeated .proto_ff.DupGroupData groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groups(i), target);
  }

  // optional .proto_ff.DupTowerDBData tower = 3;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .proto_ff.DupTowerDBData tower = 3;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

  }
  // repeated .proto_ff.DupRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  // repeated .proto_ff.DupGroupData groups = 2;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupDBData::MergeFrom(const DupDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_tower()) {
      mutable_tower()->::proto_ff::DupTowerDBData::MergeFrom(from.tower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupDBData::CopyFrom(const DupDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupDBData::IsInitialized() const {

  return true;
}

void DupDBData::Swap(DupDBData* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    groups_.Swap(&other->groups_);
    std::swap(tower_, other->tower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupDBData_descriptor_;
  metadata.reflection = DupDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBInfo::kBuffidFieldNumber;
const int BuffDBInfo::kIndexFieldNumber;
const int BuffDBInfo::kSkillidFieldNumber;
const int BuffDBInfo::kSkilllevFieldNumber;
const int BuffDBInfo::kIsForeverFieldNumber;
const int BuffDBInfo::kStartmsecFieldNumber;
const int BuffDBInfo::kIsEffectFieldNumber;
const int BuffDBInfo::kParam1FieldNumber;
const int BuffDBInfo::kParam2FieldNumber;
const int BuffDBInfo::kExtramsecFieldNumber;
const int BuffDBInfo::kIsEndFieldNumber;
#endif  // !_MSC_VER

BuffDBInfo::BuffDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBInfo::InitAsDefaultInstance() {
}

BuffDBInfo::BuffDBInfo(const BuffDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBInfo::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  skillid_ = GOOGLE_ULONGLONG(0);
  skilllev_ = 0u;
  is_forever_ = false;
  startmsec_ = GOOGLE_LONGLONG(0);
  is_effect_ = false;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  extramsec_ = GOOGLE_LONGLONG(0);
  is_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBInfo::~BuffDBInfo() {
  SharedDtor();
}

void BuffDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBInfo_descriptor_;
}

const BuffDBInfo& BuffDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BuffDBInfo* BuffDBInfo::default_instance_ = NULL;

BuffDBInfo* BuffDBInfo::New() const {
  return new BuffDBInfo;
}

void BuffDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = GOOGLE_ULONGLONG(0);
    index_ = GOOGLE_ULONGLONG(0);
    skillid_ = GOOGLE_ULONGLONG(0);
    skilllev_ = 0u;
    is_forever_ = false;
    startmsec_ = GOOGLE_LONGLONG(0);
    is_effect_ = false;
    param1_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    param2_ = GOOGLE_LONGLONG(0);
    extramsec_ = GOOGLE_LONGLONG(0);
    is_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional uint64 skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skilllev;
        break;
      }

      // optional uint32 skilllev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllev_)));
          set_has_skilllev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_forever;
        break;
      }

      // optional bool is_forever = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_forever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_forever_)));
          set_has_is_forever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startmsec;
        break;
      }

      // optional int64 startmsec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startmsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startmsec_)));
          set_has_startmsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_effect;
        break;
      }

      // optional bool is_effect = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_effect_)));
          set_has_is_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_extramsec;
        break;
      }

      // optional int64 extramsec = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extramsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extramsec_)));
          set_has_extramsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_end;
        break;
      }

      // optional int32 is_end = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_end_)));
          set_has_is_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buffid(), output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // optional uint64 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->skillid(), output);
  }

  // optional uint32 skilllev = 4;
  if (has_skilllev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skilllev(), output);
  }

  // optional bool is_forever = 5;
  if (has_is_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_forever(), output);
  }

  // optional int64 startmsec = 6;
  if (has_startmsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->startmsec(), output);
  }

  // optional bool is_effect = 7;
  if (has_is_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_effect(), output);
  }

  // optional int64 param1 = 8;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->param1(), output);
  }

  // optional int64 param2 = 9;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->param2(), output);
  }

  // optional int64 extramsec = 10;
  if (has_extramsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->extramsec(), output);
  }

  // optional int32 is_end = 11;
  if (has_is_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buffid(), target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // optional uint64 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->skillid(), target);
  }

  // optional uint32 skilllev = 4;
  if (has_skilllev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skilllev(), target);
  }

  // optional bool is_forever = 5;
  if (has_is_forever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_forever(), target);
  }

  // optional int64 startmsec = 6;
  if (has_startmsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->startmsec(), target);
  }

  // optional bool is_effect = 7;
  if (has_is_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_effect(), target);
  }

  // optional int64 param1 = 8;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->param1(), target);
  }

  // optional int64 param2 = 9;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->param2(), target);
  }

  // optional int64 extramsec = 10;
  if (has_extramsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->extramsec(), target);
  }

  // optional int32 is_end = 11;
  if (has_is_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffid());
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skillid());
    }

    // optional uint32 skilllev = 4;
    if (has_skilllev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllev());
    }

    // optional bool is_forever = 5;
    if (has_is_forever()) {
      total_size += 1 + 1;
    }

    // optional int64 startmsec = 6;
    if (has_startmsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startmsec());
    }

    // optional bool is_effect = 7;
    if (has_is_effect()) {
      total_size += 1 + 1;
    }

    // optional int64 param1 = 8;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 param2 = 9;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional int64 extramsec = 10;
    if (has_extramsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extramsec());
    }

    // optional int32 is_end = 11;
    if (has_is_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBInfo::MergeFrom(const BuffDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllev()) {
      set_skilllev(from.skilllev());
    }
    if (from.has_is_forever()) {
      set_is_forever(from.is_forever());
    }
    if (from.has_startmsec()) {
      set_startmsec(from.startmsec());
    }
    if (from.has_is_effect()) {
      set_is_effect(from.is_effect());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_extramsec()) {
      set_extramsec(from.extramsec());
    }
    if (from.has_is_end()) {
      set_is_end(from.is_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBInfo::CopyFrom(const BuffDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBInfo::IsInitialized() const {

  return true;
}

void BuffDBInfo::Swap(BuffDBInfo* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(index_, other->index_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllev_, other->skilllev_);
    std::swap(is_forever_, other->is_forever_);
    std::swap(startmsec_, other->startmsec_);
    std::swap(is_effect_, other->is_effect_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(extramsec_, other->extramsec_);
    std::swap(is_end_, other->is_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBInfo_descriptor_;
  metadata.reflection = BuffDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBCdInfo::kBuffidFieldNumber;
const int BuffDBCdInfo::kLastmsecFieldNumber;
#endif  // !_MSC_VER

BuffDBCdInfo::BuffDBCdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBCdInfo::InitAsDefaultInstance() {
}

BuffDBCdInfo::BuffDBCdInfo(const BuffDBCdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBCdInfo::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = GOOGLE_ULONGLONG(0);
  lastmsec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBCdInfo::~BuffDBCdInfo() {
  SharedDtor();
}

void BuffDBCdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDBCdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBCdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBCdInfo_descriptor_;
}

const BuffDBCdInfo& BuffDBCdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BuffDBCdInfo* BuffDBCdInfo::default_instance_ = NULL;

BuffDBCdInfo* BuffDBCdInfo::New() const {
  return new BuffDBCdInfo;
}

void BuffDBCdInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = GOOGLE_ULONGLONG(0);
    lastmsec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBCdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastmsec;
        break;
      }

      // optional uint64 lastmsec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmsec_)));
          set_has_lastmsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBCdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buffid(), output);
  }

  // optional uint64 lastmsec = 2;
  if (has_lastmsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastmsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBCdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buffid(), target);
  }

  // optional uint64 lastmsec = 2;
  if (has_lastmsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastmsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBCdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffid());
    }

    // optional uint64 lastmsec = 2;
    if (has_lastmsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBCdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBCdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBCdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBCdInfo::MergeFrom(const BuffDBCdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_lastmsec()) {
      set_lastmsec(from.lastmsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBCdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBCdInfo::CopyFrom(const BuffDBCdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBCdInfo::IsInitialized() const {

  return true;
}

void BuffDBCdInfo::Swap(BuffDBCdInfo* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(lastmsec_, other->lastmsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBCdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBCdInfo_descriptor_;
  metadata.reflection = BuffDBCdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBData::kInfoLstFieldNumber;
const int BuffDBData::kCdLstFieldNumber;
#endif  // !_MSC_VER

BuffDBData::BuffDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBData::InitAsDefaultInstance() {
}

BuffDBData::BuffDBData(const BuffDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBData::~BuffDBData() {
  SharedDtor();
}

void BuffDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBData_descriptor_;
}

const BuffDBData& BuffDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BuffDBData* BuffDBData::default_instance_ = NULL;

BuffDBData* BuffDBData::New() const {
  return new BuffDBData;
}

void BuffDBData::Clear() {
  info_lst_.Clear();
  cd_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BuffDBInfo info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectTag(18)) goto parse_cd_lst;
        break;
      }

      // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cd_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cd_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  for (int i = 0; i < this->cd_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cd_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  for (int i = 0; i < this->cd_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cd_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  total_size += 1 * this->cd_lst_size();
  for (int i = 0; i < this->cd_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cd_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBData::MergeFrom(const BuffDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  cd_lst_.MergeFrom(from.cd_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBData::CopyFrom(const BuffDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBData::IsInitialized() const {

  return true;
}

void BuffDBData::Swap(BuffDBData* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    cd_lst_.Swap(&other->cd_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBData_descriptor_;
  metadata.reflection = BuffDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossSimpleInfoDB::kBossTypeFieldNumber;
const int BossSimpleInfoDB::kCurNumFieldNumber;
const int BossSimpleInfoDB::kBackNumFieldNumber;
const int BossSimpleInfoDB::kBackMaxNumFieldNumber;
const int BossSimpleInfoDB::kEnterNumFieldNumber;
const int BossSimpleInfoDB::kUseItemNumFieldNumber;
#endif  // !_MSC_VER

BossSimpleInfoDB::BossSimpleInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossSimpleInfoDB::InitAsDefaultInstance() {
}

BossSimpleInfoDB::BossSimpleInfoDB(const BossSimpleInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossSimpleInfoDB::SharedCtor() {
  _cached_size_ = 0;
  boss_type_ = 0;
  cur_num_ = 0;
  back_num_ = 0;
  back_max_num_ = 0;
  enter_num_ = 0;
  use_item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossSimpleInfoDB::~BossSimpleInfoDB() {
  SharedDtor();
}

void BossSimpleInfoDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossSimpleInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossSimpleInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossSimpleInfoDB_descriptor_;
}

const BossSimpleInfoDB& BossSimpleInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BossSimpleInfoDB* BossSimpleInfoDB::default_instance_ = NULL;

BossSimpleInfoDB* BossSimpleInfoDB::New() const {
  return new BossSimpleInfoDB;
}

void BossSimpleInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_type_ = 0;
    cur_num_ = 0;
    back_num_ = 0;
    back_max_num_ = 0;
    enter_num_ = 0;
    use_item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossSimpleInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_type_)));
          set_has_boss_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_num;
        break;
      }

      // optional int32 back_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_num_)));
          set_has_back_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_back_max_num;
        break;
      }

      // optional int32 back_max_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_max_num_)));
          set_has_back_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enter_num;
        break;
      }

      // optional int32 enter_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_num_)));
          set_has_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_use_item_num;
        break;
      }

      // optional int32 use_item_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_item_num_)));
          set_has_use_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossSimpleInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss_type = 1;
  if (has_boss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss_type(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 back_num = 4;
  if (has_back_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->back_num(), output);
  }

  // optional int32 back_max_num = 5;
  if (has_back_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->back_max_num(), output);
  }

  // optional int32 enter_num = 6;
  if (has_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enter_num(), output);
  }

  // optional int32 use_item_num = 7;
  if (has_use_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->use_item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossSimpleInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss_type = 1;
  if (has_boss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss_type(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 back_num = 4;
  if (has_back_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->back_num(), target);
  }

  // optional int32 back_max_num = 5;
  if (has_back_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->back_max_num(), target);
  }

  // optional int32 enter_num = 6;
  if (has_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enter_num(), target);
  }

  // optional int32 use_item_num = 7;
  if (has_use_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->use_item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossSimpleInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_type = 1;
    if (has_boss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_type());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 back_num = 4;
    if (has_back_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_num());
    }

    // optional int32 back_max_num = 5;
    if (has_back_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_max_num());
    }

    // optional int32 enter_num = 6;
    if (has_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_num());
    }

    // optional int32 use_item_num = 7;
    if (has_use_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossSimpleInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossSimpleInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossSimpleInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossSimpleInfoDB::MergeFrom(const BossSimpleInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_type()) {
      set_boss_type(from.boss_type());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_back_num()) {
      set_back_num(from.back_num());
    }
    if (from.has_back_max_num()) {
      set_back_max_num(from.back_max_num());
    }
    if (from.has_enter_num()) {
      set_enter_num(from.enter_num());
    }
    if (from.has_use_item_num()) {
      set_use_item_num(from.use_item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossSimpleInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossSimpleInfoDB::CopyFrom(const BossSimpleInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossSimpleInfoDB::IsInitialized() const {

  return true;
}

void BossSimpleInfoDB::Swap(BossSimpleInfoDB* other) {
  if (other != this) {
    std::swap(boss_type_, other->boss_type_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(back_num_, other->back_num_);
    std::swap(back_max_num_, other->back_max_num_);
    std::swap(enter_num_, other->enter_num_);
    std::swap(use_item_num_, other->use_item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossSimpleInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossSimpleInfoDB_descriptor_;
  metadata.reflection = BossSimpleInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDBData::kInfosFieldNumber;
const int BossDBData::kLastTimeFieldNumber;
const int BossDBData::kAttentsFieldNumber;
#endif  // !_MSC_VER

BossDBData::BossDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDBData::InitAsDefaultInstance() {
}

BossDBData::BossDBData(const BossDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDBData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDBData::~BossDBData() {
  SharedDtor();
}

void BossDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDBData_descriptor_;
}

const BossDBData& BossDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

BossDBData* BossDBData::default_instance_ = NULL;

BossDBData* BossDBData::New() const {
  return new BossDBData;
}

void BossDBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  attents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BossSimpleInfoDB infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional uint64 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attents;
        break;
      }

      // repeated int64 attents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_attents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_attents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional uint64 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lasttime(), output);
  }

  // repeated int64 attents = 3;
  for (int i = 0; i < this->attents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->attents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional uint64 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lasttime(), target);
  }

  // repeated int64 attents = 3;
  for (int i = 0; i < this->attents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->attents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated int64 attents = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attents_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->attents(i));
    }
    total_size += 1 * this->attents_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDBData::MergeFrom(const BossDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  attents_.MergeFrom(from.attents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDBData::CopyFrom(const BossDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDBData::IsInitialized() const {

  return true;
}

void BossDBData::Swap(BossDBData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(lasttime_, other->lasttime_);
    attents_.Swap(&other->attents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDBData_descriptor_;
  metadata.reflection = BossDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipDBData::kVipExpFieldNumber;
const int VipDBData::kExpDiamondFieldNumber;
#endif  // !_MSC_VER

VipDBData::VipDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipDBData::InitAsDefaultInstance() {
}

VipDBData::VipDBData(const VipDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipDBData::SharedCtor() {
  _cached_size_ = 0;
  vipexp_ = 0;
  expdiamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipDBData::~VipDBData() {
  SharedDtor();
}

void VipDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipDBData_descriptor_;
}

const VipDBData& VipDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

VipDBData* VipDBData::default_instance_ = NULL;

VipDBData* VipDBData::New() const {
  return new VipDBData;
}

void VipDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipexp_ = 0;
    expdiamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expDiamond;
        break;
      }

      // optional int32 expDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expdiamond_)));
          set_has_expdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vipExp = 1;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vipexp(), output);
  }

  // optional int32 expDiamond = 2;
  if (has_expdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expdiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vipExp = 1;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vipexp(), target);
  }

  // optional int32 expDiamond = 2;
  if (has_expdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expdiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipExp = 1;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional int32 expDiamond = 2;
    if (has_expdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expdiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipDBData::MergeFrom(const VipDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_expdiamond()) {
      set_expdiamond(from.expdiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipDBData::CopyFrom(const VipDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipDBData::IsInitialized() const {

  return true;
}

void VipDBData::Swap(VipDBData* other) {
  if (other != this) {
    std::swap(vipexp_, other->vipexp_);
    std::swap(expdiamond_, other->expdiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipDBData_descriptor_;
  metadata.reflection = VipDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrDBData::kAttrLstFieldNumber;
#endif  // !_MSC_VER

AttrDBData::AttrDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrDBData::InitAsDefaultInstance() {
}

AttrDBData::AttrDBData(const AttrDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrDBData::~AttrDBData() {
  SharedDtor();
}

void AttrDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrDBData_descriptor_;
}

const AttrDBData& AttrDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

AttrDBData* AttrDBData::default_instance_ = NULL;

AttrDBData* AttrDBData::New() const {
  return new AttrDBData;
}

void AttrDBData::Clear() {
  attr_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr64 attr_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr64 attr_lst = 1;
  for (int i = 0; i < this->attr_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr64 attr_lst = 1;
  for (int i = 0; i < this->attr_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Attr64 attr_lst = 1;
  total_size += 1 * this->attr_lst_size();
  for (int i = 0; i < this->attr_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrDBData::MergeFrom(const AttrDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_lst_.MergeFrom(from.attr_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDBData::CopyFrom(const AttrDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDBData::IsInitialized() const {

  for (int i = 0; i < attr_lst_size(); i++) {
    if (!this->attr_lst(i).IsInitialized()) return false;
  }
  return true;
}

void AttrDBData::Swap(AttrDBData* other) {
  if (other != this) {
    attr_lst_.Swap(&other->attr_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrDBData_descriptor_;
  metadata.reflection = AttrDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDBRecord::kInstIdFieldNumber;
const int PetDBRecord::kCostItemFieldNumber;
const int PetDBRecord::kCostPetFieldNumber;
#endif  // !_MSC_VER

PetDBRecord::PetDBRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDBRecord::InitAsDefaultInstance() {
}

PetDBRecord::PetDBRecord(const PetDBRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDBRecord::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDBRecord::~PetDBRecord() {
  SharedDtor();
}

void PetDBRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetDBRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDBRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDBRecord_descriptor_;
}

const PetDBRecord& PetDBRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

PetDBRecord* PetDBRecord::default_instance_ = NULL;

PetDBRecord* PetDBRecord::New() const {
  return new PetDBRecord;
}

void PetDBRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  costitem_.Clear();
  costpet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDBRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_costItem;
        break;
      }

      // repeated .proto_ff.ComPair64 costItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_costItem;
        if (input->ExpectTag(26)) goto parse_costPet;
        break;
      }

      // repeated .proto_ff.ComPair64 costPet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costPet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costpet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_costPet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDBRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // repeated .proto_ff.ComPair64 costItem = 2;
  for (int i = 0; i < this->costitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->costitem(i), output);
  }

  // repeated .proto_ff.ComPair64 costPet = 3;
  for (int i = 0; i < this->costpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->costpet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDBRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // repeated .proto_ff.ComPair64 costItem = 2;
  for (int i = 0; i < this->costitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->costitem(i), target);
  }

  // repeated .proto_ff.ComPair64 costPet = 3;
  for (int i = 0; i < this->costpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->costpet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDBRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  // repeated .proto_ff.ComPair64 costItem = 2;
  total_size += 1 * this->costitem_size();
  for (int i = 0; i < this->costitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costitem(i));
  }

  // repeated .proto_ff.ComPair64 costPet = 3;
  total_size += 1 * this->costpet_size();
  for (int i = 0; i < this->costpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costpet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDBRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDBRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDBRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDBRecord::MergeFrom(const PetDBRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  costitem_.MergeFrom(from.costitem_);
  costpet_.MergeFrom(from.costpet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDBRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDBRecord::CopyFrom(const PetDBRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDBRecord::IsInitialized() const {

  return true;
}

void PetDBRecord::Swap(PetDBRecord* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    costitem_.Swap(&other->costitem_);
    costpet_.Swap(&other->costpet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDBRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDBRecord_descriptor_;
  metadata.reflection = PetDBRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDBData::kFetterFieldNumber;
const int PetDBData::kPetsFieldNumber;
const int PetDBData::kHatchsFieldNumber;
const int PetDBData::kRecordsFieldNumber;
const int PetDBData::kCfgidsFieldNumber;
#endif  // !_MSC_VER

PetDBData::PetDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDBData::InitAsDefaultInstance() {
}

PetDBData::PetDBData(const PetDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDBData::~PetDBData() {
  SharedDtor();
}

void PetDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDBData_descriptor_;
}

const PetDBData& PetDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

PetDBData* PetDBData::default_instance_ = NULL;

PetDBData* PetDBData::New() const {
  return new PetDBData;
}

void PetDBData::Clear() {
  fetter_.Clear();
  pets_.Clear();
  hatchs_.Clear();
  records_.Clear();
  cfgids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetter;
        if (input->ExpectTag(18)) goto parse_pets;
        break;
      }

      // repeated .proto_ff.PetInfo pets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pets;
        if (input->ExpectTag(26)) goto parse_hatchs;
        break;
      }

      // repeated .proto_ff.PetHatchInfo hatchs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hatchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hatchs;
        if (input->ExpectTag(34)) goto parse_records;
        break;
      }

      // repeated .proto_ff.PetDBRecord records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_records;
        if (input->ExpectTag(40)) goto parse_cfgids;
        break;
      }

      // repeated int64 cfgids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_cfgids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cfgids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cfgids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetter(i), output);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pets(i), output);
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  for (int i = 0; i < this->hatchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hatchs(i), output);
  }

  // repeated .proto_ff.PetDBRecord records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // repeated int64 cfgids = 5;
  for (int i = 0; i < this->cfgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->cfgids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetter(i), target);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pets(i), target);
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  for (int i = 0; i < this->hatchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hatchs(i), target);
  }

  // repeated .proto_ff.PetDBRecord records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  // repeated int64 cfgids = 5;
  for (int i = 0; i < this->cfgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->cfgids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDBData::ByteSize() const {
  int total_size = 0;

  // repeated int32 fetter = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetter(i));
    }
    total_size += 1 * this->fetter_size() + data_size;
  }

  // repeated .proto_ff.PetInfo pets = 2;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  total_size += 1 * this->hatchs_size();
  for (int i = 0; i < this->hatchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatchs(i));
  }

  // repeated .proto_ff.PetDBRecord records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated int64 cfgids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cfgids(i));
    }
    total_size += 1 * this->cfgids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDBData::MergeFrom(const PetDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetter_.MergeFrom(from.fetter_);
  pets_.MergeFrom(from.pets_);
  hatchs_.MergeFrom(from.hatchs_);
  records_.MergeFrom(from.records_);
  cfgids_.MergeFrom(from.cfgids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDBData::CopyFrom(const PetDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDBData::IsInitialized() const {

  return true;
}

void PetDBData::Swap(PetDBData* other) {
  if (other != this) {
    fetter_.Swap(&other->fetter_);
    pets_.Swap(&other->pets_);
    hatchs_.Swap(&other->hatchs_);
    records_.Swap(&other->records_);
    cfgids_.Swap(&other->cfgids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDBData_descriptor_;
  metadata.reflection = PetDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallDBInfo::kIdFieldNumber;
const int MallDBInfo::kNumFieldNumber;
const int MallDBInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

MallDBInfo::MallDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallDBInfo::InitAsDefaultInstance() {
}

MallDBInfo::MallDBInfo(const MallDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallDBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  num_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallDBInfo::~MallDBInfo() {
  SharedDtor();
}

void MallDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallDBInfo_descriptor_;
}

const MallDBInfo& MallDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MallDBInfo* MallDBInfo::default_instance_ = NULL;

MallDBInfo* MallDBInfo::New() const {
  return new MallDBInfo;
}

void MallDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    num_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallDBInfo::MergeFrom(const MallDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallDBInfo::CopyFrom(const MallDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallDBInfo::IsInitialized() const {

  return true;
}

void MallDBInfo::Swap(MallDBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallDBInfo_descriptor_;
  metadata.reflection = MallDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallDBData::kDayFieldNumber;
const int MallDBData::kWeekFieldNumber;
const int MallDBData::kForeverFieldNumber;
#endif  // !_MSC_VER

MallDBData::MallDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallDBData::InitAsDefaultInstance() {
}

MallDBData::MallDBData(const MallDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallDBData::~MallDBData() {
  SharedDtor();
}

void MallDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallDBData_descriptor_;
}

const MallDBData& MallDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MallDBData* MallDBData::default_instance_ = NULL;

MallDBData* MallDBData::New() const {
  return new MallDBData;
}

void MallDBData::Clear() {
  day_.Clear();
  week_.Clear();
  forever_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MallDBInfo day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_day;
        if (input->ExpectTag(18)) goto parse_week;
        break;
      }

      // repeated .proto_ff.MallDBInfo week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_week;
        if (input->ExpectTag(26)) goto parse_forever;
        break;
      }

      // repeated .proto_ff.MallDBInfo forever = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_forever;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MallDBInfo day = 1;
  for (int i = 0; i < this->day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->day(i), output);
  }

  // repeated .proto_ff.MallDBInfo week = 2;
  for (int i = 0; i < this->week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->week(i), output);
  }

  // repeated .proto_ff.MallDBInfo forever = 3;
  for (int i = 0; i < this->forever_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->forever(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MallDBInfo day = 1;
  for (int i = 0; i < this->day_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->day(i), target);
  }

  // repeated .proto_ff.MallDBInfo week = 2;
  for (int i = 0; i < this->week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->week(i), target);
  }

  // repeated .proto_ff.MallDBInfo forever = 3;
  for (int i = 0; i < this->forever_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->forever(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MallDBInfo day = 1;
  total_size += 1 * this->day_size();
  for (int i = 0; i < this->day_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day(i));
  }

  // repeated .proto_ff.MallDBInfo week = 2;
  total_size += 1 * this->week_size();
  for (int i = 0; i < this->week_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week(i));
  }

  // repeated .proto_ff.MallDBInfo forever = 3;
  total_size += 1 * this->forever_size();
  for (int i = 0; i < this->forever_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forever(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallDBData::MergeFrom(const MallDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_.MergeFrom(from.day_);
  week_.MergeFrom(from.week_);
  forever_.MergeFrom(from.forever_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallDBData::CopyFrom(const MallDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallDBData::IsInitialized() const {

  return true;
}

void MallDBData::Swap(MallDBData* other) {
  if (other != this) {
    day_.Swap(&other->day_);
    week_.Swap(&other->week_);
    forever_.Swap(&other->forever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallDBData_descriptor_;
  metadata.reflection = MallDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvoyData::kDaynumFieldNumber;
const int ConvoyData::kEscortidFieldNumber;
const int ConvoyData::kEndTimeFieldNumber;
const int ConvoyData::kFreeNumFieldNumber;
const int ConvoyData::kGenEscortIdFieldNumber;
const int ConvoyData::kResetTimeFieldNumber;
#endif  // !_MSC_VER

ConvoyData::ConvoyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvoyData::InitAsDefaultInstance() {
}

ConvoyData::ConvoyData(const ConvoyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvoyData::SharedCtor() {
  _cached_size_ = 0;
  daynum_ = 0;
  escortid_ = 0;
  endtime_ = GOOGLE_ULONGLONG(0);
  freenum_ = 0;
  genescortid_ = 0;
  resettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvoyData::~ConvoyData() {
  SharedDtor();
}

void ConvoyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvoyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvoyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvoyData_descriptor_;
}

const ConvoyData& ConvoyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ConvoyData* ConvoyData::default_instance_ = NULL;

ConvoyData* ConvoyData::New() const {
  return new ConvoyData;
}

void ConvoyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daynum_ = 0;
    escortid_ = 0;
    endtime_ = GOOGLE_ULONGLONG(0);
    freenum_ = 0;
    genescortid_ = 0;
    resettime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvoyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 daynum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_escortid;
        break;
      }

      // optional int32 escortid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_escortid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escortid_)));
          set_has_escortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional uint64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeNum;
        break;
      }

      // optional int32 freeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_genEscortId;
        break;
      }

      // optional int32 genEscortId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genEscortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genescortid_)));
          set_has_genescortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resetTime;
        break;
      }

      // optional uint64 resetTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvoyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daynum(), output);
  }

  // optional int32 escortid = 2;
  if (has_escortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->escortid(), output);
  }

  // optional uint64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freenum(), output);
  }

  // optional int32 genEscortId = 5;
  if (has_genescortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->genescortid(), output);
  }

  // optional uint64 resetTime = 6;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvoyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daynum(), target);
  }

  // optional int32 escortid = 2;
  if (has_escortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->escortid(), target);
  }

  // optional uint64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freenum(), target);
  }

  // optional int32 genEscortId = 5;
  if (has_genescortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->genescortid(), target);
  }

  // optional uint64 resetTime = 6;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvoyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 daynum = 1;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional int32 escortid = 2;
    if (has_escortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escortid());
    }

    // optional uint64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional int32 freeNum = 4;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }

    // optional int32 genEscortId = 5;
    if (has_genescortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genescortid());
    }

    // optional uint64 resetTime = 6;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvoyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvoyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvoyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvoyData::MergeFrom(const ConvoyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_escortid()) {
      set_escortid(from.escortid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
    if (from.has_genescortid()) {
      set_genescortid(from.genescortid());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvoyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvoyData::CopyFrom(const ConvoyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvoyData::IsInitialized() const {

  return true;
}

void ConvoyData::Swap(ConvoyData* other) {
  if (other != this) {
    std::swap(daynum_, other->daynum_);
    std::swap(escortid_, other->escortid_);
    std::swap(endtime_, other->endtime_);
    std::swap(freenum_, other->freenum_);
    std::swap(genescortid_, other->genescortid_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvoyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvoyData_descriptor_;
  metadata.reflection = ConvoyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmorDBData::kInfosFieldNumber;
#endif  // !_MSC_VER

ArmorDBData::ArmorDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArmorDBData::InitAsDefaultInstance() {
}

ArmorDBData::ArmorDBData(const ArmorDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArmorDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorDBData::~ArmorDBData() {
  SharedDtor();
}

void ArmorDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmorDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmorDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmorDBData_descriptor_;
}

const ArmorDBData& ArmorDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ArmorDBData* ArmorDBData::default_instance_ = NULL;

ArmorDBData* ArmorDBData::New() const {
  return new ArmorDBData;
}

void ArmorDBData::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmorDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArmorInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmorDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArmorInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmorDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArmorInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmorDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ArmorInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmorDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmorDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmorDBData::MergeFrom(const ArmorDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmorDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorDBData::CopyFrom(const ArmorDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorDBData::IsInitialized() const {

  return true;
}

void ArmorDBData::Swap(ArmorDBData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmorDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmorDBData_descriptor_;
  metadata.reflection = ArmorDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistDBData::kResetTimeFieldNumber;
const int AssistDBData::kDayPrestigeFieldNumber;
const int AssistDBData::kSendNumFieldNumber;
const int AssistDBData::kHelpNumFieldNumber;
const int AssistDBData::kAllSendNumFieldNumber;
const int AssistDBData::kAllHelpNumFieldNumber;
#endif  // !_MSC_VER

AssistDBData::AssistDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistDBData::InitAsDefaultInstance() {
}

AssistDBData::AssistDBData(const AssistDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistDBData::SharedCtor() {
  _cached_size_ = 0;
  resettime_ = GOOGLE_ULONGLONG(0);
  dayprestige_ = 0;
  sendnum_ = 0;
  helpnum_ = 0;
  allsendnum_ = 0;
  allhelpnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistDBData::~AssistDBData() {
  SharedDtor();
}

void AssistDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistDBData_descriptor_;
}

const AssistDBData& AssistDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

AssistDBData* AssistDBData::default_instance_ = NULL;

AssistDBData* AssistDBData::New() const {
  return new AssistDBData;
}

void AssistDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resettime_ = GOOGLE_ULONGLONG(0);
    dayprestige_ = 0;
    sendnum_ = 0;
    helpnum_ = 0;
    allsendnum_ = 0;
    allhelpnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 resetTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dayPrestige;
        break;
      }

      // optional int32 dayPrestige = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayPrestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayprestige_)));
          set_has_dayprestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendNum;
        break;
      }

      // optional int32 sendNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendnum_)));
          set_has_sendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_helpNum;
        break;
      }

      // optional int32 helpNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_allSendNum;
        break;
      }

      // optional int32 allSendNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allSendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allsendnum_)));
          set_has_allsendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allHelpNum;
        break;
      }

      // optional int32 allHelpNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allHelpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allhelpnum_)));
          set_has_allhelpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 resetTime = 1;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resettime(), output);
  }

  // optional int32 dayPrestige = 2;
  if (has_dayprestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dayprestige(), output);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sendnum(), output);
  }

  // optional int32 helpNum = 4;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->helpnum(), output);
  }

  // optional int32 allSendNum = 5;
  if (has_allsendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->allsendnum(), output);
  }

  // optional int32 allHelpNum = 6;
  if (has_allhelpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allhelpnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 resetTime = 1;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resettime(), target);
  }

  // optional int32 dayPrestige = 2;
  if (has_dayprestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dayprestige(), target);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sendnum(), target);
  }

  // optional int32 helpNum = 4;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->helpnum(), target);
  }

  // optional int32 allSendNum = 5;
  if (has_allsendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->allsendnum(), target);
  }

  // optional int32 allHelpNum = 6;
  if (has_allhelpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allhelpnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 resetTime = 1;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional int32 dayPrestige = 2;
    if (has_dayprestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayprestige());
    }

    // optional int32 sendNum = 3;
    if (has_sendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendnum());
    }

    // optional int32 helpNum = 4;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpnum());
    }

    // optional int32 allSendNum = 5;
    if (has_allsendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allsendnum());
    }

    // optional int32 allHelpNum = 6;
    if (has_allhelpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allhelpnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistDBData::MergeFrom(const AssistDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_dayprestige()) {
      set_dayprestige(from.dayprestige());
    }
    if (from.has_sendnum()) {
      set_sendnum(from.sendnum());
    }
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
    if (from.has_allsendnum()) {
      set_allsendnum(from.allsendnum());
    }
    if (from.has_allhelpnum()) {
      set_allhelpnum(from.allhelpnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistDBData::CopyFrom(const AssistDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistDBData::IsInitialized() const {

  return true;
}

void AssistDBData::Swap(AssistDBData* other) {
  if (other != this) {
    std::swap(resettime_, other->resettime_);
    std::swap(dayprestige_, other->dayprestige_);
    std::swap(sendnum_, other->sendnum_);
    std::swap(helpnum_, other->helpnum_);
    std::swap(allsendnum_, other->allsendnum_);
    std::swap(allhelpnum_, other->allhelpnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistDBData_descriptor_;
  metadata.reflection = AssistDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBData::kCidFieldNumber;
const int RoleDBData::kZidFieldNumber;
const int RoleDBData::kUidFieldNumber;
const int RoleDBData::kBaseFieldNumber;
const int RoleDBData::kBagFieldNumber;
const int RoleDBData::kEquipFieldNumber;
const int RoleDBData::kTaskFieldNumber;
const int RoleDBData::kUnlockinfoFieldNumber;
const int RoleDBData::kGrowFieldNumber;
const int RoleDBData::kMiniFieldNumber;
const int RoleDBData::kFacadeFieldNumber;
const int RoleDBData::kSkillFieldNumber;
const int RoleDBData::kMiniActivityFieldNumber;
const int RoleDBData::kDupFieldNumber;
const int RoleDBData::kBuffFieldNumber;
const int RoleDBData::kBossFieldNumber;
const int RoleDBData::kVipFieldNumber;
const int RoleDBData::kAttrFieldNumber;
const int RoleDBData::kMountFieldNumber;
const int RoleDBData::kDeityFieldNumber;
const int RoleDBData::kPetFieldNumber;
const int RoleDBData::kMallFieldNumber;
const int RoleDBData::kConvoyFieldNumber;
const int RoleDBData::kArmorFieldNumber;
const int RoleDBData::kAssistFieldNumber;
#endif  // !_MSC_VER

RoleDBData::RoleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
  bag_ = const_cast< ::proto_ff::RoleDBBagData*>(&::proto_ff::RoleDBBagData::default_instance());
  equip_ = const_cast< ::proto_ff::RoleDBEquipData*>(&::proto_ff::RoleDBEquipData::default_instance());
  task_ = const_cast< ::proto_ff::CharacterDBTaskData*>(&::proto_ff::CharacterDBTaskData::default_instance());
  unlockinfo_ = const_cast< ::proto_ff::FunctionUnlockInfo*>(&::proto_ff::FunctionUnlockInfo::default_instance());
  grow_ = const_cast< ::proto_ff::GrowDBData*>(&::proto_ff::GrowDBData::default_instance());
  mini_ = const_cast< ::proto_ff::MiniDBData*>(&::proto_ff::MiniDBData::default_instance());
  facade_ = const_cast< ::proto_ff::FacadeDBData*>(&::proto_ff::FacadeDBData::default_instance());
  skill_ = const_cast< ::proto_ff::SkillDBData*>(&::proto_ff::SkillDBData::default_instance());
  mini_activity_ = const_cast< ::proto_ff::MiniActivityDBData*>(&::proto_ff::MiniActivityDBData::default_instance());
  dup_ = const_cast< ::proto_ff::DupDBData*>(&::proto_ff::DupDBData::default_instance());
  buff_ = const_cast< ::proto_ff::BuffDBData*>(&::proto_ff::BuffDBData::default_instance());
  boss_ = const_cast< ::proto_ff::BossDBData*>(&::proto_ff::BossDBData::default_instance());
  vip_ = const_cast< ::proto_ff::VipDBData*>(&::proto_ff::VipDBData::default_instance());
  attr_ = const_cast< ::proto_ff::AttrDBData*>(&::proto_ff::AttrDBData::default_instance());
  mount_ = const_cast< ::proto_ff::MountDataInfo*>(&::proto_ff::MountDataInfo::default_instance());
  deity_ = const_cast< ::proto_ff::DeityDataInfo*>(&::proto_ff::DeityDataInfo::default_instance());
  pet_ = const_cast< ::proto_ff::PetDBData*>(&::proto_ff::PetDBData::default_instance());
  mall_ = const_cast< ::proto_ff::MallDBData*>(&::proto_ff::MallDBData::default_instance());
  convoy_ = const_cast< ::proto_ff::ConvoyData*>(&::proto_ff::ConvoyData::default_instance());
  armor_ = const_cast< ::proto_ff::ArmorDBData*>(&::proto_ff::ArmorDBData::default_instance());
  assist_ = const_cast< ::proto_ff::AssistDBData*>(&::proto_ff::AssistDBData::default_instance());
}

RoleDBData::RoleDBData(const RoleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  bag_ = NULL;
  equip_ = NULL;
  task_ = NULL;
  unlockinfo_ = NULL;
  grow_ = NULL;
  mini_ = NULL;
  facade_ = NULL;
  skill_ = NULL;
  mini_activity_ = NULL;
  dup_ = NULL;
  buff_ = NULL;
  boss_ = NULL;
  vip_ = NULL;
  attr_ = NULL;
  mount_ = NULL;
  deity_ = NULL;
  pet_ = NULL;
  mall_ = NULL;
  convoy_ = NULL;
  armor_ = NULL;
  assist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBData::~RoleDBData() {
  SharedDtor();
}

void RoleDBData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete bag_;
    delete equip_;
    delete task_;
    delete unlockinfo_;
    delete grow_;
    delete mini_;
    delete facade_;
    delete skill_;
    delete mini_activity_;
    delete dup_;
    delete buff_;
    delete boss_;
    delete vip_;
    delete attr_;
    delete mount_;
    delete deity_;
    delete pet_;
    delete mall_;
    delete convoy_;
    delete armor_;
    delete assist_;
  }
}

void RoleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBData_descriptor_;
}

const RoleDBData& RoleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleDBData* RoleDBData::default_instance_ = NULL;

RoleDBData* RoleDBData::New() const {
  return new RoleDBData;
}

void RoleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
    if (has_bag()) {
      if (bag_ != NULL) bag_->::proto_ff::RoleDBBagData::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto_ff::RoleDBEquipData::Clear();
    }
    if (has_task()) {
      if (task_ != NULL) task_->::proto_ff::CharacterDBTaskData::Clear();
    }
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_grow()) {
      if (grow_ != NULL) grow_->::proto_ff::GrowDBData::Clear();
    }
    if (has_mini()) {
      if (mini_ != NULL) mini_->::proto_ff::MiniDBData::Clear();
    }
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::FacadeDBData::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::SkillDBData::Clear();
    }
    if (has_mini_activity()) {
      if (mini_activity_ != NULL) mini_activity_->::proto_ff::MiniActivityDBData::Clear();
    }
    if (has_dup()) {
      if (dup_ != NULL) dup_->::proto_ff::DupDBData::Clear();
    }
    if (has_buff()) {
      if (buff_ != NULL) buff_->::proto_ff::BuffDBData::Clear();
    }
    if (has_boss()) {
      if (boss_ != NULL) boss_->::proto_ff::BossDBData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_vip()) {
      if (vip_ != NULL) vip_->::proto_ff::VipDBData::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
    }
    if (has_mount()) {
      if (mount_ != NULL) mount_->::proto_ff::MountDataInfo::Clear();
    }
    if (has_deity()) {
      if (deity_ != NULL) deity_->::proto_ff::DeityDataInfo::Clear();
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::proto_ff::PetDBData::Clear();
    }
    if (has_mall()) {
      if (mall_ != NULL) mall_->::proto_ff::MallDBData::Clear();
    }
    if (has_convoy()) {
      if (convoy_ != NULL) convoy_->::proto_ff::ConvoyData::Clear();
    }
    if (has_armor()) {
      if (armor_ != NULL) armor_->::proto_ff::ArmorDBData::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_assist()) {
      if (assist_ != NULL) assist_->::proto_ff::AssistDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bag;
        break;
      }

      // optional .proto_ff.RoleDBBagData bag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip;
        break;
      }

      // optional .proto_ff.RoleDBEquipData equip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task;
        break;
      }

      // optional .proto_ff.CharacterDBTaskData task = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_unlockinfo;
        break;
      }

      // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_grow;
        break;
      }

      // optional .proto_ff.GrowDBData grow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mini;
        break;
      }

      // optional .proto_ff.MiniDBData mini = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mini:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mini()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_facade;
        break;
      }

      // optional .proto_ff.FacadeDBData facade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill;
        break;
      }

      // optional .proto_ff.SkillDBData skill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_mini_activity;
        break;
      }

      // optional .proto_ff.MiniActivityDBData mini_activity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mini_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mini_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_dup;
        break;
      }

      // optional .proto_ff.DupDBData dup = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_buff;
        break;
      }

      // optional .proto_ff.BuffDBData buff = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_boss;
        break;
      }

      // optional .proto_ff.BossDBData boss = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_vip;
        break;
      }

      // optional .proto_ff.VipDBData vip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_attr;
        break;
      }

      // optional .proto_ff.AttrDBData attr = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mount;
        break;
      }

      // optional .proto_ff.MountDataInfo mount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_deity;
        break;
      }

      // optional .proto_ff.DeityDataInfo deity = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_pet;
        break;
      }

      // optional .proto_ff.PetDBData pet = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_mall;
        break;
      }

      // optional .proto_ff.MallDBData mall = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_convoy;
        break;
      }

      // optional .proto_ff.ConvoyData convoy = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convoy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convoy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_armor;
        break;
      }

      // optional .proto_ff.ArmorDBData armor = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_assist;
        break;
      }

      // optional .proto_ff.AssistDBData assist = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  // optional .proto_ff.RoleDBBagData bag = 5;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bag(), output);
  }

  // optional .proto_ff.RoleDBEquipData equip = 6;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equip(), output);
  }

  // optional .proto_ff.CharacterDBTaskData task = 7;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->task(), output);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->unlockinfo(), output);
  }

  // optional .proto_ff.GrowDBData grow = 9;
  if (has_grow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->grow(), output);
  }

  // optional .proto_ff.MiniDBData mini = 10;
  if (has_mini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mini(), output);
  }

  // optional .proto_ff.FacadeDBData facade = 11;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->facade(), output);
  }

  // optional .proto_ff.SkillDBData skill = 12;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill(), output);
  }

  // optional .proto_ff.MiniActivityDBData mini_activity = 13;
  if (has_mini_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->mini_activity(), output);
  }

  // optional .proto_ff.DupDBData dup = 14;
  if (has_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->dup(), output);
  }

  // optional .proto_ff.BuffDBData buff = 15;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->buff(), output);
  }

  // optional .proto_ff.BossDBData boss = 16;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->boss(), output);
  }

  // optional .proto_ff.VipDBData vip = 17;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vip(), output);
  }

  // optional .proto_ff.AttrDBData attr = 18;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->attr(), output);
  }

  // optional .proto_ff.MountDataInfo mount = 19;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mount(), output);
  }

  // optional .proto_ff.DeityDataInfo deity = 20;
  if (has_deity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->deity(), output);
  }

  // optional .proto_ff.PetDBData pet = 21;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->pet(), output);
  }

  // optional .proto_ff.MallDBData mall = 22;
  if (has_mall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->mall(), output);
  }

  // optional .proto_ff.ConvoyData convoy = 23;
  if (has_convoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->convoy(), output);
  }

  // optional .proto_ff.ArmorDBData armor = 24;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->armor(), output);
  }

  // optional .proto_ff.AssistDBData assist = 25;
  if (has_assist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->assist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  // optional .proto_ff.RoleDBBagData bag = 5;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bag(), target);
  }

  // optional .proto_ff.RoleDBEquipData equip = 6;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equip(), target);
  }

  // optional .proto_ff.CharacterDBTaskData task = 7;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->task(), target);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->unlockinfo(), target);
  }

  // optional .proto_ff.GrowDBData grow = 9;
  if (has_grow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->grow(), target);
  }

  // optional .proto_ff.MiniDBData mini = 10;
  if (has_mini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mini(), target);
  }

  // optional .proto_ff.FacadeDBData facade = 11;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->facade(), target);
  }

  // optional .proto_ff.SkillDBData skill = 12;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill(), target);
  }

  // optional .proto_ff.MiniActivityDBData mini_activity = 13;
  if (has_mini_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->mini_activity(), target);
  }

  // optional .proto_ff.DupDBData dup = 14;
  if (has_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->dup(), target);
  }

  // optional .proto_ff.BuffDBData buff = 15;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->buff(), target);
  }

  // optional .proto_ff.BossDBData boss = 16;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->boss(), target);
  }

  // optional .proto_ff.VipDBData vip = 17;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vip(), target);
  }

  // optional .proto_ff.AttrDBData attr = 18;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->attr(), target);
  }

  // optional .proto_ff.MountDataInfo mount = 19;
  if (has_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mount(), target);
  }

  // optional .proto_ff.DeityDataInfo deity = 20;
  if (has_deity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->deity(), target);
  }

  // optional .proto_ff.PetDBData pet = 21;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->pet(), target);
  }

  // optional .proto_ff.MallDBData mall = 22;
  if (has_mall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->mall(), target);
  }

  // optional .proto_ff.ConvoyData convoy = 23;
  if (has_convoy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->convoy(), target);
  }

  // optional .proto_ff.ArmorDBData armor = 24;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->armor(), target);
  }

  // optional .proto_ff.AssistDBData assist = 25;
  if (has_assist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->assist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.RoleDBBagData bag = 5;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }

    // optional .proto_ff.RoleDBEquipData equip = 6;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .proto_ff.CharacterDBTaskData task = 7;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.GrowDBData grow = 9;
    if (has_grow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grow());
    }

    // optional .proto_ff.MiniDBData mini = 10;
    if (has_mini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mini());
    }

    // optional .proto_ff.FacadeDBData facade = 11;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional .proto_ff.SkillDBData skill = 12;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .proto_ff.MiniActivityDBData mini_activity = 13;
    if (has_mini_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mini_activity());
    }

    // optional .proto_ff.DupDBData dup = 14;
    if (has_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dup());
    }

    // optional .proto_ff.BuffDBData buff = 15;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // optional .proto_ff.BossDBData boss = 16;
    if (has_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.VipDBData vip = 17;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip());
    }

    // optional .proto_ff.AttrDBData attr = 18;
    if (has_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .proto_ff.MountDataInfo mount = 19;
    if (has_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mount());
    }

    // optional .proto_ff.DeityDataInfo deity = 20;
    if (has_deity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deity());
    }

    // optional .proto_ff.PetDBData pet = 21;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional .proto_ff.MallDBData mall = 22;
    if (has_mall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mall());
    }

    // optional .proto_ff.ConvoyData convoy = 23;
    if (has_convoy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convoy());
    }

    // optional .proto_ff.ArmorDBData armor = 24;
    if (has_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto_ff.AssistDBData assist = 25;
    if (has_assist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBData::MergeFrom(const RoleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
    if (from.has_bag()) {
      mutable_bag()->::proto_ff::RoleDBBagData::MergeFrom(from.bag());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto_ff::RoleDBEquipData::MergeFrom(from.equip());
    }
    if (from.has_task()) {
      mutable_task()->::proto_ff::CharacterDBTaskData::MergeFrom(from.task());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::proto_ff::FunctionUnlockInfo::MergeFrom(from.unlockinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grow()) {
      mutable_grow()->::proto_ff::GrowDBData::MergeFrom(from.grow());
    }
    if (from.has_mini()) {
      mutable_mini()->::proto_ff::MiniDBData::MergeFrom(from.mini());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::FacadeDBData::MergeFrom(from.facade());
    }
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::SkillDBData::MergeFrom(from.skill());
    }
    if (from.has_mini_activity()) {
      mutable_mini_activity()->::proto_ff::MiniActivityDBData::MergeFrom(from.mini_activity());
    }
    if (from.has_dup()) {
      mutable_dup()->::proto_ff::DupDBData::MergeFrom(from.dup());
    }
    if (from.has_buff()) {
      mutable_buff()->::proto_ff::BuffDBData::MergeFrom(from.buff());
    }
    if (from.has_boss()) {
      mutable_boss()->::proto_ff::BossDBData::MergeFrom(from.boss());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vip()) {
      mutable_vip()->::proto_ff::VipDBData::MergeFrom(from.vip());
    }
    if (from.has_attr()) {
      mutable_attr()->::proto_ff::AttrDBData::MergeFrom(from.attr());
    }
    if (from.has_mount()) {
      mutable_mount()->::proto_ff::MountDataInfo::MergeFrom(from.mount());
    }
    if (from.has_deity()) {
      mutable_deity()->::proto_ff::DeityDataInfo::MergeFrom(from.deity());
    }
    if (from.has_pet()) {
      mutable_pet()->::proto_ff::PetDBData::MergeFrom(from.pet());
    }
    if (from.has_mall()) {
      mutable_mall()->::proto_ff::MallDBData::MergeFrom(from.mall());
    }
    if (from.has_convoy()) {
      mutable_convoy()->::proto_ff::ConvoyData::MergeFrom(from.convoy());
    }
    if (from.has_armor()) {
      mutable_armor()->::proto_ff::ArmorDBData::MergeFrom(from.armor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_assist()) {
      mutable_assist()->::proto_ff::AssistDBData::MergeFrom(from.assist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBData::CopyFrom(const RoleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_bag()) {
    if (!this->bag().IsInitialized()) return false;
  }
  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  if (has_deity()) {
    if (!this->deity().IsInitialized()) return false;
  }
  return true;
}

void RoleDBData::Swap(RoleDBData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(bag_, other->bag_);
    std::swap(equip_, other->equip_);
    std::swap(task_, other->task_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(grow_, other->grow_);
    std::swap(mini_, other->mini_);
    std::swap(facade_, other->facade_);
    std::swap(skill_, other->skill_);
    std::swap(mini_activity_, other->mini_activity_);
    std::swap(dup_, other->dup_);
    std::swap(buff_, other->buff_);
    std::swap(boss_, other->boss_);
    std::swap(vip_, other->vip_);
    std::swap(attr_, other->attr_);
    std::swap(mount_, other->mount_);
    std::swap(deity_, other->deity_);
    std::swap(pet_, other->pet_);
    std::swap(mall_, other->mall_);
    std::swap(convoy_, other->convoy_);
    std::swap(armor_, other->armor_);
    std::swap(assist_, other->assist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBData_descriptor_;
  metadata.reflection = RoleDBData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoleMirrorData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorData_Type_descriptor_;
}
bool RoleMirrorData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoleMirrorData_Type RoleMirrorData::Role;
const RoleMirrorData_Type RoleMirrorData::Rebot;
const RoleMirrorData_Type RoleMirrorData::TeamRole;
const RoleMirrorData_Type RoleMirrorData::TeamRebot;
const RoleMirrorData_Type RoleMirrorData::Type_MIN;
const RoleMirrorData_Type RoleMirrorData::Type_MAX;
const int RoleMirrorData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoleMirrorData::kCidFieldNumber;
const int RoleMirrorData::kTypeFieldNumber;
const int RoleMirrorData::kTeamidFieldNumber;
const int RoleMirrorData::kZidFieldNumber;
const int RoleMirrorData::kAttrFieldNumber;
const int RoleMirrorData::kSkillFieldNumber;
const int RoleMirrorData::kBaseFieldNumber;
#endif  // !_MSC_VER

RoleMirrorData::RoleMirrorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMirrorData::InitAsDefaultInstance() {
  attr_ = const_cast< ::proto_ff::AttrDBData*>(&::proto_ff::AttrDBData::default_instance());
  skill_ = const_cast< ::proto_ff::SkillDBData*>(&::proto_ff::SkillDBData::default_instance());
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
}

RoleMirrorData::RoleMirrorData(const RoleMirrorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMirrorData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  teamid_ = 0u;
  zid_ = 0u;
  attr_ = NULL;
  skill_ = NULL;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMirrorData::~RoleMirrorData() {
  SharedDtor();
}

void RoleMirrorData::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
    delete skill_;
    delete base_;
  }
}

void RoleMirrorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMirrorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorData_descriptor_;
}

const RoleMirrorData& RoleMirrorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleMirrorData* RoleMirrorData::default_instance_ = NULL;

RoleMirrorData* RoleMirrorData::New() const {
  return new RoleMirrorData;
}

void RoleMirrorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    teamid_ = 0u;
    zid_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::SkillDBData::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMirrorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        break;
      }

      // optional .proto_ff.AttrDBData attr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }

      // optional .proto_ff.SkillDBData skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMirrorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint32 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional .proto_ff.AttrDBData attr = 5;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr(), output);
  }

  // optional .proto_ff.SkillDBData skill = 6;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 7;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMirrorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint32 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional .proto_ff.AttrDBData attr = 5;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr(), target);
  }

  // optional .proto_ff.SkillDBData skill = 6;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 7;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMirrorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint32 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional .proto_ff.AttrDBData attr = 5;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .proto_ff.SkillDBData skill = 6;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .proto_ff.RoleDBBaseData base = 7;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMirrorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMirrorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMirrorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMirrorData::MergeFrom(const RoleMirrorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_attr()) {
      mutable_attr()->::proto_ff::AttrDBData::MergeFrom(from.attr());
    }
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::SkillDBData::MergeFrom(from.skill());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMirrorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMirrorData::CopyFrom(const RoleMirrorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMirrorData::IsInitialized() const {

  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void RoleMirrorData::Swap(RoleMirrorData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(teamid_, other->teamid_);
    std::swap(zid_, other->zid_);
    std::swap(attr_, other->attr_);
    std::swap(skill_, other->skill_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMirrorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMirrorData_descriptor_;
  metadata.reflection = RoleMirrorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemDBProto::kCidFieldNumber;
const int FactionMemDBProto::kDutyFieldNumber;
const int FactionMemDBProto::kJoinTimeFieldNumber;
const int FactionMemDBProto::kTotalContriFieldNumber;
#endif  // !_MSC_VER

FactionMemDBProto::FactionMemDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemDBProto::InitAsDefaultInstance() {
}

FactionMemDBProto::FactionMemDBProto(const FactionMemDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  duty_ = 0;
  join_time_ = GOOGLE_ULONGLONG(0);
  total_contri_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemDBProto::~FactionMemDBProto() {
  SharedDtor();
}

void FactionMemDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMemDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemDBProto_descriptor_;
}

const FactionMemDBProto& FactionMemDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionMemDBProto* FactionMemDBProto::default_instance_ = NULL;

FactionMemDBProto* FactionMemDBProto::New() const {
  return new FactionMemDBProto;
}

void FactionMemDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    duty_ = 0;
    join_time_ = GOOGLE_ULONGLONG(0);
    total_contri_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duty;
        break;
      }

      // optional int32 duty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_join_time;
        break;
      }

      // optional uint64 join_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_contri;
        break;
      }

      // optional uint32 total_contri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contri_)));
          set_has_total_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duty(), output);
  }

  // optional uint64 join_time = 3;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->join_time(), output);
  }

  // optional uint32 total_contri = 4;
  if (has_total_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_contri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duty(), target);
  }

  // optional uint64 join_time = 3;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->join_time(), target);
  }

  // optional uint32 total_contri = 4;
  if (has_total_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_contri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 duty = 2;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 join_time = 3;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->join_time());
    }

    // optional uint32 total_contri = 4;
    if (has_total_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_contri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemDBProto::MergeFrom(const FactionMemDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_total_contri()) {
      set_total_contri(from.total_contri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemDBProto::CopyFrom(const FactionMemDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemDBProto::IsInitialized() const {

  return true;
}

void FactionMemDBProto::Swap(FactionMemDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(duty_, other->duty_);
    std::swap(join_time_, other->join_time_);
    std::swap(total_contri_, other->total_contri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemDBProto_descriptor_;
  metadata.reflection = FactionMemDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMultMemDBProto::kMemLstFieldNumber;
#endif  // !_MSC_VER

FactionMultMemDBProto::FactionMultMemDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMultMemDBProto::InitAsDefaultInstance() {
}

FactionMultMemDBProto::FactionMultMemDBProto(const FactionMultMemDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMultMemDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMultMemDBProto::~FactionMultMemDBProto() {
  SharedDtor();
}

void FactionMultMemDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMultMemDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMultMemDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMultMemDBProto_descriptor_;
}

const FactionMultMemDBProto& FactionMultMemDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionMultMemDBProto* FactionMultMemDBProto::default_instance_ = NULL;

FactionMultMemDBProto* FactionMultMemDBProto::New() const {
  return new FactionMultMemDBProto;
}

void FactionMultMemDBProto::Clear() {
  mem_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMultMemDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMultMemDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMultMemDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMultMemDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  total_size += 1 * this->mem_lst_size();
  for (int i = 0; i < this->mem_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMultMemDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMultMemDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMultMemDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMultMemDBProto::MergeFrom(const FactionMultMemDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_lst_.MergeFrom(from.mem_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMultMemDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMultMemDBProto::CopyFrom(const FactionMultMemDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMultMemDBProto::IsInitialized() const {

  return true;
}

void FactionMultMemDBProto::Swap(FactionMultMemDBProto* other) {
  if (other != this) {
    mem_lst_.Swap(&other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMultMemDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMultMemDBProto_descriptor_;
  metadata.reflection = FactionMultMemDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionApplyDBProto::kCidFieldNumber;
const int FactionApplyDBProto::kTimeFieldNumber;
#endif  // !_MSC_VER

FactionApplyDBProto::FactionApplyDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionApplyDBProto::InitAsDefaultInstance() {
}

FactionApplyDBProto::FactionApplyDBProto(const FactionApplyDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionApplyDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionApplyDBProto::~FactionApplyDBProto() {
  SharedDtor();
}

void FactionApplyDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionApplyDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionApplyDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionApplyDBProto_descriptor_;
}

const FactionApplyDBProto& FactionApplyDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionApplyDBProto* FactionApplyDBProto::default_instance_ = NULL;

FactionApplyDBProto* FactionApplyDBProto::New() const {
  return new FactionApplyDBProto;
}

void FactionApplyDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionApplyDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionApplyDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionApplyDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionApplyDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionApplyDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionApplyDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionApplyDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionApplyDBProto::MergeFrom(const FactionApplyDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionApplyDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionApplyDBProto::CopyFrom(const FactionApplyDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionApplyDBProto::IsInitialized() const {

  return true;
}

void FactionApplyDBProto::Swap(FactionApplyDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionApplyDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionApplyDBProto_descriptor_;
  metadata.reflection = FactionApplyDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMultApplyDBProto::kApplyLstFieldNumber;
#endif  // !_MSC_VER

FactionMultApplyDBProto::FactionMultApplyDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMultApplyDBProto::InitAsDefaultInstance() {
}

FactionMultApplyDBProto::FactionMultApplyDBProto(const FactionMultApplyDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMultApplyDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMultApplyDBProto::~FactionMultApplyDBProto() {
  SharedDtor();
}

void FactionMultApplyDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMultApplyDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMultApplyDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMultApplyDBProto_descriptor_;
}

const FactionMultApplyDBProto& FactionMultApplyDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionMultApplyDBProto* FactionMultApplyDBProto::default_instance_ = NULL;

FactionMultApplyDBProto* FactionMultApplyDBProto::New() const {
  return new FactionMultApplyDBProto;
}

void FactionMultApplyDBProto::Clear() {
  apply_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMultApplyDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apply_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMultApplyDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apply_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMultApplyDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apply_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMultApplyDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  total_size += 1 * this->apply_lst_size();
  for (int i = 0; i < this->apply_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMultApplyDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMultApplyDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMultApplyDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMultApplyDBProto::MergeFrom(const FactionMultApplyDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_lst_.MergeFrom(from.apply_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMultApplyDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMultApplyDBProto::CopyFrom(const FactionMultApplyDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMultApplyDBProto::IsInitialized() const {

  return true;
}

void FactionMultApplyDBProto::Swap(FactionMultApplyDBProto* other) {
  if (other != this) {
    apply_lst_.Swap(&other->apply_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMultApplyDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMultApplyDBProto_descriptor_;
  metadata.reflection = FactionMultApplyDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRecordDBProto::kCidFieldNumber;
const int FactionRecordDBProto::kTimeFieldNumber;
const int FactionRecordDBProto::kOpFieldNumber;
const int FactionRecordDBProto::kParam1FieldNumber;
#endif  // !_MSC_VER

FactionRecordDBProto::FactionRecordDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRecordDBProto::InitAsDefaultInstance() {
}

FactionRecordDBProto::FactionRecordDBProto(const FactionRecordDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRecordDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  op_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRecordDBProto::~FactionRecordDBProto() {
  SharedDtor();
}

void FactionRecordDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRecordDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRecordDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRecordDBProto_descriptor_;
}

const FactionRecordDBProto& FactionRecordDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionRecordDBProto* FactionRecordDBProto::default_instance_ = NULL;

FactionRecordDBProto* FactionRecordDBProto::New() const {
  return new FactionRecordDBProto;
}

void FactionRecordDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    op_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRecordDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional int32 op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRecordDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op(), output);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRecordDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op(), target);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRecordDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRecordDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRecordDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRecordDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRecordDBProto::MergeFrom(const FactionRecordDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRecordDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRecordDBProto::CopyFrom(const FactionRecordDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRecordDBProto::IsInitialized() const {

  return true;
}

void FactionRecordDBProto::Swap(FactionRecordDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(time_, other->time_);
    std::swap(op_, other->op_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRecordDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRecordDBProto_descriptor_;
  metadata.reflection = FactionRecordDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMutRecordDBProto::kRecordLstFieldNumber;
#endif  // !_MSC_VER

FactionMutRecordDBProto::FactionMutRecordDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMutRecordDBProto::InitAsDefaultInstance() {
}

FactionMutRecordDBProto::FactionMutRecordDBProto(const FactionMutRecordDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMutRecordDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMutRecordDBProto::~FactionMutRecordDBProto() {
  SharedDtor();
}

void FactionMutRecordDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMutRecordDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMutRecordDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMutRecordDBProto_descriptor_;
}

const FactionMutRecordDBProto& FactionMutRecordDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionMutRecordDBProto* FactionMutRecordDBProto::default_instance_ = NULL;

FactionMutRecordDBProto* FactionMutRecordDBProto::New() const {
  return new FactionMutRecordDBProto;
}

void FactionMutRecordDBProto::Clear() {
  record_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMutRecordDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMutRecordDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMutRecordDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMutRecordDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  total_size += 1 * this->record_lst_size();
  for (int i = 0; i < this->record_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMutRecordDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMutRecordDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMutRecordDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMutRecordDBProto::MergeFrom(const FactionMutRecordDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_lst_.MergeFrom(from.record_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMutRecordDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMutRecordDBProto::CopyFrom(const FactionMutRecordDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMutRecordDBProto::IsInitialized() const {

  return true;
}

void FactionMutRecordDBProto::Swap(FactionMutRecordDBProto* other) {
  if (other != this) {
    record_lst_.Swap(&other->record_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMutRecordDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMutRecordDBProto_descriptor_;
  metadata.reflection = FactionMutRecordDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBBase::kFactionIdFieldNumber;
const int FactionDBBase::kNameFieldNumber;
const int FactionDBBase::kLeaderIdFieldNumber;
const int FactionDBBase::kFightFieldNumber;
const int FactionDBBase::kNoticeFieldNumber;
const int FactionDBBase::kLastNoticeTimeFieldNumber;
const int FactionDBBase::kLevelFieldNumber;
const int FactionDBBase::kExpFieldNumber;
const int FactionDBBase::kCreateTimeFieldNumber;
const int FactionDBBase::kProxyIdFieldNumber;
const int FactionDBBase::kProxyTimeFieldNumber;
const int FactionDBBase::kGradeFieldNumber;
const int FactionDBBase::kMemberFieldNumber;
const int FactionDBBase::kApplyFieldNumber;
const int FactionDBBase::kRecordFieldNumber;
#endif  // !_MSC_VER

FactionDBBase::FactionDBBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBBase::InitAsDefaultInstance() {
  member_ = const_cast< ::proto_ff::FactionMultMemDBProto*>(&::proto_ff::FactionMultMemDBProto::default_instance());
  apply_ = const_cast< ::proto_ff::FactionMultApplyDBProto*>(&::proto_ff::FactionMultApplyDBProto::default_instance());
  record_ = const_cast< ::proto_ff::FactionMutRecordDBProto*>(&::proto_ff::FactionMutRecordDBProto::default_instance());
}

FactionDBBase::FactionDBBase(const FactionDBBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBBase::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_notice_time_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  proxy_id_ = GOOGLE_ULONGLONG(0);
  proxy_time_ = GOOGLE_ULONGLONG(0);
  grade_ = 0;
  member_ = NULL;
  apply_ = NULL;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBBase::~FactionDBBase() {
  SharedDtor();
}

void FactionDBBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete member_;
    delete apply_;
    delete record_;
  }
}

void FactionDBBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBBase_descriptor_;
}

const FactionDBBase& FactionDBBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionDBBase* FactionDBBase::default_instance_ = NULL;

FactionDBBase* FactionDBBase::New() const {
  return new FactionDBBase;
}

void FactionDBBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    leader_id_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    last_notice_time_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    create_time_ = GOOGLE_ULONGLONG(0);
    proxy_id_ = GOOGLE_ULONGLONG(0);
    proxy_time_ = GOOGLE_ULONGLONG(0);
    grade_ = 0;
    if (has_member()) {
      if (member_ != NULL) member_->::proto_ff::FactionMultMemDBProto::Clear();
    }
    if (has_apply()) {
      if (apply_ != NULL) apply_->::proto_ff::FactionMultApplyDBProto::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::proto_ff::FactionMutRecordDBProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_id;
        break;
      }

      // optional uint64 leader_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional bytes notice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_notice_time;
        break;
      }

      // optional uint64 last_notice_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_notice_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_notice_time_)));
          set_has_last_notice_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_proxy_id;
        break;
      }

      // optional uint64 proxy_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_proxy_time;
        break;
      }

      // optional uint64 proxy_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_time_)));
          set_has_proxy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_grade;
        break;
      }

      // optional int32 grade = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_member;
        break;
      }

      // optional .proto_ff.FactionMultMemDBProto member = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_apply;
        break;
      }

      // optional .proto_ff.FactionMultApplyDBProto apply = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_record;
        break;
      }

      // optional .proto_ff.FactionMutRecordDBProto record = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 leader_id = 3;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leader_id(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  // optional bytes notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->notice(), output);
  }

  // optional uint64 last_notice_time = 6;
  if (has_last_notice_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->last_notice_time(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->exp(), output);
  }

  // optional uint64 create_time = 9;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->create_time(), output);
  }

  // optional uint64 proxy_id = 10;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->proxy_id(), output);
  }

  // optional uint64 proxy_time = 11;
  if (has_proxy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->proxy_time(), output);
  }

  // optional int32 grade = 12;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->grade(), output);
  }

  // optional .proto_ff.FactionMultMemDBProto member = 13;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->member(), output);
  }

  // optional .proto_ff.FactionMultApplyDBProto apply = 14;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->apply(), output);
  }

  // optional .proto_ff.FactionMutRecordDBProto record = 15;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 leader_id = 3;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leader_id(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  // optional bytes notice = 5;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->notice(), target);
  }

  // optional uint64 last_notice_time = 6;
  if (has_last_notice_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->last_notice_time(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->exp(), target);
  }

  // optional uint64 create_time = 9;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->create_time(), target);
  }

  // optional uint64 proxy_id = 10;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->proxy_id(), target);
  }

  // optional uint64 proxy_time = 11;
  if (has_proxy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->proxy_time(), target);
  }

  // optional int32 grade = 12;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->grade(), target);
  }

  // optional .proto_ff.FactionMultMemDBProto member = 13;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->member(), target);
  }

  // optional .proto_ff.FactionMultApplyDBProto apply = 14;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->apply(), target);
  }

  // optional .proto_ff.FactionMutRecordDBProto record = 15;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 leader_id = 3;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_id());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional bytes notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

    // optional uint64 last_notice_time = 6;
    if (has_last_notice_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_notice_time());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 create_time = 9;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint64 proxy_id = 10;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_id());
    }

    // optional uint64 proxy_time = 11;
    if (has_proxy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_time());
    }

    // optional int32 grade = 12;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional .proto_ff.FactionMultMemDBProto member = 13;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .proto_ff.FactionMultApplyDBProto apply = 14;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

    // optional .proto_ff.FactionMutRecordDBProto record = 15;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBBase::MergeFrom(const FactionDBBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_last_notice_time()) {
      set_last_notice_time(from.last_notice_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_proxy_time()) {
      set_proxy_time(from.proxy_time());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_member()) {
      mutable_member()->::proto_ff::FactionMultMemDBProto::MergeFrom(from.member());
    }
    if (from.has_apply()) {
      mutable_apply()->::proto_ff::FactionMultApplyDBProto::MergeFrom(from.apply());
    }
    if (from.has_record()) {
      mutable_record()->::proto_ff::FactionMutRecordDBProto::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBBase::CopyFrom(const FactionDBBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBBase::IsInitialized() const {

  return true;
}

void FactionDBBase::Swap(FactionDBBase* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(fight_, other->fight_);
    std::swap(notice_, other->notice_);
    std::swap(last_notice_time_, other->last_notice_time_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(create_time_, other->create_time_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(proxy_time_, other->proxy_time_);
    std::swap(grade_, other->grade_);
    std::swap(member_, other->member_);
    std::swap(apply_, other->apply_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBBase_descriptor_;
  metadata.reflection = FactionDBBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionDBData::FactionDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBData::InitAsDefaultInstance() {
}

FactionDBData::FactionDBData(const FactionDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBData::~FactionDBData() {
  SharedDtor();
}

void FactionDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBData_descriptor_;
}

const FactionDBData& FactionDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionDBData* FactionDBData::default_instance_ = NULL;

FactionDBData* FactionDBData::New() const {
  return new FactionDBData;
}

void FactionDBData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBData::MergeFrom(const FactionDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBData::CopyFrom(const FactionDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBData::IsInitialized() const {

  return true;
}

void FactionDBData::Swap(FactionDBData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBData_descriptor_;
  metadata.reflection = FactionDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionAllDBData::kFactionIdFieldNumber;
const int FactionAllDBData::kBaseFieldNumber;
const int FactionAllDBData::kDataFieldNumber;
#endif  // !_MSC_VER

FactionAllDBData::FactionAllDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionAllDBData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::FactionDBBase*>(&::proto_ff::FactionDBBase::default_instance());
  data_ = const_cast< ::proto_ff::FactionDBData*>(&::proto_ff::FactionDBData::default_instance());
}

FactionAllDBData::FactionAllDBData(const FactionAllDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionAllDBData::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  base_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionAllDBData::~FactionAllDBData() {
  SharedDtor();
}

void FactionAllDBData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete data_;
  }
}

void FactionAllDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionAllDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionAllDBData_descriptor_;
}

const FactionAllDBData& FactionAllDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionAllDBData* FactionAllDBData::default_instance_ = NULL;

FactionAllDBData* FactionAllDBData::New() const {
  return new FactionAllDBData;
}

void FactionAllDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::FactionDBBase::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FactionDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionAllDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .proto_ff.FactionDBBase base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FactionDBData data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionAllDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional .proto_ff.FactionDBBase base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .proto_ff.FactionDBData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionAllDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional .proto_ff.FactionDBBase base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .proto_ff.FactionDBData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionAllDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional .proto_ff.FactionDBBase base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.FactionDBData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionAllDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionAllDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionAllDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionAllDBData::MergeFrom(const FactionAllDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::FactionDBBase::MergeFrom(from.base());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FactionDBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionAllDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionAllDBData::CopyFrom(const FactionAllDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionAllDBData::IsInitialized() const {

  return true;
}

void FactionAllDBData::Swap(FactionAllDBData* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(base_, other->base_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionAllDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionAllDBData_descriptor_;
  metadata.reflection = FactionAllDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListDBReq::kReqidFieldNumber;
const int RoleListDBReq::kUidFieldNumber;
const int RoleListDBReq::kGateidFieldNumber;
const int RoleListDBReq::kBornZidFieldNumber;
#endif  // !_MSC_VER

RoleListDBReq::RoleListDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListDBReq::InitAsDefaultInstance() {
}

RoleListDBReq::RoleListDBReq(const RoleListDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListDBReq::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  gateid_ = 0u;
  born_zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListDBReq::~RoleListDBReq() {
  SharedDtor();
}

void RoleListDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleListDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListDBReq_descriptor_;
}

const RoleListDBReq& RoleListDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleListDBReq* RoleListDBReq::default_instance_ = NULL;

RoleListDBReq* RoleListDBReq::New() const {
  return new RoleListDBReq;
}

void RoleListDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    gateid_ = 0u;
    born_zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born_zid;
        break;
      }

      // required uint32 born_zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateid(), output);
  }

  // required uint32 born_zid = 4;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->born_zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateid(), target);
  }

  // required uint32 born_zid = 4;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->born_zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reqid = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gateid = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 born_zid = 4;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListDBReq::MergeFrom(const RoleListDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListDBReq::CopyFrom(const RoleListDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoleListDBReq::Swap(RoleListDBReq* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(uid_, other->uid_);
    std::swap(gateid_, other->gateid_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListDBReq_descriptor_;
  metadata.reflection = RoleListDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListDBRsp::kRetFieldNumber;
const int RoleListDBRsp::kReqidFieldNumber;
const int RoleListDBRsp::kUidFieldNumber;
const int RoleListDBRsp::kGateidFieldNumber;
const int RoleListDBRsp::kRoleLstFieldNumber;
const int RoleListDBRsp::kRegnumFieldNumber;
#endif  // !_MSC_VER

RoleListDBRsp::RoleListDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListDBRsp::InitAsDefaultInstance() {
}

RoleListDBRsp::RoleListDBRsp(const RoleListDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  gateid_ = 0u;
  regnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListDBRsp::~RoleListDBRsp() {
  SharedDtor();
}

void RoleListDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleListDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListDBRsp_descriptor_;
}

const RoleListDBRsp& RoleListDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleListDBRsp* RoleListDBRsp::default_instance_ = NULL;

RoleListDBRsp* RoleListDBRsp::New() const {
  return new RoleListDBRsp;
}

void RoleListDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reqid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    gateid_ = 0u;
    regnum_ = 0u;
  }
  role_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_lst;
        break;
      }

      // repeated .proto_ff.RoleListDBProto role_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_lst;
        if (input->ExpectTag(48)) goto parse_regnum;
        break;
      }

      // optional uint32 regnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regnum_)));
          set_has_regnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gateid(), output);
  }

  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  for (int i = 0; i < this->role_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_lst(i), output);
  }

  // optional uint32 regnum = 6;
  if (has_regnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->regnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gateid(), target);
  }

  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  for (int i = 0; i < this->role_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->role_lst(i), target);
  }

  // optional uint32 regnum = 6;
  if (has_regnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->regnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gateid = 4;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional uint32 regnum = 6;
    if (has_regnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regnum());
    }

  }
  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  total_size += 1 * this->role_lst_size();
  for (int i = 0; i < this->role_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListDBRsp::MergeFrom(const RoleListDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_lst_.MergeFrom(from.role_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_regnum()) {
      set_regnum(from.regnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListDBRsp::CopyFrom(const RoleListDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < role_lst_size(); i++) {
    if (!this->role_lst(i).IsInitialized()) return false;
  }
  return true;
}

void RoleListDBRsp::Swap(RoleListDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reqid_, other->reqid_);
    std::swap(uid_, other->uid_);
    std::swap(gateid_, other->gateid_);
    role_lst_.Swap(&other->role_lst_);
    std::swap(regnum_, other->regnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListDBRsp_descriptor_;
  metadata.reflection = RoleListDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoleDBReq::kReqidFieldNumber;
const int CreateRoleDBReq::kZidFieldNumber;
const int CreateRoleDBReq::kGateidFieldNumber;
const int CreateRoleDBReq::kDataFieldNumber;
const int CreateRoleDBReq::kUidFieldNumber;
const int CreateRoleDBReq::kChannelIdFieldNumber;
const int CreateRoleDBReq::kZoneMidFieldNumber;
const int CreateRoleDBReq::kBornZidFieldNumber;
#endif  // !_MSC_VER

CreateRoleDBReq::CreateRoleDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoleDBReq::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

CreateRoleDBReq::CreateRoleDBReq(const CreateRoleDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoleDBReq::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  gateid_ = 0u;
  data_ = NULL;
  uid_ = 0u;
  channel_id_ = 0u;
  zone_mid_ = 0u;
  born_zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleDBReq::~CreateRoleDBReq() {
  SharedDtor();
}

void CreateRoleDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CreateRoleDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleDBReq_descriptor_;
}

const CreateRoleDBReq& CreateRoleDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CreateRoleDBReq* CreateRoleDBReq::default_instance_ = NULL;

CreateRoleDBReq* CreateRoleDBReq::New() const {
  return new CreateRoleDBReq;
}

void CreateRoleDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    gateid_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleDBData::Clear();
    }
    uid_ = 0u;
    channel_id_ = 0u;
    zone_mid_ = 0u;
    born_zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoleDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required .proto_ff.RoleDBData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zone_mid;
        break;
      }

      // optional uint32 zone_mid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_mid_)));
          set_has_zone_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_born_zid;
        break;
      }

      // optional uint32 born_zid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoleDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateid(), output);
  }

  // required .proto_ff.RoleDBData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional uint32 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uid(), output);
  }

  // optional uint32 channel_id = 6;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channel_id(), output);
  }

  // optional uint32 zone_mid = 7;
  if (has_zone_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zone_mid(), output);
  }

  // optional uint32 born_zid = 8;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->born_zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoleDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateid(), target);
  }

  // required .proto_ff.RoleDBData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional uint32 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uid(), target);
  }

  // optional uint32 channel_id = 6;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channel_id(), target);
  }

  // optional uint32 zone_mid = 7;
  if (has_zone_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zone_mid(), target);
  }

  // optional uint32 born_zid = 8;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->born_zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoleDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reqid = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 gateid = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required .proto_ff.RoleDBData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 channel_id = 6;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 zone_mid = 7;
    if (has_zone_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_mid());
    }

    // optional uint32 born_zid = 8;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoleDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoleDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoleDBReq::MergeFrom(const CreateRoleDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleDBData::MergeFrom(from.data());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_zone_mid()) {
      set_zone_mid(from.zone_mid());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoleDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleDBReq::CopyFrom(const CreateRoleDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void CreateRoleDBReq::Swap(CreateRoleDBReq* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(zid_, other->zid_);
    std::swap(gateid_, other->gateid_);
    std::swap(data_, other->data_);
    std::swap(uid_, other->uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(zone_mid_, other->zone_mid_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoleDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoleDBReq_descriptor_;
  metadata.reflection = CreateRoleDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoleDBRsp::kRetFieldNumber;
const int CreateRoleDBRsp::kReqidFieldNumber;
const int CreateRoleDBRsp::kUidFieldNumber;
const int CreateRoleDBRsp::kGateidFieldNumber;
const int CreateRoleDBRsp::kInfoFieldNumber;
const int CreateRoleDBRsp::kBornZidFieldNumber;
const int CreateRoleDBRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

CreateRoleDBRsp::CreateRoleDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoleDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleListDBProto*>(&::proto_ff::RoleListDBProto::default_instance());
  simple_ = const_cast< ::proto_ff::CenterRoleProto*>(&::proto_ff::CenterRoleProto::default_instance());
}

CreateRoleDBRsp::CreateRoleDBRsp(const CreateRoleDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoleDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  gateid_ = 0u;
  info_ = NULL;
  born_zid_ = 0u;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleDBRsp::~CreateRoleDBRsp() {
  SharedDtor();
}

void CreateRoleDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete simple_;
  }
}

void CreateRoleDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleDBRsp_descriptor_;
}

const CreateRoleDBRsp& CreateRoleDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CreateRoleDBRsp* CreateRoleDBRsp::default_instance_ = NULL;

CreateRoleDBRsp* CreateRoleDBRsp::New() const {
  return new CreateRoleDBRsp;
}

void CreateRoleDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reqid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    gateid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleListDBProto::Clear();
    }
    born_zid_ = 0u;
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::CenterRoleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoleDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleListDBProto info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_born_zid;
        break;
      }

      // optional uint32 born_zid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_simple;
        break;
      }

      // optional .proto_ff.CenterRoleProto simple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoleDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gateid(), output);
  }

  // optional .proto_ff.RoleListDBProto info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  // optional uint32 born_zid = 6;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->born_zid(), output);
  }

  // optional .proto_ff.CenterRoleProto simple = 7;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoleDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gateid(), target);
  }

  // optional .proto_ff.RoleListDBProto info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  // optional uint32 born_zid = 6;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->born_zid(), target);
  }

  // optional .proto_ff.CenterRoleProto simple = 7;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoleDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gateid = 4;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional .proto_ff.RoleListDBProto info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 born_zid = 6;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

    // optional .proto_ff.CenterRoleProto simple = 7;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoleDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoleDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoleDBRsp::MergeFrom(const CreateRoleDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleListDBProto::MergeFrom(from.info());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::CenterRoleProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoleDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleDBRsp::CopyFrom(const CreateRoleDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_simple()) {
    if (!this->simple().IsInitialized()) return false;
  }
  return true;
}

void CreateRoleDBRsp::Swap(CreateRoleDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reqid_, other->reqid_);
    std::swap(uid_, other->uid_);
    std::swap(gateid_, other->gateid_);
    std::swap(info_, other->info_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoleDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoleDBRsp_descriptor_;
  metadata.reflection = CreateRoleDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfoDBReq::kReqidFieldNumber;
const int RoleInfoDBReq::kCidFieldNumber;
const int RoleInfoDBReq::kChangeFieldNumber;
#endif  // !_MSC_VER

RoleInfoDBReq::RoleInfoDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfoDBReq::InitAsDefaultInstance() {
}

RoleInfoDBReq::RoleInfoDBReq(const RoleInfoDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfoDBReq::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoDBReq::~RoleInfoDBReq() {
  SharedDtor();
}

void RoleInfoDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleInfoDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoDBReq_descriptor_;
}

const RoleInfoDBReq& RoleInfoDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleInfoDBReq* RoleInfoDBReq::default_instance_ = NULL;

RoleInfoDBReq* RoleInfoDBReq::New() const {
  return new RoleInfoDBReq;
}

void RoleInfoDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfoDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change;
        break;
      }

      // optional int32 change = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfoDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 change = 3;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfoDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 change = 3;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfoDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reqid = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 change = 3;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfoDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfoDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfoDBReq::MergeFrom(const RoleInfoDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfoDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoDBReq::CopyFrom(const RoleInfoDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleInfoDBReq::Swap(RoleInfoDBReq* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(cid_, other->cid_);
    std::swap(change_, other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfoDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoDBReq_descriptor_;
  metadata.reflection = RoleInfoDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfoDBRsp::kRetFieldNumber;
const int RoleInfoDBRsp::kReqidFieldNumber;
const int RoleInfoDBRsp::kCidFieldNumber;
const int RoleInfoDBRsp::kChangeFieldNumber;
const int RoleInfoDBRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

RoleInfoDBRsp::RoleInfoDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfoDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

RoleInfoDBRsp::RoleInfoDBRsp(const RoleInfoDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfoDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  change_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoDBRsp::~RoleInfoDBRsp() {
  SharedDtor();
}

void RoleInfoDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RoleInfoDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoDBRsp_descriptor_;
}

const RoleInfoDBRsp& RoleInfoDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleInfoDBRsp* RoleInfoDBRsp::default_instance_ = NULL;

RoleInfoDBRsp* RoleInfoDBRsp::New() const {
  return new RoleInfoDBRsp;
}

void RoleInfoDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reqid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    change_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfoDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change;
        break;
      }

      // optional int32 change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleDBData info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfoDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  // required uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional int32 change = 4;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->change(), output);
  }

  // optional .proto_ff.RoleDBData info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfoDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  // required uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional int32 change = 4;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->change(), target);
  }

  // optional .proto_ff.RoleDBData info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfoDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 change = 4;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // optional .proto_ff.RoleDBData info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfoDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfoDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfoDBRsp::MergeFrom(const RoleInfoDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfoDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoDBRsp::CopyFrom(const RoleInfoDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RoleInfoDBRsp::Swap(RoleInfoDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reqid_, other->reqid_);
    std::swap(cid_, other->cid_);
    std::swap(change_, other->change_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfoDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoDBRsp_descriptor_;
  metadata.reflection = RoleInfoDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfoUpdateDBReq::kCidFieldNumber;
const int RoleInfoUpdateDBReq::kUidFieldNumber;
const int RoleInfoUpdateDBReq::kInfoFieldNumber;
#endif  // !_MSC_VER

RoleInfoUpdateDBReq::RoleInfoUpdateDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfoUpdateDBReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

RoleInfoUpdateDBReq::RoleInfoUpdateDBReq(const RoleInfoUpdateDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfoUpdateDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoUpdateDBReq::~RoleInfoUpdateDBReq() {
  SharedDtor();
}

void RoleInfoUpdateDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RoleInfoUpdateDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoUpdateDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoUpdateDBReq_descriptor_;
}

const RoleInfoUpdateDBReq& RoleInfoUpdateDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleInfoUpdateDBReq* RoleInfoUpdateDBReq::default_instance_ = NULL;

RoleInfoUpdateDBReq* RoleInfoUpdateDBReq::New() const {
  return new RoleInfoUpdateDBReq;
}

void RoleInfoUpdateDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfoUpdateDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleDBData info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfoUpdateDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional .proto_ff.RoleDBData info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfoUpdateDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional .proto_ff.RoleDBData info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfoUpdateDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBData info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoUpdateDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfoUpdateDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfoUpdateDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfoUpdateDBReq::MergeFrom(const RoleInfoUpdateDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfoUpdateDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoUpdateDBReq::CopyFrom(const RoleInfoUpdateDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoUpdateDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RoleInfoUpdateDBReq::Swap(RoleInfoUpdateDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfoUpdateDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoUpdateDBReq_descriptor_;
  metadata.reflection = RoleInfoUpdateDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleChgNameDBReq::kCidFieldNumber;
const int RoleChgNameDBReq::kNameFieldNumber;
#endif  // !_MSC_VER

RoleChgNameDBReq::RoleChgNameDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleChgNameDBReq::InitAsDefaultInstance() {
}

RoleChgNameDBReq::RoleChgNameDBReq(const RoleChgNameDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleChgNameDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleChgNameDBReq::~RoleChgNameDBReq() {
  SharedDtor();
}

void RoleChgNameDBReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleChgNameDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleChgNameDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleChgNameDBReq_descriptor_;
}

const RoleChgNameDBReq& RoleChgNameDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleChgNameDBReq* RoleChgNameDBReq::default_instance_ = NULL;

RoleChgNameDBReq* RoleChgNameDBReq::New() const {
  return new RoleChgNameDBReq;
}

void RoleChgNameDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleChgNameDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleChgNameDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleChgNameDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleChgNameDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleChgNameDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleChgNameDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleChgNameDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleChgNameDBReq::MergeFrom(const RoleChgNameDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleChgNameDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleChgNameDBReq::CopyFrom(const RoleChgNameDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChgNameDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleChgNameDBReq::Swap(RoleChgNameDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleChgNameDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleChgNameDBReq_descriptor_;
  metadata.reflection = RoleChgNameDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleChgNameDBRsp::kRetFieldNumber;
const int RoleChgNameDBRsp::kCidFieldNumber;
const int RoleChgNameDBRsp::kNameFieldNumber;
#endif  // !_MSC_VER

RoleChgNameDBRsp::RoleChgNameDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleChgNameDBRsp::InitAsDefaultInstance() {
}

RoleChgNameDBRsp::RoleChgNameDBRsp(const RoleChgNameDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleChgNameDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleChgNameDBRsp::~RoleChgNameDBRsp() {
  SharedDtor();
}

void RoleChgNameDBRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleChgNameDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleChgNameDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleChgNameDBRsp_descriptor_;
}

const RoleChgNameDBRsp& RoleChgNameDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleChgNameDBRsp* RoleChgNameDBRsp::default_instance_ = NULL;

RoleChgNameDBRsp* RoleChgNameDBRsp::New() const {
  return new RoleChgNameDBRsp;
}

void RoleChgNameDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleChgNameDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleChgNameDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleChgNameDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleChgNameDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleChgNameDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleChgNameDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleChgNameDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleChgNameDBRsp::MergeFrom(const RoleChgNameDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleChgNameDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleChgNameDBRsp::CopyFrom(const RoleChgNameDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChgNameDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoleChgNameDBRsp::Swap(RoleChgNameDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleChgNameDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleChgNameDBRsp_descriptor_;
  metadata.reflection = RoleChgNameDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleSimpleListDBReq::RoleSimpleListDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSimpleListDBReq::InitAsDefaultInstance() {
}

RoleSimpleListDBReq::RoleSimpleListDBReq(const RoleSimpleListDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSimpleListDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSimpleListDBReq::~RoleSimpleListDBReq() {
  SharedDtor();
}

void RoleSimpleListDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSimpleListDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSimpleListDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSimpleListDBReq_descriptor_;
}

const RoleSimpleListDBReq& RoleSimpleListDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleSimpleListDBReq* RoleSimpleListDBReq::default_instance_ = NULL;

RoleSimpleListDBReq* RoleSimpleListDBReq::New() const {
  return new RoleSimpleListDBReq;
}

void RoleSimpleListDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSimpleListDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleSimpleListDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSimpleListDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSimpleListDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSimpleListDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSimpleListDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSimpleListDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSimpleListDBReq::MergeFrom(const RoleSimpleListDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSimpleListDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSimpleListDBReq::CopyFrom(const RoleSimpleListDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSimpleListDBReq::IsInitialized() const {

  return true;
}

void RoleSimpleListDBReq::Swap(RoleSimpleListDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSimpleListDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSimpleListDBReq_descriptor_;
  metadata.reflection = RoleSimpleListDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSimpleListDBRsp::kRetFieldNumber;
const int RoleSimpleListDBRsp::kInfoFieldNumber;
const int RoleSimpleListDBRsp::kFinishFlagFieldNumber;
#endif  // !_MSC_VER

RoleSimpleListDBRsp::RoleSimpleListDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSimpleListDBRsp::InitAsDefaultInstance() {
}

RoleSimpleListDBRsp::RoleSimpleListDBRsp(const RoleSimpleListDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSimpleListDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  finish_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSimpleListDBRsp::~RoleSimpleListDBRsp() {
  SharedDtor();
}

void RoleSimpleListDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSimpleListDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSimpleListDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSimpleListDBRsp_descriptor_;
}

const RoleSimpleListDBRsp& RoleSimpleListDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleSimpleListDBRsp* RoleSimpleListDBRsp::default_instance_ = NULL;

RoleSimpleListDBRsp* RoleSimpleListDBRsp::New() const {
  return new RoleSimpleListDBRsp;
}

void RoleSimpleListDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    finish_flag_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSimpleListDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.CenterRoleProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_finish_flag;
        break;
      }

      // optional int32 finish_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_flag_)));
          set_has_finish_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSimpleListDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.CenterRoleProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 finish_flag = 3;
  if (has_finish_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finish_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSimpleListDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.CenterRoleProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 finish_flag = 3;
  if (has_finish_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finish_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSimpleListDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 finish_flag = 3;
    if (has_finish_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_flag());
    }

  }
  // repeated .proto_ff.CenterRoleProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSimpleListDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSimpleListDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSimpleListDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSimpleListDBRsp::MergeFrom(const RoleSimpleListDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_finish_flag()) {
      set_finish_flag(from.finish_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSimpleListDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSimpleListDBRsp::CopyFrom(const RoleSimpleListDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSimpleListDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void RoleSimpleListDBRsp::Swap(RoleSimpleListDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    info_.Swap(&other->info_);
    std::swap(finish_flag_, other->finish_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSimpleListDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSimpleListDBRsp_descriptor_;
  metadata.reflection = RoleSimpleListDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureTransLogicDBReq::kTransDataFieldNumber;
#endif  // !_MSC_VER

CreatureTransLogicDBReq::CreatureTransLogicDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureTransLogicDBReq::InitAsDefaultInstance() {
}

CreatureTransLogicDBReq::CreatureTransLogicDBReq(const CreatureTransLogicDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureTransLogicDBReq::SharedCtor() {
  _cached_size_ = 0;
  trans_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureTransLogicDBReq::~CreatureTransLogicDBReq() {
  SharedDtor();
}

void CreatureTransLogicDBReq::SharedDtor() {
  if (trans_data_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_data_;
  }
  if (this != default_instance_) {
  }
}

void CreatureTransLogicDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureTransLogicDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureTransLogicDBReq_descriptor_;
}

const CreatureTransLogicDBReq& CreatureTransLogicDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CreatureTransLogicDBReq* CreatureTransLogicDBReq::default_instance_ = NULL;

CreatureTransLogicDBReq* CreatureTransLogicDBReq::New() const {
  return new CreatureTransLogicDBReq;
}

void CreatureTransLogicDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trans_data()) {
      if (trans_data_ != &::google::protobuf::internal::kEmptyString) {
        trans_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureTransLogicDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trans_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trans_data().data(), this->trans_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureTransLogicDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trans_data = 1;
  if (has_trans_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_data().data(), this->trans_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trans_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureTransLogicDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string trans_data = 1;
  if (has_trans_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_data().data(), this->trans_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trans_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureTransLogicDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trans_data = 1;
    if (has_trans_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureTransLogicDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureTransLogicDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureTransLogicDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureTransLogicDBReq::MergeFrom(const CreatureTransLogicDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans_data()) {
      set_trans_data(from.trans_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureTransLogicDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureTransLogicDBReq::CopyFrom(const CreatureTransLogicDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureTransLogicDBReq::IsInitialized() const {

  return true;
}

void CreatureTransLogicDBReq::Swap(CreatureTransLogicDBReq* other) {
  if (other != this) {
    std::swap(trans_data_, other->trans_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureTransLogicDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureTransLogicDBReq_descriptor_;
  metadata.reflection = CreatureTransLogicDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureTransLogicDBRsp::kRetcodeFieldNumber;
const int CreatureTransLogicDBRsp::kCidFieldNumber;
#endif  // !_MSC_VER

CreatureTransLogicDBRsp::CreatureTransLogicDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureTransLogicDBRsp::InitAsDefaultInstance() {
}

CreatureTransLogicDBRsp::CreatureTransLogicDBRsp(const CreatureTransLogicDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureTransLogicDBRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureTransLogicDBRsp::~CreatureTransLogicDBRsp() {
  SharedDtor();
}

void CreatureTransLogicDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureTransLogicDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureTransLogicDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureTransLogicDBRsp_descriptor_;
}

const CreatureTransLogicDBRsp& CreatureTransLogicDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CreatureTransLogicDBRsp* CreatureTransLogicDBRsp::default_instance_ = NULL;

CreatureTransLogicDBRsp* CreatureTransLogicDBRsp::New() const {
  return new CreatureTransLogicDBRsp;
}

void CreatureTransLogicDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureTransLogicDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureTransLogicDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureTransLogicDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureTransLogicDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureTransLogicDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureTransLogicDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureTransLogicDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureTransLogicDBRsp::MergeFrom(const CreatureTransLogicDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureTransLogicDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureTransLogicDBRsp::CopyFrom(const CreatureTransLogicDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureTransLogicDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatureTransLogicDBRsp::Swap(CreatureTransLogicDBRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureTransLogicDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureTransLogicDBRsp_descriptor_;
  metadata.reflection = CreatureTransLogicDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewMailDBInfo::kDataFieldNumber;
const int NewMailDBInfo::kResultFieldNumber;
#endif  // !_MSC_VER

NewMailDBInfo::NewMailDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewMailDBInfo::InitAsDefaultInstance() {
}

NewMailDBInfo::NewMailDBInfo(const NewMailDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewMailDBInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewMailDBInfo::~NewMailDBInfo() {
  SharedDtor();
}

void NewMailDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewMailDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMailDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewMailDBInfo_descriptor_;
}

const NewMailDBInfo& NewMailDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

NewMailDBInfo* NewMailDBInfo::default_instance_ = NULL;

NewMailDBInfo* NewMailDBInfo::New() const {
  return new NewMailDBInfo;
}

void NewMailDBInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewMailDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MailInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewMailDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MailInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewMailDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MailInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewMailDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.MailInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMailDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewMailDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewMailDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewMailDBInfo::MergeFrom(const NewMailDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewMailDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMailDBInfo::CopyFrom(const NewMailDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMailDBInfo::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void NewMailDBInfo::Swap(NewMailDBInfo* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewMailDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewMailDBInfo_descriptor_;
  metadata.reflection = NewMailDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailDBOperateInfo::kMidLstFieldNumber;
const int MailDBOperateInfo::kResultFieldNumber;
#endif  // !_MSC_VER

MailDBOperateInfo::MailDBOperateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailDBOperateInfo::InitAsDefaultInstance() {
}

MailDBOperateInfo::MailDBOperateInfo(const MailDBOperateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailDBOperateInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailDBOperateInfo::~MailDBOperateInfo() {
  SharedDtor();
}

void MailDBOperateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailDBOperateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailDBOperateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailDBOperateInfo_descriptor_;
}

const MailDBOperateInfo& MailDBOperateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MailDBOperateInfo* MailDBOperateInfo::default_instance_ = NULL;

MailDBOperateInfo* MailDBOperateInfo::New() const {
  return new MailDBOperateInfo;
}

void MailDBOperateInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0;
  }
  mid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailDBOperateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mid_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mid_lst;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailDBOperateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mid_lst = 1;
  for (int i = 0; i < this->mid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mid_lst(i), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailDBOperateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mid_lst = 1;
  for (int i = 0; i < this->mid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mid_lst(i), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailDBOperateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated uint32 mid_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mid_lst(i));
    }
    total_size += 1 * this->mid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDBOperateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailDBOperateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailDBOperateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailDBOperateInfo::MergeFrom(const MailDBOperateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mid_lst_.MergeFrom(from.mid_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailDBOperateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDBOperateInfo::CopyFrom(const MailDBOperateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDBOperateInfo::IsInitialized() const {

  return true;
}

void MailDBOperateInfo::Swap(MailDBOperateInfo* other) {
  if (other != this) {
    mid_lst_.Swap(&other->mid_lst_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailDBOperateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailDBOperateInfo_descriptor_;
  metadata.reflection = MailDBOperateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveMailDBReq::kCharidFieldNumber;
const int SaveMailDBReq::kInfoFieldNumber;
const int SaveMailDBReq::kDelFieldNumber;
const int SaveMailDBReq::kFetchFieldNumber;
const int SaveMailDBReq::kReadFieldNumber;
const int SaveMailDBReq::kNotifyFieldNumber;
#endif  // !_MSC_VER

SaveMailDBReq::SaveMailDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveMailDBReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::NewMailDBInfo*>(&::proto_ff::NewMailDBInfo::default_instance());
  del_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  fetch_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  read_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
}

SaveMailDBReq::SaveMailDBReq(const SaveMailDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveMailDBReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  del_ = NULL;
  fetch_ = NULL;
  read_ = NULL;
  notify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveMailDBReq::~SaveMailDBReq() {
  SharedDtor();
}

void SaveMailDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete del_;
    delete fetch_;
    delete read_;
  }
}

void SaveMailDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveMailDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveMailDBReq_descriptor_;
}

const SaveMailDBReq& SaveMailDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SaveMailDBReq* SaveMailDBReq::default_instance_ = NULL;

SaveMailDBReq* SaveMailDBReq::New() const {
  return new SaveMailDBReq;
}

void SaveMailDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::NewMailDBInfo::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::proto_ff::MailDBOperateInfo::Clear();
    }
    notify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveMailDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.NewMailDBInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo del = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notify;
        break;
      }

      // optional int32 notify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveMailDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del(), output);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fetch(), output);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(), output);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveMailDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del(), target);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fetch(), target);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(), target);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveMailDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .proto_ff.NewMailDBInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto_ff.MailDBOperateInfo del = 3;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

    // optional .proto_ff.MailDBOperateInfo fetch = 4;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

    // optional .proto_ff.MailDBOperateInfo read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

    // optional int32 notify = 6;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveMailDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveMailDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveMailDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveMailDBReq::MergeFrom(const SaveMailDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::NewMailDBInfo::MergeFrom(from.info());
    }
    if (from.has_del()) {
      mutable_del()->::proto_ff::MailDBOperateInfo::MergeFrom(from.del());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::MailDBOperateInfo::MergeFrom(from.fetch());
    }
    if (from.has_read()) {
      mutable_read()->::proto_ff::MailDBOperateInfo::MergeFrom(from.read());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveMailDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveMailDBReq::CopyFrom(const SaveMailDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMailDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SaveMailDBReq::Swap(SaveMailDBReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(del_, other->del_);
    std::swap(fetch_, other->fetch_);
    std::swap(read_, other->read_);
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveMailDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveMailDBReq_descriptor_;
  metadata.reflection = SaveMailDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveMailDBRsp::kCharidFieldNumber;
const int SaveMailDBRsp::kInfoFieldNumber;
const int SaveMailDBRsp::kDelFieldNumber;
const int SaveMailDBRsp::kFetchFieldNumber;
const int SaveMailDBRsp::kReadFieldNumber;
const int SaveMailDBRsp::kNotifyFieldNumber;
#endif  // !_MSC_VER

SaveMailDBRsp::SaveMailDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveMailDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::NewMailDBInfo*>(&::proto_ff::NewMailDBInfo::default_instance());
  del_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  fetch_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  read_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
}

SaveMailDBRsp::SaveMailDBRsp(const SaveMailDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveMailDBRsp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  del_ = NULL;
  fetch_ = NULL;
  read_ = NULL;
  notify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveMailDBRsp::~SaveMailDBRsp() {
  SharedDtor();
}

void SaveMailDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete del_;
    delete fetch_;
    delete read_;
  }
}

void SaveMailDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveMailDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveMailDBRsp_descriptor_;
}

const SaveMailDBRsp& SaveMailDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SaveMailDBRsp* SaveMailDBRsp::default_instance_ = NULL;

SaveMailDBRsp* SaveMailDBRsp::New() const {
  return new SaveMailDBRsp;
}

void SaveMailDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::NewMailDBInfo::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::proto_ff::MailDBOperateInfo::Clear();
    }
    notify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveMailDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.NewMailDBInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo del = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notify;
        break;
      }

      // optional int32 notify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveMailDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del(), output);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fetch(), output);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(), output);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveMailDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del(), target);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fetch(), target);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(), target);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveMailDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .proto_ff.NewMailDBInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto_ff.MailDBOperateInfo del = 3;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

    // optional .proto_ff.MailDBOperateInfo fetch = 4;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

    // optional .proto_ff.MailDBOperateInfo read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

    // optional int32 notify = 6;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveMailDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveMailDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveMailDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveMailDBRsp::MergeFrom(const SaveMailDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::NewMailDBInfo::MergeFrom(from.info());
    }
    if (from.has_del()) {
      mutable_del()->::proto_ff::MailDBOperateInfo::MergeFrom(from.del());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::MailDBOperateInfo::MergeFrom(from.fetch());
    }
    if (from.has_read()) {
      mutable_read()->::proto_ff::MailDBOperateInfo::MergeFrom(from.read());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveMailDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveMailDBRsp::CopyFrom(const SaveMailDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMailDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SaveMailDBRsp::Swap(SaveMailDBRsp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(del_, other->del_);
    std::swap(fetch_, other->fetch_);
    std::swap(read_, other->read_);
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveMailDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveMailDBRsp_descriptor_;
  metadata.reflection = SaveMailDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMailDBRequest::kCharIDFieldNumber;
const int CharacterMailDBRequest::kZoneMailFlagFieldNumber;
const int CharacterMailDBRequest::kOffsetFieldNumber;
const int CharacterMailDBRequest::kReqidFieldNumber;
#endif  // !_MSC_VER

CharacterMailDBRequest::CharacterMailDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMailDBRequest::InitAsDefaultInstance() {
}

CharacterMailDBRequest::CharacterMailDBRequest(const CharacterMailDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMailDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zone_mail_flag_ = 0u;
  offset_ = 0;
  reqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMailDBRequest::~CharacterMailDBRequest() {
  SharedDtor();
}

void CharacterMailDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMailDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMailDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMailDBRequest_descriptor_;
}

const CharacterMailDBRequest& CharacterMailDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CharacterMailDBRequest* CharacterMailDBRequest::default_instance_ = NULL;

CharacterMailDBRequest* CharacterMailDBRequest::New() const {
  return new CharacterMailDBRequest;
}

void CharacterMailDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    zone_mail_flag_ = 0u;
    offset_ = 0;
    reqid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMailDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_mail_flag;
        break;
      }

      // optional uint32 zone_mail_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_mail_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_mail_flag_)));
          set_has_zone_mail_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqid;
        break;
      }

      // optional uint32 reqid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMailDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 zone_mail_flag = 2;
  if (has_zone_mail_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_mail_flag(), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional uint32 reqid = 4;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMailDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 zone_mail_flag = 2;
  if (has_zone_mail_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_mail_flag(), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional uint32 reqid = 4;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMailDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zone_mail_flag = 2;
    if (has_zone_mail_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_mail_flag());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 reqid = 4;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMailDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMailDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMailDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMailDBRequest::MergeFrom(const CharacterMailDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zone_mail_flag()) {
      set_zone_mail_flag(from.zone_mail_flag());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMailDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMailDBRequest::CopyFrom(const CharacterMailDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMailDBRequest::IsInitialized() const {

  return true;
}

void CharacterMailDBRequest::Swap(CharacterMailDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(zone_mail_flag_, other->zone_mail_flag_);
    std::swap(offset_, other->offset_);
    std::swap(reqid_, other->reqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMailDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMailDBRequest_descriptor_;
  metadata.reflection = CharacterMailDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMailDBResponse::kCharIDFieldNumber;
const int CharacterMailDBResponse::kInfoFieldNumber;
const int CharacterMailDBResponse::kZoneMailIdFieldNumber;
const int CharacterMailDBResponse::kOffsetFieldNumber;
const int CharacterMailDBResponse::kReqidFieldNumber;
#endif  // !_MSC_VER

CharacterMailDBResponse::CharacterMailDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMailDBResponse::InitAsDefaultInstance() {
}

CharacterMailDBResponse::CharacterMailDBResponse(const CharacterMailDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMailDBResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zonemailid_ = 0u;
  offset_ = 0;
  reqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMailDBResponse::~CharacterMailDBResponse() {
  SharedDtor();
}

void CharacterMailDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMailDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMailDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMailDBResponse_descriptor_;
}

const CharacterMailDBResponse& CharacterMailDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

CharacterMailDBResponse* CharacterMailDBResponse::default_instance_ = NULL;

CharacterMailDBResponse* CharacterMailDBResponse::New() const {
  return new CharacterMailDBResponse;
}

void CharacterMailDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    zonemailid_ = 0u;
    offset_ = 0;
    reqid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMailDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.MailInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_zoneMailId;
        break;
      }

      // optional uint32 zoneMailId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneMailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zonemailid_)));
          set_has_zonemailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reqid;
        break;
      }

      // optional uint32 reqid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMailDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .proto_ff.MailInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint32 zoneMailId = 3;
  if (has_zonemailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zonemailid(), output);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // optional uint32 reqid = 5;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMailDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .proto_ff.MailInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint32 zoneMailId = 3;
  if (has_zonemailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zonemailid(), target);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // optional uint32 reqid = 5;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMailDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneMailId = 3;
    if (has_zonemailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zonemailid());
    }

    // optional int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 reqid = 5;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

  }
  // repeated .proto_ff.MailInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMailDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMailDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMailDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMailDBResponse::MergeFrom(const CharacterMailDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zonemailid()) {
      set_zonemailid(from.zonemailid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMailDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMailDBResponse::CopyFrom(const CharacterMailDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMailDBResponse::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterMailDBResponse::Swap(CharacterMailDBResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    info_.Swap(&other->info_);
    std::swap(zonemailid_, other->zonemailid_);
    std::swap(offset_, other->offset_);
    std::swap(reqid_, other->reqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMailDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMailDBResponse_descriptor_;
  metadata.reflection = CharacterMailDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MaxMailIDRequest::MaxMailIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxMailIDRequest::InitAsDefaultInstance() {
}

MaxMailIDRequest::MaxMailIDRequest(const MaxMailIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxMailIDRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxMailIDRequest::~MaxMailIDRequest() {
  SharedDtor();
}

void MaxMailIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxMailIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxMailIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxMailIDRequest_descriptor_;
}

const MaxMailIDRequest& MaxMailIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MaxMailIDRequest* MaxMailIDRequest::default_instance_ = NULL;

MaxMailIDRequest* MaxMailIDRequest::New() const {
  return new MaxMailIDRequest;
}

void MaxMailIDRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxMailIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MaxMailIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxMailIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxMailIDRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxMailIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxMailIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxMailIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxMailIDRequest::MergeFrom(const MaxMailIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxMailIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxMailIDRequest::CopyFrom(const MaxMailIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxMailIDRequest::IsInitialized() const {

  return true;
}

void MaxMailIDRequest::Swap(MaxMailIDRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxMailIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxMailIDRequest_descriptor_;
  metadata.reflection = MaxMailIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaxMailIDResponse::kMaxZoneMailIdFieldNumber;
const int MaxMailIDResponse::kMaxMailIdFieldNumber;
#endif  // !_MSC_VER

MaxMailIDResponse::MaxMailIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxMailIDResponse::InitAsDefaultInstance() {
}

MaxMailIDResponse::MaxMailIDResponse(const MaxMailIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxMailIDResponse::SharedCtor() {
  _cached_size_ = 0;
  maxzonemailid_ = 0u;
  maxmailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxMailIDResponse::~MaxMailIDResponse() {
  SharedDtor();
}

void MaxMailIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxMailIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxMailIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxMailIDResponse_descriptor_;
}

const MaxMailIDResponse& MaxMailIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

MaxMailIDResponse* MaxMailIDResponse::default_instance_ = NULL;

MaxMailIDResponse* MaxMailIDResponse::New() const {
  return new MaxMailIDResponse;
}

void MaxMailIDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxzonemailid_ = 0u;
    maxmailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxMailIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxZoneMailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxzonemailid_)));
          set_has_maxzonemailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxMailId;
        break;
      }

      // optional uint32 maxMailId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmailid_)));
          set_has_maxmailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaxMailIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 maxZoneMailId = 1;
  if (has_maxzonemailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxzonemailid(), output);
  }

  // optional uint32 maxMailId = 2;
  if (has_maxmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxmailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxMailIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 maxZoneMailId = 1;
  if (has_maxzonemailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxzonemailid(), target);
  }

  // optional uint32 maxMailId = 2;
  if (has_maxmailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxmailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxMailIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxZoneMailId = 1;
    if (has_maxzonemailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxzonemailid());
    }

    // optional uint32 maxMailId = 2;
    if (has_maxmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxMailIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxMailIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxMailIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxMailIDResponse::MergeFrom(const MaxMailIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxzonemailid()) {
      set_maxzonemailid(from.maxzonemailid());
    }
    if (from.has_maxmailid()) {
      set_maxmailid(from.maxmailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxMailIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxMailIDResponse::CopyFrom(const MaxMailIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxMailIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MaxMailIDResponse::Swap(MaxMailIDResponse* other) {
  if (other != this) {
    std::swap(maxzonemailid_, other->maxzonemailid_);
    std::swap(maxmailid_, other->maxmailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxMailIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxMailIDResponse_descriptor_;
  metadata.reflection = MaxMailIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCharacterMail::kCharIDFieldNumber;
#endif  // !_MSC_VER

DeleteCharacterMail::DeleteCharacterMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteCharacterMail::InitAsDefaultInstance() {
}

DeleteCharacterMail::DeleteCharacterMail(const DeleteCharacterMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteCharacterMail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCharacterMail::~DeleteCharacterMail() {
  SharedDtor();
}

void DeleteCharacterMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteCharacterMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCharacterMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCharacterMail_descriptor_;
}

const DeleteCharacterMail& DeleteCharacterMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DeleteCharacterMail* DeleteCharacterMail::default_instance_ = NULL;

DeleteCharacterMail* DeleteCharacterMail::New() const {
  return new DeleteCharacterMail;
}

void DeleteCharacterMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCharacterMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteCharacterMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteCharacterMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteCharacterMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCharacterMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCharacterMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCharacterMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCharacterMail::MergeFrom(const DeleteCharacterMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCharacterMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCharacterMail::CopyFrom(const DeleteCharacterMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCharacterMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteCharacterMail::Swap(DeleteCharacterMail* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCharacterMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCharacterMail_descriptor_;
  metadata.reflection = DeleteCharacterMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneMailSaveRsp::kMailIdFieldNumber;
#endif  // !_MSC_VER

ZoneMailSaveRsp::ZoneMailSaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneMailSaveRsp::InitAsDefaultInstance() {
}

ZoneMailSaveRsp::ZoneMailSaveRsp(const ZoneMailSaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneMailSaveRsp::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneMailSaveRsp::~ZoneMailSaveRsp() {
  SharedDtor();
}

void ZoneMailSaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneMailSaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneMailSaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneMailSaveRsp_descriptor_;
}

const ZoneMailSaveRsp& ZoneMailSaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ZoneMailSaveRsp* ZoneMailSaveRsp::default_instance_ = NULL;

ZoneMailSaveRsp* ZoneMailSaveRsp::New() const {
  return new ZoneMailSaveRsp;
}

void ZoneMailSaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneMailSaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneMailSaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneMailSaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneMailSaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneMailSaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneMailSaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneMailSaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneMailSaveRsp::MergeFrom(const ZoneMailSaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneMailSaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneMailSaveRsp::CopyFrom(const ZoneMailSaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneMailSaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZoneMailSaveRsp::Swap(ZoneMailSaveRsp* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneMailSaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneMailSaveRsp_descriptor_;
  metadata.reflection = ZoneMailSaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneMailTransCharacterMailReq::kMailIdFieldNumber;
const int ZoneMailTransCharacterMailReq::kCidFieldNumber;
#endif  // !_MSC_VER

ZoneMailTransCharacterMailReq::ZoneMailTransCharacterMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneMailTransCharacterMailReq::InitAsDefaultInstance() {
}

ZoneMailTransCharacterMailReq::ZoneMailTransCharacterMailReq(const ZoneMailTransCharacterMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneMailTransCharacterMailReq::~ZoneMailTransCharacterMailReq() {
  SharedDtor();
}

void ZoneMailTransCharacterMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneMailTransCharacterMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneMailTransCharacterMailReq_descriptor_;
}

const ZoneMailTransCharacterMailReq& ZoneMailTransCharacterMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ZoneMailTransCharacterMailReq* ZoneMailTransCharacterMailReq::default_instance_ = NULL;

ZoneMailTransCharacterMailReq* ZoneMailTransCharacterMailReq::New() const {
  return new ZoneMailTransCharacterMailReq;
}

void ZoneMailTransCharacterMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneMailTransCharacterMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneMailTransCharacterMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneMailTransCharacterMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneMailTransCharacterMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneMailTransCharacterMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneMailTransCharacterMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneMailTransCharacterMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneMailTransCharacterMailReq::MergeFrom(const ZoneMailTransCharacterMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneMailTransCharacterMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailReq::CopyFrom(const ZoneMailTransCharacterMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneMailTransCharacterMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ZoneMailTransCharacterMailReq::Swap(ZoneMailTransCharacterMailReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneMailTransCharacterMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneMailTransCharacterMailReq_descriptor_;
  metadata.reflection = ZoneMailTransCharacterMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneMailTransCharacterMailRsp::kCidFieldNumber;
const int ZoneMailTransCharacterMailRsp::kDataFieldNumber;
#endif  // !_MSC_VER

ZoneMailTransCharacterMailRsp::ZoneMailTransCharacterMailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneMailTransCharacterMailRsp::InitAsDefaultInstance() {
}

ZoneMailTransCharacterMailRsp::ZoneMailTransCharacterMailRsp(const ZoneMailTransCharacterMailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneMailTransCharacterMailRsp::~ZoneMailTransCharacterMailRsp() {
  SharedDtor();
}

void ZoneMailTransCharacterMailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneMailTransCharacterMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneMailTransCharacterMailRsp_descriptor_;
}

const ZoneMailTransCharacterMailRsp& ZoneMailTransCharacterMailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ZoneMailTransCharacterMailRsp* ZoneMailTransCharacterMailRsp::default_instance_ = NULL;

ZoneMailTransCharacterMailRsp* ZoneMailTransCharacterMailRsp::New() const {
  return new ZoneMailTransCharacterMailRsp;
}

void ZoneMailTransCharacterMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneMailTransCharacterMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .proto_ff.MailInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneMailTransCharacterMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.MailInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneMailTransCharacterMailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.MailInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneMailTransCharacterMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.MailInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneMailTransCharacterMailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneMailTransCharacterMailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneMailTransCharacterMailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneMailTransCharacterMailRsp::MergeFrom(const ZoneMailTransCharacterMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneMailTransCharacterMailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailRsp::CopyFrom(const ZoneMailTransCharacterMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneMailTransCharacterMailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void ZoneMailTransCharacterMailRsp::Swap(ZoneMailTransCharacterMailRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneMailTransCharacterMailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneMailTransCharacterMailRsp_descriptor_;
  metadata.reflection = ZoneMailTransCharacterMailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailDBDataReq::kOpTypeFieldNumber;
const int WebMailDBDataReq::kCidFieldNumber;
const int WebMailDBDataReq::kPernumFieldNumber;
const int WebMailDBDataReq::kCurpageFieldNumber;
const int WebMailDBDataReq::kIdLstFieldNumber;
const int WebMailDBDataReq::kWebIdFieldNumber;
#endif  // !_MSC_VER

WebMailDBDataReq::WebMailDBDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailDBDataReq::InitAsDefaultInstance() {
}

WebMailDBDataReq::WebMailDBDataReq(const WebMailDBDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailDBDataReq::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  pernum_ = 0u;
  curpage_ = 0u;
  webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailDBDataReq::~WebMailDBDataReq() {
  SharedDtor();
}

void WebMailDBDataReq::SharedDtor() {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    delete webid_;
  }
  if (this != default_instance_) {
  }
}

void WebMailDBDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailDBDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailDBDataReq_descriptor_;
}

const WebMailDBDataReq& WebMailDBDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

WebMailDBDataReq* WebMailDBDataReq::default_instance_ = NULL;

WebMailDBDataReq* WebMailDBDataReq::New() const {
  return new WebMailDBDataReq;
}

void WebMailDBDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    pernum_ = 0u;
    curpage_ = 0u;
    if (has_webid()) {
      if (webid_ != &::google::protobuf::internal::kEmptyString) {
        webid_->clear();
      }
    }
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailDBDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pernum;
        break;
      }

      // optional uint32 pernum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pernum_)));
          set_has_pernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        break;
      }

      // repeated uint32 id_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        if (input->ExpectTag(50)) goto parse_webId;
        break;
      }

      // required string webId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->webid().data(), this->webid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailDBDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_type(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 pernum = 3;
  if (has_pernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pernum(), output);
  }

  // optional uint32 curpage = 4;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curpage(), output);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->id_lst(i), output);
  }

  // required string webId = 6;
  if (has_webid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webid().data(), this->webid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->webid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailDBDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_type(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 pernum = 3;
  if (has_pernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pernum(), target);
  }

  // optional uint32 curpage = 4;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curpage(), target);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->id_lst(i), target);
  }

  // required string webId = 6;
  if (has_webid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webid().data(), this->webid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->webid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailDBDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 pernum = 3;
    if (has_pernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pernum());
    }

    // optional uint32 curpage = 4;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // required string webId = 6;
    if (has_webid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webid());
    }

  }
  // repeated uint32 id_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailDBDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailDBDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailDBDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailDBDataReq::MergeFrom(const WebMailDBDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_pernum()) {
      set_pernum(from.pernum());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_webid()) {
      set_webid(from.webid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailDBDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailDBDataReq::CopyFrom(const WebMailDBDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailDBDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void WebMailDBDataReq::Swap(WebMailDBDataReq* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(cid_, other->cid_);
    std::swap(pernum_, other->pernum_);
    std::swap(curpage_, other->curpage_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(webid_, other->webid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailDBDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailDBDataReq_descriptor_;
  metadata.reflection = WebMailDBDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailDBDataRsp::kOpTypeFieldNumber;
const int WebMailDBDataRsp::kCidFieldNumber;
const int WebMailDBDataRsp::kCurpageFieldNumber;
const int WebMailDBDataRsp::kTotalcountFieldNumber;
const int WebMailDBDataRsp::kIdLstFieldNumber;
const int WebMailDBDataRsp::kInfoLstFieldNumber;
const int WebMailDBDataRsp::kWebIdFieldNumber;
#endif  // !_MSC_VER

WebMailDBDataRsp::WebMailDBDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailDBDataRsp::InitAsDefaultInstance() {
}

WebMailDBDataRsp::WebMailDBDataRsp(const WebMailDBDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailDBDataRsp::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  totalcount_ = 0u;
  webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailDBDataRsp::~WebMailDBDataRsp() {
  SharedDtor();
}

void WebMailDBDataRsp::SharedDtor() {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    delete webid_;
  }
  if (this != default_instance_) {
  }
}

void WebMailDBDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailDBDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailDBDataRsp_descriptor_;
}

const WebMailDBDataRsp& WebMailDBDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

WebMailDBDataRsp* WebMailDBDataRsp::default_instance_ = NULL;

WebMailDBDataRsp* WebMailDBDataRsp::New() const {
  return new WebMailDBDataRsp;
}

void WebMailDBDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    curpage_ = 0u;
    totalcount_ = 0u;
    if (has_webid()) {
      if (webid_ != &::google::protobuf::internal::kEmptyString) {
        webid_->clear();
      }
    }
  }
  id_lst_.Clear();
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailDBDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalcount;
        break;
      }

      // optional uint32 totalcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        break;
      }

      // repeated uint32 id_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        if (input->ExpectTag(50)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.WebMailDataProto info_lst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info_lst;
        if (input->ExpectTag(58)) goto parse_webId;
        break;
      }

      // required string webId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->webid().data(), this->webid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailDBDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_type(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpage(), output);
  }

  // optional uint32 totalcount = 4;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalcount(), output);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->id_lst(i), output);
  }

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info_lst(i), output);
  }

  // required string webId = 7;
  if (has_webid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webid().data(), this->webid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->webid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailDBDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_type(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpage(), target);
  }

  // optional uint32 totalcount = 4;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalcount(), target);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->id_lst(i), target);
  }

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info_lst(i), target);
  }

  // required string webId = 7;
  if (has_webid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webid().data(), this->webid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->webid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailDBDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 curpage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 totalcount = 4;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcount());
    }

    // required string webId = 7;
    if (has_webid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webid());
    }

  }
  // repeated uint32 id_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailDBDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailDBDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailDBDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailDBDataRsp::MergeFrom(const WebMailDBDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  info_lst_.MergeFrom(from.info_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_webid()) {
      set_webid(from.webid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailDBDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailDBDataRsp::CopyFrom(const WebMailDBDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailDBDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  return true;
}

void WebMailDBDataRsp::Swap(WebMailDBDataRsp* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(cid_, other->cid_);
    std::swap(curpage_, other->curpage_);
    std::swap(totalcount_, other->totalcount_);
    id_lst_.Swap(&other->id_lst_);
    info_lst_.Swap(&other->info_lst_);
    std::swap(webid_, other->webid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailDBDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailDBDataRsp_descriptor_;
  metadata.reflection = WebMailDBDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBInfo::kCharIDFieldNumber;
const int FriendDBInfo::kDataFieldNumber;
#endif  // !_MSC_VER

FriendDBInfo::FriendDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::RelationDBInfo*>(&::proto_ff::RelationDBInfo::default_instance());
}

FriendDBInfo::FriendDBInfo(const FriendDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBInfo::~FriendDBInfo() {
  SharedDtor();
}

void FriendDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FriendDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBInfo_descriptor_;
}

const FriendDBInfo& FriendDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FriendDBInfo* FriendDBInfo::default_instance_ = NULL;

FriendDBInfo* FriendDBInfo::New() const {
  return new FriendDBInfo;
}

void FriendDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RelationDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.RelationDBInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .proto_ff.RelationDBInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .proto_ff.RelationDBInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .proto_ff.RelationDBInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBInfo::MergeFrom(const FriendDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RelationDBInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBInfo::CopyFrom(const FriendDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBInfo::IsInitialized() const {

  return true;
}

void FriendDBInfo::Swap(FriendDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBInfo_descriptor_;
  metadata.reflection = FriendDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBRequest::kCharidFieldNumber;
const int FriendDBRequest::kDstidLstFieldNumber;
const int FriendDBRequest::kOperateTypeFieldNumber;
const int FriendDBRequest::kDataFieldNumber;
const int FriendDBRequest::kQueryTimesFieldNumber;
#endif  // !_MSC_VER

FriendDBRequest::FriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBRequest::InitAsDefaultInstance() {
}

FriendDBRequest::FriendDBRequest(const FriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  operate_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBRequest::~FriendDBRequest() {
  SharedDtor();
}

void FriendDBRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBRequest_descriptor_;
}

const FriendDBRequest& FriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FriendDBRequest* FriendDBRequest::default_instance_ = NULL;

FriendDBRequest* FriendDBRequest::New() const {
  return new FriendDBRequest;
}

void FriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    operate_type_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    query_times_ = 0u;
  }
  dstid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstid_lst;
        break;
      }

      // repeated uint64 dstid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_dstid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dstid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstid_lst;
        if (input->ExpectTag(24)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_query_times;
        break;
      }

      // optional uint32 query_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_times_)));
          set_has_query_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated uint64 dstid_lst = 2;
  for (int i = 0; i < this->dstid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->dstid_lst(i), output);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate_type(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional uint32 query_times = 5;
  if (has_query_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->query_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated uint64 dstid_lst = 2;
  for (int i = 0; i < this->dstid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->dstid_lst(i), target);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate_type(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 query_times = 5;
  if (has_query_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->query_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 operate_type = 3;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 query_times = 5;
    if (has_query_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_times());
    }

  }
  // repeated uint64 dstid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dstid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dstid_lst(i));
    }
    total_size += 1 * this->dstid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBRequest::MergeFrom(const FriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  dstid_lst_.MergeFrom(from.dstid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_query_times()) {
      set_query_times(from.query_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBRequest::CopyFrom(const FriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBRequest::IsInitialized() const {

  return true;
}

void FriendDBRequest::Swap(FriendDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    dstid_lst_.Swap(&other->dstid_lst_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(data_, other->data_);
    std::swap(query_times_, other->query_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBRequest_descriptor_;
  metadata.reflection = FriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBResponse::kRetcodeFieldNumber;
const int FriendDBResponse::kCharidFieldNumber;
const int FriendDBResponse::kOperateTypeFieldNumber;
const int FriendDBResponse::kInfoLstFieldNumber;
const int FriendDBResponse::kLastLstFieldNumber;
const int FriendDBResponse::kDataFieldNumber;
const int FriendDBResponse::kQueryTimesFieldNumber;
#endif  // !_MSC_VER

FriendDBResponse::FriendDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBResponse::InitAsDefaultInstance() {
}

FriendDBResponse::FriendDBResponse(const FriendDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  operate_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBResponse::~FriendDBResponse() {
  SharedDtor();
}

void FriendDBResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FriendDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBResponse_descriptor_;
}

const FriendDBResponse& FriendDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FriendDBResponse* FriendDBResponse::default_instance_ = NULL;

FriendDBResponse* FriendDBResponse::New() const {
  return new FriendDBResponse;
}

void FriendDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    operate_type_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    query_times_ = 0u;
  }
  info_lst_.Clear();
  last_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.FriendDBInfo info_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info_lst;
        if (input->ExpectTag(40)) goto parse_last_lst;
        break;
      }

      // repeated uint64 last_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_last_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_last_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_lst;
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_query_times;
        break;
      }

      // optional uint32 query_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_times_)));
          set_has_query_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate_type(), output);
  }

  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info_lst(i), output);
  }

  // repeated uint64 last_lst = 5;
  for (int i = 0; i < this->last_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->last_lst(i), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  // optional uint32 query_times = 7;
  if (has_query_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->query_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate_type(), target);
  }

  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info_lst(i), target);
  }

  // repeated uint64 last_lst = 5;
  for (int i = 0; i < this->last_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->last_lst(i), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 query_times = 7;
  if (has_query_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->query_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 operate_type = 3;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 query_times = 7;
    if (has_query_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_times());
    }

  }
  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  // repeated uint64 last_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->last_lst(i));
    }
    total_size += 1 * this->last_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBResponse::MergeFrom(const FriendDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  last_lst_.MergeFrom(from.last_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_query_times()) {
      set_query_times(from.query_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBResponse::CopyFrom(const FriendDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBResponse::IsInitialized() const {

  return true;
}

void FriendDBResponse::Swap(FriendDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(operate_type_, other->operate_type_);
    info_lst_.Swap(&other->info_lst_);
    last_lst_.Swap(&other->last_lst_);
    std::swap(data_, other->data_);
    std::swap(query_times_, other->query_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBResponse_descriptor_;
  metadata.reflection = FriendDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFriendDBRequest::kOffsetFieldNumber;
#endif  // !_MSC_VER

AllFriendDBRequest::AllFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFriendDBRequest::InitAsDefaultInstance() {
}

AllFriendDBRequest::AllFriendDBRequest(const AllFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFriendDBRequest::~AllFriendDBRequest() {
  SharedDtor();
}

void AllFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFriendDBRequest_descriptor_;
}

const AllFriendDBRequest& AllFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

AllFriendDBRequest* AllFriendDBRequest::default_instance_ = NULL;

AllFriendDBRequest* AllFriendDBRequest::New() const {
  return new AllFriendDBRequest;
}

void AllFriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFriendDBRequest::MergeFrom(const AllFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFriendDBRequest::CopyFrom(const AllFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFriendDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllFriendDBRequest::Swap(AllFriendDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFriendDBRequest_descriptor_;
  metadata.reflection = AllFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFriendDBResponse::kRetcodeFieldNumber;
const int AllFriendDBResponse::kOffsetFieldNumber;
const int AllFriendDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllFriendDBResponse::AllFriendDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFriendDBResponse::InitAsDefaultInstance() {
}

AllFriendDBResponse::AllFriendDBResponse(const AllFriendDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFriendDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFriendDBResponse::~AllFriendDBResponse() {
  SharedDtor();
}

void AllFriendDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFriendDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFriendDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFriendDBResponse_descriptor_;
}

const AllFriendDBResponse& AllFriendDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

AllFriendDBResponse* AllFriendDBResponse::default_instance_ = NULL;

AllFriendDBResponse* AllFriendDBResponse::New() const {
  return new AllFriendDBResponse;
}

void AllFriendDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFriendDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .proto_ff.FriendDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFriendDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .proto_ff.FriendDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFriendDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .proto_ff.FriendDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFriendDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.FriendDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFriendDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFriendDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFriendDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFriendDBResponse::MergeFrom(const AllFriendDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFriendDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFriendDBResponse::CopyFrom(const AllFriendDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFriendDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllFriendDBResponse::Swap(AllFriendDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFriendDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFriendDBResponse_descriptor_;
  metadata.reflection = AllFriendDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveFriendDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveFriendDBRequest::SaveFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveFriendDBRequest::InitAsDefaultInstance() {
}

SaveFriendDBRequest::SaveFriendDBRequest(const SaveFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveFriendDBRequest::~SaveFriendDBRequest() {
  SharedDtor();
}

void SaveFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveFriendDBRequest_descriptor_;
}

const SaveFriendDBRequest& SaveFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SaveFriendDBRequest* SaveFriendDBRequest::default_instance_ = NULL;

SaveFriendDBRequest* SaveFriendDBRequest::New() const {
  return new SaveFriendDBRequest;
}

void SaveFriendDBRequest::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FriendDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FriendDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FriendDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveFriendDBRequest::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FriendDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveFriendDBRequest::MergeFrom(const SaveFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFriendDBRequest::CopyFrom(const SaveFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFriendDBRequest::IsInitialized() const {

  return true;
}

void SaveFriendDBRequest::Swap(SaveFriendDBRequest* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveFriendDBRequest_descriptor_;
  metadata.reflection = SaveFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelteFriendDBRequest::kCharIdFieldNumber;
#endif  // !_MSC_VER

DelteFriendDBRequest::DelteFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelteFriendDBRequest::InitAsDefaultInstance() {
}

DelteFriendDBRequest::DelteFriendDBRequest(const DelteFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelteFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelteFriendDBRequest::~DelteFriendDBRequest() {
  SharedDtor();
}

void DelteFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelteFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelteFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelteFriendDBRequest_descriptor_;
}

const DelteFriendDBRequest& DelteFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DelteFriendDBRequest* DelteFriendDBRequest::default_instance_ = NULL;

DelteFriendDBRequest* DelteFriendDBRequest::New() const {
  return new DelteFriendDBRequest;
}

void DelteFriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelteFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelteFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelteFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelteFriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelteFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelteFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelteFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelteFriendDBRequest::MergeFrom(const DelteFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelteFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelteFriendDBRequest::CopyFrom(const DelteFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelteFriendDBRequest::IsInitialized() const {

  return true;
}

void DelteFriendDBRequest::Swap(DelteFriendDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelteFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelteFriendDBRequest_descriptor_;
  metadata.reflection = DelteFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GlobalDBRequst::GlobalDBRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBRequst::InitAsDefaultInstance() {
}

GlobalDBRequst::GlobalDBRequst(const GlobalDBRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBRequst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBRequst::~GlobalDBRequst() {
  SharedDtor();
}

void GlobalDBRequst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBRequst_descriptor_;
}

const GlobalDBRequst& GlobalDBRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GlobalDBRequst* GlobalDBRequst::default_instance_ = NULL;

GlobalDBRequst* GlobalDBRequst::New() const {
  return new GlobalDBRequst;
}

void GlobalDBRequst::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GlobalDBRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBRequst::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBRequst::MergeFrom(const GlobalDBRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBRequst::CopyFrom(const GlobalDBRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBRequst::IsInitialized() const {

  return true;
}

void GlobalDBRequst::Swap(GlobalDBRequst* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBRequst_descriptor_;
  metadata.reflection = GlobalDBRequst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBEntry::kTypeIdFieldNumber;
const int GlobalDBEntry::kDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBEntry::GlobalDBEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBEntry::InitAsDefaultInstance() {
}

GlobalDBEntry::GlobalDBEntry(const GlobalDBEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBEntry::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBEntry::~GlobalDBEntry() {
  SharedDtor();
}

void GlobalDBEntry::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBEntry_descriptor_;
}

const GlobalDBEntry& GlobalDBEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GlobalDBEntry* GlobalDBEntry::default_instance_ = NULL;

GlobalDBEntry* GlobalDBEntry::New() const {
  return new GlobalDBEntry;
}

void GlobalDBEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBEntry::MergeFrom(const GlobalDBEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBEntry::CopyFrom(const GlobalDBEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBEntry::IsInitialized() const {

  return true;
}

void GlobalDBEntry::Swap(GlobalDBEntry* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBEntry_descriptor_;
  metadata.reflection = GlobalDBEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBResponse::kEntryFieldNumber;
const int GlobalDBResponse::kIsfinishFieldNumber;
#endif  // !_MSC_VER

GlobalDBResponse::GlobalDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBResponse::InitAsDefaultInstance() {
}

GlobalDBResponse::GlobalDBResponse(const GlobalDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBResponse::SharedCtor() {
  _cached_size_ = 0;
  isfinish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBResponse::~GlobalDBResponse() {
  SharedDtor();
}

void GlobalDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBResponse_descriptor_;
}

const GlobalDBResponse& GlobalDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GlobalDBResponse* GlobalDBResponse::default_instance_ = NULL;

GlobalDBResponse* GlobalDBResponse::New() const {
  return new GlobalDBResponse;
}

void GlobalDBResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isfinish_ = 0;
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GlobalDBEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectTag(16)) goto parse_isfinish;
        break;
      }

      // optional int32 isfinish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GlobalDBEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  // optional int32 isfinish = 2;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isfinish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GlobalDBEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  // optional int32 isfinish = 2;
  if (has_isfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isfinish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 isfinish = 2;
    if (has_isfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfinish());
    }

  }
  // repeated .proto_ff.GlobalDBEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBResponse::MergeFrom(const GlobalDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBResponse::CopyFrom(const GlobalDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBResponse::IsInitialized() const {

  return true;
}

void GlobalDBResponse::Swap(GlobalDBResponse* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(isfinish_, other->isfinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBResponse_descriptor_;
  metadata.reflection = GlobalDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBSetRequest::kTypeIdFieldNumber;
const int GlobalDBSetRequest::kDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBSetRequest::GlobalDBSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBSetRequest::InitAsDefaultInstance() {
}

GlobalDBSetRequest::GlobalDBSetRequest(const GlobalDBSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBSetRequest::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBSetRequest::~GlobalDBSetRequest() {
  SharedDtor();
}

void GlobalDBSetRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBSetRequest_descriptor_;
}

const GlobalDBSetRequest& GlobalDBSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GlobalDBSetRequest* GlobalDBSetRequest::default_instance_ = NULL;

GlobalDBSetRequest* GlobalDBSetRequest::New() const {
  return new GlobalDBSetRequest;
}

void GlobalDBSetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBSetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBSetRequest::MergeFrom(const GlobalDBSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBSetRequest::CopyFrom(const GlobalDBSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBSetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalDBSetRequest::Swap(GlobalDBSetRequest* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBSetRequest_descriptor_;
  metadata.reflection = GlobalDBSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBSetResponse::kRetcodeFieldNumber;
const int GlobalDBSetResponse::kTypeIdFieldNumber;
#endif  // !_MSC_VER

GlobalDBSetResponse::GlobalDBSetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBSetResponse::InitAsDefaultInstance() {
}

GlobalDBSetResponse::GlobalDBSetResponse(const GlobalDBSetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBSetResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBSetResponse::~GlobalDBSetResponse() {
  SharedDtor();
}

void GlobalDBSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBSetResponse_descriptor_;
}

const GlobalDBSetResponse& GlobalDBSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GlobalDBSetResponse* GlobalDBSetResponse::default_instance_ = NULL;

GlobalDBSetResponse* GlobalDBSetResponse::New() const {
  return new GlobalDBSetResponse;
}

void GlobalDBSetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBSetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBSetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBSetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBSetResponse::MergeFrom(const GlobalDBSetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBSetResponse::CopyFrom(const GlobalDBSetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBSetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GlobalDBSetResponse::Swap(GlobalDBSetResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBSetResponse_descriptor_;
  metadata.reflection = GlobalDBSetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalComData::kTowerDupRewardFieldNumber;
#endif  // !_MSC_VER

GlobalComData::GlobalComData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalComData::InitAsDefaultInstance() {
}

GlobalComData::GlobalComData(const GlobalComData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalComData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalComData::~GlobalComData() {
  SharedDtor();
}

void GlobalComData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalComData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalComData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalComData_descriptor_;
}

const GlobalComData& GlobalComData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

GlobalComData* GlobalComData::default_instance_ = NULL;

GlobalComData* GlobalComData::New() const {
  return new GlobalComData;
}

void GlobalComData::Clear() {
  towerdupreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalComData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_towerDupReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towerdupreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_towerDupReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalComData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  for (int i = 0; i < this->towerdupreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerdupreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalComData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  for (int i = 0; i < this->towerdupreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerdupreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalComData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  total_size += 1 * this->towerdupreward_size();
  for (int i = 0; i < this->towerdupreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towerdupreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalComData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalComData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalComData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalComData::MergeFrom(const GlobalComData& from) {
  GOOGLE_CHECK_NE(&from, this);
  towerdupreward_.MergeFrom(from.towerdupreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalComData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalComData::CopyFrom(const GlobalComData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalComData::IsInitialized() const {

  return true;
}

void GlobalComData::Swap(GlobalComData* other) {
  if (other != this) {
    towerdupreward_.Swap(&other->towerdupreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalComData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalComData_descriptor_;
  metadata.reflection = GlobalComData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActDBProto::kActidFieldNumber;
const int ActDBProto::kZidFieldNumber;
const int ActDBProto::kFinishtimeFieldNumber;
#endif  // !_MSC_VER

ActDBProto::ActDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActDBProto::InitAsDefaultInstance() {
}

ActDBProto::ActDBProto(const ActDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActDBProto::SharedCtor() {
  _cached_size_ = 0;
  actid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  finishtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActDBProto::~ActDBProto() {
  SharedDtor();
}

void ActDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActDBProto_descriptor_;
}

const ActDBProto& ActDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ActDBProto* ActDBProto::default_instance_ = NULL;

ActDBProto* ActDBProto::New() const {
  return new ActDBProto;
}

void ActDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    finishtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishtime;
        break;
      }

      // optional uint64 finishtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 actid = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint64 finishtime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->finishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 actid = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint64 finishtime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->finishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 actid = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->actid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 finishtime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActDBProto::MergeFrom(const ActDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActDBProto::CopyFrom(const ActDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActDBProto::IsInitialized() const {

  return true;
}

void ActDBProto::Swap(ActDBProto* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(zid_, other->zid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActDBProto_descriptor_;
  metadata.reflection = ActDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActDBReq::ActDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActDBReq::InitAsDefaultInstance() {
}

ActDBReq::ActDBReq(const ActDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActDBReq::~ActDBReq() {
  SharedDtor();
}

void ActDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActDBReq_descriptor_;
}

const ActDBReq& ActDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ActDBReq* ActDBReq::default_instance_ = NULL;

ActDBReq* ActDBReq::New() const {
  return new ActDBReq;
}

void ActDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActDBReq::MergeFrom(const ActDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActDBReq::CopyFrom(const ActDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActDBReq::IsInitialized() const {

  return true;
}

void ActDBReq::Swap(ActDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActDBReq_descriptor_;
  metadata.reflection = ActDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActDBRsp::kLstFieldNumber;
#endif  // !_MSC_VER

ActDBRsp::ActDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActDBRsp::InitAsDefaultInstance() {
}

ActDBRsp::ActDBRsp(const ActDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActDBRsp::~ActDBRsp() {
  SharedDtor();
}

void ActDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActDBRsp_descriptor_;
}

const ActDBRsp& ActDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ActDBRsp* ActDBRsp::default_instance_ = NULL;

ActDBRsp* ActDBRsp::New() const {
  return new ActDBRsp;
}

void ActDBRsp::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ActDBProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActDBRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ActDBProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActDBRsp::MergeFrom(const ActDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActDBRsp::CopyFrom(const ActDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActDBRsp::IsInitialized() const {

  return true;
}

void ActDBRsp::Swap(ActDBRsp* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActDBRsp_descriptor_;
  metadata.reflection = ActDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActSaveDBReq::kLstFieldNumber;
#endif  // !_MSC_VER

ActSaveDBReq::ActSaveDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActSaveDBReq::InitAsDefaultInstance() {
}

ActSaveDBReq::ActSaveDBReq(const ActSaveDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActSaveDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActSaveDBReq::~ActSaveDBReq() {
  SharedDtor();
}

void ActSaveDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActSaveDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActSaveDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActSaveDBReq_descriptor_;
}

const ActSaveDBReq& ActSaveDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ActSaveDBReq* ActSaveDBReq::default_instance_ = NULL;

ActSaveDBReq* ActSaveDBReq::New() const {
  return new ActSaveDBReq;
}

void ActSaveDBReq::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActSaveDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ActDBProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActSaveDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActSaveDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActSaveDBReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ActDBProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActSaveDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActSaveDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActSaveDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActSaveDBReq::MergeFrom(const ActSaveDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActSaveDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActSaveDBReq::CopyFrom(const ActSaveDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActSaveDBReq::IsInitialized() const {

  return true;
}

void ActSaveDBReq::Swap(ActSaveDBReq* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActSaveDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActSaveDBReq_descriptor_;
  metadata.reflection = ActSaveDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllArenaDBRequest::kOffsetFieldNumber;
const int AllArenaDBRequest::kRetnumFieldNumber;
#endif  // !_MSC_VER

AllArenaDBRequest::AllArenaDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllArenaDBRequest::InitAsDefaultInstance() {
}

AllArenaDBRequest::AllArenaDBRequest(const AllArenaDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllArenaDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllArenaDBRequest::~AllArenaDBRequest() {
  SharedDtor();
}

void AllArenaDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllArenaDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllArenaDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllArenaDBRequest_descriptor_;
}

const AllArenaDBRequest& AllArenaDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

AllArenaDBRequest* AllArenaDBRequest::default_instance_ = NULL;

AllArenaDBRequest* AllArenaDBRequest::New() const {
  return new AllArenaDBRequest;
}

void AllArenaDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllArenaDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllArenaDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllArenaDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllArenaDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllArenaDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllArenaDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllArenaDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllArenaDBRequest::MergeFrom(const AllArenaDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllArenaDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllArenaDBRequest::CopyFrom(const AllArenaDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllArenaDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllArenaDBRequest::Swap(AllArenaDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllArenaDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllArenaDBRequest_descriptor_;
  metadata.reflection = AllArenaDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaDBInfo::kCharIDFieldNumber;
const int ArenaDBInfo::kRankIdFieldNumber;
#endif  // !_MSC_VER

ArenaDBInfo::ArenaDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaDBInfo::InitAsDefaultInstance() {
}

ArenaDBInfo::ArenaDBInfo(const ArenaDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaDBInfo::~ArenaDBInfo() {
  SharedDtor();
}

void ArenaDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaDBInfo_descriptor_;
}

const ArenaDBInfo& ArenaDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ArenaDBInfo* ArenaDBInfo::default_instance_ = NULL;

ArenaDBInfo* ArenaDBInfo::New() const {
  return new ArenaDBInfo;
}

void ArenaDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    rankid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 rankId = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaDBInfo::MergeFrom(const ArenaDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaDBInfo::CopyFrom(const ArenaDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaDBInfo::IsInitialized() const {

  return true;
}

void ArenaDBInfo::Swap(ArenaDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rankid_, other->rankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaDBInfo_descriptor_;
  metadata.reflection = ArenaDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaMoreDBInfo::kInfoFieldNumber;
const int ArenaMoreDBInfo::kDayFieldNumber;
const int ArenaMoreDBInfo::kGiveRewardFieldNumber;
const int ArenaMoreDBInfo::kMaxRankFieldNumber;
#endif  // !_MSC_VER

ArenaMoreDBInfo::ArenaMoreDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaMoreDBInfo::InitAsDefaultInstance() {
}

ArenaMoreDBInfo::ArenaMoreDBInfo(const ArenaMoreDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaMoreDBInfo::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  givereward_ = 0u;
  max_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaMoreDBInfo::~ArenaMoreDBInfo() {
  SharedDtor();
}

void ArenaMoreDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaMoreDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaMoreDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaMoreDBInfo_descriptor_;
}

const ArenaMoreDBInfo& ArenaMoreDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

ArenaMoreDBInfo* ArenaMoreDBInfo::default_instance_ = NULL;

ArenaMoreDBInfo* ArenaMoreDBInfo::New() const {
  return new ArenaMoreDBInfo;
}

void ArenaMoreDBInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    day_ = 0u;
    givereward_ = 0u;
    max_rank_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaMoreDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArenaDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional uint32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giveReward;
        break;
      }

      // optional uint32 giveReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givereward_)));
          set_has_givereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_rank;
        break;
      }

      // optional uint32 max_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_rank_)));
          set_has_max_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaMoreDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day(), output);
  }

  // optional uint32 giveReward = 3;
  if (has_givereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->givereward(), output);
  }

  // optional uint32 max_rank = 4;
  if (has_max_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaMoreDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day(), target);
  }

  // optional uint32 giveReward = 3;
  if (has_givereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->givereward(), target);
  }

  // optional uint32 max_rank = 4;
  if (has_max_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaMoreDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 giveReward = 3;
    if (has_givereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givereward());
    }

    // optional uint32 max_rank = 4;
    if (has_max_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_rank());
    }

  }
  // repeated .proto_ff.ArenaDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaMoreDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaMoreDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaMoreDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaMoreDBInfo::MergeFrom(const ArenaMoreDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_givereward()) {
      set_givereward(from.givereward());
    }
    if (from.has_max_rank()) {
      set_max_rank(from.max_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaMoreDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaMoreDBInfo::CopyFrom(const ArenaMoreDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaMoreDBInfo::IsInitialized() const {

  return true;
}

void ArenaMoreDBInfo::Swap(ArenaMoreDBInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(day_, other->day_);
    std::swap(givereward_, other->givereward_);
    std::swap(max_rank_, other->max_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaMoreDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaMoreDBInfo_descriptor_;
  metadata.reflection = ArenaMoreDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllArenaDBResponse::kRetcodeFieldNumber;
const int AllArenaDBResponse::kOffsetFieldNumber;
const int AllArenaDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllArenaDBResponse::AllArenaDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllArenaDBResponse::InitAsDefaultInstance() {
}

AllArenaDBResponse::AllArenaDBResponse(const AllArenaDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllArenaDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllArenaDBResponse::~AllArenaDBResponse() {
  SharedDtor();
}

void AllArenaDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllArenaDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllArenaDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllArenaDBResponse_descriptor_;
}

const AllArenaDBResponse& AllArenaDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

AllArenaDBResponse* AllArenaDBResponse::default_instance_ = NULL;

AllArenaDBResponse* AllArenaDBResponse::New() const {
  return new AllArenaDBResponse;
}

void AllArenaDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllArenaDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .proto_ff.ArenaDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllArenaDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .proto_ff.ArenaDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllArenaDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .proto_ff.ArenaDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllArenaDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.ArenaDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllArenaDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllArenaDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllArenaDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllArenaDBResponse::MergeFrom(const AllArenaDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllArenaDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllArenaDBResponse::CopyFrom(const AllArenaDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllArenaDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllArenaDBResponse::Swap(AllArenaDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllArenaDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllArenaDBResponse_descriptor_;
  metadata.reflection = AllArenaDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveArenaDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveArenaDBRequest::SaveArenaDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveArenaDBRequest::InitAsDefaultInstance() {
}

SaveArenaDBRequest::SaveArenaDBRequest(const SaveArenaDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveArenaDBRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveArenaDBRequest::~SaveArenaDBRequest() {
  SharedDtor();
}

void SaveArenaDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveArenaDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveArenaDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveArenaDBRequest_descriptor_;
}

const SaveArenaDBRequest& SaveArenaDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

SaveArenaDBRequest* SaveArenaDBRequest::default_instance_ = NULL;

SaveArenaDBRequest* SaveArenaDBRequest::New() const {
  return new SaveArenaDBRequest;
}

void SaveArenaDBRequest::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveArenaDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArenaDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveArenaDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveArenaDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveArenaDBRequest::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ArenaDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveArenaDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveArenaDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveArenaDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveArenaDBRequest::MergeFrom(const SaveArenaDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveArenaDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveArenaDBRequest::CopyFrom(const SaveArenaDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveArenaDBRequest::IsInitialized() const {

  return true;
}

void SaveArenaDBRequest::Swap(SaveArenaDBRequest* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveArenaDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveArenaDBRequest_descriptor_;
  metadata.reflection = SaveArenaDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteArenaDBRequest::kCharIdFieldNumber;
#endif  // !_MSC_VER

DeleteArenaDBRequest::DeleteArenaDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteArenaDBRequest::InitAsDefaultInstance() {
}

DeleteArenaDBRequest::DeleteArenaDBRequest(const DeleteArenaDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteArenaDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteArenaDBRequest::~DeleteArenaDBRequest() {
  SharedDtor();
}

void DeleteArenaDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteArenaDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteArenaDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteArenaDBRequest_descriptor_;
}

const DeleteArenaDBRequest& DeleteArenaDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

DeleteArenaDBRequest* DeleteArenaDBRequest::default_instance_ = NULL;

DeleteArenaDBRequest* DeleteArenaDBRequest::New() const {
  return new DeleteArenaDBRequest;
}

void DeleteArenaDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteArenaDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteArenaDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteArenaDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteArenaDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteArenaDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteArenaDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteArenaDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteArenaDBRequest::MergeFrom(const DeleteArenaDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteArenaDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteArenaDBRequest::CopyFrom(const DeleteArenaDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteArenaDBRequest::IsInitialized() const {

  return true;
}

void DeleteArenaDBRequest::Swap(DeleteArenaDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteArenaDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteArenaDBRequest_descriptor_;
  metadata.reflection = DeleteArenaDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleMirrorDBReq::kCidFieldNumber;
const int RoleMirrorDBReq::kIntParamFieldNumber;
const int RoleMirrorDBReq::kStrParamFieldNumber;
const int RoleMirrorDBReq::kReqtypeFieldNumber;
#endif  // !_MSC_VER

RoleMirrorDBReq::RoleMirrorDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMirrorDBReq::InitAsDefaultInstance() {
}

RoleMirrorDBReq::RoleMirrorDBReq(const RoleMirrorDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMirrorDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMirrorDBReq::~RoleMirrorDBReq() {
  SharedDtor();
}

void RoleMirrorDBReq::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void RoleMirrorDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMirrorDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorDBReq_descriptor_;
}

const RoleMirrorDBReq& RoleMirrorDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleMirrorDBReq* RoleMirrorDBReq::default_instance_ = NULL;

RoleMirrorDBReq* RoleMirrorDBReq::New() const {
  return new RoleMirrorDBReq;
}

void RoleMirrorDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
    reqtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMirrorDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_param;
        break;
      }

      // required int64 int_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_param;
        break;
      }

      // required string str_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param().data(), this->str_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqtype;
        break;
      }

      // required uint32 reqtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMirrorDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int64 int_param = 2;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_param(), output);
  }

  // required string str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_param(), output);
  }

  // required uint32 reqtype = 4;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMirrorDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int64 int_param = 2;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_param(), target);
  }

  // required string str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str_param(), target);
  }

  // required uint32 reqtype = 4;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMirrorDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int64 int_param = 2;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // required string str_param = 3;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param());
    }

    // required uint32 reqtype = 4;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMirrorDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMirrorDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMirrorDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMirrorDBReq::MergeFrom(const RoleMirrorDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMirrorDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMirrorDBReq::CopyFrom(const RoleMirrorDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMirrorDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoleMirrorDBReq::Swap(RoleMirrorDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(reqtype_, other->reqtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMirrorDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMirrorDBReq_descriptor_;
  metadata.reflection = RoleMirrorDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleMirrorDBRsp::kRetFieldNumber;
const int RoleMirrorDBRsp::kCidFieldNumber;
const int RoleMirrorDBRsp::kIntParamFieldNumber;
const int RoleMirrorDBRsp::kStrParamFieldNumber;
const int RoleMirrorDBRsp::kReqtypeFieldNumber;
const int RoleMirrorDBRsp::kDataFieldNumber;
#endif  // !_MSC_VER

RoleMirrorDBRsp::RoleMirrorDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMirrorDBRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::RoleMirrorData*>(&::proto_ff::RoleMirrorData::default_instance());
}

RoleMirrorDBRsp::RoleMirrorDBRsp(const RoleMirrorDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMirrorDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqtype_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMirrorDBRsp::~RoleMirrorDBRsp() {
  SharedDtor();
}

void RoleMirrorDBRsp::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void RoleMirrorDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMirrorDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorDBRsp_descriptor_;
}

const RoleMirrorDBRsp& RoleMirrorDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

RoleMirrorDBRsp* RoleMirrorDBRsp::default_instance_ = NULL;

RoleMirrorDBRsp* RoleMirrorDBRsp::New() const {
  return new RoleMirrorDBRsp;
}

void RoleMirrorDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
    reqtype_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleMirrorData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMirrorDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_param;
        break;
      }

      // required int64 int_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_param;
        break;
      }

      // required string str_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param().data(), this->str_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reqtype;
        break;
      }

      // required uint32 reqtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .proto_ff.RoleMirrorData data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMirrorDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required int64 int_param = 3;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int_param(), output);
  }

  // required string str_param = 4;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_param(), output);
  }

  // required uint32 reqtype = 5;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reqtype(), output);
  }

  // optional .proto_ff.RoleMirrorData data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMirrorDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required int64 int_param = 3;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int_param(), target);
  }

  // required string str_param = 4;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_param(), target);
  }

  // required uint32 reqtype = 5;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reqtype(), target);
  }

  // optional .proto_ff.RoleMirrorData data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMirrorDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int64 int_param = 3;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // required string str_param = 4;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param());
    }

    // required uint32 reqtype = 5;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtype());
    }

    // optional .proto_ff.RoleMirrorData data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMirrorDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMirrorDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMirrorDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMirrorDBRsp::MergeFrom(const RoleMirrorDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleMirrorData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMirrorDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMirrorDBRsp::CopyFrom(const RoleMirrorDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMirrorDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RoleMirrorDBRsp::Swap(RoleMirrorDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(reqtype_, other->reqtype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMirrorDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMirrorDBRsp_descriptor_;
  metadata.reflection = RoleMirrorDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionDataDBReq::FactionDataDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDataDBReq::InitAsDefaultInstance() {
}

FactionDataDBReq::FactionDataDBReq(const FactionDataDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDataDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDataDBReq::~FactionDataDBReq() {
  SharedDtor();
}

void FactionDataDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDataDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDataDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDataDBReq_descriptor_;
}

const FactionDataDBReq& FactionDataDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionDataDBReq* FactionDataDBReq::default_instance_ = NULL;

FactionDataDBReq* FactionDataDBReq::New() const {
  return new FactionDataDBReq;
}

void FactionDataDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDataDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionDataDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDataDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDataDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDataDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDataDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDataDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDataDBReq::MergeFrom(const FactionDataDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDataDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDataDBReq::CopyFrom(const FactionDataDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDataDBReq::IsInitialized() const {

  return true;
}

void FactionDataDBReq::Swap(FactionDataDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDataDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDataDBReq_descriptor_;
  metadata.reflection = FactionDataDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDataDBRsp::kDataLstFieldNumber;
const int FactionDataDBRsp::kFinishFieldNumber;
#endif  // !_MSC_VER

FactionDataDBRsp::FactionDataDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDataDBRsp::InitAsDefaultInstance() {
}

FactionDataDBRsp::FactionDataDBRsp(const FactionDataDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDataDBRsp::SharedCtor() {
  _cached_size_ = 0;
  finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDataDBRsp::~FactionDataDBRsp() {
  SharedDtor();
}

void FactionDataDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDataDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDataDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDataDBRsp_descriptor_;
}

const FactionDataDBRsp& FactionDataDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionDataDBRsp* FactionDataDBRsp::default_instance_ = NULL;

FactionDataDBRsp* FactionDataDBRsp::New() const {
  return new FactionDataDBRsp;
}

void FactionDataDBRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    finish_ = 0;
  }
  data_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDataDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionAllDBData data_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_lst;
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // optional int32 finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDataDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_lst(i), output);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDataDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_lst(i), target);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDataDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

  }
  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  total_size += 1 * this->data_lst_size();
  for (int i = 0; i < this->data_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDataDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDataDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDataDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDataDBRsp::MergeFrom(const FactionDataDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_lst_.MergeFrom(from.data_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDataDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDataDBRsp::CopyFrom(const FactionDataDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDataDBRsp::IsInitialized() const {

  return true;
}

void FactionDataDBRsp::Swap(FactionDataDBRsp* other) {
  if (other != this) {
    data_lst_.Swap(&other->data_lst_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDataDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDataDBRsp_descriptor_;
  metadata.reflection = FactionDataDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSaveDBReq::kDataFieldNumber;
#endif  // !_MSC_VER

FactionSaveDBReq::FactionSaveDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSaveDBReq::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FactionAllDBData*>(&::proto_ff::FactionAllDBData::default_instance());
}

FactionSaveDBReq::FactionSaveDBReq(const FactionSaveDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSaveDBReq::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSaveDBReq::~FactionSaveDBReq() {
  SharedDtor();
}

void FactionSaveDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FactionSaveDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSaveDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSaveDBReq_descriptor_;
}

const FactionSaveDBReq& FactionSaveDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionSaveDBReq* FactionSaveDBReq::default_instance_ = NULL;

FactionSaveDBReq* FactionSaveDBReq::New() const {
  return new FactionSaveDBReq;
}

void FactionSaveDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FactionAllDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSaveDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionAllDBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSaveDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionAllDBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSaveDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionAllDBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSaveDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionAllDBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSaveDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSaveDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSaveDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSaveDBReq::MergeFrom(const FactionSaveDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::FactionAllDBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSaveDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSaveDBReq::CopyFrom(const FactionSaveDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSaveDBReq::IsInitialized() const {

  return true;
}

void FactionSaveDBReq::Swap(FactionSaveDBReq* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSaveDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSaveDBReq_descriptor_;
  metadata.reflection = FactionSaveDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDelDBReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

FactionDelDBReq::FactionDelDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDelDBReq::InitAsDefaultInstance() {
}

FactionDelDBReq::FactionDelDBReq(const FactionDelDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDelDBReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDelDBReq::~FactionDelDBReq() {
  SharedDtor();
}

void FactionDelDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDelDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDelDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDelDBReq_descriptor_;
}

const FactionDelDBReq& FactionDelDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

FactionDelDBReq* FactionDelDBReq::default_instance_ = NULL;

FactionDelDBReq* FactionDelDBReq::New() const {
  return new FactionDelDBReq;
}

void FactionDelDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDelDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDelDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDelDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDelDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDelDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDelDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDelDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDelDBReq::MergeFrom(const FactionDelDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDelDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDelDBReq::CopyFrom(const FactionDelDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDelDBReq::IsInitialized() const {

  return true;
}

void FactionDelDBReq::Swap(FactionDelDBReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDelDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDelDBReq_descriptor_;
  metadata.reflection = FactionDelDBReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
