// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: functionunlock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "functionunlock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_FunctionunlockFunctionunlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FunctionunlockFunctionunlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FunctionunlockFunctionunlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FunctionunlockFunctionunlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FunctionunlockPreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FunctionunlockPreview_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FunctionunlockPreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FunctionunlockPreview_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_functionunlock_2eproto() {
  protobuf_AddDesc_functionunlock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "functionunlock.proto");
  GOOGLE_CHECK(file != NULL);
  E_FunctionunlockFunctionunlock_descriptor_ = file->message_type(0);
  static const int E_FunctionunlockFunctionunlock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, m_opendaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, m_opentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, m_openval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, m_iconopenval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, m_belong_),
  };
  E_FunctionunlockFunctionunlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FunctionunlockFunctionunlock_descriptor_,
      E_FunctionunlockFunctionunlock::default_instance_,
      E_FunctionunlockFunctionunlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockFunctionunlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FunctionunlockFunctionunlock));
  Sheet_FunctionunlockFunctionunlock_descriptor_ = file->message_type(1);
  static const int Sheet_FunctionunlockFunctionunlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FunctionunlockFunctionunlock, e_functionunlockfunctionunlock_list_),
  };
  Sheet_FunctionunlockFunctionunlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FunctionunlockFunctionunlock_descriptor_,
      Sheet_FunctionunlockFunctionunlock::default_instance_,
      Sheet_FunctionunlockFunctionunlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FunctionunlockFunctionunlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FunctionunlockFunctionunlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FunctionunlockFunctionunlock));
  E_FunctionunlockPreview_descriptor_ = file->message_type(2);
  static const int E_FunctionunlockPreview_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockPreview, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockPreview, m_rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockPreview, m_rewardnum_),
  };
  E_FunctionunlockPreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FunctionunlockPreview_descriptor_,
      E_FunctionunlockPreview::default_instance_,
      E_FunctionunlockPreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockPreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FunctionunlockPreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FunctionunlockPreview));
  Sheet_FunctionunlockPreview_descriptor_ = file->message_type(3);
  static const int Sheet_FunctionunlockPreview_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FunctionunlockPreview, e_functionunlockpreview_list_),
  };
  Sheet_FunctionunlockPreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FunctionunlockPreview_descriptor_,
      Sheet_FunctionunlockPreview::default_instance_,
      Sheet_FunctionunlockPreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FunctionunlockPreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FunctionunlockPreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FunctionunlockPreview));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_functionunlock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FunctionunlockFunctionunlock_descriptor_, &E_FunctionunlockFunctionunlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FunctionunlockFunctionunlock_descriptor_, &Sheet_FunctionunlockFunctionunlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FunctionunlockPreview_descriptor_, &E_FunctionunlockPreview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FunctionunlockPreview_descriptor_, &Sheet_FunctionunlockPreview::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_functionunlock_2eproto() {
  delete E_FunctionunlockFunctionunlock::default_instance_;
  delete E_FunctionunlockFunctionunlock_reflection_;
  delete Sheet_FunctionunlockFunctionunlock::default_instance_;
  delete Sheet_FunctionunlockFunctionunlock_reflection_;
  delete E_FunctionunlockPreview::default_instance_;
  delete E_FunctionunlockPreview_reflection_;
  delete Sheet_FunctionunlockPreview::default_instance_;
  delete Sheet_FunctionunlockPreview_reflection_;
}

void protobuf_AddDesc_functionunlock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024functionunlock.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\"\220\002\n\036E_FunctionunlockFunc"
    "tionunlock\022\"\n\014m_functionid\030\001 \001(\005B\014\302\377\024\010\345\212"
    "\237\350\203\275id\022.\n\013m_opendaily\030\002 \001(\005B\031\302\377\024\025\345\274\200\346\234\215\345"
    "\244\232\345\260\221\345\244\251\345\274\200\346\224\276\022$\n\nm_opentype\030\003 \001(\005B\020\302\377\024\014"
    "\345\274\200\346\224\276\346\226\271\345\274\217\022#\n\tm_openval\030\004 \001(\003B\020\302\377\024\014\345\274\200"
    "\346\224\276\346\225\260\345\200\274\0221\n\rm_iconopenval\030\005 \001(\005B\032\302\377\024\026\346\217"
    "\220\345\211\215\346\230\276\347\244\272icon\345\217\202\346\225\260\022\034\n\010m_belong\030\006 \001(\005B\n"
    "\302\377\024\006\351\231\204\345\261\236\"\202\001\n\"Sheet_FunctionunlockFunct"
    "ionunlock\022\\\n#E_FunctionunlockFunctionunl"
    "ock_List\030\001 \003(\0132(.proto_ff.E_Functionunlo"
    "ckFunctionunlockB\005\210\301\024\310\001\"\224\001\n\027E_Functionun"
    "lockPreview\022\"\n\014m_functionid\030\001 \001(\005B\014\302\377\024\010\345"
    "\212\237\350\203\275id\022+\n\014m_rewarditem\030\002 \001(\005B\025\302\377\024\021\345\245\226\345\212"
    "\261\347\232\204\351\201\223\345\205\267ID\022(\n\013m_rewardnum\030\003 \001(\005B\023\302\377\024\017\351"
    "\201\223\345\205\267\347\232\204\346\225\260\351\207\217\"l\n\033Sheet_FunctionunlockPr"
    "eview\022M\n\034E_FunctionunlockPreview_List\030\001 "
    "\003(\0132!.proto_ff.E_FunctionunlockPreviewB\004"
    "\210\301\024\024", 724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "functionunlock.proto", &protobuf_RegisterTypes);
  E_FunctionunlockFunctionunlock::default_instance_ = new E_FunctionunlockFunctionunlock();
  Sheet_FunctionunlockFunctionunlock::default_instance_ = new Sheet_FunctionunlockFunctionunlock();
  E_FunctionunlockPreview::default_instance_ = new E_FunctionunlockPreview();
  Sheet_FunctionunlockPreview::default_instance_ = new Sheet_FunctionunlockPreview();
  E_FunctionunlockFunctionunlock::default_instance_->InitAsDefaultInstance();
  Sheet_FunctionunlockFunctionunlock::default_instance_->InitAsDefaultInstance();
  E_FunctionunlockPreview::default_instance_->InitAsDefaultInstance();
  Sheet_FunctionunlockPreview::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_functionunlock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_functionunlock_2eproto {
  StaticDescriptorInitializer_functionunlock_2eproto() {
    protobuf_AddDesc_functionunlock_2eproto();
  }
} static_descriptor_initializer_functionunlock_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_FunctionunlockFunctionunlock::kMFunctionidFieldNumber;
const int E_FunctionunlockFunctionunlock::kMOpendailyFieldNumber;
const int E_FunctionunlockFunctionunlock::kMOpentypeFieldNumber;
const int E_FunctionunlockFunctionunlock::kMOpenvalFieldNumber;
const int E_FunctionunlockFunctionunlock::kMIconopenvalFieldNumber;
const int E_FunctionunlockFunctionunlock::kMBelongFieldNumber;
#endif  // !_MSC_VER

E_FunctionunlockFunctionunlock::E_FunctionunlockFunctionunlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FunctionunlockFunctionunlock::InitAsDefaultInstance() {
}

E_FunctionunlockFunctionunlock::E_FunctionunlockFunctionunlock(const E_FunctionunlockFunctionunlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FunctionunlockFunctionunlock::SharedCtor() {
  _cached_size_ = 0;
  m_functionid_ = 0;
  m_opendaily_ = 0;
  m_opentype_ = 0;
  m_openval_ = GOOGLE_LONGLONG(0);
  m_iconopenval_ = 0;
  m_belong_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FunctionunlockFunctionunlock::~E_FunctionunlockFunctionunlock() {
  SharedDtor();
}

void E_FunctionunlockFunctionunlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FunctionunlockFunctionunlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FunctionunlockFunctionunlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FunctionunlockFunctionunlock_descriptor_;
}

const E_FunctionunlockFunctionunlock& E_FunctionunlockFunctionunlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

E_FunctionunlockFunctionunlock* E_FunctionunlockFunctionunlock::default_instance_ = NULL;

E_FunctionunlockFunctionunlock* E_FunctionunlockFunctionunlock::New() const {
  return new E_FunctionunlockFunctionunlock;
}

void E_FunctionunlockFunctionunlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_functionid_ = 0;
    m_opendaily_ = 0;
    m_opentype_ = 0;
    m_openval_ = GOOGLE_LONGLONG(0);
    m_iconopenval_ = 0;
    m_belong_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FunctionunlockFunctionunlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_functionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_opendaily;
        break;
      }

      // optional int32 m_opendaily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opendaily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opendaily_)));
          set_has_m_opendaily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_opentype;
        break;
      }

      // optional int32 m_opentype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opentype_)));
          set_has_m_opentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_openval;
        break;
      }

      // optional int64 m_openval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_openval_)));
          set_has_m_openval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_iconopenval;
        break;
      }

      // optional int32 m_iconopenval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_iconopenval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iconopenval_)));
          set_has_m_iconopenval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_belong;
        break;
      }

      // optional int32 m_belong = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_belong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_belong_)));
          set_has_m_belong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FunctionunlockFunctionunlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_functionid = 1;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_functionid(), output);
  }

  // optional int32 m_opendaily = 2;
  if (has_m_opendaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_opendaily(), output);
  }

  // optional int32 m_opentype = 3;
  if (has_m_opentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_opentype(), output);
  }

  // optional int64 m_openval = 4;
  if (has_m_openval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_openval(), output);
  }

  // optional int32 m_iconopenval = 5;
  if (has_m_iconopenval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_iconopenval(), output);
  }

  // optional int32 m_belong = 6;
  if (has_m_belong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_belong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FunctionunlockFunctionunlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_functionid = 1;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_functionid(), target);
  }

  // optional int32 m_opendaily = 2;
  if (has_m_opendaily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_opendaily(), target);
  }

  // optional int32 m_opentype = 3;
  if (has_m_opentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_opentype(), target);
  }

  // optional int64 m_openval = 4;
  if (has_m_openval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_openval(), target);
  }

  // optional int32 m_iconopenval = 5;
  if (has_m_iconopenval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_iconopenval(), target);
  }

  // optional int32 m_belong = 6;
  if (has_m_belong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_belong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FunctionunlockFunctionunlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_functionid = 1;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional int32 m_opendaily = 2;
    if (has_m_opendaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opendaily());
    }

    // optional int32 m_opentype = 3;
    if (has_m_opentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opentype());
    }

    // optional int64 m_openval = 4;
    if (has_m_openval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_openval());
    }

    // optional int32 m_iconopenval = 5;
    if (has_m_iconopenval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iconopenval());
    }

    // optional int32 m_belong = 6;
    if (has_m_belong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_belong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FunctionunlockFunctionunlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FunctionunlockFunctionunlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FunctionunlockFunctionunlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FunctionunlockFunctionunlock::MergeFrom(const E_FunctionunlockFunctionunlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_opendaily()) {
      set_m_opendaily(from.m_opendaily());
    }
    if (from.has_m_opentype()) {
      set_m_opentype(from.m_opentype());
    }
    if (from.has_m_openval()) {
      set_m_openval(from.m_openval());
    }
    if (from.has_m_iconopenval()) {
      set_m_iconopenval(from.m_iconopenval());
    }
    if (from.has_m_belong()) {
      set_m_belong(from.m_belong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FunctionunlockFunctionunlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FunctionunlockFunctionunlock::CopyFrom(const E_FunctionunlockFunctionunlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FunctionunlockFunctionunlock::IsInitialized() const {

  return true;
}

void E_FunctionunlockFunctionunlock::Swap(E_FunctionunlockFunctionunlock* other) {
  if (other != this) {
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_opendaily_, other->m_opendaily_);
    std::swap(m_opentype_, other->m_opentype_);
    std::swap(m_openval_, other->m_openval_);
    std::swap(m_iconopenval_, other->m_iconopenval_);
    std::swap(m_belong_, other->m_belong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FunctionunlockFunctionunlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FunctionunlockFunctionunlock_descriptor_;
  metadata.reflection = E_FunctionunlockFunctionunlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FunctionunlockFunctionunlock::kEFunctionunlockFunctionunlockListFieldNumber;
#endif  // !_MSC_VER

Sheet_FunctionunlockFunctionunlock::Sheet_FunctionunlockFunctionunlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FunctionunlockFunctionunlock::InitAsDefaultInstance() {
}

Sheet_FunctionunlockFunctionunlock::Sheet_FunctionunlockFunctionunlock(const Sheet_FunctionunlockFunctionunlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FunctionunlockFunctionunlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FunctionunlockFunctionunlock::~Sheet_FunctionunlockFunctionunlock() {
  SharedDtor();
}

void Sheet_FunctionunlockFunctionunlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FunctionunlockFunctionunlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FunctionunlockFunctionunlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FunctionunlockFunctionunlock_descriptor_;
}

const Sheet_FunctionunlockFunctionunlock& Sheet_FunctionunlockFunctionunlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

Sheet_FunctionunlockFunctionunlock* Sheet_FunctionunlockFunctionunlock::default_instance_ = NULL;

Sheet_FunctionunlockFunctionunlock* Sheet_FunctionunlockFunctionunlock::New() const {
  return new Sheet_FunctionunlockFunctionunlock;
}

void Sheet_FunctionunlockFunctionunlock::Clear() {
  e_functionunlockfunctionunlock_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FunctionunlockFunctionunlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FunctionunlockFunctionunlock E_FunctionunlockFunctionunlock_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FunctionunlockFunctionunlock_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_functionunlockfunctionunlock_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FunctionunlockFunctionunlock_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FunctionunlockFunctionunlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FunctionunlockFunctionunlock E_FunctionunlockFunctionunlock_List = 1;
  for (int i = 0; i < this->e_functionunlockfunctionunlock_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_functionunlockfunctionunlock_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FunctionunlockFunctionunlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FunctionunlockFunctionunlock E_FunctionunlockFunctionunlock_List = 1;
  for (int i = 0; i < this->e_functionunlockfunctionunlock_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_functionunlockfunctionunlock_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FunctionunlockFunctionunlock::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FunctionunlockFunctionunlock E_FunctionunlockFunctionunlock_List = 1;
  total_size += 1 * this->e_functionunlockfunctionunlock_list_size();
  for (int i = 0; i < this->e_functionunlockfunctionunlock_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_functionunlockfunctionunlock_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FunctionunlockFunctionunlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FunctionunlockFunctionunlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FunctionunlockFunctionunlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FunctionunlockFunctionunlock::MergeFrom(const Sheet_FunctionunlockFunctionunlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_functionunlockfunctionunlock_list_.MergeFrom(from.e_functionunlockfunctionunlock_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FunctionunlockFunctionunlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FunctionunlockFunctionunlock::CopyFrom(const Sheet_FunctionunlockFunctionunlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FunctionunlockFunctionunlock::IsInitialized() const {

  return true;
}

void Sheet_FunctionunlockFunctionunlock::Swap(Sheet_FunctionunlockFunctionunlock* other) {
  if (other != this) {
    e_functionunlockfunctionunlock_list_.Swap(&other->e_functionunlockfunctionunlock_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FunctionunlockFunctionunlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FunctionunlockFunctionunlock_descriptor_;
  metadata.reflection = Sheet_FunctionunlockFunctionunlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FunctionunlockPreview::kMFunctionidFieldNumber;
const int E_FunctionunlockPreview::kMRewarditemFieldNumber;
const int E_FunctionunlockPreview::kMRewardnumFieldNumber;
#endif  // !_MSC_VER

E_FunctionunlockPreview::E_FunctionunlockPreview()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FunctionunlockPreview::InitAsDefaultInstance() {
}

E_FunctionunlockPreview::E_FunctionunlockPreview(const E_FunctionunlockPreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FunctionunlockPreview::SharedCtor() {
  _cached_size_ = 0;
  m_functionid_ = 0;
  m_rewarditem_ = 0;
  m_rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FunctionunlockPreview::~E_FunctionunlockPreview() {
  SharedDtor();
}

void E_FunctionunlockPreview::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FunctionunlockPreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FunctionunlockPreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FunctionunlockPreview_descriptor_;
}

const E_FunctionunlockPreview& E_FunctionunlockPreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

E_FunctionunlockPreview* E_FunctionunlockPreview::default_instance_ = NULL;

E_FunctionunlockPreview* E_FunctionunlockPreview::New() const {
  return new E_FunctionunlockPreview;
}

void E_FunctionunlockPreview::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_functionid_ = 0;
    m_rewarditem_ = 0;
    m_rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FunctionunlockPreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_functionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rewarditem;
        break;
      }

      // optional int32 m_rewarditem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewarditem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewarditem_)));
          set_has_m_rewarditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rewardnum;
        break;
      }

      // optional int32 m_rewardnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardnum_)));
          set_has_m_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FunctionunlockPreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_functionid = 1;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_functionid(), output);
  }

  // optional int32 m_rewarditem = 2;
  if (has_m_rewarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rewarditem(), output);
  }

  // optional int32 m_rewardnum = 3;
  if (has_m_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FunctionunlockPreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_functionid = 1;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_functionid(), target);
  }

  // optional int32 m_rewarditem = 2;
  if (has_m_rewarditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rewarditem(), target);
  }

  // optional int32 m_rewardnum = 3;
  if (has_m_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FunctionunlockPreview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_functionid = 1;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional int32 m_rewarditem = 2;
    if (has_m_rewarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewarditem());
    }

    // optional int32 m_rewardnum = 3;
    if (has_m_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FunctionunlockPreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FunctionunlockPreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FunctionunlockPreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FunctionunlockPreview::MergeFrom(const E_FunctionunlockPreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_rewarditem()) {
      set_m_rewarditem(from.m_rewarditem());
    }
    if (from.has_m_rewardnum()) {
      set_m_rewardnum(from.m_rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FunctionunlockPreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FunctionunlockPreview::CopyFrom(const E_FunctionunlockPreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FunctionunlockPreview::IsInitialized() const {

  return true;
}

void E_FunctionunlockPreview::Swap(E_FunctionunlockPreview* other) {
  if (other != this) {
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_rewarditem_, other->m_rewarditem_);
    std::swap(m_rewardnum_, other->m_rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FunctionunlockPreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FunctionunlockPreview_descriptor_;
  metadata.reflection = E_FunctionunlockPreview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FunctionunlockPreview::kEFunctionunlockPreviewListFieldNumber;
#endif  // !_MSC_VER

Sheet_FunctionunlockPreview::Sheet_FunctionunlockPreview()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FunctionunlockPreview::InitAsDefaultInstance() {
}

Sheet_FunctionunlockPreview::Sheet_FunctionunlockPreview(const Sheet_FunctionunlockPreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FunctionunlockPreview::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FunctionunlockPreview::~Sheet_FunctionunlockPreview() {
  SharedDtor();
}

void Sheet_FunctionunlockPreview::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FunctionunlockPreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FunctionunlockPreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FunctionunlockPreview_descriptor_;
}

const Sheet_FunctionunlockPreview& Sheet_FunctionunlockPreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

Sheet_FunctionunlockPreview* Sheet_FunctionunlockPreview::default_instance_ = NULL;

Sheet_FunctionunlockPreview* Sheet_FunctionunlockPreview::New() const {
  return new Sheet_FunctionunlockPreview;
}

void Sheet_FunctionunlockPreview::Clear() {
  e_functionunlockpreview_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FunctionunlockPreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FunctionunlockPreview E_FunctionunlockPreview_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FunctionunlockPreview_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_functionunlockpreview_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FunctionunlockPreview_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FunctionunlockPreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FunctionunlockPreview E_FunctionunlockPreview_List = 1;
  for (int i = 0; i < this->e_functionunlockpreview_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_functionunlockpreview_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FunctionunlockPreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FunctionunlockPreview E_FunctionunlockPreview_List = 1;
  for (int i = 0; i < this->e_functionunlockpreview_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_functionunlockpreview_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FunctionunlockPreview::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FunctionunlockPreview E_FunctionunlockPreview_List = 1;
  total_size += 1 * this->e_functionunlockpreview_list_size();
  for (int i = 0; i < this->e_functionunlockpreview_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_functionunlockpreview_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FunctionunlockPreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FunctionunlockPreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FunctionunlockPreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FunctionunlockPreview::MergeFrom(const Sheet_FunctionunlockPreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_functionunlockpreview_list_.MergeFrom(from.e_functionunlockpreview_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FunctionunlockPreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FunctionunlockPreview::CopyFrom(const Sheet_FunctionunlockPreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FunctionunlockPreview::IsInitialized() const {

  return true;
}

void Sheet_FunctionunlockPreview::Swap(Sheet_FunctionunlockPreview* other) {
  if (other != this) {
    e_functionunlockpreview_list_.Swap(&other->e_functionunlockpreview_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FunctionunlockPreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FunctionunlockPreview_descriptor_;
  metadata.reflection = Sheet_FunctionunlockPreview_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
