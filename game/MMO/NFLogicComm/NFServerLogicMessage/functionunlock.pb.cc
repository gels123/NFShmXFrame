// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: functionunlock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "functionunlock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* functionunlockfunctionUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  functionunlockfunctionUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_functionunlockfunctionUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_functionunlockfunctionUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* functionunlockpreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  functionunlockpreview_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_functionunlockpreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_functionunlockpreview_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_functionunlock_2eproto() {
  protobuf_AddDesc_functionunlock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "functionunlock.proto");
  GOOGLE_CHECK(file != NULL);
  functionunlockfunctionUnlock_descriptor_ = file->message_type(0);
  static const int functionunlockfunctionUnlock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, opendaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, opentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, openval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, iconopenval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, belong_),
  };
  functionunlockfunctionUnlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      functionunlockfunctionUnlock_descriptor_,
      functionunlockfunctionUnlock::default_instance_,
      functionunlockfunctionUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockfunctionUnlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(functionunlockfunctionUnlock));
  Sheet_functionunlockfunctionUnlock_descriptor_ = file->message_type(1);
  static const int Sheet_functionunlockfunctionUnlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_functionunlockfunctionUnlock, functionunlockfunctionunlock_list_),
  };
  Sheet_functionunlockfunctionUnlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_functionunlockfunctionUnlock_descriptor_,
      Sheet_functionunlockfunctionUnlock::default_instance_,
      Sheet_functionunlockfunctionUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_functionunlockfunctionUnlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_functionunlockfunctionUnlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_functionunlockfunctionUnlock));
  functionunlockpreview_descriptor_ = file->message_type(2);
  static const int functionunlockpreview_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockpreview, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockpreview, rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockpreview, rewardnum_),
  };
  functionunlockpreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      functionunlockpreview_descriptor_,
      functionunlockpreview::default_instance_,
      functionunlockpreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockpreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionunlockpreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(functionunlockpreview));
  Sheet_functionunlockpreview_descriptor_ = file->message_type(3);
  static const int Sheet_functionunlockpreview_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_functionunlockpreview, functionunlockpreview_list_),
  };
  Sheet_functionunlockpreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_functionunlockpreview_descriptor_,
      Sheet_functionunlockpreview::default_instance_,
      Sheet_functionunlockpreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_functionunlockpreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_functionunlockpreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_functionunlockpreview));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_functionunlock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    functionunlockfunctionUnlock_descriptor_, &functionunlockfunctionUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_functionunlockfunctionUnlock_descriptor_, &Sheet_functionunlockfunctionUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    functionunlockpreview_descriptor_, &functionunlockpreview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_functionunlockpreview_descriptor_, &Sheet_functionunlockpreview::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_functionunlock_2eproto() {
  delete functionunlockfunctionUnlock::default_instance_;
  delete functionunlockfunctionUnlock_reflection_;
  delete Sheet_functionunlockfunctionUnlock::default_instance_;
  delete Sheet_functionunlockfunctionUnlock_reflection_;
  delete functionunlockpreview::default_instance_;
  delete functionunlockpreview_reflection_;
  delete Sheet_functionunlockpreview::default_instance_;
  delete Sheet_functionunlockpreview_reflection_;
}

void protobuf_AddDesc_functionunlock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024functionunlock.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\"\202\002\n\034functionunlockfuncti"
    "onUnlock\022 \n\nfunctionId\030\001 \001(\005B\014\302\377\024\010\345\212\237\350\203\275"
    "id\022,\n\topenDaily\030\002 \001(\005B\031\302\377\024\025\345\274\200\346\234\215\345\244\232\345\260\221\345"
    "\244\251\345\274\200\346\224\276\022\"\n\010openType\030\003 \001(\005B\020\302\377\024\014\345\274\200\346\224\276\346\226"
    "\271\345\274\217\022!\n\007openVal\030\004 \001(\003B\020\302\377\024\014\345\274\200\346\224\276\346\225\260\345\200\274\022"
    "/\n\013iconOpenVal\030\005 \001(\005B\032\302\377\024\026\346\217\220\345\211\215\346\230\276\347\244\272ic"
    "on\345\217\202\346\225\260\022\032\n\006belong\030\006 \001(\005B\n\302\377\024\006\351\231\204\345\261\236\"~\n\""
    "Sheet_functionunlockfunctionUnlock\022X\n!fu"
    "nctionunlockfunctionUnlock_List\030\001 \003(\0132&."
    "proto_ff.functionunlockfunctionUnlockB\005\210"
    "\301\024\310\001\"\214\001\n\025functionunlockpreview\022 \n\nfuncti"
    "onId\030\001 \001(\005B\014\302\377\024\010\345\212\237\350\203\275id\022)\n\nrewardItem\030\002"
    " \001(\005B\025\302\377\024\021\345\245\226\345\212\261\347\232\204\351\201\223\345\205\267ID\022&\n\trewardNum"
    "\030\003 \001(\005B\023\302\377\024\017\351\201\223\345\205\267\347\232\204\346\225\260\351\207\217\"h\n\033Sheet_fun"
    "ctionunlockpreview\022I\n\032functionunlockprev"
    "iew_List\030\001 \003(\0132\037.proto_ff.functionunlock"
    "previewB\004\210\301\024\024", 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "functionunlock.proto", &protobuf_RegisterTypes);
  functionunlockfunctionUnlock::default_instance_ = new functionunlockfunctionUnlock();
  Sheet_functionunlockfunctionUnlock::default_instance_ = new Sheet_functionunlockfunctionUnlock();
  functionunlockpreview::default_instance_ = new functionunlockpreview();
  Sheet_functionunlockpreview::default_instance_ = new Sheet_functionunlockpreview();
  functionunlockfunctionUnlock::default_instance_->InitAsDefaultInstance();
  Sheet_functionunlockfunctionUnlock::default_instance_->InitAsDefaultInstance();
  functionunlockpreview::default_instance_->InitAsDefaultInstance();
  Sheet_functionunlockpreview::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_functionunlock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_functionunlock_2eproto {
  StaticDescriptorInitializer_functionunlock_2eproto() {
    protobuf_AddDesc_functionunlock_2eproto();
  }
} static_descriptor_initializer_functionunlock_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int functionunlockfunctionUnlock::kFunctionIdFieldNumber;
const int functionunlockfunctionUnlock::kOpenDailyFieldNumber;
const int functionunlockfunctionUnlock::kOpenTypeFieldNumber;
const int functionunlockfunctionUnlock::kOpenValFieldNumber;
const int functionunlockfunctionUnlock::kIconOpenValFieldNumber;
const int functionunlockfunctionUnlock::kBelongFieldNumber;
#endif  // !_MSC_VER

functionunlockfunctionUnlock::functionunlockfunctionUnlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void functionunlockfunctionUnlock::InitAsDefaultInstance() {
}

functionunlockfunctionUnlock::functionunlockfunctionUnlock(const functionunlockfunctionUnlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void functionunlockfunctionUnlock::SharedCtor() {
  _cached_size_ = 0;
  functionid_ = 0;
  opendaily_ = 0;
  opentype_ = 0;
  openval_ = GOOGLE_LONGLONG(0);
  iconopenval_ = 0;
  belong_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

functionunlockfunctionUnlock::~functionunlockfunctionUnlock() {
  SharedDtor();
}

void functionunlockfunctionUnlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void functionunlockfunctionUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* functionunlockfunctionUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return functionunlockfunctionUnlock_descriptor_;
}

const functionunlockfunctionUnlock& functionunlockfunctionUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

functionunlockfunctionUnlock* functionunlockfunctionUnlock::default_instance_ = NULL;

functionunlockfunctionUnlock* functionunlockfunctionUnlock::New() const {
  return new functionunlockfunctionUnlock;
}

void functionunlockfunctionUnlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    functionid_ = 0;
    opendaily_ = 0;
    opentype_ = 0;
    openval_ = GOOGLE_LONGLONG(0);
    iconopenval_ = 0;
    belong_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool functionunlockfunctionUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 functionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_openDaily;
        break;
      }

      // optional int32 openDaily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openDaily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opendaily_)));
          set_has_opendaily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_openType;
        break;
      }

      // optional int32 openType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentype_)));
          set_has_opentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_openVal;
        break;
      }

      // optional int64 openVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openval_)));
          set_has_openval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iconOpenVal;
        break;
      }

      // optional int32 iconOpenVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iconOpenVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconopenval_)));
          set_has_iconopenval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_belong;
        break;
      }

      // optional int32 belong = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_)));
          set_has_belong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void functionunlockfunctionUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 functionId = 1;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->functionid(), output);
  }

  // optional int32 openDaily = 2;
  if (has_opendaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opendaily(), output);
  }

  // optional int32 openType = 3;
  if (has_opentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opentype(), output);
  }

  // optional int64 openVal = 4;
  if (has_openval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->openval(), output);
  }

  // optional int32 iconOpenVal = 5;
  if (has_iconopenval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iconopenval(), output);
  }

  // optional int32 belong = 6;
  if (has_belong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->belong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* functionunlockfunctionUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 functionId = 1;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->functionid(), target);
  }

  // optional int32 openDaily = 2;
  if (has_opendaily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opendaily(), target);
  }

  // optional int32 openType = 3;
  if (has_opentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opentype(), target);
  }

  // optional int64 openVal = 4;
  if (has_openval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->openval(), target);
  }

  // optional int32 iconOpenVal = 5;
  if (has_iconopenval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iconopenval(), target);
  }

  // optional int32 belong = 6;
  if (has_belong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->belong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int functionunlockfunctionUnlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 functionId = 1;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionid());
    }

    // optional int32 openDaily = 2;
    if (has_opendaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opendaily());
    }

    // optional int32 openType = 3;
    if (has_opentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentype());
    }

    // optional int64 openVal = 4;
    if (has_openval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->openval());
    }

    // optional int32 iconOpenVal = 5;
    if (has_iconopenval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconopenval());
    }

    // optional int32 belong = 6;
    if (has_belong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->belong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void functionunlockfunctionUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const functionunlockfunctionUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const functionunlockfunctionUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void functionunlockfunctionUnlock::MergeFrom(const functionunlockfunctionUnlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_opendaily()) {
      set_opendaily(from.opendaily());
    }
    if (from.has_opentype()) {
      set_opentype(from.opentype());
    }
    if (from.has_openval()) {
      set_openval(from.openval());
    }
    if (from.has_iconopenval()) {
      set_iconopenval(from.iconopenval());
    }
    if (from.has_belong()) {
      set_belong(from.belong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void functionunlockfunctionUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void functionunlockfunctionUnlock::CopyFrom(const functionunlockfunctionUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool functionunlockfunctionUnlock::IsInitialized() const {

  return true;
}

void functionunlockfunctionUnlock::Swap(functionunlockfunctionUnlock* other) {
  if (other != this) {
    std::swap(functionid_, other->functionid_);
    std::swap(opendaily_, other->opendaily_);
    std::swap(opentype_, other->opentype_);
    std::swap(openval_, other->openval_);
    std::swap(iconopenval_, other->iconopenval_);
    std::swap(belong_, other->belong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata functionunlockfunctionUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = functionunlockfunctionUnlock_descriptor_;
  metadata.reflection = functionunlockfunctionUnlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_functionunlockfunctionUnlock::kFunctionunlockfunctionUnlockListFieldNumber;
#endif  // !_MSC_VER

Sheet_functionunlockfunctionUnlock::Sheet_functionunlockfunctionUnlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_functionunlockfunctionUnlock::InitAsDefaultInstance() {
}

Sheet_functionunlockfunctionUnlock::Sheet_functionunlockfunctionUnlock(const Sheet_functionunlockfunctionUnlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_functionunlockfunctionUnlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_functionunlockfunctionUnlock::~Sheet_functionunlockfunctionUnlock() {
  SharedDtor();
}

void Sheet_functionunlockfunctionUnlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_functionunlockfunctionUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_functionunlockfunctionUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_functionunlockfunctionUnlock_descriptor_;
}

const Sheet_functionunlockfunctionUnlock& Sheet_functionunlockfunctionUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

Sheet_functionunlockfunctionUnlock* Sheet_functionunlockfunctionUnlock::default_instance_ = NULL;

Sheet_functionunlockfunctionUnlock* Sheet_functionunlockfunctionUnlock::New() const {
  return new Sheet_functionunlockfunctionUnlock;
}

void Sheet_functionunlockfunctionUnlock::Clear() {
  functionunlockfunctionunlock_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_functionunlockfunctionUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.functionunlockfunctionUnlock functionunlockfunctionUnlock_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionunlockfunctionUnlock_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functionunlockfunctionunlock_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_functionunlockfunctionUnlock_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_functionunlockfunctionUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.functionunlockfunctionUnlock functionunlockfunctionUnlock_List = 1;
  for (int i = 0; i < this->functionunlockfunctionunlock_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->functionunlockfunctionunlock_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_functionunlockfunctionUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.functionunlockfunctionUnlock functionunlockfunctionUnlock_List = 1;
  for (int i = 0; i < this->functionunlockfunctionunlock_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->functionunlockfunctionunlock_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_functionunlockfunctionUnlock::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.functionunlockfunctionUnlock functionunlockfunctionUnlock_List = 1;
  total_size += 1 * this->functionunlockfunctionunlock_list_size();
  for (int i = 0; i < this->functionunlockfunctionunlock_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functionunlockfunctionunlock_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_functionunlockfunctionUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_functionunlockfunctionUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_functionunlockfunctionUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_functionunlockfunctionUnlock::MergeFrom(const Sheet_functionunlockfunctionUnlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  functionunlockfunctionunlock_list_.MergeFrom(from.functionunlockfunctionunlock_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_functionunlockfunctionUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_functionunlockfunctionUnlock::CopyFrom(const Sheet_functionunlockfunctionUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_functionunlockfunctionUnlock::IsInitialized() const {

  return true;
}

void Sheet_functionunlockfunctionUnlock::Swap(Sheet_functionunlockfunctionUnlock* other) {
  if (other != this) {
    functionunlockfunctionunlock_list_.Swap(&other->functionunlockfunctionunlock_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_functionunlockfunctionUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_functionunlockfunctionUnlock_descriptor_;
  metadata.reflection = Sheet_functionunlockfunctionUnlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int functionunlockpreview::kFunctionIdFieldNumber;
const int functionunlockpreview::kRewardItemFieldNumber;
const int functionunlockpreview::kRewardNumFieldNumber;
#endif  // !_MSC_VER

functionunlockpreview::functionunlockpreview()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void functionunlockpreview::InitAsDefaultInstance() {
}

functionunlockpreview::functionunlockpreview(const functionunlockpreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void functionunlockpreview::SharedCtor() {
  _cached_size_ = 0;
  functionid_ = 0;
  rewarditem_ = 0;
  rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

functionunlockpreview::~functionunlockpreview() {
  SharedDtor();
}

void functionunlockpreview::SharedDtor() {
  if (this != default_instance_) {
  }
}

void functionunlockpreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* functionunlockpreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return functionunlockpreview_descriptor_;
}

const functionunlockpreview& functionunlockpreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

functionunlockpreview* functionunlockpreview::default_instance_ = NULL;

functionunlockpreview* functionunlockpreview::New() const {
  return new functionunlockpreview;
}

void functionunlockpreview::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    functionid_ = 0;
    rewarditem_ = 0;
    rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool functionunlockpreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 functionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardItem;
        break;
      }

      // optional int32 rewardItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewarditem_)));
          set_has_rewarditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardNum;
        break;
      }

      // optional int32 rewardNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void functionunlockpreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 functionId = 1;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->functionid(), output);
  }

  // optional int32 rewardItem = 2;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewarditem(), output);
  }

  // optional int32 rewardNum = 3;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* functionunlockpreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 functionId = 1;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->functionid(), target);
  }

  // optional int32 rewardItem = 2;
  if (has_rewarditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewarditem(), target);
  }

  // optional int32 rewardNum = 3;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int functionunlockpreview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 functionId = 1;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionid());
    }

    // optional int32 rewardItem = 2;
    if (has_rewarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewarditem());
    }

    // optional int32 rewardNum = 3;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void functionunlockpreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const functionunlockpreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const functionunlockpreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void functionunlockpreview::MergeFrom(const functionunlockpreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_rewarditem()) {
      set_rewarditem(from.rewarditem());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void functionunlockpreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void functionunlockpreview::CopyFrom(const functionunlockpreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool functionunlockpreview::IsInitialized() const {

  return true;
}

void functionunlockpreview::Swap(functionunlockpreview* other) {
  if (other != this) {
    std::swap(functionid_, other->functionid_);
    std::swap(rewarditem_, other->rewarditem_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata functionunlockpreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = functionunlockpreview_descriptor_;
  metadata.reflection = functionunlockpreview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_functionunlockpreview::kFunctionunlockpreviewListFieldNumber;
#endif  // !_MSC_VER

Sheet_functionunlockpreview::Sheet_functionunlockpreview()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_functionunlockpreview::InitAsDefaultInstance() {
}

Sheet_functionunlockpreview::Sheet_functionunlockpreview(const Sheet_functionunlockpreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_functionunlockpreview::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_functionunlockpreview::~Sheet_functionunlockpreview() {
  SharedDtor();
}

void Sheet_functionunlockpreview::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_functionunlockpreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_functionunlockpreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_functionunlockpreview_descriptor_;
}

const Sheet_functionunlockpreview& Sheet_functionunlockpreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_functionunlock_2eproto();
  return *default_instance_;
}

Sheet_functionunlockpreview* Sheet_functionunlockpreview::default_instance_ = NULL;

Sheet_functionunlockpreview* Sheet_functionunlockpreview::New() const {
  return new Sheet_functionunlockpreview;
}

void Sheet_functionunlockpreview::Clear() {
  functionunlockpreview_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_functionunlockpreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.functionunlockpreview functionunlockpreview_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionunlockpreview_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functionunlockpreview_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_functionunlockpreview_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_functionunlockpreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.functionunlockpreview functionunlockpreview_List = 1;
  for (int i = 0; i < this->functionunlockpreview_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->functionunlockpreview_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_functionunlockpreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.functionunlockpreview functionunlockpreview_List = 1;
  for (int i = 0; i < this->functionunlockpreview_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->functionunlockpreview_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_functionunlockpreview::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.functionunlockpreview functionunlockpreview_List = 1;
  total_size += 1 * this->functionunlockpreview_list_size();
  for (int i = 0; i < this->functionunlockpreview_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functionunlockpreview_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_functionunlockpreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_functionunlockpreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_functionunlockpreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_functionunlockpreview::MergeFrom(const Sheet_functionunlockpreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  functionunlockpreview_list_.MergeFrom(from.functionunlockpreview_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_functionunlockpreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_functionunlockpreview::CopyFrom(const Sheet_functionunlockpreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_functionunlockpreview::IsInitialized() const {

  return true;
}

void Sheet_functionunlockpreview::Swap(Sheet_functionunlockpreview* other) {
  if (other != this) {
    functionunlockpreview_list_.Swap(&other->functionunlockpreview_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_functionunlockpreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_functionunlockpreview_descriptor_;
  metadata.reflection = Sheet_functionunlockpreview_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
