// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Skill.proto

#ifndef PROTOBUF_E_5fSkill_2eproto__INCLUDED
#define PROTOBUF_E_5fSkill_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fSkill_2eproto();
void protobuf_AssignDesc_E_5fSkill_2eproto();
void protobuf_ShutdownFile_E_5fSkill_2eproto();

class E_SkillBuff;
class Sheet_SkillBuff;
class E_SkillBuffup;
class Sheet_SkillBuffup;
class E_SkillSkillBuffDesc;
class E_SkillSkillAwakebuffDesc;
class E_SkillSkillAdvancetype1buffDesc;
class E_SkillSkillAdvancetype2buffDesc;
class E_SkillSkillAdvancetype3buffDesc;
class E_SkillSkill;
class Sheet_SkillSkill;
class E_SkillSkilladvance;
class Sheet_SkillSkilladvance;
class E_SkillSkillup;
class Sheet_SkillSkillup;
class E_SkillSkillawake;
class Sheet_SkillSkillawake;
class E_SkillSkillgroupSkillDesc;
class E_SkillSkillgroup;
class Sheet_SkillSkillgroup;
class E_SkillAttgroupAttributeDesc;
class E_SkillAttgroup;
class Sheet_SkillAttgroup;

// ===================================================================

class E_SkillBuff : public ::google::protobuf::Message {
 public:
  E_SkillBuff();
  virtual ~E_SkillBuff();

  E_SkillBuff(const E_SkillBuff& from);

  inline E_SkillBuff& operator=(const E_SkillBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillBuff& default_instance();

  void Swap(E_SkillBuff* other);

  // implements Message ----------------------------------------------

  E_SkillBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillBuff& from);
  void MergeFrom(const E_SkillBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_buffid = 1;
  inline bool has_m_buffid() const;
  inline void clear_m_buffid();
  static const int kMBuffidFieldNumber = 1;
  inline ::google::protobuf::int64 m_buffid() const;
  inline void set_m_buffid(::google::protobuf::int64 value);

  // optional string m_buffname = 2;
  inline bool has_m_buffname() const;
  inline void clear_m_buffname();
  static const int kMBuffnameFieldNumber = 2;
  inline const ::std::string& m_buffname() const;
  inline void set_m_buffname(const ::std::string& value);
  inline void set_m_buffname(const char* value);
  inline void set_m_buffname(const char* value, size_t size);
  inline ::std::string* mutable_m_buffname();
  inline ::std::string* release_m_buffname();
  inline void set_allocated_m_buffname(::std::string* m_buffname);

  // optional string m_bufficon = 3;
  inline bool has_m_bufficon() const;
  inline void clear_m_bufficon();
  static const int kMBufficonFieldNumber = 3;
  inline const ::std::string& m_bufficon() const;
  inline void set_m_bufficon(const ::std::string& value);
  inline void set_m_bufficon(const char* value);
  inline void set_m_bufficon(const char* value, size_t size);
  inline ::std::string* mutable_m_bufficon();
  inline ::std::string* release_m_bufficon();
  inline void set_allocated_m_bufficon(::std::string* m_bufficon);

  // optional string m_effectresources = 4;
  inline bool has_m_effectresources() const;
  inline void clear_m_effectresources();
  static const int kMEffectresourcesFieldNumber = 4;
  inline const ::std::string& m_effectresources() const;
  inline void set_m_effectresources(const ::std::string& value);
  inline void set_m_effectresources(const char* value);
  inline void set_m_effectresources(const char* value, size_t size);
  inline ::std::string* mutable_m_effectresources();
  inline ::std::string* release_m_effectresources();
  inline void set_allocated_m_effectresources(::std::string* m_effectresources);

  // optional int32 m_showtpye = 5;
  inline bool has_m_showtpye() const;
  inline void clear_m_showtpye();
  static const int kMShowtpyeFieldNumber = 5;
  inline ::google::protobuf::int32 m_showtpye() const;
  inline void set_m_showtpye(::google::protobuf::int32 value);

  // optional int32 m_startprobability = 6;
  inline bool has_m_startprobability() const;
  inline void clear_m_startprobability();
  static const int kMStartprobabilityFieldNumber = 6;
  inline ::google::protobuf::int32 m_startprobability() const;
  inline void set_m_startprobability(::google::protobuf::int32 value);

  // optional int32 m_probability_up = 7;
  inline bool has_m_probability_up() const;
  inline void clear_m_probability_up();
  static const int kMProbabilityUpFieldNumber = 7;
  inline ::google::protobuf::int32 m_probability_up() const;
  inline void set_m_probability_up(::google::protobuf::int32 value);

  // optional int32 m_starttype = 8;
  inline bool has_m_starttype() const;
  inline void clear_m_starttype();
  static const int kMStarttypeFieldNumber = 8;
  inline ::google::protobuf::int32 m_starttype() const;
  inline void set_m_starttype(::google::protobuf::int32 value);

  // optional string m_starttypevalue = 9;
  inline bool has_m_starttypevalue() const;
  inline void clear_m_starttypevalue();
  static const int kMStarttypevalueFieldNumber = 9;
  inline const ::std::string& m_starttypevalue() const;
  inline void set_m_starttypevalue(const ::std::string& value);
  inline void set_m_starttypevalue(const char* value);
  inline void set_m_starttypevalue(const char* value, size_t size);
  inline ::std::string* mutable_m_starttypevalue();
  inline ::std::string* release_m_starttypevalue();
  inline void set_allocated_m_starttypevalue(::std::string* m_starttypevalue);

  // optional int32 m_endtype = 10;
  inline bool has_m_endtype() const;
  inline void clear_m_endtype();
  static const int kMEndtypeFieldNumber = 10;
  inline ::google::protobuf::int32 m_endtype() const;
  inline void set_m_endtype(::google::protobuf::int32 value);

  // optional string m_endtypevalue = 11;
  inline bool has_m_endtypevalue() const;
  inline void clear_m_endtypevalue();
  static const int kMEndtypevalueFieldNumber = 11;
  inline const ::std::string& m_endtypevalue() const;
  inline void set_m_endtypevalue(const ::std::string& value);
  inline void set_m_endtypevalue(const char* value);
  inline void set_m_endtypevalue(const char* value, size_t size);
  inline ::std::string* mutable_m_endtypevalue();
  inline ::std::string* release_m_endtypevalue();
  inline void set_allocated_m_endtypevalue(::std::string* m_endtypevalue);

  // optional int32 m_endtypea = 12;
  inline bool has_m_endtypea() const;
  inline void clear_m_endtypea();
  static const int kMEndtypeaFieldNumber = 12;
  inline ::google::protobuf::int32 m_endtypea() const;
  inline void set_m_endtypea(::google::protobuf::int32 value);

  // optional string m_endtypevaluea = 13;
  inline bool has_m_endtypevaluea() const;
  inline void clear_m_endtypevaluea();
  static const int kMEndtypevalueaFieldNumber = 13;
  inline const ::std::string& m_endtypevaluea() const;
  inline void set_m_endtypevaluea(const ::std::string& value);
  inline void set_m_endtypevaluea(const char* value);
  inline void set_m_endtypevaluea(const char* value, size_t size);
  inline ::std::string* mutable_m_endtypevaluea();
  inline ::std::string* release_m_endtypevaluea();
  inline void set_allocated_m_endtypevaluea(::std::string* m_endtypevaluea);

  // optional int32 m_endtypeb = 14;
  inline bool has_m_endtypeb() const;
  inline void clear_m_endtypeb();
  static const int kMEndtypebFieldNumber = 14;
  inline ::google::protobuf::int32 m_endtypeb() const;
  inline void set_m_endtypeb(::google::protobuf::int32 value);

  // optional string m_endtypevalueb = 15;
  inline bool has_m_endtypevalueb() const;
  inline void clear_m_endtypevalueb();
  static const int kMEndtypevaluebFieldNumber = 15;
  inline const ::std::string& m_endtypevalueb() const;
  inline void set_m_endtypevalueb(const ::std::string& value);
  inline void set_m_endtypevalueb(const char* value);
  inline void set_m_endtypevalueb(const char* value, size_t size);
  inline ::std::string* mutable_m_endtypevalueb();
  inline ::std::string* release_m_endtypevalueb();
  inline void set_allocated_m_endtypevalueb(::std::string* m_endtypevalueb);

  // optional int32 m_group = 16;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 16;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional string m_buffrule = 17;
  inline bool has_m_buffrule() const;
  inline void clear_m_buffrule();
  static const int kMBuffruleFieldNumber = 17;
  inline const ::std::string& m_buffrule() const;
  inline void set_m_buffrule(const ::std::string& value);
  inline void set_m_buffrule(const char* value);
  inline void set_m_buffrule(const char* value, size_t size);
  inline ::std::string* mutable_m_buffrule();
  inline ::std::string* release_m_buffrule();
  inline void set_allocated_m_buffrule(::std::string* m_buffrule);

  // optional string m_immune = 18;
  inline bool has_m_immune() const;
  inline void clear_m_immune();
  static const int kMImmuneFieldNumber = 18;
  inline const ::std::string& m_immune() const;
  inline void set_m_immune(const ::std::string& value);
  inline void set_m_immune(const char* value);
  inline void set_m_immune(const char* value, size_t size);
  inline ::std::string* mutable_m_immune();
  inline ::std::string* release_m_immune();
  inline void set_allocated_m_immune(::std::string* m_immune);

  // optional string m_dispel = 19;
  inline bool has_m_dispel() const;
  inline void clear_m_dispel();
  static const int kMDispelFieldNumber = 19;
  inline const ::std::string& m_dispel() const;
  inline void set_m_dispel(const ::std::string& value);
  inline void set_m_dispel(const char* value);
  inline void set_m_dispel(const char* value, size_t size);
  inline ::std::string* mutable_m_dispel();
  inline ::std::string* release_m_dispel();
  inline void set_allocated_m_dispel(::std::string* m_dispel);

  // optional int32 m_buffcd = 20;
  inline bool has_m_buffcd() const;
  inline void clear_m_buffcd();
  static const int kMBuffcdFieldNumber = 20;
  inline ::google::protobuf::int32 m_buffcd() const;
  inline void set_m_buffcd(::google::protobuf::int32 value);

  // optional int32 m_effect_time = 21;
  inline bool has_m_effect_time() const;
  inline void clear_m_effect_time();
  static const int kMEffectTimeFieldNumber = 21;
  inline ::google::protobuf::int32 m_effect_time() const;
  inline void set_m_effect_time(::google::protobuf::int32 value);

  // optional int32 m_effect_type = 22;
  inline bool has_m_effect_type() const;
  inline void clear_m_effect_type();
  static const int kMEffectTypeFieldNumber = 22;
  inline ::google::protobuf::int32 m_effect_type() const;
  inline void set_m_effect_type(::google::protobuf::int32 value);

  // optional string m_effect_param = 23;
  inline bool has_m_effect_param() const;
  inline void clear_m_effect_param();
  static const int kMEffectParamFieldNumber = 23;
  inline const ::std::string& m_effect_param() const;
  inline void set_m_effect_param(const ::std::string& value);
  inline void set_m_effect_param(const char* value);
  inline void set_m_effect_param(const char* value, size_t size);
  inline ::std::string* mutable_m_effect_param();
  inline ::std::string* release_m_effect_param();
  inline void set_allocated_m_effect_param(::std::string* m_effect_param);

  // optional int32 m_effect_up = 24;
  inline bool has_m_effect_up() const;
  inline void clear_m_effect_up();
  static const int kMEffectUpFieldNumber = 24;
  inline ::google::protobuf::int32 m_effect_up() const;
  inline void set_m_effect_up(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillBuff)
 private:
  inline void set_has_m_buffid();
  inline void clear_has_m_buffid();
  inline void set_has_m_buffname();
  inline void clear_has_m_buffname();
  inline void set_has_m_bufficon();
  inline void clear_has_m_bufficon();
  inline void set_has_m_effectresources();
  inline void clear_has_m_effectresources();
  inline void set_has_m_showtpye();
  inline void clear_has_m_showtpye();
  inline void set_has_m_startprobability();
  inline void clear_has_m_startprobability();
  inline void set_has_m_probability_up();
  inline void clear_has_m_probability_up();
  inline void set_has_m_starttype();
  inline void clear_has_m_starttype();
  inline void set_has_m_starttypevalue();
  inline void clear_has_m_starttypevalue();
  inline void set_has_m_endtype();
  inline void clear_has_m_endtype();
  inline void set_has_m_endtypevalue();
  inline void clear_has_m_endtypevalue();
  inline void set_has_m_endtypea();
  inline void clear_has_m_endtypea();
  inline void set_has_m_endtypevaluea();
  inline void clear_has_m_endtypevaluea();
  inline void set_has_m_endtypeb();
  inline void clear_has_m_endtypeb();
  inline void set_has_m_endtypevalueb();
  inline void clear_has_m_endtypevalueb();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_buffrule();
  inline void clear_has_m_buffrule();
  inline void set_has_m_immune();
  inline void clear_has_m_immune();
  inline void set_has_m_dispel();
  inline void clear_has_m_dispel();
  inline void set_has_m_buffcd();
  inline void clear_has_m_buffcd();
  inline void set_has_m_effect_time();
  inline void clear_has_m_effect_time();
  inline void set_has_m_effect_type();
  inline void clear_has_m_effect_type();
  inline void set_has_m_effect_param();
  inline void clear_has_m_effect_param();
  inline void set_has_m_effect_up();
  inline void clear_has_m_effect_up();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_buffid_;
  ::std::string* m_buffname_;
  ::std::string* m_bufficon_;
  ::std::string* m_effectresources_;
  ::google::protobuf::int32 m_showtpye_;
  ::google::protobuf::int32 m_startprobability_;
  ::google::protobuf::int32 m_probability_up_;
  ::google::protobuf::int32 m_starttype_;
  ::std::string* m_starttypevalue_;
  ::std::string* m_endtypevalue_;
  ::google::protobuf::int32 m_endtype_;
  ::google::protobuf::int32 m_endtypea_;
  ::std::string* m_endtypevaluea_;
  ::std::string* m_endtypevalueb_;
  ::google::protobuf::int32 m_endtypeb_;
  ::google::protobuf::int32 m_group_;
  ::std::string* m_buffrule_;
  ::std::string* m_immune_;
  ::std::string* m_dispel_;
  ::google::protobuf::int32 m_buffcd_;
  ::google::protobuf::int32 m_effect_time_;
  ::std::string* m_effect_param_;
  ::google::protobuf::int32 m_effect_type_;
  ::google::protobuf::int32 m_effect_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillBuff* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillBuff : public ::google::protobuf::Message {
 public:
  Sheet_SkillBuff();
  virtual ~Sheet_SkillBuff();

  Sheet_SkillBuff(const Sheet_SkillBuff& from);

  inline Sheet_SkillBuff& operator=(const Sheet_SkillBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillBuff& default_instance();

  void Swap(Sheet_SkillBuff* other);

  // implements Message ----------------------------------------------

  Sheet_SkillBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillBuff& from);
  void MergeFrom(const Sheet_SkillBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillBuff E_SkillBuff_List = 1;
  inline int e_skillbuff_list_size() const;
  inline void clear_e_skillbuff_list();
  static const int kESkillBuffListFieldNumber = 1;
  inline const ::proto_ff::E_SkillBuff& e_skillbuff_list(int index) const;
  inline ::proto_ff::E_SkillBuff* mutable_e_skillbuff_list(int index);
  inline ::proto_ff::E_SkillBuff* add_e_skillbuff_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuff >&
      e_skillbuff_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuff >*
      mutable_e_skillbuff_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillBuff)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuff > e_skillbuff_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillBuff* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillBuffup : public ::google::protobuf::Message {
 public:
  E_SkillBuffup();
  virtual ~E_SkillBuffup();

  E_SkillBuffup(const E_SkillBuffup& from);

  inline E_SkillBuffup& operator=(const E_SkillBuffup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillBuffup& default_instance();

  void Swap(E_SkillBuffup* other);

  // implements Message ----------------------------------------------

  E_SkillBuffup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillBuffup& from);
  void MergeFrom(const E_SkillBuffup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_addstartprobability = 2;
  inline bool has_m_addstartprobability() const;
  inline void clear_m_addstartprobability();
  static const int kMAddstartprobabilityFieldNumber = 2;
  inline ::google::protobuf::int32 m_addstartprobability() const;
  inline void set_m_addstartprobability(::google::protobuf::int32 value);

  // optional int32 m_attributeid = 3;
  inline bool has_m_attributeid() const;
  inline void clear_m_attributeid();
  static const int kMAttributeidFieldNumber = 3;
  inline ::google::protobuf::int32 m_attributeid() const;
  inline void set_m_attributeid(::google::protobuf::int32 value);

  // optional int32 m_parama = 4;
  inline bool has_m_parama() const;
  inline void clear_m_parama();
  static const int kMParamaFieldNumber = 4;
  inline ::google::protobuf::int32 m_parama() const;
  inline void set_m_parama(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillBuffup)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_addstartprobability();
  inline void clear_has_m_addstartprobability();
  inline void set_has_m_attributeid();
  inline void clear_has_m_attributeid();
  inline void set_has_m_parama();
  inline void clear_has_m_parama();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_addstartprobability_;
  ::google::protobuf::int32 m_attributeid_;
  ::google::protobuf::int32 m_parama_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillBuffup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillBuffup : public ::google::protobuf::Message {
 public:
  Sheet_SkillBuffup();
  virtual ~Sheet_SkillBuffup();

  Sheet_SkillBuffup(const Sheet_SkillBuffup& from);

  inline Sheet_SkillBuffup& operator=(const Sheet_SkillBuffup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillBuffup& default_instance();

  void Swap(Sheet_SkillBuffup* other);

  // implements Message ----------------------------------------------

  Sheet_SkillBuffup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillBuffup& from);
  void MergeFrom(const Sheet_SkillBuffup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillBuffup E_SkillBuffup_List = 1;
  inline int e_skillbuffup_list_size() const;
  inline void clear_e_skillbuffup_list();
  static const int kESkillBuffupListFieldNumber = 1;
  inline const ::proto_ff::E_SkillBuffup& e_skillbuffup_list(int index) const;
  inline ::proto_ff::E_SkillBuffup* mutable_e_skillbuffup_list(int index);
  inline ::proto_ff::E_SkillBuffup* add_e_skillbuffup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuffup >&
      e_skillbuffup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuffup >*
      mutable_e_skillbuffup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillBuffup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuffup > e_skillbuffup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillBuffup* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillBuffDesc : public ::google::protobuf::Message {
 public:
  E_SkillSkillBuffDesc();
  virtual ~E_SkillSkillBuffDesc();

  E_SkillSkillBuffDesc(const E_SkillSkillBuffDesc& from);

  inline E_SkillSkillBuffDesc& operator=(const E_SkillSkillBuffDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillBuffDesc& default_instance();

  void Swap(E_SkillSkillBuffDesc* other);

  // implements Message ----------------------------------------------

  E_SkillSkillBuffDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillBuffDesc& from);
  void MergeFrom(const E_SkillSkillBuffDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_target = 1;
  inline bool has_m_target() const;
  inline void clear_m_target();
  static const int kMTargetFieldNumber = 1;
  inline ::google::protobuf::int32 m_target() const;
  inline void set_m_target(::google::protobuf::int32 value);

  // optional int32 m_point = 2;
  inline bool has_m_point() const;
  inline void clear_m_point();
  static const int kMPointFieldNumber = 2;
  inline ::google::protobuf::int32 m_point() const;
  inline void set_m_point(::google::protobuf::int32 value);

  // optional int64 m_id = 3;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 3;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillBuffDesc)
 private:
  inline void set_has_m_target();
  inline void clear_has_m_target();
  inline void set_has_m_point();
  inline void clear_has_m_point();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_target_;
  ::google::protobuf::int32 m_point_;
  ::google::protobuf::int64 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillBuffDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillAwakebuffDesc : public ::google::protobuf::Message {
 public:
  E_SkillSkillAwakebuffDesc();
  virtual ~E_SkillSkillAwakebuffDesc();

  E_SkillSkillAwakebuffDesc(const E_SkillSkillAwakebuffDesc& from);

  inline E_SkillSkillAwakebuffDesc& operator=(const E_SkillSkillAwakebuffDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillAwakebuffDesc& default_instance();

  void Swap(E_SkillSkillAwakebuffDesc* other);

  // implements Message ----------------------------------------------

  E_SkillSkillAwakebuffDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillAwakebuffDesc& from);
  void MergeFrom(const E_SkillSkillAwakebuffDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillAwakebuffDesc)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillAwakebuffDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillAdvancetype1buffDesc : public ::google::protobuf::Message {
 public:
  E_SkillSkillAdvancetype1buffDesc();
  virtual ~E_SkillSkillAdvancetype1buffDesc();

  E_SkillSkillAdvancetype1buffDesc(const E_SkillSkillAdvancetype1buffDesc& from);

  inline E_SkillSkillAdvancetype1buffDesc& operator=(const E_SkillSkillAdvancetype1buffDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillAdvancetype1buffDesc& default_instance();

  void Swap(E_SkillSkillAdvancetype1buffDesc* other);

  // implements Message ----------------------------------------------

  E_SkillSkillAdvancetype1buffDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillAdvancetype1buffDesc& from);
  void MergeFrom(const E_SkillSkillAdvancetype1buffDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillAdvancetype1buffDesc)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillAdvancetype1buffDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillAdvancetype2buffDesc : public ::google::protobuf::Message {
 public:
  E_SkillSkillAdvancetype2buffDesc();
  virtual ~E_SkillSkillAdvancetype2buffDesc();

  E_SkillSkillAdvancetype2buffDesc(const E_SkillSkillAdvancetype2buffDesc& from);

  inline E_SkillSkillAdvancetype2buffDesc& operator=(const E_SkillSkillAdvancetype2buffDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillAdvancetype2buffDesc& default_instance();

  void Swap(E_SkillSkillAdvancetype2buffDesc* other);

  // implements Message ----------------------------------------------

  E_SkillSkillAdvancetype2buffDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillAdvancetype2buffDesc& from);
  void MergeFrom(const E_SkillSkillAdvancetype2buffDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillAdvancetype2buffDesc)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillAdvancetype2buffDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillAdvancetype3buffDesc : public ::google::protobuf::Message {
 public:
  E_SkillSkillAdvancetype3buffDesc();
  virtual ~E_SkillSkillAdvancetype3buffDesc();

  E_SkillSkillAdvancetype3buffDesc(const E_SkillSkillAdvancetype3buffDesc& from);

  inline E_SkillSkillAdvancetype3buffDesc& operator=(const E_SkillSkillAdvancetype3buffDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillAdvancetype3buffDesc& default_instance();

  void Swap(E_SkillSkillAdvancetype3buffDesc* other);

  // implements Message ----------------------------------------------

  E_SkillSkillAdvancetype3buffDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillAdvancetype3buffDesc& from);
  void MergeFrom(const E_SkillSkillAdvancetype3buffDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillAdvancetype3buffDesc)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillAdvancetype3buffDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkill : public ::google::protobuf::Message {
 public:
  E_SkillSkill();
  virtual ~E_SkillSkill();

  E_SkillSkill(const E_SkillSkill& from);

  inline E_SkillSkill& operator=(const E_SkillSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkill& default_instance();

  void Swap(E_SkillSkill* other);

  // implements Message ----------------------------------------------

  E_SkillSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkill& from);
  void MergeFrom(const E_SkillSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_skillid = 1;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillidFieldNumber = 1;
  inline ::google::protobuf::int64 m_skillid() const;
  inline void set_m_skillid(::google::protobuf::int64 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_skilltype = 3;
  inline bool has_m_skilltype() const;
  inline void clear_m_skilltype();
  static const int kMSkilltypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_skilltype() const;
  inline void set_m_skilltype(::google::protobuf::int32 value);

  // optional int32 m_group = 4;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 4;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional int32 m_position = 5;
  inline bool has_m_position() const;
  inline void clear_m_position();
  static const int kMPositionFieldNumber = 5;
  inline ::google::protobuf::int32 m_position() const;
  inline void set_m_position(::google::protobuf::int32 value);

  // optional int32 m_displacetime = 6;
  inline bool has_m_displacetime() const;
  inline void clear_m_displacetime();
  static const int kMDisplacetimeFieldNumber = 6;
  inline ::google::protobuf::int32 m_displacetime() const;
  inline void set_m_displacetime(::google::protobuf::int32 value);

  // optional int32 m_displacesign = 7;
  inline bool has_m_displacesign() const;
  inline void clear_m_displacesign();
  static const int kMDisplacesignFieldNumber = 7;
  inline ::google::protobuf::int32 m_displacesign() const;
  inline void set_m_displacesign(::google::protobuf::int32 value);

  // optional string m_displacespeed = 8;
  inline bool has_m_displacespeed() const;
  inline void clear_m_displacespeed();
  static const int kMDisplacespeedFieldNumber = 8;
  inline const ::std::string& m_displacespeed() const;
  inline void set_m_displacespeed(const ::std::string& value);
  inline void set_m_displacespeed(const char* value);
  inline void set_m_displacespeed(const char* value, size_t size);
  inline ::std::string* mutable_m_displacespeed();
  inline ::std::string* release_m_displacespeed();
  inline void set_allocated_m_displacespeed(::std::string* m_displacespeed);

  // optional string m_distimes = 9;
  inline bool has_m_distimes() const;
  inline void clear_m_distimes();
  static const int kMDistimesFieldNumber = 9;
  inline const ::std::string& m_distimes() const;
  inline void set_m_distimes(const ::std::string& value);
  inline void set_m_distimes(const char* value);
  inline void set_m_distimes(const char* value, size_t size);
  inline ::std::string* mutable_m_distimes();
  inline ::std::string* release_m_distimes();
  inline void set_allocated_m_distimes(::std::string* m_distimes);

  // optional int32 m_targetdisplacetime = 10;
  inline bool has_m_targetdisplacetime() const;
  inline void clear_m_targetdisplacetime();
  static const int kMTargetdisplacetimeFieldNumber = 10;
  inline ::google::protobuf::int32 m_targetdisplacetime() const;
  inline void set_m_targetdisplacetime(::google::protobuf::int32 value);

  // optional int32 m_targetdisplacesign = 11;
  inline bool has_m_targetdisplacesign() const;
  inline void clear_m_targetdisplacesign();
  static const int kMTargetdisplacesignFieldNumber = 11;
  inline ::google::protobuf::int32 m_targetdisplacesign() const;
  inline void set_m_targetdisplacesign(::google::protobuf::int32 value);

  // optional string m_targetdisplacespeed = 12;
  inline bool has_m_targetdisplacespeed() const;
  inline void clear_m_targetdisplacespeed();
  static const int kMTargetdisplacespeedFieldNumber = 12;
  inline const ::std::string& m_targetdisplacespeed() const;
  inline void set_m_targetdisplacespeed(const ::std::string& value);
  inline void set_m_targetdisplacespeed(const char* value);
  inline void set_m_targetdisplacespeed(const char* value, size_t size);
  inline ::std::string* mutable_m_targetdisplacespeed();
  inline ::std::string* release_m_targetdisplacespeed();
  inline void set_allocated_m_targetdisplacespeed(::std::string* m_targetdisplacespeed);

  // optional string m_targetdistimes = 13;
  inline bool has_m_targetdistimes() const;
  inline void clear_m_targetdistimes();
  static const int kMTargetdistimesFieldNumber = 13;
  inline const ::std::string& m_targetdistimes() const;
  inline void set_m_targetdistimes(const ::std::string& value);
  inline void set_m_targetdistimes(const char* value);
  inline void set_m_targetdistimes(const char* value, size_t size);
  inline ::std::string* mutable_m_targetdistimes();
  inline ::std::string* release_m_targetdistimes();
  inline void set_allocated_m_targetdistimes(::std::string* m_targetdistimes);

  // optional int32 m_breaktype = 14;
  inline bool has_m_breaktype() const;
  inline void clear_m_breaktype();
  static const int kMBreaktypeFieldNumber = 14;
  inline ::google::protobuf::int32 m_breaktype() const;
  inline void set_m_breaktype(::google::protobuf::int32 value);

  // optional int32 m_cdskill = 15;
  inline bool has_m_cdskill() const;
  inline void clear_m_cdskill();
  static const int kMCdskillFieldNumber = 15;
  inline ::google::protobuf::int32 m_cdskill() const;
  inline void set_m_cdskill(::google::protobuf::int32 value);

  // optional int64 m_relation = 16;
  inline bool has_m_relation() const;
  inline void clear_m_relation();
  static const int kMRelationFieldNumber = 16;
  inline ::google::protobuf::int64 m_relation() const;
  inline void set_m_relation(::google::protobuf::int64 value);

  // optional string m_unlockcondition = 17;
  inline bool has_m_unlockcondition() const;
  inline void clear_m_unlockcondition();
  static const int kMUnlockconditionFieldNumber = 17;
  inline const ::std::string& m_unlockcondition() const;
  inline void set_m_unlockcondition(const ::std::string& value);
  inline void set_m_unlockcondition(const char* value);
  inline void set_m_unlockcondition(const char* value, size_t size);
  inline ::std::string* mutable_m_unlockcondition();
  inline ::std::string* release_m_unlockcondition();
  inline void set_allocated_m_unlockcondition(::std::string* m_unlockcondition);

  // optional int32 m_type = 18;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 18;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_cd = 19;
  inline bool has_m_cd() const;
  inline void clear_m_cd();
  static const int kMCdFieldNumber = 19;
  inline ::google::protobuf::int32 m_cd() const;
  inline void set_m_cd(::google::protobuf::int32 value);

  // optional int32 m_nolock = 20;
  inline bool has_m_nolock() const;
  inline void clear_m_nolock();
  static const int kMNolockFieldNumber = 20;
  inline ::google::protobuf::int32 m_nolock() const;
  inline void set_m_nolock(::google::protobuf::int32 value);

  // optional int32 m_priority = 21;
  inline bool has_m_priority() const;
  inline void clear_m_priority();
  static const int kMPriorityFieldNumber = 21;
  inline ::google::protobuf::int32 m_priority() const;
  inline void set_m_priority(::google::protobuf::int32 value);

  // optional int32 m_fighting = 22;
  inline bool has_m_fighting() const;
  inline void clear_m_fighting();
  static const int kMFightingFieldNumber = 22;
  inline ::google::protobuf::int32 m_fighting() const;
  inline void set_m_fighting(::google::protobuf::int32 value);

  // optional float m_fightingparama = 23;
  inline bool has_m_fightingparama() const;
  inline void clear_m_fightingparama();
  static const int kMFightingparamaFieldNumber = 23;
  inline float m_fightingparama() const;
  inline void set_m_fightingparama(float value);

  // optional int32 m_releasetype = 24;
  inline bool has_m_releasetype() const;
  inline void clear_m_releasetype();
  static const int kMReleasetypeFieldNumber = 24;
  inline ::google::protobuf::int32 m_releasetype() const;
  inline void set_m_releasetype(::google::protobuf::int32 value);

  // optional int32 m_processtypes = 25;
  inline bool has_m_processtypes() const;
  inline void clear_m_processtypes();
  static const int kMProcesstypesFieldNumber = 25;
  inline ::google::protobuf::int32 m_processtypes() const;
  inline void set_m_processtypes(::google::protobuf::int32 value);

  // optional string m_releasetime = 26;
  inline bool has_m_releasetime() const;
  inline void clear_m_releasetime();
  static const int kMReleasetimeFieldNumber = 26;
  inline const ::std::string& m_releasetime() const;
  inline void set_m_releasetime(const ::std::string& value);
  inline void set_m_releasetime(const char* value);
  inline void set_m_releasetime(const char* value, size_t size);
  inline ::std::string* mutable_m_releasetime();
  inline ::std::string* release_m_releasetime();
  inline void set_allocated_m_releasetime(::std::string* m_releasetime);

  // optional int32 m_flyspeed = 27;
  inline bool has_m_flyspeed() const;
  inline void clear_m_flyspeed();
  static const int kMFlyspeedFieldNumber = 27;
  inline ::google::protobuf::int32 m_flyspeed() const;
  inline void set_m_flyspeed(::google::protobuf::int32 value);

  // optional int32 m_acttime = 28;
  inline bool has_m_acttime() const;
  inline void clear_m_acttime();
  static const int kMActtimeFieldNumber = 28;
  inline ::google::protobuf::int32 m_acttime() const;
  inline void set_m_acttime(::google::protobuf::int32 value);

  // optional int32 m_readytime = 29;
  inline bool has_m_readytime() const;
  inline void clear_m_readytime();
  static const int kMReadytimeFieldNumber = 29;
  inline ::google::protobuf::int32 m_readytime() const;
  inline void set_m_readytime(::google::protobuf::int32 value);

  // optional int32 m_readytimeex = 30;
  inline bool has_m_readytimeex() const;
  inline void clear_m_readytimeex();
  static const int kMReadytimeexFieldNumber = 30;
  inline ::google::protobuf::int32 m_readytimeex() const;
  inline void set_m_readytimeex(::google::protobuf::int32 value);

  // optional int32 m_attacktime = 31;
  inline bool has_m_attacktime() const;
  inline void clear_m_attacktime();
  static const int kMAttacktimeFieldNumber = 31;
  inline ::google::protobuf::int32 m_attacktime() const;
  inline void set_m_attacktime(::google::protobuf::int32 value);

  // optional string m_damagetime = 32;
  inline bool has_m_damagetime() const;
  inline void clear_m_damagetime();
  static const int kMDamagetimeFieldNumber = 32;
  inline const ::std::string& m_damagetime() const;
  inline void set_m_damagetime(const ::std::string& value);
  inline void set_m_damagetime(const char* value);
  inline void set_m_damagetime(const char* value, size_t size);
  inline ::std::string* mutable_m_damagetime();
  inline ::std::string* release_m_damagetime();
  inline void set_allocated_m_damagetime(::std::string* m_damagetime);

  // optional string m_damagetimeex = 33;
  inline bool has_m_damagetimeex() const;
  inline void clear_m_damagetimeex();
  static const int kMDamagetimeexFieldNumber = 33;
  inline const ::std::string& m_damagetimeex() const;
  inline void set_m_damagetimeex(const ::std::string& value);
  inline void set_m_damagetimeex(const char* value);
  inline void set_m_damagetimeex(const char* value, size_t size);
  inline ::std::string* mutable_m_damagetimeex();
  inline ::std::string* release_m_damagetimeex();
  inline void set_allocated_m_damagetimeex(::std::string* m_damagetimeex);

  // optional int32 m_attackdistance = 34;
  inline bool has_m_attackdistance() const;
  inline void clear_m_attackdistance();
  static const int kMAttackdistanceFieldNumber = 34;
  inline ::google::protobuf::int32 m_attackdistance() const;
  inline void set_m_attackdistance(::google::protobuf::int32 value);

  // optional int32 m_rangetype = 35;
  inline bool has_m_rangetype() const;
  inline void clear_m_rangetype();
  static const int kMRangetypeFieldNumber = 35;
  inline ::google::protobuf::int32 m_rangetype() const;
  inline void set_m_rangetype(::google::protobuf::int32 value);

  // optional string m_rangetypevalue = 36;
  inline bool has_m_rangetypevalue() const;
  inline void clear_m_rangetypevalue();
  static const int kMRangetypevalueFieldNumber = 36;
  inline const ::std::string& m_rangetypevalue() const;
  inline void set_m_rangetypevalue(const ::std::string& value);
  inline void set_m_rangetypevalue(const char* value);
  inline void set_m_rangetypevalue(const char* value, size_t size);
  inline ::std::string* mutable_m_rangetypevalue();
  inline ::std::string* release_m_rangetypevalue();
  inline void set_allocated_m_rangetypevalue(::std::string* m_rangetypevalue);

  // optional int32 m_rangetypeex = 37;
  inline bool has_m_rangetypeex() const;
  inline void clear_m_rangetypeex();
  static const int kMRangetypeexFieldNumber = 37;
  inline ::google::protobuf::int32 m_rangetypeex() const;
  inline void set_m_rangetypeex(::google::protobuf::int32 value);

  // optional string m_rangetypevalueex = 38;
  inline bool has_m_rangetypevalueex() const;
  inline void clear_m_rangetypevalueex();
  static const int kMRangetypevalueexFieldNumber = 38;
  inline const ::std::string& m_rangetypevalueex() const;
  inline void set_m_rangetypevalueex(const ::std::string& value);
  inline void set_m_rangetypevalueex(const char* value);
  inline void set_m_rangetypevalueex(const char* value, size_t size);
  inline ::std::string* mutable_m_rangetypevalueex();
  inline ::std::string* release_m_rangetypevalueex();
  inline void set_allocated_m_rangetypevalueex(::std::string* m_rangetypevalueex);

  // optional int32 m_warn = 39;
  inline bool has_m_warn() const;
  inline void clear_m_warn();
  static const int kMWarnFieldNumber = 39;
  inline ::google::protobuf::int32 m_warn() const;
  inline void set_m_warn(::google::protobuf::int32 value);

  // optional int32 m_dazetime = 40;
  inline bool has_m_dazetime() const;
  inline void clear_m_dazetime();
  static const int kMDazetimeFieldNumber = 40;
  inline ::google::protobuf::int32 m_dazetime() const;
  inline void set_m_dazetime(::google::protobuf::int32 value);

  // optional int32 m_warntime = 41;
  inline bool has_m_warntime() const;
  inline void clear_m_warntime();
  static const int kMWarntimeFieldNumber = 41;
  inline ::google::protobuf::int32 m_warntime() const;
  inline void set_m_warntime(::google::protobuf::int32 value);

  // optional string m_infomationid = 42;
  inline bool has_m_infomationid() const;
  inline void clear_m_infomationid();
  static const int kMInfomationidFieldNumber = 42;
  inline const ::std::string& m_infomationid() const;
  inline void set_m_infomationid(const ::std::string& value);
  inline void set_m_infomationid(const char* value);
  inline void set_m_infomationid(const char* value, size_t size);
  inline ::std::string* mutable_m_infomationid();
  inline ::std::string* release_m_infomationid();
  inline void set_allocated_m_infomationid(::std::string* m_infomationid);

  // optional int32 m_attackmindistance = 43;
  inline bool has_m_attackmindistance() const;
  inline void clear_m_attackmindistance();
  static const int kMAttackmindistanceFieldNumber = 43;
  inline ::google::protobuf::int32 m_attackmindistance() const;
  inline void set_m_attackmindistance(::google::protobuf::int32 value);

  // optional int32 m_goalmaxnum = 44;
  inline bool has_m_goalmaxnum() const;
  inline void clear_m_goalmaxnum();
  static const int kMGoalmaxnumFieldNumber = 44;
  inline ::google::protobuf::int32 m_goalmaxnum() const;
  inline void set_m_goalmaxnum(::google::protobuf::int32 value);

  // optional int32 m_goalmaxnummonster = 45;
  inline bool has_m_goalmaxnummonster() const;
  inline void clear_m_goalmaxnummonster();
  static const int kMGoalmaxnummonsterFieldNumber = 45;
  inline ::google::protobuf::int32 m_goalmaxnummonster() const;
  inline void set_m_goalmaxnummonster(::google::protobuf::int32 value);

  // optional int32 m_damagetype = 46;
  inline bool has_m_damagetype() const;
  inline void clear_m_damagetype();
  static const int kMDamagetypeFieldNumber = 46;
  inline ::google::protobuf::int32 m_damagetype() const;
  inline void set_m_damagetype(::google::protobuf::int32 value);

  // optional int32 m_damagerate = 47;
  inline bool has_m_damagerate() const;
  inline void clear_m_damagerate();
  static const int kMDamagerateFieldNumber = 47;
  inline ::google::protobuf::int32 m_damagerate() const;
  inline void set_m_damagerate(::google::protobuf::int32 value);

  // optional int32 m_awakedamagerate = 48;
  inline bool has_m_awakedamagerate() const;
  inline void clear_m_awakedamagerate();
  static const int kMAwakedamagerateFieldNumber = 48;
  inline ::google::protobuf::int32 m_awakedamagerate() const;
  inline void set_m_awakedamagerate(::google::protobuf::int32 value);

  // optional int32 m_advancetype1damagerate = 49;
  inline bool has_m_advancetype1damagerate() const;
  inline void clear_m_advancetype1damagerate();
  static const int kMAdvancetype1DamagerateFieldNumber = 49;
  inline ::google::protobuf::int32 m_advancetype1damagerate() const;
  inline void set_m_advancetype1damagerate(::google::protobuf::int32 value);

  // optional int32 m_advancetype2damagerate = 50;
  inline bool has_m_advancetype2damagerate() const;
  inline void clear_m_advancetype2damagerate();
  static const int kMAdvancetype2DamagerateFieldNumber = 50;
  inline ::google::protobuf::int32 m_advancetype2damagerate() const;
  inline void set_m_advancetype2damagerate(::google::protobuf::int32 value);

  // optional int32 m_advancetype3damagerate = 51;
  inline bool has_m_advancetype3damagerate() const;
  inline void clear_m_advancetype3damagerate();
  static const int kMAdvancetype3DamagerateFieldNumber = 51;
  inline ::google::protobuf::int32 m_advancetype3damagerate() const;
  inline void set_m_advancetype3damagerate(::google::protobuf::int32 value);

  // optional int32 m_damagevalue = 52;
  inline bool has_m_damagevalue() const;
  inline void clear_m_damagevalue();
  static const int kMDamagevalueFieldNumber = 52;
  inline ::google::protobuf::int32 m_damagevalue() const;
  inline void set_m_damagevalue(::google::protobuf::int32 value);

  // optional float m_damageparama = 53;
  inline bool has_m_damageparama() const;
  inline void clear_m_damageparama();
  static const int kMDamageparamaFieldNumber = 53;
  inline float m_damageparama() const;
  inline void set_m_damageparama(float value);

  // optional float m_damagerateparama = 54;
  inline bool has_m_damagerateparama() const;
  inline void clear_m_damagerateparama();
  static const int kMDamagerateparamaFieldNumber = 54;
  inline float m_damagerateparama() const;
  inline void set_m_damagerateparama(float value);

  // optional int32 m_addhitrate = 55;
  inline bool has_m_addhitrate() const;
  inline void clear_m_addhitrate();
  static const int kMAddhitrateFieldNumber = 55;
  inline ::google::protobuf::int32 m_addhitrate() const;
  inline void set_m_addhitrate(::google::protobuf::int32 value);

  // optional int64 m_attackbuff = 56;
  inline bool has_m_attackbuff() const;
  inline void clear_m_attackbuff();
  static const int kMAttackbuffFieldNumber = 56;
  inline ::google::protobuf::int64 m_attackbuff() const;
  inline void set_m_attackbuff(::google::protobuf::int64 value);

  // optional int64 m_behitbuff = 57;
  inline bool has_m_behitbuff() const;
  inline void clear_m_behitbuff();
  static const int kMBehitbuffFieldNumber = 57;
  inline ::google::protobuf::int64 m_behitbuff() const;
  inline void set_m_behitbuff(::google::protobuf::int64 value);

  // repeated .proto_ff.E_SkillSkillBuffDesc m_buff = 58;
  inline int m_buff_size() const;
  inline void clear_m_buff();
  static const int kMBuffFieldNumber = 58;
  inline const ::proto_ff::E_SkillSkillBuffDesc& m_buff(int index) const;
  inline ::proto_ff::E_SkillSkillBuffDesc* mutable_m_buff(int index);
  inline ::proto_ff::E_SkillSkillBuffDesc* add_m_buff();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillBuffDesc >&
      m_buff() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillBuffDesc >*
      mutable_m_buff();

  // repeated .proto_ff.E_SkillSkillAwakebuffDesc m_awakebuff = 59;
  inline int m_awakebuff_size() const;
  inline void clear_m_awakebuff();
  static const int kMAwakebuffFieldNumber = 59;
  inline const ::proto_ff::E_SkillSkillAwakebuffDesc& m_awakebuff(int index) const;
  inline ::proto_ff::E_SkillSkillAwakebuffDesc* mutable_m_awakebuff(int index);
  inline ::proto_ff::E_SkillSkillAwakebuffDesc* add_m_awakebuff();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAwakebuffDesc >&
      m_awakebuff() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAwakebuffDesc >*
      mutable_m_awakebuff();

  // repeated .proto_ff.E_SkillSkillAdvancetype1buffDesc m_advancetype1buff = 60;
  inline int m_advancetype1buff_size() const;
  inline void clear_m_advancetype1buff();
  static const int kMAdvancetype1BuffFieldNumber = 60;
  inline const ::proto_ff::E_SkillSkillAdvancetype1buffDesc& m_advancetype1buff(int index) const;
  inline ::proto_ff::E_SkillSkillAdvancetype1buffDesc* mutable_m_advancetype1buff(int index);
  inline ::proto_ff::E_SkillSkillAdvancetype1buffDesc* add_m_advancetype1buff();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype1buffDesc >&
      m_advancetype1buff() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype1buffDesc >*
      mutable_m_advancetype1buff();

  // repeated .proto_ff.E_SkillSkillAdvancetype2buffDesc m_advancetype2buff = 61;
  inline int m_advancetype2buff_size() const;
  inline void clear_m_advancetype2buff();
  static const int kMAdvancetype2BuffFieldNumber = 61;
  inline const ::proto_ff::E_SkillSkillAdvancetype2buffDesc& m_advancetype2buff(int index) const;
  inline ::proto_ff::E_SkillSkillAdvancetype2buffDesc* mutable_m_advancetype2buff(int index);
  inline ::proto_ff::E_SkillSkillAdvancetype2buffDesc* add_m_advancetype2buff();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype2buffDesc >&
      m_advancetype2buff() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype2buffDesc >*
      mutable_m_advancetype2buff();

  // repeated .proto_ff.E_SkillSkillAdvancetype3buffDesc m_advancetype3buff = 62;
  inline int m_advancetype3buff_size() const;
  inline void clear_m_advancetype3buff();
  static const int kMAdvancetype3BuffFieldNumber = 62;
  inline const ::proto_ff::E_SkillSkillAdvancetype3buffDesc& m_advancetype3buff(int index) const;
  inline ::proto_ff::E_SkillSkillAdvancetype3buffDesc* mutable_m_advancetype3buff(int index);
  inline ::proto_ff::E_SkillSkillAdvancetype3buffDesc* add_m_advancetype3buff();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype3buffDesc >&
      m_advancetype3buff() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype3buffDesc >*
      mutable_m_advancetype3buff();

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkill)
 private:
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_skilltype();
  inline void clear_has_m_skilltype();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_position();
  inline void clear_has_m_position();
  inline void set_has_m_displacetime();
  inline void clear_has_m_displacetime();
  inline void set_has_m_displacesign();
  inline void clear_has_m_displacesign();
  inline void set_has_m_displacespeed();
  inline void clear_has_m_displacespeed();
  inline void set_has_m_distimes();
  inline void clear_has_m_distimes();
  inline void set_has_m_targetdisplacetime();
  inline void clear_has_m_targetdisplacetime();
  inline void set_has_m_targetdisplacesign();
  inline void clear_has_m_targetdisplacesign();
  inline void set_has_m_targetdisplacespeed();
  inline void clear_has_m_targetdisplacespeed();
  inline void set_has_m_targetdistimes();
  inline void clear_has_m_targetdistimes();
  inline void set_has_m_breaktype();
  inline void clear_has_m_breaktype();
  inline void set_has_m_cdskill();
  inline void clear_has_m_cdskill();
  inline void set_has_m_relation();
  inline void clear_has_m_relation();
  inline void set_has_m_unlockcondition();
  inline void clear_has_m_unlockcondition();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_cd();
  inline void clear_has_m_cd();
  inline void set_has_m_nolock();
  inline void clear_has_m_nolock();
  inline void set_has_m_priority();
  inline void clear_has_m_priority();
  inline void set_has_m_fighting();
  inline void clear_has_m_fighting();
  inline void set_has_m_fightingparama();
  inline void clear_has_m_fightingparama();
  inline void set_has_m_releasetype();
  inline void clear_has_m_releasetype();
  inline void set_has_m_processtypes();
  inline void clear_has_m_processtypes();
  inline void set_has_m_releasetime();
  inline void clear_has_m_releasetime();
  inline void set_has_m_flyspeed();
  inline void clear_has_m_flyspeed();
  inline void set_has_m_acttime();
  inline void clear_has_m_acttime();
  inline void set_has_m_readytime();
  inline void clear_has_m_readytime();
  inline void set_has_m_readytimeex();
  inline void clear_has_m_readytimeex();
  inline void set_has_m_attacktime();
  inline void clear_has_m_attacktime();
  inline void set_has_m_damagetime();
  inline void clear_has_m_damagetime();
  inline void set_has_m_damagetimeex();
  inline void clear_has_m_damagetimeex();
  inline void set_has_m_attackdistance();
  inline void clear_has_m_attackdistance();
  inline void set_has_m_rangetype();
  inline void clear_has_m_rangetype();
  inline void set_has_m_rangetypevalue();
  inline void clear_has_m_rangetypevalue();
  inline void set_has_m_rangetypeex();
  inline void clear_has_m_rangetypeex();
  inline void set_has_m_rangetypevalueex();
  inline void clear_has_m_rangetypevalueex();
  inline void set_has_m_warn();
  inline void clear_has_m_warn();
  inline void set_has_m_dazetime();
  inline void clear_has_m_dazetime();
  inline void set_has_m_warntime();
  inline void clear_has_m_warntime();
  inline void set_has_m_infomationid();
  inline void clear_has_m_infomationid();
  inline void set_has_m_attackmindistance();
  inline void clear_has_m_attackmindistance();
  inline void set_has_m_goalmaxnum();
  inline void clear_has_m_goalmaxnum();
  inline void set_has_m_goalmaxnummonster();
  inline void clear_has_m_goalmaxnummonster();
  inline void set_has_m_damagetype();
  inline void clear_has_m_damagetype();
  inline void set_has_m_damagerate();
  inline void clear_has_m_damagerate();
  inline void set_has_m_awakedamagerate();
  inline void clear_has_m_awakedamagerate();
  inline void set_has_m_advancetype1damagerate();
  inline void clear_has_m_advancetype1damagerate();
  inline void set_has_m_advancetype2damagerate();
  inline void clear_has_m_advancetype2damagerate();
  inline void set_has_m_advancetype3damagerate();
  inline void clear_has_m_advancetype3damagerate();
  inline void set_has_m_damagevalue();
  inline void clear_has_m_damagevalue();
  inline void set_has_m_damageparama();
  inline void clear_has_m_damageparama();
  inline void set_has_m_damagerateparama();
  inline void clear_has_m_damagerateparama();
  inline void set_has_m_addhitrate();
  inline void clear_has_m_addhitrate();
  inline void set_has_m_attackbuff();
  inline void clear_has_m_attackbuff();
  inline void set_has_m_behitbuff();
  inline void clear_has_m_behitbuff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_skillid_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_skilltype_;
  ::google::protobuf::int32 m_group_;
  ::google::protobuf::int32 m_position_;
  ::google::protobuf::int32 m_displacetime_;
  ::std::string* m_displacespeed_;
  ::google::protobuf::int32 m_displacesign_;
  ::google::protobuf::int32 m_targetdisplacetime_;
  ::std::string* m_distimes_;
  ::std::string* m_targetdisplacespeed_;
  ::google::protobuf::int32 m_targetdisplacesign_;
  ::google::protobuf::int32 m_breaktype_;
  ::std::string* m_targetdistimes_;
  ::google::protobuf::int64 m_relation_;
  ::google::protobuf::int32 m_cdskill_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_unlockcondition_;
  ::google::protobuf::int32 m_cd_;
  ::google::protobuf::int32 m_nolock_;
  ::google::protobuf::int32 m_priority_;
  ::google::protobuf::int32 m_fighting_;
  float m_fightingparama_;
  ::google::protobuf::int32 m_releasetype_;
  ::std::string* m_releasetime_;
  ::google::protobuf::int32 m_processtypes_;
  ::google::protobuf::int32 m_flyspeed_;
  ::google::protobuf::int32 m_acttime_;
  ::google::protobuf::int32 m_readytime_;
  ::google::protobuf::int32 m_readytimeex_;
  ::google::protobuf::int32 m_attacktime_;
  ::std::string* m_damagetime_;
  ::std::string* m_damagetimeex_;
  ::google::protobuf::int32 m_attackdistance_;
  ::google::protobuf::int32 m_rangetype_;
  ::std::string* m_rangetypevalue_;
  ::google::protobuf::int32 m_rangetypeex_;
  ::google::protobuf::int32 m_warn_;
  ::std::string* m_rangetypevalueex_;
  ::google::protobuf::int32 m_dazetime_;
  ::google::protobuf::int32 m_warntime_;
  ::std::string* m_infomationid_;
  ::google::protobuf::int32 m_attackmindistance_;
  ::google::protobuf::int32 m_goalmaxnum_;
  ::google::protobuf::int32 m_goalmaxnummonster_;
  ::google::protobuf::int32 m_damagetype_;
  ::google::protobuf::int32 m_damagerate_;
  ::google::protobuf::int32 m_awakedamagerate_;
  ::google::protobuf::int32 m_advancetype1damagerate_;
  ::google::protobuf::int32 m_advancetype2damagerate_;
  ::google::protobuf::int32 m_advancetype3damagerate_;
  ::google::protobuf::int32 m_damagevalue_;
  float m_damageparama_;
  float m_damagerateparama_;
  ::google::protobuf::int64 m_attackbuff_;
  ::google::protobuf::int64 m_behitbuff_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillBuffDesc > m_buff_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAwakebuffDesc > m_awakebuff_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype1buffDesc > m_advancetype1buff_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype2buffDesc > m_advancetype2buff_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype3buffDesc > m_advancetype3buff_;
  ::google::protobuf::int32 m_addhitrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(62 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkill* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillSkill : public ::google::protobuf::Message {
 public:
  Sheet_SkillSkill();
  virtual ~Sheet_SkillSkill();

  Sheet_SkillSkill(const Sheet_SkillSkill& from);

  inline Sheet_SkillSkill& operator=(const Sheet_SkillSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillSkill& default_instance();

  void Swap(Sheet_SkillSkill* other);

  // implements Message ----------------------------------------------

  Sheet_SkillSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillSkill& from);
  void MergeFrom(const Sheet_SkillSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillSkill E_SkillSkill_List = 1;
  inline int e_skillskill_list_size() const;
  inline void clear_e_skillskill_list();
  static const int kESkillSkillListFieldNumber = 1;
  inline const ::proto_ff::E_SkillSkill& e_skillskill_list(int index) const;
  inline ::proto_ff::E_SkillSkill* mutable_e_skillskill_list(int index);
  inline ::proto_ff::E_SkillSkill* add_e_skillskill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkill >&
      e_skillskill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkill >*
      mutable_e_skillskill_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillSkill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkill > e_skillskill_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillSkill* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkilladvance : public ::google::protobuf::Message {
 public:
  E_SkillSkilladvance();
  virtual ~E_SkillSkilladvance();

  E_SkillSkilladvance(const E_SkillSkilladvance& from);

  inline E_SkillSkilladvance& operator=(const E_SkillSkilladvance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkilladvance& default_instance();

  void Swap(E_SkillSkilladvance* other);

  // implements Message ----------------------------------------------

  E_SkillSkilladvance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkilladvance& from);
  void MergeFrom(const E_SkillSkilladvance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_profession = 2;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 2;
  inline ::google::protobuf::int32 m_profession() const;
  inline void set_m_profession(::google::protobuf::int32 value);

  // optional int32 m_type = 3;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_advancelv = 4;
  inline bool has_m_advancelv() const;
  inline void clear_m_advancelv();
  static const int kMAdvancelvFieldNumber = 4;
  inline ::google::protobuf::int32 m_advancelv() const;
  inline void set_m_advancelv(::google::protobuf::int32 value);

  // optional string m_advancecondition = 5;
  inline bool has_m_advancecondition() const;
  inline void clear_m_advancecondition();
  static const int kMAdvanceconditionFieldNumber = 5;
  inline const ::std::string& m_advancecondition() const;
  inline void set_m_advancecondition(const ::std::string& value);
  inline void set_m_advancecondition(const char* value);
  inline void set_m_advancecondition(const char* value, size_t size);
  inline ::std::string* mutable_m_advancecondition();
  inline ::std::string* release_m_advancecondition();
  inline void set_allocated_m_advancecondition(::std::string* m_advancecondition);

  // optional string m_skillid = 6;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillidFieldNumber = 6;
  inline const ::std::string& m_skillid() const;
  inline void set_m_skillid(const ::std::string& value);
  inline void set_m_skillid(const char* value);
  inline void set_m_skillid(const char* value, size_t size);
  inline ::std::string* mutable_m_skillid();
  inline ::std::string* release_m_skillid();
  inline void set_allocated_m_skillid(::std::string* m_skillid);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkilladvance)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_advancelv();
  inline void clear_has_m_advancelv();
  inline void set_has_m_advancecondition();
  inline void clear_has_m_advancecondition();
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_profession_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_advancelv_;
  ::std::string* m_advancecondition_;
  ::std::string* m_skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkilladvance* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillSkilladvance : public ::google::protobuf::Message {
 public:
  Sheet_SkillSkilladvance();
  virtual ~Sheet_SkillSkilladvance();

  Sheet_SkillSkilladvance(const Sheet_SkillSkilladvance& from);

  inline Sheet_SkillSkilladvance& operator=(const Sheet_SkillSkilladvance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillSkilladvance& default_instance();

  void Swap(Sheet_SkillSkilladvance* other);

  // implements Message ----------------------------------------------

  Sheet_SkillSkilladvance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillSkilladvance& from);
  void MergeFrom(const Sheet_SkillSkilladvance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillSkilladvance E_SkillSkilladvance_List = 1;
  inline int e_skillskilladvance_list_size() const;
  inline void clear_e_skillskilladvance_list();
  static const int kESkillSkilladvanceListFieldNumber = 1;
  inline const ::proto_ff::E_SkillSkilladvance& e_skillskilladvance_list(int index) const;
  inline ::proto_ff::E_SkillSkilladvance* mutable_e_skillskilladvance_list(int index);
  inline ::proto_ff::E_SkillSkilladvance* add_e_skillskilladvance_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkilladvance >&
      e_skillskilladvance_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkilladvance >*
      mutable_e_skillskilladvance_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillSkilladvance)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkilladvance > e_skillskilladvance_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillSkilladvance* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillup : public ::google::protobuf::Message {
 public:
  E_SkillSkillup();
  virtual ~E_SkillSkillup();

  E_SkillSkillup(const E_SkillSkillup& from);

  inline E_SkillSkillup& operator=(const E_SkillSkillup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillup& default_instance();

  void Swap(E_SkillSkillup* other);

  // implements Message ----------------------------------------------

  E_SkillSkillup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillup& from);
  void MergeFrom(const E_SkillSkillup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_group = 2;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 2;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional int32 m_skilllv = 3;
  inline bool has_m_skilllv() const;
  inline void clear_m_skilllv();
  static const int kMSkilllvFieldNumber = 3;
  inline ::google::protobuf::int32 m_skilllv() const;
  inline void set_m_skilllv(::google::protobuf::int32 value);

  // optional string m_skillids = 4;
  inline bool has_m_skillids() const;
  inline void clear_m_skillids();
  static const int kMSkillidsFieldNumber = 4;
  inline const ::std::string& m_skillids() const;
  inline void set_m_skillids(const ::std::string& value);
  inline void set_m_skillids(const char* value);
  inline void set_m_skillids(const char* value, size_t size);
  inline ::std::string* mutable_m_skillids();
  inline ::std::string* release_m_skillids();
  inline void set_allocated_m_skillids(::std::string* m_skillids);

  // optional int32 m_rolelv = 5;
  inline bool has_m_rolelv() const;
  inline void clear_m_rolelv();
  static const int kMRolelvFieldNumber = 5;
  inline ::google::protobuf::int32 m_rolelv() const;
  inline void set_m_rolelv(::google::protobuf::int32 value);

  // optional int64 m_costitemid = 6;
  inline bool has_m_costitemid() const;
  inline void clear_m_costitemid();
  static const int kMCostitemidFieldNumber = 6;
  inline ::google::protobuf::int64 m_costitemid() const;
  inline void set_m_costitemid(::google::protobuf::int64 value);

  // optional int32 m_costnum = 7;
  inline bool has_m_costnum() const;
  inline void clear_m_costnum();
  static const int kMCostnumFieldNumber = 7;
  inline ::google::protobuf::int32 m_costnum() const;
  inline void set_m_costnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillup)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_skilllv();
  inline void clear_has_m_skilllv();
  inline void set_has_m_skillids();
  inline void clear_has_m_skillids();
  inline void set_has_m_rolelv();
  inline void clear_has_m_rolelv();
  inline void set_has_m_costitemid();
  inline void clear_has_m_costitemid();
  inline void set_has_m_costnum();
  inline void clear_has_m_costnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_group_;
  ::std::string* m_skillids_;
  ::google::protobuf::int32 m_skilllv_;
  ::google::protobuf::int32 m_rolelv_;
  ::google::protobuf::int64 m_costitemid_;
  ::google::protobuf::int32 m_costnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillSkillup : public ::google::protobuf::Message {
 public:
  Sheet_SkillSkillup();
  virtual ~Sheet_SkillSkillup();

  Sheet_SkillSkillup(const Sheet_SkillSkillup& from);

  inline Sheet_SkillSkillup& operator=(const Sheet_SkillSkillup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillSkillup& default_instance();

  void Swap(Sheet_SkillSkillup* other);

  // implements Message ----------------------------------------------

  Sheet_SkillSkillup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillSkillup& from);
  void MergeFrom(const Sheet_SkillSkillup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillSkillup E_SkillSkillup_List = 1;
  inline int e_skillskillup_list_size() const;
  inline void clear_e_skillskillup_list();
  static const int kESkillSkillupListFieldNumber = 1;
  inline const ::proto_ff::E_SkillSkillup& e_skillskillup_list(int index) const;
  inline ::proto_ff::E_SkillSkillup* mutable_e_skillskillup_list(int index);
  inline ::proto_ff::E_SkillSkillup* add_e_skillskillup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillup >&
      e_skillskillup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillup >*
      mutable_e_skillskillup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillSkillup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillup > e_skillskillup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillSkillup* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillawake : public ::google::protobuf::Message {
 public:
  E_SkillSkillawake();
  virtual ~E_SkillSkillawake();

  E_SkillSkillawake(const E_SkillSkillawake& from);

  inline E_SkillSkillawake& operator=(const E_SkillSkillawake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillawake& default_instance();

  void Swap(E_SkillSkillawake* other);

  // implements Message ----------------------------------------------

  E_SkillSkillawake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillawake& from);
  void MergeFrom(const E_SkillSkillawake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_skillid = 1;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillidFieldNumber = 1;
  inline ::google::protobuf::int32 m_skillid() const;
  inline void set_m_skillid(::google::protobuf::int32 value);

  // optional int32 m_costitemid = 2;
  inline bool has_m_costitemid() const;
  inline void clear_m_costitemid();
  static const int kMCostitemidFieldNumber = 2;
  inline ::google::protobuf::int32 m_costitemid() const;
  inline void set_m_costitemid(::google::protobuf::int32 value);

  // optional int32 m_costnum = 3;
  inline bool has_m_costnum() const;
  inline void clear_m_costnum();
  static const int kMCostnumFieldNumber = 3;
  inline ::google::protobuf::int32 m_costnum() const;
  inline void set_m_costnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillawake)
 private:
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();
  inline void set_has_m_costitemid();
  inline void clear_has_m_costitemid();
  inline void set_has_m_costnum();
  inline void clear_has_m_costnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_skillid_;
  ::google::protobuf::int32 m_costitemid_;
  ::google::protobuf::int32 m_costnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillawake* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillSkillawake : public ::google::protobuf::Message {
 public:
  Sheet_SkillSkillawake();
  virtual ~Sheet_SkillSkillawake();

  Sheet_SkillSkillawake(const Sheet_SkillSkillawake& from);

  inline Sheet_SkillSkillawake& operator=(const Sheet_SkillSkillawake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillSkillawake& default_instance();

  void Swap(Sheet_SkillSkillawake* other);

  // implements Message ----------------------------------------------

  Sheet_SkillSkillawake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillSkillawake& from);
  void MergeFrom(const Sheet_SkillSkillawake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillSkillawake E_SkillSkillawake_List = 1;
  inline int e_skillskillawake_list_size() const;
  inline void clear_e_skillskillawake_list();
  static const int kESkillSkillawakeListFieldNumber = 1;
  inline const ::proto_ff::E_SkillSkillawake& e_skillskillawake_list(int index) const;
  inline ::proto_ff::E_SkillSkillawake* mutable_e_skillskillawake_list(int index);
  inline ::proto_ff::E_SkillSkillawake* add_e_skillskillawake_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillawake >&
      e_skillskillawake_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillawake >*
      mutable_e_skillskillawake_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillSkillawake)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillawake > e_skillskillawake_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillSkillawake* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillgroupSkillDesc : public ::google::protobuf::Message {
 public:
  E_SkillSkillgroupSkillDesc();
  virtual ~E_SkillSkillgroupSkillDesc();

  E_SkillSkillgroupSkillDesc(const E_SkillSkillgroupSkillDesc& from);

  inline E_SkillSkillgroupSkillDesc& operator=(const E_SkillSkillgroupSkillDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillgroupSkillDesc& default_instance();

  void Swap(E_SkillSkillgroupSkillDesc* other);

  // implements Message ----------------------------------------------

  E_SkillSkillgroupSkillDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillgroupSkillDesc& from);
  void MergeFrom(const E_SkillSkillgroupSkillDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_position = 1;
  inline bool has_m_position() const;
  inline void clear_m_position();
  static const int kMPositionFieldNumber = 1;
  inline ::google::protobuf::int32 m_position() const;
  inline void set_m_position(::google::protobuf::int32 value);

  // optional int32 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillgroupSkillDesc)
 private:
  inline void set_has_m_position();
  inline void clear_has_m_position();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_position_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillgroupSkillDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillSkillgroup : public ::google::protobuf::Message {
 public:
  E_SkillSkillgroup();
  virtual ~E_SkillSkillgroup();

  E_SkillSkillgroup(const E_SkillSkillgroup& from);

  inline E_SkillSkillgroup& operator=(const E_SkillSkillgroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillSkillgroup& default_instance();

  void Swap(E_SkillSkillgroup* other);

  // implements Message ----------------------------------------------

  E_SkillSkillgroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillSkillgroup& from);
  void MergeFrom(const E_SkillSkillgroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_skillgroup = 1;
  inline bool has_m_skillgroup() const;
  inline void clear_m_skillgroup();
  static const int kMSkillgroupFieldNumber = 1;
  inline ::google::protobuf::int32 m_skillgroup() const;
  inline void set_m_skillgroup(::google::protobuf::int32 value);

  // optional string m_showskilltype = 2;
  inline bool has_m_showskilltype() const;
  inline void clear_m_showskilltype();
  static const int kMShowskilltypeFieldNumber = 2;
  inline const ::std::string& m_showskilltype() const;
  inline void set_m_showskilltype(const ::std::string& value);
  inline void set_m_showskilltype(const char* value);
  inline void set_m_showskilltype(const char* value, size_t size);
  inline ::std::string* mutable_m_showskilltype();
  inline ::std::string* release_m_showskilltype();
  inline void set_allocated_m_showskilltype(::std::string* m_showskilltype);

  // repeated .proto_ff.E_SkillSkillgroupSkillDesc m_skill = 3;
  inline int m_skill_size() const;
  inline void clear_m_skill();
  static const int kMSkillFieldNumber = 3;
  inline const ::proto_ff::E_SkillSkillgroupSkillDesc& m_skill(int index) const;
  inline ::proto_ff::E_SkillSkillgroupSkillDesc* mutable_m_skill(int index);
  inline ::proto_ff::E_SkillSkillgroupSkillDesc* add_m_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroupSkillDesc >&
      m_skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroupSkillDesc >*
      mutable_m_skill();

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillSkillgroup)
 private:
  inline void set_has_m_skillgroup();
  inline void clear_has_m_skillgroup();
  inline void set_has_m_showskilltype();
  inline void clear_has_m_showskilltype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_showskilltype_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroupSkillDesc > m_skill_;
  ::google::protobuf::int32 m_skillgroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillSkillgroup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillSkillgroup : public ::google::protobuf::Message {
 public:
  Sheet_SkillSkillgroup();
  virtual ~Sheet_SkillSkillgroup();

  Sheet_SkillSkillgroup(const Sheet_SkillSkillgroup& from);

  inline Sheet_SkillSkillgroup& operator=(const Sheet_SkillSkillgroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillSkillgroup& default_instance();

  void Swap(Sheet_SkillSkillgroup* other);

  // implements Message ----------------------------------------------

  Sheet_SkillSkillgroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillSkillgroup& from);
  void MergeFrom(const Sheet_SkillSkillgroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillSkillgroup E_SkillSkillgroup_List = 1;
  inline int e_skillskillgroup_list_size() const;
  inline void clear_e_skillskillgroup_list();
  static const int kESkillSkillgroupListFieldNumber = 1;
  inline const ::proto_ff::E_SkillSkillgroup& e_skillskillgroup_list(int index) const;
  inline ::proto_ff::E_SkillSkillgroup* mutable_e_skillskillgroup_list(int index);
  inline ::proto_ff::E_SkillSkillgroup* add_e_skillskillgroup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroup >&
      e_skillskillgroup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroup >*
      mutable_e_skillskillgroup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillSkillgroup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroup > e_skillskillgroup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillSkillgroup* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillAttgroupAttributeDesc : public ::google::protobuf::Message {
 public:
  E_SkillAttgroupAttributeDesc();
  virtual ~E_SkillAttgroupAttributeDesc();

  E_SkillAttgroupAttributeDesc(const E_SkillAttgroupAttributeDesc& from);

  inline E_SkillAttgroupAttributeDesc& operator=(const E_SkillAttgroupAttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillAttgroupAttributeDesc& default_instance();

  void Swap(E_SkillAttgroupAttributeDesc* other);

  // implements Message ----------------------------------------------

  E_SkillAttgroupAttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillAttgroupAttributeDesc& from);
  void MergeFrom(const E_SkillAttgroupAttributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int64 m_value() const;
  inline void set_m_value(::google::protobuf::int64 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillAttgroupAttributeDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_value_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillAttgroupAttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_SkillAttgroup : public ::google::protobuf::Message {
 public:
  E_SkillAttgroup();
  virtual ~E_SkillAttgroup();

  E_SkillAttgroup(const E_SkillAttgroup& from);

  inline E_SkillAttgroup& operator=(const E_SkillAttgroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SkillAttgroup& default_instance();

  void Swap(E_SkillAttgroup* other);

  // implements Message ----------------------------------------------

  E_SkillAttgroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SkillAttgroup& from);
  void MergeFrom(const E_SkillAttgroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // repeated .proto_ff.E_SkillAttgroupAttributeDesc m_attribute = 2;
  inline int m_attribute_size() const;
  inline void clear_m_attribute();
  static const int kMAttributeFieldNumber = 2;
  inline const ::proto_ff::E_SkillAttgroupAttributeDesc& m_attribute(int index) const;
  inline ::proto_ff::E_SkillAttgroupAttributeDesc* mutable_m_attribute(int index);
  inline ::proto_ff::E_SkillAttgroupAttributeDesc* add_m_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroupAttributeDesc >&
      m_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroupAttributeDesc >*
      mutable_m_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.E_SkillAttgroup)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroupAttributeDesc > m_attribute_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static E_SkillAttgroup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SkillAttgroup : public ::google::protobuf::Message {
 public:
  Sheet_SkillAttgroup();
  virtual ~Sheet_SkillAttgroup();

  Sheet_SkillAttgroup(const Sheet_SkillAttgroup& from);

  inline Sheet_SkillAttgroup& operator=(const Sheet_SkillAttgroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SkillAttgroup& default_instance();

  void Swap(Sheet_SkillAttgroup* other);

  // implements Message ----------------------------------------------

  Sheet_SkillAttgroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SkillAttgroup& from);
  void MergeFrom(const Sheet_SkillAttgroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SkillAttgroup E_SkillAttgroup_List = 1;
  inline int e_skillattgroup_list_size() const;
  inline void clear_e_skillattgroup_list();
  static const int kESkillAttgroupListFieldNumber = 1;
  inline const ::proto_ff::E_SkillAttgroup& e_skillattgroup_list(int index) const;
  inline ::proto_ff::E_SkillAttgroup* mutable_e_skillattgroup_list(int index);
  inline ::proto_ff::E_SkillAttgroup* add_e_skillattgroup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroup >&
      e_skillattgroup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroup >*
      mutable_e_skillattgroup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SkillAttgroup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroup > e_skillattgroup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSkill_2eproto();
  friend void protobuf_AssignDesc_E_5fSkill_2eproto();
  friend void protobuf_ShutdownFile_E_5fSkill_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SkillAttgroup* default_instance_;
};
// ===================================================================


// ===================================================================

// E_SkillBuff

// optional int64 m_buffid = 1;
inline bool E_SkillBuff::has_m_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillBuff::set_has_m_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillBuff::clear_has_m_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillBuff::clear_m_buffid() {
  m_buffid_ = GOOGLE_LONGLONG(0);
  clear_has_m_buffid();
}
inline ::google::protobuf::int64 E_SkillBuff::m_buffid() const {
  return m_buffid_;
}
inline void E_SkillBuff::set_m_buffid(::google::protobuf::int64 value) {
  set_has_m_buffid();
  m_buffid_ = value;
}

// optional string m_buffname = 2;
inline bool E_SkillBuff::has_m_buffname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillBuff::set_has_m_buffname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillBuff::clear_has_m_buffname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillBuff::clear_m_buffname() {
  if (m_buffname_ != &::google::protobuf::internal::kEmptyString) {
    m_buffname_->clear();
  }
  clear_has_m_buffname();
}
inline const ::std::string& E_SkillBuff::m_buffname() const {
  return *m_buffname_;
}
inline void E_SkillBuff::set_m_buffname(const ::std::string& value) {
  set_has_m_buffname();
  if (m_buffname_ == &::google::protobuf::internal::kEmptyString) {
    m_buffname_ = new ::std::string;
  }
  m_buffname_->assign(value);
}
inline void E_SkillBuff::set_m_buffname(const char* value) {
  set_has_m_buffname();
  if (m_buffname_ == &::google::protobuf::internal::kEmptyString) {
    m_buffname_ = new ::std::string;
  }
  m_buffname_->assign(value);
}
inline void E_SkillBuff::set_m_buffname(const char* value, size_t size) {
  set_has_m_buffname();
  if (m_buffname_ == &::google::protobuf::internal::kEmptyString) {
    m_buffname_ = new ::std::string;
  }
  m_buffname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_buffname() {
  set_has_m_buffname();
  if (m_buffname_ == &::google::protobuf::internal::kEmptyString) {
    m_buffname_ = new ::std::string;
  }
  return m_buffname_;
}
inline ::std::string* E_SkillBuff::release_m_buffname() {
  clear_has_m_buffname();
  if (m_buffname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_buffname_;
    m_buffname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_buffname(::std::string* m_buffname) {
  if (m_buffname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_buffname_;
  }
  if (m_buffname) {
    set_has_m_buffname();
    m_buffname_ = m_buffname;
  } else {
    clear_has_m_buffname();
    m_buffname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_bufficon = 3;
inline bool E_SkillBuff::has_m_bufficon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillBuff::set_has_m_bufficon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillBuff::clear_has_m_bufficon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillBuff::clear_m_bufficon() {
  if (m_bufficon_ != &::google::protobuf::internal::kEmptyString) {
    m_bufficon_->clear();
  }
  clear_has_m_bufficon();
}
inline const ::std::string& E_SkillBuff::m_bufficon() const {
  return *m_bufficon_;
}
inline void E_SkillBuff::set_m_bufficon(const ::std::string& value) {
  set_has_m_bufficon();
  if (m_bufficon_ == &::google::protobuf::internal::kEmptyString) {
    m_bufficon_ = new ::std::string;
  }
  m_bufficon_->assign(value);
}
inline void E_SkillBuff::set_m_bufficon(const char* value) {
  set_has_m_bufficon();
  if (m_bufficon_ == &::google::protobuf::internal::kEmptyString) {
    m_bufficon_ = new ::std::string;
  }
  m_bufficon_->assign(value);
}
inline void E_SkillBuff::set_m_bufficon(const char* value, size_t size) {
  set_has_m_bufficon();
  if (m_bufficon_ == &::google::protobuf::internal::kEmptyString) {
    m_bufficon_ = new ::std::string;
  }
  m_bufficon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_bufficon() {
  set_has_m_bufficon();
  if (m_bufficon_ == &::google::protobuf::internal::kEmptyString) {
    m_bufficon_ = new ::std::string;
  }
  return m_bufficon_;
}
inline ::std::string* E_SkillBuff::release_m_bufficon() {
  clear_has_m_bufficon();
  if (m_bufficon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_bufficon_;
    m_bufficon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_bufficon(::std::string* m_bufficon) {
  if (m_bufficon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_bufficon_;
  }
  if (m_bufficon) {
    set_has_m_bufficon();
    m_bufficon_ = m_bufficon;
  } else {
    clear_has_m_bufficon();
    m_bufficon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_effectresources = 4;
inline bool E_SkillBuff::has_m_effectresources() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_SkillBuff::set_has_m_effectresources() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_SkillBuff::clear_has_m_effectresources() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_SkillBuff::clear_m_effectresources() {
  if (m_effectresources_ != &::google::protobuf::internal::kEmptyString) {
    m_effectresources_->clear();
  }
  clear_has_m_effectresources();
}
inline const ::std::string& E_SkillBuff::m_effectresources() const {
  return *m_effectresources_;
}
inline void E_SkillBuff::set_m_effectresources(const ::std::string& value) {
  set_has_m_effectresources();
  if (m_effectresources_ == &::google::protobuf::internal::kEmptyString) {
    m_effectresources_ = new ::std::string;
  }
  m_effectresources_->assign(value);
}
inline void E_SkillBuff::set_m_effectresources(const char* value) {
  set_has_m_effectresources();
  if (m_effectresources_ == &::google::protobuf::internal::kEmptyString) {
    m_effectresources_ = new ::std::string;
  }
  m_effectresources_->assign(value);
}
inline void E_SkillBuff::set_m_effectresources(const char* value, size_t size) {
  set_has_m_effectresources();
  if (m_effectresources_ == &::google::protobuf::internal::kEmptyString) {
    m_effectresources_ = new ::std::string;
  }
  m_effectresources_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_effectresources() {
  set_has_m_effectresources();
  if (m_effectresources_ == &::google::protobuf::internal::kEmptyString) {
    m_effectresources_ = new ::std::string;
  }
  return m_effectresources_;
}
inline ::std::string* E_SkillBuff::release_m_effectresources() {
  clear_has_m_effectresources();
  if (m_effectresources_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_effectresources_;
    m_effectresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_effectresources(::std::string* m_effectresources) {
  if (m_effectresources_ != &::google::protobuf::internal::kEmptyString) {
    delete m_effectresources_;
  }
  if (m_effectresources) {
    set_has_m_effectresources();
    m_effectresources_ = m_effectresources;
  } else {
    clear_has_m_effectresources();
    m_effectresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_showtpye = 5;
inline bool E_SkillBuff::has_m_showtpye() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_SkillBuff::set_has_m_showtpye() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_SkillBuff::clear_has_m_showtpye() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_SkillBuff::clear_m_showtpye() {
  m_showtpye_ = 0;
  clear_has_m_showtpye();
}
inline ::google::protobuf::int32 E_SkillBuff::m_showtpye() const {
  return m_showtpye_;
}
inline void E_SkillBuff::set_m_showtpye(::google::protobuf::int32 value) {
  set_has_m_showtpye();
  m_showtpye_ = value;
}

// optional int32 m_startprobability = 6;
inline bool E_SkillBuff::has_m_startprobability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_SkillBuff::set_has_m_startprobability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_SkillBuff::clear_has_m_startprobability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_SkillBuff::clear_m_startprobability() {
  m_startprobability_ = 0;
  clear_has_m_startprobability();
}
inline ::google::protobuf::int32 E_SkillBuff::m_startprobability() const {
  return m_startprobability_;
}
inline void E_SkillBuff::set_m_startprobability(::google::protobuf::int32 value) {
  set_has_m_startprobability();
  m_startprobability_ = value;
}

// optional int32 m_probability_up = 7;
inline bool E_SkillBuff::has_m_probability_up() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_SkillBuff::set_has_m_probability_up() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_SkillBuff::clear_has_m_probability_up() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_SkillBuff::clear_m_probability_up() {
  m_probability_up_ = 0;
  clear_has_m_probability_up();
}
inline ::google::protobuf::int32 E_SkillBuff::m_probability_up() const {
  return m_probability_up_;
}
inline void E_SkillBuff::set_m_probability_up(::google::protobuf::int32 value) {
  set_has_m_probability_up();
  m_probability_up_ = value;
}

// optional int32 m_starttype = 8;
inline bool E_SkillBuff::has_m_starttype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_SkillBuff::set_has_m_starttype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_SkillBuff::clear_has_m_starttype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_SkillBuff::clear_m_starttype() {
  m_starttype_ = 0;
  clear_has_m_starttype();
}
inline ::google::protobuf::int32 E_SkillBuff::m_starttype() const {
  return m_starttype_;
}
inline void E_SkillBuff::set_m_starttype(::google::protobuf::int32 value) {
  set_has_m_starttype();
  m_starttype_ = value;
}

// optional string m_starttypevalue = 9;
inline bool E_SkillBuff::has_m_starttypevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_SkillBuff::set_has_m_starttypevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_SkillBuff::clear_has_m_starttypevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_SkillBuff::clear_m_starttypevalue() {
  if (m_starttypevalue_ != &::google::protobuf::internal::kEmptyString) {
    m_starttypevalue_->clear();
  }
  clear_has_m_starttypevalue();
}
inline const ::std::string& E_SkillBuff::m_starttypevalue() const {
  return *m_starttypevalue_;
}
inline void E_SkillBuff::set_m_starttypevalue(const ::std::string& value) {
  set_has_m_starttypevalue();
  if (m_starttypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_starttypevalue_ = new ::std::string;
  }
  m_starttypevalue_->assign(value);
}
inline void E_SkillBuff::set_m_starttypevalue(const char* value) {
  set_has_m_starttypevalue();
  if (m_starttypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_starttypevalue_ = new ::std::string;
  }
  m_starttypevalue_->assign(value);
}
inline void E_SkillBuff::set_m_starttypevalue(const char* value, size_t size) {
  set_has_m_starttypevalue();
  if (m_starttypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_starttypevalue_ = new ::std::string;
  }
  m_starttypevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_starttypevalue() {
  set_has_m_starttypevalue();
  if (m_starttypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_starttypevalue_ = new ::std::string;
  }
  return m_starttypevalue_;
}
inline ::std::string* E_SkillBuff::release_m_starttypevalue() {
  clear_has_m_starttypevalue();
  if (m_starttypevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_starttypevalue_;
    m_starttypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_starttypevalue(::std::string* m_starttypevalue) {
  if (m_starttypevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starttypevalue_;
  }
  if (m_starttypevalue) {
    set_has_m_starttypevalue();
    m_starttypevalue_ = m_starttypevalue;
  } else {
    clear_has_m_starttypevalue();
    m_starttypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_endtype = 10;
inline bool E_SkillBuff::has_m_endtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_SkillBuff::set_has_m_endtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_SkillBuff::clear_has_m_endtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_SkillBuff::clear_m_endtype() {
  m_endtype_ = 0;
  clear_has_m_endtype();
}
inline ::google::protobuf::int32 E_SkillBuff::m_endtype() const {
  return m_endtype_;
}
inline void E_SkillBuff::set_m_endtype(::google::protobuf::int32 value) {
  set_has_m_endtype();
  m_endtype_ = value;
}

// optional string m_endtypevalue = 11;
inline bool E_SkillBuff::has_m_endtypevalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_SkillBuff::set_has_m_endtypevalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_SkillBuff::clear_has_m_endtypevalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_SkillBuff::clear_m_endtypevalue() {
  if (m_endtypevalue_ != &::google::protobuf::internal::kEmptyString) {
    m_endtypevalue_->clear();
  }
  clear_has_m_endtypevalue();
}
inline const ::std::string& E_SkillBuff::m_endtypevalue() const {
  return *m_endtypevalue_;
}
inline void E_SkillBuff::set_m_endtypevalue(const ::std::string& value) {
  set_has_m_endtypevalue();
  if (m_endtypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalue_ = new ::std::string;
  }
  m_endtypevalue_->assign(value);
}
inline void E_SkillBuff::set_m_endtypevalue(const char* value) {
  set_has_m_endtypevalue();
  if (m_endtypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalue_ = new ::std::string;
  }
  m_endtypevalue_->assign(value);
}
inline void E_SkillBuff::set_m_endtypevalue(const char* value, size_t size) {
  set_has_m_endtypevalue();
  if (m_endtypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalue_ = new ::std::string;
  }
  m_endtypevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_endtypevalue() {
  set_has_m_endtypevalue();
  if (m_endtypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalue_ = new ::std::string;
  }
  return m_endtypevalue_;
}
inline ::std::string* E_SkillBuff::release_m_endtypevalue() {
  clear_has_m_endtypevalue();
  if (m_endtypevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_endtypevalue_;
    m_endtypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_endtypevalue(::std::string* m_endtypevalue) {
  if (m_endtypevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_endtypevalue_;
  }
  if (m_endtypevalue) {
    set_has_m_endtypevalue();
    m_endtypevalue_ = m_endtypevalue;
  } else {
    clear_has_m_endtypevalue();
    m_endtypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_endtypea = 12;
inline bool E_SkillBuff::has_m_endtypea() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_SkillBuff::set_has_m_endtypea() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_SkillBuff::clear_has_m_endtypea() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_SkillBuff::clear_m_endtypea() {
  m_endtypea_ = 0;
  clear_has_m_endtypea();
}
inline ::google::protobuf::int32 E_SkillBuff::m_endtypea() const {
  return m_endtypea_;
}
inline void E_SkillBuff::set_m_endtypea(::google::protobuf::int32 value) {
  set_has_m_endtypea();
  m_endtypea_ = value;
}

// optional string m_endtypevaluea = 13;
inline bool E_SkillBuff::has_m_endtypevaluea() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_SkillBuff::set_has_m_endtypevaluea() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_SkillBuff::clear_has_m_endtypevaluea() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_SkillBuff::clear_m_endtypevaluea() {
  if (m_endtypevaluea_ != &::google::protobuf::internal::kEmptyString) {
    m_endtypevaluea_->clear();
  }
  clear_has_m_endtypevaluea();
}
inline const ::std::string& E_SkillBuff::m_endtypevaluea() const {
  return *m_endtypevaluea_;
}
inline void E_SkillBuff::set_m_endtypevaluea(const ::std::string& value) {
  set_has_m_endtypevaluea();
  if (m_endtypevaluea_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevaluea_ = new ::std::string;
  }
  m_endtypevaluea_->assign(value);
}
inline void E_SkillBuff::set_m_endtypevaluea(const char* value) {
  set_has_m_endtypevaluea();
  if (m_endtypevaluea_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevaluea_ = new ::std::string;
  }
  m_endtypevaluea_->assign(value);
}
inline void E_SkillBuff::set_m_endtypevaluea(const char* value, size_t size) {
  set_has_m_endtypevaluea();
  if (m_endtypevaluea_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevaluea_ = new ::std::string;
  }
  m_endtypevaluea_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_endtypevaluea() {
  set_has_m_endtypevaluea();
  if (m_endtypevaluea_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevaluea_ = new ::std::string;
  }
  return m_endtypevaluea_;
}
inline ::std::string* E_SkillBuff::release_m_endtypevaluea() {
  clear_has_m_endtypevaluea();
  if (m_endtypevaluea_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_endtypevaluea_;
    m_endtypevaluea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_endtypevaluea(::std::string* m_endtypevaluea) {
  if (m_endtypevaluea_ != &::google::protobuf::internal::kEmptyString) {
    delete m_endtypevaluea_;
  }
  if (m_endtypevaluea) {
    set_has_m_endtypevaluea();
    m_endtypevaluea_ = m_endtypevaluea;
  } else {
    clear_has_m_endtypevaluea();
    m_endtypevaluea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_endtypeb = 14;
inline bool E_SkillBuff::has_m_endtypeb() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_SkillBuff::set_has_m_endtypeb() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_SkillBuff::clear_has_m_endtypeb() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_SkillBuff::clear_m_endtypeb() {
  m_endtypeb_ = 0;
  clear_has_m_endtypeb();
}
inline ::google::protobuf::int32 E_SkillBuff::m_endtypeb() const {
  return m_endtypeb_;
}
inline void E_SkillBuff::set_m_endtypeb(::google::protobuf::int32 value) {
  set_has_m_endtypeb();
  m_endtypeb_ = value;
}

// optional string m_endtypevalueb = 15;
inline bool E_SkillBuff::has_m_endtypevalueb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_SkillBuff::set_has_m_endtypevalueb() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_SkillBuff::clear_has_m_endtypevalueb() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_SkillBuff::clear_m_endtypevalueb() {
  if (m_endtypevalueb_ != &::google::protobuf::internal::kEmptyString) {
    m_endtypevalueb_->clear();
  }
  clear_has_m_endtypevalueb();
}
inline const ::std::string& E_SkillBuff::m_endtypevalueb() const {
  return *m_endtypevalueb_;
}
inline void E_SkillBuff::set_m_endtypevalueb(const ::std::string& value) {
  set_has_m_endtypevalueb();
  if (m_endtypevalueb_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalueb_ = new ::std::string;
  }
  m_endtypevalueb_->assign(value);
}
inline void E_SkillBuff::set_m_endtypevalueb(const char* value) {
  set_has_m_endtypevalueb();
  if (m_endtypevalueb_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalueb_ = new ::std::string;
  }
  m_endtypevalueb_->assign(value);
}
inline void E_SkillBuff::set_m_endtypevalueb(const char* value, size_t size) {
  set_has_m_endtypevalueb();
  if (m_endtypevalueb_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalueb_ = new ::std::string;
  }
  m_endtypevalueb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_endtypevalueb() {
  set_has_m_endtypevalueb();
  if (m_endtypevalueb_ == &::google::protobuf::internal::kEmptyString) {
    m_endtypevalueb_ = new ::std::string;
  }
  return m_endtypevalueb_;
}
inline ::std::string* E_SkillBuff::release_m_endtypevalueb() {
  clear_has_m_endtypevalueb();
  if (m_endtypevalueb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_endtypevalueb_;
    m_endtypevalueb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_endtypevalueb(::std::string* m_endtypevalueb) {
  if (m_endtypevalueb_ != &::google::protobuf::internal::kEmptyString) {
    delete m_endtypevalueb_;
  }
  if (m_endtypevalueb) {
    set_has_m_endtypevalueb();
    m_endtypevalueb_ = m_endtypevalueb;
  } else {
    clear_has_m_endtypevalueb();
    m_endtypevalueb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_group = 16;
inline bool E_SkillBuff::has_m_group() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_SkillBuff::set_has_m_group() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_SkillBuff::clear_has_m_group() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_SkillBuff::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_SkillBuff::m_group() const {
  return m_group_;
}
inline void E_SkillBuff::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional string m_buffrule = 17;
inline bool E_SkillBuff::has_m_buffrule() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_SkillBuff::set_has_m_buffrule() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_SkillBuff::clear_has_m_buffrule() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_SkillBuff::clear_m_buffrule() {
  if (m_buffrule_ != &::google::protobuf::internal::kEmptyString) {
    m_buffrule_->clear();
  }
  clear_has_m_buffrule();
}
inline const ::std::string& E_SkillBuff::m_buffrule() const {
  return *m_buffrule_;
}
inline void E_SkillBuff::set_m_buffrule(const ::std::string& value) {
  set_has_m_buffrule();
  if (m_buffrule_ == &::google::protobuf::internal::kEmptyString) {
    m_buffrule_ = new ::std::string;
  }
  m_buffrule_->assign(value);
}
inline void E_SkillBuff::set_m_buffrule(const char* value) {
  set_has_m_buffrule();
  if (m_buffrule_ == &::google::protobuf::internal::kEmptyString) {
    m_buffrule_ = new ::std::string;
  }
  m_buffrule_->assign(value);
}
inline void E_SkillBuff::set_m_buffrule(const char* value, size_t size) {
  set_has_m_buffrule();
  if (m_buffrule_ == &::google::protobuf::internal::kEmptyString) {
    m_buffrule_ = new ::std::string;
  }
  m_buffrule_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_buffrule() {
  set_has_m_buffrule();
  if (m_buffrule_ == &::google::protobuf::internal::kEmptyString) {
    m_buffrule_ = new ::std::string;
  }
  return m_buffrule_;
}
inline ::std::string* E_SkillBuff::release_m_buffrule() {
  clear_has_m_buffrule();
  if (m_buffrule_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_buffrule_;
    m_buffrule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_buffrule(::std::string* m_buffrule) {
  if (m_buffrule_ != &::google::protobuf::internal::kEmptyString) {
    delete m_buffrule_;
  }
  if (m_buffrule) {
    set_has_m_buffrule();
    m_buffrule_ = m_buffrule;
  } else {
    clear_has_m_buffrule();
    m_buffrule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_immune = 18;
inline bool E_SkillBuff::has_m_immune() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_SkillBuff::set_has_m_immune() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_SkillBuff::clear_has_m_immune() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_SkillBuff::clear_m_immune() {
  if (m_immune_ != &::google::protobuf::internal::kEmptyString) {
    m_immune_->clear();
  }
  clear_has_m_immune();
}
inline const ::std::string& E_SkillBuff::m_immune() const {
  return *m_immune_;
}
inline void E_SkillBuff::set_m_immune(const ::std::string& value) {
  set_has_m_immune();
  if (m_immune_ == &::google::protobuf::internal::kEmptyString) {
    m_immune_ = new ::std::string;
  }
  m_immune_->assign(value);
}
inline void E_SkillBuff::set_m_immune(const char* value) {
  set_has_m_immune();
  if (m_immune_ == &::google::protobuf::internal::kEmptyString) {
    m_immune_ = new ::std::string;
  }
  m_immune_->assign(value);
}
inline void E_SkillBuff::set_m_immune(const char* value, size_t size) {
  set_has_m_immune();
  if (m_immune_ == &::google::protobuf::internal::kEmptyString) {
    m_immune_ = new ::std::string;
  }
  m_immune_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_immune() {
  set_has_m_immune();
  if (m_immune_ == &::google::protobuf::internal::kEmptyString) {
    m_immune_ = new ::std::string;
  }
  return m_immune_;
}
inline ::std::string* E_SkillBuff::release_m_immune() {
  clear_has_m_immune();
  if (m_immune_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_immune_;
    m_immune_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_immune(::std::string* m_immune) {
  if (m_immune_ != &::google::protobuf::internal::kEmptyString) {
    delete m_immune_;
  }
  if (m_immune) {
    set_has_m_immune();
    m_immune_ = m_immune;
  } else {
    clear_has_m_immune();
    m_immune_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_dispel = 19;
inline bool E_SkillBuff::has_m_dispel() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_SkillBuff::set_has_m_dispel() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_SkillBuff::clear_has_m_dispel() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_SkillBuff::clear_m_dispel() {
  if (m_dispel_ != &::google::protobuf::internal::kEmptyString) {
    m_dispel_->clear();
  }
  clear_has_m_dispel();
}
inline const ::std::string& E_SkillBuff::m_dispel() const {
  return *m_dispel_;
}
inline void E_SkillBuff::set_m_dispel(const ::std::string& value) {
  set_has_m_dispel();
  if (m_dispel_ == &::google::protobuf::internal::kEmptyString) {
    m_dispel_ = new ::std::string;
  }
  m_dispel_->assign(value);
}
inline void E_SkillBuff::set_m_dispel(const char* value) {
  set_has_m_dispel();
  if (m_dispel_ == &::google::protobuf::internal::kEmptyString) {
    m_dispel_ = new ::std::string;
  }
  m_dispel_->assign(value);
}
inline void E_SkillBuff::set_m_dispel(const char* value, size_t size) {
  set_has_m_dispel();
  if (m_dispel_ == &::google::protobuf::internal::kEmptyString) {
    m_dispel_ = new ::std::string;
  }
  m_dispel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_dispel() {
  set_has_m_dispel();
  if (m_dispel_ == &::google::protobuf::internal::kEmptyString) {
    m_dispel_ = new ::std::string;
  }
  return m_dispel_;
}
inline ::std::string* E_SkillBuff::release_m_dispel() {
  clear_has_m_dispel();
  if (m_dispel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_dispel_;
    m_dispel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_dispel(::std::string* m_dispel) {
  if (m_dispel_ != &::google::protobuf::internal::kEmptyString) {
    delete m_dispel_;
  }
  if (m_dispel) {
    set_has_m_dispel();
    m_dispel_ = m_dispel;
  } else {
    clear_has_m_dispel();
    m_dispel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_buffcd = 20;
inline bool E_SkillBuff::has_m_buffcd() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_SkillBuff::set_has_m_buffcd() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_SkillBuff::clear_has_m_buffcd() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_SkillBuff::clear_m_buffcd() {
  m_buffcd_ = 0;
  clear_has_m_buffcd();
}
inline ::google::protobuf::int32 E_SkillBuff::m_buffcd() const {
  return m_buffcd_;
}
inline void E_SkillBuff::set_m_buffcd(::google::protobuf::int32 value) {
  set_has_m_buffcd();
  m_buffcd_ = value;
}

// optional int32 m_effect_time = 21;
inline bool E_SkillBuff::has_m_effect_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_SkillBuff::set_has_m_effect_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_SkillBuff::clear_has_m_effect_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_SkillBuff::clear_m_effect_time() {
  m_effect_time_ = 0;
  clear_has_m_effect_time();
}
inline ::google::protobuf::int32 E_SkillBuff::m_effect_time() const {
  return m_effect_time_;
}
inline void E_SkillBuff::set_m_effect_time(::google::protobuf::int32 value) {
  set_has_m_effect_time();
  m_effect_time_ = value;
}

// optional int32 m_effect_type = 22;
inline bool E_SkillBuff::has_m_effect_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_SkillBuff::set_has_m_effect_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_SkillBuff::clear_has_m_effect_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_SkillBuff::clear_m_effect_type() {
  m_effect_type_ = 0;
  clear_has_m_effect_type();
}
inline ::google::protobuf::int32 E_SkillBuff::m_effect_type() const {
  return m_effect_type_;
}
inline void E_SkillBuff::set_m_effect_type(::google::protobuf::int32 value) {
  set_has_m_effect_type();
  m_effect_type_ = value;
}

// optional string m_effect_param = 23;
inline bool E_SkillBuff::has_m_effect_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_SkillBuff::set_has_m_effect_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_SkillBuff::clear_has_m_effect_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_SkillBuff::clear_m_effect_param() {
  if (m_effect_param_ != &::google::protobuf::internal::kEmptyString) {
    m_effect_param_->clear();
  }
  clear_has_m_effect_param();
}
inline const ::std::string& E_SkillBuff::m_effect_param() const {
  return *m_effect_param_;
}
inline void E_SkillBuff::set_m_effect_param(const ::std::string& value) {
  set_has_m_effect_param();
  if (m_effect_param_ == &::google::protobuf::internal::kEmptyString) {
    m_effect_param_ = new ::std::string;
  }
  m_effect_param_->assign(value);
}
inline void E_SkillBuff::set_m_effect_param(const char* value) {
  set_has_m_effect_param();
  if (m_effect_param_ == &::google::protobuf::internal::kEmptyString) {
    m_effect_param_ = new ::std::string;
  }
  m_effect_param_->assign(value);
}
inline void E_SkillBuff::set_m_effect_param(const char* value, size_t size) {
  set_has_m_effect_param();
  if (m_effect_param_ == &::google::protobuf::internal::kEmptyString) {
    m_effect_param_ = new ::std::string;
  }
  m_effect_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillBuff::mutable_m_effect_param() {
  set_has_m_effect_param();
  if (m_effect_param_ == &::google::protobuf::internal::kEmptyString) {
    m_effect_param_ = new ::std::string;
  }
  return m_effect_param_;
}
inline ::std::string* E_SkillBuff::release_m_effect_param() {
  clear_has_m_effect_param();
  if (m_effect_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_effect_param_;
    m_effect_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillBuff::set_allocated_m_effect_param(::std::string* m_effect_param) {
  if (m_effect_param_ != &::google::protobuf::internal::kEmptyString) {
    delete m_effect_param_;
  }
  if (m_effect_param) {
    set_has_m_effect_param();
    m_effect_param_ = m_effect_param;
  } else {
    clear_has_m_effect_param();
    m_effect_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_effect_up = 24;
inline bool E_SkillBuff::has_m_effect_up() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_SkillBuff::set_has_m_effect_up() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_SkillBuff::clear_has_m_effect_up() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_SkillBuff::clear_m_effect_up() {
  m_effect_up_ = 0;
  clear_has_m_effect_up();
}
inline ::google::protobuf::int32 E_SkillBuff::m_effect_up() const {
  return m_effect_up_;
}
inline void E_SkillBuff::set_m_effect_up(::google::protobuf::int32 value) {
  set_has_m_effect_up();
  m_effect_up_ = value;
}

// -------------------------------------------------------------------

// Sheet_SkillBuff

// repeated .proto_ff.E_SkillBuff E_SkillBuff_List = 1;
inline int Sheet_SkillBuff::e_skillbuff_list_size() const {
  return e_skillbuff_list_.size();
}
inline void Sheet_SkillBuff::clear_e_skillbuff_list() {
  e_skillbuff_list_.Clear();
}
inline const ::proto_ff::E_SkillBuff& Sheet_SkillBuff::e_skillbuff_list(int index) const {
  return e_skillbuff_list_.Get(index);
}
inline ::proto_ff::E_SkillBuff* Sheet_SkillBuff::mutable_e_skillbuff_list(int index) {
  return e_skillbuff_list_.Mutable(index);
}
inline ::proto_ff::E_SkillBuff* Sheet_SkillBuff::add_e_skillbuff_list() {
  return e_skillbuff_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuff >&
Sheet_SkillBuff::e_skillbuff_list() const {
  return e_skillbuff_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuff >*
Sheet_SkillBuff::mutable_e_skillbuff_list() {
  return &e_skillbuff_list_;
}

// -------------------------------------------------------------------

// E_SkillBuffup

// optional int32 m_id = 1;
inline bool E_SkillBuffup::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillBuffup::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillBuffup::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillBuffup::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SkillBuffup::m_id() const {
  return m_id_;
}
inline void E_SkillBuffup::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_addstartprobability = 2;
inline bool E_SkillBuffup::has_m_addstartprobability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillBuffup::set_has_m_addstartprobability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillBuffup::clear_has_m_addstartprobability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillBuffup::clear_m_addstartprobability() {
  m_addstartprobability_ = 0;
  clear_has_m_addstartprobability();
}
inline ::google::protobuf::int32 E_SkillBuffup::m_addstartprobability() const {
  return m_addstartprobability_;
}
inline void E_SkillBuffup::set_m_addstartprobability(::google::protobuf::int32 value) {
  set_has_m_addstartprobability();
  m_addstartprobability_ = value;
}

// optional int32 m_attributeid = 3;
inline bool E_SkillBuffup::has_m_attributeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillBuffup::set_has_m_attributeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillBuffup::clear_has_m_attributeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillBuffup::clear_m_attributeid() {
  m_attributeid_ = 0;
  clear_has_m_attributeid();
}
inline ::google::protobuf::int32 E_SkillBuffup::m_attributeid() const {
  return m_attributeid_;
}
inline void E_SkillBuffup::set_m_attributeid(::google::protobuf::int32 value) {
  set_has_m_attributeid();
  m_attributeid_ = value;
}

// optional int32 m_parama = 4;
inline bool E_SkillBuffup::has_m_parama() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_SkillBuffup::set_has_m_parama() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_SkillBuffup::clear_has_m_parama() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_SkillBuffup::clear_m_parama() {
  m_parama_ = 0;
  clear_has_m_parama();
}
inline ::google::protobuf::int32 E_SkillBuffup::m_parama() const {
  return m_parama_;
}
inline void E_SkillBuffup::set_m_parama(::google::protobuf::int32 value) {
  set_has_m_parama();
  m_parama_ = value;
}

// -------------------------------------------------------------------

// Sheet_SkillBuffup

// repeated .proto_ff.E_SkillBuffup E_SkillBuffup_List = 1;
inline int Sheet_SkillBuffup::e_skillbuffup_list_size() const {
  return e_skillbuffup_list_.size();
}
inline void Sheet_SkillBuffup::clear_e_skillbuffup_list() {
  e_skillbuffup_list_.Clear();
}
inline const ::proto_ff::E_SkillBuffup& Sheet_SkillBuffup::e_skillbuffup_list(int index) const {
  return e_skillbuffup_list_.Get(index);
}
inline ::proto_ff::E_SkillBuffup* Sheet_SkillBuffup::mutable_e_skillbuffup_list(int index) {
  return e_skillbuffup_list_.Mutable(index);
}
inline ::proto_ff::E_SkillBuffup* Sheet_SkillBuffup::add_e_skillbuffup_list() {
  return e_skillbuffup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuffup >&
Sheet_SkillBuffup::e_skillbuffup_list() const {
  return e_skillbuffup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillBuffup >*
Sheet_SkillBuffup::mutable_e_skillbuffup_list() {
  return &e_skillbuffup_list_;
}

// -------------------------------------------------------------------

// E_SkillSkillBuffDesc

// optional int32 m_target = 1;
inline bool E_SkillSkillBuffDesc::has_m_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillBuffDesc::set_has_m_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillBuffDesc::clear_has_m_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillBuffDesc::clear_m_target() {
  m_target_ = 0;
  clear_has_m_target();
}
inline ::google::protobuf::int32 E_SkillSkillBuffDesc::m_target() const {
  return m_target_;
}
inline void E_SkillSkillBuffDesc::set_m_target(::google::protobuf::int32 value) {
  set_has_m_target();
  m_target_ = value;
}

// optional int32 m_point = 2;
inline bool E_SkillSkillBuffDesc::has_m_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkillBuffDesc::set_has_m_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkillBuffDesc::clear_has_m_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkillBuffDesc::clear_m_point() {
  m_point_ = 0;
  clear_has_m_point();
}
inline ::google::protobuf::int32 E_SkillSkillBuffDesc::m_point() const {
  return m_point_;
}
inline void E_SkillSkillBuffDesc::set_m_point(::google::protobuf::int32 value) {
  set_has_m_point();
  m_point_ = value;
}

// optional int64 m_id = 3;
inline bool E_SkillSkillBuffDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillSkillBuffDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillSkillBuffDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillSkillBuffDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_SkillSkillBuffDesc::m_id() const {
  return m_id_;
}
inline void E_SkillSkillBuffDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_SkillSkillAwakebuffDesc

// optional int64 m_id = 1;
inline bool E_SkillSkillAwakebuffDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillAwakebuffDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillAwakebuffDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillAwakebuffDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_SkillSkillAwakebuffDesc::m_id() const {
  return m_id_;
}
inline void E_SkillSkillAwakebuffDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_SkillSkillAdvancetype1buffDesc

// optional int64 m_id = 1;
inline bool E_SkillSkillAdvancetype1buffDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillAdvancetype1buffDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillAdvancetype1buffDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillAdvancetype1buffDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_SkillSkillAdvancetype1buffDesc::m_id() const {
  return m_id_;
}
inline void E_SkillSkillAdvancetype1buffDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_SkillSkillAdvancetype2buffDesc

// optional int64 m_id = 1;
inline bool E_SkillSkillAdvancetype2buffDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillAdvancetype2buffDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillAdvancetype2buffDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillAdvancetype2buffDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_SkillSkillAdvancetype2buffDesc::m_id() const {
  return m_id_;
}
inline void E_SkillSkillAdvancetype2buffDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_SkillSkillAdvancetype3buffDesc

// optional int64 m_id = 1;
inline bool E_SkillSkillAdvancetype3buffDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillAdvancetype3buffDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillAdvancetype3buffDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillAdvancetype3buffDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_SkillSkillAdvancetype3buffDesc::m_id() const {
  return m_id_;
}
inline void E_SkillSkillAdvancetype3buffDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_SkillSkill

// optional int64 m_skillid = 1;
inline bool E_SkillSkill::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkill::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkill::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkill::clear_m_skillid() {
  m_skillid_ = GOOGLE_LONGLONG(0);
  clear_has_m_skillid();
}
inline ::google::protobuf::int64 E_SkillSkill::m_skillid() const {
  return m_skillid_;
}
inline void E_SkillSkill::set_m_skillid(::google::protobuf::int64 value) {
  set_has_m_skillid();
  m_skillid_ = value;
}

// optional string m_name = 2;
inline bool E_SkillSkill::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkill::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkill::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkill::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_SkillSkill::m_name() const {
  return *m_name_;
}
inline void E_SkillSkill::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_SkillSkill::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_SkillSkill::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_SkillSkill::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_skilltype = 3;
inline bool E_SkillSkill::has_m_skilltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillSkill::set_has_m_skilltype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillSkill::clear_has_m_skilltype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillSkill::clear_m_skilltype() {
  m_skilltype_ = 0;
  clear_has_m_skilltype();
}
inline ::google::protobuf::int32 E_SkillSkill::m_skilltype() const {
  return m_skilltype_;
}
inline void E_SkillSkill::set_m_skilltype(::google::protobuf::int32 value) {
  set_has_m_skilltype();
  m_skilltype_ = value;
}

// optional int32 m_group = 4;
inline bool E_SkillSkill::has_m_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_SkillSkill::set_has_m_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_SkillSkill::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_SkillSkill::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_SkillSkill::m_group() const {
  return m_group_;
}
inline void E_SkillSkill::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional int32 m_position = 5;
inline bool E_SkillSkill::has_m_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_SkillSkill::set_has_m_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_SkillSkill::clear_has_m_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_SkillSkill::clear_m_position() {
  m_position_ = 0;
  clear_has_m_position();
}
inline ::google::protobuf::int32 E_SkillSkill::m_position() const {
  return m_position_;
}
inline void E_SkillSkill::set_m_position(::google::protobuf::int32 value) {
  set_has_m_position();
  m_position_ = value;
}

// optional int32 m_displacetime = 6;
inline bool E_SkillSkill::has_m_displacetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_SkillSkill::set_has_m_displacetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_SkillSkill::clear_has_m_displacetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_SkillSkill::clear_m_displacetime() {
  m_displacetime_ = 0;
  clear_has_m_displacetime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_displacetime() const {
  return m_displacetime_;
}
inline void E_SkillSkill::set_m_displacetime(::google::protobuf::int32 value) {
  set_has_m_displacetime();
  m_displacetime_ = value;
}

// optional int32 m_displacesign = 7;
inline bool E_SkillSkill::has_m_displacesign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_SkillSkill::set_has_m_displacesign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_SkillSkill::clear_has_m_displacesign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_SkillSkill::clear_m_displacesign() {
  m_displacesign_ = 0;
  clear_has_m_displacesign();
}
inline ::google::protobuf::int32 E_SkillSkill::m_displacesign() const {
  return m_displacesign_;
}
inline void E_SkillSkill::set_m_displacesign(::google::protobuf::int32 value) {
  set_has_m_displacesign();
  m_displacesign_ = value;
}

// optional string m_displacespeed = 8;
inline bool E_SkillSkill::has_m_displacespeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_SkillSkill::set_has_m_displacespeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_SkillSkill::clear_has_m_displacespeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_SkillSkill::clear_m_displacespeed() {
  if (m_displacespeed_ != &::google::protobuf::internal::kEmptyString) {
    m_displacespeed_->clear();
  }
  clear_has_m_displacespeed();
}
inline const ::std::string& E_SkillSkill::m_displacespeed() const {
  return *m_displacespeed_;
}
inline void E_SkillSkill::set_m_displacespeed(const ::std::string& value) {
  set_has_m_displacespeed();
  if (m_displacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_displacespeed_ = new ::std::string;
  }
  m_displacespeed_->assign(value);
}
inline void E_SkillSkill::set_m_displacespeed(const char* value) {
  set_has_m_displacespeed();
  if (m_displacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_displacespeed_ = new ::std::string;
  }
  m_displacespeed_->assign(value);
}
inline void E_SkillSkill::set_m_displacespeed(const char* value, size_t size) {
  set_has_m_displacespeed();
  if (m_displacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_displacespeed_ = new ::std::string;
  }
  m_displacespeed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_displacespeed() {
  set_has_m_displacespeed();
  if (m_displacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_displacespeed_ = new ::std::string;
  }
  return m_displacespeed_;
}
inline ::std::string* E_SkillSkill::release_m_displacespeed() {
  clear_has_m_displacespeed();
  if (m_displacespeed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_displacespeed_;
    m_displacespeed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_displacespeed(::std::string* m_displacespeed) {
  if (m_displacespeed_ != &::google::protobuf::internal::kEmptyString) {
    delete m_displacespeed_;
  }
  if (m_displacespeed) {
    set_has_m_displacespeed();
    m_displacespeed_ = m_displacespeed;
  } else {
    clear_has_m_displacespeed();
    m_displacespeed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_distimes = 9;
inline bool E_SkillSkill::has_m_distimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_SkillSkill::set_has_m_distimes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_SkillSkill::clear_has_m_distimes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_SkillSkill::clear_m_distimes() {
  if (m_distimes_ != &::google::protobuf::internal::kEmptyString) {
    m_distimes_->clear();
  }
  clear_has_m_distimes();
}
inline const ::std::string& E_SkillSkill::m_distimes() const {
  return *m_distimes_;
}
inline void E_SkillSkill::set_m_distimes(const ::std::string& value) {
  set_has_m_distimes();
  if (m_distimes_ == &::google::protobuf::internal::kEmptyString) {
    m_distimes_ = new ::std::string;
  }
  m_distimes_->assign(value);
}
inline void E_SkillSkill::set_m_distimes(const char* value) {
  set_has_m_distimes();
  if (m_distimes_ == &::google::protobuf::internal::kEmptyString) {
    m_distimes_ = new ::std::string;
  }
  m_distimes_->assign(value);
}
inline void E_SkillSkill::set_m_distimes(const char* value, size_t size) {
  set_has_m_distimes();
  if (m_distimes_ == &::google::protobuf::internal::kEmptyString) {
    m_distimes_ = new ::std::string;
  }
  m_distimes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_distimes() {
  set_has_m_distimes();
  if (m_distimes_ == &::google::protobuf::internal::kEmptyString) {
    m_distimes_ = new ::std::string;
  }
  return m_distimes_;
}
inline ::std::string* E_SkillSkill::release_m_distimes() {
  clear_has_m_distimes();
  if (m_distimes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_distimes_;
    m_distimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_distimes(::std::string* m_distimes) {
  if (m_distimes_ != &::google::protobuf::internal::kEmptyString) {
    delete m_distimes_;
  }
  if (m_distimes) {
    set_has_m_distimes();
    m_distimes_ = m_distimes;
  } else {
    clear_has_m_distimes();
    m_distimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_targetdisplacetime = 10;
inline bool E_SkillSkill::has_m_targetdisplacetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_SkillSkill::set_has_m_targetdisplacetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_SkillSkill::clear_has_m_targetdisplacetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_SkillSkill::clear_m_targetdisplacetime() {
  m_targetdisplacetime_ = 0;
  clear_has_m_targetdisplacetime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_targetdisplacetime() const {
  return m_targetdisplacetime_;
}
inline void E_SkillSkill::set_m_targetdisplacetime(::google::protobuf::int32 value) {
  set_has_m_targetdisplacetime();
  m_targetdisplacetime_ = value;
}

// optional int32 m_targetdisplacesign = 11;
inline bool E_SkillSkill::has_m_targetdisplacesign() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_SkillSkill::set_has_m_targetdisplacesign() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_SkillSkill::clear_has_m_targetdisplacesign() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_SkillSkill::clear_m_targetdisplacesign() {
  m_targetdisplacesign_ = 0;
  clear_has_m_targetdisplacesign();
}
inline ::google::protobuf::int32 E_SkillSkill::m_targetdisplacesign() const {
  return m_targetdisplacesign_;
}
inline void E_SkillSkill::set_m_targetdisplacesign(::google::protobuf::int32 value) {
  set_has_m_targetdisplacesign();
  m_targetdisplacesign_ = value;
}

// optional string m_targetdisplacespeed = 12;
inline bool E_SkillSkill::has_m_targetdisplacespeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_SkillSkill::set_has_m_targetdisplacespeed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_SkillSkill::clear_has_m_targetdisplacespeed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_SkillSkill::clear_m_targetdisplacespeed() {
  if (m_targetdisplacespeed_ != &::google::protobuf::internal::kEmptyString) {
    m_targetdisplacespeed_->clear();
  }
  clear_has_m_targetdisplacespeed();
}
inline const ::std::string& E_SkillSkill::m_targetdisplacespeed() const {
  return *m_targetdisplacespeed_;
}
inline void E_SkillSkill::set_m_targetdisplacespeed(const ::std::string& value) {
  set_has_m_targetdisplacespeed();
  if (m_targetdisplacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdisplacespeed_ = new ::std::string;
  }
  m_targetdisplacespeed_->assign(value);
}
inline void E_SkillSkill::set_m_targetdisplacespeed(const char* value) {
  set_has_m_targetdisplacespeed();
  if (m_targetdisplacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdisplacespeed_ = new ::std::string;
  }
  m_targetdisplacespeed_->assign(value);
}
inline void E_SkillSkill::set_m_targetdisplacespeed(const char* value, size_t size) {
  set_has_m_targetdisplacespeed();
  if (m_targetdisplacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdisplacespeed_ = new ::std::string;
  }
  m_targetdisplacespeed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_targetdisplacespeed() {
  set_has_m_targetdisplacespeed();
  if (m_targetdisplacespeed_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdisplacespeed_ = new ::std::string;
  }
  return m_targetdisplacespeed_;
}
inline ::std::string* E_SkillSkill::release_m_targetdisplacespeed() {
  clear_has_m_targetdisplacespeed();
  if (m_targetdisplacespeed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_targetdisplacespeed_;
    m_targetdisplacespeed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_targetdisplacespeed(::std::string* m_targetdisplacespeed) {
  if (m_targetdisplacespeed_ != &::google::protobuf::internal::kEmptyString) {
    delete m_targetdisplacespeed_;
  }
  if (m_targetdisplacespeed) {
    set_has_m_targetdisplacespeed();
    m_targetdisplacespeed_ = m_targetdisplacespeed;
  } else {
    clear_has_m_targetdisplacespeed();
    m_targetdisplacespeed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_targetdistimes = 13;
inline bool E_SkillSkill::has_m_targetdistimes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_SkillSkill::set_has_m_targetdistimes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_SkillSkill::clear_has_m_targetdistimes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_SkillSkill::clear_m_targetdistimes() {
  if (m_targetdistimes_ != &::google::protobuf::internal::kEmptyString) {
    m_targetdistimes_->clear();
  }
  clear_has_m_targetdistimes();
}
inline const ::std::string& E_SkillSkill::m_targetdistimes() const {
  return *m_targetdistimes_;
}
inline void E_SkillSkill::set_m_targetdistimes(const ::std::string& value) {
  set_has_m_targetdistimes();
  if (m_targetdistimes_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdistimes_ = new ::std::string;
  }
  m_targetdistimes_->assign(value);
}
inline void E_SkillSkill::set_m_targetdistimes(const char* value) {
  set_has_m_targetdistimes();
  if (m_targetdistimes_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdistimes_ = new ::std::string;
  }
  m_targetdistimes_->assign(value);
}
inline void E_SkillSkill::set_m_targetdistimes(const char* value, size_t size) {
  set_has_m_targetdistimes();
  if (m_targetdistimes_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdistimes_ = new ::std::string;
  }
  m_targetdistimes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_targetdistimes() {
  set_has_m_targetdistimes();
  if (m_targetdistimes_ == &::google::protobuf::internal::kEmptyString) {
    m_targetdistimes_ = new ::std::string;
  }
  return m_targetdistimes_;
}
inline ::std::string* E_SkillSkill::release_m_targetdistimes() {
  clear_has_m_targetdistimes();
  if (m_targetdistimes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_targetdistimes_;
    m_targetdistimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_targetdistimes(::std::string* m_targetdistimes) {
  if (m_targetdistimes_ != &::google::protobuf::internal::kEmptyString) {
    delete m_targetdistimes_;
  }
  if (m_targetdistimes) {
    set_has_m_targetdistimes();
    m_targetdistimes_ = m_targetdistimes;
  } else {
    clear_has_m_targetdistimes();
    m_targetdistimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_breaktype = 14;
inline bool E_SkillSkill::has_m_breaktype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_SkillSkill::set_has_m_breaktype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_SkillSkill::clear_has_m_breaktype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_SkillSkill::clear_m_breaktype() {
  m_breaktype_ = 0;
  clear_has_m_breaktype();
}
inline ::google::protobuf::int32 E_SkillSkill::m_breaktype() const {
  return m_breaktype_;
}
inline void E_SkillSkill::set_m_breaktype(::google::protobuf::int32 value) {
  set_has_m_breaktype();
  m_breaktype_ = value;
}

// optional int32 m_cdskill = 15;
inline bool E_SkillSkill::has_m_cdskill() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_SkillSkill::set_has_m_cdskill() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_SkillSkill::clear_has_m_cdskill() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_SkillSkill::clear_m_cdskill() {
  m_cdskill_ = 0;
  clear_has_m_cdskill();
}
inline ::google::protobuf::int32 E_SkillSkill::m_cdskill() const {
  return m_cdskill_;
}
inline void E_SkillSkill::set_m_cdskill(::google::protobuf::int32 value) {
  set_has_m_cdskill();
  m_cdskill_ = value;
}

// optional int64 m_relation = 16;
inline bool E_SkillSkill::has_m_relation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_SkillSkill::set_has_m_relation() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_SkillSkill::clear_has_m_relation() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_SkillSkill::clear_m_relation() {
  m_relation_ = GOOGLE_LONGLONG(0);
  clear_has_m_relation();
}
inline ::google::protobuf::int64 E_SkillSkill::m_relation() const {
  return m_relation_;
}
inline void E_SkillSkill::set_m_relation(::google::protobuf::int64 value) {
  set_has_m_relation();
  m_relation_ = value;
}

// optional string m_unlockcondition = 17;
inline bool E_SkillSkill::has_m_unlockcondition() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_SkillSkill::set_has_m_unlockcondition() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_SkillSkill::clear_has_m_unlockcondition() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_SkillSkill::clear_m_unlockcondition() {
  if (m_unlockcondition_ != &::google::protobuf::internal::kEmptyString) {
    m_unlockcondition_->clear();
  }
  clear_has_m_unlockcondition();
}
inline const ::std::string& E_SkillSkill::m_unlockcondition() const {
  return *m_unlockcondition_;
}
inline void E_SkillSkill::set_m_unlockcondition(const ::std::string& value) {
  set_has_m_unlockcondition();
  if (m_unlockcondition_ == &::google::protobuf::internal::kEmptyString) {
    m_unlockcondition_ = new ::std::string;
  }
  m_unlockcondition_->assign(value);
}
inline void E_SkillSkill::set_m_unlockcondition(const char* value) {
  set_has_m_unlockcondition();
  if (m_unlockcondition_ == &::google::protobuf::internal::kEmptyString) {
    m_unlockcondition_ = new ::std::string;
  }
  m_unlockcondition_->assign(value);
}
inline void E_SkillSkill::set_m_unlockcondition(const char* value, size_t size) {
  set_has_m_unlockcondition();
  if (m_unlockcondition_ == &::google::protobuf::internal::kEmptyString) {
    m_unlockcondition_ = new ::std::string;
  }
  m_unlockcondition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_unlockcondition() {
  set_has_m_unlockcondition();
  if (m_unlockcondition_ == &::google::protobuf::internal::kEmptyString) {
    m_unlockcondition_ = new ::std::string;
  }
  return m_unlockcondition_;
}
inline ::std::string* E_SkillSkill::release_m_unlockcondition() {
  clear_has_m_unlockcondition();
  if (m_unlockcondition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_unlockcondition_;
    m_unlockcondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_unlockcondition(::std::string* m_unlockcondition) {
  if (m_unlockcondition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_unlockcondition_;
  }
  if (m_unlockcondition) {
    set_has_m_unlockcondition();
    m_unlockcondition_ = m_unlockcondition;
  } else {
    clear_has_m_unlockcondition();
    m_unlockcondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_type = 18;
inline bool E_SkillSkill::has_m_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_SkillSkill::set_has_m_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_SkillSkill::clear_has_m_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_SkillSkill::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_SkillSkill::m_type() const {
  return m_type_;
}
inline void E_SkillSkill::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_cd = 19;
inline bool E_SkillSkill::has_m_cd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_SkillSkill::set_has_m_cd() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_SkillSkill::clear_has_m_cd() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_SkillSkill::clear_m_cd() {
  m_cd_ = 0;
  clear_has_m_cd();
}
inline ::google::protobuf::int32 E_SkillSkill::m_cd() const {
  return m_cd_;
}
inline void E_SkillSkill::set_m_cd(::google::protobuf::int32 value) {
  set_has_m_cd();
  m_cd_ = value;
}

// optional int32 m_nolock = 20;
inline bool E_SkillSkill::has_m_nolock() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_SkillSkill::set_has_m_nolock() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_SkillSkill::clear_has_m_nolock() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_SkillSkill::clear_m_nolock() {
  m_nolock_ = 0;
  clear_has_m_nolock();
}
inline ::google::protobuf::int32 E_SkillSkill::m_nolock() const {
  return m_nolock_;
}
inline void E_SkillSkill::set_m_nolock(::google::protobuf::int32 value) {
  set_has_m_nolock();
  m_nolock_ = value;
}

// optional int32 m_priority = 21;
inline bool E_SkillSkill::has_m_priority() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_SkillSkill::set_has_m_priority() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_SkillSkill::clear_has_m_priority() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_SkillSkill::clear_m_priority() {
  m_priority_ = 0;
  clear_has_m_priority();
}
inline ::google::protobuf::int32 E_SkillSkill::m_priority() const {
  return m_priority_;
}
inline void E_SkillSkill::set_m_priority(::google::protobuf::int32 value) {
  set_has_m_priority();
  m_priority_ = value;
}

// optional int32 m_fighting = 22;
inline bool E_SkillSkill::has_m_fighting() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_SkillSkill::set_has_m_fighting() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_SkillSkill::clear_has_m_fighting() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_SkillSkill::clear_m_fighting() {
  m_fighting_ = 0;
  clear_has_m_fighting();
}
inline ::google::protobuf::int32 E_SkillSkill::m_fighting() const {
  return m_fighting_;
}
inline void E_SkillSkill::set_m_fighting(::google::protobuf::int32 value) {
  set_has_m_fighting();
  m_fighting_ = value;
}

// optional float m_fightingparama = 23;
inline bool E_SkillSkill::has_m_fightingparama() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_SkillSkill::set_has_m_fightingparama() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_SkillSkill::clear_has_m_fightingparama() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_SkillSkill::clear_m_fightingparama() {
  m_fightingparama_ = 0;
  clear_has_m_fightingparama();
}
inline float E_SkillSkill::m_fightingparama() const {
  return m_fightingparama_;
}
inline void E_SkillSkill::set_m_fightingparama(float value) {
  set_has_m_fightingparama();
  m_fightingparama_ = value;
}

// optional int32 m_releasetype = 24;
inline bool E_SkillSkill::has_m_releasetype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_SkillSkill::set_has_m_releasetype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_SkillSkill::clear_has_m_releasetype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_SkillSkill::clear_m_releasetype() {
  m_releasetype_ = 0;
  clear_has_m_releasetype();
}
inline ::google::protobuf::int32 E_SkillSkill::m_releasetype() const {
  return m_releasetype_;
}
inline void E_SkillSkill::set_m_releasetype(::google::protobuf::int32 value) {
  set_has_m_releasetype();
  m_releasetype_ = value;
}

// optional int32 m_processtypes = 25;
inline bool E_SkillSkill::has_m_processtypes() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_SkillSkill::set_has_m_processtypes() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_SkillSkill::clear_has_m_processtypes() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_SkillSkill::clear_m_processtypes() {
  m_processtypes_ = 0;
  clear_has_m_processtypes();
}
inline ::google::protobuf::int32 E_SkillSkill::m_processtypes() const {
  return m_processtypes_;
}
inline void E_SkillSkill::set_m_processtypes(::google::protobuf::int32 value) {
  set_has_m_processtypes();
  m_processtypes_ = value;
}

// optional string m_releasetime = 26;
inline bool E_SkillSkill::has_m_releasetime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_SkillSkill::set_has_m_releasetime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_SkillSkill::clear_has_m_releasetime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_SkillSkill::clear_m_releasetime() {
  if (m_releasetime_ != &::google::protobuf::internal::kEmptyString) {
    m_releasetime_->clear();
  }
  clear_has_m_releasetime();
}
inline const ::std::string& E_SkillSkill::m_releasetime() const {
  return *m_releasetime_;
}
inline void E_SkillSkill::set_m_releasetime(const ::std::string& value) {
  set_has_m_releasetime();
  if (m_releasetime_ == &::google::protobuf::internal::kEmptyString) {
    m_releasetime_ = new ::std::string;
  }
  m_releasetime_->assign(value);
}
inline void E_SkillSkill::set_m_releasetime(const char* value) {
  set_has_m_releasetime();
  if (m_releasetime_ == &::google::protobuf::internal::kEmptyString) {
    m_releasetime_ = new ::std::string;
  }
  m_releasetime_->assign(value);
}
inline void E_SkillSkill::set_m_releasetime(const char* value, size_t size) {
  set_has_m_releasetime();
  if (m_releasetime_ == &::google::protobuf::internal::kEmptyString) {
    m_releasetime_ = new ::std::string;
  }
  m_releasetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_releasetime() {
  set_has_m_releasetime();
  if (m_releasetime_ == &::google::protobuf::internal::kEmptyString) {
    m_releasetime_ = new ::std::string;
  }
  return m_releasetime_;
}
inline ::std::string* E_SkillSkill::release_m_releasetime() {
  clear_has_m_releasetime();
  if (m_releasetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_releasetime_;
    m_releasetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_releasetime(::std::string* m_releasetime) {
  if (m_releasetime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_releasetime_;
  }
  if (m_releasetime) {
    set_has_m_releasetime();
    m_releasetime_ = m_releasetime;
  } else {
    clear_has_m_releasetime();
    m_releasetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_flyspeed = 27;
inline bool E_SkillSkill::has_m_flyspeed() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void E_SkillSkill::set_has_m_flyspeed() {
  _has_bits_[0] |= 0x04000000u;
}
inline void E_SkillSkill::clear_has_m_flyspeed() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void E_SkillSkill::clear_m_flyspeed() {
  m_flyspeed_ = 0;
  clear_has_m_flyspeed();
}
inline ::google::protobuf::int32 E_SkillSkill::m_flyspeed() const {
  return m_flyspeed_;
}
inline void E_SkillSkill::set_m_flyspeed(::google::protobuf::int32 value) {
  set_has_m_flyspeed();
  m_flyspeed_ = value;
}

// optional int32 m_acttime = 28;
inline bool E_SkillSkill::has_m_acttime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void E_SkillSkill::set_has_m_acttime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void E_SkillSkill::clear_has_m_acttime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void E_SkillSkill::clear_m_acttime() {
  m_acttime_ = 0;
  clear_has_m_acttime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_acttime() const {
  return m_acttime_;
}
inline void E_SkillSkill::set_m_acttime(::google::protobuf::int32 value) {
  set_has_m_acttime();
  m_acttime_ = value;
}

// optional int32 m_readytime = 29;
inline bool E_SkillSkill::has_m_readytime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void E_SkillSkill::set_has_m_readytime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void E_SkillSkill::clear_has_m_readytime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void E_SkillSkill::clear_m_readytime() {
  m_readytime_ = 0;
  clear_has_m_readytime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_readytime() const {
  return m_readytime_;
}
inline void E_SkillSkill::set_m_readytime(::google::protobuf::int32 value) {
  set_has_m_readytime();
  m_readytime_ = value;
}

// optional int32 m_readytimeex = 30;
inline bool E_SkillSkill::has_m_readytimeex() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void E_SkillSkill::set_has_m_readytimeex() {
  _has_bits_[0] |= 0x20000000u;
}
inline void E_SkillSkill::clear_has_m_readytimeex() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void E_SkillSkill::clear_m_readytimeex() {
  m_readytimeex_ = 0;
  clear_has_m_readytimeex();
}
inline ::google::protobuf::int32 E_SkillSkill::m_readytimeex() const {
  return m_readytimeex_;
}
inline void E_SkillSkill::set_m_readytimeex(::google::protobuf::int32 value) {
  set_has_m_readytimeex();
  m_readytimeex_ = value;
}

// optional int32 m_attacktime = 31;
inline bool E_SkillSkill::has_m_attacktime() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void E_SkillSkill::set_has_m_attacktime() {
  _has_bits_[0] |= 0x40000000u;
}
inline void E_SkillSkill::clear_has_m_attacktime() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void E_SkillSkill::clear_m_attacktime() {
  m_attacktime_ = 0;
  clear_has_m_attacktime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_attacktime() const {
  return m_attacktime_;
}
inline void E_SkillSkill::set_m_attacktime(::google::protobuf::int32 value) {
  set_has_m_attacktime();
  m_attacktime_ = value;
}

// optional string m_damagetime = 32;
inline bool E_SkillSkill::has_m_damagetime() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void E_SkillSkill::set_has_m_damagetime() {
  _has_bits_[0] |= 0x80000000u;
}
inline void E_SkillSkill::clear_has_m_damagetime() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void E_SkillSkill::clear_m_damagetime() {
  if (m_damagetime_ != &::google::protobuf::internal::kEmptyString) {
    m_damagetime_->clear();
  }
  clear_has_m_damagetime();
}
inline const ::std::string& E_SkillSkill::m_damagetime() const {
  return *m_damagetime_;
}
inline void E_SkillSkill::set_m_damagetime(const ::std::string& value) {
  set_has_m_damagetime();
  if (m_damagetime_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetime_ = new ::std::string;
  }
  m_damagetime_->assign(value);
}
inline void E_SkillSkill::set_m_damagetime(const char* value) {
  set_has_m_damagetime();
  if (m_damagetime_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetime_ = new ::std::string;
  }
  m_damagetime_->assign(value);
}
inline void E_SkillSkill::set_m_damagetime(const char* value, size_t size) {
  set_has_m_damagetime();
  if (m_damagetime_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetime_ = new ::std::string;
  }
  m_damagetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_damagetime() {
  set_has_m_damagetime();
  if (m_damagetime_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetime_ = new ::std::string;
  }
  return m_damagetime_;
}
inline ::std::string* E_SkillSkill::release_m_damagetime() {
  clear_has_m_damagetime();
  if (m_damagetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_damagetime_;
    m_damagetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_damagetime(::std::string* m_damagetime) {
  if (m_damagetime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_damagetime_;
  }
  if (m_damagetime) {
    set_has_m_damagetime();
    m_damagetime_ = m_damagetime;
  } else {
    clear_has_m_damagetime();
    m_damagetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_damagetimeex = 33;
inline bool E_SkillSkill::has_m_damagetimeex() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void E_SkillSkill::set_has_m_damagetimeex() {
  _has_bits_[1] |= 0x00000001u;
}
inline void E_SkillSkill::clear_has_m_damagetimeex() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void E_SkillSkill::clear_m_damagetimeex() {
  if (m_damagetimeex_ != &::google::protobuf::internal::kEmptyString) {
    m_damagetimeex_->clear();
  }
  clear_has_m_damagetimeex();
}
inline const ::std::string& E_SkillSkill::m_damagetimeex() const {
  return *m_damagetimeex_;
}
inline void E_SkillSkill::set_m_damagetimeex(const ::std::string& value) {
  set_has_m_damagetimeex();
  if (m_damagetimeex_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetimeex_ = new ::std::string;
  }
  m_damagetimeex_->assign(value);
}
inline void E_SkillSkill::set_m_damagetimeex(const char* value) {
  set_has_m_damagetimeex();
  if (m_damagetimeex_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetimeex_ = new ::std::string;
  }
  m_damagetimeex_->assign(value);
}
inline void E_SkillSkill::set_m_damagetimeex(const char* value, size_t size) {
  set_has_m_damagetimeex();
  if (m_damagetimeex_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetimeex_ = new ::std::string;
  }
  m_damagetimeex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_damagetimeex() {
  set_has_m_damagetimeex();
  if (m_damagetimeex_ == &::google::protobuf::internal::kEmptyString) {
    m_damagetimeex_ = new ::std::string;
  }
  return m_damagetimeex_;
}
inline ::std::string* E_SkillSkill::release_m_damagetimeex() {
  clear_has_m_damagetimeex();
  if (m_damagetimeex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_damagetimeex_;
    m_damagetimeex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_damagetimeex(::std::string* m_damagetimeex) {
  if (m_damagetimeex_ != &::google::protobuf::internal::kEmptyString) {
    delete m_damagetimeex_;
  }
  if (m_damagetimeex) {
    set_has_m_damagetimeex();
    m_damagetimeex_ = m_damagetimeex;
  } else {
    clear_has_m_damagetimeex();
    m_damagetimeex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_attackdistance = 34;
inline bool E_SkillSkill::has_m_attackdistance() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void E_SkillSkill::set_has_m_attackdistance() {
  _has_bits_[1] |= 0x00000002u;
}
inline void E_SkillSkill::clear_has_m_attackdistance() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void E_SkillSkill::clear_m_attackdistance() {
  m_attackdistance_ = 0;
  clear_has_m_attackdistance();
}
inline ::google::protobuf::int32 E_SkillSkill::m_attackdistance() const {
  return m_attackdistance_;
}
inline void E_SkillSkill::set_m_attackdistance(::google::protobuf::int32 value) {
  set_has_m_attackdistance();
  m_attackdistance_ = value;
}

// optional int32 m_rangetype = 35;
inline bool E_SkillSkill::has_m_rangetype() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void E_SkillSkill::set_has_m_rangetype() {
  _has_bits_[1] |= 0x00000004u;
}
inline void E_SkillSkill::clear_has_m_rangetype() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void E_SkillSkill::clear_m_rangetype() {
  m_rangetype_ = 0;
  clear_has_m_rangetype();
}
inline ::google::protobuf::int32 E_SkillSkill::m_rangetype() const {
  return m_rangetype_;
}
inline void E_SkillSkill::set_m_rangetype(::google::protobuf::int32 value) {
  set_has_m_rangetype();
  m_rangetype_ = value;
}

// optional string m_rangetypevalue = 36;
inline bool E_SkillSkill::has_m_rangetypevalue() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void E_SkillSkill::set_has_m_rangetypevalue() {
  _has_bits_[1] |= 0x00000008u;
}
inline void E_SkillSkill::clear_has_m_rangetypevalue() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void E_SkillSkill::clear_m_rangetypevalue() {
  if (m_rangetypevalue_ != &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalue_->clear();
  }
  clear_has_m_rangetypevalue();
}
inline const ::std::string& E_SkillSkill::m_rangetypevalue() const {
  return *m_rangetypevalue_;
}
inline void E_SkillSkill::set_m_rangetypevalue(const ::std::string& value) {
  set_has_m_rangetypevalue();
  if (m_rangetypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalue_ = new ::std::string;
  }
  m_rangetypevalue_->assign(value);
}
inline void E_SkillSkill::set_m_rangetypevalue(const char* value) {
  set_has_m_rangetypevalue();
  if (m_rangetypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalue_ = new ::std::string;
  }
  m_rangetypevalue_->assign(value);
}
inline void E_SkillSkill::set_m_rangetypevalue(const char* value, size_t size) {
  set_has_m_rangetypevalue();
  if (m_rangetypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalue_ = new ::std::string;
  }
  m_rangetypevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_rangetypevalue() {
  set_has_m_rangetypevalue();
  if (m_rangetypevalue_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalue_ = new ::std::string;
  }
  return m_rangetypevalue_;
}
inline ::std::string* E_SkillSkill::release_m_rangetypevalue() {
  clear_has_m_rangetypevalue();
  if (m_rangetypevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rangetypevalue_;
    m_rangetypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_rangetypevalue(::std::string* m_rangetypevalue) {
  if (m_rangetypevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rangetypevalue_;
  }
  if (m_rangetypevalue) {
    set_has_m_rangetypevalue();
    m_rangetypevalue_ = m_rangetypevalue;
  } else {
    clear_has_m_rangetypevalue();
    m_rangetypevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rangetypeex = 37;
inline bool E_SkillSkill::has_m_rangetypeex() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void E_SkillSkill::set_has_m_rangetypeex() {
  _has_bits_[1] |= 0x00000010u;
}
inline void E_SkillSkill::clear_has_m_rangetypeex() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void E_SkillSkill::clear_m_rangetypeex() {
  m_rangetypeex_ = 0;
  clear_has_m_rangetypeex();
}
inline ::google::protobuf::int32 E_SkillSkill::m_rangetypeex() const {
  return m_rangetypeex_;
}
inline void E_SkillSkill::set_m_rangetypeex(::google::protobuf::int32 value) {
  set_has_m_rangetypeex();
  m_rangetypeex_ = value;
}

// optional string m_rangetypevalueex = 38;
inline bool E_SkillSkill::has_m_rangetypevalueex() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void E_SkillSkill::set_has_m_rangetypevalueex() {
  _has_bits_[1] |= 0x00000020u;
}
inline void E_SkillSkill::clear_has_m_rangetypevalueex() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void E_SkillSkill::clear_m_rangetypevalueex() {
  if (m_rangetypevalueex_ != &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalueex_->clear();
  }
  clear_has_m_rangetypevalueex();
}
inline const ::std::string& E_SkillSkill::m_rangetypevalueex() const {
  return *m_rangetypevalueex_;
}
inline void E_SkillSkill::set_m_rangetypevalueex(const ::std::string& value) {
  set_has_m_rangetypevalueex();
  if (m_rangetypevalueex_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalueex_ = new ::std::string;
  }
  m_rangetypevalueex_->assign(value);
}
inline void E_SkillSkill::set_m_rangetypevalueex(const char* value) {
  set_has_m_rangetypevalueex();
  if (m_rangetypevalueex_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalueex_ = new ::std::string;
  }
  m_rangetypevalueex_->assign(value);
}
inline void E_SkillSkill::set_m_rangetypevalueex(const char* value, size_t size) {
  set_has_m_rangetypevalueex();
  if (m_rangetypevalueex_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalueex_ = new ::std::string;
  }
  m_rangetypevalueex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_rangetypevalueex() {
  set_has_m_rangetypevalueex();
  if (m_rangetypevalueex_ == &::google::protobuf::internal::kEmptyString) {
    m_rangetypevalueex_ = new ::std::string;
  }
  return m_rangetypevalueex_;
}
inline ::std::string* E_SkillSkill::release_m_rangetypevalueex() {
  clear_has_m_rangetypevalueex();
  if (m_rangetypevalueex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rangetypevalueex_;
    m_rangetypevalueex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_rangetypevalueex(::std::string* m_rangetypevalueex) {
  if (m_rangetypevalueex_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rangetypevalueex_;
  }
  if (m_rangetypevalueex) {
    set_has_m_rangetypevalueex();
    m_rangetypevalueex_ = m_rangetypevalueex;
  } else {
    clear_has_m_rangetypevalueex();
    m_rangetypevalueex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_warn = 39;
inline bool E_SkillSkill::has_m_warn() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void E_SkillSkill::set_has_m_warn() {
  _has_bits_[1] |= 0x00000040u;
}
inline void E_SkillSkill::clear_has_m_warn() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void E_SkillSkill::clear_m_warn() {
  m_warn_ = 0;
  clear_has_m_warn();
}
inline ::google::protobuf::int32 E_SkillSkill::m_warn() const {
  return m_warn_;
}
inline void E_SkillSkill::set_m_warn(::google::protobuf::int32 value) {
  set_has_m_warn();
  m_warn_ = value;
}

// optional int32 m_dazetime = 40;
inline bool E_SkillSkill::has_m_dazetime() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void E_SkillSkill::set_has_m_dazetime() {
  _has_bits_[1] |= 0x00000080u;
}
inline void E_SkillSkill::clear_has_m_dazetime() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void E_SkillSkill::clear_m_dazetime() {
  m_dazetime_ = 0;
  clear_has_m_dazetime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_dazetime() const {
  return m_dazetime_;
}
inline void E_SkillSkill::set_m_dazetime(::google::protobuf::int32 value) {
  set_has_m_dazetime();
  m_dazetime_ = value;
}

// optional int32 m_warntime = 41;
inline bool E_SkillSkill::has_m_warntime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void E_SkillSkill::set_has_m_warntime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void E_SkillSkill::clear_has_m_warntime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void E_SkillSkill::clear_m_warntime() {
  m_warntime_ = 0;
  clear_has_m_warntime();
}
inline ::google::protobuf::int32 E_SkillSkill::m_warntime() const {
  return m_warntime_;
}
inline void E_SkillSkill::set_m_warntime(::google::protobuf::int32 value) {
  set_has_m_warntime();
  m_warntime_ = value;
}

// optional string m_infomationid = 42;
inline bool E_SkillSkill::has_m_infomationid() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void E_SkillSkill::set_has_m_infomationid() {
  _has_bits_[1] |= 0x00000200u;
}
inline void E_SkillSkill::clear_has_m_infomationid() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void E_SkillSkill::clear_m_infomationid() {
  if (m_infomationid_ != &::google::protobuf::internal::kEmptyString) {
    m_infomationid_->clear();
  }
  clear_has_m_infomationid();
}
inline const ::std::string& E_SkillSkill::m_infomationid() const {
  return *m_infomationid_;
}
inline void E_SkillSkill::set_m_infomationid(const ::std::string& value) {
  set_has_m_infomationid();
  if (m_infomationid_ == &::google::protobuf::internal::kEmptyString) {
    m_infomationid_ = new ::std::string;
  }
  m_infomationid_->assign(value);
}
inline void E_SkillSkill::set_m_infomationid(const char* value) {
  set_has_m_infomationid();
  if (m_infomationid_ == &::google::protobuf::internal::kEmptyString) {
    m_infomationid_ = new ::std::string;
  }
  m_infomationid_->assign(value);
}
inline void E_SkillSkill::set_m_infomationid(const char* value, size_t size) {
  set_has_m_infomationid();
  if (m_infomationid_ == &::google::protobuf::internal::kEmptyString) {
    m_infomationid_ = new ::std::string;
  }
  m_infomationid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkill::mutable_m_infomationid() {
  set_has_m_infomationid();
  if (m_infomationid_ == &::google::protobuf::internal::kEmptyString) {
    m_infomationid_ = new ::std::string;
  }
  return m_infomationid_;
}
inline ::std::string* E_SkillSkill::release_m_infomationid() {
  clear_has_m_infomationid();
  if (m_infomationid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_infomationid_;
    m_infomationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkill::set_allocated_m_infomationid(::std::string* m_infomationid) {
  if (m_infomationid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_infomationid_;
  }
  if (m_infomationid) {
    set_has_m_infomationid();
    m_infomationid_ = m_infomationid;
  } else {
    clear_has_m_infomationid();
    m_infomationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_attackmindistance = 43;
inline bool E_SkillSkill::has_m_attackmindistance() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void E_SkillSkill::set_has_m_attackmindistance() {
  _has_bits_[1] |= 0x00000400u;
}
inline void E_SkillSkill::clear_has_m_attackmindistance() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void E_SkillSkill::clear_m_attackmindistance() {
  m_attackmindistance_ = 0;
  clear_has_m_attackmindistance();
}
inline ::google::protobuf::int32 E_SkillSkill::m_attackmindistance() const {
  return m_attackmindistance_;
}
inline void E_SkillSkill::set_m_attackmindistance(::google::protobuf::int32 value) {
  set_has_m_attackmindistance();
  m_attackmindistance_ = value;
}

// optional int32 m_goalmaxnum = 44;
inline bool E_SkillSkill::has_m_goalmaxnum() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void E_SkillSkill::set_has_m_goalmaxnum() {
  _has_bits_[1] |= 0x00000800u;
}
inline void E_SkillSkill::clear_has_m_goalmaxnum() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void E_SkillSkill::clear_m_goalmaxnum() {
  m_goalmaxnum_ = 0;
  clear_has_m_goalmaxnum();
}
inline ::google::protobuf::int32 E_SkillSkill::m_goalmaxnum() const {
  return m_goalmaxnum_;
}
inline void E_SkillSkill::set_m_goalmaxnum(::google::protobuf::int32 value) {
  set_has_m_goalmaxnum();
  m_goalmaxnum_ = value;
}

// optional int32 m_goalmaxnummonster = 45;
inline bool E_SkillSkill::has_m_goalmaxnummonster() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void E_SkillSkill::set_has_m_goalmaxnummonster() {
  _has_bits_[1] |= 0x00001000u;
}
inline void E_SkillSkill::clear_has_m_goalmaxnummonster() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void E_SkillSkill::clear_m_goalmaxnummonster() {
  m_goalmaxnummonster_ = 0;
  clear_has_m_goalmaxnummonster();
}
inline ::google::protobuf::int32 E_SkillSkill::m_goalmaxnummonster() const {
  return m_goalmaxnummonster_;
}
inline void E_SkillSkill::set_m_goalmaxnummonster(::google::protobuf::int32 value) {
  set_has_m_goalmaxnummonster();
  m_goalmaxnummonster_ = value;
}

// optional int32 m_damagetype = 46;
inline bool E_SkillSkill::has_m_damagetype() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void E_SkillSkill::set_has_m_damagetype() {
  _has_bits_[1] |= 0x00002000u;
}
inline void E_SkillSkill::clear_has_m_damagetype() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void E_SkillSkill::clear_m_damagetype() {
  m_damagetype_ = 0;
  clear_has_m_damagetype();
}
inline ::google::protobuf::int32 E_SkillSkill::m_damagetype() const {
  return m_damagetype_;
}
inline void E_SkillSkill::set_m_damagetype(::google::protobuf::int32 value) {
  set_has_m_damagetype();
  m_damagetype_ = value;
}

// optional int32 m_damagerate = 47;
inline bool E_SkillSkill::has_m_damagerate() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void E_SkillSkill::set_has_m_damagerate() {
  _has_bits_[1] |= 0x00004000u;
}
inline void E_SkillSkill::clear_has_m_damagerate() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void E_SkillSkill::clear_m_damagerate() {
  m_damagerate_ = 0;
  clear_has_m_damagerate();
}
inline ::google::protobuf::int32 E_SkillSkill::m_damagerate() const {
  return m_damagerate_;
}
inline void E_SkillSkill::set_m_damagerate(::google::protobuf::int32 value) {
  set_has_m_damagerate();
  m_damagerate_ = value;
}

// optional int32 m_awakedamagerate = 48;
inline bool E_SkillSkill::has_m_awakedamagerate() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void E_SkillSkill::set_has_m_awakedamagerate() {
  _has_bits_[1] |= 0x00008000u;
}
inline void E_SkillSkill::clear_has_m_awakedamagerate() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void E_SkillSkill::clear_m_awakedamagerate() {
  m_awakedamagerate_ = 0;
  clear_has_m_awakedamagerate();
}
inline ::google::protobuf::int32 E_SkillSkill::m_awakedamagerate() const {
  return m_awakedamagerate_;
}
inline void E_SkillSkill::set_m_awakedamagerate(::google::protobuf::int32 value) {
  set_has_m_awakedamagerate();
  m_awakedamagerate_ = value;
}

// optional int32 m_advancetype1damagerate = 49;
inline bool E_SkillSkill::has_m_advancetype1damagerate() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void E_SkillSkill::set_has_m_advancetype1damagerate() {
  _has_bits_[1] |= 0x00010000u;
}
inline void E_SkillSkill::clear_has_m_advancetype1damagerate() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void E_SkillSkill::clear_m_advancetype1damagerate() {
  m_advancetype1damagerate_ = 0;
  clear_has_m_advancetype1damagerate();
}
inline ::google::protobuf::int32 E_SkillSkill::m_advancetype1damagerate() const {
  return m_advancetype1damagerate_;
}
inline void E_SkillSkill::set_m_advancetype1damagerate(::google::protobuf::int32 value) {
  set_has_m_advancetype1damagerate();
  m_advancetype1damagerate_ = value;
}

// optional int32 m_advancetype2damagerate = 50;
inline bool E_SkillSkill::has_m_advancetype2damagerate() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void E_SkillSkill::set_has_m_advancetype2damagerate() {
  _has_bits_[1] |= 0x00020000u;
}
inline void E_SkillSkill::clear_has_m_advancetype2damagerate() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void E_SkillSkill::clear_m_advancetype2damagerate() {
  m_advancetype2damagerate_ = 0;
  clear_has_m_advancetype2damagerate();
}
inline ::google::protobuf::int32 E_SkillSkill::m_advancetype2damagerate() const {
  return m_advancetype2damagerate_;
}
inline void E_SkillSkill::set_m_advancetype2damagerate(::google::protobuf::int32 value) {
  set_has_m_advancetype2damagerate();
  m_advancetype2damagerate_ = value;
}

// optional int32 m_advancetype3damagerate = 51;
inline bool E_SkillSkill::has_m_advancetype3damagerate() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void E_SkillSkill::set_has_m_advancetype3damagerate() {
  _has_bits_[1] |= 0x00040000u;
}
inline void E_SkillSkill::clear_has_m_advancetype3damagerate() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void E_SkillSkill::clear_m_advancetype3damagerate() {
  m_advancetype3damagerate_ = 0;
  clear_has_m_advancetype3damagerate();
}
inline ::google::protobuf::int32 E_SkillSkill::m_advancetype3damagerate() const {
  return m_advancetype3damagerate_;
}
inline void E_SkillSkill::set_m_advancetype3damagerate(::google::protobuf::int32 value) {
  set_has_m_advancetype3damagerate();
  m_advancetype3damagerate_ = value;
}

// optional int32 m_damagevalue = 52;
inline bool E_SkillSkill::has_m_damagevalue() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void E_SkillSkill::set_has_m_damagevalue() {
  _has_bits_[1] |= 0x00080000u;
}
inline void E_SkillSkill::clear_has_m_damagevalue() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void E_SkillSkill::clear_m_damagevalue() {
  m_damagevalue_ = 0;
  clear_has_m_damagevalue();
}
inline ::google::protobuf::int32 E_SkillSkill::m_damagevalue() const {
  return m_damagevalue_;
}
inline void E_SkillSkill::set_m_damagevalue(::google::protobuf::int32 value) {
  set_has_m_damagevalue();
  m_damagevalue_ = value;
}

// optional float m_damageparama = 53;
inline bool E_SkillSkill::has_m_damageparama() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void E_SkillSkill::set_has_m_damageparama() {
  _has_bits_[1] |= 0x00100000u;
}
inline void E_SkillSkill::clear_has_m_damageparama() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void E_SkillSkill::clear_m_damageparama() {
  m_damageparama_ = 0;
  clear_has_m_damageparama();
}
inline float E_SkillSkill::m_damageparama() const {
  return m_damageparama_;
}
inline void E_SkillSkill::set_m_damageparama(float value) {
  set_has_m_damageparama();
  m_damageparama_ = value;
}

// optional float m_damagerateparama = 54;
inline bool E_SkillSkill::has_m_damagerateparama() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void E_SkillSkill::set_has_m_damagerateparama() {
  _has_bits_[1] |= 0x00200000u;
}
inline void E_SkillSkill::clear_has_m_damagerateparama() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void E_SkillSkill::clear_m_damagerateparama() {
  m_damagerateparama_ = 0;
  clear_has_m_damagerateparama();
}
inline float E_SkillSkill::m_damagerateparama() const {
  return m_damagerateparama_;
}
inline void E_SkillSkill::set_m_damagerateparama(float value) {
  set_has_m_damagerateparama();
  m_damagerateparama_ = value;
}

// optional int32 m_addhitrate = 55;
inline bool E_SkillSkill::has_m_addhitrate() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void E_SkillSkill::set_has_m_addhitrate() {
  _has_bits_[1] |= 0x00400000u;
}
inline void E_SkillSkill::clear_has_m_addhitrate() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void E_SkillSkill::clear_m_addhitrate() {
  m_addhitrate_ = 0;
  clear_has_m_addhitrate();
}
inline ::google::protobuf::int32 E_SkillSkill::m_addhitrate() const {
  return m_addhitrate_;
}
inline void E_SkillSkill::set_m_addhitrate(::google::protobuf::int32 value) {
  set_has_m_addhitrate();
  m_addhitrate_ = value;
}

// optional int64 m_attackbuff = 56;
inline bool E_SkillSkill::has_m_attackbuff() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void E_SkillSkill::set_has_m_attackbuff() {
  _has_bits_[1] |= 0x00800000u;
}
inline void E_SkillSkill::clear_has_m_attackbuff() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void E_SkillSkill::clear_m_attackbuff() {
  m_attackbuff_ = GOOGLE_LONGLONG(0);
  clear_has_m_attackbuff();
}
inline ::google::protobuf::int64 E_SkillSkill::m_attackbuff() const {
  return m_attackbuff_;
}
inline void E_SkillSkill::set_m_attackbuff(::google::protobuf::int64 value) {
  set_has_m_attackbuff();
  m_attackbuff_ = value;
}

// optional int64 m_behitbuff = 57;
inline bool E_SkillSkill::has_m_behitbuff() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void E_SkillSkill::set_has_m_behitbuff() {
  _has_bits_[1] |= 0x01000000u;
}
inline void E_SkillSkill::clear_has_m_behitbuff() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void E_SkillSkill::clear_m_behitbuff() {
  m_behitbuff_ = GOOGLE_LONGLONG(0);
  clear_has_m_behitbuff();
}
inline ::google::protobuf::int64 E_SkillSkill::m_behitbuff() const {
  return m_behitbuff_;
}
inline void E_SkillSkill::set_m_behitbuff(::google::protobuf::int64 value) {
  set_has_m_behitbuff();
  m_behitbuff_ = value;
}

// repeated .proto_ff.E_SkillSkillBuffDesc m_buff = 58;
inline int E_SkillSkill::m_buff_size() const {
  return m_buff_.size();
}
inline void E_SkillSkill::clear_m_buff() {
  m_buff_.Clear();
}
inline const ::proto_ff::E_SkillSkillBuffDesc& E_SkillSkill::m_buff(int index) const {
  return m_buff_.Get(index);
}
inline ::proto_ff::E_SkillSkillBuffDesc* E_SkillSkill::mutable_m_buff(int index) {
  return m_buff_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillBuffDesc* E_SkillSkill::add_m_buff() {
  return m_buff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillBuffDesc >&
E_SkillSkill::m_buff() const {
  return m_buff_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillBuffDesc >*
E_SkillSkill::mutable_m_buff() {
  return &m_buff_;
}

// repeated .proto_ff.E_SkillSkillAwakebuffDesc m_awakebuff = 59;
inline int E_SkillSkill::m_awakebuff_size() const {
  return m_awakebuff_.size();
}
inline void E_SkillSkill::clear_m_awakebuff() {
  m_awakebuff_.Clear();
}
inline const ::proto_ff::E_SkillSkillAwakebuffDesc& E_SkillSkill::m_awakebuff(int index) const {
  return m_awakebuff_.Get(index);
}
inline ::proto_ff::E_SkillSkillAwakebuffDesc* E_SkillSkill::mutable_m_awakebuff(int index) {
  return m_awakebuff_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillAwakebuffDesc* E_SkillSkill::add_m_awakebuff() {
  return m_awakebuff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAwakebuffDesc >&
E_SkillSkill::m_awakebuff() const {
  return m_awakebuff_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAwakebuffDesc >*
E_SkillSkill::mutable_m_awakebuff() {
  return &m_awakebuff_;
}

// repeated .proto_ff.E_SkillSkillAdvancetype1buffDesc m_advancetype1buff = 60;
inline int E_SkillSkill::m_advancetype1buff_size() const {
  return m_advancetype1buff_.size();
}
inline void E_SkillSkill::clear_m_advancetype1buff() {
  m_advancetype1buff_.Clear();
}
inline const ::proto_ff::E_SkillSkillAdvancetype1buffDesc& E_SkillSkill::m_advancetype1buff(int index) const {
  return m_advancetype1buff_.Get(index);
}
inline ::proto_ff::E_SkillSkillAdvancetype1buffDesc* E_SkillSkill::mutable_m_advancetype1buff(int index) {
  return m_advancetype1buff_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillAdvancetype1buffDesc* E_SkillSkill::add_m_advancetype1buff() {
  return m_advancetype1buff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype1buffDesc >&
E_SkillSkill::m_advancetype1buff() const {
  return m_advancetype1buff_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype1buffDesc >*
E_SkillSkill::mutable_m_advancetype1buff() {
  return &m_advancetype1buff_;
}

// repeated .proto_ff.E_SkillSkillAdvancetype2buffDesc m_advancetype2buff = 61;
inline int E_SkillSkill::m_advancetype2buff_size() const {
  return m_advancetype2buff_.size();
}
inline void E_SkillSkill::clear_m_advancetype2buff() {
  m_advancetype2buff_.Clear();
}
inline const ::proto_ff::E_SkillSkillAdvancetype2buffDesc& E_SkillSkill::m_advancetype2buff(int index) const {
  return m_advancetype2buff_.Get(index);
}
inline ::proto_ff::E_SkillSkillAdvancetype2buffDesc* E_SkillSkill::mutable_m_advancetype2buff(int index) {
  return m_advancetype2buff_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillAdvancetype2buffDesc* E_SkillSkill::add_m_advancetype2buff() {
  return m_advancetype2buff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype2buffDesc >&
E_SkillSkill::m_advancetype2buff() const {
  return m_advancetype2buff_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype2buffDesc >*
E_SkillSkill::mutable_m_advancetype2buff() {
  return &m_advancetype2buff_;
}

// repeated .proto_ff.E_SkillSkillAdvancetype3buffDesc m_advancetype3buff = 62;
inline int E_SkillSkill::m_advancetype3buff_size() const {
  return m_advancetype3buff_.size();
}
inline void E_SkillSkill::clear_m_advancetype3buff() {
  m_advancetype3buff_.Clear();
}
inline const ::proto_ff::E_SkillSkillAdvancetype3buffDesc& E_SkillSkill::m_advancetype3buff(int index) const {
  return m_advancetype3buff_.Get(index);
}
inline ::proto_ff::E_SkillSkillAdvancetype3buffDesc* E_SkillSkill::mutable_m_advancetype3buff(int index) {
  return m_advancetype3buff_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillAdvancetype3buffDesc* E_SkillSkill::add_m_advancetype3buff() {
  return m_advancetype3buff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype3buffDesc >&
E_SkillSkill::m_advancetype3buff() const {
  return m_advancetype3buff_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillAdvancetype3buffDesc >*
E_SkillSkill::mutable_m_advancetype3buff() {
  return &m_advancetype3buff_;
}

// -------------------------------------------------------------------

// Sheet_SkillSkill

// repeated .proto_ff.E_SkillSkill E_SkillSkill_List = 1;
inline int Sheet_SkillSkill::e_skillskill_list_size() const {
  return e_skillskill_list_.size();
}
inline void Sheet_SkillSkill::clear_e_skillskill_list() {
  e_skillskill_list_.Clear();
}
inline const ::proto_ff::E_SkillSkill& Sheet_SkillSkill::e_skillskill_list(int index) const {
  return e_skillskill_list_.Get(index);
}
inline ::proto_ff::E_SkillSkill* Sheet_SkillSkill::mutable_e_skillskill_list(int index) {
  return e_skillskill_list_.Mutable(index);
}
inline ::proto_ff::E_SkillSkill* Sheet_SkillSkill::add_e_skillskill_list() {
  return e_skillskill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkill >&
Sheet_SkillSkill::e_skillskill_list() const {
  return e_skillskill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkill >*
Sheet_SkillSkill::mutable_e_skillskill_list() {
  return &e_skillskill_list_;
}

// -------------------------------------------------------------------

// E_SkillSkilladvance

// optional int32 m_id = 1;
inline bool E_SkillSkilladvance::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkilladvance::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkilladvance::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkilladvance::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SkillSkilladvance::m_id() const {
  return m_id_;
}
inline void E_SkillSkilladvance::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_profession = 2;
inline bool E_SkillSkilladvance::has_m_profession() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkilladvance::set_has_m_profession() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkilladvance::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkilladvance::clear_m_profession() {
  m_profession_ = 0;
  clear_has_m_profession();
}
inline ::google::protobuf::int32 E_SkillSkilladvance::m_profession() const {
  return m_profession_;
}
inline void E_SkillSkilladvance::set_m_profession(::google::protobuf::int32 value) {
  set_has_m_profession();
  m_profession_ = value;
}

// optional int32 m_type = 3;
inline bool E_SkillSkilladvance::has_m_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillSkilladvance::set_has_m_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillSkilladvance::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillSkilladvance::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_SkillSkilladvance::m_type() const {
  return m_type_;
}
inline void E_SkillSkilladvance::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_advancelv = 4;
inline bool E_SkillSkilladvance::has_m_advancelv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_SkillSkilladvance::set_has_m_advancelv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_SkillSkilladvance::clear_has_m_advancelv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_SkillSkilladvance::clear_m_advancelv() {
  m_advancelv_ = 0;
  clear_has_m_advancelv();
}
inline ::google::protobuf::int32 E_SkillSkilladvance::m_advancelv() const {
  return m_advancelv_;
}
inline void E_SkillSkilladvance::set_m_advancelv(::google::protobuf::int32 value) {
  set_has_m_advancelv();
  m_advancelv_ = value;
}

// optional string m_advancecondition = 5;
inline bool E_SkillSkilladvance::has_m_advancecondition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_SkillSkilladvance::set_has_m_advancecondition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_SkillSkilladvance::clear_has_m_advancecondition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_SkillSkilladvance::clear_m_advancecondition() {
  if (m_advancecondition_ != &::google::protobuf::internal::kEmptyString) {
    m_advancecondition_->clear();
  }
  clear_has_m_advancecondition();
}
inline const ::std::string& E_SkillSkilladvance::m_advancecondition() const {
  return *m_advancecondition_;
}
inline void E_SkillSkilladvance::set_m_advancecondition(const ::std::string& value) {
  set_has_m_advancecondition();
  if (m_advancecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_advancecondition_ = new ::std::string;
  }
  m_advancecondition_->assign(value);
}
inline void E_SkillSkilladvance::set_m_advancecondition(const char* value) {
  set_has_m_advancecondition();
  if (m_advancecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_advancecondition_ = new ::std::string;
  }
  m_advancecondition_->assign(value);
}
inline void E_SkillSkilladvance::set_m_advancecondition(const char* value, size_t size) {
  set_has_m_advancecondition();
  if (m_advancecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_advancecondition_ = new ::std::string;
  }
  m_advancecondition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkilladvance::mutable_m_advancecondition() {
  set_has_m_advancecondition();
  if (m_advancecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_advancecondition_ = new ::std::string;
  }
  return m_advancecondition_;
}
inline ::std::string* E_SkillSkilladvance::release_m_advancecondition() {
  clear_has_m_advancecondition();
  if (m_advancecondition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_advancecondition_;
    m_advancecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkilladvance::set_allocated_m_advancecondition(::std::string* m_advancecondition) {
  if (m_advancecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_advancecondition_;
  }
  if (m_advancecondition) {
    set_has_m_advancecondition();
    m_advancecondition_ = m_advancecondition;
  } else {
    clear_has_m_advancecondition();
    m_advancecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_skillid = 6;
inline bool E_SkillSkilladvance::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_SkillSkilladvance::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_SkillSkilladvance::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_SkillSkilladvance::clear_m_skillid() {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    m_skillid_->clear();
  }
  clear_has_m_skillid();
}
inline const ::std::string& E_SkillSkilladvance::m_skillid() const {
  return *m_skillid_;
}
inline void E_SkillSkilladvance::set_m_skillid(const ::std::string& value) {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  m_skillid_->assign(value);
}
inline void E_SkillSkilladvance::set_m_skillid(const char* value) {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  m_skillid_->assign(value);
}
inline void E_SkillSkilladvance::set_m_skillid(const char* value, size_t size) {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  m_skillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkilladvance::mutable_m_skillid() {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  return m_skillid_;
}
inline ::std::string* E_SkillSkilladvance::release_m_skillid() {
  clear_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_skillid_;
    m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkilladvance::set_allocated_m_skillid(::std::string* m_skillid) {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (m_skillid) {
    set_has_m_skillid();
    m_skillid_ = m_skillid;
  } else {
    clear_has_m_skillid();
    m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_SkillSkilladvance

// repeated .proto_ff.E_SkillSkilladvance E_SkillSkilladvance_List = 1;
inline int Sheet_SkillSkilladvance::e_skillskilladvance_list_size() const {
  return e_skillskilladvance_list_.size();
}
inline void Sheet_SkillSkilladvance::clear_e_skillskilladvance_list() {
  e_skillskilladvance_list_.Clear();
}
inline const ::proto_ff::E_SkillSkilladvance& Sheet_SkillSkilladvance::e_skillskilladvance_list(int index) const {
  return e_skillskilladvance_list_.Get(index);
}
inline ::proto_ff::E_SkillSkilladvance* Sheet_SkillSkilladvance::mutable_e_skillskilladvance_list(int index) {
  return e_skillskilladvance_list_.Mutable(index);
}
inline ::proto_ff::E_SkillSkilladvance* Sheet_SkillSkilladvance::add_e_skillskilladvance_list() {
  return e_skillskilladvance_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkilladvance >&
Sheet_SkillSkilladvance::e_skillskilladvance_list() const {
  return e_skillskilladvance_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkilladvance >*
Sheet_SkillSkilladvance::mutable_e_skillskilladvance_list() {
  return &e_skillskilladvance_list_;
}

// -------------------------------------------------------------------

// E_SkillSkillup

// optional int32 m_id = 1;
inline bool E_SkillSkillup::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillup::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillup::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillup::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SkillSkillup::m_id() const {
  return m_id_;
}
inline void E_SkillSkillup::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_group = 2;
inline bool E_SkillSkillup::has_m_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkillup::set_has_m_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkillup::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkillup::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_SkillSkillup::m_group() const {
  return m_group_;
}
inline void E_SkillSkillup::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional int32 m_skilllv = 3;
inline bool E_SkillSkillup::has_m_skilllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillSkillup::set_has_m_skilllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillSkillup::clear_has_m_skilllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillSkillup::clear_m_skilllv() {
  m_skilllv_ = 0;
  clear_has_m_skilllv();
}
inline ::google::protobuf::int32 E_SkillSkillup::m_skilllv() const {
  return m_skilllv_;
}
inline void E_SkillSkillup::set_m_skilllv(::google::protobuf::int32 value) {
  set_has_m_skilllv();
  m_skilllv_ = value;
}

// optional string m_skillids = 4;
inline bool E_SkillSkillup::has_m_skillids() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_SkillSkillup::set_has_m_skillids() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_SkillSkillup::clear_has_m_skillids() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_SkillSkillup::clear_m_skillids() {
  if (m_skillids_ != &::google::protobuf::internal::kEmptyString) {
    m_skillids_->clear();
  }
  clear_has_m_skillids();
}
inline const ::std::string& E_SkillSkillup::m_skillids() const {
  return *m_skillids_;
}
inline void E_SkillSkillup::set_m_skillids(const ::std::string& value) {
  set_has_m_skillids();
  if (m_skillids_ == &::google::protobuf::internal::kEmptyString) {
    m_skillids_ = new ::std::string;
  }
  m_skillids_->assign(value);
}
inline void E_SkillSkillup::set_m_skillids(const char* value) {
  set_has_m_skillids();
  if (m_skillids_ == &::google::protobuf::internal::kEmptyString) {
    m_skillids_ = new ::std::string;
  }
  m_skillids_->assign(value);
}
inline void E_SkillSkillup::set_m_skillids(const char* value, size_t size) {
  set_has_m_skillids();
  if (m_skillids_ == &::google::protobuf::internal::kEmptyString) {
    m_skillids_ = new ::std::string;
  }
  m_skillids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkillup::mutable_m_skillids() {
  set_has_m_skillids();
  if (m_skillids_ == &::google::protobuf::internal::kEmptyString) {
    m_skillids_ = new ::std::string;
  }
  return m_skillids_;
}
inline ::std::string* E_SkillSkillup::release_m_skillids() {
  clear_has_m_skillids();
  if (m_skillids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_skillids_;
    m_skillids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkillup::set_allocated_m_skillids(::std::string* m_skillids) {
  if (m_skillids_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillids_;
  }
  if (m_skillids) {
    set_has_m_skillids();
    m_skillids_ = m_skillids;
  } else {
    clear_has_m_skillids();
    m_skillids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rolelv = 5;
inline bool E_SkillSkillup::has_m_rolelv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_SkillSkillup::set_has_m_rolelv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_SkillSkillup::clear_has_m_rolelv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_SkillSkillup::clear_m_rolelv() {
  m_rolelv_ = 0;
  clear_has_m_rolelv();
}
inline ::google::protobuf::int32 E_SkillSkillup::m_rolelv() const {
  return m_rolelv_;
}
inline void E_SkillSkillup::set_m_rolelv(::google::protobuf::int32 value) {
  set_has_m_rolelv();
  m_rolelv_ = value;
}

// optional int64 m_costitemid = 6;
inline bool E_SkillSkillup::has_m_costitemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_SkillSkillup::set_has_m_costitemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_SkillSkillup::clear_has_m_costitemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_SkillSkillup::clear_m_costitemid() {
  m_costitemid_ = GOOGLE_LONGLONG(0);
  clear_has_m_costitemid();
}
inline ::google::protobuf::int64 E_SkillSkillup::m_costitemid() const {
  return m_costitemid_;
}
inline void E_SkillSkillup::set_m_costitemid(::google::protobuf::int64 value) {
  set_has_m_costitemid();
  m_costitemid_ = value;
}

// optional int32 m_costnum = 7;
inline bool E_SkillSkillup::has_m_costnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_SkillSkillup::set_has_m_costnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_SkillSkillup::clear_has_m_costnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_SkillSkillup::clear_m_costnum() {
  m_costnum_ = 0;
  clear_has_m_costnum();
}
inline ::google::protobuf::int32 E_SkillSkillup::m_costnum() const {
  return m_costnum_;
}
inline void E_SkillSkillup::set_m_costnum(::google::protobuf::int32 value) {
  set_has_m_costnum();
  m_costnum_ = value;
}

// -------------------------------------------------------------------

// Sheet_SkillSkillup

// repeated .proto_ff.E_SkillSkillup E_SkillSkillup_List = 1;
inline int Sheet_SkillSkillup::e_skillskillup_list_size() const {
  return e_skillskillup_list_.size();
}
inline void Sheet_SkillSkillup::clear_e_skillskillup_list() {
  e_skillskillup_list_.Clear();
}
inline const ::proto_ff::E_SkillSkillup& Sheet_SkillSkillup::e_skillskillup_list(int index) const {
  return e_skillskillup_list_.Get(index);
}
inline ::proto_ff::E_SkillSkillup* Sheet_SkillSkillup::mutable_e_skillskillup_list(int index) {
  return e_skillskillup_list_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillup* Sheet_SkillSkillup::add_e_skillskillup_list() {
  return e_skillskillup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillup >&
Sheet_SkillSkillup::e_skillskillup_list() const {
  return e_skillskillup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillup >*
Sheet_SkillSkillup::mutable_e_skillskillup_list() {
  return &e_skillskillup_list_;
}

// -------------------------------------------------------------------

// E_SkillSkillawake

// optional int32 m_skillid = 1;
inline bool E_SkillSkillawake::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillawake::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillawake::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillawake::clear_m_skillid() {
  m_skillid_ = 0;
  clear_has_m_skillid();
}
inline ::google::protobuf::int32 E_SkillSkillawake::m_skillid() const {
  return m_skillid_;
}
inline void E_SkillSkillawake::set_m_skillid(::google::protobuf::int32 value) {
  set_has_m_skillid();
  m_skillid_ = value;
}

// optional int32 m_costitemid = 2;
inline bool E_SkillSkillawake::has_m_costitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkillawake::set_has_m_costitemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkillawake::clear_has_m_costitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkillawake::clear_m_costitemid() {
  m_costitemid_ = 0;
  clear_has_m_costitemid();
}
inline ::google::protobuf::int32 E_SkillSkillawake::m_costitemid() const {
  return m_costitemid_;
}
inline void E_SkillSkillawake::set_m_costitemid(::google::protobuf::int32 value) {
  set_has_m_costitemid();
  m_costitemid_ = value;
}

// optional int32 m_costnum = 3;
inline bool E_SkillSkillawake::has_m_costnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_SkillSkillawake::set_has_m_costnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_SkillSkillawake::clear_has_m_costnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_SkillSkillawake::clear_m_costnum() {
  m_costnum_ = 0;
  clear_has_m_costnum();
}
inline ::google::protobuf::int32 E_SkillSkillawake::m_costnum() const {
  return m_costnum_;
}
inline void E_SkillSkillawake::set_m_costnum(::google::protobuf::int32 value) {
  set_has_m_costnum();
  m_costnum_ = value;
}

// -------------------------------------------------------------------

// Sheet_SkillSkillawake

// repeated .proto_ff.E_SkillSkillawake E_SkillSkillawake_List = 1;
inline int Sheet_SkillSkillawake::e_skillskillawake_list_size() const {
  return e_skillskillawake_list_.size();
}
inline void Sheet_SkillSkillawake::clear_e_skillskillawake_list() {
  e_skillskillawake_list_.Clear();
}
inline const ::proto_ff::E_SkillSkillawake& Sheet_SkillSkillawake::e_skillskillawake_list(int index) const {
  return e_skillskillawake_list_.Get(index);
}
inline ::proto_ff::E_SkillSkillawake* Sheet_SkillSkillawake::mutable_e_skillskillawake_list(int index) {
  return e_skillskillawake_list_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillawake* Sheet_SkillSkillawake::add_e_skillskillawake_list() {
  return e_skillskillawake_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillawake >&
Sheet_SkillSkillawake::e_skillskillawake_list() const {
  return e_skillskillawake_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillawake >*
Sheet_SkillSkillawake::mutable_e_skillskillawake_list() {
  return &e_skillskillawake_list_;
}

// -------------------------------------------------------------------

// E_SkillSkillgroupSkillDesc

// optional int32 m_position = 1;
inline bool E_SkillSkillgroupSkillDesc::has_m_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillgroupSkillDesc::set_has_m_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillgroupSkillDesc::clear_has_m_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillgroupSkillDesc::clear_m_position() {
  m_position_ = 0;
  clear_has_m_position();
}
inline ::google::protobuf::int32 E_SkillSkillgroupSkillDesc::m_position() const {
  return m_position_;
}
inline void E_SkillSkillgroupSkillDesc::set_m_position(::google::protobuf::int32 value) {
  set_has_m_position();
  m_position_ = value;
}

// optional int32 m_id = 2;
inline bool E_SkillSkillgroupSkillDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkillgroupSkillDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkillgroupSkillDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkillgroupSkillDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SkillSkillgroupSkillDesc::m_id() const {
  return m_id_;
}
inline void E_SkillSkillgroupSkillDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_SkillSkillgroup

// optional int32 m_skillgroup = 1;
inline bool E_SkillSkillgroup::has_m_skillgroup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillSkillgroup::set_has_m_skillgroup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillSkillgroup::clear_has_m_skillgroup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillSkillgroup::clear_m_skillgroup() {
  m_skillgroup_ = 0;
  clear_has_m_skillgroup();
}
inline ::google::protobuf::int32 E_SkillSkillgroup::m_skillgroup() const {
  return m_skillgroup_;
}
inline void E_SkillSkillgroup::set_m_skillgroup(::google::protobuf::int32 value) {
  set_has_m_skillgroup();
  m_skillgroup_ = value;
}

// optional string m_showskilltype = 2;
inline bool E_SkillSkillgroup::has_m_showskilltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillSkillgroup::set_has_m_showskilltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillSkillgroup::clear_has_m_showskilltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillSkillgroup::clear_m_showskilltype() {
  if (m_showskilltype_ != &::google::protobuf::internal::kEmptyString) {
    m_showskilltype_->clear();
  }
  clear_has_m_showskilltype();
}
inline const ::std::string& E_SkillSkillgroup::m_showskilltype() const {
  return *m_showskilltype_;
}
inline void E_SkillSkillgroup::set_m_showskilltype(const ::std::string& value) {
  set_has_m_showskilltype();
  if (m_showskilltype_ == &::google::protobuf::internal::kEmptyString) {
    m_showskilltype_ = new ::std::string;
  }
  m_showskilltype_->assign(value);
}
inline void E_SkillSkillgroup::set_m_showskilltype(const char* value) {
  set_has_m_showskilltype();
  if (m_showskilltype_ == &::google::protobuf::internal::kEmptyString) {
    m_showskilltype_ = new ::std::string;
  }
  m_showskilltype_->assign(value);
}
inline void E_SkillSkillgroup::set_m_showskilltype(const char* value, size_t size) {
  set_has_m_showskilltype();
  if (m_showskilltype_ == &::google::protobuf::internal::kEmptyString) {
    m_showskilltype_ = new ::std::string;
  }
  m_showskilltype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SkillSkillgroup::mutable_m_showskilltype() {
  set_has_m_showskilltype();
  if (m_showskilltype_ == &::google::protobuf::internal::kEmptyString) {
    m_showskilltype_ = new ::std::string;
  }
  return m_showskilltype_;
}
inline ::std::string* E_SkillSkillgroup::release_m_showskilltype() {
  clear_has_m_showskilltype();
  if (m_showskilltype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_showskilltype_;
    m_showskilltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SkillSkillgroup::set_allocated_m_showskilltype(::std::string* m_showskilltype) {
  if (m_showskilltype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_showskilltype_;
  }
  if (m_showskilltype) {
    set_has_m_showskilltype();
    m_showskilltype_ = m_showskilltype;
  } else {
    clear_has_m_showskilltype();
    m_showskilltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.E_SkillSkillgroupSkillDesc m_skill = 3;
inline int E_SkillSkillgroup::m_skill_size() const {
  return m_skill_.size();
}
inline void E_SkillSkillgroup::clear_m_skill() {
  m_skill_.Clear();
}
inline const ::proto_ff::E_SkillSkillgroupSkillDesc& E_SkillSkillgroup::m_skill(int index) const {
  return m_skill_.Get(index);
}
inline ::proto_ff::E_SkillSkillgroupSkillDesc* E_SkillSkillgroup::mutable_m_skill(int index) {
  return m_skill_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillgroupSkillDesc* E_SkillSkillgroup::add_m_skill() {
  return m_skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroupSkillDesc >&
E_SkillSkillgroup::m_skill() const {
  return m_skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroupSkillDesc >*
E_SkillSkillgroup::mutable_m_skill() {
  return &m_skill_;
}

// -------------------------------------------------------------------

// Sheet_SkillSkillgroup

// repeated .proto_ff.E_SkillSkillgroup E_SkillSkillgroup_List = 1;
inline int Sheet_SkillSkillgroup::e_skillskillgroup_list_size() const {
  return e_skillskillgroup_list_.size();
}
inline void Sheet_SkillSkillgroup::clear_e_skillskillgroup_list() {
  e_skillskillgroup_list_.Clear();
}
inline const ::proto_ff::E_SkillSkillgroup& Sheet_SkillSkillgroup::e_skillskillgroup_list(int index) const {
  return e_skillskillgroup_list_.Get(index);
}
inline ::proto_ff::E_SkillSkillgroup* Sheet_SkillSkillgroup::mutable_e_skillskillgroup_list(int index) {
  return e_skillskillgroup_list_.Mutable(index);
}
inline ::proto_ff::E_SkillSkillgroup* Sheet_SkillSkillgroup::add_e_skillskillgroup_list() {
  return e_skillskillgroup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroup >&
Sheet_SkillSkillgroup::e_skillskillgroup_list() const {
  return e_skillskillgroup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillSkillgroup >*
Sheet_SkillSkillgroup::mutable_e_skillskillgroup_list() {
  return &e_skillskillgroup_list_;
}

// -------------------------------------------------------------------

// E_SkillAttgroupAttributeDesc

// optional int64 m_value = 1;
inline bool E_SkillAttgroupAttributeDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillAttgroupAttributeDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillAttgroupAttributeDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillAttgroupAttributeDesc::clear_m_value() {
  m_value_ = GOOGLE_LONGLONG(0);
  clear_has_m_value();
}
inline ::google::protobuf::int64 E_SkillAttgroupAttributeDesc::m_value() const {
  return m_value_;
}
inline void E_SkillAttgroupAttributeDesc::set_m_value(::google::protobuf::int64 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 2;
inline bool E_SkillAttgroupAttributeDesc::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SkillAttgroupAttributeDesc::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SkillAttgroupAttributeDesc::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SkillAttgroupAttributeDesc::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_SkillAttgroupAttributeDesc::m_type() const {
  return m_type_;
}
inline void E_SkillAttgroupAttributeDesc::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// E_SkillAttgroup

// optional int32 m_id = 1;
inline bool E_SkillAttgroup::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SkillAttgroup::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SkillAttgroup::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SkillAttgroup::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SkillAttgroup::m_id() const {
  return m_id_;
}
inline void E_SkillAttgroup::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// repeated .proto_ff.E_SkillAttgroupAttributeDesc m_attribute = 2;
inline int E_SkillAttgroup::m_attribute_size() const {
  return m_attribute_.size();
}
inline void E_SkillAttgroup::clear_m_attribute() {
  m_attribute_.Clear();
}
inline const ::proto_ff::E_SkillAttgroupAttributeDesc& E_SkillAttgroup::m_attribute(int index) const {
  return m_attribute_.Get(index);
}
inline ::proto_ff::E_SkillAttgroupAttributeDesc* E_SkillAttgroup::mutable_m_attribute(int index) {
  return m_attribute_.Mutable(index);
}
inline ::proto_ff::E_SkillAttgroupAttributeDesc* E_SkillAttgroup::add_m_attribute() {
  return m_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroupAttributeDesc >&
E_SkillAttgroup::m_attribute() const {
  return m_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroupAttributeDesc >*
E_SkillAttgroup::mutable_m_attribute() {
  return &m_attribute_;
}

// -------------------------------------------------------------------

// Sheet_SkillAttgroup

// repeated .proto_ff.E_SkillAttgroup E_SkillAttgroup_List = 1;
inline int Sheet_SkillAttgroup::e_skillattgroup_list_size() const {
  return e_skillattgroup_list_.size();
}
inline void Sheet_SkillAttgroup::clear_e_skillattgroup_list() {
  e_skillattgroup_list_.Clear();
}
inline const ::proto_ff::E_SkillAttgroup& Sheet_SkillAttgroup::e_skillattgroup_list(int index) const {
  return e_skillattgroup_list_.Get(index);
}
inline ::proto_ff::E_SkillAttgroup* Sheet_SkillAttgroup::mutable_e_skillattgroup_list(int index) {
  return e_skillattgroup_list_.Mutable(index);
}
inline ::proto_ff::E_SkillAttgroup* Sheet_SkillAttgroup::add_e_skillattgroup_list() {
  return e_skillattgroup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroup >&
Sheet_SkillAttgroup::e_skillattgroup_list() const {
  return e_skillattgroup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SkillAttgroup >*
Sheet_SkillAttgroup::mutable_e_skillattgroup_list() {
  return &e_skillattgroup_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fSkill_2eproto__INCLUDED
