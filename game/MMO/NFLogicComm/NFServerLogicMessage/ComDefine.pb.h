// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComDefine.proto

#ifndef PROTOBUF_ComDefine_2eproto__INCLUDED
#define PROTOBUF_ComDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include "yd_fieldoptions.pb.h"
#include "ServerConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ComDefine_2eproto();
void protobuf_AssignDesc_ComDefine_2eproto();
void protobuf_ShutdownFile_ComDefine_2eproto();


enum PingConfig {
  CLIENT_PING_INTERVAL = 10,
  SERVER_PING_INTERVAL = 10
};
bool PingConfig_IsValid(int value);
const PingConfig PingConfig_MIN = CLIENT_PING_INTERVAL;
const PingConfig PingConfig_MAX = CLIENT_PING_INTERVAL;
const int PingConfig_ARRAYSIZE = PingConfig_MAX + 1;

const ::google::protobuf::EnumDescriptor* PingConfig_descriptor();
inline const ::std::string& PingConfig_Name(PingConfig value) {
  return ::google::protobuf::internal::NameOfEnum(
    PingConfig_descriptor(), value);
}
inline bool PingConfig_Parse(
    const ::std::string& name, PingConfig* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PingConfig>(
    PingConfig_descriptor(), name, value);
}
enum ERoleSex {
  EROLE_SEX_MALE = 1,
  EROLE_SEX_FEMAL = 2
};
bool ERoleSex_IsValid(int value);
const ERoleSex ERoleSex_MIN = EROLE_SEX_MALE;
const ERoleSex ERoleSex_MAX = EROLE_SEX_FEMAL;
const int ERoleSex_ARRAYSIZE = ERoleSex_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor();
inline const ::std::string& ERoleSex_Name(ERoleSex value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoleSex_descriptor(), value);
}
inline bool ERoleSex_Parse(
    const ::std::string& name, ERoleSex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoleSex>(
    ERoleSex_descriptor(), name, value);
}
enum ERoleProf {
  EROLE_PROF_MALE_MASTER = 1,
  EROLE_PROF_FEMALE_MASTER = 2,
  EROLE_PROF_MALE_SICKLE = 3,
  EROLE_PROF_FEMALE_SICKLE = 4,
  EROLE_PROF_MALE_SWORD = 5,
  EROLE_PROF_FEMALE_SWORD = 6,
  EROLE_PROF_MALE_KNIFE = 7,
  EROLE_PROF_FEMALE_KNIFE = 8
};
bool ERoleProf_IsValid(int value);
const ERoleProf ERoleProf_MIN = EROLE_PROF_MALE_MASTER;
const ERoleProf ERoleProf_MAX = EROLE_PROF_FEMALE_KNIFE;
const int ERoleProf_ARRAYSIZE = ERoleProf_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor();
inline const ::std::string& ERoleProf_Name(ERoleProf value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoleProf_descriptor(), value);
}
inline bool ERoleProf_Parse(
    const ::std::string& name, ERoleProf* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoleProf>(
    ERoleProf_descriptor(), name, value);
}
enum CurrencyType {
  VALUE_CURRENCY_NULL = 0,
  VALUE_CURRENCY_SILVER = 1,
  VALUE_CURRENCY_GOLD = 2,
  VALUE_CURRENCY_BIND_GOLD = 3,
  VALUE_CURRENCY_REPUTATION = 5
};
bool CurrencyType_IsValid(int value);
const CurrencyType CurrencyType_MIN = VALUE_CURRENCY_NULL;
const CurrencyType CurrencyType_MAX = VALUE_CURRENCY_REPUTATION;
const int CurrencyType_ARRAYSIZE = CurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor();
inline const ::std::string& CurrencyType_Name(CurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrencyType_descriptor(), value);
}
inline bool CurrencyType_Parse(
    const ::std::string& name, CurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrencyType>(
    CurrencyType_descriptor(), name, value);
}
enum AreaType {
  en_AreaType_Common = 0,
  en_AreaType_Safe = 1,
  en_AreaType_Dup = 2
};
bool AreaType_IsValid(int value);
const AreaType AreaType_MIN = en_AreaType_Common;
const AreaType AreaType_MAX = en_AreaType_Dup;
const int AreaType_ARRAYSIZE = AreaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AreaType_descriptor();
inline const ::std::string& AreaType_Name(AreaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AreaType_descriptor(), value);
}
inline bool AreaType_Parse(
    const ::std::string& name, AreaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AreaType>(
    AreaType_descriptor(), name, value);
}
enum SamplePolyFlags {
  SAMPLE_POLYFLAGS_WALK = 1,
  SAMPLE_POLYFLAGS_SWIM = 2,
  SAMPLE_POLYFLAGS_FORBIT_ACROSS = 4,
  SAMPLE_POLYFLAGS_DOOR = 8,
  SAMPLE_POLYFLAGS_DISABLED = 16,
  SAMPLE_POLYFLAGS_ALL = 65535
};
bool SamplePolyFlags_IsValid(int value);
const SamplePolyFlags SamplePolyFlags_MIN = SAMPLE_POLYFLAGS_WALK;
const SamplePolyFlags SamplePolyFlags_MAX = SAMPLE_POLYFLAGS_ALL;
const int SamplePolyFlags_ARRAYSIZE = SamplePolyFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor();
inline const ::std::string& SamplePolyFlags_Name(SamplePolyFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    SamplePolyFlags_descriptor(), value);
}
inline bool SamplePolyFlags_Parse(
    const ::std::string& name, SamplePolyFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SamplePolyFlags>(
    SamplePolyFlags_descriptor(), name, value);
}
enum MapDefine {
  MAX_NAV_POLYS = 3076,
  MAX_NAV_POINT_VALUE = 1024,
  INVALID_NAVMESH_POLYREF = 0
};
bool MapDefine_IsValid(int value);
const MapDefine MapDefine_MIN = INVALID_NAVMESH_POLYREF;
const MapDefine MapDefine_MAX = MAX_NAV_POLYS;
const int MapDefine_ARRAYSIZE = MapDefine_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapDefine_descriptor();
inline const ::std::string& MapDefine_Name(MapDefine value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapDefine_descriptor(), value);
}
inline bool MapDefine_Parse(
    const ::std::string& name, MapDefine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapDefine>(
    MapDefine_descriptor(), name, value);
}
enum REGION_DEFINE {
  DEFAULT_REGION_WIDTH = 18,
  DEFAULT_REGION_HEIGHT = 18
};
bool REGION_DEFINE_IsValid(int value);
const REGION_DEFINE REGION_DEFINE_MIN = DEFAULT_REGION_WIDTH;
const REGION_DEFINE REGION_DEFINE_MAX = DEFAULT_REGION_WIDTH;
const int REGION_DEFINE_ARRAYSIZE = REGION_DEFINE_MAX + 1;

const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor();
inline const ::std::string& REGION_DEFINE_Name(REGION_DEFINE value) {
  return ::google::protobuf::internal::NameOfEnum(
    REGION_DEFINE_descriptor(), value);
}
inline bool REGION_DEFINE_Parse(
    const ::std::string& name, REGION_DEFINE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REGION_DEFINE>(
    REGION_DEFINE_descriptor(), name, value);
}
enum CharacterDefine {
  MAX_CREATE_CHARACTER_COUNT = 3,
  CHARACTER_NAME_MIN_LENGTH = 4,
  CHARACTER_NAME_MAX_LENGTH = 32
};
bool CharacterDefine_IsValid(int value);
const CharacterDefine CharacterDefine_MIN = MAX_CREATE_CHARACTER_COUNT;
const CharacterDefine CharacterDefine_MAX = CHARACTER_NAME_MAX_LENGTH;
const int CharacterDefine_ARRAYSIZE = CharacterDefine_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor();
inline const ::std::string& CharacterDefine_Name(CharacterDefine value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharacterDefine_descriptor(), value);
}
inline bool CharacterDefine_Parse(
    const ::std::string& name, CharacterDefine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterDefine>(
    CharacterDefine_descriptor(), name, value);
}
enum EItemType {
  EItemType_None = 0,
  EItemType_Equip = 1,
  EItemType_Material = 2,
  EItemType_Other = 3,
  EItemType_Task = 4,
  EItemType_PetEgg = 5,
  EItemType_Pet = 6,
  EItemType_MountEgg = 12,
  EItemType_HandBook = 13,
  EItemType_Limit = 14
};
bool EItemType_IsValid(int value);
const EItemType EItemType_MIN = EItemType_None;
const EItemType EItemType_MAX = EItemType_Limit;
const int EItemType_ARRAYSIZE = EItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemType_descriptor();
inline const ::std::string& EItemType_Name(EItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemType_descriptor(), value);
}
inline bool EItemType_Parse(
    const ::std::string& name, EItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemType>(
    EItemType_descriptor(), name, value);
}
enum EPackageType {
  EPackageType_None = 0,
  EPackageType_Common = 1,
  EPackageType_Storage = 2,
  EPackageType_MountEgg = 3,
  EPackageType_PetEgg = 4,
  EPackageType_DeityEquip = 5,
  EPackageType_HandBook = 6,
  EPackageType_BeastEquip = 7,
  EPackageType_Longhun = 8,
  EPackageType_FindTreasure = 9,
  EPackageType_BigDragon = 10,
  EPackageType_shenji_aq = 11,
  EPackageType_shenji_lj = 12,
  EPackageType_GodEvil = 13,
  EPackageType_star = 14,
  EPackageType_turn = 15,
  EPackageType_MountKun = 16,
  EPackageType_YaoHun = 17,
  EPackageType_MoFa = 18,
  EPackageType_hungu = 19,
  EPackageType_rune = 20,
  EPackageType_Limit = 21
};
bool EPackageType_IsValid(int value);
const EPackageType EPackageType_MIN = EPackageType_None;
const EPackageType EPackageType_MAX = EPackageType_Limit;
const int EPackageType_ARRAYSIZE = EPackageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPackageType_descriptor();
inline const ::std::string& EPackageType_Name(EPackageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPackageType_descriptor(), value);
}
inline bool EPackageType_Parse(
    const ::std::string& name, EPackageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPackageType>(
    EPackageType_descriptor(), name, value);
}
enum EQuality {
  EQuality_white = 1,
  EQuality_green = 2,
  EQuality_blue = 3,
  EQuality_purple = 4,
  EQuality_orange = 5,
  EQuality_red = 6,
  EQuality_gold = 7,
  EQuality_color = 8,
  EQuality_dark = 9,
  EQuality_fairy = 10
};
bool EQuality_IsValid(int value);
const EQuality EQuality_MIN = EQuality_white;
const EQuality EQuality_MAX = EQuality_fairy;
const int EQuality_ARRAYSIZE = EQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuality_descriptor();
inline const ::std::string& EQuality_Name(EQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuality_descriptor(), value);
}
inline bool EQuality_Parse(
    const ::std::string& name, EQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuality>(
    EQuality_descriptor(), name, value);
}
enum EEquipPos {
  EEquipPos_none = 0,
  EEquipPos_m_weapon = 1,
  EEquipPos_s_weapon = 2,
  EEquipPos_hat = 3,
  EEquipPos_clothes = 4,
  EEquipPos_hand = 5,
  EEquipPos_belt = 6,
  EEquipPos_shoe = 7,
  EEquipPos_necklace = 8,
  EEquipPos_bracelet = 9,
  EEquipPos_ring = 10,
  EEquipPos_guard1 = 11,
  EEquipPos_guard2 = 12,
  EEquipPos_jade = 13,
  EEquipPos_marry = 14,
  EEquipPos_limit = 15
};
bool EEquipPos_IsValid(int value);
const EEquipPos EEquipPos_MIN = EEquipPos_none;
const EEquipPos EEquipPos_MAX = EEquipPos_limit;
const int EEquipPos_ARRAYSIZE = EEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor();
inline const ::std::string& EEquipPos_Name(EEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEquipPos_descriptor(), value);
}
inline bool EEquipPos_Parse(
    const ::std::string& name, EEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEquipPos>(
    EEquipPos_descriptor(), name, value);
}
enum EConst {
  EConst_RelationRecentSize = 20,
  EConst_RelationFriendSize = 21,
  EConst_RelationHateSize = 22,
  EConst_RelationBlackSize = 23,
  EConst_DieReduceKillValue = 25,
  EConst_Dup_Sweep = 26,
  EConst_ServerUpdateTime = 34,
  EConst_ChgNameItemId = 61,
  EConst_KillAddKillValue = 66,
  EConst_WorldChatLevLimit = 75,
  EConst_CrossChatLevLimit = 76,
  EConst_CrossChatCost = 113,
  EConst_OnlineReduceKillValue = 118,
  EConst_WorldChannelNeedPay = 142,
  EConst_CreateUnionNeedPay = 143,
  EConst_SceneChatLevLimit = 146,
  EConst_TeamEnList_CostBindDia = 149,
  EConst_RoleSkillPubCd = 181,
  EConst_GodSkillPubCd = 182,
  EConst_PetSkillPubCd = 183,
  EConst_SkillGroupChgCd = 190,
  EConst_CorpseTime = 192,
  EConst_BossCorpseTime = 193,
  EConst_DropProtectSec = 195,
  EConstTiredReliveNum = 200,
  EConstTiredContiSec = 201,
  EConstTiredReliveSec = 202,
  EConst_ImmediateReliveCostItem = 203,
  EConst_ImmediateReliveCost = 206,
  EConst_PackageMountEggSlotNum = 214,
  EConst_MountDuHua_ActiveSlot = 215,
  EConst_MountDuHua_TimeGoldCost = 216,
  EConst_MountDuHua_TimeItemCost = 217,
  EConst_AutoPickDropSec = 231,
  EConst_PartnerFllowDistance = 232,
  EConst_PartnerTeleportDistance = 233,
  EConst_ArenaResultTime = 234,
  EConst_ArenaChallengTimes = 235,
  EConst_ArenaVipChallengTimes = 236,
  EConst_SkillAdvanceUnlockCost = 240,
  EConst_SkillAdvanceResetCost = 241,
  EConst_TeamMemCountExpAdd = 242,
  EConst_Pet_hatch_cost = 249,
  EConst_GodEvilNoticeReward = 252,
  EConst_GodEvilActiveReward = 253,
  EConst_GodEvilChgFacadeCd = 254,
  EConst_Pet_atk = 266,
  EConst_Armor = 267,
  EConst_GodEvilGodChgSkill = 269,
  EConst_GodEvilEvilChgSkill = 270,
  EConst_TalentPointLev = 272,
  EConst_TalentRestItem = 273,
  EConst_RedNameSkill = 276,
  EConst_PvpStateTime = 277,
  EConst_YellowNameTime = 278,
  EConst_1v1DailyRewardNum = 291,
  EConst_XiuZhenRoadPet = 296,
  EConst_1v1RankScoreNeed = 300,
  EConst_WorldLvAddEffect = 302,
  EConst_ExpandItem = 306,
  EConst_SubpackReward = 307,
  EConst_ExpandMallId = 308,
  EConst_GodEvilWearQuaLvExp = 314,
  EConst_GodEvilQuaLvMallId = 316,
  EConst_boss_sg_rtime = 319,
  EConst_PlotParam = 327,
  EConst_OneKeyFinishGuildMissionCost = 1000,
  EConst_OnceFinishTaskCost = 1001
};
bool EConst_IsValid(int value);
const EConst EConst_MIN = EConst_RelationRecentSize;
const EConst EConst_MAX = EConst_OnceFinishTaskCost;
const int EConst_ARRAYSIZE = EConst_MAX + 1;

const ::google::protobuf::EnumDescriptor* EConst_descriptor();
inline const ::std::string& EConst_Name(EConst value) {
  return ::google::protobuf::internal::NameOfEnum(
    EConst_descriptor(), value);
}
inline bool EConst_Parse(
    const ::std::string& name, EConst* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EConst>(
    EConst_descriptor(), name, value);
}
enum ERetCode {
  RET_SUCCESS = 0,
  RET_FAIL = 1,
  RET_LEVEL_LACK = 2,
  RET_MONEY_LACK = 3,
  RET_GOLD_LACK = 4,
  RET_BIND_GOLD_LACK = 5,
  RET_DIAMOND_LACK = 6,
  RET_BIND_DIAMOND_LACK = 7,
  RET_VIP_LEVEL_LACK = 8,
  RET_PROF_ERROR = 10,
  RET_PLAYER_NOT_ONLINE = 11,
  RET_CONTRI_LACK = 12,
  RET_OCCUPATION_LEV_LACK = 13,
  RET_NOT_ONLINE = 14,
  RET_DATA_ERROR = 15,
  RET_NOT_HAVE_CHARACTER = 16,
  RET_BAG_FULL = 17,
  RET_PARMAR_ERROR = 18,
  RET_CONFIG_ERROR = 19,
  RET_OTHER_LEVEL_LACK = 20,
  RET_ID_UNKNOW = 21,
  RET_REPEATED_OPERATE = 22,
  RET_UNAVAILABLE = 23,
  RET_FIGHT_LACK = 24,
  RET_OPEN_DAY_LIMIT = 25,
  RET_OVER_MAX_NUM = 26,
  RET_OTHER_NOT_ONLINE = 28,
  RET_ITEM_PARAM_ERROR = 34,
  RET_CAN_NOT_RECONNECT = 35,
  RET_DISALLOW_ENTER_GAME = 36,
  RET_MATERIAL_LACK = 37,
  RET_MAGIC_LACK = 38,
  RET_PRESTIGE_LACK = 39,
  RET_FUNC_NOT_OPEN = 40,
  RET_LLLEGAL_OPT = 41,
  RET_CURRENCY_LEAK = 42,
  RET_LEAVE_MAX = 43,
  RET_LOGIN_BAD_USER_NAME_LEN = 100,
  RET_LOGIN_CHARACTER_NOT_EXITS = 101,
  RET_LOGIN_ACCOUNT_OTHER_LOGIN = 102,
  RET_LOGIN_CHARACTER_NUM_LIMIT = 103,
  RET_LOGIN_CHARACTER_NAME_EXISTS = 104,
  RET_LOGIN_CHARACTER_SEX_ERROR = 105,
  RET_LOGIN_CHARACTER_PROF_ERROR = 106,
  RET_LOGIN_CHARACTER_NAME_LEN_ERROR = 107,
  RET_LOGIN_CHARACTER_CREATE_FAILED = 108,
  RET_LOGIN_CHARACTER_NOT_ACCOUNT = 109,
  RET_LOGIN_CHARACTER_ILLEGAL = 110,
  RET_LOGIN_CHARACTER_VESION_ERR = 111,
  RET_LOGIN_ACCOUNT_SYSTEM_MAINTENANCE = 112,
  RET_LOGIN_ILLEGAL_REQUEST = 113,
  RET_LOGIN_CHANNEL_FAIL = 114,
  RET_LOGIN_ORBIDDEN_ACCOUNT = 115,
  RET_LOGIN_QUEUE_ENOUGHT_NUM = 116,
  RET_LOGIN_HAS_DELETE_CHAR = 117,
  RET_LOGIN_TIME_OUT = 118,
  RET_TOKEN_ERROR = 119,
  RET_ACCOUNT_FULL = 120,
  RET_NOT_OPEN_TIME = 121,
  RET_CAN_NOT_RETURN_ROLE_LIST = 122,
  RET_LOGIN_TOKEN_ERROR = 123,
  RET_SCENE_DST_NOT_EXIST = 200,
  RET_SCENE_INVALID_DST_POS = 201,
  RET_SCENE_CAN_NOT_TRAN = 202,
  RET_SCENE_TRANS_PARAM_ERROR = 203,
  RET_MAIL_SEND_TARGET_ERROR = 300,
  RET_MAIL_DATA_ERROR = 301,
  RET_MAIL_NOT_EXIST = 302,
  RET_MAIL_NOT_HAVE_ATTACHMENT = 303,
  RET_MAIL_GOODS_NUM_LIMIT = 304,
  RET_MAIL_TOPIC_LEN_LIMIT = 305,
  RET_MAIL_ALREADY_FETCH = 306,
  RET_MAIL_ATTATCH_COUNT_LIMIT = 307,
  RET_MAIL_ALREDAY_EXPIRE = 308,
  RET_MAIL_HAS_NOT_BEGIN_TIME = 309,
  RET_PACKAGE_ITEM_NOT_EXITS = 401,
  RET_PACKAGE_ITEM_CAN_NOT_SELL = 402,
  RET_PACKAGE_ITEM_NUM_LACK = 403,
  RET_PACKAGE_ITEM_CAN_NOT_USE = 404,
  RET_PACKAGE_ITEM_CAN_NOT_BATCH_USE = 405,
  RET_PACKAGE_EXPAND_LIMIT = 406,
  RET_PACKAGE_ITEM_FUNC_PARAM_ERR = 407,
  RET_PACKAGE_SORT_IN_COOL = 408,
  RET_PACKAGE_COMMON_SPACE_NOT_ENOUGH = 409,
  RET_PACKAGE_STORAGE_SPACE_NOT_ENOUGH = 410,
  RET_PACKAGE_HP_FULL = 417,
  RET_PACKAGE_WAITING = 421,
  RET_PACKAGE_USE_HANGUP_CARD_MAX = 433,
  RET_PACKAGE_LACK_CHANGE_NAME_ITEM = 436,
  RET_PACKAGE_USE_ITEM_NOT_REMOVE = 437,
  RET_PACKAGE_FUSHI_CARD_MAX = 438,
  RET_PACKAGE_SELECT_ITEM_NOT_EXIST = 439,
  RET_PACKAGE_TASK_SPACE_NOT_ENOUGH = 440,
  RET_PACKAGE_STAR_SPACE_NOT_ENOUGH = 441,
  RET_PACKAGE_SOUL_SPACE_NOT_ENOUGH = 442,
  RET_PACKAGE_FAIMATERI_SPACE_NOT_ENOUGH = 443,
  RET_PACKAGE_FAICRYSTAL_SPACE_NOT_ENOUGH = 444,
  RET_PACKAGE_SYMBOL_SPACE_NOT_ENOUGH = 445,
  RET_PACKAGE_BOSSIDENTIFY_SPACE_NOT_ENOUGH = 446,
  RET_PACKAGE_FAILIDENTIFY_SPACE_NOT_ENOUGH = 447,
  RET_PACKAGE_USE_NOT_HAVE_PK_VALUE = 448,
  RET_PACKAGE_ITEM_USE_LIMIT = 449,
  RET_PACKAGE_ITEM_LOGIN_GIFT_FETCHED = 450,
  RET_PACKAGE_USE_ITEM_MAP_LIMIT = 451,
  RET_PACKAGE_PET_SPACE_NOT_ENOUGH = 452,
  RET_PACKAGE_GODEVIL_SPACE_NOT_ENOUGH = 453,
  RET_PACKAGE_RUNE_SPACE_NOT_ENOUGH = 454,
  RET_GROW_PART_ENTRY_LEVEL_FULL = 500,
  RET_GROW_PART_NOT_ACTIVE = 501,
  RET_GROW_PART_EXPIRE = 502,
  RET_PLAYER_SEAT_STATE_ERROR = 510,
  RET_PLAYER_SEAT_MAP_NOT_SEAT = 511,
  RET_PLAYER_SEAT_NO_TIME = 512,
  RET_FACADE_UNACTIVE = 550,
  RET_FACADE_MAX_LEVEL = 551,
  RET_FACADE_HAVE_DRESS = 552,
  RET_FACADE_HAVE_NOT_DRESS = 553,
  RET_FACADE_FRAGMENT_USE_LIMIT = 554,
  RET_FACADE_NOT_BREAK = 555,
  RET_FACADE_ALREADY_BREAK = 556,
  RET_FACADE_SOUL_NO_SKILL_RESET = 557,
  RET_FACADE_SOUL_LEVELUP_FAIL_LEVEL_RAIL = 558,
  RET_FACADE_SOUL_LEVELUP_FAIL = 559,
  RET_GM_NOT_KEY = 601,
  RET_GM_PRAMA_COUNT_ERROR = 602,
  RET_GM_NOT_FIND = 603,
  RET_EQUIP_NOT_EXIST = 620,
  RET_EQUIP_POS_NOT_EXIT_EQUIP = 621,
  RET_EQUIP_STRONG_MAX = 622,
  RET_EQUIP_TOTAL_LV_MAX = 623,
  RET_EQUIP_ISNOT_STONE = 624,
  RET_EQUIP_GEM_INLAY_TYPE_ERR = 625,
  RET_EQUIP_GEM_POS_ERR = 626,
  RET_EQUIP_STONE_SLOT_UNLOCK = 627,
  RET_EQUIP_STONE_LV_MAX = 628,
  RET_EQUIP_TOTAL_LACK = 629,
  RET_STONE_TYPE_ERR = 630,
  RET_WASH_POS_IS_ACTIVE = 631,
  RET_WASH_LOCK_MAX = 632,
  RET_EQUIP_SUIT_LV_MAX = 633,
  RET_EQUIP_SUIT_LV_LACK = 634,
  RET_EQUIP_SUIT_NOT_QUALITY_ENOUGH = 635,
  RET_EQUIP_SUIT_LV_NOT_OTHER_FULL = 636,
  RET_EQUIP_REFINE_LV_MAX = 637,
  RET_EQUIP_REFINE_UNLOCK_LV_LACK = 638,
  RET_EQUIP_REFINE_UNLOCKED = 639,
  RET_EQUIP_AWAKEN_MAX = 640,
  RET_EQUIP_SOARING_MAX = 641,
  RET_EQUIP_SOARING_QUALITY_LACK = 642,
  RET_EQUIP_QUALITY_LV_MAX = 643,
  RET_EQUIP_QUALITY_WEAR_QULITY_LACK = 644,
  RET_EQUIP_SEAL_POS_ERR = 645,
  RET_EQUIP_SEAL_INLAY_COND_LACK = 646,
  RET_EQUIP_SEAL_LV_MAX = 647,
  RET_EQUIP_SEAL_LV_LEAK = 649,
  RET_EQUIP_SEAL_INLAY_NOT_FULL = 650,
  RET_EQUIP_SEAL_SUIT_HAS_ACTIVED = 651,
  RET_EQUIP_SEAL_SUIT_NUM_LACK = 652,
  RET_EQUIP_EXPIRE = 653,
  RET_MISSION_HAVE_ACCEPT = 700,
  RET_MISSION_CAN_NOT_ACCEPT = 701,
  RET_MISSION_LEVEL_ERROR = 702,
  RET_MISSION_NOT_EXIST = 703,
  RET_MISSION_STATE_NOT_MATCH = 704,
  RET_MISSION_PROFESSION_LIMIT = 705,
  RET_MISSION_TIMES_ERROR = 706,
  RET_MISSION_HAVE_ACCEPT_NUMBER_LIMIT = 707,
  RET_MISSION_GROUP_LIMIT = 708,
  RET_MISSION_NOT_ABANDON = 709,
  RET_MISSION_PERIOD_FINISH_NUM_LIMIT = 710,
  RET_MISSION_PERIOD_ONCE_EXIST_NUM_LIMIT = 711,
  RET_MISSION_HAVE_TYPE_ACCEPT = 712,
  RET_MISSION_CAN_NOT_ONE_KEY = 713,
  RET_MISSION_ONE_KEY_NUM_LIMIT = 714,
  RET_MISSION_NOT_FINISH = 715,
  RET_MISSION_NOT_ACCEPT_UNION = 716,
  RET_MISSION_CAN_NOT_ONCE_FINISH = 717,
  RET_MISSION_ALREADY_SUBMIT = 718,
  RET_MISSION_GUILD_PRESTIGE_ACCEPT_NUM = 719,
  RET_MISSION_GUILD_PRESTIGE_FRESH_NUM = 720,
  RET_MISSION_GUILD_PRESTIGE_STATE_ERROR = 721,
  RET_MISSION_GUILD_PRESTIGE_REFRESH_NOT_FINISH = 723,
  RET_MISSION_FUNCTION_UNLOCK_LIMIT = 724,
  RET_MISSION_NOT_ACCEPT_SPEC = 725,
  RET_RELATION_HAVE_APPLY = 800,
  RET_RELATION_NOT_AGREE = 801,
  RET_RELATION_CAN_NOT_APPLY_SELF = 802,
  RET_RELATION_APPLY_GROUP_ERROR = 803,
  RET_RELATION_NOT_ADD_SELF = 804,
  RET_RELATION_NOT_IN_APPLY = 805,
  RET_RELATION_SIZE_LIMIT_NO_APPLY = 806,
  RET_RELATION_SIZE_LIMIT_NO_APPLY_OTHER = 807,
  RET_RELATION_IS_MY_FRIEND = 808,
  RET_RELATION_SIZE_LIMIT_NO_ADD = 809,
  RET_RELATION_SIZE_LIMIT_NO_ADD_OTHER = 810,
  RET_RELATION_ADD_BLACK_MYSELF = 811,
  RET_RELATION_BALCK_SIZE_LIMIT = 812,
  RET_RELATION_IN_YOUR_BALCK = 813,
  RET_RELATION_IN_OTHER_BALCK = 814,
  RET_RELATION_IN_OTHER_BALCK_CAN_NOT_APPLY = 815,
  RET_RELATION_IN_YOUR_BALCK_CAN_NOT_APPLY = 816,
  RET_RELATION_NOT_SEARCH = 817,
  RET_RELATION_NOT_FRIENDS = 818,
  RET_RELATION_CANOT_ADDFRIEND_TO_BLACK = 819,
  RET_RELATION_GIVE_PHYSICAL_TIMES_LIMIT = 820,
  RET_RELATION_GET_PHYSICAL_TIME_LIMTI = 821,
  RET_RELATION_NOT_GET_PHYSICAL = 822,
  RET_RELATION_HAVE_GET_PHYSICAL = 823,
  RET_RELATION_GET_PHYSICAL_GIFT_LIMIT = 824,
  RET_RELATION_IN_CD_TIME = 825,
  RET_RELATION_TRACK_HATE_ERROR = 826,
  RET_RELATION_GIFT_TO_MAIL = 827,
  RET_RELATION_HAVE_NO_DATA = 828,
  RET_RELATION_MARRY_REFUSE = 829,
  RET_RELATION_HAS_MARRY = 830,
  RET_RELATION_TARGET_HAS_MARRY = 831,
  RET_RELATION_NOT_MARRY = 832,
  RET_RELATION_CLOSENESS_NOT_ENOUGH = 833,
  RET_RELATION_CAN_NOT_DELETE_SPOUSE = 834,
  RET_RELATION_HAVE_PROPOSE_MARRY = 835,
  RET_RELATION_EXIST_SHIELD = 836,
  RET_RELATION_WAIT_DBDATA = 837,
  RET_RELATION_GIFT_NOT_FRIEND = 838,
  RET_RELATION_GIFT_ERROR = 839,
  RET_RELATION_NOT_HAVE_DATE = 840,
  RET_CHAT_NOT_MYSELF = 900,
  RET_CHAT_TARGET_NOT_ONLINE = 901,
  RET_CHAT_TARGET_IN_BLACK = 902,
  RET_CHAT_QUREY_CHAR_NOT_EXITS = 903,
  RET_CHAT_FREE_TIMES_LIMIT = 904,
  RET_CHAT_FREE_GOODS_LIMIT = 905,
  RET_CHAT_CD_TIME_LIMIT = 906,
  RET_CHAT_BIG_HORN_LIMIT = 907,
  RET_CHAT_CD_NoSpeakIng = 908,
  RET_CHAT_PAY_RMB_LIMIT = 909,
  RET_CHAT_COND_LIMIT = 910,
  RET_DUPLICATE_CAN_NOT_ENTER = 920,
  RET_DUPLICATE_ALREAY_IN = 921,
  RET_DUPLICATE_RELIVE_NO_DEAD = 922,
  RET_DUPLICATE_PRE_NOT_PASS = 923,
  RET_DUPLICATE_MAX_LEVEL_LIMIT = 924,
  RET_DUPLICATE_CAN_NOT_LEAVE = 925,
  RET_DUPLICATE_LACK_ENTER_NUM = 926,
  RET_DUPLICATE_NOT_IN_TEAM = 927,
  RET_DUPLICATE_NOT_TEM_LEADER = 928,
  RET_DUPLICATE_PLAYER_NUM_LIMIT = 929,
  RET_DUPLICATE_RELIVE_NUM_LIMIT = 930,
  RET_DUPLICATE_BUY_NUM_LIMIT = 931,
  RET_DUPLICATE_ALREADY_PASS = 932,
  RET_DUPLICATE_NOT_IN_DUPLICATE = 933,
  RET_DUPLICATE_TEAM_NOT_INVITE = 934,
  RET_DUPLICATE_TEAM_NOT_REPLY = 935,
  RET_DUPLICATE_TEAM_ALREADY_REPLY = 936,
  RET_DUPLICATE_TEAM_MEM_ALREADY_IN = 937,
  RET_DUPLICATE_TEAM_MEM_NOT_ONLINE = 938,
  RET_DUPLICATE_TEAM_MEM_NOT_AGREE = 939,
  RET_DUPLICATE_NOT_EXISTS = 940,
  RET_DUPLICATE_CAN_NOT_RELIVE = 941,
  RET_DUPLICATE_ALREDY_DEAD = 942,
  RET_DUPLICATE_LACK_GROUP_ENTER_NUM = 943,
  RET_DUPLICATE_CAN_NOT_SEEP = 944,
  RET_DUPLICATE_STAR_LIMIT = 945,
  RET_DULICATE_SWEEP_ITEM_LACK = 946,
  RET_DUPLICATE_TEAMDUP_NOT_ALLOW = 947,
  RET_DUPLICATE_CAN_NOT_INSPIRE = 948,
  RET_DUPLICATE_INSPIRE_NUM_LIMIT = 949,
  RET_DUPLICATE_SWEEP_NOT_SET_INSPIRE = 950,
  RET_DUPLICATE_TEAM_MEM_DEAD = 951,
  RET_DUPLICATE_TEAM_DIE_NOT_REPLY = 952,
  RET_DUPLICATE_TEAM_MEM_SPECIAL_MAP = 953,
  RET_DUPLICATE_ALREDAY_END = 954,
  RET_DUPLICATE_NOT_OPEN = 955,
  RET_DUPLICATE_ALREADY_OPEN = 956,
  RET_DUPLICATE_HAS_NO_OPEN = 957,
  RET_DUPLICATE_IN_CREATE = 958,
  RET_DUPLICATE_CAN_NOT_RESET = 959,
  RET_DUPLICATE_LAYER_ALL_FETCHED = 960,
  RET_DUPLICATE_PALACE_LAYER_FETCHED = 961,
  RET_DUPLICATE_NO_PALACE_REWARD = 962,
  RET_DUPLICATE_TEAM_MEM_NO_UNION = 963,
  RET_DUPLICATE_TEAM_MEM_NOT_SAME_UNION = 964,
  RET_DUPLICATE_TEAM_NOT_SAME_UNION = 965,
  RET_DUPLICATE_MAX_PALACE_LAYER_LIMIT = 966,
  RET_DUPLICATE_TEAM_MEM_NOT_IN_DUP = 967,
  RET_DUPLICATE_PALACE_LAYER_UNUSUAL = 968,
  RET_DUPLICATE_IS_OVER = 969,
  RET_DUPLICATE_BT_DRAGON_NOT_ENTER = 970,
  RET_DUPLICATE_NO_ENTER_BT_DRAGON = 971,
  RET_DUPLICATE_NO_TEAM_NOT_ENTER = 972,
  RET_DUPLICATE_IN_DUP_NOT_INVITE = 973,
  RET_DUP_SWEEP_NO3_STAR = 974,
  RET_DUP_SWEEP_NO_PASS = 975,
  RET_DUP_SWEEP_FIGHT_LACK = 976,
  RET_DUPLICATE_NO_BUY_BT_DRAGON = 977,
  RET_SKILL_IN_CD = 1000,
  RET_SKILL_CAN_NOT_USE = 1001,
  RET_SKILL_TARGET_NOT_EXIST = 1002,
  RET_SKILL_IN_GROUP_CD = 1003,
  RET_SKILL_IN_FACADE_CD = 1004,
  RET_SKILL_NOT_EXIST = 1005,
  RET_SKILL_LEV_MAX = 1006,
  RET_SKILL_ALREADY_WAKE_UP = 1007,
  RET_SKILL_INVALID_POS = 1008,
  RET_SKILL_CAN_NOT_CHG_POS = 1009,
  RET_SKILL_ALREADY_IN_POS = 1010,
  RET_SKILL_ADVANCE_LEV_LIMIT = 1011,
  RET_SKILL_ADVANCE_NOT = 1012,
  RET_SKILL_ADVANCE_NOT_RESET = 1013,
  RET_SKILL_IN_GOD_STATE = 1014,
  RET_SKILL_TALENT_CNT_LACK = 1015,
  RET_SKILL_TALENT_LEV_MAX = 1016,
  RET_SKILL_TALENT_PRE_LEV_LIMIT = 1017,
  RET_SKILL_TALENT_CAN_NOT_UPGRADE = 1018,
  RET_SKILL_ANGER_NOT_FULL = 1019,
  RET_PLAYER_TIRED_STATE = 1101,
  RET_PLAYER_NOT_DEAD = 1102,
  RET_PLAYER_CAN_NOT_RELIVE = 1103,
  RET_PLAYER_MAP_NOT_RELIVE = 1104,
  RET_PLAYER_RELIVE_NUM_LIMIT = 1105,
  RET_PLAYER_IN_PVP_STATE = 1106,
  RET_TEAM_ALREADY_JOIN = 1700,
  RET_TEAM_OTHER_ALREADY_JOIN = 1701,
  RET_TEAM_OBJECT_NOT_CHANGE = 1702,
  RET_TEAM_REPEAT_JOIN = 1703,
  RET_TEAM_NO_EXIST = 1704,
  RET_TEAM_FULL = 1705,
  RET_TEAM_HAVE_APPLICANT = 1706,
  RET_TEAM_INVALID_APPLICANT = 1707,
  RET_TEAM_NOT_MEMBER = 1708,
  RET_TEAM_SETTING_LV_ERROR = 1709,
  RET_TEAM_NO_AUTO_MATCH = 1710,
  RET_TEAM_HAVE_AUTO_MATCH = 1711,
  RET_TEAM_NOT_LEADER = 1712,
  RET_TEAM_DUP_NOT_AUTO_MATCH = 1713,
  RET_TEAM_MAP_CAN_NOT_OPERATE = 1714,
  RET_TEAM_MAP_OTHER_CAN_NOT_OPERATE = 1715,
  RET_TEAM_MAP_SELF_IN_SPECIAL = 1716,
  RET_TEAM_MAP_OTHER_IN_SPECIAL = 1717,
  RET_TEAM_MAP_TARGET_IN_MATCH = 1718,
  RET_TEAM_OBJECT_CAN_NOT_OPERATE = 1719,
  RET_TEAM_NOT_FULL = 1720,
  RET_TEAM_NOT_PROMOTE_LEADER = 1721,
  RET_TEAM_IN_MATCH_NOT_OPERATE = 1722,
  RET_TEAM_INVALID_OBJECT = 1723,
  RET_USE_ITEM_DAY_LIMIT = 1800,
  RET_FACTION_ALREADY_JOIN = 1900,
  RET_FACTION_NAME_ALREAY_EXISTS = 1901,
  RET_FACTION_NAME_LEN_LIMIT = 1902,
  RET_FACTION_NOTICE_LEN_LIMIT = 1903,
  RET_FACTION_NOT_EXISTS = 1904,
  RET_FACTION_NOT_JOIN = 1905,
  RET_FACTION_NOT_LEADER = 1906,
  RET_FACTION_SET_PARAM_ERROR = 1907,
  RET_FACTION_MEMBER_COUNT_LIMIT = 1908,
  RET_FACTION_HAS_NO_PERMISSION = 1909,
  RET_FACTION_APPLY_NOT_EXISTS = 1910,
  RET_FACTION_OTHER_ALREDY_JOIN = 1911,
  RET_FACTION_OTHER_NOT_JOIN = 1912,
  RET_FACTION_OTHER_ALREDY_JOIN_OTHER = 1913,
  RET_FACTION_CAN_NOT_TRANS_SELF = 1914,
  RET_FACTION_CAN_NOT_TRANS_NO_VICE = 1915,
  RET_FACTION_LEADER_CAN_NOT_EXIT = 1916,
  RET_FACTION_ALREDAY_SAME_DUTY = 1917,
  RET_FACTION_ALREADY_COMMOM_MEMBER = 1918,
  RET_FACTION_INVALID_DUTY = 1919,
  RET_FACTION_NOTICE_INTER_SEC_LIMIT = 1920,
  RET_FACTION_DUTY_COUNT_LIMIT = 1921,
  RET_FACTION_CHG_NAME_SAME_NAME = 1922,
  RET_FACTION_CHG_NAME_LACK_ITEM = 1923,
  RET_FACTION_FORBID_JOIN = 1924,
  RET_FACTION_NAME_NO_CHG = 1925,
  RET_FACTION_DONATE_NUM_LIMIT = 1926,
  RET_FACTION_ALREADY_FETCH_SALARY = 1927,
  RET_FACTION_CAN_NOT_FETCH_SALARY = 1928,
  RET_FACTION_OTHER_IN_TRANS = 1929,
  RET_FACTION_IN_TRANS = 1930,
  RET_FACTION_OTHER_NOT_IN_SCENE = 1931,
  RET_FACTION_NOT_IN_SCENE = 1932,
  RET_FACTION_TRANS_ALREADY_INVITE = 1933,
  RET_FACTION_TRANS_OTHER_NOT_INVITE_SELF = 1934,
  RET_FACTION_CAN_NOT_ENTER_TRANS = 1935,
  RET_FACTION_OTHER_CAN_NOT_ENTER_TRANS = 1936,
  RET_FACTION_SKILL_FULL_LEV = 1937,
  RET_FACTION_LEV_LIMIT = 1938,
  RET_FACTION_PRE_SKILL_LEV_LACK = 1939,
  RET_FACTION_CAN_NOT_DISMISS_IN_FACTION_ACT = 1940,
  RET_FACTION_BEAST_ALREADY_OPEN = 1941,
  RET_FACTION_BEAST_TRIBUTE_LACK = 1942,
  RET_FACTION_BEAST_OPEN_COUNT_LIMIT = 1943,
  RET_FACTION_BEAST_NOT_OPEN = 1944,
  RET_FACTION_CAN_NOT_QUIT_IN_BEAST_DUP = 1945,
  RET_FACTION_NOT_FACTION_MEMBER = 1946,
  RET_FACTION_WAR_RACE_LOCK = 1947,
  RET_FACTION_CAN_NOT_QUIT_IN_FACTION_ACT = 1948,
  RET_FACTION_NOT_WIN_FACTION_MEM = 1949,
  RET_FACTION_ALREADY_FETCH_WAR_WIN_REWARD = 1950,
  RET_FACTION_GUARD_ALREAD_JOIN_NOT_AGAIN = 1951,
  RET_ARENA_CAN_NOT_CHALL_MYSELF = 2000,
  RET_ARENA_CAN_NOT_CHALL_TYPE_ERROR = 2001,
  RET_ARENA_CAN_NOT_CHALL_DST = 2002,
  RET_ARENA_CAN_NOT_CHALL_RANK_CHANGE = 2003,
  RET_ARENA_CAN_NOT_CHALL_DST_IN_BECHALL = 2004,
  RET_ARENA_CHALL_TIMES_LIMIT = 2005,
  RET_ARENA_SCORE_LACK = 2006,
  RET_ARENA_IN_CHALLING = 2007,
  RET_ARENA_DEAD_LIMIT = 2008,
  RET_MOUNT_BABY_EGG_SLOT_ERROR = 2050,
  RET_MOUNT_BABY_EGG_SLOT_STATE_ERROR = 2051,
  RET_MOUNT_BABY_EGG_ITEM_EROR = 2052,
  RET_MOUNT_BABY_EGG_TIMEOUT_ERROR = 2053,
  RET_MOUNT_UNACTIVE = 2054,
  RET_MOUNT_UNUSE_STATE = 2055,
  RET_MOUNT_LEVEL_MAX = 2056,
  RET_MOUNT_UNSELECT = 2057,
  RET_MOUNT_HAVE_SELECT_THIS = 2058,
  RET_MOUNT_HAVE_RIDEON = 2059,
  RET_MOUNT_HAVE_RIDEOFF = 2060,
  RET_MOUNT_KUN_MAX_WAKE_LEVEL = 2061,
  RET_MOUNT_TIWU_WIN_PROB_FAIL = 2062,
  RET_MALL_CAN_NOT_BUY = 2100,
  RET_MALL_LEV_LIMIT = 2101,
  RET_MALL_VIP_LIMIT = 2102,
  RET_MALL_NUM_LIMIT = 2103,
  RET_MALL_NO_ITEM = 2104,
  RET_BATTLE_SLOT_CD_ERROR = 2201,
  RET_BATTLE_SLOT_NOT_EXIST = 2202,
  RET_BATTLE_SLOT_NO_DEITY = 2203,
  RET_BATTLE_SLOT_NOT_UNLOCK = 2204,
  RET_BATTLE_SLOT_HAS_DEITY = 2205,
  RET_DEITY_NOT_EXITST = 2206,
  RET_DEITY_MAX_LEVEL = 2207,
  RET_DEITY_MAX_STAR = 2208,
  RET_DEITY_EQUP_QUALITY_max = 2209,
  RET_ENCYLOPSEDDIA_HOOD_BOOK_EXIST = 2250,
  RET_ENCYLOPSEDDIA_HOOD_BOOK_NOT_EXIST = 2251,
  RET_ENCYLOPSEDDIA_HOOD_BOOK_MAX_LEVEL = 2252,
  RET_ENCYLOPSEDDIA_HOOD_BOOK_FLEETS_EXIST = 2253,
  RET_ENCYLOPSEDDIA_HOOD_BOOK_EMPLOY_NOT_EXIST = 2254,
  RET_ENCYLOPSEDDIA_HOOD_BOOK_EMPLOY_NOT_CAN_AVTIVE = 2255,
  RET_BOSS_DRIVE_FULL = 2550,
  RET_HATCH_SLOT_UNLOCK = 2570,
  RET_HATCH_HAS_EGG = 2571,
  RET_HATCH_SLOT_IS_LOCK = 2572,
  RET_HATCH_NO_TO_TIME = 2573,
  RET_HATCH_NOT_ALL_OPEN = 2574,
  RET_PET_FETTER_IS_ACTIVE = 2575,
  RET_PET_NOT_HAS_PET = 2576,
  RET_PET_IS_MAX = 2577,
  RET_PET_LV_MAX = 2578,
  RET_PET_STEPLV_MAX = 2579,
  RET_PET_STARLV_MAX = 2580,
  RET_PET_STAR_COST_PET_NO_ENGOUTH = 2581,
  RET_PET_FIGHT_NOT_REST = 2582,
  RET_PET_IS_NO_GROW_NOT_REST = 2583,
  RET_PET_RES_PETMAX = 2584,
  RET_PET_NOT_DECOMPOSE = 2585,
  RET_PET_NOT_CAN_STAR = 2586,
  RET_PET_REPEATED_FIGHT = 2587,
  RET_PET_NOT_GETED_NO_ACTIVE = 2588,
  RET_PET_IS_ACTIVE = 2589,
  RET_PET_GROW_STAR_NO_GROW = 2590,
  RET_PET_YAOHUN_FIGHT_UNLOCK = 2591,
  RET_PET_YAOHUN_NO_FIGHT = 2592,
  RET_PET_YAOHUN_BEAST = 2593,
  RET_PET_YAOHUN_NOT_SAME = 2594,
  RET_PET_YAOLU_LIMIT = 2595,
  RET_PET_LIANYAO_COND_ERR = 2596,
  RET_PET_YAOQI_LACK = 2597,
  RET_PET_YAOHUN_LV_MAX = 2598,
  RET_PET_YAOHUN_BREAK_MAX = 2599,
  RET_PET_YAOHUN_TQ_BUYED = 2600,
  RET_PET_SUIT_COND_LACK = 2601,
  RET_PET_SUIT_ACTIVED = 2602,
  RET_PET_RESET_NO_GROW = 2603,
  RET_ESCORT_TASK_NOT_EXIST = 2700,
  RET_ESCORT_TASK_EXIST = 2701,
  RET_ESCORT_TASK_TIMES_LIMIT = 2702,
  RET_ESCORT_UP_QUALITY_FAILED = 2703,
  RET_ESCORT_MAX = 2704,
  RET_ASSIST_NOT_HELP = 2720,
  RET_NO_FACTION_NOT_SEND_HELP = 2721,
  RET_HAS_ASSIST_NOT_SEND = 2722,
  RET_IS_HELPING_THIS = 2723,
  RET_HELPER_GIFT_NUM_LIMIT = 2724,
  RET_IS_RECV = 2725,
  RET_IS_HELPER_NUM_LACK = 2726,
  RET_GODEVIL_ALREADY_FETCH = 2800,
  RET_GODEVIL_CAN_NOT_FETCH = 2801,
  RET_GODEVIL_NOT_ACTIVE = 2802,
  RET_GODEVIL_UPGRADE_FULL_LEVEL = 2803,
  RET_GODEVIL_UPGRADE_EXP_LACK = 2804,
  RET_GODEVIL_IN_CD = 2805,
  RET_GODEVIL_NOT_CHG_FACADE = 2806,
  RET_GODEVIL_IN_CHG_STATE = 2807,
  RET_GODEVIL_ALREADY_ACTIVE = 2808,
  RET_GODEVIL_EQUIP_NOT_EXIST = 2809,
  RET_GODEVIL_EQUIP_POS_LOCK = 2810,
  RET_GODEVIL_EQUIP_POS_NO_DRESS = 2811,
  RET_GODEVIL_LEVEL_LACK = 2812,
  RET_GODEVIL_QUA_LACK = 2813,
  RET_GODEVIL_QUA_LACK_MATERIAL = 2814,
  RET_GODEVIL_QUA_LV_MAX = 2815,
  RET_GODEVIL_CAN_NOT_WEAR_QUA_LV = 2816,
  RET_GODEVIL_STRONG_EXP_OVERFLOW = 2817,
  RET_GODEVIL_WEAR_QUA_EXP_OVERFLOW = 2818,
  RET_GODEVIL_QUA_LV_QUALITY_LIMIT = 2819,
  RET_GODEVIL_CAN_NOT_QUA_LV = 2840,
  RET_GODEVIL_WEAR_QUA_LV_LACK = 2841,
  RET_GODEVIL_QUA_LV_MATERIAL_LACK = 2842,
  RET_GODEVIL_SAVVY_LACK = 2843,
  RET_GODEVIL_QUA_NOT_TRANS = 2844,
  RET_GODEVIL_CAN_NOT_TRANS = 2845,
  RET_GODEVIL_MAKE_LACK_MATERIAL = 2846,
  RET_GODEVIL_EQUIP_MAKE_POS_LOCK = 2847,
  RET_PT_LvUpMaterialNotEnough = 2820,
  RET_PT_DjFailed = 2821,
  RET_PT_GB_PARTICLE_NOT_CMPT = 2822,
  RET_PT_GBEnterAreaLvlNotEnough = 2823,
  RET_PT_EnergyNotEnough = 2824,
  RET_PT_LevelLimit = 2825,
  RET_PT_EnergyLack = 2826,
  RET_GVB_ScoreLack = 2827,
  RET_GVB_DailyRecved = 2828,
  RET_RED_NOT_EXIST = 2900,
  RET_RED_FETCH_FINISH = 2901,
  RET_RED_FETCH_ALREADY = 2902,
  RET_RED_CAN_NOT_FETCH = 2903,
  RET_RED_WAI_SEND_NOT_EXIST = 2904,
  RET_RED_WAI_SEND_CAN_NOT_SEND = 2905,
  RET_RED_SEND_NUM_LIMIT = 2906,
  RET_RED_FETCH_VAL_LIMIT = 2907,
  RET_RED_WORD_LEN_LIMIT = 2908,
  RET_COLLECT_IN_COLLECT_STATE = 3000,
  RET_COLLECT_NOT_EXIST = 3001,
  RET_COLLECT_ALREADY_DEAD = 3002,
  RET_COLLECT_CAN_NOT_COLLECT = 3003,
  RET_COLLECT_HAS_NO_FUNC = 3004,
  RET_COLLECT_NUM_LIMIT = 3005,
  RET_ACT_NOT_OPEN = 3100,
  RET_ACT_ALREADY_CLOSE = 3101,
  RET_QY_PASSED = 3102,
  RET_PVP_ALREADY_PK_MODE = 3301,
  RET_PVP_PK_MODE_CD = 3302,
  RET_PVP_MAP_CAN_NOT_CHG_PK_MODE = 3303,
  RET_PVP_CAN_NOT_CHG_PK_MODE = 3304,
  RET_PVP_EMBLEM_LV_ALREADY_MAX = 3305,
  RET_PVP_EMBLEM_STAR_ALREADY_MAX = 3306,
  RET_PVP_EMBLEM_NOT_ACTIVE = 3307,
  RET_PVP_1V1_ALREADY_FETCH = 3308,
  RET_PVP_1V1_CAN_NOT_FETCH = 3309,
  RET_PVP_1V1_NOT_IN_MATCH_MAP = 3310,
  RET_PVP_1V1_CAN_NOT_MATCH = 3311,
  RET_PVP_1V1_IN_MATCH = 3312,
  RET_PVP_1V1_IN_READY = 3313,
  RET_PAY_USED_PAYMENT = 3800,
  RET_PAY_INVALID_PAYMENT = 3801,
  RET_PAY_INVALID_MONEY = 3802,
  RET_PAY_REQ_ODER_CONF_ERR = 3803,
  RET_PAY_REQ_ODER_NOT_OPEN = 3804,
  RET_PAY_REQ_ODER_CHAN_FORBIDDEN = 3805,
  RET_PAY_REQ_ODER_INVALID_PRODUCT = 3806,
  RET_PAY_REQ_ODER_PRODUCT_LST_LEN = 3807,
  RET_PAY_REQ_ODER_PRICE_ERR = 3808,
  RET_PAY_REQ_ODER_PRODUCT_TYPE_LIMIT = 3809,
  RET_PAY_WEB_ORDER_RETCODE = 3850,
  RET_PAY_WEB_PAY_RETCODE = 3851,
  RET_SJ_NOT_DECOMPOSE = 3900,
  RET_SJ_IN_DRESS_NOT_DECOMPOSE = 3901,
  RET_SJ_AQ_BAG_FULL = 3902,
  RET_SJ_LJ_BAG_FULL = 3903,
  RET_SJ_NOT_RETURN_IN_DRESS = 3904,
  RET_SJ_NOT_RETURN = 3905,
  RET_SJ_NOT_STRONG = 3906,
  RET_SJ_METERIAL_DRESS_ERR = 3907,
  RET_SJ_METERIAL_LACK = 3908,
  RET_SJ_LEVEL_MAX = 3909,
  RET_SJ_NOT_POUR = 3910,
  RET_SJ_POUR_MAX = 3911,
  RET_SJ_BREAK_MAX = 3912,
  RET_SJ_AWAKEN_MAX = 3913,
  RET_AT_NUM_LEAK = 3950,
  RET_AT_IS_UNLOCKED = 3951,
  RET_AT_NOT_FULL_UNLOCK = 3952,
  RET_AT_LV_MAX = 3953,
  RET_AT_PRCOSS_LEAK = 3954,
  RET_AT_STAR_LEAK = 3955,
  RET_AT_STAR_MAX = 3956,
  RET_AT_IS_BLESSED = 3957,
  RET_MARRY_APPLYING = 4000,
  RET_MARRY_ACKING = 4001,
  RET_MARRY_NOT_APPLY_OTHER = 4002,
  RET_MARRY_IS_MARRYED = 4003,
  RET_MARRY_IS_INDUP = 4004,
  RET_MARRY_DST_LEAVE_LACK = 4005,
  RET_MARRY_LEAVE_LACK = 4006,
  RET_MARRY_NOT_FRIEND = 4007,
  RET_MARRY_NOT_ONLINE = 4008,
  RET_MARRY_CHILD_NOT_TIME = 4009,
  RET_MARRY_DIVORCE_NO_MARRY = 4010,
  RET_MARRY_CHILD_IS_ACTIVED = 4011,
  RET_MARRY_CHILD_NO_ACTIVE = 4012,
  RET_MARRY_CHILD_LV_MAX = 4013,
  RET_MARRY_CHILD_STAR_MAX = 4014,
  RET_MARRY_EXPRESS_NO_FRIEND = 4015,
  RET_MARRY_NOT_ONLINE_EXPRESS = 4016,
  RET_MARRY_EXPRESS_MAX = 4017,
  RET_MARRY_NOT_MARRY = 4018,
  RET_MARRY_BUY_NUM_LEAK = 4019,
  RET_MARRY_NO_DRESS_LOCK = 4020,
  RET_MARRY_LOCK_LV_MAX = 4021,
  RET_MARRY_DST_DUP_LIMIT = 4022,
  RET_MARRY_DST_GIVE_DUP_LIMIT = 4023,
  RET_MARRY_CARD_NOT_TIME_OUT = 4024,
  RET_MARRY_CARD_NOT_BUY = 4025,
  RET_MARRY_NOT_CARD_RECV = 4026,
  RET_MARRY_DST_REFUSE_BUY = 4027,
  RET_MARRY_WEDDING_NO_MARRY = 4028,
  RET_MARRY_WEDDING_DUE = 4029,
  RET_MARRY_OUT_APPLY_TIME = 4030,
  RET_MARRY_NOT_WEDDING_NUM = 4031,
  RET_MARRY_WEDDING_NOT_MASTER = 4032,
  RET_MARRY_WEDDING_IS_OVER = 4033,
  RET_MARRY_WEDDING_INVITE_FULL = 4034,
  RET_MARRY_NO_IN_APPLY = 4035,
  RET_MARRY_INVITED = 4036,
  RET_MARRY_WEDDING_NO_START = 4037,
  RET_MARRY_NO_ACCESS = 4038,
  RET_MARRY_NO_WEDDING = 4039,
  RET_MARRY_APPLY_FULL = 4040,
  RET_MARRY_IN_APPLY = 4041,
  RET_MARRY_HAS_WEDDING_NO_DIVOCE = 4042,
  RET_MARRY_IS_IN_INVITE = 4043,
  RET_MARRY_WARM_FULL = 4044,
  RET_MARRY_YX_IS_COL = 4045,
  RET_MARRY_CAKE_NUM_LEAK = 4046,
  RET_MERGE_COST_ERR = 4200,
  RET_MERGE_MAX = 4201,
  RET_MERGE_COND_ERR = 4202,
  RET_DRAGON_SOUL_WEAR_QUALITY_LACK = 4230,
  RET_DRAGON_SOUL_NO_UNDRESS_WAKEUP = 4231,
  RET_DRAGON_SOUL_WAKEUP_POSITION_LACK = 4232,
  RET_DRAGON_SOUL_WAKEUP_MAX_LEVEL = 4233,
  RET_DRAGON_SOUL_SLOT_NO_UNLOCK = 4234,
  RET_CHARGE_OPEN_DAY_LIMIT = 4400,
  RET_CHARGE_ALREADY_FETCH = 4401,
  RET_CHARGE_CAN_NOT_FETCH = 4402,
  RET_GIFT_COND_ALREADY_BUY = 4450,
  RET_GIFT_COND_ALREADY_CLOSE = 4451,
  RET_GIFT_COND_CAN_NOT_BUY = 4452,
  RET_GIFT_COND_NOT_OPEN = 4453,
  RET_GIFT_ZERO_ALREADY_BUY = 4454,
  RET_GIFT_ZERO_NOT_BUY = 4455,
  RET_GIFT_ZERO_ALREADY_FETCH = 4456,
  RET_GIFT_ZERO_CAN_NOT_FETCH = 4457,
  RET_VIP_IS_FORERVE = 4470,
  RET_VIP_HAS_BUY_LV_GIFT = 4471,
  RET_VIP_HAS_BUY_ZERO = 4472,
  RET_VIP_NOT_ACTIVE = 4473,
  RET_VIP_RECVED_DAY_GIFT = 4474,
  RET_VIP_NO_BUY_ZERO = 4475,
  RET_VIP_RECV_TIME_LEAK = 4476,
  RET_VIP_RECVED_EXP = 4477,
  RET_FEST_SHOP_NUM_LIMIT = 4500,
  RET_FEST_SIGN_ALREADY = 4501,
  RET_FEST_DIG_EGG_CAN_NOT_LOTTERY = 4502,
  RET_FEST_SHOP_GIFT_NOT_OPEN = 4503,
  RET_FEST_SHOP_GIFT_ALREADY_CLOSE = 4504,
  RET_FEST_RANK_NOT_OPEN = 4505,
  RET_FEST_BOSSKF_NO_KILL = 4506,
  RET_FEST_IS_RECVED = 4507,
  RET_FEST_DIG_EGG_TASK_NOT_EXIST = 4508,
  RET_FEST_DIG_EGG_TASK_NOT_FETCH = 4509,
  RET_FEST_REWARD_NOT_EXIST = 4510,
  RET_FEST_LACK_RECHARGE_NOT_FETCH = 4511,
  RET_FEST_HAS_PRE_GEAR_REWARD = 4512,
  RET_FEST_OPEN_DAY_LIMIT = 4513,
  RTE_FEST_FUNC_UNLOCK_LIMIT = 4514,
  RET_MARKET_IS_FOLLOW = 4520,
  RET_MARKET_FOLLOW_LIMIT = 4521,
  RET_MARKET_DONWED = 4522,
  RET_MARKET_VIE_FAIL = 4523,
  RET_MARKET_VIE_OWNER = 4524,
  RET_MARKET_VIE_ING = 4525,
  RET_MARKET_UP_UNBIND = 4526,
  RET_MARKET_UP_LIMIT = 4527,
  RET_EXCHANGE_CODE_IN_CD = 4550,
  RET_EXCHANGE_CODE_ERROR = 4551,
  RET_EXCHANGE_CODE_ALREADY_USE = 4552,
  RET_EXCHANGE_CODE_NOT_EXISTS = 4553,
  RET_EXCHANGE_CODE_NO_EFFECT = 4554,
  RET_EXCHANGE_CODE_NOT_START = 4555,
  RET_EXCHANGE_CODE_END = 4556,
  RET_EXCHANGE_CODE_CHAN_LIMIT = 4557,
  RET_EXCHANGE_CODE_SERVER_LIMIT = 4558,
  RET_EXCHANGE_CODE_ONCE = 4559,
  RET_DRAGON_ALREADY_MAX_LEV = 4601,
  RET_DRAGON_CAN_NOT_LEVUP = 4602,
  RET_DRAGON_STAR_LIMIT = 4603,
  RET_DRAGON_NOT_ACTIVE = 4604,
  RET_DRAGON_USE_FRAG_LIMIT = 4605,
  RET_DRAGON_LEVUP_STAR_LIMIT = 4606,
  RET_SUBPACK_ALREADY_FETCH = 4670,
  RET_SUBPACK_INVALID_TYPE = 4671,
  RET_SUBPACK_CAN_NOT_FETCH = 4672,
  RET_CLAN_APPLY_FULL = 5250,
  RET_CLAN_MAX = 5251,
  RET_HAS_CLAN_NO_CREATE = 5252,
  RET_ONE_HOUR_NO_CREATE = 5253,
  RET_CLAN_REFUSE_APPLY = 5254,
  RET_CLAN_NO_LEADER = 5255,
  RET_CLAN_BADGE_NOT_GET = 5256,
  RET_CLAN_NAME_EMPTY = 5257,
  RET_CLAN_NO_IN_APPLY = 5258,
  RET_CLAN_TARGE_IN_BAN = 5259,
  RET_CLAN_NO_MEM = 5260,
  RET_CLAN_KICK_NO_TIME = 5261,
  RET_CLAN_IS_MEM = 5262,
  RET_CLAN_FULL = 5263,
  RET_CLAN_INVITE_REFUSE = 5264,
  RET_CLAN_DIS = 5265,
  RET_CLAN_NO_CLAN3 = 5267,
  RET_CLAN_NO_CLAN5 = 5268,
  RET_CLAN_DAY_INVITE = 5269,
  RET_CLAN3_NOT_MATCH_HAS_TEAM = 5270,
  RET_CLAN3_NO_CLAN_NO_MATCH = 5271,
  RET_CLAN3_NO_MATCH_NO_TEAM = 5272,
  RET_CLAN3_NO_MATCH_TEAM_HAS_OTHER = 5273,
  RET_CLAN3_NO_LEADER_NO_MATCH = 5274,
  RET_CLAN3_NO_MATCH_TEAM_MEM_NO_WAIT = 5275,
  RET_CLAN3_RECV_DAY_REWARD = 5276,
  RET_CLAN3_DAY_REWARD_LACK = 5277,
  RET_CLAN3_ACT_OPEN_NO_KICK = 5278,
  RET_CLAN3_ACT_OPEN_NO_LEAVE = 5279,
  RET_CLAN3_HAS_CLAN = 5280,
  RET_CLAN3_MATCH_MEM_LACK = 5281,
  RET_TURN_LV_MAX = 5290,
  RET_TURN_LV_EXP_LACK = 5291,
  RET_TURN_CHGED = 5292,
  RET_TURN_HELPERD = 5293,
  RET_TURN_HELP_LV_LACK = 5294,
  RET_TURN_LV_MAX_NOT_CHG = 5295,
  RET_TURN_NUM_LACK = 5296,
  RET_TURN_CHG_MAX = 5297,
  RET_TURN_CHG_LV_LACK = 5298,
  RET_TURN_NO_DRESS_EQUIP = 5299,
  RET_TURN_STRONG_MAX = 5300,
  RET_TURN_EVOLE_MAX = 5301,
  RET_TURN_EVOLE_COND_LACK = 5302,
  RET_TURN_EVOLE_COST_ERR = 5303,
  RET_TURN_AWAKEN_MAX = 5304,
  RET_TURN_AWAKEN_COND_LACK = 5305,
  RET_TURN_AWAKEN_COST_ERR = 5306,
  RET_TURN_STAR_MAX = 5307,
  RET_TURN_STAR_UP_COND_LACK = 5308,
  RET_TURN_STRONG_LV_LACK = 5309,
  RET_TURN_STAR_NUM_LACK = 5310,
  RET_TURN_STAR_ACTIVE_BF = 5311,
  RET_HUNLING_LACK = 5320,
  RET_SOUL_STEP_MAX = 5321,
  RET_SOUL_POOL_BLESS_MAX = 5322,
  RET_RUNE_CORE_CAN_CORE_DRESS = 5500,
  RET_RUNE_NOC_NO_DRESS_CORE = 5501,
  RET_RUNE_NO_DRESS_RUNE = 5502,
  RET_RUNE_LV_MAX = 5503,
  RET_RUNE_STEP_MAX = 5504,
  RET_RUNE_QUENCHING_GIRD_LACK = 5505,
  RET_RUNE_QUENCHING_MAX = 5506,
  RET_RUNE_WORD_STAR_MAX = 5507,
  RET_RUNE_FENGYIN_ERROR = 5508,
  RET_RUNE_ACTIVE_JJ_ERROR = 5509,
  RET_RUNE_SORING_MAX = 5510,
  RET_RUNE_SORING_QUAILTY_LACK = 5511
};
bool ERetCode_IsValid(int value);
const ERetCode ERetCode_MIN = RET_SUCCESS;
const ERetCode ERetCode_MAX = RET_RUNE_SORING_QUAILTY_LACK;
const int ERetCode_ARRAYSIZE = ERetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERetCode_descriptor();
inline const ::std::string& ERetCode_Name(ERetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERetCode_descriptor(), value);
}
inline bool ERetCode_Parse(
    const ::std::string& name, ERetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERetCode>(
    ERetCode_descriptor(), name, value);
}
enum Privilege_Type {
  pt_yaoci_add_exp = 18,
  pt_sj_add_exp = 19,
  pt_kill_monster_add_exp = 20,
  pt_seat_add_exp = 21
};
bool Privilege_Type_IsValid(int value);
const Privilege_Type Privilege_Type_MIN = pt_yaoci_add_exp;
const Privilege_Type Privilege_Type_MAX = pt_seat_add_exp;
const int Privilege_Type_ARRAYSIZE = Privilege_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Privilege_Type_descriptor();
inline const ::std::string& Privilege_Type_Name(Privilege_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Privilege_Type_descriptor(), value);
}
inline bool Privilege_Type_Parse(
    const ::std::string& name, Privilege_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Privilege_Type>(
    Privilege_Type_descriptor(), name, value);
}
enum LOGOUT_TYPE {
  LOGOUT_NONE = 0,
  LOGOUT_LOGOUT = 1,
  LOGOUT_REPLACE = 2,
  LOGOUT_DIS_TIME_OUT = 3,
  LOGOUT_KICK_OUT = 4,
  LOGOUT_CHANGE_LOGIC = 5,
  LOGOUT_RETURN_ROLE_LIST = 6,
  LOGOUT_LOGIN_TIME_OUT = 7,
  LOGOUT_WEB_KICK = 8,
  LOGOUT_CHEAR_KICK = 9
};
bool LOGOUT_TYPE_IsValid(int value);
const LOGOUT_TYPE LOGOUT_TYPE_MIN = LOGOUT_NONE;
const LOGOUT_TYPE LOGOUT_TYPE_MAX = LOGOUT_CHEAR_KICK;
const int LOGOUT_TYPE_ARRAYSIZE = LOGOUT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor();
inline const ::std::string& LOGOUT_TYPE_Name(LOGOUT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOGOUT_TYPE_descriptor(), value);
}
inline bool LOGOUT_TYPE_Parse(
    const ::std::string& name, LOGOUT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOGOUT_TYPE>(
    LOGOUT_TYPE_descriptor(), name, value);
}
enum EMailType {
  MAIL_TYPE_PLAYER = 2,
  MAIL_TYPE_SYSTEM = 3
};
bool EMailType_IsValid(int value);
const EMailType EMailType_MIN = MAIL_TYPE_PLAYER;
const EMailType EMailType_MAX = MAIL_TYPE_SYSTEM;
const int EMailType_ARRAYSIZE = EMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMailType_descriptor();
inline const ::std::string& EMailType_Name(EMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMailType_descriptor(), value);
}
inline bool EMailType_Parse(
    const ::std::string& name, EMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMailType>(
    EMailType_descriptor(), name, value);
}
enum CHAT_CHANNEL {
  CHAT_CHANNEL_NONE = 0,
  CHAT_CHANNEL_WORLD = 1,
  CHAT_CHANNEL_GUILD = 2,
  CHAT_CHANNEL_ENLIST = 3,
  CHAT_CHANNEL_TEAM = 4,
  CHAT_CHANNEL_SCENE = 5,
  CHAT_CHANNEL_CROSS = 6,
  CHAT_CHANNEL_SYSTEM = 7,
  CHAT_CHANNEL_PRIVATE = 8,
  CHAT_CHANNEL_RUMORANDHORSE = 9,
  CHAT_CHANNEL_HORN = 10,
  CHAT_CHANNEL_BACKEND_RUMOR = 11,
  CHAT_CHANNEL_ACTIVITY = 12,
  CHAT_CHANNEL_POKERROOM = 13,
  CHAT_CHANNEL_CLAN3 = 14,
  CHAT_CHANNEL_CLAN5 = 15,
  CHAT_CHANNEL_RUMOR = 16,
  CHAT_CHANNEL_LIMIT = 17
};
bool CHAT_CHANNEL_IsValid(int value);
const CHAT_CHANNEL CHAT_CHANNEL_MIN = CHAT_CHANNEL_NONE;
const CHAT_CHANNEL CHAT_CHANNEL_MAX = CHAT_CHANNEL_LIMIT;
const int CHAT_CHANNEL_ARRAYSIZE = CHAT_CHANNEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor();
inline const ::std::string& CHAT_CHANNEL_Name(CHAT_CHANNEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_CHANNEL_descriptor(), value);
}
inline bool CHAT_CHANNEL_Parse(
    const ::std::string& name, CHAT_CHANNEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT_CHANNEL>(
    CHAT_CHANNEL_descriptor(), name, value);
}
enum FacadeType {
  FACADE_WING_TYPE = 1,
  FACADE_TREASURE_TYPE = 2,
  FACADE_ARTIFACT_TYPE = 3,
  FACADE_PARTNER_TYPE = 4,
  FACADE_TYPE_MAX = 5
};
bool FacadeType_IsValid(int value);
const FacadeType FacadeType_MIN = FACADE_WING_TYPE;
const FacadeType FacadeType_MAX = FACADE_TYPE_MAX;
const int FacadeType_ARRAYSIZE = FacadeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FacadeType_descriptor();
inline const ::std::string& FacadeType_Name(FacadeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FacadeType_descriptor(), value);
}
inline bool FacadeType_Parse(
    const ::std::string& name, FacadeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FacadeType>(
    FacadeType_descriptor(), name, value);
}
enum FunctionUnlock_ID_TYPE {
  FunctionUnlock_ID_TYPE_ROLE = 1001,
  FunctionUnlock_ID_TYPE_SKILL = 1002,
  FunctionUnlock_ID_TYPE_RANKING = 1024,
  FunctionUnlock_ID_TYPE_MOUNTS = 2014,
  FunctionUnlock_ID_TYPE_WING = 2022,
  FunctionUnlock_ID_TYPE_TREASURE = 2026,
  FunctionUnlock_ID_TYPE_ARTIFACT = 2030,
  FunctionUnlock_ID_TYPE_PARTNER = 2036,
  FunctionUnlock_ID_TYPE_GodEvilNotice = 2063,
  FunctionUnlock_ID_TYPE_GodEvilTask = 2064,
  FunctionUnlock_ID_TYPE_Marry = 2029,
  FunctionUnlock_ID_TYPE_Turn = 2075,
  FunctionUnlock_ID_TYPE_ARENA_MIAOSHANG = 3053,
  FunctionUnlock_ID_TYPE_ChargeFirst = 4005,
  FunctionUnlock_ID_TYPE_ChargeSecond = 4024,
  FunctionUnlock_ID_TYPE_ChargeDia = 4025,
  FunctionUnlock_ID_TYPE_ChargeStar = 4026,
  FunctionUnlock_ID_TYPE_ChargeKing = 4027,
  FunctionUnlock_ID_TYPE_OpenTotal = 4028,
  FunctionUnlock_ID_TYPE_XiuZhenRoad = 4029,
  FunctionUnlock_ID_TYPE_1v1 = 4101,
  FunctionUnlock_ID_TYPE_LOGON_REWARD_CANCLE = 4023,
  FunctionUnlock_ID_TYPE_DIETY = 4070,
  FunctionUnlock_ID_Soul = 5186
};
bool FunctionUnlock_ID_TYPE_IsValid(int value);
const FunctionUnlock_ID_TYPE FunctionUnlock_ID_TYPE_MIN = FunctionUnlock_ID_TYPE_ROLE;
const FunctionUnlock_ID_TYPE FunctionUnlock_ID_TYPE_MAX = FunctionUnlock_ID_Soul;
const int FunctionUnlock_ID_TYPE_ARRAYSIZE = FunctionUnlock_ID_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor();
inline const ::std::string& FunctionUnlock_ID_TYPE_Name(FunctionUnlock_ID_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionUnlock_ID_TYPE_descriptor(), value);
}
inline bool FunctionUnlock_ID_TYPE_Parse(
    const ::std::string& name, FunctionUnlock_ID_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionUnlock_ID_TYPE>(
    FunctionUnlock_ID_TYPE_descriptor(), name, value);
}
enum EFacadeAttrType {
  EAttrType_Advance = 1,
  EAttrType_Fantasy = 2,
  EAttrType_Fragment = 3,
  EAttrType_Skill = 4,
  EAttrType_SOUL = 5
};
bool EFacadeAttrType_IsValid(int value);
const EFacadeAttrType EFacadeAttrType_MIN = EAttrType_Advance;
const EFacadeAttrType EFacadeAttrType_MAX = EAttrType_SOUL;
const int EFacadeAttrType_ARRAYSIZE = EFacadeAttrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor();
inline const ::std::string& EFacadeAttrType_Name(EFacadeAttrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFacadeAttrType_descriptor(), value);
}
inline bool EFacadeAttrType_Parse(
    const ::std::string& name, EFacadeAttrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFacadeAttrType>(
    EFacadeAttrType_descriptor(), name, value);
}
enum EDailyTaskPlayType {
  EDailyTaskPlayType_DUP = 1,
  EDailyTaskPlayType_BOSS = 2,
  EDailyTaskPlayType_TASK = 3,
  EDailyTaskPlayType_ExpQIFU = 4,
  EDailyTaskPlayType_FactionTrans = 5,
  EDailyTaskPlayType_YaoChi = 6,
  EDailyTaskPlayType_Arena = 7
};
bool EDailyTaskPlayType_IsValid(int value);
const EDailyTaskPlayType EDailyTaskPlayType_MIN = EDailyTaskPlayType_DUP;
const EDailyTaskPlayType EDailyTaskPlayType_MAX = EDailyTaskPlayType_Arena;
const int EDailyTaskPlayType_ARRAYSIZE = EDailyTaskPlayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor();
inline const ::std::string& EDailyTaskPlayType_Name(EDailyTaskPlayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDailyTaskPlayType_descriptor(), value);
}
inline bool EDailyTaskPlayType_Parse(
    const ::std::string& name, EDailyTaskPlayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDailyTaskPlayType>(
    EDailyTaskPlayType_descriptor(), name, value);
}
enum EDailyTaskBackType {
  EDailyTaskBackType_DUP = 1
};
bool EDailyTaskBackType_IsValid(int value);
const EDailyTaskBackType EDailyTaskBackType_MIN = EDailyTaskBackType_DUP;
const EDailyTaskBackType EDailyTaskBackType_MAX = EDailyTaskBackType_DUP;
const int EDailyTaskBackType_ARRAYSIZE = EDailyTaskBackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor();
inline const ::std::string& EDailyTaskBackType_Name(EDailyTaskBackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDailyTaskBackType_descriptor(), value);
}
inline bool EDailyTaskBackType_Parse(
    const ::std::string& name, EDailyTaskBackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDailyTaskBackType>(
    EDailyTaskBackType_descriptor(), name, value);
}
enum PGType {
  PGType_world_boss_add_num = 1,
  PGType_boss_dup_add_num = 2,
  PGType_boss_nest_add_num = 3,
  PGType_boss_ghost_add_num = 4,
  PGType_level_dup_add_num = 5,
  PGType_deify_dup_add_num = 6,
  PGType_pet_dup_add_num = 7,
  PGType_bagua_dup_add_num = 8,
  PGType_dujie_dup_add_num = 9,
  PGType_equip_dup_add_num = 10,
  PGType_jinji_num = 11,
  PGType_ronglian_exp = 12,
  PGType_kill_monster_exp = 13,
  PGType_refresh_s = 14,
  PGType_sw_refresh = 15,
  PGType_yaoci_exp_add = 16,
  PGType_sw_ex_add = 22,
  PGType_sw_xz_add = 23,
  PGType_yb_add = 24,
  PGType_qd_race = 107,
  PGType_exp_qindao = 108,
  PGType_glob_qindao = 109,
  PGType_open_sj = 110,
  PGType_open_bpsw = 111,
  PGType_open_fltb = 112,
  PGType_open_zdcs = 113,
  PGType_wxfx = 114,
  PGType_merge_save = 115,
  PGType_merge_race = 116,
  PGType_offline_add = 117,
  PGType_km_exp = 118,
  PGType_red_r = 119,
  PGType_sj_exp = 120,
  PGType_add_skill = 121,
  PGType_open_sh = 122
};
bool PGType_IsValid(int value);
const PGType PGType_MIN = PGType_world_boss_add_num;
const PGType PGType_MAX = PGType_open_sh;
const int PGType_ARRAYSIZE = PGType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PGType_descriptor();
inline const ::std::string& PGType_Name(PGType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PGType_descriptor(), value);
}
inline bool PGType_Parse(
    const ::std::string& name, PGType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PGType>(
    PGType_descriptor(), name, value);
}
enum ARENA_CHALLENGE_TYPE {
  ARENA_CHALLENGE_TYPE_NONE = 0,
  ARENA_CHALLENGE_TYPE_CHARACTER = 1,
  ARENA_CHALLENGE_TYPE_ROBOT = 2
};
bool ARENA_CHALLENGE_TYPE_IsValid(int value);
const ARENA_CHALLENGE_TYPE ARENA_CHALLENGE_TYPE_MIN = ARENA_CHALLENGE_TYPE_NONE;
const ARENA_CHALLENGE_TYPE ARENA_CHALLENGE_TYPE_MAX = ARENA_CHALLENGE_TYPE_ROBOT;
const int ARENA_CHALLENGE_TYPE_ARRAYSIZE = ARENA_CHALLENGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ARENA_CHALLENGE_TYPE_descriptor();
inline const ::std::string& ARENA_CHALLENGE_TYPE_Name(ARENA_CHALLENGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ARENA_CHALLENGE_TYPE_descriptor(), value);
}
inline bool ARENA_CHALLENGE_TYPE_Parse(
    const ::std::string& name, ARENA_CHALLENGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ARENA_CHALLENGE_TYPE>(
    ARENA_CHALLENGE_TYPE_descriptor(), name, value);
}
enum ArenaRewardState {
  ARENA_REWARD_STATE_NONE = 0,
  ARENA_REWARD_STATE_FINISH = 1,
  ARENA_REWARD_STATE_GET_REWARD = 2
};
bool ArenaRewardState_IsValid(int value);
const ArenaRewardState ArenaRewardState_MIN = ARENA_REWARD_STATE_NONE;
const ArenaRewardState ArenaRewardState_MAX = ARENA_REWARD_STATE_GET_REWARD;
const int ArenaRewardState_ARRAYSIZE = ArenaRewardState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArenaRewardState_descriptor();
inline const ::std::string& ArenaRewardState_Name(ArenaRewardState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArenaRewardState_descriptor(), value);
}
inline bool ArenaRewardState_Parse(
    const ::std::string& name, ArenaRewardState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArenaRewardState>(
    ArenaRewardState_descriptor(), name, value);
}
enum ArenaChallType {
  ARENA_CHALL_TYPE_CHALL = 0,
  ARENA_CHALL_TYPE_MIAO_SHA = 1
};
bool ArenaChallType_IsValid(int value);
const ArenaChallType ArenaChallType_MIN = ARENA_CHALL_TYPE_CHALL;
const ArenaChallType ArenaChallType_MAX = ARENA_CHALL_TYPE_MIAO_SHA;
const int ArenaChallType_ARRAYSIZE = ArenaChallType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArenaChallType_descriptor();
inline const ::std::string& ArenaChallType_Name(ArenaChallType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArenaChallType_descriptor(), value);
}
inline bool ArenaChallType_Parse(
    const ::std::string& name, ArenaChallType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArenaChallType>(
    ArenaChallType_descriptor(), name, value);
}
enum VIP_PRIVILEGE_TYPE {
  VIP_PRIVILEGE_EQUIP_STOVE = 12,
  VIP_PRIVILEGE_GUILD_PRESTIGE_MISSION_REFRESH_S = 14,
  VIP_PRIVILEGE_GUILD_PRESTIGE_MISSION_REFRESH_ADD_NUM = 15,
  VIP_PRIVILEGE_OFFLINE_EXP_ADD = 21,
  VIP_PRIVILEGE_EXP_QIFU_NUM = 108,
  VIP_PRIVILEGE_GOLD_QIFU_NUM = 109
};
bool VIP_PRIVILEGE_TYPE_IsValid(int value);
const VIP_PRIVILEGE_TYPE VIP_PRIVILEGE_TYPE_MIN = VIP_PRIVILEGE_EQUIP_STOVE;
const VIP_PRIVILEGE_TYPE VIP_PRIVILEGE_TYPE_MAX = VIP_PRIVILEGE_GOLD_QIFU_NUM;
const int VIP_PRIVILEGE_TYPE_ARRAYSIZE = VIP_PRIVILEGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* VIP_PRIVILEGE_TYPE_descriptor();
inline const ::std::string& VIP_PRIVILEGE_TYPE_Name(VIP_PRIVILEGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    VIP_PRIVILEGE_TYPE_descriptor(), value);
}
inline bool VIP_PRIVILEGE_TYPE_Parse(
    const ::std::string& name, VIP_PRIVILEGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VIP_PRIVILEGE_TYPE>(
    VIP_PRIVILEGE_TYPE_descriptor(), name, value);
}
enum EMountRideState {
  EMountRideState_RideOff = 0,
  EMountRideState_RideOn = 1
};
bool EMountRideState_IsValid(int value);
const EMountRideState EMountRideState_MIN = EMountRideState_RideOff;
const EMountRideState EMountRideState_MAX = EMountRideState_RideOn;
const int EMountRideState_ARRAYSIZE = EMountRideState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMountRideState_descriptor();
inline const ::std::string& EMountRideState_Name(EMountRideState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMountRideState_descriptor(), value);
}
inline bool EMountRideState_Parse(
    const ::std::string& name, EMountRideState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMountRideState>(
    EMountRideState_descriptor(), name, value);
}
enum EDeityEquipPos {
  EDeityEquipPos_start = 20,
  EDeityEquipPos_ring = 0,
  EDeityEquipPos_bracelet = 1,
  EDeityEquipPos_jade = 2,
  EDeityEquipPos_necklace = 3,
  EDeityEquipPos_limit = 4
};
bool EDeityEquipPos_IsValid(int value);
const EDeityEquipPos EDeityEquipPos_MIN = EDeityEquipPos_ring;
const EDeityEquipPos EDeityEquipPos_MAX = EDeityEquipPos_start;
const int EDeityEquipPos_ARRAYSIZE = EDeityEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDeityEquipPos_descriptor();
inline const ::std::string& EDeityEquipPos_Name(EDeityEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDeityEquipPos_descriptor(), value);
}
inline bool EDeityEquipPos_Parse(
    const ::std::string& name, EDeityEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDeityEquipPos>(
    EDeityEquipPos_descriptor(), name, value);
}
enum EMoneyRewardTaskReward {
  EMoneyRewardTask_BOUNTY = 5
};
bool EMoneyRewardTaskReward_IsValid(int value);
const EMoneyRewardTaskReward EMoneyRewardTaskReward_MIN = EMoneyRewardTask_BOUNTY;
const EMoneyRewardTaskReward EMoneyRewardTaskReward_MAX = EMoneyRewardTask_BOUNTY;
const int EMoneyRewardTaskReward_ARRAYSIZE = EMoneyRewardTaskReward_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMoneyRewardTaskReward_descriptor();
inline const ::std::string& EMoneyRewardTaskReward_Name(EMoneyRewardTaskReward value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMoneyRewardTaskReward_descriptor(), value);
}
inline bool EMoneyRewardTaskReward_Parse(
    const ::std::string& name, EMoneyRewardTaskReward* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMoneyRewardTaskReward>(
    EMoneyRewardTaskReward_descriptor(), name, value);
}
enum ETitleSubType {
  E_TITLE_SUB_TYPE_VIP = 1,
  E_TITLE_SUB_TYPE_DRAGON_OF_CHAOS = 2,
  E_TITLE_SUB_TYPE_GUILD_RANKING = 3,
  E_TITLE_SUB_TYPE_KILL_MONSTER = 6,
  E_TITLE_SUB_TYPE_USE_ITEM = 10
};
bool ETitleSubType_IsValid(int value);
const ETitleSubType ETitleSubType_MIN = E_TITLE_SUB_TYPE_VIP;
const ETitleSubType ETitleSubType_MAX = E_TITLE_SUB_TYPE_USE_ITEM;
const int ETitleSubType_ARRAYSIZE = ETitleSubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETitleSubType_descriptor();
inline const ::std::string& ETitleSubType_Name(ETitleSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETitleSubType_descriptor(), value);
}
inline bool ETitleSubType_Parse(
    const ::std::string& name, ETitleSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETitleSubType>(
    ETitleSubType_descriptor(), name, value);
}
enum ETitleTimeType {
  E_TITLE_TIME_TYPE_HOUR = 0,
  E_TITLE_TIME_TYPE_COMPETITION_SEASON = 1,
  E_TITLE_TIME_TYPE_NEXT_ACTIVITY_INVALID = 2,
  E_TITLE_TIME_TYPE_LOST_RANKING = 3
};
bool ETitleTimeType_IsValid(int value);
const ETitleTimeType ETitleTimeType_MIN = E_TITLE_TIME_TYPE_HOUR;
const ETitleTimeType ETitleTimeType_MAX = E_TITLE_TIME_TYPE_LOST_RANKING;
const int ETitleTimeType_ARRAYSIZE = ETitleTimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETitleTimeType_descriptor();
inline const ::std::string& ETitleTimeType_Name(ETitleTimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETitleTimeType_descriptor(), value);
}
inline bool ETitleTimeType_Parse(
    const ::std::string& name, ETitleTimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETitleTimeType>(
    ETitleTimeType_descriptor(), name, value);
}
enum EBeastEquipPos {
  EBeastEquipPos_start = 25,
  EBeastEquipPos_Horn = 0,
  EBeastEquipPos_Helm = 1,
  EBeastEquipPos_Claw = 2,
  EBeastEquipPos_Hoof = 3,
  EBeastEquipPos_Saddle = 4,
  EBeastEquipPos_Limit = 5
};
bool EBeastEquipPos_IsValid(int value);
const EBeastEquipPos EBeastEquipPos_MIN = EBeastEquipPos_Horn;
const EBeastEquipPos EBeastEquipPos_MAX = EBeastEquipPos_start;
const int EBeastEquipPos_ARRAYSIZE = EBeastEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBeastEquipPos_descriptor();
inline const ::std::string& EBeastEquipPos_Name(EBeastEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBeastEquipPos_descriptor(), value);
}
inline bool EBeastEquipPos_Parse(
    const ::std::string& name, EBeastEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBeastEquipPos>(
    EBeastEquipPos_descriptor(), name, value);
}
enum EDragonSoulEquipPos {
  EDragonSoulEquipPos_start = 30,
  EDragonSoulEquipPos_one = 0,
  EDragonSoulEquipPos_special1 = 8,
  EDragonSoulEquipPos_special2 = 9,
  EDragonSoulEquipPos_limit = 10
};
bool EDragonSoulEquipPos_IsValid(int value);
const EDragonSoulEquipPos EDragonSoulEquipPos_MIN = EDragonSoulEquipPos_one;
const EDragonSoulEquipPos EDragonSoulEquipPos_MAX = EDragonSoulEquipPos_start;
const int EDragonSoulEquipPos_ARRAYSIZE = EDragonSoulEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDragonSoulEquipPos_descriptor();
inline const ::std::string& EDragonSoulEquipPos_Name(EDragonSoulEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDragonSoulEquipPos_descriptor(), value);
}
inline bool EDragonSoulEquipPos_Parse(
    const ::std::string& name, EDragonSoulEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDragonSoulEquipPos>(
    EDragonSoulEquipPos_descriptor(), name, value);
}
enum EGodEvilEquipPos {
  EGodEvilEquipPos_weapon = 41,
  EGodEvilEquipPos_dagger = 42,
  EGodEvilEquipPos_hat = 43,
  EGodEvilEquipPos_armor = 44,
  EGodEvilEquipPos_hand = 45,
  EGodEvilEquipPos_belt = 46,
  EGodEvilEquipPos_shoe = 47,
  EGodEvilEquipPos_bracelet = 48,
  EGodEvilEquipPos_ring = 49,
  EGodEvilEquipPos_necklace = 50
};
bool EGodEvilEquipPos_IsValid(int value);
const EGodEvilEquipPos EGodEvilEquipPos_MIN = EGodEvilEquipPos_weapon;
const EGodEvilEquipPos EGodEvilEquipPos_MAX = EGodEvilEquipPos_necklace;
const int EGodEvilEquipPos_ARRAYSIZE = EGodEvilEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGodEvilEquipPos_descriptor();
inline const ::std::string& EGodEvilEquipPos_Name(EGodEvilEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGodEvilEquipPos_descriptor(), value);
}
inline bool EGodEvilEquipPos_Parse(
    const ::std::string& name, EGodEvilEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGodEvilEquipPos>(
    EGodEvilEquipPos_descriptor(), name, value);
}
enum ChannelId {
  Chan_Dev = 1,
  Chan_Aofei_andrioid = 90000000,
  Chan_Aofei_ios = 200000000
};
bool ChannelId_IsValid(int value);
const ChannelId ChannelId_MIN = Chan_Dev;
const ChannelId ChannelId_MAX = Chan_Aofei_ios;
const int ChannelId_ARRAYSIZE = ChannelId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelId_descriptor();
inline const ::std::string& ChannelId_Name(ChannelId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelId_descriptor(), value);
}
inline bool ChannelId_Parse(
    const ::std::string& name, ChannelId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelId>(
    ChannelId_descriptor(), name, value);
}
enum EStarEquipPos {
  EStarEquipPos_start = 51,
  EStarEquipPos_jiao = 0,
  EStarEquipPos_limit = 8
};
bool EStarEquipPos_IsValid(int value);
const EStarEquipPos EStarEquipPos_MIN = EStarEquipPos_jiao;
const EStarEquipPos EStarEquipPos_MAX = EStarEquipPos_start;
const int EStarEquipPos_ARRAYSIZE = EStarEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EStarEquipPos_descriptor();
inline const ::std::string& EStarEquipPos_Name(EStarEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EStarEquipPos_descriptor(), value);
}
inline bool EStarEquipPos_Parse(
    const ::std::string& name, EStarEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EStarEquipPos>(
    EStarEquipPos_descriptor(), name, value);
}
enum EMountKunEquipPos {
  EMountKunEquipPos_start = 59,
  EMountKunEquipPos_first = 0,
  EMountKunEquipPos_limit = 5
};
bool EMountKunEquipPos_IsValid(int value);
const EMountKunEquipPos EMountKunEquipPos_MIN = EMountKunEquipPos_first;
const EMountKunEquipPos EMountKunEquipPos_MAX = EMountKunEquipPos_start;
const int EMountKunEquipPos_ARRAYSIZE = EMountKunEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMountKunEquipPos_descriptor();
inline const ::std::string& EMountKunEquipPos_Name(EMountKunEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMountKunEquipPos_descriptor(), value);
}
inline bool EMountKunEquipPos_Parse(
    const ::std::string& name, EMountKunEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMountKunEquipPos>(
    EMountKunEquipPos_descriptor(), name, value);
}
enum EMoFaEquipPos {
  EMoFaEquipPos_start = 101,
  EMoFaEquipPos_first = 0,
  EMoFaEquipPos_limit = 10
};
bool EMoFaEquipPos_IsValid(int value);
const EMoFaEquipPos EMoFaEquipPos_MIN = EMoFaEquipPos_first;
const EMoFaEquipPos EMoFaEquipPos_MAX = EMoFaEquipPos_start;
const int EMoFaEquipPos_ARRAYSIZE = EMoFaEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMoFaEquipPos_descriptor();
inline const ::std::string& EMoFaEquipPos_Name(EMoFaEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMoFaEquipPos_descriptor(), value);
}
inline bool EMoFaEquipPos_Parse(
    const ::std::string& name, EMoFaEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMoFaEquipPos>(
    EMoFaEquipPos_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::PingConfig>() {
  return ::proto_ff::PingConfig_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ERoleSex>() {
  return ::proto_ff::ERoleSex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ERoleProf>() {
  return ::proto_ff::ERoleProf_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::CurrencyType>() {
  return ::proto_ff::CurrencyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::AreaType>() {
  return ::proto_ff::AreaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::SamplePolyFlags>() {
  return ::proto_ff::SamplePolyFlags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::MapDefine>() {
  return ::proto_ff::MapDefine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::REGION_DEFINE>() {
  return ::proto_ff::REGION_DEFINE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::CharacterDefine>() {
  return ::proto_ff::CharacterDefine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EItemType>() {
  return ::proto_ff::EItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EPackageType>() {
  return ::proto_ff::EPackageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EQuality>() {
  return ::proto_ff::EQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EEquipPos>() {
  return ::proto_ff::EEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EConst>() {
  return ::proto_ff::EConst_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ERetCode>() {
  return ::proto_ff::ERetCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Privilege_Type>() {
  return ::proto_ff::Privilege_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::LOGOUT_TYPE>() {
  return ::proto_ff::LOGOUT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EMailType>() {
  return ::proto_ff::EMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::CHAT_CHANNEL>() {
  return ::proto_ff::CHAT_CHANNEL_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::FacadeType>() {
  return ::proto_ff::FacadeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::FunctionUnlock_ID_TYPE>() {
  return ::proto_ff::FunctionUnlock_ID_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EFacadeAttrType>() {
  return ::proto_ff::EFacadeAttrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EDailyTaskPlayType>() {
  return ::proto_ff::EDailyTaskPlayType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EDailyTaskBackType>() {
  return ::proto_ff::EDailyTaskBackType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::PGType>() {
  return ::proto_ff::PGType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ARENA_CHALLENGE_TYPE>() {
  return ::proto_ff::ARENA_CHALLENGE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ArenaRewardState>() {
  return ::proto_ff::ArenaRewardState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ArenaChallType>() {
  return ::proto_ff::ArenaChallType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::VIP_PRIVILEGE_TYPE>() {
  return ::proto_ff::VIP_PRIVILEGE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EMountRideState>() {
  return ::proto_ff::EMountRideState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EDeityEquipPos>() {
  return ::proto_ff::EDeityEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EMoneyRewardTaskReward>() {
  return ::proto_ff::EMoneyRewardTaskReward_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ETitleSubType>() {
  return ::proto_ff::ETitleSubType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ETitleTimeType>() {
  return ::proto_ff::ETitleTimeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EBeastEquipPos>() {
  return ::proto_ff::EBeastEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EDragonSoulEquipPos>() {
  return ::proto_ff::EDragonSoulEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EGodEvilEquipPos>() {
  return ::proto_ff::EGodEvilEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ChannelId>() {
  return ::proto_ff::ChannelId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EStarEquipPos>() {
  return ::proto_ff::EStarEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EMountKunEquipPos>() {
  return ::proto_ff::EMountKunEquipPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EMoFaEquipPos>() {
  return ::proto_ff::EMoFaEquipPos_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ComDefine_2eproto__INCLUDED
