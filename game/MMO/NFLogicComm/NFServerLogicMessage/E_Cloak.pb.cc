// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Cloak.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Cloak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_CloakActivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakActivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakActivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakActivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakValueCloakattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakValueCloakattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakIntensifyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakIntensifyitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakIntensifyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakIntensifyitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakRefineItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakRefineItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakRefineAttDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakRefineAttDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakRefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakRefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakRefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakRefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakRefineunlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakRefineunlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakRefineunlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakRefineunlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakGradeItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakGradeItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakGradeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakGradeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakGodItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakGodItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakGodAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakGodAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakGod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakGod_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakGod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakGod_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoulAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoulAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoulactiveUnlockDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoulactiveUnlockDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoulactive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoulactive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakSoulactive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakSoulactive_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoullvAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoullvAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoullv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoullv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakSoullv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakSoullv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoulclear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoulclear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakSoulclear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakSoulclear_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloakSoulachievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloakSoulachievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloakSoulachievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloakSoulachievement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fCloak_2eproto() {
  protobuf_AddDesc_E_5fCloak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Cloak.proto");
  GOOGLE_CHECK(file != NULL);
  E_CloakActivate_descriptor_ = file->message_type(0);
  static const int E_CloakActivate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, m_cloakid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, m_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, m_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, m_activateitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, m_activatenum_),
  };
  E_CloakActivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakActivate_descriptor_,
      E_CloakActivate::default_instance_,
      E_CloakActivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakActivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakActivate));
  Sheet_CloakActivate_descriptor_ = file->message_type(1);
  static const int Sheet_CloakActivate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakActivate, e_cloakactivate_list_),
  };
  Sheet_CloakActivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakActivate_descriptor_,
      Sheet_CloakActivate::default_instance_,
      Sheet_CloakActivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakActivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakActivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakActivate));
  E_CloakValueCloakattributeDesc_descriptor_ = file->message_type(2);
  static const int E_CloakValueCloakattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValueCloakattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValueCloakattributeDesc, m_type_),
  };
  E_CloakValueCloakattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakValueCloakattributeDesc_descriptor_,
      E_CloakValueCloakattributeDesc::default_instance_,
      E_CloakValueCloakattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValueCloakattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValueCloakattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakValueCloakattributeDesc));
  E_CloakValue_descriptor_ = file->message_type(3);
  static const int E_CloakValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValue, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValue, m_cloakexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValue, m_cloakattribute_),
  };
  E_CloakValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakValue_descriptor_,
      E_CloakValue::default_instance_,
      E_CloakValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakValue));
  Sheet_CloakValue_descriptor_ = file->message_type(4);
  static const int Sheet_CloakValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakValue, e_cloakvalue_list_),
  };
  Sheet_CloakValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakValue_descriptor_,
      Sheet_CloakValue::default_instance_,
      Sheet_CloakValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakValue));
  E_CloakIntensifyitem_descriptor_ = file->message_type(5);
  static const int E_CloakIntensifyitem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakIntensifyitem, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakIntensifyitem, m_addexp_),
  };
  E_CloakIntensifyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakIntensifyitem_descriptor_,
      E_CloakIntensifyitem::default_instance_,
      E_CloakIntensifyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakIntensifyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakIntensifyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakIntensifyitem));
  Sheet_CloakIntensifyitem_descriptor_ = file->message_type(6);
  static const int Sheet_CloakIntensifyitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakIntensifyitem, e_cloakintensifyitem_list_),
  };
  Sheet_CloakIntensifyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakIntensifyitem_descriptor_,
      Sheet_CloakIntensifyitem::default_instance_,
      Sheet_CloakIntensifyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakIntensifyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakIntensifyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakIntensifyitem));
  E_CloakRefineItemDesc_descriptor_ = file->message_type(7);
  static const int E_CloakRefineItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineItemDesc, m_id_),
  };
  E_CloakRefineItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakRefineItemDesc_descriptor_,
      E_CloakRefineItemDesc::default_instance_,
      E_CloakRefineItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakRefineItemDesc));
  E_CloakRefineAttDesc_descriptor_ = file->message_type(8);
  static const int E_CloakRefineAttDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineAttDesc, m_vlue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineAttDesc, m_id_),
  };
  E_CloakRefineAttDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakRefineAttDesc_descriptor_,
      E_CloakRefineAttDesc::default_instance_,
      E_CloakRefineAttDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineAttDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineAttDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakRefineAttDesc));
  E_CloakRefine_descriptor_ = file->message_type(9);
  static const int E_CloakRefine_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_cloakid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_guarant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, m_att_),
  };
  E_CloakRefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakRefine_descriptor_,
      E_CloakRefine::default_instance_,
      E_CloakRefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakRefine));
  Sheet_CloakRefine_descriptor_ = file->message_type(10);
  static const int Sheet_CloakRefine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakRefine, e_cloakrefine_list_),
  };
  Sheet_CloakRefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakRefine_descriptor_,
      Sheet_CloakRefine::default_instance_,
      Sheet_CloakRefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakRefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakRefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakRefine));
  E_CloakRefineunlock_descriptor_ = file->message_type(11);
  static const int E_CloakRefineunlock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, m_cloakid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, m_refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, m_unlockatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, m_unlockvlue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, m_skill_),
  };
  E_CloakRefineunlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakRefineunlock_descriptor_,
      E_CloakRefineunlock::default_instance_,
      E_CloakRefineunlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakRefineunlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakRefineunlock));
  Sheet_CloakRefineunlock_descriptor_ = file->message_type(12);
  static const int Sheet_CloakRefineunlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakRefineunlock, e_cloakrefineunlock_list_),
  };
  Sheet_CloakRefineunlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakRefineunlock_descriptor_,
      Sheet_CloakRefineunlock::default_instance_,
      Sheet_CloakRefineunlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakRefineunlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakRefineunlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakRefineunlock));
  E_CloakGradeItemDesc_descriptor_ = file->message_type(13);
  static const int E_CloakGradeItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeItemDesc, m_id_),
  };
  E_CloakGradeItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakGradeItemDesc_descriptor_,
      E_CloakGradeItemDesc::default_instance_,
      E_CloakGradeItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakGradeItemDesc));
  E_CloakGradeAttributeDesc_descriptor_ = file->message_type(14);
  static const int E_CloakGradeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeAttributeDesc, m_vlue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeAttributeDesc, m_id_),
  };
  E_CloakGradeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakGradeAttributeDesc_descriptor_,
      E_CloakGradeAttributeDesc::default_instance_,
      E_CloakGradeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGradeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakGradeAttributeDesc));
  E_CloakGrade_descriptor_ = file->message_type(15);
  static const int E_CloakGrade_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, m_cloakid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, m_attribute_),
  };
  E_CloakGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakGrade_descriptor_,
      E_CloakGrade::default_instance_,
      E_CloakGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakGrade));
  Sheet_CloakGrade_descriptor_ = file->message_type(16);
  static const int Sheet_CloakGrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakGrade, e_cloakgrade_list_),
  };
  Sheet_CloakGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakGrade_descriptor_,
      Sheet_CloakGrade::default_instance_,
      Sheet_CloakGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakGrade));
  E_CloakGodItemDesc_descriptor_ = file->message_type(17);
  static const int E_CloakGodItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodItemDesc, m_id_),
  };
  E_CloakGodItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakGodItemDesc_descriptor_,
      E_CloakGodItemDesc::default_instance_,
      E_CloakGodItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakGodItemDesc));
  E_CloakGodAttributeDesc_descriptor_ = file->message_type(18);
  static const int E_CloakGodAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodAttributeDesc, m_vlue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodAttributeDesc, m_id_),
  };
  E_CloakGodAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakGodAttributeDesc_descriptor_,
      E_CloakGodAttributeDesc::default_instance_,
      E_CloakGodAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGodAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakGodAttributeDesc));
  E_CloakGod_descriptor_ = file->message_type(19);
  static const int E_CloakGod_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGod, m_cloakid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGod, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGod, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGod, m_attribute_),
  };
  E_CloakGod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakGod_descriptor_,
      E_CloakGod::default_instance_,
      E_CloakGod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakGod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakGod));
  Sheet_CloakGod_descriptor_ = file->message_type(20);
  static const int Sheet_CloakGod_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakGod, e_cloakgod_list_),
  };
  Sheet_CloakGod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakGod_descriptor_,
      Sheet_CloakGod::default_instance_,
      Sheet_CloakGod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakGod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakGod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakGod));
  E_CloakSoulAttributeDesc_descriptor_ = file->message_type(21);
  static const int E_CloakSoulAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulAttributeDesc, m_type_),
  };
  E_CloakSoulAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoulAttributeDesc_descriptor_,
      E_CloakSoulAttributeDesc::default_instance_,
      E_CloakSoulAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoulAttributeDesc));
  E_CloakSoul_descriptor_ = file->message_type(22);
  static const int E_CloakSoul_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_mainskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_minorskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, m_attribute_),
  };
  E_CloakSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoul_descriptor_,
      E_CloakSoul::default_instance_,
      E_CloakSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoul));
  Sheet_CloakSoul_descriptor_ = file->message_type(23);
  static const int Sheet_CloakSoul_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoul, e_cloaksoul_list_),
  };
  Sheet_CloakSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakSoul_descriptor_,
      Sheet_CloakSoul::default_instance_,
      Sheet_CloakSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakSoul));
  E_CloakSoulactiveUnlockDesc_descriptor_ = file->message_type(24);
  static const int E_CloakSoulactiveUnlockDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactiveUnlockDesc, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactiveUnlockDesc, m_condition_),
  };
  E_CloakSoulactiveUnlockDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoulactiveUnlockDesc_descriptor_,
      E_CloakSoulactiveUnlockDesc::default_instance_,
      E_CloakSoulactiveUnlockDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactiveUnlockDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactiveUnlockDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoulactiveUnlockDesc));
  E_CloakSoulactive_descriptor_ = file->message_type(25);
  static const int E_CloakSoulactive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactive, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactive, m_unlock_),
  };
  E_CloakSoulactive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoulactive_descriptor_,
      E_CloakSoulactive::default_instance_,
      E_CloakSoulactive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulactive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoulactive));
  Sheet_CloakSoulactive_descriptor_ = file->message_type(26);
  static const int Sheet_CloakSoulactive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulactive, e_cloaksoulactive_list_),
  };
  Sheet_CloakSoulactive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakSoulactive_descriptor_,
      Sheet_CloakSoulactive::default_instance_,
      Sheet_CloakSoulactive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulactive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulactive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakSoulactive));
  E_CloakSoullvAttributeDesc_descriptor_ = file->message_type(27);
  static const int E_CloakSoullvAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullvAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullvAttributeDesc, m_type_),
  };
  E_CloakSoullvAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoullvAttributeDesc_descriptor_,
      E_CloakSoullvAttributeDesc::default_instance_,
      E_CloakSoullvAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullvAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullvAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoullvAttributeDesc));
  E_CloakSoullv_descriptor_ = file->message_type(28);
  static const int E_CloakSoullv_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, m_soulllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, m_successrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, m_downlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, m_attribute_),
  };
  E_CloakSoullv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoullv_descriptor_,
      E_CloakSoullv::default_instance_,
      E_CloakSoullv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoullv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoullv));
  Sheet_CloakSoullv_descriptor_ = file->message_type(29);
  static const int Sheet_CloakSoullv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoullv, e_cloaksoullv_list_),
  };
  Sheet_CloakSoullv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakSoullv_descriptor_,
      Sheet_CloakSoullv::default_instance_,
      Sheet_CloakSoullv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoullv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoullv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakSoullv));
  E_CloakSoulclear_descriptor_ = file->message_type(30);
  static const int E_CloakSoulclear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulclear, m_soulllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulclear, m_clearatt_),
  };
  E_CloakSoulclear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoulclear_descriptor_,
      E_CloakSoulclear::default_instance_,
      E_CloakSoulclear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulclear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulclear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoulclear));
  Sheet_CloakSoulclear_descriptor_ = file->message_type(31);
  static const int Sheet_CloakSoulclear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulclear, e_cloaksoulclear_list_),
  };
  Sheet_CloakSoulclear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakSoulclear_descriptor_,
      Sheet_CloakSoulclear::default_instance_,
      Sheet_CloakSoulclear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulclear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulclear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakSoulclear));
  E_CloakSoulachievement_descriptor_ = file->message_type(32);
  static const int E_CloakSoulachievement_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, m_num_),
  };
  E_CloakSoulachievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloakSoulachievement_descriptor_,
      E_CloakSoulachievement::default_instance_,
      E_CloakSoulachievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloakSoulachievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloakSoulachievement));
  Sheet_CloakSoulachievement_descriptor_ = file->message_type(33);
  static const int Sheet_CloakSoulachievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulachievement, e_cloaksoulachievement_list_),
  };
  Sheet_CloakSoulachievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloakSoulachievement_descriptor_,
      Sheet_CloakSoulachievement::default_instance_,
      Sheet_CloakSoulachievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulachievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloakSoulachievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloakSoulachievement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fCloak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakActivate_descriptor_, &E_CloakActivate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakActivate_descriptor_, &Sheet_CloakActivate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakValueCloakattributeDesc_descriptor_, &E_CloakValueCloakattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakValue_descriptor_, &E_CloakValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakValue_descriptor_, &Sheet_CloakValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakIntensifyitem_descriptor_, &E_CloakIntensifyitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakIntensifyitem_descriptor_, &Sheet_CloakIntensifyitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakRefineItemDesc_descriptor_, &E_CloakRefineItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakRefineAttDesc_descriptor_, &E_CloakRefineAttDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakRefine_descriptor_, &E_CloakRefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakRefine_descriptor_, &Sheet_CloakRefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakRefineunlock_descriptor_, &E_CloakRefineunlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakRefineunlock_descriptor_, &Sheet_CloakRefineunlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakGradeItemDesc_descriptor_, &E_CloakGradeItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakGradeAttributeDesc_descriptor_, &E_CloakGradeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakGrade_descriptor_, &E_CloakGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakGrade_descriptor_, &Sheet_CloakGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakGodItemDesc_descriptor_, &E_CloakGodItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakGodAttributeDesc_descriptor_, &E_CloakGodAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakGod_descriptor_, &E_CloakGod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakGod_descriptor_, &Sheet_CloakGod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoulAttributeDesc_descriptor_, &E_CloakSoulAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoul_descriptor_, &E_CloakSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakSoul_descriptor_, &Sheet_CloakSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoulactiveUnlockDesc_descriptor_, &E_CloakSoulactiveUnlockDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoulactive_descriptor_, &E_CloakSoulactive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakSoulactive_descriptor_, &Sheet_CloakSoulactive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoullvAttributeDesc_descriptor_, &E_CloakSoullvAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoullv_descriptor_, &E_CloakSoullv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakSoullv_descriptor_, &Sheet_CloakSoullv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoulclear_descriptor_, &E_CloakSoulclear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakSoulclear_descriptor_, &Sheet_CloakSoulclear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloakSoulachievement_descriptor_, &E_CloakSoulachievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloakSoulachievement_descriptor_, &Sheet_CloakSoulachievement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fCloak_2eproto() {
  delete E_CloakActivate::default_instance_;
  delete E_CloakActivate_reflection_;
  delete Sheet_CloakActivate::default_instance_;
  delete Sheet_CloakActivate_reflection_;
  delete E_CloakValueCloakattributeDesc::default_instance_;
  delete E_CloakValueCloakattributeDesc_reflection_;
  delete E_CloakValue::default_instance_;
  delete E_CloakValue_reflection_;
  delete Sheet_CloakValue::default_instance_;
  delete Sheet_CloakValue_reflection_;
  delete E_CloakIntensifyitem::default_instance_;
  delete E_CloakIntensifyitem_reflection_;
  delete Sheet_CloakIntensifyitem::default_instance_;
  delete Sheet_CloakIntensifyitem_reflection_;
  delete E_CloakRefineItemDesc::default_instance_;
  delete E_CloakRefineItemDesc_reflection_;
  delete E_CloakRefineAttDesc::default_instance_;
  delete E_CloakRefineAttDesc_reflection_;
  delete E_CloakRefine::default_instance_;
  delete E_CloakRefine_reflection_;
  delete Sheet_CloakRefine::default_instance_;
  delete Sheet_CloakRefine_reflection_;
  delete E_CloakRefineunlock::default_instance_;
  delete E_CloakRefineunlock_reflection_;
  delete Sheet_CloakRefineunlock::default_instance_;
  delete Sheet_CloakRefineunlock_reflection_;
  delete E_CloakGradeItemDesc::default_instance_;
  delete E_CloakGradeItemDesc_reflection_;
  delete E_CloakGradeAttributeDesc::default_instance_;
  delete E_CloakGradeAttributeDesc_reflection_;
  delete E_CloakGrade::default_instance_;
  delete E_CloakGrade_reflection_;
  delete Sheet_CloakGrade::default_instance_;
  delete Sheet_CloakGrade_reflection_;
  delete E_CloakGodItemDesc::default_instance_;
  delete E_CloakGodItemDesc_reflection_;
  delete E_CloakGodAttributeDesc::default_instance_;
  delete E_CloakGodAttributeDesc_reflection_;
  delete E_CloakGod::default_instance_;
  delete E_CloakGod_reflection_;
  delete Sheet_CloakGod::default_instance_;
  delete Sheet_CloakGod_reflection_;
  delete E_CloakSoulAttributeDesc::default_instance_;
  delete E_CloakSoulAttributeDesc_reflection_;
  delete E_CloakSoul::default_instance_;
  delete E_CloakSoul_reflection_;
  delete Sheet_CloakSoul::default_instance_;
  delete Sheet_CloakSoul_reflection_;
  delete E_CloakSoulactiveUnlockDesc::default_instance_;
  delete E_CloakSoulactiveUnlockDesc_reflection_;
  delete E_CloakSoulactive::default_instance_;
  delete E_CloakSoulactive_reflection_;
  delete Sheet_CloakSoulactive::default_instance_;
  delete Sheet_CloakSoulactive_reflection_;
  delete E_CloakSoullvAttributeDesc::default_instance_;
  delete E_CloakSoullvAttributeDesc_reflection_;
  delete E_CloakSoullv::default_instance_;
  delete E_CloakSoullv_reflection_;
  delete Sheet_CloakSoullv::default_instance_;
  delete Sheet_CloakSoullv_reflection_;
  delete E_CloakSoulclear::default_instance_;
  delete E_CloakSoulclear_reflection_;
  delete Sheet_CloakSoulclear::default_instance_;
  delete Sheet_CloakSoulclear_reflection_;
  delete E_CloakSoulachievement::default_instance_;
  delete E_CloakSoulachievement_reflection_;
  delete Sheet_CloakSoulachievement::default_instance_;
  delete Sheet_CloakSoulachievement_reflection_;
}

void protobuf_AddDesc_E_5fCloak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rE_Cloak.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\364\001\n\017E_CloakActivate\022\037\n\tm_cloakI"
    "d\030\001 \001(\005B\014\302\377\024\010\346\212\253\351\243\216id\022&\n\006m_show\030\002 \001(\005B\026\302"
    "\377\024\022\346\230\257\345\220\246\345\210\235\345\247\213\346\230\276\347\244\272\022\035\n\tm_quality\030\003 \001(\005"
    "B\n\302\377\024\006\345\223\201\350\264\250\022\036\n\010m_facade\030\004 \001(\005B\014\302\377\024\010\345\275\242\350"
    "\261\241id\022*\n\016m_activateItem\030\005 \001(\005B\022\302\377\024\016\346\277\200\346\264\273"
    "\351\201\223\345\205\267id\022-\n\rm_activateNum\030\006 \001(\005B\026\302\377\024\022\346\277\200"
    "\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\"T\n\023Sheet_CloakActivate\022="
    "\n\024E_CloakActivate_List\030\001 \003(\0132\031.proto_ff."
    "E_CloakActivateB\004\210\301\024\010\"R\n\036E_CloakValueClo"
    "akattributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200"
    "\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\264\001\n\014E_CloakVal"
    "ue\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022*\n\nm_cloakE"
    "xp\030\002 \001(\003B\026\302\377\024\022\346\212\253\351\243\216\345\215\207\347\272\247\347\273\217\351\252\214\022^\n\020m_cl"
    "oakAttribute\030\003 \003(\0132(.proto_ff.E_CloakVal"
    "ueCloakattributeDescB\032\302\377\024\022\346\212\253\351\243\216\345\237\272\347\241\200\345\261"
    "\236\346\200\247\210\301\024\006\"L\n\020Sheet_CloakValue\0228\n\021E_CloakV"
    "alue_List\030\001 \003(\0132\026.proto_ff.E_CloakValueB"
    "\005\210\301\024\200\010\"Y\n\024E_CloakIntensifyitem\022\032\n\004m_id\030\001"
    " \001(\005B\014\302\377\024\010\351\201\223\345\205\267id\022%\n\010m_addExp\030\002 \001(\005B\023\302\377"
    "\024\017\345\242\236\345\212\240\347\273\217\351\252\214\345\200\274\"c\n\030Sheet_CloakIntensif"
    "yitem\022G\n\031E_CloakIntensifyitem_List\030\001 \003(\013"
    "2\036.proto_ff.E_CloakIntensifyitemB\004\210\301\024\004\"H"
    "\n\025E_CloakRefineItemDesc\022\031\n\005m_num\030\001 \001(\005B\n"
    "\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"E\n\024E_Cl"
    "oakRefineAttDesc\022\027\n\006m_vlue\030\001 \001(\005B\007\302\377\024\003\345\200"
    "\274\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"\313\002\n\rE_CloakRefin"
    "e\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\037\n\tm_cloakId\030\002 \001"
    "(\005B\014\302\377\024\010\346\212\253\351\243\216id\022$\n\nm_refineLv\030\003 \001(\005B\020\302\377"
    "\024\014\347\262\276\347\202\274\347\255\211\347\272\247\022&\n\tm_success\030\004 \001(\005B\023\302\377\024\017\347"
    "\262\276\347\202\274\346\210\220\345\212\237\347\216\207\022)\n\tm_guarant\030\005 \001(\005B\026\302\377\024\022\347"
    "\262\276\347\202\274\344\277\235\345\272\225\346\254\241\346\225\260\022E\n\006m_item\030\006 \003(\0132\037.prot"
    "o_ff.E_CloakRefineItemDescB\024\302\377\024\014\346\266\210\350\200\227\351\201"
    "\223\345\205\267\210\301\024\003\022C\n\005m_att\030\007 \003(\0132\036.proto_ff.E_Clo"
    "akRefineAttDescB\024\302\377\024\014\347\262\276\347\202\274\345\261\236\346\200\247\210\301\024\004\"O\n"
    "\021Sheet_CloakRefine\022:\n\022E_CloakRefine_List"
    "\030\001 \003(\0132\027.proto_ff.E_CloakRefineB\005\210\301\024\200\001\"\365"
    "\001\n\023E_CloakRefineunlock\022\024\n\004m_id\030\001 \001(\005B\006\302\377"
    "\024\002id\022\037\n\tm_cloakId\030\002 \001(\005B\014\302\377\024\010\346\212\253\351\243\216id\022$\n"
    "\nm_refineLv\030\003 \001(\005B\020\302\377\024\014\347\262\276\347\202\274\347\255\211\347\272\247\022-\n\013m"
    "_unlockAtt\030\004 \001(\005B\030\302\377\024\024\347\262\276\347\202\274\350\247\243\351\224\201\345\261\236\346\200\247"
    "id\022/\n\014m_unlockVlue\030\005 \001(\005B\031\302\377\024\025\347\262\276\347\202\274\350\247\243\351"
    "\224\201\345\261\236\346\200\247\345\200\274\022!\n\007m_skill\030\006 \001(\005B\020\302\377\024\014\346\277\200\346\264\273"
    "\346\212\200\350\203\275\"`\n\027Sheet_CloakRefineunlock\022E\n\030E_C"
    "loakRefineunlock_List\030\001 \003(\0132\035.proto_ff.E"
    "_CloakRefineunlockB\004\210\301\024@\"G\n\024E_CloakGrade"
    "ItemDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m"
    "_id\030\002 \001(\005B\006\302\377\024\002id\"J\n\031E_CloakGradeAttribu"
    "teDesc\022\027\n\006m_vlue\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\004m_id\030"
    "\002 \001(\005B\006\302\377\024\002id\"\200\002\n\014E_CloakGrade\022\024\n\004m_id\030\001"
    " \001(\005B\006\302\377\024\002id\022\037\n\tm_cloakId\030\002 \001(\005B\014\302\377\024\010\346\212\253"
    "\351\243\216id\022#\n\tm_quality\030\003 \001(\005B\020\302\377\024\014\345\215\207\345\223\201\345\223\201\350"
    "\264\250\022D\n\006m_item\030\004 \003(\0132\036.proto_ff.E_CloakGra"
    "deItemDescB\024\302\377\024\014\345\215\207\345\223\201\351\201\223\345\205\267\210\301\024\006\022N\n\013m_at"
    "tribute\030\005 \003(\0132#.proto_ff.E_CloakGradeAtt"
    "ributeDescB\024\302\377\024\014\345\215\207\345\223\201\345\261\236\346\200\247\210\301\024\007\"K\n\020Shee"
    "t_CloakGrade\0227\n\021E_CloakGrade_List\030\001 \003(\0132"
    "\026.proto_ff.E_CloakGradeB\004\210\301\024 \"E\n\022E_Cloak"
    "GodItemDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024"
    "\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"H\n\027E_CloakGodAttrib"
    "uteDesc\022\027\n\006m_vlue\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\004m_id"
    "\030\002 \001(\005B\006\302\377\024\002id\"\342\001\n\nE_CloakGod\022\037\n\tm_cloak"
    "Id\030\001 \001(\005B\014\302\377\024\010\346\212\253\351\243\216id\022!\n\007m_skill\030\002 \001(\005B"
    "\020\302\377\024\014\346\277\200\346\264\273\346\212\200\350\203\275\022B\n\006m_item\030\003 \003(\0132\034.prot"
    "o_ff.E_CloakGodItemDescB\024\302\377\024\014\345\214\226\347\245\236\351\201\223\345\205"
    "\267\210\301\024\002\022L\n\013m_attribute\030\004 \003(\0132!.proto_ff.E_"
    "CloakGodAttributeDescB\024\302\377\024\014\345\214\226\347\245\236\345\261\236\346\200\247\210"
    "\301\024\007\"E\n\016Sheet_CloakGod\0223\n\017E_CloakGod_List"
    "\030\001 \003(\0132\024.proto_ff.E_CloakGodB\004\210\301\024\010\"L\n\030E_"
    "CloakSoulAttributeDesc\022\030\n\007m_value\030\001 \001(\005B"
    "\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\200\003\n\013E_C"
    "loakSoul\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\345\231\250\351\255\202ID\022)\n\014"
    "m_rechargeID\030\002 \001(\005B\023\302\377\024\017\344\273\267\346\240\274\350\256\241\350\264\271\347\202\271\022"
    "$\n\013m_mainSkill\030\003 \001(\005B\017\302\377\024\013\344\270\273\346\212\200\350\203\275ID\0223\n"
    "\017m_attributeType\030\004 \001(\tB\032\302\377\024\022\345\215\207\347\272\247\345\261\236\346\200\247"
    "\347\261\273\345\236\213\220\301\024@\022$\n\010m_itemId\030\005 \001(\005B\022\302\377\024\016\351\207\215\347\275\256"
    "\350\264\247\345\270\201id\022)\n\tm_itemNum\030\006 \001(\005B\026\302\377\024\022\351\207\215\347\275\256\350"
    "\264\247\345\270\201\346\225\260\351\207\217\022)\n\014m_minorSkill\030\007 \003(\005B\023\302\377\024\013\345"
    "\211\257\346\212\200\350\203\275ID\210\301\024\010\022S\n\013m_attribute\030\010 \003(\0132\".pr"
    "oto_ff.E_CloakSoulAttributeDescB\032\302\377\024\022\346\277\200"
    "\346\264\273\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"H\n\017Sheet_CloakSoul\0225"
    "\n\020E_CloakSoul_List\030\001 \003(\0132\025.proto_ff.E_Cl"
    "oakSoulB\004\210\301\024\002\"`\n\033E_CloakSoulactiveUnlock"
    "Desc\022 \n\010m_parama\030\001 \001(\tB\016\302\377\024\006\345\217\202\346\225\260\220\301\024@\022\037"
    "\n\013m_condition\030\002 \001(\005B\n\302\377\024\006\346\235\241\344\273\266\"x\n\021E_Clo"
    "akSoulactive\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\346\212\200\350\203\275ID"
    "\022G\n\010m_unlock\030\002 \003(\0132%.proto_ff.E_CloakSou"
    "lactiveUnlockDescB\016\302\377\024\006\350\247\243\351\224\201\210\301\024\003\"Z\n\025She"
    "et_CloakSoulactive\022A\n\026E_CloakSoulactive_"
    "List\030\001 \003(\0132\033.proto_ff.E_CloakSoulactiveB"
    "\004\210\301\024\020\"N\n\032E_CloakSoullvAttributeDesc\022\030\n\007m"
    "_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302"
    "\377\024\002ID\"\224\002\n\rE_CloakSoullv\022\035\n\tm_soullLv\030\001 \001"
    "(\005B\n\302\377\024\006\347\255\211\347\272\247\022\"\n\010m_itemID\030\002 \001(\005B\020\302\377\024\014\346\266"
    "\210\350\200\227\351\201\223\345\205\267\022\037\n\005m_num\030\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260"
    "\351\207\217\022*\n\rm_successRate\030\004 \001(\005B\023\302\377\024\017\345\215\207\347\272\247\346\210"
    "\220\345\212\237\347\216\207\022\"\n\010m_downLv\030\005 \001(\005B\020\302\377\024\014\346\230\257\345\220\246\346\216\211"
    "\347\272\247\022O\n\013m_attribute\030\006 \003(\0132$.proto_ff.E_Cl"
    "oakSoullvAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247"
    "\210\301\024\007\"O\n\021Sheet_CloakSoullv\022:\n\022E_CloakSoul"
    "lv_List\030\001 \003(\0132\027.proto_ff.E_CloakSoullvB\005"
    "\210\301\024\200\001\"[\n\020E_CloakSoulclear\022\035\n\tm_soullLv\030\001"
    " \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022(\n\nm_clearAtt\030\002 \003(\005B\024\302\377"
    "\024\014\350\247\243\351\224\201\345\261\236\346\200\247\210\301\024\002\"W\n\024Sheet_CloakSoulcle"
    "ar\022\?\n\025E_CloakSoulclear_List\030\001 \003(\0132\032.prot"
    "o_ff.E_CloakSoulclearB\004\210\301\024\002\"\266\001\n\026E_CloakS"
    "oulachievement\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\346\210\220\345\260\261"
    "id\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\037\n\010m_para"
    "ma\030\003 \001(\005B\r\302\377\024\t\345\275\261\345\223\215\345\200\274\022\"\n\010m_itemID\030\004 \001("
    "\005B\020\302\377\024\014\345\245\226\345\212\261\351\201\223\345\205\267\022\037\n\005m_num\030\005 \001(\005B\020\302\377\024\014"
    "\345\245\226\345\212\261\346\225\260\351\207\217\"i\n\032Sheet_CloakSoulachieveme"
    "nt\022K\n\033E_CloakSoulachievement_List\030\001 \003(\0132"
    " .proto_ff.E_CloakSoulachievementB\004\210\301\024 ", 4519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Cloak.proto", &protobuf_RegisterTypes);
  E_CloakActivate::default_instance_ = new E_CloakActivate();
  Sheet_CloakActivate::default_instance_ = new Sheet_CloakActivate();
  E_CloakValueCloakattributeDesc::default_instance_ = new E_CloakValueCloakattributeDesc();
  E_CloakValue::default_instance_ = new E_CloakValue();
  Sheet_CloakValue::default_instance_ = new Sheet_CloakValue();
  E_CloakIntensifyitem::default_instance_ = new E_CloakIntensifyitem();
  Sheet_CloakIntensifyitem::default_instance_ = new Sheet_CloakIntensifyitem();
  E_CloakRefineItemDesc::default_instance_ = new E_CloakRefineItemDesc();
  E_CloakRefineAttDesc::default_instance_ = new E_CloakRefineAttDesc();
  E_CloakRefine::default_instance_ = new E_CloakRefine();
  Sheet_CloakRefine::default_instance_ = new Sheet_CloakRefine();
  E_CloakRefineunlock::default_instance_ = new E_CloakRefineunlock();
  Sheet_CloakRefineunlock::default_instance_ = new Sheet_CloakRefineunlock();
  E_CloakGradeItemDesc::default_instance_ = new E_CloakGradeItemDesc();
  E_CloakGradeAttributeDesc::default_instance_ = new E_CloakGradeAttributeDesc();
  E_CloakGrade::default_instance_ = new E_CloakGrade();
  Sheet_CloakGrade::default_instance_ = new Sheet_CloakGrade();
  E_CloakGodItemDesc::default_instance_ = new E_CloakGodItemDesc();
  E_CloakGodAttributeDesc::default_instance_ = new E_CloakGodAttributeDesc();
  E_CloakGod::default_instance_ = new E_CloakGod();
  Sheet_CloakGod::default_instance_ = new Sheet_CloakGod();
  E_CloakSoulAttributeDesc::default_instance_ = new E_CloakSoulAttributeDesc();
  E_CloakSoul::default_instance_ = new E_CloakSoul();
  Sheet_CloakSoul::default_instance_ = new Sheet_CloakSoul();
  E_CloakSoulactiveUnlockDesc::default_instance_ = new E_CloakSoulactiveUnlockDesc();
  E_CloakSoulactive::default_instance_ = new E_CloakSoulactive();
  Sheet_CloakSoulactive::default_instance_ = new Sheet_CloakSoulactive();
  E_CloakSoullvAttributeDesc::default_instance_ = new E_CloakSoullvAttributeDesc();
  E_CloakSoullv::default_instance_ = new E_CloakSoullv();
  Sheet_CloakSoullv::default_instance_ = new Sheet_CloakSoullv();
  E_CloakSoulclear::default_instance_ = new E_CloakSoulclear();
  Sheet_CloakSoulclear::default_instance_ = new Sheet_CloakSoulclear();
  E_CloakSoulachievement::default_instance_ = new E_CloakSoulachievement();
  Sheet_CloakSoulachievement::default_instance_ = new Sheet_CloakSoulachievement();
  E_CloakActivate::default_instance_->InitAsDefaultInstance();
  Sheet_CloakActivate::default_instance_->InitAsDefaultInstance();
  E_CloakValueCloakattributeDesc::default_instance_->InitAsDefaultInstance();
  E_CloakValue::default_instance_->InitAsDefaultInstance();
  Sheet_CloakValue::default_instance_->InitAsDefaultInstance();
  E_CloakIntensifyitem::default_instance_->InitAsDefaultInstance();
  Sheet_CloakIntensifyitem::default_instance_->InitAsDefaultInstance();
  E_CloakRefineItemDesc::default_instance_->InitAsDefaultInstance();
  E_CloakRefineAttDesc::default_instance_->InitAsDefaultInstance();
  E_CloakRefine::default_instance_->InitAsDefaultInstance();
  Sheet_CloakRefine::default_instance_->InitAsDefaultInstance();
  E_CloakRefineunlock::default_instance_->InitAsDefaultInstance();
  Sheet_CloakRefineunlock::default_instance_->InitAsDefaultInstance();
  E_CloakGradeItemDesc::default_instance_->InitAsDefaultInstance();
  E_CloakGradeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_CloakGrade::default_instance_->InitAsDefaultInstance();
  Sheet_CloakGrade::default_instance_->InitAsDefaultInstance();
  E_CloakGodItemDesc::default_instance_->InitAsDefaultInstance();
  E_CloakGodAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_CloakGod::default_instance_->InitAsDefaultInstance();
  Sheet_CloakGod::default_instance_->InitAsDefaultInstance();
  E_CloakSoulAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_CloakSoul::default_instance_->InitAsDefaultInstance();
  Sheet_CloakSoul::default_instance_->InitAsDefaultInstance();
  E_CloakSoulactiveUnlockDesc::default_instance_->InitAsDefaultInstance();
  E_CloakSoulactive::default_instance_->InitAsDefaultInstance();
  Sheet_CloakSoulactive::default_instance_->InitAsDefaultInstance();
  E_CloakSoullvAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_CloakSoullv::default_instance_->InitAsDefaultInstance();
  Sheet_CloakSoullv::default_instance_->InitAsDefaultInstance();
  E_CloakSoulclear::default_instance_->InitAsDefaultInstance();
  Sheet_CloakSoulclear::default_instance_->InitAsDefaultInstance();
  E_CloakSoulachievement::default_instance_->InitAsDefaultInstance();
  Sheet_CloakSoulachievement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fCloak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fCloak_2eproto {
  StaticDescriptorInitializer_E_5fCloak_2eproto() {
    protobuf_AddDesc_E_5fCloak_2eproto();
  }
} static_descriptor_initializer_E_5fCloak_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_CloakActivate::kMCloakIdFieldNumber;
const int E_CloakActivate::kMShowFieldNumber;
const int E_CloakActivate::kMQualityFieldNumber;
const int E_CloakActivate::kMFacadeFieldNumber;
const int E_CloakActivate::kMActivateItemFieldNumber;
const int E_CloakActivate::kMActivateNumFieldNumber;
#endif  // !_MSC_VER

E_CloakActivate::E_CloakActivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakActivate::InitAsDefaultInstance() {
}

E_CloakActivate::E_CloakActivate(const E_CloakActivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakActivate::SharedCtor() {
  _cached_size_ = 0;
  m_cloakid_ = 0;
  m_show_ = 0;
  m_quality_ = 0;
  m_facade_ = 0;
  m_activateitem_ = 0;
  m_activatenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakActivate::~E_CloakActivate() {
  SharedDtor();
}

void E_CloakActivate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakActivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakActivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakActivate_descriptor_;
}

const E_CloakActivate& E_CloakActivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakActivate* E_CloakActivate::default_instance_ = NULL;

E_CloakActivate* E_CloakActivate::New() const {
  return new E_CloakActivate;
}

void E_CloakActivate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_cloakid_ = 0;
    m_show_ = 0;
    m_quality_ = 0;
    m_facade_ = 0;
    m_activateitem_ = 0;
    m_activatenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakActivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_cloakId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cloakid_)));
          set_has_m_cloakid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_show;
        break;
      }

      // optional int32 m_show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_show_)));
          set_has_m_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_facade;
        break;
      }

      // optional int32 m_facade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_facade_)));
          set_has_m_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_activateItem;
        break;
      }

      // optional int32 m_activateItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activateItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activateitem_)));
          set_has_m_activateitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_activateNum;
        break;
      }

      // optional int32 m_activateNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activatenum_)));
          set_has_m_activatenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakActivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_cloakId = 1;
  if (has_m_cloakid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_cloakid(), output);
  }

  // optional int32 m_show = 2;
  if (has_m_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_show(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // optional int32 m_facade = 4;
  if (has_m_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_facade(), output);
  }

  // optional int32 m_activateItem = 5;
  if (has_m_activateitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_activateitem(), output);
  }

  // optional int32 m_activateNum = 6;
  if (has_m_activatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_activatenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakActivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_cloakId = 1;
  if (has_m_cloakid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_cloakid(), target);
  }

  // optional int32 m_show = 2;
  if (has_m_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_show(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // optional int32 m_facade = 4;
  if (has_m_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_facade(), target);
  }

  // optional int32 m_activateItem = 5;
  if (has_m_activateitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_activateitem(), target);
  }

  // optional int32 m_activateNum = 6;
  if (has_m_activatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_activatenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakActivate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_cloakId = 1;
    if (has_m_cloakid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cloakid());
    }

    // optional int32 m_show = 2;
    if (has_m_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_show());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_facade = 4;
    if (has_m_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_facade());
    }

    // optional int32 m_activateItem = 5;
    if (has_m_activateitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activateitem());
    }

    // optional int32 m_activateNum = 6;
    if (has_m_activatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activatenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakActivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakActivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakActivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakActivate::MergeFrom(const E_CloakActivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_cloakid()) {
      set_m_cloakid(from.m_cloakid());
    }
    if (from.has_m_show()) {
      set_m_show(from.m_show());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_facade()) {
      set_m_facade(from.m_facade());
    }
    if (from.has_m_activateitem()) {
      set_m_activateitem(from.m_activateitem());
    }
    if (from.has_m_activatenum()) {
      set_m_activatenum(from.m_activatenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakActivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakActivate::CopyFrom(const E_CloakActivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakActivate::IsInitialized() const {

  return true;
}

void E_CloakActivate::Swap(E_CloakActivate* other) {
  if (other != this) {
    std::swap(m_cloakid_, other->m_cloakid_);
    std::swap(m_show_, other->m_show_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_facade_, other->m_facade_);
    std::swap(m_activateitem_, other->m_activateitem_);
    std::swap(m_activatenum_, other->m_activatenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakActivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakActivate_descriptor_;
  metadata.reflection = E_CloakActivate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakActivate::kECloakActivateListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakActivate::Sheet_CloakActivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakActivate::InitAsDefaultInstance() {
}

Sheet_CloakActivate::Sheet_CloakActivate(const Sheet_CloakActivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakActivate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakActivate::~Sheet_CloakActivate() {
  SharedDtor();
}

void Sheet_CloakActivate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakActivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakActivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakActivate_descriptor_;
}

const Sheet_CloakActivate& Sheet_CloakActivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakActivate* Sheet_CloakActivate::default_instance_ = NULL;

Sheet_CloakActivate* Sheet_CloakActivate::New() const {
  return new Sheet_CloakActivate;
}

void Sheet_CloakActivate::Clear() {
  e_cloakactivate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakActivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakActivate E_CloakActivate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakActivate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakactivate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakActivate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakActivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakActivate E_CloakActivate_List = 1;
  for (int i = 0; i < this->e_cloakactivate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakactivate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakActivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakActivate E_CloakActivate_List = 1;
  for (int i = 0; i < this->e_cloakactivate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakactivate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakActivate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakActivate E_CloakActivate_List = 1;
  total_size += 1 * this->e_cloakactivate_list_size();
  for (int i = 0; i < this->e_cloakactivate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakactivate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakActivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakActivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakActivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakActivate::MergeFrom(const Sheet_CloakActivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakactivate_list_.MergeFrom(from.e_cloakactivate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakActivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakActivate::CopyFrom(const Sheet_CloakActivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakActivate::IsInitialized() const {

  return true;
}

void Sheet_CloakActivate::Swap(Sheet_CloakActivate* other) {
  if (other != this) {
    e_cloakactivate_list_.Swap(&other->e_cloakactivate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakActivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakActivate_descriptor_;
  metadata.reflection = Sheet_CloakActivate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakValueCloakattributeDesc::kMValueFieldNumber;
const int E_CloakValueCloakattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_CloakValueCloakattributeDesc::E_CloakValueCloakattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakValueCloakattributeDesc::InitAsDefaultInstance() {
}

E_CloakValueCloakattributeDesc::E_CloakValueCloakattributeDesc(const E_CloakValueCloakattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakValueCloakattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakValueCloakattributeDesc::~E_CloakValueCloakattributeDesc() {
  SharedDtor();
}

void E_CloakValueCloakattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakValueCloakattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakValueCloakattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakValueCloakattributeDesc_descriptor_;
}

const E_CloakValueCloakattributeDesc& E_CloakValueCloakattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakValueCloakattributeDesc* E_CloakValueCloakattributeDesc::default_instance_ = NULL;

E_CloakValueCloakattributeDesc* E_CloakValueCloakattributeDesc::New() const {
  return new E_CloakValueCloakattributeDesc;
}

void E_CloakValueCloakattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakValueCloakattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakValueCloakattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakValueCloakattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakValueCloakattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakValueCloakattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakValueCloakattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakValueCloakattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakValueCloakattributeDesc::MergeFrom(const E_CloakValueCloakattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakValueCloakattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakValueCloakattributeDesc::CopyFrom(const E_CloakValueCloakattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakValueCloakattributeDesc::IsInitialized() const {

  return true;
}

void E_CloakValueCloakattributeDesc::Swap(E_CloakValueCloakattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakValueCloakattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakValueCloakattributeDesc_descriptor_;
  metadata.reflection = E_CloakValueCloakattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakValue::kMLvFieldNumber;
const int E_CloakValue::kMCloakExpFieldNumber;
const int E_CloakValue::kMCloakAttributeFieldNumber;
#endif  // !_MSC_VER

E_CloakValue::E_CloakValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakValue::InitAsDefaultInstance() {
}

E_CloakValue::E_CloakValue(const E_CloakValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakValue::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_cloakexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakValue::~E_CloakValue() {
  SharedDtor();
}

void E_CloakValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakValue_descriptor_;
}

const E_CloakValue& E_CloakValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakValue* E_CloakValue::default_instance_ = NULL;

E_CloakValue* E_CloakValue::New() const {
  return new E_CloakValue;
}

void E_CloakValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_cloakexp_ = GOOGLE_LONGLONG(0);
  }
  m_cloakattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cloakExp;
        break;
      }

      // optional int64 m_cloakExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cloakExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_cloakexp_)));
          set_has_m_cloakexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_cloakAttribute;
        break;
      }

      // repeated .proto_ff.E_CloakValueCloakattributeDesc m_cloakAttribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cloakAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_cloakattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_cloakAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int64 m_cloakExp = 2;
  if (has_m_cloakexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_cloakexp(), output);
  }

  // repeated .proto_ff.E_CloakValueCloakattributeDesc m_cloakAttribute = 3;
  for (int i = 0; i < this->m_cloakattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_cloakattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int64 m_cloakExp = 2;
  if (has_m_cloakexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_cloakexp(), target);
  }

  // repeated .proto_ff.E_CloakValueCloakattributeDesc m_cloakAttribute = 3;
  for (int i = 0; i < this->m_cloakattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_cloakattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int64 m_cloakExp = 2;
    if (has_m_cloakexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_cloakexp());
    }

  }
  // repeated .proto_ff.E_CloakValueCloakattributeDesc m_cloakAttribute = 3;
  total_size += 1 * this->m_cloakattribute_size();
  for (int i = 0; i < this->m_cloakattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_cloakattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakValue::MergeFrom(const E_CloakValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_cloakattribute_.MergeFrom(from.m_cloakattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_cloakexp()) {
      set_m_cloakexp(from.m_cloakexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakValue::CopyFrom(const E_CloakValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakValue::IsInitialized() const {

  return true;
}

void E_CloakValue::Swap(E_CloakValue* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_cloakexp_, other->m_cloakexp_);
    m_cloakattribute_.Swap(&other->m_cloakattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakValue_descriptor_;
  metadata.reflection = E_CloakValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakValue::kECloakValueListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakValue::Sheet_CloakValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakValue::InitAsDefaultInstance() {
}

Sheet_CloakValue::Sheet_CloakValue(const Sheet_CloakValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakValue::~Sheet_CloakValue() {
  SharedDtor();
}

void Sheet_CloakValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakValue_descriptor_;
}

const Sheet_CloakValue& Sheet_CloakValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakValue* Sheet_CloakValue::default_instance_ = NULL;

Sheet_CloakValue* Sheet_CloakValue::New() const {
  return new Sheet_CloakValue;
}

void Sheet_CloakValue::Clear() {
  e_cloakvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakValue E_CloakValue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakValue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakValue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakValue E_CloakValue_List = 1;
  for (int i = 0; i < this->e_cloakvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakValue E_CloakValue_List = 1;
  for (int i = 0; i < this->e_cloakvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakValue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakValue E_CloakValue_List = 1;
  total_size += 1 * this->e_cloakvalue_list_size();
  for (int i = 0; i < this->e_cloakvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakValue::MergeFrom(const Sheet_CloakValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakvalue_list_.MergeFrom(from.e_cloakvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakValue::CopyFrom(const Sheet_CloakValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakValue::IsInitialized() const {

  return true;
}

void Sheet_CloakValue::Swap(Sheet_CloakValue* other) {
  if (other != this) {
    e_cloakvalue_list_.Swap(&other->e_cloakvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakValue_descriptor_;
  metadata.reflection = Sheet_CloakValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakIntensifyitem::kMIdFieldNumber;
const int E_CloakIntensifyitem::kMAddExpFieldNumber;
#endif  // !_MSC_VER

E_CloakIntensifyitem::E_CloakIntensifyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakIntensifyitem::InitAsDefaultInstance() {
}

E_CloakIntensifyitem::E_CloakIntensifyitem(const E_CloakIntensifyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakIntensifyitem::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_addexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakIntensifyitem::~E_CloakIntensifyitem() {
  SharedDtor();
}

void E_CloakIntensifyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakIntensifyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakIntensifyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakIntensifyitem_descriptor_;
}

const E_CloakIntensifyitem& E_CloakIntensifyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakIntensifyitem* E_CloakIntensifyitem::default_instance_ = NULL;

E_CloakIntensifyitem* E_CloakIntensifyitem::New() const {
  return new E_CloakIntensifyitem;
}

void E_CloakIntensifyitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_addexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakIntensifyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_addExp;
        break;
      }

      // optional int32 m_addExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addexp_)));
          set_has_m_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakIntensifyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_addExp = 2;
  if (has_m_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_addexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakIntensifyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_addExp = 2;
  if (has_m_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_addexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakIntensifyitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_addExp = 2;
    if (has_m_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakIntensifyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakIntensifyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakIntensifyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakIntensifyitem::MergeFrom(const E_CloakIntensifyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_addexp()) {
      set_m_addexp(from.m_addexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakIntensifyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakIntensifyitem::CopyFrom(const E_CloakIntensifyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakIntensifyitem::IsInitialized() const {

  return true;
}

void E_CloakIntensifyitem::Swap(E_CloakIntensifyitem* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_addexp_, other->m_addexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakIntensifyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakIntensifyitem_descriptor_;
  metadata.reflection = E_CloakIntensifyitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakIntensifyitem::kECloakIntensifyitemListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakIntensifyitem::Sheet_CloakIntensifyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakIntensifyitem::InitAsDefaultInstance() {
}

Sheet_CloakIntensifyitem::Sheet_CloakIntensifyitem(const Sheet_CloakIntensifyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakIntensifyitem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakIntensifyitem::~Sheet_CloakIntensifyitem() {
  SharedDtor();
}

void Sheet_CloakIntensifyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakIntensifyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakIntensifyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakIntensifyitem_descriptor_;
}

const Sheet_CloakIntensifyitem& Sheet_CloakIntensifyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakIntensifyitem* Sheet_CloakIntensifyitem::default_instance_ = NULL;

Sheet_CloakIntensifyitem* Sheet_CloakIntensifyitem::New() const {
  return new Sheet_CloakIntensifyitem;
}

void Sheet_CloakIntensifyitem::Clear() {
  e_cloakintensifyitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakIntensifyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakIntensifyitem E_CloakIntensifyitem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakIntensifyitem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakintensifyitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakIntensifyitem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakIntensifyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakIntensifyitem E_CloakIntensifyitem_List = 1;
  for (int i = 0; i < this->e_cloakintensifyitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakintensifyitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakIntensifyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakIntensifyitem E_CloakIntensifyitem_List = 1;
  for (int i = 0; i < this->e_cloakintensifyitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakintensifyitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakIntensifyitem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakIntensifyitem E_CloakIntensifyitem_List = 1;
  total_size += 1 * this->e_cloakintensifyitem_list_size();
  for (int i = 0; i < this->e_cloakintensifyitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakintensifyitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakIntensifyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakIntensifyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakIntensifyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakIntensifyitem::MergeFrom(const Sheet_CloakIntensifyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakintensifyitem_list_.MergeFrom(from.e_cloakintensifyitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakIntensifyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakIntensifyitem::CopyFrom(const Sheet_CloakIntensifyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakIntensifyitem::IsInitialized() const {

  return true;
}

void Sheet_CloakIntensifyitem::Swap(Sheet_CloakIntensifyitem* other) {
  if (other != this) {
    e_cloakintensifyitem_list_.Swap(&other->e_cloakintensifyitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakIntensifyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakIntensifyitem_descriptor_;
  metadata.reflection = Sheet_CloakIntensifyitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakRefineItemDesc::kMNumFieldNumber;
const int E_CloakRefineItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CloakRefineItemDesc::E_CloakRefineItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakRefineItemDesc::InitAsDefaultInstance() {
}

E_CloakRefineItemDesc::E_CloakRefineItemDesc(const E_CloakRefineItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakRefineItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakRefineItemDesc::~E_CloakRefineItemDesc() {
  SharedDtor();
}

void E_CloakRefineItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakRefineItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakRefineItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakRefineItemDesc_descriptor_;
}

const E_CloakRefineItemDesc& E_CloakRefineItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakRefineItemDesc* E_CloakRefineItemDesc::default_instance_ = NULL;

E_CloakRefineItemDesc* E_CloakRefineItemDesc::New() const {
  return new E_CloakRefineItemDesc;
}

void E_CloakRefineItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakRefineItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakRefineItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakRefineItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakRefineItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakRefineItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakRefineItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakRefineItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakRefineItemDesc::MergeFrom(const E_CloakRefineItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakRefineItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakRefineItemDesc::CopyFrom(const E_CloakRefineItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakRefineItemDesc::IsInitialized() const {

  return true;
}

void E_CloakRefineItemDesc::Swap(E_CloakRefineItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakRefineItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakRefineItemDesc_descriptor_;
  metadata.reflection = E_CloakRefineItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakRefineAttDesc::kMVlueFieldNumber;
const int E_CloakRefineAttDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CloakRefineAttDesc::E_CloakRefineAttDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakRefineAttDesc::InitAsDefaultInstance() {
}

E_CloakRefineAttDesc::E_CloakRefineAttDesc(const E_CloakRefineAttDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakRefineAttDesc::SharedCtor() {
  _cached_size_ = 0;
  m_vlue_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakRefineAttDesc::~E_CloakRefineAttDesc() {
  SharedDtor();
}

void E_CloakRefineAttDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakRefineAttDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakRefineAttDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakRefineAttDesc_descriptor_;
}

const E_CloakRefineAttDesc& E_CloakRefineAttDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakRefineAttDesc* E_CloakRefineAttDesc::default_instance_ = NULL;

E_CloakRefineAttDesc* E_CloakRefineAttDesc::New() const {
  return new E_CloakRefineAttDesc;
}

void E_CloakRefineAttDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_vlue_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakRefineAttDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_vlue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vlue_)));
          set_has_m_vlue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakRefineAttDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_vlue = 1;
  if (has_m_vlue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_vlue(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakRefineAttDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_vlue = 1;
  if (has_m_vlue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_vlue(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakRefineAttDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_vlue = 1;
    if (has_m_vlue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vlue());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakRefineAttDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakRefineAttDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakRefineAttDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakRefineAttDesc::MergeFrom(const E_CloakRefineAttDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_vlue()) {
      set_m_vlue(from.m_vlue());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakRefineAttDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakRefineAttDesc::CopyFrom(const E_CloakRefineAttDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakRefineAttDesc::IsInitialized() const {

  return true;
}

void E_CloakRefineAttDesc::Swap(E_CloakRefineAttDesc* other) {
  if (other != this) {
    std::swap(m_vlue_, other->m_vlue_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakRefineAttDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakRefineAttDesc_descriptor_;
  metadata.reflection = E_CloakRefineAttDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakRefine::kMIdFieldNumber;
const int E_CloakRefine::kMCloakIdFieldNumber;
const int E_CloakRefine::kMRefineLvFieldNumber;
const int E_CloakRefine::kMSuccessFieldNumber;
const int E_CloakRefine::kMGuarantFieldNumber;
const int E_CloakRefine::kMItemFieldNumber;
const int E_CloakRefine::kMAttFieldNumber;
#endif  // !_MSC_VER

E_CloakRefine::E_CloakRefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakRefine::InitAsDefaultInstance() {
}

E_CloakRefine::E_CloakRefine(const E_CloakRefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakRefine::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_cloakid_ = 0;
  m_refinelv_ = 0;
  m_success_ = 0;
  m_guarant_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakRefine::~E_CloakRefine() {
  SharedDtor();
}

void E_CloakRefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakRefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakRefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakRefine_descriptor_;
}

const E_CloakRefine& E_CloakRefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakRefine* E_CloakRefine::default_instance_ = NULL;

E_CloakRefine* E_CloakRefine::New() const {
  return new E_CloakRefine;
}

void E_CloakRefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_cloakid_ = 0;
    m_refinelv_ = 0;
    m_success_ = 0;
    m_guarant_ = 0;
  }
  m_item_.Clear();
  m_att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakRefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cloakId;
        break;
      }

      // optional int32 m_cloakId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cloakId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cloakid_)));
          set_has_m_cloakid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_refineLv;
        break;
      }

      // optional int32 m_refineLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refinelv_)));
          set_has_m_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_success;
        break;
      }

      // optional int32 m_success = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_success_)));
          set_has_m_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_guarant;
        break;
      }

      // optional int32 m_guarant = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guarant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guarant_)));
          set_has_m_guarant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_CloakRefineItemDesc m_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_item;
        if (input->ExpectTag(58)) goto parse_m_att;
        break;
      }

      // repeated .proto_ff.E_CloakRefineAttDesc m_att = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakRefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_cloakId = 2;
  if (has_m_cloakid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_cloakid(), output);
  }

  // optional int32 m_refineLv = 3;
  if (has_m_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_refinelv(), output);
  }

  // optional int32 m_success = 4;
  if (has_m_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_success(), output);
  }

  // optional int32 m_guarant = 5;
  if (has_m_guarant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_guarant(), output);
  }

  // repeated .proto_ff.E_CloakRefineItemDesc m_item = 6;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_item(i), output);
  }

  // repeated .proto_ff.E_CloakRefineAttDesc m_att = 7;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakRefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_cloakId = 2;
  if (has_m_cloakid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_cloakid(), target);
  }

  // optional int32 m_refineLv = 3;
  if (has_m_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_refinelv(), target);
  }

  // optional int32 m_success = 4;
  if (has_m_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_success(), target);
  }

  // optional int32 m_guarant = 5;
  if (has_m_guarant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_guarant(), target);
  }

  // repeated .proto_ff.E_CloakRefineItemDesc m_item = 6;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_item(i), target);
  }

  // repeated .proto_ff.E_CloakRefineAttDesc m_att = 7;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakRefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_cloakId = 2;
    if (has_m_cloakid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cloakid());
    }

    // optional int32 m_refineLv = 3;
    if (has_m_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refinelv());
    }

    // optional int32 m_success = 4;
    if (has_m_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_success());
    }

    // optional int32 m_guarant = 5;
    if (has_m_guarant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guarant());
    }

  }
  // repeated .proto_ff.E_CloakRefineItemDesc m_item = 6;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  // repeated .proto_ff.E_CloakRefineAttDesc m_att = 7;
  total_size += 1 * this->m_att_size();
  for (int i = 0; i < this->m_att_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_att(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakRefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakRefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakRefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakRefine::MergeFrom(const E_CloakRefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  m_att_.MergeFrom(from.m_att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_cloakid()) {
      set_m_cloakid(from.m_cloakid());
    }
    if (from.has_m_refinelv()) {
      set_m_refinelv(from.m_refinelv());
    }
    if (from.has_m_success()) {
      set_m_success(from.m_success());
    }
    if (from.has_m_guarant()) {
      set_m_guarant(from.m_guarant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakRefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakRefine::CopyFrom(const E_CloakRefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakRefine::IsInitialized() const {

  return true;
}

void E_CloakRefine::Swap(E_CloakRefine* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_cloakid_, other->m_cloakid_);
    std::swap(m_refinelv_, other->m_refinelv_);
    std::swap(m_success_, other->m_success_);
    std::swap(m_guarant_, other->m_guarant_);
    m_item_.Swap(&other->m_item_);
    m_att_.Swap(&other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakRefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakRefine_descriptor_;
  metadata.reflection = E_CloakRefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakRefine::kECloakRefineListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakRefine::Sheet_CloakRefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakRefine::InitAsDefaultInstance() {
}

Sheet_CloakRefine::Sheet_CloakRefine(const Sheet_CloakRefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakRefine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakRefine::~Sheet_CloakRefine() {
  SharedDtor();
}

void Sheet_CloakRefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakRefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakRefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakRefine_descriptor_;
}

const Sheet_CloakRefine& Sheet_CloakRefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakRefine* Sheet_CloakRefine::default_instance_ = NULL;

Sheet_CloakRefine* Sheet_CloakRefine::New() const {
  return new Sheet_CloakRefine;
}

void Sheet_CloakRefine::Clear() {
  e_cloakrefine_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakRefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakRefine E_CloakRefine_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakRefine_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakrefine_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakRefine_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakRefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakRefine E_CloakRefine_List = 1;
  for (int i = 0; i < this->e_cloakrefine_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakrefine_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakRefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakRefine E_CloakRefine_List = 1;
  for (int i = 0; i < this->e_cloakrefine_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakrefine_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakRefine::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakRefine E_CloakRefine_List = 1;
  total_size += 1 * this->e_cloakrefine_list_size();
  for (int i = 0; i < this->e_cloakrefine_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakrefine_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakRefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakRefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakRefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakRefine::MergeFrom(const Sheet_CloakRefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakrefine_list_.MergeFrom(from.e_cloakrefine_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakRefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakRefine::CopyFrom(const Sheet_CloakRefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakRefine::IsInitialized() const {

  return true;
}

void Sheet_CloakRefine::Swap(Sheet_CloakRefine* other) {
  if (other != this) {
    e_cloakrefine_list_.Swap(&other->e_cloakrefine_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakRefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakRefine_descriptor_;
  metadata.reflection = Sheet_CloakRefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakRefineunlock::kMIdFieldNumber;
const int E_CloakRefineunlock::kMCloakIdFieldNumber;
const int E_CloakRefineunlock::kMRefineLvFieldNumber;
const int E_CloakRefineunlock::kMUnlockAttFieldNumber;
const int E_CloakRefineunlock::kMUnlockVlueFieldNumber;
const int E_CloakRefineunlock::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_CloakRefineunlock::E_CloakRefineunlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakRefineunlock::InitAsDefaultInstance() {
}

E_CloakRefineunlock::E_CloakRefineunlock(const E_CloakRefineunlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakRefineunlock::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_cloakid_ = 0;
  m_refinelv_ = 0;
  m_unlockatt_ = 0;
  m_unlockvlue_ = 0;
  m_skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakRefineunlock::~E_CloakRefineunlock() {
  SharedDtor();
}

void E_CloakRefineunlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakRefineunlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakRefineunlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakRefineunlock_descriptor_;
}

const E_CloakRefineunlock& E_CloakRefineunlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakRefineunlock* E_CloakRefineunlock::default_instance_ = NULL;

E_CloakRefineunlock* E_CloakRefineunlock::New() const {
  return new E_CloakRefineunlock;
}

void E_CloakRefineunlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_cloakid_ = 0;
    m_refinelv_ = 0;
    m_unlockatt_ = 0;
    m_unlockvlue_ = 0;
    m_skill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakRefineunlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cloakId;
        break;
      }

      // optional int32 m_cloakId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cloakId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cloakid_)));
          set_has_m_cloakid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_refineLv;
        break;
      }

      // optional int32 m_refineLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refinelv_)));
          set_has_m_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_unlockAtt;
        break;
      }

      // optional int32 m_unlockAtt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unlockAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlockatt_)));
          set_has_m_unlockatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_unlockVlue;
        break;
      }

      // optional int32 m_unlockVlue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unlockVlue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlockvlue_)));
          set_has_m_unlockvlue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_skill;
        break;
      }

      // optional int32 m_skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakRefineunlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_cloakId = 2;
  if (has_m_cloakid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_cloakid(), output);
  }

  // optional int32 m_refineLv = 3;
  if (has_m_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_refinelv(), output);
  }

  // optional int32 m_unlockAtt = 4;
  if (has_m_unlockatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_unlockatt(), output);
  }

  // optional int32 m_unlockVlue = 5;
  if (has_m_unlockvlue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_unlockvlue(), output);
  }

  // optional int32 m_skill = 6;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakRefineunlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_cloakId = 2;
  if (has_m_cloakid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_cloakid(), target);
  }

  // optional int32 m_refineLv = 3;
  if (has_m_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_refinelv(), target);
  }

  // optional int32 m_unlockAtt = 4;
  if (has_m_unlockatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_unlockatt(), target);
  }

  // optional int32 m_unlockVlue = 5;
  if (has_m_unlockvlue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_unlockvlue(), target);
  }

  // optional int32 m_skill = 6;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakRefineunlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_cloakId = 2;
    if (has_m_cloakid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cloakid());
    }

    // optional int32 m_refineLv = 3;
    if (has_m_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refinelv());
    }

    // optional int32 m_unlockAtt = 4;
    if (has_m_unlockatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlockatt());
    }

    // optional int32 m_unlockVlue = 5;
    if (has_m_unlockvlue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlockvlue());
    }

    // optional int32 m_skill = 6;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakRefineunlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakRefineunlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakRefineunlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakRefineunlock::MergeFrom(const E_CloakRefineunlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_cloakid()) {
      set_m_cloakid(from.m_cloakid());
    }
    if (from.has_m_refinelv()) {
      set_m_refinelv(from.m_refinelv());
    }
    if (from.has_m_unlockatt()) {
      set_m_unlockatt(from.m_unlockatt());
    }
    if (from.has_m_unlockvlue()) {
      set_m_unlockvlue(from.m_unlockvlue());
    }
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakRefineunlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakRefineunlock::CopyFrom(const E_CloakRefineunlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakRefineunlock::IsInitialized() const {

  return true;
}

void E_CloakRefineunlock::Swap(E_CloakRefineunlock* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_cloakid_, other->m_cloakid_);
    std::swap(m_refinelv_, other->m_refinelv_);
    std::swap(m_unlockatt_, other->m_unlockatt_);
    std::swap(m_unlockvlue_, other->m_unlockvlue_);
    std::swap(m_skill_, other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakRefineunlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakRefineunlock_descriptor_;
  metadata.reflection = E_CloakRefineunlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakRefineunlock::kECloakRefineunlockListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakRefineunlock::Sheet_CloakRefineunlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakRefineunlock::InitAsDefaultInstance() {
}

Sheet_CloakRefineunlock::Sheet_CloakRefineunlock(const Sheet_CloakRefineunlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakRefineunlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakRefineunlock::~Sheet_CloakRefineunlock() {
  SharedDtor();
}

void Sheet_CloakRefineunlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakRefineunlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakRefineunlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakRefineunlock_descriptor_;
}

const Sheet_CloakRefineunlock& Sheet_CloakRefineunlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakRefineunlock* Sheet_CloakRefineunlock::default_instance_ = NULL;

Sheet_CloakRefineunlock* Sheet_CloakRefineunlock::New() const {
  return new Sheet_CloakRefineunlock;
}

void Sheet_CloakRefineunlock::Clear() {
  e_cloakrefineunlock_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakRefineunlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakRefineunlock E_CloakRefineunlock_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakRefineunlock_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakrefineunlock_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakRefineunlock_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakRefineunlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakRefineunlock E_CloakRefineunlock_List = 1;
  for (int i = 0; i < this->e_cloakrefineunlock_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakrefineunlock_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakRefineunlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakRefineunlock E_CloakRefineunlock_List = 1;
  for (int i = 0; i < this->e_cloakrefineunlock_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakrefineunlock_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakRefineunlock::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakRefineunlock E_CloakRefineunlock_List = 1;
  total_size += 1 * this->e_cloakrefineunlock_list_size();
  for (int i = 0; i < this->e_cloakrefineunlock_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakrefineunlock_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakRefineunlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakRefineunlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakRefineunlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakRefineunlock::MergeFrom(const Sheet_CloakRefineunlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakrefineunlock_list_.MergeFrom(from.e_cloakrefineunlock_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakRefineunlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakRefineunlock::CopyFrom(const Sheet_CloakRefineunlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakRefineunlock::IsInitialized() const {

  return true;
}

void Sheet_CloakRefineunlock::Swap(Sheet_CloakRefineunlock* other) {
  if (other != this) {
    e_cloakrefineunlock_list_.Swap(&other->e_cloakrefineunlock_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakRefineunlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakRefineunlock_descriptor_;
  metadata.reflection = Sheet_CloakRefineunlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakGradeItemDesc::kMNumFieldNumber;
const int E_CloakGradeItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CloakGradeItemDesc::E_CloakGradeItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakGradeItemDesc::InitAsDefaultInstance() {
}

E_CloakGradeItemDesc::E_CloakGradeItemDesc(const E_CloakGradeItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakGradeItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakGradeItemDesc::~E_CloakGradeItemDesc() {
  SharedDtor();
}

void E_CloakGradeItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakGradeItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakGradeItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakGradeItemDesc_descriptor_;
}

const E_CloakGradeItemDesc& E_CloakGradeItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakGradeItemDesc* E_CloakGradeItemDesc::default_instance_ = NULL;

E_CloakGradeItemDesc* E_CloakGradeItemDesc::New() const {
  return new E_CloakGradeItemDesc;
}

void E_CloakGradeItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakGradeItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakGradeItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakGradeItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakGradeItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakGradeItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakGradeItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakGradeItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakGradeItemDesc::MergeFrom(const E_CloakGradeItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakGradeItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakGradeItemDesc::CopyFrom(const E_CloakGradeItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakGradeItemDesc::IsInitialized() const {

  return true;
}

void E_CloakGradeItemDesc::Swap(E_CloakGradeItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakGradeItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakGradeItemDesc_descriptor_;
  metadata.reflection = E_CloakGradeItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakGradeAttributeDesc::kMVlueFieldNumber;
const int E_CloakGradeAttributeDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CloakGradeAttributeDesc::E_CloakGradeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakGradeAttributeDesc::InitAsDefaultInstance() {
}

E_CloakGradeAttributeDesc::E_CloakGradeAttributeDesc(const E_CloakGradeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakGradeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_vlue_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakGradeAttributeDesc::~E_CloakGradeAttributeDesc() {
  SharedDtor();
}

void E_CloakGradeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakGradeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakGradeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakGradeAttributeDesc_descriptor_;
}

const E_CloakGradeAttributeDesc& E_CloakGradeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakGradeAttributeDesc* E_CloakGradeAttributeDesc::default_instance_ = NULL;

E_CloakGradeAttributeDesc* E_CloakGradeAttributeDesc::New() const {
  return new E_CloakGradeAttributeDesc;
}

void E_CloakGradeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_vlue_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakGradeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_vlue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vlue_)));
          set_has_m_vlue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakGradeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_vlue = 1;
  if (has_m_vlue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_vlue(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakGradeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_vlue = 1;
  if (has_m_vlue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_vlue(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakGradeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_vlue = 1;
    if (has_m_vlue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vlue());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakGradeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakGradeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakGradeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakGradeAttributeDesc::MergeFrom(const E_CloakGradeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_vlue()) {
      set_m_vlue(from.m_vlue());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakGradeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakGradeAttributeDesc::CopyFrom(const E_CloakGradeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakGradeAttributeDesc::IsInitialized() const {

  return true;
}

void E_CloakGradeAttributeDesc::Swap(E_CloakGradeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_vlue_, other->m_vlue_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakGradeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakGradeAttributeDesc_descriptor_;
  metadata.reflection = E_CloakGradeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakGrade::kMIdFieldNumber;
const int E_CloakGrade::kMCloakIdFieldNumber;
const int E_CloakGrade::kMQualityFieldNumber;
const int E_CloakGrade::kMItemFieldNumber;
const int E_CloakGrade::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_CloakGrade::E_CloakGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakGrade::InitAsDefaultInstance() {
}

E_CloakGrade::E_CloakGrade(const E_CloakGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakGrade::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_cloakid_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakGrade::~E_CloakGrade() {
  SharedDtor();
}

void E_CloakGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakGrade_descriptor_;
}

const E_CloakGrade& E_CloakGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakGrade* E_CloakGrade::default_instance_ = NULL;

E_CloakGrade* E_CloakGrade::New() const {
  return new E_CloakGrade;
}

void E_CloakGrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_cloakid_ = 0;
    m_quality_ = 0;
  }
  m_item_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cloakId;
        break;
      }

      // optional int32 m_cloakId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cloakId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cloakid_)));
          set_has_m_cloakid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_CloakGradeItemDesc m_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_item;
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_CloakGradeAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_cloakId = 2;
  if (has_m_cloakid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_cloakid(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // repeated .proto_ff.E_CloakGradeItemDesc m_item = 4;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_item(i), output);
  }

  // repeated .proto_ff.E_CloakGradeAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_cloakId = 2;
  if (has_m_cloakid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_cloakid(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // repeated .proto_ff.E_CloakGradeItemDesc m_item = 4;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_item(i), target);
  }

  // repeated .proto_ff.E_CloakGradeAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_cloakId = 2;
    if (has_m_cloakid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cloakid());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated .proto_ff.E_CloakGradeItemDesc m_item = 4;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  // repeated .proto_ff.E_CloakGradeAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakGrade::MergeFrom(const E_CloakGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_cloakid()) {
      set_m_cloakid(from.m_cloakid());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakGrade::CopyFrom(const E_CloakGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakGrade::IsInitialized() const {

  return true;
}

void E_CloakGrade::Swap(E_CloakGrade* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_cloakid_, other->m_cloakid_);
    std::swap(m_quality_, other->m_quality_);
    m_item_.Swap(&other->m_item_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakGrade_descriptor_;
  metadata.reflection = E_CloakGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakGrade::kECloakGradeListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakGrade::Sheet_CloakGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakGrade::InitAsDefaultInstance() {
}

Sheet_CloakGrade::Sheet_CloakGrade(const Sheet_CloakGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakGrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakGrade::~Sheet_CloakGrade() {
  SharedDtor();
}

void Sheet_CloakGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakGrade_descriptor_;
}

const Sheet_CloakGrade& Sheet_CloakGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakGrade* Sheet_CloakGrade::default_instance_ = NULL;

Sheet_CloakGrade* Sheet_CloakGrade::New() const {
  return new Sheet_CloakGrade;
}

void Sheet_CloakGrade::Clear() {
  e_cloakgrade_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakGrade E_CloakGrade_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakGrade_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakgrade_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakGrade_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakGrade E_CloakGrade_List = 1;
  for (int i = 0; i < this->e_cloakgrade_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakgrade_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakGrade E_CloakGrade_List = 1;
  for (int i = 0; i < this->e_cloakgrade_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakgrade_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakGrade::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakGrade E_CloakGrade_List = 1;
  total_size += 1 * this->e_cloakgrade_list_size();
  for (int i = 0; i < this->e_cloakgrade_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakgrade_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakGrade::MergeFrom(const Sheet_CloakGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakgrade_list_.MergeFrom(from.e_cloakgrade_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakGrade::CopyFrom(const Sheet_CloakGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakGrade::IsInitialized() const {

  return true;
}

void Sheet_CloakGrade::Swap(Sheet_CloakGrade* other) {
  if (other != this) {
    e_cloakgrade_list_.Swap(&other->e_cloakgrade_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakGrade_descriptor_;
  metadata.reflection = Sheet_CloakGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakGodItemDesc::kMNumFieldNumber;
const int E_CloakGodItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CloakGodItemDesc::E_CloakGodItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakGodItemDesc::InitAsDefaultInstance() {
}

E_CloakGodItemDesc::E_CloakGodItemDesc(const E_CloakGodItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakGodItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakGodItemDesc::~E_CloakGodItemDesc() {
  SharedDtor();
}

void E_CloakGodItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakGodItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakGodItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakGodItemDesc_descriptor_;
}

const E_CloakGodItemDesc& E_CloakGodItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakGodItemDesc* E_CloakGodItemDesc::default_instance_ = NULL;

E_CloakGodItemDesc* E_CloakGodItemDesc::New() const {
  return new E_CloakGodItemDesc;
}

void E_CloakGodItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakGodItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakGodItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakGodItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakGodItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakGodItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakGodItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakGodItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakGodItemDesc::MergeFrom(const E_CloakGodItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakGodItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakGodItemDesc::CopyFrom(const E_CloakGodItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakGodItemDesc::IsInitialized() const {

  return true;
}

void E_CloakGodItemDesc::Swap(E_CloakGodItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakGodItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakGodItemDesc_descriptor_;
  metadata.reflection = E_CloakGodItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakGodAttributeDesc::kMVlueFieldNumber;
const int E_CloakGodAttributeDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CloakGodAttributeDesc::E_CloakGodAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakGodAttributeDesc::InitAsDefaultInstance() {
}

E_CloakGodAttributeDesc::E_CloakGodAttributeDesc(const E_CloakGodAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakGodAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_vlue_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakGodAttributeDesc::~E_CloakGodAttributeDesc() {
  SharedDtor();
}

void E_CloakGodAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakGodAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakGodAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakGodAttributeDesc_descriptor_;
}

const E_CloakGodAttributeDesc& E_CloakGodAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakGodAttributeDesc* E_CloakGodAttributeDesc::default_instance_ = NULL;

E_CloakGodAttributeDesc* E_CloakGodAttributeDesc::New() const {
  return new E_CloakGodAttributeDesc;
}

void E_CloakGodAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_vlue_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakGodAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_vlue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vlue_)));
          set_has_m_vlue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakGodAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_vlue = 1;
  if (has_m_vlue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_vlue(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakGodAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_vlue = 1;
  if (has_m_vlue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_vlue(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakGodAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_vlue = 1;
    if (has_m_vlue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vlue());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakGodAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakGodAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakGodAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakGodAttributeDesc::MergeFrom(const E_CloakGodAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_vlue()) {
      set_m_vlue(from.m_vlue());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakGodAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakGodAttributeDesc::CopyFrom(const E_CloakGodAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakGodAttributeDesc::IsInitialized() const {

  return true;
}

void E_CloakGodAttributeDesc::Swap(E_CloakGodAttributeDesc* other) {
  if (other != this) {
    std::swap(m_vlue_, other->m_vlue_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakGodAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakGodAttributeDesc_descriptor_;
  metadata.reflection = E_CloakGodAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakGod::kMCloakIdFieldNumber;
const int E_CloakGod::kMSkillFieldNumber;
const int E_CloakGod::kMItemFieldNumber;
const int E_CloakGod::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_CloakGod::E_CloakGod()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakGod::InitAsDefaultInstance() {
}

E_CloakGod::E_CloakGod(const E_CloakGod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakGod::SharedCtor() {
  _cached_size_ = 0;
  m_cloakid_ = 0;
  m_skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakGod::~E_CloakGod() {
  SharedDtor();
}

void E_CloakGod::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakGod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakGod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakGod_descriptor_;
}

const E_CloakGod& E_CloakGod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakGod* E_CloakGod::default_instance_ = NULL;

E_CloakGod* E_CloakGod::New() const {
  return new E_CloakGod;
}

void E_CloakGod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_cloakid_ = 0;
    m_skill_ = 0;
  }
  m_item_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakGod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_cloakId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cloakid_)));
          set_has_m_cloakid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skill;
        break;
      }

      // optional int32 m_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_CloakGodItemDesc m_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_item;
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_CloakGodAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakGod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_cloakId = 1;
  if (has_m_cloakid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_cloakid(), output);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skill(), output);
  }

  // repeated .proto_ff.E_CloakGodItemDesc m_item = 3;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_item(i), output);
  }

  // repeated .proto_ff.E_CloakGodAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakGod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_cloakId = 1;
  if (has_m_cloakid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_cloakid(), target);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skill(), target);
  }

  // repeated .proto_ff.E_CloakGodItemDesc m_item = 3;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_item(i), target);
  }

  // repeated .proto_ff.E_CloakGodAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakGod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_cloakId = 1;
    if (has_m_cloakid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cloakid());
    }

    // optional int32 m_skill = 2;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill());
    }

  }
  // repeated .proto_ff.E_CloakGodItemDesc m_item = 3;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  // repeated .proto_ff.E_CloakGodAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakGod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakGod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakGod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakGod::MergeFrom(const E_CloakGod& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_cloakid()) {
      set_m_cloakid(from.m_cloakid());
    }
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakGod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakGod::CopyFrom(const E_CloakGod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakGod::IsInitialized() const {

  return true;
}

void E_CloakGod::Swap(E_CloakGod* other) {
  if (other != this) {
    std::swap(m_cloakid_, other->m_cloakid_);
    std::swap(m_skill_, other->m_skill_);
    m_item_.Swap(&other->m_item_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakGod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakGod_descriptor_;
  metadata.reflection = E_CloakGod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakGod::kECloakGodListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakGod::Sheet_CloakGod()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakGod::InitAsDefaultInstance() {
}

Sheet_CloakGod::Sheet_CloakGod(const Sheet_CloakGod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakGod::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakGod::~Sheet_CloakGod() {
  SharedDtor();
}

void Sheet_CloakGod::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakGod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakGod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakGod_descriptor_;
}

const Sheet_CloakGod& Sheet_CloakGod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakGod* Sheet_CloakGod::default_instance_ = NULL;

Sheet_CloakGod* Sheet_CloakGod::New() const {
  return new Sheet_CloakGod;
}

void Sheet_CloakGod::Clear() {
  e_cloakgod_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakGod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakGod E_CloakGod_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakGod_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloakgod_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakGod_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakGod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakGod E_CloakGod_List = 1;
  for (int i = 0; i < this->e_cloakgod_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloakgod_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakGod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakGod E_CloakGod_List = 1;
  for (int i = 0; i < this->e_cloakgod_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloakgod_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakGod::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakGod E_CloakGod_List = 1;
  total_size += 1 * this->e_cloakgod_list_size();
  for (int i = 0; i < this->e_cloakgod_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloakgod_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakGod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakGod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakGod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakGod::MergeFrom(const Sheet_CloakGod& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloakgod_list_.MergeFrom(from.e_cloakgod_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakGod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakGod::CopyFrom(const Sheet_CloakGod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakGod::IsInitialized() const {

  return true;
}

void Sheet_CloakGod::Swap(Sheet_CloakGod* other) {
  if (other != this) {
    e_cloakgod_list_.Swap(&other->e_cloakgod_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakGod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakGod_descriptor_;
  metadata.reflection = Sheet_CloakGod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoulAttributeDesc::kMValueFieldNumber;
const int E_CloakSoulAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_CloakSoulAttributeDesc::E_CloakSoulAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoulAttributeDesc::InitAsDefaultInstance() {
}

E_CloakSoulAttributeDesc::E_CloakSoulAttributeDesc(const E_CloakSoulAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoulAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoulAttributeDesc::~E_CloakSoulAttributeDesc() {
  SharedDtor();
}

void E_CloakSoulAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakSoulAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoulAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoulAttributeDesc_descriptor_;
}

const E_CloakSoulAttributeDesc& E_CloakSoulAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoulAttributeDesc* E_CloakSoulAttributeDesc::default_instance_ = NULL;

E_CloakSoulAttributeDesc* E_CloakSoulAttributeDesc::New() const {
  return new E_CloakSoulAttributeDesc;
}

void E_CloakSoulAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoulAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoulAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoulAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoulAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoulAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoulAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoulAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoulAttributeDesc::MergeFrom(const E_CloakSoulAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoulAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoulAttributeDesc::CopyFrom(const E_CloakSoulAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoulAttributeDesc::IsInitialized() const {

  return true;
}

void E_CloakSoulAttributeDesc::Swap(E_CloakSoulAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoulAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoulAttributeDesc_descriptor_;
  metadata.reflection = E_CloakSoulAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoul::kMIdFieldNumber;
const int E_CloakSoul::kMRechargeIDFieldNumber;
const int E_CloakSoul::kMMainSkillFieldNumber;
const int E_CloakSoul::kMAttributeTypeFieldNumber;
const int E_CloakSoul::kMItemIdFieldNumber;
const int E_CloakSoul::kMItemNumFieldNumber;
const int E_CloakSoul::kMMinorSkillFieldNumber;
const int E_CloakSoul::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_CloakSoul::E_CloakSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoul::InitAsDefaultInstance() {
}

E_CloakSoul::E_CloakSoul(const E_CloakSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoul::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_rechargeid_ = 0;
  m_mainskill_ = 0;
  m_attributetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_itemid_ = 0;
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoul::~E_CloakSoul() {
  SharedDtor();
}

void E_CloakSoul::SharedDtor() {
  if (m_attributetype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_attributetype_;
  }
  if (this != default_instance_) {
  }
}

void E_CloakSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoul_descriptor_;
}

const E_CloakSoul& E_CloakSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoul* E_CloakSoul::default_instance_ = NULL;

E_CloakSoul* E_CloakSoul::New() const {
  return new E_CloakSoul;
}

void E_CloakSoul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_rechargeid_ = 0;
    m_mainskill_ = 0;
    if (has_m_attributetype()) {
      if (m_attributetype_ != &::google::protobuf::internal::kEmptyString) {
        m_attributetype_->clear();
      }
    }
    m_itemid_ = 0;
    m_itemnum_ = 0;
  }
  m_minorskill_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rechargeID;
        break;
      }

      // optional int32 m_rechargeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargeid_)));
          set_has_m_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_mainSkill;
        break;
      }

      // optional int32 m_mainSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mainSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mainskill_)));
          set_has_m_mainskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attributeType;
        break;
      }

      // optional string m_attributeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attributeType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_attributetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_attributetype().data(), this->m_attributetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemId;
        break;
      }

      // optional int32 m_itemId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_itemNum;
        break;
      }

      // optional int32 m_itemNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_minorSkill;
        break;
      }

      // repeated int32 m_minorSkill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minorSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_minorskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_minorskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_minorSkill;
        if (input->ExpectTag(66)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_CloakSoulAttributeDesc m_attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_rechargeID = 2;
  if (has_m_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rechargeid(), output);
  }

  // optional int32 m_mainSkill = 3;
  if (has_m_mainskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_mainskill(), output);
  }

  // optional string m_attributeType = 4;
  if (has_m_attributetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_attributetype().data(), this->m_attributetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_attributetype(), output);
  }

  // optional int32 m_itemId = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_itemNum = 6;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_itemnum(), output);
  }

  // repeated int32 m_minorSkill = 7;
  for (int i = 0; i < this->m_minorskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_minorskill(i), output);
  }

  // repeated .proto_ff.E_CloakSoulAttributeDesc m_attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_rechargeID = 2;
  if (has_m_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rechargeid(), target);
  }

  // optional int32 m_mainSkill = 3;
  if (has_m_mainskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_mainskill(), target);
  }

  // optional string m_attributeType = 4;
  if (has_m_attributetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_attributetype().data(), this->m_attributetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_attributetype(), target);
  }

  // optional int32 m_itemId = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_itemNum = 6;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_itemnum(), target);
  }

  // repeated int32 m_minorSkill = 7;
  for (int i = 0; i < this->m_minorskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_minorskill(i), target);
  }

  // repeated .proto_ff.E_CloakSoulAttributeDesc m_attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_rechargeID = 2;
    if (has_m_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargeid());
    }

    // optional int32 m_mainSkill = 3;
    if (has_m_mainskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mainskill());
    }

    // optional string m_attributeType = 4;
    if (has_m_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_attributetype());
    }

    // optional int32 m_itemId = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemNum = 6;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  // repeated int32 m_minorSkill = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_minorskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_minorskill(i));
    }
    total_size += 1 * this->m_minorskill_size() + data_size;
  }

  // repeated .proto_ff.E_CloakSoulAttributeDesc m_attribute = 8;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoul::MergeFrom(const E_CloakSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_minorskill_.MergeFrom(from.m_minorskill_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rechargeid()) {
      set_m_rechargeid(from.m_rechargeid());
    }
    if (from.has_m_mainskill()) {
      set_m_mainskill(from.m_mainskill());
    }
    if (from.has_m_attributetype()) {
      set_m_attributetype(from.m_attributetype());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoul::CopyFrom(const E_CloakSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoul::IsInitialized() const {

  return true;
}

void E_CloakSoul::Swap(E_CloakSoul* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rechargeid_, other->m_rechargeid_);
    std::swap(m_mainskill_, other->m_mainskill_);
    std::swap(m_attributetype_, other->m_attributetype_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    m_minorskill_.Swap(&other->m_minorskill_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoul_descriptor_;
  metadata.reflection = E_CloakSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakSoul::kECloakSoulListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakSoul::Sheet_CloakSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakSoul::InitAsDefaultInstance() {
}

Sheet_CloakSoul::Sheet_CloakSoul(const Sheet_CloakSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakSoul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakSoul::~Sheet_CloakSoul() {
  SharedDtor();
}

void Sheet_CloakSoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakSoul_descriptor_;
}

const Sheet_CloakSoul& Sheet_CloakSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakSoul* Sheet_CloakSoul::default_instance_ = NULL;

Sheet_CloakSoul* Sheet_CloakSoul::New() const {
  return new Sheet_CloakSoul;
}

void Sheet_CloakSoul::Clear() {
  e_cloaksoul_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakSoul E_CloakSoul_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakSoul_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloaksoul_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakSoul_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakSoul E_CloakSoul_List = 1;
  for (int i = 0; i < this->e_cloaksoul_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloaksoul_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakSoul E_CloakSoul_List = 1;
  for (int i = 0; i < this->e_cloaksoul_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloaksoul_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakSoul::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakSoul E_CloakSoul_List = 1;
  total_size += 1 * this->e_cloaksoul_list_size();
  for (int i = 0; i < this->e_cloaksoul_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloaksoul_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakSoul::MergeFrom(const Sheet_CloakSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloaksoul_list_.MergeFrom(from.e_cloaksoul_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakSoul::CopyFrom(const Sheet_CloakSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakSoul::IsInitialized() const {

  return true;
}

void Sheet_CloakSoul::Swap(Sheet_CloakSoul* other) {
  if (other != this) {
    e_cloaksoul_list_.Swap(&other->e_cloaksoul_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakSoul_descriptor_;
  metadata.reflection = Sheet_CloakSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoulactiveUnlockDesc::kMParamaFieldNumber;
const int E_CloakSoulactiveUnlockDesc::kMConditionFieldNumber;
#endif  // !_MSC_VER

E_CloakSoulactiveUnlockDesc::E_CloakSoulactiveUnlockDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoulactiveUnlockDesc::InitAsDefaultInstance() {
}

E_CloakSoulactiveUnlockDesc::E_CloakSoulactiveUnlockDesc(const E_CloakSoulactiveUnlockDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoulactiveUnlockDesc::SharedCtor() {
  _cached_size_ = 0;
  m_parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_condition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoulactiveUnlockDesc::~E_CloakSoulactiveUnlockDesc() {
  SharedDtor();
}

void E_CloakSoulactiveUnlockDesc::SharedDtor() {
  if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parama_;
  }
  if (this != default_instance_) {
  }
}

void E_CloakSoulactiveUnlockDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoulactiveUnlockDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoulactiveUnlockDesc_descriptor_;
}

const E_CloakSoulactiveUnlockDesc& E_CloakSoulactiveUnlockDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoulactiveUnlockDesc* E_CloakSoulactiveUnlockDesc::default_instance_ = NULL;

E_CloakSoulactiveUnlockDesc* E_CloakSoulactiveUnlockDesc::New() const {
  return new E_CloakSoulactiveUnlockDesc;
}

void E_CloakSoulactiveUnlockDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_parama()) {
      if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
        m_parama_->clear();
      }
    }
    m_condition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoulactiveUnlockDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_parama = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_parama()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_parama().data(), this->m_parama().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoulactiveUnlockDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_parama = 1;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parama().data(), this->m_parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_parama(), output);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoulactiveUnlockDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_parama = 1;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parama().data(), this->m_parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_parama(), target);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoulactiveUnlockDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_parama = 1;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_parama());
    }

    // optional int32 m_condition = 2;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoulactiveUnlockDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoulactiveUnlockDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoulactiveUnlockDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoulactiveUnlockDesc::MergeFrom(const E_CloakSoulactiveUnlockDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoulactiveUnlockDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoulactiveUnlockDesc::CopyFrom(const E_CloakSoulactiveUnlockDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoulactiveUnlockDesc::IsInitialized() const {

  return true;
}

void E_CloakSoulactiveUnlockDesc::Swap(E_CloakSoulactiveUnlockDesc* other) {
  if (other != this) {
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoulactiveUnlockDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoulactiveUnlockDesc_descriptor_;
  metadata.reflection = E_CloakSoulactiveUnlockDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoulactive::kMIdFieldNumber;
const int E_CloakSoulactive::kMUnlockFieldNumber;
#endif  // !_MSC_VER

E_CloakSoulactive::E_CloakSoulactive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoulactive::InitAsDefaultInstance() {
}

E_CloakSoulactive::E_CloakSoulactive(const E_CloakSoulactive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoulactive::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoulactive::~E_CloakSoulactive() {
  SharedDtor();
}

void E_CloakSoulactive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakSoulactive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoulactive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoulactive_descriptor_;
}

const E_CloakSoulactive& E_CloakSoulactive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoulactive* E_CloakSoulactive::default_instance_ = NULL;

E_CloakSoulactive* E_CloakSoulactive::New() const {
  return new E_CloakSoulactive;
}

void E_CloakSoulactive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
  }
  m_unlock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoulactive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_unlock;
        break;
      }

      // repeated .proto_ff.E_CloakSoulactiveUnlockDesc m_unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_unlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_unlock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_unlock;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoulactive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // repeated .proto_ff.E_CloakSoulactiveUnlockDesc m_unlock = 2;
  for (int i = 0; i < this->m_unlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_unlock(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoulactive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // repeated .proto_ff.E_CloakSoulactiveUnlockDesc m_unlock = 2;
  for (int i = 0; i < this->m_unlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_unlock(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoulactive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_CloakSoulactiveUnlockDesc m_unlock = 2;
  total_size += 1 * this->m_unlock_size();
  for (int i = 0; i < this->m_unlock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_unlock(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoulactive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoulactive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoulactive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoulactive::MergeFrom(const E_CloakSoulactive& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_unlock_.MergeFrom(from.m_unlock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoulactive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoulactive::CopyFrom(const E_CloakSoulactive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoulactive::IsInitialized() const {

  return true;
}

void E_CloakSoulactive::Swap(E_CloakSoulactive* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_unlock_.Swap(&other->m_unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoulactive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoulactive_descriptor_;
  metadata.reflection = E_CloakSoulactive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakSoulactive::kECloakSoulactiveListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakSoulactive::Sheet_CloakSoulactive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakSoulactive::InitAsDefaultInstance() {
}

Sheet_CloakSoulactive::Sheet_CloakSoulactive(const Sheet_CloakSoulactive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakSoulactive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakSoulactive::~Sheet_CloakSoulactive() {
  SharedDtor();
}

void Sheet_CloakSoulactive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakSoulactive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakSoulactive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakSoulactive_descriptor_;
}

const Sheet_CloakSoulactive& Sheet_CloakSoulactive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakSoulactive* Sheet_CloakSoulactive::default_instance_ = NULL;

Sheet_CloakSoulactive* Sheet_CloakSoulactive::New() const {
  return new Sheet_CloakSoulactive;
}

void Sheet_CloakSoulactive::Clear() {
  e_cloaksoulactive_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakSoulactive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakSoulactive E_CloakSoulactive_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakSoulactive_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloaksoulactive_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakSoulactive_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakSoulactive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakSoulactive E_CloakSoulactive_List = 1;
  for (int i = 0; i < this->e_cloaksoulactive_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloaksoulactive_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakSoulactive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakSoulactive E_CloakSoulactive_List = 1;
  for (int i = 0; i < this->e_cloaksoulactive_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloaksoulactive_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakSoulactive::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakSoulactive E_CloakSoulactive_List = 1;
  total_size += 1 * this->e_cloaksoulactive_list_size();
  for (int i = 0; i < this->e_cloaksoulactive_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloaksoulactive_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakSoulactive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakSoulactive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakSoulactive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakSoulactive::MergeFrom(const Sheet_CloakSoulactive& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloaksoulactive_list_.MergeFrom(from.e_cloaksoulactive_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakSoulactive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakSoulactive::CopyFrom(const Sheet_CloakSoulactive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakSoulactive::IsInitialized() const {

  return true;
}

void Sheet_CloakSoulactive::Swap(Sheet_CloakSoulactive* other) {
  if (other != this) {
    e_cloaksoulactive_list_.Swap(&other->e_cloaksoulactive_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakSoulactive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakSoulactive_descriptor_;
  metadata.reflection = Sheet_CloakSoulactive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoullvAttributeDesc::kMValueFieldNumber;
const int E_CloakSoullvAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_CloakSoullvAttributeDesc::E_CloakSoullvAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoullvAttributeDesc::InitAsDefaultInstance() {
}

E_CloakSoullvAttributeDesc::E_CloakSoullvAttributeDesc(const E_CloakSoullvAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoullvAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoullvAttributeDesc::~E_CloakSoullvAttributeDesc() {
  SharedDtor();
}

void E_CloakSoullvAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakSoullvAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoullvAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoullvAttributeDesc_descriptor_;
}

const E_CloakSoullvAttributeDesc& E_CloakSoullvAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoullvAttributeDesc* E_CloakSoullvAttributeDesc::default_instance_ = NULL;

E_CloakSoullvAttributeDesc* E_CloakSoullvAttributeDesc::New() const {
  return new E_CloakSoullvAttributeDesc;
}

void E_CloakSoullvAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoullvAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoullvAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoullvAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoullvAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoullvAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoullvAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoullvAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoullvAttributeDesc::MergeFrom(const E_CloakSoullvAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoullvAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoullvAttributeDesc::CopyFrom(const E_CloakSoullvAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoullvAttributeDesc::IsInitialized() const {

  return true;
}

void E_CloakSoullvAttributeDesc::Swap(E_CloakSoullvAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoullvAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoullvAttributeDesc_descriptor_;
  metadata.reflection = E_CloakSoullvAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoullv::kMSoullLvFieldNumber;
const int E_CloakSoullv::kMItemIDFieldNumber;
const int E_CloakSoullv::kMNumFieldNumber;
const int E_CloakSoullv::kMSuccessRateFieldNumber;
const int E_CloakSoullv::kMDownLvFieldNumber;
const int E_CloakSoullv::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_CloakSoullv::E_CloakSoullv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoullv::InitAsDefaultInstance() {
}

E_CloakSoullv::E_CloakSoullv(const E_CloakSoullv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoullv::SharedCtor() {
  _cached_size_ = 0;
  m_soulllv_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  m_successrate_ = 0;
  m_downlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoullv::~E_CloakSoullv() {
  SharedDtor();
}

void E_CloakSoullv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakSoullv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoullv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoullv_descriptor_;
}

const E_CloakSoullv& E_CloakSoullv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoullv* E_CloakSoullv::default_instance_ = NULL;

E_CloakSoullv* E_CloakSoullv::New() const {
  return new E_CloakSoullv;
}

void E_CloakSoullv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_soulllv_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
    m_successrate_ = 0;
    m_downlv_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoullv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_soullLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulllv_)));
          set_has_m_soulllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_itemID;
        break;
      }

      // optional int32 m_itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_successRate;
        break;
      }

      // optional int32 m_successRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_successRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_successrate_)));
          set_has_m_successrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_downLv;
        break;
      }

      // optional int32 m_downLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_downLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_downlv_)));
          set_has_m_downlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_CloakSoullvAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoullv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_soullLv = 1;
  if (has_m_soulllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_soulllv(), output);
  }

  // optional int32 m_itemID = 2;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_itemid(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // optional int32 m_successRate = 4;
  if (has_m_successrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_successrate(), output);
  }

  // optional int32 m_downLv = 5;
  if (has_m_downlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_downlv(), output);
  }

  // repeated .proto_ff.E_CloakSoullvAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoullv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_soullLv = 1;
  if (has_m_soulllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_soulllv(), target);
  }

  // optional int32 m_itemID = 2;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_itemid(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // optional int32 m_successRate = 4;
  if (has_m_successrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_successrate(), target);
  }

  // optional int32 m_downLv = 5;
  if (has_m_downlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_downlv(), target);
  }

  // repeated .proto_ff.E_CloakSoullvAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoullv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_soullLv = 1;
    if (has_m_soulllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulllv());
    }

    // optional int32 m_itemID = 2;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_successRate = 4;
    if (has_m_successrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_successrate());
    }

    // optional int32 m_downLv = 5;
    if (has_m_downlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_downlv());
    }

  }
  // repeated .proto_ff.E_CloakSoullvAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoullv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoullv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoullv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoullv::MergeFrom(const E_CloakSoullv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_soulllv()) {
      set_m_soulllv(from.m_soulllv());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_successrate()) {
      set_m_successrate(from.m_successrate());
    }
    if (from.has_m_downlv()) {
      set_m_downlv(from.m_downlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoullv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoullv::CopyFrom(const E_CloakSoullv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoullv::IsInitialized() const {

  return true;
}

void E_CloakSoullv::Swap(E_CloakSoullv* other) {
  if (other != this) {
    std::swap(m_soulllv_, other->m_soulllv_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_successrate_, other->m_successrate_);
    std::swap(m_downlv_, other->m_downlv_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoullv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoullv_descriptor_;
  metadata.reflection = E_CloakSoullv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakSoullv::kECloakSoullvListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakSoullv::Sheet_CloakSoullv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakSoullv::InitAsDefaultInstance() {
}

Sheet_CloakSoullv::Sheet_CloakSoullv(const Sheet_CloakSoullv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakSoullv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakSoullv::~Sheet_CloakSoullv() {
  SharedDtor();
}

void Sheet_CloakSoullv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakSoullv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakSoullv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakSoullv_descriptor_;
}

const Sheet_CloakSoullv& Sheet_CloakSoullv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakSoullv* Sheet_CloakSoullv::default_instance_ = NULL;

Sheet_CloakSoullv* Sheet_CloakSoullv::New() const {
  return new Sheet_CloakSoullv;
}

void Sheet_CloakSoullv::Clear() {
  e_cloaksoullv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakSoullv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakSoullv E_CloakSoullv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakSoullv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloaksoullv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakSoullv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakSoullv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakSoullv E_CloakSoullv_List = 1;
  for (int i = 0; i < this->e_cloaksoullv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloaksoullv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakSoullv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakSoullv E_CloakSoullv_List = 1;
  for (int i = 0; i < this->e_cloaksoullv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloaksoullv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakSoullv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakSoullv E_CloakSoullv_List = 1;
  total_size += 1 * this->e_cloaksoullv_list_size();
  for (int i = 0; i < this->e_cloaksoullv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloaksoullv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakSoullv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakSoullv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakSoullv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakSoullv::MergeFrom(const Sheet_CloakSoullv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloaksoullv_list_.MergeFrom(from.e_cloaksoullv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakSoullv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakSoullv::CopyFrom(const Sheet_CloakSoullv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakSoullv::IsInitialized() const {

  return true;
}

void Sheet_CloakSoullv::Swap(Sheet_CloakSoullv* other) {
  if (other != this) {
    e_cloaksoullv_list_.Swap(&other->e_cloaksoullv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakSoullv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakSoullv_descriptor_;
  metadata.reflection = Sheet_CloakSoullv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoulclear::kMSoullLvFieldNumber;
const int E_CloakSoulclear::kMClearAttFieldNumber;
#endif  // !_MSC_VER

E_CloakSoulclear::E_CloakSoulclear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoulclear::InitAsDefaultInstance() {
}

E_CloakSoulclear::E_CloakSoulclear(const E_CloakSoulclear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoulclear::SharedCtor() {
  _cached_size_ = 0;
  m_soulllv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoulclear::~E_CloakSoulclear() {
  SharedDtor();
}

void E_CloakSoulclear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakSoulclear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoulclear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoulclear_descriptor_;
}

const E_CloakSoulclear& E_CloakSoulclear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoulclear* E_CloakSoulclear::default_instance_ = NULL;

E_CloakSoulclear* E_CloakSoulclear::New() const {
  return new E_CloakSoulclear;
}

void E_CloakSoulclear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_soulllv_ = 0;
  }
  m_clearatt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoulclear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_soullLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulllv_)));
          set_has_m_soulllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_clearAtt;
        break;
      }

      // repeated int32 m_clearAtt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_clearAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_clearatt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_clearatt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_clearAtt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoulclear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_soullLv = 1;
  if (has_m_soulllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_soulllv(), output);
  }

  // repeated int32 m_clearAtt = 2;
  for (int i = 0; i < this->m_clearatt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_clearatt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoulclear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_soullLv = 1;
  if (has_m_soulllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_soulllv(), target);
  }

  // repeated int32 m_clearAtt = 2;
  for (int i = 0; i < this->m_clearatt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_clearatt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoulclear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_soullLv = 1;
    if (has_m_soulllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulllv());
    }

  }
  // repeated int32 m_clearAtt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_clearatt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_clearatt(i));
    }
    total_size += 1 * this->m_clearatt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoulclear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoulclear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoulclear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoulclear::MergeFrom(const E_CloakSoulclear& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_clearatt_.MergeFrom(from.m_clearatt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_soulllv()) {
      set_m_soulllv(from.m_soulllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoulclear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoulclear::CopyFrom(const E_CloakSoulclear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoulclear::IsInitialized() const {

  return true;
}

void E_CloakSoulclear::Swap(E_CloakSoulclear* other) {
  if (other != this) {
    std::swap(m_soulllv_, other->m_soulllv_);
    m_clearatt_.Swap(&other->m_clearatt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoulclear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoulclear_descriptor_;
  metadata.reflection = E_CloakSoulclear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakSoulclear::kECloakSoulclearListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakSoulclear::Sheet_CloakSoulclear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakSoulclear::InitAsDefaultInstance() {
}

Sheet_CloakSoulclear::Sheet_CloakSoulclear(const Sheet_CloakSoulclear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakSoulclear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakSoulclear::~Sheet_CloakSoulclear() {
  SharedDtor();
}

void Sheet_CloakSoulclear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakSoulclear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakSoulclear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakSoulclear_descriptor_;
}

const Sheet_CloakSoulclear& Sheet_CloakSoulclear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakSoulclear* Sheet_CloakSoulclear::default_instance_ = NULL;

Sheet_CloakSoulclear* Sheet_CloakSoulclear::New() const {
  return new Sheet_CloakSoulclear;
}

void Sheet_CloakSoulclear::Clear() {
  e_cloaksoulclear_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakSoulclear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakSoulclear E_CloakSoulclear_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakSoulclear_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloaksoulclear_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakSoulclear_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakSoulclear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakSoulclear E_CloakSoulclear_List = 1;
  for (int i = 0; i < this->e_cloaksoulclear_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloaksoulclear_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakSoulclear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakSoulclear E_CloakSoulclear_List = 1;
  for (int i = 0; i < this->e_cloaksoulclear_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloaksoulclear_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakSoulclear::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakSoulclear E_CloakSoulclear_List = 1;
  total_size += 1 * this->e_cloaksoulclear_list_size();
  for (int i = 0; i < this->e_cloaksoulclear_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloaksoulclear_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakSoulclear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakSoulclear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakSoulclear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakSoulclear::MergeFrom(const Sheet_CloakSoulclear& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloaksoulclear_list_.MergeFrom(from.e_cloaksoulclear_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakSoulclear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakSoulclear::CopyFrom(const Sheet_CloakSoulclear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakSoulclear::IsInitialized() const {

  return true;
}

void Sheet_CloakSoulclear::Swap(Sheet_CloakSoulclear* other) {
  if (other != this) {
    e_cloaksoulclear_list_.Swap(&other->e_cloaksoulclear_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakSoulclear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakSoulclear_descriptor_;
  metadata.reflection = Sheet_CloakSoulclear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloakSoulachievement::kMIdFieldNumber;
const int E_CloakSoulachievement::kMTypeFieldNumber;
const int E_CloakSoulachievement::kMParamaFieldNumber;
const int E_CloakSoulachievement::kMItemIDFieldNumber;
const int E_CloakSoulachievement::kMNumFieldNumber;
#endif  // !_MSC_VER

E_CloakSoulachievement::E_CloakSoulachievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloakSoulachievement::InitAsDefaultInstance() {
}

E_CloakSoulachievement::E_CloakSoulachievement(const E_CloakSoulachievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloakSoulachievement::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_parama_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloakSoulachievement::~E_CloakSoulachievement() {
  SharedDtor();
}

void E_CloakSoulachievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloakSoulachievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloakSoulachievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloakSoulachievement_descriptor_;
}

const E_CloakSoulachievement& E_CloakSoulachievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

E_CloakSoulachievement* E_CloakSoulachievement::default_instance_ = NULL;

E_CloakSoulachievement* E_CloakSoulachievement::New() const {
  return new E_CloakSoulachievement;
}

void E_CloakSoulachievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    m_parama_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloakSoulachievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_parama;
        break;
      }

      // optional int32 m_parama = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_parama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_parama_)));
          set_has_m_parama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemID;
        break;
      }

      // optional int32 m_itemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloakSoulachievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_parama = 3;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_parama(), output);
  }

  // optional int32 m_itemID = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloakSoulachievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_parama = 3;
  if (has_m_parama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_parama(), target);
  }

  // optional int32 m_itemID = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloakSoulachievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_parama = 3;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_parama());
    }

    // optional int32 m_itemID = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloakSoulachievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloakSoulachievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloakSoulachievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloakSoulachievement::MergeFrom(const E_CloakSoulachievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloakSoulachievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloakSoulachievement::CopyFrom(const E_CloakSoulachievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloakSoulachievement::IsInitialized() const {

  return true;
}

void E_CloakSoulachievement::Swap(E_CloakSoulachievement* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloakSoulachievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloakSoulachievement_descriptor_;
  metadata.reflection = E_CloakSoulachievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloakSoulachievement::kECloakSoulachievementListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloakSoulachievement::Sheet_CloakSoulachievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloakSoulachievement::InitAsDefaultInstance() {
}

Sheet_CloakSoulachievement::Sheet_CloakSoulachievement(const Sheet_CloakSoulachievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloakSoulachievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloakSoulachievement::~Sheet_CloakSoulachievement() {
  SharedDtor();
}

void Sheet_CloakSoulachievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloakSoulachievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloakSoulachievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloakSoulachievement_descriptor_;
}

const Sheet_CloakSoulachievement& Sheet_CloakSoulachievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloak_2eproto();
  return *default_instance_;
}

Sheet_CloakSoulachievement* Sheet_CloakSoulachievement::default_instance_ = NULL;

Sheet_CloakSoulachievement* Sheet_CloakSoulachievement::New() const {
  return new Sheet_CloakSoulachievement;
}

void Sheet_CloakSoulachievement::Clear() {
  e_cloaksoulachievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloakSoulachievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloakSoulachievement E_CloakSoulachievement_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloakSoulachievement_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloaksoulachievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloakSoulachievement_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloakSoulachievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloakSoulachievement E_CloakSoulachievement_List = 1;
  for (int i = 0; i < this->e_cloaksoulachievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloaksoulachievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloakSoulachievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloakSoulachievement E_CloakSoulachievement_List = 1;
  for (int i = 0; i < this->e_cloaksoulachievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloaksoulachievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloakSoulachievement::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloakSoulachievement E_CloakSoulachievement_List = 1;
  total_size += 1 * this->e_cloaksoulachievement_list_size();
  for (int i = 0; i < this->e_cloaksoulachievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloaksoulachievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloakSoulachievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloakSoulachievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloakSoulachievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloakSoulachievement::MergeFrom(const Sheet_CloakSoulachievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloaksoulachievement_list_.MergeFrom(from.e_cloaksoulachievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloakSoulachievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloakSoulachievement::CopyFrom(const Sheet_CloakSoulachievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloakSoulachievement::IsInitialized() const {

  return true;
}

void Sheet_CloakSoulachievement::Swap(Sheet_CloakSoulachievement* other) {
  if (other != this) {
    e_cloaksoulachievement_list_.Swap(&other->e_cloaksoulachievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloakSoulachievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloakSoulachievement_descriptor_;
  metadata.reflection = Sheet_CloakSoulachievement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
