// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_MapMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MapMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MapMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MapMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MapItemdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MapItemdrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MapItemdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MapItemdrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MapDestroyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MapDestroyitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MapDestroyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MapDestroyitem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  E_MapMap_descriptor_ = file->message_type(0);
  static const int E_MapMap_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_advicelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_mapsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_clearancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_mappkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_pklock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_killvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_bangroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_revivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_mapwide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_mapheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_mapresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_reviveskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_reviveinplacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_ishangup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_itemdroptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_itemdropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_linkoffline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_banonhook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_rewait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_retime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_hreban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_retiered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_reskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_reteimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_drivepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_diedp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_timedp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, m_meditation_),
  };
  E_MapMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MapMap_descriptor_,
      E_MapMap::default_instance_,
      E_MapMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MapMap));
  Sheet_MapMap_descriptor_ = file->message_type(1);
  static const int Sheet_MapMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapMap, e_mapmap_list_),
  };
  Sheet_MapMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MapMap_descriptor_,
      Sheet_MapMap::default_instance_,
      Sheet_MapMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MapMap));
  E_MapItemdrop_descriptor_ = file->message_type(2);
  static const int E_MapItemdrop_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_itemdropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_droptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_odds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_dropvaluea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_dropvalueb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_dropvaluec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_dropvalued_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_dropvaluee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, m_dropvaluef_),
  };
  E_MapItemdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MapItemdrop_descriptor_,
      E_MapItemdrop::default_instance_,
      E_MapItemdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapItemdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MapItemdrop));
  Sheet_MapItemdrop_descriptor_ = file->message_type(3);
  static const int Sheet_MapItemdrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapItemdrop, e_mapitemdrop_list_),
  };
  Sheet_MapItemdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MapItemdrop_descriptor_,
      Sheet_MapItemdrop::default_instance_,
      Sheet_MapItemdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapItemdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapItemdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MapItemdrop));
  E_MapDestroyitem_descriptor_ = file->message_type(4);
  static const int E_MapDestroyitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapDestroyitem, m_destroyitemid_),
  };
  E_MapDestroyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MapDestroyitem_descriptor_,
      E_MapDestroyitem::default_instance_,
      E_MapDestroyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapDestroyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MapDestroyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MapDestroyitem));
  Sheet_MapDestroyitem_descriptor_ = file->message_type(5);
  static const int Sheet_MapDestroyitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapDestroyitem, e_mapdestroyitem_list_),
  };
  Sheet_MapDestroyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MapDestroyitem_descriptor_,
      Sheet_MapDestroyitem::default_instance_,
      Sheet_MapDestroyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapDestroyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MapDestroyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MapDestroyitem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MapMap_descriptor_, &E_MapMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MapMap_descriptor_, &Sheet_MapMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MapItemdrop_descriptor_, &E_MapItemdrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MapItemdrop_descriptor_, &Sheet_MapItemdrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MapDestroyitem_descriptor_, &E_MapDestroyitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MapDestroyitem_descriptor_, &Sheet_MapDestroyitem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete E_MapMap::default_instance_;
  delete E_MapMap_reflection_;
  delete Sheet_MapMap::default_instance_;
  delete Sheet_MapMap_reflection_;
  delete E_MapItemdrop::default_instance_;
  delete E_MapItemdrop_reflection_;
  delete Sheet_MapItemdrop::default_instance_;
  delete Sheet_MapItemdrop_reflection_;
  delete E_MapDestroyitem::default_instance_;
  delete E_MapDestroyitem_reflection_;
  delete Sheet_MapDestroyitem::default_instance_;
  delete Sheet_MapDestroyitem_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"\375\013\n\010E_MapMap\022\035\n\007m_mapid\030\001 \001(\003B\014\302\377\024\010"
    "\345\234\260\345\233\276id\022,\n\014m_levellimit\030\002 \001(\005B\026\302\377\024\022\345\234\260\345"
    "\233\276\347\255\211\347\272\247\351\231\220\345\210\266\0221\n\nm_advicelv\030\003 \001(\tB\035\302\377\024\025"
    "\345\234\260\345\233\276\346\216\250\350\215\220\347\255\211\347\272\247\346\256\265\220\301\024<\022#\n\tm_maptype\030\004"
    " \001(\005B\020\302\377\024\014\345\234\260\345\233\276\347\261\273\345\236\213\022)\n\014m_mapsubtype\030\005"
    " \001(\005B\023\302\377\024\017\345\234\260\345\233\276\345\255\220\347\261\273\345\236\213\0228\n\017m_clearance"
    "time\030\006 \001(\005B\037\302\377\024\033\345\234\260\345\233\276\346\270\205\345\234\272\346\227\266\351\227\264\357\274\210\347\247\222"
    "\357\274\211\022\'\n\013m_mappkmode\030\007 \001(\005B\022\302\377\024\016\345\234\260\345\233\276pk\346\250"
    "\241\345\274\217\0226\n\010m_pklock\030\010 \001(\005B$\302\377\024 \345\234\260\345\233\276\346\230\257\345\220\246"
    "\345\205\201\350\256\270\345\210\207\346\215\242PK\346\250\241\345\274\217\022&\n\004m_pk\030\t \001(\005B\030\302\377\024\024"
    "\345\234\260\345\233\276\346\230\257\345\220\246\345\205\201\350\256\270pk\022a\n\013m_killvalue\030\n \001("
    "\005BL\302\377\024H\345\234\260\345\233\276\346\235\200\344\272\272\346\230\257\345\220\246\345\242\236\345\212\240\346\235\200\346\210\256\345\200\274"
    "\344\270\224\345\234\260\345\233\276\346\255\273\344\272\241\345\220\216\346\230\257\345\220\246\346\270\205\351\231\244\346\235\200\346\210\256\345\200\274\022"
    "0\n\nm_bangroup\030\013 \001(\005B\034\302\377\024\030\347\246\201\346\255\242\347\273\204\351\230\237\350\277\233"
    "\345\205\245\351\202\200\350\257\267\0222\n\014m_revivetime\030\014 \001(\005B\034\302\377\024\030\345\234\272"
    "\346\231\257\345\244\215\346\264\273\345\200\222\350\256\241\346\227\266\351\225\277\022#\n\tm_mapwide\030\r \001(\005"
    "B\020\302\377\024\014\345\234\260\345\233\276\345\256\275\345\272\246\022%\n\013m_mapheight\030\016 \001(\005B"
    "\020\302\377\024\014\345\234\260\345\233\276\351\253\230\345\272\246\022/\n\016m_mapresources\030\017 \001("
    "\tB\027\302\377\024\017\345\234\260\345\233\276\350\265\204\346\272\220\345\220\215\220\301\024<\022\'\n\rm_revivesk"
    "ill\030\020 \001(\003B\020\302\377\024\014\345\244\215\346\264\273\346\227\240\346\225\214\0223\n\023m_revivei"
    "nplacetype\030\021 \001(\005B\026\302\377\024\022\345\216\237\345\234\260\345\244\215\346\264\273\347\261\273\345\236\213"
    "\022-\n\nm_ishangup\030\022 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\350\203\275\350\207\252\345\212"
    "\250\346\214\202\346\234\272\022.\n\016m_itemdroptype\030\023 \001(\005B\026\302\377\024\022\346\255\273"
    "\344\272\241\346\216\211\350\220\275\347\261\273\345\236\213\022/\n\014m_itemdropid\030\024 \001(\tB\031\302"
    "\377\024\021\350\247\246\345\217\221\346\216\211\350\220\275\347\273\204ID\220\301\024<\0220\n\rm_linkofflin"
    "e\030\025 \001(\003B\031\302\377\024\025\344\270\213\347\272\277\345\220\216\345\233\236\345\210\260\345\234\260\345\233\276\0221\n\013m_"
    "banonhook\030\026 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\347\246\201\346\255\242\345\216\237\345\234\260\346"
    "\214\202\346\234\272\022.\n\010m_rewait\030\027 \001(\005B\034\302\377\024\030\346\231\256\351\200\232\345\244\215\346\264"
    "\273\347\255\211\345\276\205\346\227\266\351\227\264\0221\n\010m_retime\030\030 \001(\005B\037\302\377\024\033\350\207\252"
    "\345\212\250\346\231\256\351\200\232\345\244\215\346\264\273\345\200\222\350\256\241\346\227\266\022(\n\010m_hreban\030\031 \001"
    "(\005B\026\302\377\024\022\347\246\201\346\255\242\345\216\237\345\234\260\345\244\215\346\264\273\022*\n\nm_retiered"
    "\030\032 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\347\226\262\345\212\263\345\244\215\346\264\273\0221\n\013m_resk"
    "illid\030\033 \001(\005B\034\302\377\024\030\345\244\215\346\264\273\345\220\216\350\216\267\345\276\227\347\232\204\346\212\200\350\203"
    "\275\022*\n\nm_reteimes\030\034 \001(\005B\026\302\377\024\022\345\244\215\346\264\273\346\254\241\346\225\260\351"
    "\231\220\345\210\266\022#\n\014m_drivepoint\030\035 \001(\005B\r\302\377\024\t\351\251\261\350\265\266\345"
    "\200\274\022*\n\007m_diedp\030\036 \001(\005B\031\302\377\024\025\346\255\273\344\272\241\345\242\236\345\212\240\351\251\261"
    "\350\265\266\345\200\274\022.\n\010m_timedp\030\037 \001(\005B\034\302\377\024\030\346\257\217\345\210\206\351\222\237\345"
    "\242\236\345\212\240\351\251\261\350\265\266\345\200\274\022,\n\014m_meditation\030  \001(\005B\026\302\377"
    "\024\022\346\230\257\345\220\246\345\205\201\350\256\270\346\211\223\345\235\220\"\?\n\014Sheet_MapMap\022/\n\r"
    "E_MapMap_List\030\001 \003(\0132\022.proto_ff.E_MapMapB"
    "\004\210\301\024(\"\361\002\n\rE_MapItemdrop\022\"\n\014m_itemdropid\030"
    "\001 \001(\005B\014\302\377\024\010\346\216\211\350\220\275ID\022$\n\nm_droptype\030\002 \001(\005B"
    "\020\302\377\024\014\346\216\211\350\220\275\347\261\273\345\236\213\022 \n\006m_odds\030\003 \001(\005B\020\302\377\024\014\350"
    "\247\246\345\217\221\345\207\240\347\216\207\022\'\n\014m_dropvaluea\030\004 \001(\005B\021\302\377\024\r\346"
    "\216\211\350\220\275\345\217\202\346\225\260a\022\'\n\014m_dropvalueb\030\005 \001(\005B\021\302\377\024\r"
    "\346\216\211\350\220\275\345\217\202\346\225\260b\022\'\n\014m_dropvaluec\030\006 \001(\005B\021\302\377\024"
    "\r\346\216\211\350\220\275\345\217\202\346\225\260c\022\'\n\014m_dropvalued\030\007 \001(\005B\021\302\377"
    "\024\r\346\216\211\350\220\275\345\217\202\346\225\260d\022\'\n\014m_dropvaluee\030\010 \001(\005B\021\302"
    "\377\024\r\346\216\211\350\220\275\345\217\202\346\225\260e\022\'\n\014m_dropvaluef\030\t \001(\005B\021"
    "\302\377\024\r\346\216\211\350\220\275\345\217\202\346\225\260f\"N\n\021Sheet_MapItemdrop\0229"
    "\n\022E_MapItemdrop_List\030\001 \003(\0132\027.proto_ff.E_"
    "MapItemdropB\004\210\301\024(\"E\n\020E_MapDestroyitem\0221\n"
    "\017m_destroyitemid\030\001 \001(\003B\030\302\377\024\024\350\247\246\345\217\221\346\221\247\346\257\201"
    "\351\201\223\345\205\267ID\"X\n\024Sheet_MapDestroyitem\022@\n\025E_Ma"
    "pDestroyitem_List\030\001 \003(\0132\032.proto_ff.E_Map"
    "DestroyitemB\005\210\301\024\310\001", 2258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  E_MapMap::default_instance_ = new E_MapMap();
  Sheet_MapMap::default_instance_ = new Sheet_MapMap();
  E_MapItemdrop::default_instance_ = new E_MapItemdrop();
  Sheet_MapItemdrop::default_instance_ = new Sheet_MapItemdrop();
  E_MapDestroyitem::default_instance_ = new E_MapDestroyitem();
  Sheet_MapDestroyitem::default_instance_ = new Sheet_MapDestroyitem();
  E_MapMap::default_instance_->InitAsDefaultInstance();
  Sheet_MapMap::default_instance_->InitAsDefaultInstance();
  E_MapItemdrop::default_instance_->InitAsDefaultInstance();
  Sheet_MapItemdrop::default_instance_->InitAsDefaultInstance();
  E_MapDestroyitem::default_instance_->InitAsDefaultInstance();
  Sheet_MapDestroyitem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_MapMap::kMMapidFieldNumber;
const int E_MapMap::kMLevellimitFieldNumber;
const int E_MapMap::kMAdvicelvFieldNumber;
const int E_MapMap::kMMaptypeFieldNumber;
const int E_MapMap::kMMapsubtypeFieldNumber;
const int E_MapMap::kMClearancetimeFieldNumber;
const int E_MapMap::kMMappkmodeFieldNumber;
const int E_MapMap::kMPklockFieldNumber;
const int E_MapMap::kMPkFieldNumber;
const int E_MapMap::kMKillvalueFieldNumber;
const int E_MapMap::kMBangroupFieldNumber;
const int E_MapMap::kMRevivetimeFieldNumber;
const int E_MapMap::kMMapwideFieldNumber;
const int E_MapMap::kMMapheightFieldNumber;
const int E_MapMap::kMMapresourcesFieldNumber;
const int E_MapMap::kMReviveskillFieldNumber;
const int E_MapMap::kMReviveinplacetypeFieldNumber;
const int E_MapMap::kMIshangupFieldNumber;
const int E_MapMap::kMItemdroptypeFieldNumber;
const int E_MapMap::kMItemdropidFieldNumber;
const int E_MapMap::kMLinkofflineFieldNumber;
const int E_MapMap::kMBanonhookFieldNumber;
const int E_MapMap::kMRewaitFieldNumber;
const int E_MapMap::kMRetimeFieldNumber;
const int E_MapMap::kMHrebanFieldNumber;
const int E_MapMap::kMRetieredFieldNumber;
const int E_MapMap::kMReskillidFieldNumber;
const int E_MapMap::kMReteimesFieldNumber;
const int E_MapMap::kMDrivepointFieldNumber;
const int E_MapMap::kMDiedpFieldNumber;
const int E_MapMap::kMTimedpFieldNumber;
const int E_MapMap::kMMeditationFieldNumber;
#endif  // !_MSC_VER

E_MapMap::E_MapMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MapMap::InitAsDefaultInstance() {
}

E_MapMap::E_MapMap(const E_MapMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MapMap::SharedCtor() {
  _cached_size_ = 0;
  m_mapid_ = GOOGLE_LONGLONG(0);
  m_levellimit_ = 0;
  m_advicelv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_maptype_ = 0;
  m_mapsubtype_ = 0;
  m_clearancetime_ = 0;
  m_mappkmode_ = 0;
  m_pklock_ = 0;
  m_pk_ = 0;
  m_killvalue_ = 0;
  m_bangroup_ = 0;
  m_revivetime_ = 0;
  m_mapwide_ = 0;
  m_mapheight_ = 0;
  m_mapresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_reviveskill_ = GOOGLE_LONGLONG(0);
  m_reviveinplacetype_ = 0;
  m_ishangup_ = 0;
  m_itemdroptype_ = 0;
  m_itemdropid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_linkoffline_ = GOOGLE_LONGLONG(0);
  m_banonhook_ = 0;
  m_rewait_ = 0;
  m_retime_ = 0;
  m_hreban_ = 0;
  m_retiered_ = 0;
  m_reskillid_ = 0;
  m_reteimes_ = 0;
  m_drivepoint_ = 0;
  m_diedp_ = 0;
  m_timedp_ = 0;
  m_meditation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MapMap::~E_MapMap() {
  SharedDtor();
}

void E_MapMap::SharedDtor() {
  if (m_advicelv_ != &::google::protobuf::internal::kEmptyString) {
    delete m_advicelv_;
  }
  if (m_mapresources_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mapresources_;
  }
  if (m_itemdropid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_itemdropid_;
  }
  if (this != default_instance_) {
  }
}

void E_MapMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MapMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MapMap_descriptor_;
}

const E_MapMap& E_MapMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

E_MapMap* E_MapMap::default_instance_ = NULL;

E_MapMap* E_MapMap::New() const {
  return new E_MapMap;
}

void E_MapMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mapid_ = GOOGLE_LONGLONG(0);
    m_levellimit_ = 0;
    if (has_m_advicelv()) {
      if (m_advicelv_ != &::google::protobuf::internal::kEmptyString) {
        m_advicelv_->clear();
      }
    }
    m_maptype_ = 0;
    m_mapsubtype_ = 0;
    m_clearancetime_ = 0;
    m_mappkmode_ = 0;
    m_pklock_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_pk_ = 0;
    m_killvalue_ = 0;
    m_bangroup_ = 0;
    m_revivetime_ = 0;
    m_mapwide_ = 0;
    m_mapheight_ = 0;
    if (has_m_mapresources()) {
      if (m_mapresources_ != &::google::protobuf::internal::kEmptyString) {
        m_mapresources_->clear();
      }
    }
    m_reviveskill_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_reviveinplacetype_ = 0;
    m_ishangup_ = 0;
    m_itemdroptype_ = 0;
    if (has_m_itemdropid()) {
      if (m_itemdropid_ != &::google::protobuf::internal::kEmptyString) {
        m_itemdropid_->clear();
      }
    }
    m_linkoffline_ = GOOGLE_LONGLONG(0);
    m_banonhook_ = 0;
    m_rewait_ = 0;
    m_retime_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_hreban_ = 0;
    m_retiered_ = 0;
    m_reskillid_ = 0;
    m_reteimes_ = 0;
    m_drivepoint_ = 0;
    m_diedp_ = 0;
    m_timedp_ = 0;
    m_meditation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MapMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_levellimit;
        break;
      }

      // optional int32 m_levellimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levellimit_)));
          set_has_m_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_advicelv;
        break;
      }

      // optional string m_advicelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_advicelv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_advicelv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_advicelv().data(), this->m_advicelv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_maptype;
        break;
      }

      // optional int32 m_maptype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maptype_)));
          set_has_m_maptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_mapsubtype;
        break;
      }

      // optional int32 m_mapsubtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapsubtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapsubtype_)));
          set_has_m_mapsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_clearancetime;
        break;
      }

      // optional int32 m_clearancetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_clearancetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_clearancetime_)));
          set_has_m_clearancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_mappkmode;
        break;
      }

      // optional int32 m_mappkmode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mappkmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mappkmode_)));
          set_has_m_mappkmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_pklock;
        break;
      }

      // optional int32 m_pklock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pklock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pklock_)));
          set_has_m_pklock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_pk;
        break;
      }

      // optional int32 m_pk = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pk_)));
          set_has_m_pk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_killvalue;
        break;
      }

      // optional int32 m_killvalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killvalue_)));
          set_has_m_killvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_bangroup;
        break;
      }

      // optional int32 m_bangroup = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bangroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bangroup_)));
          set_has_m_bangroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_revivetime;
        break;
      }

      // optional int32 m_revivetime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_revivetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_revivetime_)));
          set_has_m_revivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_mapwide;
        break;
      }

      // optional int32 m_mapwide = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapwide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapwide_)));
          set_has_m_mapwide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_mapheight;
        break;
      }

      // optional int32 m_mapheight = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapheight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapheight_)));
          set_has_m_mapheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_mapresources;
        break;
      }

      // optional string m_mapresources = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mapresources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mapresources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mapresources().data(), this->m_mapresources().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_reviveskill;
        break;
      }

      // optional int64 m_reviveskill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reviveskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_reviveskill_)));
          set_has_m_reviveskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_reviveinplacetype;
        break;
      }

      // optional int32 m_reviveinplacetype = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reviveinplacetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reviveinplacetype_)));
          set_has_m_reviveinplacetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_ishangup;
        break;
      }

      // optional int32 m_ishangup = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ishangup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ishangup_)));
          set_has_m_ishangup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_itemdroptype;
        break;
      }

      // optional int32 m_itemdroptype = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemdroptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemdroptype_)));
          set_has_m_itemdroptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_itemdropid;
        break;
      }

      // optional string m_itemdropid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_itemdropid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_itemdropid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_itemdropid().data(), this->m_itemdropid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_linkoffline;
        break;
      }

      // optional int64 m_linkoffline = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkoffline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_linkoffline_)));
          set_has_m_linkoffline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_banonhook;
        break;
      }

      // optional int32 m_banonhook = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_banonhook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_banonhook_)));
          set_has_m_banonhook();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_rewait;
        break;
      }

      // optional int32 m_rewait = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewait_)));
          set_has_m_rewait();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_retime;
        break;
      }

      // optional int32 m_retime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_retime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_retime_)));
          set_has_m_retime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_hreban;
        break;
      }

      // optional int32 m_hreban = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hreban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hreban_)));
          set_has_m_hreban();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_retiered;
        break;
      }

      // optional int32 m_retiered = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_retiered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_retiered_)));
          set_has_m_retiered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_reskillid;
        break;
      }

      // optional int32 m_reskillid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reskillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reskillid_)));
          set_has_m_reskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_reteimes;
        break;
      }

      // optional int32 m_reteimes = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reteimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reteimes_)));
          set_has_m_reteimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_drivepoint;
        break;
      }

      // optional int32 m_drivepoint = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_drivepoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_drivepoint_)));
          set_has_m_drivepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_diedp;
        break;
      }

      // optional int32 m_diedp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_diedp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_diedp_)));
          set_has_m_diedp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_timedp;
        break;
      }

      // optional int32 m_timedp = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_timedp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_timedp_)));
          set_has_m_timedp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_meditation;
        break;
      }

      // optional int32 m_meditation = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_meditation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_meditation_)));
          set_has_m_meditation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MapMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_mapid = 1;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_mapid(), output);
  }

  // optional int32 m_levellimit = 2;
  if (has_m_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_levellimit(), output);
  }

  // optional string m_advicelv = 3;
  if (has_m_advicelv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_advicelv().data(), this->m_advicelv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_advicelv(), output);
  }

  // optional int32 m_maptype = 4;
  if (has_m_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_maptype(), output);
  }

  // optional int32 m_mapsubtype = 5;
  if (has_m_mapsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_mapsubtype(), output);
  }

  // optional int32 m_clearancetime = 6;
  if (has_m_clearancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_clearancetime(), output);
  }

  // optional int32 m_mappkmode = 7;
  if (has_m_mappkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_mappkmode(), output);
  }

  // optional int32 m_pklock = 8;
  if (has_m_pklock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_pklock(), output);
  }

  // optional int32 m_pk = 9;
  if (has_m_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_pk(), output);
  }

  // optional int32 m_killvalue = 10;
  if (has_m_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_killvalue(), output);
  }

  // optional int32 m_bangroup = 11;
  if (has_m_bangroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_bangroup(), output);
  }

  // optional int32 m_revivetime = 12;
  if (has_m_revivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_revivetime(), output);
  }

  // optional int32 m_mapwide = 13;
  if (has_m_mapwide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_mapwide(), output);
  }

  // optional int32 m_mapheight = 14;
  if (has_m_mapheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_mapheight(), output);
  }

  // optional string m_mapresources = 15;
  if (has_m_mapresources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mapresources().data(), this->m_mapresources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_mapresources(), output);
  }

  // optional int64 m_reviveskill = 16;
  if (has_m_reviveskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->m_reviveskill(), output);
  }

  // optional int32 m_reviveinplacetype = 17;
  if (has_m_reviveinplacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_reviveinplacetype(), output);
  }

  // optional int32 m_ishangup = 18;
  if (has_m_ishangup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_ishangup(), output);
  }

  // optional int32 m_itemdroptype = 19;
  if (has_m_itemdroptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_itemdroptype(), output);
  }

  // optional string m_itemdropid = 20;
  if (has_m_itemdropid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_itemdropid().data(), this->m_itemdropid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->m_itemdropid(), output);
  }

  // optional int64 m_linkoffline = 21;
  if (has_m_linkoffline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->m_linkoffline(), output);
  }

  // optional int32 m_banonhook = 22;
  if (has_m_banonhook()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_banonhook(), output);
  }

  // optional int32 m_rewait = 23;
  if (has_m_rewait()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_rewait(), output);
  }

  // optional int32 m_retime = 24;
  if (has_m_retime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_retime(), output);
  }

  // optional int32 m_hreban = 25;
  if (has_m_hreban()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_hreban(), output);
  }

  // optional int32 m_retiered = 26;
  if (has_m_retiered()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_retiered(), output);
  }

  // optional int32 m_reskillid = 27;
  if (has_m_reskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_reskillid(), output);
  }

  // optional int32 m_reteimes = 28;
  if (has_m_reteimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_reteimes(), output);
  }

  // optional int32 m_drivepoint = 29;
  if (has_m_drivepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->m_drivepoint(), output);
  }

  // optional int32 m_diedp = 30;
  if (has_m_diedp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->m_diedp(), output);
  }

  // optional int32 m_timedp = 31;
  if (has_m_timedp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->m_timedp(), output);
  }

  // optional int32 m_meditation = 32;
  if (has_m_meditation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->m_meditation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MapMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_mapid = 1;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_mapid(), target);
  }

  // optional int32 m_levellimit = 2;
  if (has_m_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_levellimit(), target);
  }

  // optional string m_advicelv = 3;
  if (has_m_advicelv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_advicelv().data(), this->m_advicelv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_advicelv(), target);
  }

  // optional int32 m_maptype = 4;
  if (has_m_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_maptype(), target);
  }

  // optional int32 m_mapsubtype = 5;
  if (has_m_mapsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_mapsubtype(), target);
  }

  // optional int32 m_clearancetime = 6;
  if (has_m_clearancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_clearancetime(), target);
  }

  // optional int32 m_mappkmode = 7;
  if (has_m_mappkmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_mappkmode(), target);
  }

  // optional int32 m_pklock = 8;
  if (has_m_pklock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_pklock(), target);
  }

  // optional int32 m_pk = 9;
  if (has_m_pk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_pk(), target);
  }

  // optional int32 m_killvalue = 10;
  if (has_m_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_killvalue(), target);
  }

  // optional int32 m_bangroup = 11;
  if (has_m_bangroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_bangroup(), target);
  }

  // optional int32 m_revivetime = 12;
  if (has_m_revivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_revivetime(), target);
  }

  // optional int32 m_mapwide = 13;
  if (has_m_mapwide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_mapwide(), target);
  }

  // optional int32 m_mapheight = 14;
  if (has_m_mapheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_mapheight(), target);
  }

  // optional string m_mapresources = 15;
  if (has_m_mapresources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mapresources().data(), this->m_mapresources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_mapresources(), target);
  }

  // optional int64 m_reviveskill = 16;
  if (has_m_reviveskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->m_reviveskill(), target);
  }

  // optional int32 m_reviveinplacetype = 17;
  if (has_m_reviveinplacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_reviveinplacetype(), target);
  }

  // optional int32 m_ishangup = 18;
  if (has_m_ishangup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_ishangup(), target);
  }

  // optional int32 m_itemdroptype = 19;
  if (has_m_itemdroptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_itemdroptype(), target);
  }

  // optional string m_itemdropid = 20;
  if (has_m_itemdropid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_itemdropid().data(), this->m_itemdropid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->m_itemdropid(), target);
  }

  // optional int64 m_linkoffline = 21;
  if (has_m_linkoffline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->m_linkoffline(), target);
  }

  // optional int32 m_banonhook = 22;
  if (has_m_banonhook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_banonhook(), target);
  }

  // optional int32 m_rewait = 23;
  if (has_m_rewait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_rewait(), target);
  }

  // optional int32 m_retime = 24;
  if (has_m_retime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_retime(), target);
  }

  // optional int32 m_hreban = 25;
  if (has_m_hreban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_hreban(), target);
  }

  // optional int32 m_retiered = 26;
  if (has_m_retiered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_retiered(), target);
  }

  // optional int32 m_reskillid = 27;
  if (has_m_reskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_reskillid(), target);
  }

  // optional int32 m_reteimes = 28;
  if (has_m_reteimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_reteimes(), target);
  }

  // optional int32 m_drivepoint = 29;
  if (has_m_drivepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->m_drivepoint(), target);
  }

  // optional int32 m_diedp = 30;
  if (has_m_diedp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->m_diedp(), target);
  }

  // optional int32 m_timedp = 31;
  if (has_m_timedp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->m_timedp(), target);
  }

  // optional int32 m_meditation = 32;
  if (has_m_meditation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->m_meditation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MapMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_mapid = 1;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mapid());
    }

    // optional int32 m_levellimit = 2;
    if (has_m_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levellimit());
    }

    // optional string m_advicelv = 3;
    if (has_m_advicelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_advicelv());
    }

    // optional int32 m_maptype = 4;
    if (has_m_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maptype());
    }

    // optional int32 m_mapsubtype = 5;
    if (has_m_mapsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapsubtype());
    }

    // optional int32 m_clearancetime = 6;
    if (has_m_clearancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_clearancetime());
    }

    // optional int32 m_mappkmode = 7;
    if (has_m_mappkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mappkmode());
    }

    // optional int32 m_pklock = 8;
    if (has_m_pklock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pklock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_pk = 9;
    if (has_m_pk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pk());
    }

    // optional int32 m_killvalue = 10;
    if (has_m_killvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killvalue());
    }

    // optional int32 m_bangroup = 11;
    if (has_m_bangroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bangroup());
    }

    // optional int32 m_revivetime = 12;
    if (has_m_revivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_revivetime());
    }

    // optional int32 m_mapwide = 13;
    if (has_m_mapwide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapwide());
    }

    // optional int32 m_mapheight = 14;
    if (has_m_mapheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapheight());
    }

    // optional string m_mapresources = 15;
    if (has_m_mapresources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mapresources());
    }

    // optional int64 m_reviveskill = 16;
    if (has_m_reviveskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_reviveskill());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_reviveinplacetype = 17;
    if (has_m_reviveinplacetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reviveinplacetype());
    }

    // optional int32 m_ishangup = 18;
    if (has_m_ishangup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ishangup());
    }

    // optional int32 m_itemdroptype = 19;
    if (has_m_itemdroptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemdroptype());
    }

    // optional string m_itemdropid = 20;
    if (has_m_itemdropid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_itemdropid());
    }

    // optional int64 m_linkoffline = 21;
    if (has_m_linkoffline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_linkoffline());
    }

    // optional int32 m_banonhook = 22;
    if (has_m_banonhook()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_banonhook());
    }

    // optional int32 m_rewait = 23;
    if (has_m_rewait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewait());
    }

    // optional int32 m_retime = 24;
    if (has_m_retime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_retime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_hreban = 25;
    if (has_m_hreban()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hreban());
    }

    // optional int32 m_retiered = 26;
    if (has_m_retiered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_retiered());
    }

    // optional int32 m_reskillid = 27;
    if (has_m_reskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reskillid());
    }

    // optional int32 m_reteimes = 28;
    if (has_m_reteimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reteimes());
    }

    // optional int32 m_drivepoint = 29;
    if (has_m_drivepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_drivepoint());
    }

    // optional int32 m_diedp = 30;
    if (has_m_diedp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_diedp());
    }

    // optional int32 m_timedp = 31;
    if (has_m_timedp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_timedp());
    }

    // optional int32 m_meditation = 32;
    if (has_m_meditation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_meditation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MapMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MapMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MapMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MapMap::MergeFrom(const E_MapMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
    if (from.has_m_levellimit()) {
      set_m_levellimit(from.m_levellimit());
    }
    if (from.has_m_advicelv()) {
      set_m_advicelv(from.m_advicelv());
    }
    if (from.has_m_maptype()) {
      set_m_maptype(from.m_maptype());
    }
    if (from.has_m_mapsubtype()) {
      set_m_mapsubtype(from.m_mapsubtype());
    }
    if (from.has_m_clearancetime()) {
      set_m_clearancetime(from.m_clearancetime());
    }
    if (from.has_m_mappkmode()) {
      set_m_mappkmode(from.m_mappkmode());
    }
    if (from.has_m_pklock()) {
      set_m_pklock(from.m_pklock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_pk()) {
      set_m_pk(from.m_pk());
    }
    if (from.has_m_killvalue()) {
      set_m_killvalue(from.m_killvalue());
    }
    if (from.has_m_bangroup()) {
      set_m_bangroup(from.m_bangroup());
    }
    if (from.has_m_revivetime()) {
      set_m_revivetime(from.m_revivetime());
    }
    if (from.has_m_mapwide()) {
      set_m_mapwide(from.m_mapwide());
    }
    if (from.has_m_mapheight()) {
      set_m_mapheight(from.m_mapheight());
    }
    if (from.has_m_mapresources()) {
      set_m_mapresources(from.m_mapresources());
    }
    if (from.has_m_reviveskill()) {
      set_m_reviveskill(from.m_reviveskill());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_reviveinplacetype()) {
      set_m_reviveinplacetype(from.m_reviveinplacetype());
    }
    if (from.has_m_ishangup()) {
      set_m_ishangup(from.m_ishangup());
    }
    if (from.has_m_itemdroptype()) {
      set_m_itemdroptype(from.m_itemdroptype());
    }
    if (from.has_m_itemdropid()) {
      set_m_itemdropid(from.m_itemdropid());
    }
    if (from.has_m_linkoffline()) {
      set_m_linkoffline(from.m_linkoffline());
    }
    if (from.has_m_banonhook()) {
      set_m_banonhook(from.m_banonhook());
    }
    if (from.has_m_rewait()) {
      set_m_rewait(from.m_rewait());
    }
    if (from.has_m_retime()) {
      set_m_retime(from.m_retime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_hreban()) {
      set_m_hreban(from.m_hreban());
    }
    if (from.has_m_retiered()) {
      set_m_retiered(from.m_retiered());
    }
    if (from.has_m_reskillid()) {
      set_m_reskillid(from.m_reskillid());
    }
    if (from.has_m_reteimes()) {
      set_m_reteimes(from.m_reteimes());
    }
    if (from.has_m_drivepoint()) {
      set_m_drivepoint(from.m_drivepoint());
    }
    if (from.has_m_diedp()) {
      set_m_diedp(from.m_diedp());
    }
    if (from.has_m_timedp()) {
      set_m_timedp(from.m_timedp());
    }
    if (from.has_m_meditation()) {
      set_m_meditation(from.m_meditation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MapMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MapMap::CopyFrom(const E_MapMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MapMap::IsInitialized() const {

  return true;
}

void E_MapMap::Swap(E_MapMap* other) {
  if (other != this) {
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(m_levellimit_, other->m_levellimit_);
    std::swap(m_advicelv_, other->m_advicelv_);
    std::swap(m_maptype_, other->m_maptype_);
    std::swap(m_mapsubtype_, other->m_mapsubtype_);
    std::swap(m_clearancetime_, other->m_clearancetime_);
    std::swap(m_mappkmode_, other->m_mappkmode_);
    std::swap(m_pklock_, other->m_pklock_);
    std::swap(m_pk_, other->m_pk_);
    std::swap(m_killvalue_, other->m_killvalue_);
    std::swap(m_bangroup_, other->m_bangroup_);
    std::swap(m_revivetime_, other->m_revivetime_);
    std::swap(m_mapwide_, other->m_mapwide_);
    std::swap(m_mapheight_, other->m_mapheight_);
    std::swap(m_mapresources_, other->m_mapresources_);
    std::swap(m_reviveskill_, other->m_reviveskill_);
    std::swap(m_reviveinplacetype_, other->m_reviveinplacetype_);
    std::swap(m_ishangup_, other->m_ishangup_);
    std::swap(m_itemdroptype_, other->m_itemdroptype_);
    std::swap(m_itemdropid_, other->m_itemdropid_);
    std::swap(m_linkoffline_, other->m_linkoffline_);
    std::swap(m_banonhook_, other->m_banonhook_);
    std::swap(m_rewait_, other->m_rewait_);
    std::swap(m_retime_, other->m_retime_);
    std::swap(m_hreban_, other->m_hreban_);
    std::swap(m_retiered_, other->m_retiered_);
    std::swap(m_reskillid_, other->m_reskillid_);
    std::swap(m_reteimes_, other->m_reteimes_);
    std::swap(m_drivepoint_, other->m_drivepoint_);
    std::swap(m_diedp_, other->m_diedp_);
    std::swap(m_timedp_, other->m_timedp_);
    std::swap(m_meditation_, other->m_meditation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MapMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MapMap_descriptor_;
  metadata.reflection = E_MapMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MapMap::kEMapMapListFieldNumber;
#endif  // !_MSC_VER

Sheet_MapMap::Sheet_MapMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MapMap::InitAsDefaultInstance() {
}

Sheet_MapMap::Sheet_MapMap(const Sheet_MapMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MapMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MapMap::~Sheet_MapMap() {
  SharedDtor();
}

void Sheet_MapMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MapMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MapMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MapMap_descriptor_;
}

const Sheet_MapMap& Sheet_MapMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Sheet_MapMap* Sheet_MapMap::default_instance_ = NULL;

Sheet_MapMap* Sheet_MapMap::New() const {
  return new Sheet_MapMap;
}

void Sheet_MapMap::Clear() {
  e_mapmap_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MapMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MapMap E_MapMap_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MapMap_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mapmap_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MapMap_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MapMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MapMap E_MapMap_List = 1;
  for (int i = 0; i < this->e_mapmap_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mapmap_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MapMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MapMap E_MapMap_List = 1;
  for (int i = 0; i < this->e_mapmap_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mapmap_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MapMap::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MapMap E_MapMap_List = 1;
  total_size += 1 * this->e_mapmap_list_size();
  for (int i = 0; i < this->e_mapmap_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mapmap_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MapMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MapMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MapMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MapMap::MergeFrom(const Sheet_MapMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mapmap_list_.MergeFrom(from.e_mapmap_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MapMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MapMap::CopyFrom(const Sheet_MapMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MapMap::IsInitialized() const {

  return true;
}

void Sheet_MapMap::Swap(Sheet_MapMap* other) {
  if (other != this) {
    e_mapmap_list_.Swap(&other->e_mapmap_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MapMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MapMap_descriptor_;
  metadata.reflection = Sheet_MapMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MapItemdrop::kMItemdropidFieldNumber;
const int E_MapItemdrop::kMDroptypeFieldNumber;
const int E_MapItemdrop::kMOddsFieldNumber;
const int E_MapItemdrop::kMDropvalueaFieldNumber;
const int E_MapItemdrop::kMDropvaluebFieldNumber;
const int E_MapItemdrop::kMDropvaluecFieldNumber;
const int E_MapItemdrop::kMDropvaluedFieldNumber;
const int E_MapItemdrop::kMDropvalueeFieldNumber;
const int E_MapItemdrop::kMDropvaluefFieldNumber;
#endif  // !_MSC_VER

E_MapItemdrop::E_MapItemdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MapItemdrop::InitAsDefaultInstance() {
}

E_MapItemdrop::E_MapItemdrop(const E_MapItemdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MapItemdrop::SharedCtor() {
  _cached_size_ = 0;
  m_itemdropid_ = 0;
  m_droptype_ = 0;
  m_odds_ = 0;
  m_dropvaluea_ = 0;
  m_dropvalueb_ = 0;
  m_dropvaluec_ = 0;
  m_dropvalued_ = 0;
  m_dropvaluee_ = 0;
  m_dropvaluef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MapItemdrop::~E_MapItemdrop() {
  SharedDtor();
}

void E_MapItemdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MapItemdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MapItemdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MapItemdrop_descriptor_;
}

const E_MapItemdrop& E_MapItemdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

E_MapItemdrop* E_MapItemdrop::default_instance_ = NULL;

E_MapItemdrop* E_MapItemdrop::New() const {
  return new E_MapItemdrop;
}

void E_MapItemdrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_itemdropid_ = 0;
    m_droptype_ = 0;
    m_odds_ = 0;
    m_dropvaluea_ = 0;
    m_dropvalueb_ = 0;
    m_dropvaluec_ = 0;
    m_dropvalued_ = 0;
    m_dropvaluee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_dropvaluef_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MapItemdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_itemdropid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemdropid_)));
          set_has_m_itemdropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_droptype;
        break;
      }

      // optional int32 m_droptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_droptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_droptype_)));
          set_has_m_droptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_odds;
        break;
      }

      // optional int32 m_odds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_odds_)));
          set_has_m_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_dropvaluea;
        break;
      }

      // optional int32 m_dropvaluea = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropvaluea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropvaluea_)));
          set_has_m_dropvaluea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_dropvalueb;
        break;
      }

      // optional int32 m_dropvalueb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropvalueb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropvalueb_)));
          set_has_m_dropvalueb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_dropvaluec;
        break;
      }

      // optional int32 m_dropvaluec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropvaluec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropvaluec_)));
          set_has_m_dropvaluec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_dropvalued;
        break;
      }

      // optional int32 m_dropvalued = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropvalued:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropvalued_)));
          set_has_m_dropvalued();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_dropvaluee;
        break;
      }

      // optional int32 m_dropvaluee = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropvaluee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropvaluee_)));
          set_has_m_dropvaluee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_dropvaluef;
        break;
      }

      // optional int32 m_dropvaluef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropvaluef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropvaluef_)));
          set_has_m_dropvaluef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MapItemdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_itemdropid = 1;
  if (has_m_itemdropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_itemdropid(), output);
  }

  // optional int32 m_droptype = 2;
  if (has_m_droptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_droptype(), output);
  }

  // optional int32 m_odds = 3;
  if (has_m_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_odds(), output);
  }

  // optional int32 m_dropvaluea = 4;
  if (has_m_dropvaluea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_dropvaluea(), output);
  }

  // optional int32 m_dropvalueb = 5;
  if (has_m_dropvalueb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_dropvalueb(), output);
  }

  // optional int32 m_dropvaluec = 6;
  if (has_m_dropvaluec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_dropvaluec(), output);
  }

  // optional int32 m_dropvalued = 7;
  if (has_m_dropvalued()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_dropvalued(), output);
  }

  // optional int32 m_dropvaluee = 8;
  if (has_m_dropvaluee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_dropvaluee(), output);
  }

  // optional int32 m_dropvaluef = 9;
  if (has_m_dropvaluef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_dropvaluef(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MapItemdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_itemdropid = 1;
  if (has_m_itemdropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_itemdropid(), target);
  }

  // optional int32 m_droptype = 2;
  if (has_m_droptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_droptype(), target);
  }

  // optional int32 m_odds = 3;
  if (has_m_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_odds(), target);
  }

  // optional int32 m_dropvaluea = 4;
  if (has_m_dropvaluea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_dropvaluea(), target);
  }

  // optional int32 m_dropvalueb = 5;
  if (has_m_dropvalueb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_dropvalueb(), target);
  }

  // optional int32 m_dropvaluec = 6;
  if (has_m_dropvaluec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_dropvaluec(), target);
  }

  // optional int32 m_dropvalued = 7;
  if (has_m_dropvalued()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_dropvalued(), target);
  }

  // optional int32 m_dropvaluee = 8;
  if (has_m_dropvaluee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_dropvaluee(), target);
  }

  // optional int32 m_dropvaluef = 9;
  if (has_m_dropvaluef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_dropvaluef(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MapItemdrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_itemdropid = 1;
    if (has_m_itemdropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemdropid());
    }

    // optional int32 m_droptype = 2;
    if (has_m_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_droptype());
    }

    // optional int32 m_odds = 3;
    if (has_m_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_odds());
    }

    // optional int32 m_dropvaluea = 4;
    if (has_m_dropvaluea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropvaluea());
    }

    // optional int32 m_dropvalueb = 5;
    if (has_m_dropvalueb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropvalueb());
    }

    // optional int32 m_dropvaluec = 6;
    if (has_m_dropvaluec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropvaluec());
    }

    // optional int32 m_dropvalued = 7;
    if (has_m_dropvalued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropvalued());
    }

    // optional int32 m_dropvaluee = 8;
    if (has_m_dropvaluee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropvaluee());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_dropvaluef = 9;
    if (has_m_dropvaluef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropvaluef());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MapItemdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MapItemdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MapItemdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MapItemdrop::MergeFrom(const E_MapItemdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_itemdropid()) {
      set_m_itemdropid(from.m_itemdropid());
    }
    if (from.has_m_droptype()) {
      set_m_droptype(from.m_droptype());
    }
    if (from.has_m_odds()) {
      set_m_odds(from.m_odds());
    }
    if (from.has_m_dropvaluea()) {
      set_m_dropvaluea(from.m_dropvaluea());
    }
    if (from.has_m_dropvalueb()) {
      set_m_dropvalueb(from.m_dropvalueb());
    }
    if (from.has_m_dropvaluec()) {
      set_m_dropvaluec(from.m_dropvaluec());
    }
    if (from.has_m_dropvalued()) {
      set_m_dropvalued(from.m_dropvalued());
    }
    if (from.has_m_dropvaluee()) {
      set_m_dropvaluee(from.m_dropvaluee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_dropvaluef()) {
      set_m_dropvaluef(from.m_dropvaluef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MapItemdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MapItemdrop::CopyFrom(const E_MapItemdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MapItemdrop::IsInitialized() const {

  return true;
}

void E_MapItemdrop::Swap(E_MapItemdrop* other) {
  if (other != this) {
    std::swap(m_itemdropid_, other->m_itemdropid_);
    std::swap(m_droptype_, other->m_droptype_);
    std::swap(m_odds_, other->m_odds_);
    std::swap(m_dropvaluea_, other->m_dropvaluea_);
    std::swap(m_dropvalueb_, other->m_dropvalueb_);
    std::swap(m_dropvaluec_, other->m_dropvaluec_);
    std::swap(m_dropvalued_, other->m_dropvalued_);
    std::swap(m_dropvaluee_, other->m_dropvaluee_);
    std::swap(m_dropvaluef_, other->m_dropvaluef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MapItemdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MapItemdrop_descriptor_;
  metadata.reflection = E_MapItemdrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MapItemdrop::kEMapItemdropListFieldNumber;
#endif  // !_MSC_VER

Sheet_MapItemdrop::Sheet_MapItemdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MapItemdrop::InitAsDefaultInstance() {
}

Sheet_MapItemdrop::Sheet_MapItemdrop(const Sheet_MapItemdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MapItemdrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MapItemdrop::~Sheet_MapItemdrop() {
  SharedDtor();
}

void Sheet_MapItemdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MapItemdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MapItemdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MapItemdrop_descriptor_;
}

const Sheet_MapItemdrop& Sheet_MapItemdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Sheet_MapItemdrop* Sheet_MapItemdrop::default_instance_ = NULL;

Sheet_MapItemdrop* Sheet_MapItemdrop::New() const {
  return new Sheet_MapItemdrop;
}

void Sheet_MapItemdrop::Clear() {
  e_mapitemdrop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MapItemdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MapItemdrop E_MapItemdrop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MapItemdrop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mapitemdrop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MapItemdrop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MapItemdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MapItemdrop E_MapItemdrop_List = 1;
  for (int i = 0; i < this->e_mapitemdrop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mapitemdrop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MapItemdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MapItemdrop E_MapItemdrop_List = 1;
  for (int i = 0; i < this->e_mapitemdrop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mapitemdrop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MapItemdrop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MapItemdrop E_MapItemdrop_List = 1;
  total_size += 1 * this->e_mapitemdrop_list_size();
  for (int i = 0; i < this->e_mapitemdrop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mapitemdrop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MapItemdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MapItemdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MapItemdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MapItemdrop::MergeFrom(const Sheet_MapItemdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mapitemdrop_list_.MergeFrom(from.e_mapitemdrop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MapItemdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MapItemdrop::CopyFrom(const Sheet_MapItemdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MapItemdrop::IsInitialized() const {

  return true;
}

void Sheet_MapItemdrop::Swap(Sheet_MapItemdrop* other) {
  if (other != this) {
    e_mapitemdrop_list_.Swap(&other->e_mapitemdrop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MapItemdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MapItemdrop_descriptor_;
  metadata.reflection = Sheet_MapItemdrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MapDestroyitem::kMDestroyitemidFieldNumber;
#endif  // !_MSC_VER

E_MapDestroyitem::E_MapDestroyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MapDestroyitem::InitAsDefaultInstance() {
}

E_MapDestroyitem::E_MapDestroyitem(const E_MapDestroyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MapDestroyitem::SharedCtor() {
  _cached_size_ = 0;
  m_destroyitemid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MapDestroyitem::~E_MapDestroyitem() {
  SharedDtor();
}

void E_MapDestroyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MapDestroyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MapDestroyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MapDestroyitem_descriptor_;
}

const E_MapDestroyitem& E_MapDestroyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

E_MapDestroyitem* E_MapDestroyitem::default_instance_ = NULL;

E_MapDestroyitem* E_MapDestroyitem::New() const {
  return new E_MapDestroyitem;
}

void E_MapDestroyitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_destroyitemid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MapDestroyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_destroyitemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_destroyitemid_)));
          set_has_m_destroyitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MapDestroyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_destroyitemid = 1;
  if (has_m_destroyitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_destroyitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MapDestroyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_destroyitemid = 1;
  if (has_m_destroyitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_destroyitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MapDestroyitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_destroyitemid = 1;
    if (has_m_destroyitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_destroyitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MapDestroyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MapDestroyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MapDestroyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MapDestroyitem::MergeFrom(const E_MapDestroyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_destroyitemid()) {
      set_m_destroyitemid(from.m_destroyitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MapDestroyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MapDestroyitem::CopyFrom(const E_MapDestroyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MapDestroyitem::IsInitialized() const {

  return true;
}

void E_MapDestroyitem::Swap(E_MapDestroyitem* other) {
  if (other != this) {
    std::swap(m_destroyitemid_, other->m_destroyitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MapDestroyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MapDestroyitem_descriptor_;
  metadata.reflection = E_MapDestroyitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MapDestroyitem::kEMapDestroyitemListFieldNumber;
#endif  // !_MSC_VER

Sheet_MapDestroyitem::Sheet_MapDestroyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MapDestroyitem::InitAsDefaultInstance() {
}

Sheet_MapDestroyitem::Sheet_MapDestroyitem(const Sheet_MapDestroyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MapDestroyitem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MapDestroyitem::~Sheet_MapDestroyitem() {
  SharedDtor();
}

void Sheet_MapDestroyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MapDestroyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MapDestroyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MapDestroyitem_descriptor_;
}

const Sheet_MapDestroyitem& Sheet_MapDestroyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Sheet_MapDestroyitem* Sheet_MapDestroyitem::default_instance_ = NULL;

Sheet_MapDestroyitem* Sheet_MapDestroyitem::New() const {
  return new Sheet_MapDestroyitem;
}

void Sheet_MapDestroyitem::Clear() {
  e_mapdestroyitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MapDestroyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MapDestroyitem E_MapDestroyitem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MapDestroyitem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mapdestroyitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MapDestroyitem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MapDestroyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MapDestroyitem E_MapDestroyitem_List = 1;
  for (int i = 0; i < this->e_mapdestroyitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mapdestroyitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MapDestroyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MapDestroyitem E_MapDestroyitem_List = 1;
  for (int i = 0; i < this->e_mapdestroyitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mapdestroyitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MapDestroyitem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MapDestroyitem E_MapDestroyitem_List = 1;
  total_size += 1 * this->e_mapdestroyitem_list_size();
  for (int i = 0; i < this->e_mapdestroyitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mapdestroyitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MapDestroyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MapDestroyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MapDestroyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MapDestroyitem::MergeFrom(const Sheet_MapDestroyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mapdestroyitem_list_.MergeFrom(from.e_mapdestroyitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MapDestroyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MapDestroyitem::CopyFrom(const Sheet_MapDestroyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MapDestroyitem::IsInitialized() const {

  return true;
}

void Sheet_MapDestroyitem::Swap(Sheet_MapDestroyitem* other) {
  if (other != this) {
    e_mapdestroyitem_list_.Swap(&other->e_mapdestroyitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MapDestroyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MapDestroyitem_descriptor_;
  metadata.reflection = Sheet_MapDestroyitem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
