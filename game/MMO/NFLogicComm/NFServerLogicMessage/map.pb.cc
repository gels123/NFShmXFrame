// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* mapmap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mapmap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mapmap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mapmap_reflection_ = NULL;
const ::google::protobuf::Descriptor* mapitemdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mapitemdrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mapitemdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mapitemdrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* mapdestroyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mapdestroyitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mapdestroyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mapdestroyitem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  mapmap_descriptor_ = file->message_type(0);
  static const int mapmap_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, advicelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, clearancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, mapsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, mappkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, pklock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, killvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, bangroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, revivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, mapwide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, mapheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, mapresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, reviveskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, reviveinplacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, ishangup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, itemdroptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, itemdropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, linkoffline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, banonhook_),
  };
  mapmap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mapmap_descriptor_,
      mapmap::default_instance_,
      mapmap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapmap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mapmap));
  Sheet_mapmap_descriptor_ = file->message_type(1);
  static const int Sheet_mapmap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapmap, mapmap_list_),
  };
  Sheet_mapmap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mapmap_descriptor_,
      Sheet_mapmap::default_instance_,
      Sheet_mapmap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapmap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapmap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mapmap));
  mapitemdrop_descriptor_ = file->message_type(2);
  static const int mapitemdrop_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, itemdropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, droptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, odds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, dropvaluea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, dropvalueb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, dropvaluec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, dropvalued_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, dropvaluee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, dropvaluef_),
  };
  mapitemdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mapitemdrop_descriptor_,
      mapitemdrop::default_instance_,
      mapitemdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapitemdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mapitemdrop));
  Sheet_mapitemdrop_descriptor_ = file->message_type(3);
  static const int Sheet_mapitemdrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapitemdrop, mapitemdrop_list_),
  };
  Sheet_mapitemdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mapitemdrop_descriptor_,
      Sheet_mapitemdrop::default_instance_,
      Sheet_mapitemdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapitemdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapitemdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mapitemdrop));
  mapdestroyitem_descriptor_ = file->message_type(4);
  static const int mapdestroyitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapdestroyitem, destroyitemid_),
  };
  mapdestroyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mapdestroyitem_descriptor_,
      mapdestroyitem::default_instance_,
      mapdestroyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapdestroyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mapdestroyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mapdestroyitem));
  Sheet_mapdestroyitem_descriptor_ = file->message_type(5);
  static const int Sheet_mapdestroyitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapdestroyitem, mapdestroyitem_list_),
  };
  Sheet_mapdestroyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mapdestroyitem_descriptor_,
      Sheet_mapdestroyitem::default_instance_,
      Sheet_mapdestroyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapdestroyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mapdestroyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mapdestroyitem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mapmap_descriptor_, &mapmap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mapmap_descriptor_, &Sheet_mapmap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mapitemdrop_descriptor_, &mapitemdrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mapitemdrop_descriptor_, &Sheet_mapitemdrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mapdestroyitem_descriptor_, &mapdestroyitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mapdestroyitem_descriptor_, &Sheet_mapdestroyitem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete mapmap::default_instance_;
  delete mapmap_reflection_;
  delete Sheet_mapmap::default_instance_;
  delete Sheet_mapmap_reflection_;
  delete mapitemdrop::default_instance_;
  delete mapitemdrop_reflection_;
  delete Sheet_mapitemdrop::default_instance_;
  delete Sheet_mapitemdrop_reflection_;
  delete mapdestroyitem::default_instance_;
  delete mapdestroyitem_reflection_;
  delete Sheet_mapdestroyitem::default_instance_;
  delete Sheet_mapdestroyitem_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"\210\010\n\006mapmap\022\033\n\005mapId\030\001 \001(\003B\014\302\377\024\010\345\234\260\345"
    "\233\276id\022*\n\nlevelLimit\030\002 \001(\005B\026\302\377\024\022\345\234\260\345\233\276\347\255\211\347"
    "\272\247\351\231\220\345\210\266\022/\n\010adviceLv\030\003 \001(\tB\035\302\377\024\025\345\234\260\345\233\276\346\216"
    "\250\350\215\220\347\255\211\347\272\247\346\256\265\220\301\024<\022!\n\007mapType\030\004 \001(\005B\020\302\377\024\014"
    "\345\234\260\345\233\276\347\261\273\345\236\213\0226\n\rclearanceTime\030\005 \001(\005B\037\302\377\024"
    "\033\345\234\260\345\233\276\346\270\205\345\234\272\346\227\266\351\227\264\357\274\210\347\247\222\357\274\211\022\'\n\nmapSubTy"
    "pe\030\006 \001(\005B\023\302\377\024\017\345\234\260\345\233\276\345\255\220\347\261\273\345\236\213\022%\n\tmapPkmo"
    "de\030\007 \001(\005B\022\302\377\024\016\345\234\260\345\233\276pk\346\250\241\345\274\217\0224\n\006pklock\030\010"
    " \001(\005B$\302\377\024 \345\234\260\345\233\276\346\230\257\345\220\246\345\205\201\350\256\270\345\210\207\346\215\242PK\346\250\241\345"
    "\274\217\022$\n\002pk\030\t \001(\005B\030\302\377\024\024\345\234\260\345\233\276\346\230\257\345\220\246\345\205\201\350\256\270pk"
    "\022_\n\tkillValue\030\n \001(\005BL\302\377\024H\345\234\260\345\233\276\346\235\200\344\272\272\346\230\257"
    "\345\220\246\345\242\236\345\212\240\346\235\200\346\210\256\345\200\274\344\270\224\345\234\260\345\233\276\346\255\273\344\272\241\345\220\216\346\230\257\345"
    "\220\246\346\270\205\351\231\244\346\235\200\346\210\256\345\200\274\022.\n\010BanGroup\030\013 \001(\005B\034\302\377\024"
    "\030\347\246\201\346\255\242\347\273\204\351\230\237\350\277\233\345\205\245\351\202\200\350\257\267\0220\n\nreviveTime\030"
    "\014 \001(\005B\034\302\377\024\030\345\234\272\346\231\257\345\244\215\346\264\273\345\200\222\350\256\241\346\227\266\351\225\277\022!\n\007m"
    "apWide\030\r \001(\005B\020\302\377\024\014\345\234\260\345\233\276\345\256\275\345\272\246\022#\n\tmapHei"
    "ght\030\016 \001(\005B\020\302\377\024\014\345\234\260\345\233\276\351\253\230\345\272\246\022-\n\014mapResour"
    "ces\030\017 \001(\tB\027\302\377\024\017\345\234\260\345\233\276\350\265\204\346\272\220\345\220\215\220\301\024<\022%\n\013re"
    "viveSkill\030\020 \001(\003B\020\302\377\024\014\345\244\215\346\264\273\346\227\240\346\225\214\0221\n\021rev"
    "iveInPlaceType\030\021 \001(\005B\026\302\377\024\022\345\216\237\345\234\260\345\244\215\346\264\273\347\261"
    "\273\345\236\213\022+\n\010isHangUp\030\022 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\350\203\275\350\207\252"
    "\345\212\250\346\214\202\346\234\272\022,\n\014itemDropType\030\023 \001(\005B\026\302\377\024\022\346\255\273"
    "\344\272\241\346\216\211\350\220\275\347\261\273\345\236\213\022-\n\nitemDropID\030\024 \001(\tB\031\302\377\024"
    "\021\350\247\246\345\217\221\346\216\211\350\220\275\347\273\204ID\220\301\024<\022.\n\013linkOffLine\030\025 "
    "\001(\003B\031\302\377\024\025\344\270\213\347\272\277\345\220\216\345\233\236\345\210\260\345\234\260\345\233\276\022/\n\tbanOnH"
    "ook\030\026 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\347\246\201\346\255\242\345\216\237\345\234\260\346\214\202\346\234\272\""
    "<\n\014Sheet_mapmap\022,\n\013mapmap_List\030\001 \003(\0132\020.p"
    "roto_ff.mapmapB\005\210\301\024\310\001\"\335\002\n\013mapitemdrop\022 \n"
    "\nitemDropID\030\001 \001(\005B\014\302\377\024\010\346\216\211\350\220\275ID\022\"\n\010dropT"
    "ype\030\002 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\347\261\273\345\236\213\022\036\n\004odds\030\003 \001("
    "\005B\020\302\377\024\014\350\247\246\345\217\221\345\207\240\347\216\207\022%\n\ndropvaluea\030\004 \001(\005B"
    "\021\302\377\024\r\346\216\211\350\220\275\345\217\202\346\225\260a\022%\n\ndropvalueb\030\005 \001(\005B\021"
    "\302\377\024\r\346\216\211\350\220\275\345\217\202\346\225\260b\022%\n\ndropvaluec\030\006 \001(\005B\021\302"
    "\377\024\r\346\216\211\350\220\275\345\217\202\346\225\260c\022%\n\ndropvalued\030\007 \001(\005B\021\302\377"
    "\024\r\346\216\211\350\220\275\345\217\202\346\225\260d\022%\n\ndropvaluee\030\010 \001(\005B\021\302\377\024"
    "\r\346\216\211\350\220\275\345\217\202\346\225\260e\022%\n\ndropvaluef\030\t \001(\005B\021\302\377\024\r"
    "\346\216\211\350\220\275\345\217\202\346\225\260f\"J\n\021Sheet_mapitemdrop\0225\n\020ma"
    "pitemdrop_List\030\001 \003(\0132\025.proto_ff.mapitemd"
    "ropB\004\210\301\024(\"A\n\016mapdestroyitem\022/\n\rdestroyit"
    "emID\030\001 \001(\003B\030\302\377\024\024\350\247\246\345\217\221\346\221\247\346\257\201\351\201\223\345\205\267ID\"T\n\024"
    "Sheet_mapdestroyitem\022<\n\023mapdestroyitem_L"
    "ist\030\001 \003(\0132\030.proto_ff.mapdestroyitemB\005\210\301\024"
    "\310\001", 1722);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  mapmap::default_instance_ = new mapmap();
  Sheet_mapmap::default_instance_ = new Sheet_mapmap();
  mapitemdrop::default_instance_ = new mapitemdrop();
  Sheet_mapitemdrop::default_instance_ = new Sheet_mapitemdrop();
  mapdestroyitem::default_instance_ = new mapdestroyitem();
  Sheet_mapdestroyitem::default_instance_ = new Sheet_mapdestroyitem();
  mapmap::default_instance_->InitAsDefaultInstance();
  Sheet_mapmap::default_instance_->InitAsDefaultInstance();
  mapitemdrop::default_instance_->InitAsDefaultInstance();
  Sheet_mapitemdrop::default_instance_->InitAsDefaultInstance();
  mapdestroyitem::default_instance_->InitAsDefaultInstance();
  Sheet_mapdestroyitem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mapmap::kMapIdFieldNumber;
const int mapmap::kLevelLimitFieldNumber;
const int mapmap::kAdviceLvFieldNumber;
const int mapmap::kMapTypeFieldNumber;
const int mapmap::kClearanceTimeFieldNumber;
const int mapmap::kMapSubTypeFieldNumber;
const int mapmap::kMapPkmodeFieldNumber;
const int mapmap::kPklockFieldNumber;
const int mapmap::kPkFieldNumber;
const int mapmap::kKillValueFieldNumber;
const int mapmap::kBanGroupFieldNumber;
const int mapmap::kReviveTimeFieldNumber;
const int mapmap::kMapWideFieldNumber;
const int mapmap::kMapHeightFieldNumber;
const int mapmap::kMapResourcesFieldNumber;
const int mapmap::kReviveSkillFieldNumber;
const int mapmap::kReviveInPlaceTypeFieldNumber;
const int mapmap::kIsHangUpFieldNumber;
const int mapmap::kItemDropTypeFieldNumber;
const int mapmap::kItemDropIDFieldNumber;
const int mapmap::kLinkOffLineFieldNumber;
const int mapmap::kBanOnHookFieldNumber;
#endif  // !_MSC_VER

mapmap::mapmap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mapmap::InitAsDefaultInstance() {
}

mapmap::mapmap(const mapmap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mapmap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  levellimit_ = 0;
  advicelv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maptype_ = 0;
  clearancetime_ = 0;
  mapsubtype_ = 0;
  mappkmode_ = 0;
  pklock_ = 0;
  pk_ = 0;
  killvalue_ = 0;
  bangroup_ = 0;
  revivetime_ = 0;
  mapwide_ = 0;
  mapheight_ = 0;
  mapresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reviveskill_ = GOOGLE_LONGLONG(0);
  reviveinplacetype_ = 0;
  ishangup_ = 0;
  itemdroptype_ = 0;
  itemdropid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linkoffline_ = GOOGLE_LONGLONG(0);
  banonhook_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mapmap::~mapmap() {
  SharedDtor();
}

void mapmap::SharedDtor() {
  if (advicelv_ != &::google::protobuf::internal::kEmptyString) {
    delete advicelv_;
  }
  if (mapresources_ != &::google::protobuf::internal::kEmptyString) {
    delete mapresources_;
  }
  if (itemdropid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdropid_;
  }
  if (this != default_instance_) {
  }
}

void mapmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mapmap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mapmap_descriptor_;
}

const mapmap& mapmap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

mapmap* mapmap::default_instance_ = NULL;

mapmap* mapmap::New() const {
  return new mapmap;
}

void mapmap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    levellimit_ = 0;
    if (has_advicelv()) {
      if (advicelv_ != &::google::protobuf::internal::kEmptyString) {
        advicelv_->clear();
      }
    }
    maptype_ = 0;
    clearancetime_ = 0;
    mapsubtype_ = 0;
    mappkmode_ = 0;
    pklock_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pk_ = 0;
    killvalue_ = 0;
    bangroup_ = 0;
    revivetime_ = 0;
    mapwide_ = 0;
    mapheight_ = 0;
    if (has_mapresources()) {
      if (mapresources_ != &::google::protobuf::internal::kEmptyString) {
        mapresources_->clear();
      }
    }
    reviveskill_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    reviveinplacetype_ = 0;
    ishangup_ = 0;
    itemdroptype_ = 0;
    if (has_itemdropid()) {
      if (itemdropid_ != &::google::protobuf::internal::kEmptyString) {
        itemdropid_->clear();
      }
    }
    linkoffline_ = GOOGLE_LONGLONG(0);
    banonhook_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mapmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelLimit;
        break;
      }

      // optional int32 levelLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_adviceLv;
        break;
      }

      // optional string adviceLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adviceLv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advicelv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->advicelv().data(), this->advicelv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapType;
        break;
      }

      // optional int32 mapType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clearanceTime;
        break;
      }

      // optional int32 clearanceTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearanceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearancetime_)));
          set_has_clearancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mapSubType;
        break;
      }

      // optional int32 mapSubType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapsubtype_)));
          set_has_mapsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mapPkmode;
        break;
      }

      // optional int32 mapPkmode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapPkmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mappkmode_)));
          set_has_mappkmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pklock;
        break;
      }

      // optional int32 pklock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pklock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pklock_)));
          set_has_pklock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pk;
        break;
      }

      // optional int32 pk = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_)));
          set_has_pk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_killValue;
        break;
      }

      // optional int32 killValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killvalue_)));
          set_has_killvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_BanGroup;
        break;
      }

      // optional int32 BanGroup = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BanGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bangroup_)));
          set_has_bangroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_reviveTime;
        break;
      }

      // optional int32 reviveTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivetime_)));
          set_has_revivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mapWide;
        break;
      }

      // optional int32 mapWide = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapWide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapwide_)));
          set_has_mapwide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mapHeight;
        break;
      }

      // optional int32 mapHeight = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapheight_)));
          set_has_mapheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mapResources;
        break;
      }

      // optional string mapResources = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapResources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapresources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapresources().data(), this->mapresources().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_reviveSkill;
        break;
      }

      // optional int64 reviveSkill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reviveskill_)));
          set_has_reviveskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_reviveInPlaceType;
        break;
      }

      // optional int32 reviveInPlaceType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveInPlaceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reviveinplacetype_)));
          set_has_reviveinplacetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isHangUp;
        break;
      }

      // optional int32 isHangUp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHangUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishangup_)));
          set_has_ishangup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_itemDropType;
        break;
      }

      // optional int32 itemDropType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemDropType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemdroptype_)));
          set_has_itemdroptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_itemDropID;
        break;
      }

      // optional string itemDropID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemDropID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemdropid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemdropid().data(), this->itemdropid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_linkOffLine;
        break;
      }

      // optional int64 linkOffLine = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkOffLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &linkoffline_)));
          set_has_linkoffline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_banOnHook;
        break;
      }

      // optional int32 banOnHook = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banOnHook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banonhook_)));
          set_has_banonhook();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mapmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mapid(), output);
  }

  // optional int32 levelLimit = 2;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levellimit(), output);
  }

  // optional string adviceLv = 3;
  if (has_advicelv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->advicelv().data(), this->advicelv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->advicelv(), output);
  }

  // optional int32 mapType = 4;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maptype(), output);
  }

  // optional int32 clearanceTime = 5;
  if (has_clearancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clearancetime(), output);
  }

  // optional int32 mapSubType = 6;
  if (has_mapsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mapsubtype(), output);
  }

  // optional int32 mapPkmode = 7;
  if (has_mappkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mappkmode(), output);
  }

  // optional int32 pklock = 8;
  if (has_pklock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pklock(), output);
  }

  // optional int32 pk = 9;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pk(), output);
  }

  // optional int32 killValue = 10;
  if (has_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->killvalue(), output);
  }

  // optional int32 BanGroup = 11;
  if (has_bangroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bangroup(), output);
  }

  // optional int32 reviveTime = 12;
  if (has_revivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->revivetime(), output);
  }

  // optional int32 mapWide = 13;
  if (has_mapwide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mapwide(), output);
  }

  // optional int32 mapHeight = 14;
  if (has_mapheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mapheight(), output);
  }

  // optional string mapResources = 15;
  if (has_mapresources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapresources().data(), this->mapresources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->mapresources(), output);
  }

  // optional int64 reviveSkill = 16;
  if (has_reviveskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->reviveskill(), output);
  }

  // optional int32 reviveInPlaceType = 17;
  if (has_reviveinplacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reviveinplacetype(), output);
  }

  // optional int32 isHangUp = 18;
  if (has_ishangup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ishangup(), output);
  }

  // optional int32 itemDropType = 19;
  if (has_itemdroptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->itemdroptype(), output);
  }

  // optional string itemDropID = 20;
  if (has_itemdropid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemdropid().data(), this->itemdropid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->itemdropid(), output);
  }

  // optional int64 linkOffLine = 21;
  if (has_linkoffline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->linkoffline(), output);
  }

  // optional int32 banOnHook = 22;
  if (has_banonhook()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->banonhook(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mapmap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mapid(), target);
  }

  // optional int32 levelLimit = 2;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levellimit(), target);
  }

  // optional string adviceLv = 3;
  if (has_advicelv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->advicelv().data(), this->advicelv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->advicelv(), target);
  }

  // optional int32 mapType = 4;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maptype(), target);
  }

  // optional int32 clearanceTime = 5;
  if (has_clearancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clearancetime(), target);
  }

  // optional int32 mapSubType = 6;
  if (has_mapsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mapsubtype(), target);
  }

  // optional int32 mapPkmode = 7;
  if (has_mappkmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mappkmode(), target);
  }

  // optional int32 pklock = 8;
  if (has_pklock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pklock(), target);
  }

  // optional int32 pk = 9;
  if (has_pk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pk(), target);
  }

  // optional int32 killValue = 10;
  if (has_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->killvalue(), target);
  }

  // optional int32 BanGroup = 11;
  if (has_bangroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bangroup(), target);
  }

  // optional int32 reviveTime = 12;
  if (has_revivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->revivetime(), target);
  }

  // optional int32 mapWide = 13;
  if (has_mapwide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mapwide(), target);
  }

  // optional int32 mapHeight = 14;
  if (has_mapheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mapheight(), target);
  }

  // optional string mapResources = 15;
  if (has_mapresources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapresources().data(), this->mapresources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->mapresources(), target);
  }

  // optional int64 reviveSkill = 16;
  if (has_reviveskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->reviveskill(), target);
  }

  // optional int32 reviveInPlaceType = 17;
  if (has_reviveinplacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->reviveinplacetype(), target);
  }

  // optional int32 isHangUp = 18;
  if (has_ishangup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ishangup(), target);
  }

  // optional int32 itemDropType = 19;
  if (has_itemdroptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->itemdroptype(), target);
  }

  // optional string itemDropID = 20;
  if (has_itemdropid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemdropid().data(), this->itemdropid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->itemdropid(), target);
  }

  // optional int64 linkOffLine = 21;
  if (has_linkoffline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->linkoffline(), target);
  }

  // optional int32 banOnHook = 22;
  if (has_banonhook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->banonhook(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mapmap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 levelLimit = 2;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

    // optional string adviceLv = 3;
    if (has_advicelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advicelv());
    }

    // optional int32 mapType = 4;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptype());
    }

    // optional int32 clearanceTime = 5;
    if (has_clearancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clearancetime());
    }

    // optional int32 mapSubType = 6;
    if (has_mapsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapsubtype());
    }

    // optional int32 mapPkmode = 7;
    if (has_mappkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mappkmode());
    }

    // optional int32 pklock = 8;
    if (has_pklock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pklock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pk = 9;
    if (has_pk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk());
    }

    // optional int32 killValue = 10;
    if (has_killvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killvalue());
    }

    // optional int32 BanGroup = 11;
    if (has_bangroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bangroup());
    }

    // optional int32 reviveTime = 12;
    if (has_revivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivetime());
    }

    // optional int32 mapWide = 13;
    if (has_mapwide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapwide());
    }

    // optional int32 mapHeight = 14;
    if (has_mapheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapheight());
    }

    // optional string mapResources = 15;
    if (has_mapresources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapresources());
    }

    // optional int64 reviveSkill = 16;
    if (has_reviveskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reviveskill());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 reviveInPlaceType = 17;
    if (has_reviveinplacetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reviveinplacetype());
    }

    // optional int32 isHangUp = 18;
    if (has_ishangup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishangup());
    }

    // optional int32 itemDropType = 19;
    if (has_itemdroptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemdroptype());
    }

    // optional string itemDropID = 20;
    if (has_itemdropid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemdropid());
    }

    // optional int64 linkOffLine = 21;
    if (has_linkoffline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->linkoffline());
    }

    // optional int32 banOnHook = 22;
    if (has_banonhook()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banonhook());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mapmap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mapmap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mapmap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mapmap::MergeFrom(const mapmap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_advicelv()) {
      set_advicelv(from.advicelv());
    }
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
    if (from.has_clearancetime()) {
      set_clearancetime(from.clearancetime());
    }
    if (from.has_mapsubtype()) {
      set_mapsubtype(from.mapsubtype());
    }
    if (from.has_mappkmode()) {
      set_mappkmode(from.mappkmode());
    }
    if (from.has_pklock()) {
      set_pklock(from.pklock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pk()) {
      set_pk(from.pk());
    }
    if (from.has_killvalue()) {
      set_killvalue(from.killvalue());
    }
    if (from.has_bangroup()) {
      set_bangroup(from.bangroup());
    }
    if (from.has_revivetime()) {
      set_revivetime(from.revivetime());
    }
    if (from.has_mapwide()) {
      set_mapwide(from.mapwide());
    }
    if (from.has_mapheight()) {
      set_mapheight(from.mapheight());
    }
    if (from.has_mapresources()) {
      set_mapresources(from.mapresources());
    }
    if (from.has_reviveskill()) {
      set_reviveskill(from.reviveskill());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reviveinplacetype()) {
      set_reviveinplacetype(from.reviveinplacetype());
    }
    if (from.has_ishangup()) {
      set_ishangup(from.ishangup());
    }
    if (from.has_itemdroptype()) {
      set_itemdroptype(from.itemdroptype());
    }
    if (from.has_itemdropid()) {
      set_itemdropid(from.itemdropid());
    }
    if (from.has_linkoffline()) {
      set_linkoffline(from.linkoffline());
    }
    if (from.has_banonhook()) {
      set_banonhook(from.banonhook());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mapmap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapmap::CopyFrom(const mapmap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapmap::IsInitialized() const {

  return true;
}

void mapmap::Swap(mapmap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(advicelv_, other->advicelv_);
    std::swap(maptype_, other->maptype_);
    std::swap(clearancetime_, other->clearancetime_);
    std::swap(mapsubtype_, other->mapsubtype_);
    std::swap(mappkmode_, other->mappkmode_);
    std::swap(pklock_, other->pklock_);
    std::swap(pk_, other->pk_);
    std::swap(killvalue_, other->killvalue_);
    std::swap(bangroup_, other->bangroup_);
    std::swap(revivetime_, other->revivetime_);
    std::swap(mapwide_, other->mapwide_);
    std::swap(mapheight_, other->mapheight_);
    std::swap(mapresources_, other->mapresources_);
    std::swap(reviveskill_, other->reviveskill_);
    std::swap(reviveinplacetype_, other->reviveinplacetype_);
    std::swap(ishangup_, other->ishangup_);
    std::swap(itemdroptype_, other->itemdroptype_);
    std::swap(itemdropid_, other->itemdropid_);
    std::swap(linkoffline_, other->linkoffline_);
    std::swap(banonhook_, other->banonhook_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mapmap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mapmap_descriptor_;
  metadata.reflection = mapmap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mapmap::kMapmapListFieldNumber;
#endif  // !_MSC_VER

Sheet_mapmap::Sheet_mapmap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mapmap::InitAsDefaultInstance() {
}

Sheet_mapmap::Sheet_mapmap(const Sheet_mapmap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mapmap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mapmap::~Sheet_mapmap() {
  SharedDtor();
}

void Sheet_mapmap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mapmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mapmap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mapmap_descriptor_;
}

const Sheet_mapmap& Sheet_mapmap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Sheet_mapmap* Sheet_mapmap::default_instance_ = NULL;

Sheet_mapmap* Sheet_mapmap::New() const {
  return new Sheet_mapmap;
}

void Sheet_mapmap::Clear() {
  mapmap_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mapmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mapmap mapmap_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapmap_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapmap_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mapmap_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mapmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mapmap mapmap_List = 1;
  for (int i = 0; i < this->mapmap_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapmap_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mapmap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mapmap mapmap_List = 1;
  for (int i = 0; i < this->mapmap_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapmap_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mapmap::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mapmap mapmap_List = 1;
  total_size += 1 * this->mapmap_list_size();
  for (int i = 0; i < this->mapmap_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapmap_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mapmap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mapmap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mapmap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mapmap::MergeFrom(const Sheet_mapmap& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapmap_list_.MergeFrom(from.mapmap_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mapmap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mapmap::CopyFrom(const Sheet_mapmap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mapmap::IsInitialized() const {

  return true;
}

void Sheet_mapmap::Swap(Sheet_mapmap* other) {
  if (other != this) {
    mapmap_list_.Swap(&other->mapmap_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mapmap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mapmap_descriptor_;
  metadata.reflection = Sheet_mapmap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mapitemdrop::kItemDropIDFieldNumber;
const int mapitemdrop::kDropTypeFieldNumber;
const int mapitemdrop::kOddsFieldNumber;
const int mapitemdrop::kDropvalueaFieldNumber;
const int mapitemdrop::kDropvaluebFieldNumber;
const int mapitemdrop::kDropvaluecFieldNumber;
const int mapitemdrop::kDropvaluedFieldNumber;
const int mapitemdrop::kDropvalueeFieldNumber;
const int mapitemdrop::kDropvaluefFieldNumber;
#endif  // !_MSC_VER

mapitemdrop::mapitemdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mapitemdrop::InitAsDefaultInstance() {
}

mapitemdrop::mapitemdrop(const mapitemdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mapitemdrop::SharedCtor() {
  _cached_size_ = 0;
  itemdropid_ = 0;
  droptype_ = 0;
  odds_ = 0;
  dropvaluea_ = 0;
  dropvalueb_ = 0;
  dropvaluec_ = 0;
  dropvalued_ = 0;
  dropvaluee_ = 0;
  dropvaluef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mapitemdrop::~mapitemdrop() {
  SharedDtor();
}

void mapitemdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mapitemdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mapitemdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mapitemdrop_descriptor_;
}

const mapitemdrop& mapitemdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

mapitemdrop* mapitemdrop::default_instance_ = NULL;

mapitemdrop* mapitemdrop::New() const {
  return new mapitemdrop;
}

void mapitemdrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemdropid_ = 0;
    droptype_ = 0;
    odds_ = 0;
    dropvaluea_ = 0;
    dropvalueb_ = 0;
    dropvaluec_ = 0;
    dropvalued_ = 0;
    dropvaluee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dropvaluef_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mapitemdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemDropID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemdropid_)));
          set_has_itemdropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dropType;
        break;
      }

      // optional int32 dropType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &droptype_)));
          set_has_droptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_odds;
        break;
      }

      // optional int32 odds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odds_)));
          set_has_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dropvaluea;
        break;
      }

      // optional int32 dropvaluea = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropvaluea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropvaluea_)));
          set_has_dropvaluea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dropvalueb;
        break;
      }

      // optional int32 dropvalueb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropvalueb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropvalueb_)));
          set_has_dropvalueb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dropvaluec;
        break;
      }

      // optional int32 dropvaluec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropvaluec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropvaluec_)));
          set_has_dropvaluec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dropvalued;
        break;
      }

      // optional int32 dropvalued = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropvalued:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropvalued_)));
          set_has_dropvalued();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dropvaluee;
        break;
      }

      // optional int32 dropvaluee = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropvaluee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropvaluee_)));
          set_has_dropvaluee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dropvaluef;
        break;
      }

      // optional int32 dropvaluef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropvaluef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropvaluef_)));
          set_has_dropvaluef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mapitemdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemDropID = 1;
  if (has_itemdropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemdropid(), output);
  }

  // optional int32 dropType = 2;
  if (has_droptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->droptype(), output);
  }

  // optional int32 odds = 3;
  if (has_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->odds(), output);
  }

  // optional int32 dropvaluea = 4;
  if (has_dropvaluea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dropvaluea(), output);
  }

  // optional int32 dropvalueb = 5;
  if (has_dropvalueb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dropvalueb(), output);
  }

  // optional int32 dropvaluec = 6;
  if (has_dropvaluec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dropvaluec(), output);
  }

  // optional int32 dropvalued = 7;
  if (has_dropvalued()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dropvalued(), output);
  }

  // optional int32 dropvaluee = 8;
  if (has_dropvaluee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dropvaluee(), output);
  }

  // optional int32 dropvaluef = 9;
  if (has_dropvaluef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dropvaluef(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mapitemdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemDropID = 1;
  if (has_itemdropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemdropid(), target);
  }

  // optional int32 dropType = 2;
  if (has_droptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->droptype(), target);
  }

  // optional int32 odds = 3;
  if (has_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->odds(), target);
  }

  // optional int32 dropvaluea = 4;
  if (has_dropvaluea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dropvaluea(), target);
  }

  // optional int32 dropvalueb = 5;
  if (has_dropvalueb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dropvalueb(), target);
  }

  // optional int32 dropvaluec = 6;
  if (has_dropvaluec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dropvaluec(), target);
  }

  // optional int32 dropvalued = 7;
  if (has_dropvalued()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dropvalued(), target);
  }

  // optional int32 dropvaluee = 8;
  if (has_dropvaluee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dropvaluee(), target);
  }

  // optional int32 dropvaluef = 9;
  if (has_dropvaluef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dropvaluef(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mapitemdrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemDropID = 1;
    if (has_itemdropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemdropid());
    }

    // optional int32 dropType = 2;
    if (has_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droptype());
    }

    // optional int32 odds = 3;
    if (has_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->odds());
    }

    // optional int32 dropvaluea = 4;
    if (has_dropvaluea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropvaluea());
    }

    // optional int32 dropvalueb = 5;
    if (has_dropvalueb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropvalueb());
    }

    // optional int32 dropvaluec = 6;
    if (has_dropvaluec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropvaluec());
    }

    // optional int32 dropvalued = 7;
    if (has_dropvalued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropvalued());
    }

    // optional int32 dropvaluee = 8;
    if (has_dropvaluee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropvaluee());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dropvaluef = 9;
    if (has_dropvaluef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropvaluef());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mapitemdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mapitemdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mapitemdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mapitemdrop::MergeFrom(const mapitemdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemdropid()) {
      set_itemdropid(from.itemdropid());
    }
    if (from.has_droptype()) {
      set_droptype(from.droptype());
    }
    if (from.has_odds()) {
      set_odds(from.odds());
    }
    if (from.has_dropvaluea()) {
      set_dropvaluea(from.dropvaluea());
    }
    if (from.has_dropvalueb()) {
      set_dropvalueb(from.dropvalueb());
    }
    if (from.has_dropvaluec()) {
      set_dropvaluec(from.dropvaluec());
    }
    if (from.has_dropvalued()) {
      set_dropvalued(from.dropvalued());
    }
    if (from.has_dropvaluee()) {
      set_dropvaluee(from.dropvaluee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dropvaluef()) {
      set_dropvaluef(from.dropvaluef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mapitemdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapitemdrop::CopyFrom(const mapitemdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapitemdrop::IsInitialized() const {

  return true;
}

void mapitemdrop::Swap(mapitemdrop* other) {
  if (other != this) {
    std::swap(itemdropid_, other->itemdropid_);
    std::swap(droptype_, other->droptype_);
    std::swap(odds_, other->odds_);
    std::swap(dropvaluea_, other->dropvaluea_);
    std::swap(dropvalueb_, other->dropvalueb_);
    std::swap(dropvaluec_, other->dropvaluec_);
    std::swap(dropvalued_, other->dropvalued_);
    std::swap(dropvaluee_, other->dropvaluee_);
    std::swap(dropvaluef_, other->dropvaluef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mapitemdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mapitemdrop_descriptor_;
  metadata.reflection = mapitemdrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mapitemdrop::kMapitemdropListFieldNumber;
#endif  // !_MSC_VER

Sheet_mapitemdrop::Sheet_mapitemdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mapitemdrop::InitAsDefaultInstance() {
}

Sheet_mapitemdrop::Sheet_mapitemdrop(const Sheet_mapitemdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mapitemdrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mapitemdrop::~Sheet_mapitemdrop() {
  SharedDtor();
}

void Sheet_mapitemdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mapitemdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mapitemdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mapitemdrop_descriptor_;
}

const Sheet_mapitemdrop& Sheet_mapitemdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Sheet_mapitemdrop* Sheet_mapitemdrop::default_instance_ = NULL;

Sheet_mapitemdrop* Sheet_mapitemdrop::New() const {
  return new Sheet_mapitemdrop;
}

void Sheet_mapitemdrop::Clear() {
  mapitemdrop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mapitemdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mapitemdrop mapitemdrop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapitemdrop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapitemdrop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mapitemdrop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mapitemdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mapitemdrop mapitemdrop_List = 1;
  for (int i = 0; i < this->mapitemdrop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapitemdrop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mapitemdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mapitemdrop mapitemdrop_List = 1;
  for (int i = 0; i < this->mapitemdrop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapitemdrop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mapitemdrop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mapitemdrop mapitemdrop_List = 1;
  total_size += 1 * this->mapitemdrop_list_size();
  for (int i = 0; i < this->mapitemdrop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapitemdrop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mapitemdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mapitemdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mapitemdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mapitemdrop::MergeFrom(const Sheet_mapitemdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapitemdrop_list_.MergeFrom(from.mapitemdrop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mapitemdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mapitemdrop::CopyFrom(const Sheet_mapitemdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mapitemdrop::IsInitialized() const {

  return true;
}

void Sheet_mapitemdrop::Swap(Sheet_mapitemdrop* other) {
  if (other != this) {
    mapitemdrop_list_.Swap(&other->mapitemdrop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mapitemdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mapitemdrop_descriptor_;
  metadata.reflection = Sheet_mapitemdrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mapdestroyitem::kDestroyitemIDFieldNumber;
#endif  // !_MSC_VER

mapdestroyitem::mapdestroyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mapdestroyitem::InitAsDefaultInstance() {
}

mapdestroyitem::mapdestroyitem(const mapdestroyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mapdestroyitem::SharedCtor() {
  _cached_size_ = 0;
  destroyitemid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mapdestroyitem::~mapdestroyitem() {
  SharedDtor();
}

void mapdestroyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mapdestroyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mapdestroyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mapdestroyitem_descriptor_;
}

const mapdestroyitem& mapdestroyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

mapdestroyitem* mapdestroyitem::default_instance_ = NULL;

mapdestroyitem* mapdestroyitem::New() const {
  return new mapdestroyitem;
}

void mapdestroyitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destroyitemid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mapdestroyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 destroyitemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &destroyitemid_)));
          set_has_destroyitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mapdestroyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 destroyitemID = 1;
  if (has_destroyitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->destroyitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mapdestroyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 destroyitemID = 1;
  if (has_destroyitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->destroyitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mapdestroyitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 destroyitemID = 1;
    if (has_destroyitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->destroyitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mapdestroyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mapdestroyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mapdestroyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mapdestroyitem::MergeFrom(const mapdestroyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroyitemid()) {
      set_destroyitemid(from.destroyitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mapdestroyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapdestroyitem::CopyFrom(const mapdestroyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapdestroyitem::IsInitialized() const {

  return true;
}

void mapdestroyitem::Swap(mapdestroyitem* other) {
  if (other != this) {
    std::swap(destroyitemid_, other->destroyitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mapdestroyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mapdestroyitem_descriptor_;
  metadata.reflection = mapdestroyitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mapdestroyitem::kMapdestroyitemListFieldNumber;
#endif  // !_MSC_VER

Sheet_mapdestroyitem::Sheet_mapdestroyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mapdestroyitem::InitAsDefaultInstance() {
}

Sheet_mapdestroyitem::Sheet_mapdestroyitem(const Sheet_mapdestroyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mapdestroyitem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mapdestroyitem::~Sheet_mapdestroyitem() {
  SharedDtor();
}

void Sheet_mapdestroyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mapdestroyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mapdestroyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mapdestroyitem_descriptor_;
}

const Sheet_mapdestroyitem& Sheet_mapdestroyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Sheet_mapdestroyitem* Sheet_mapdestroyitem::default_instance_ = NULL;

Sheet_mapdestroyitem* Sheet_mapdestroyitem::New() const {
  return new Sheet_mapdestroyitem;
}

void Sheet_mapdestroyitem::Clear() {
  mapdestroyitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mapdestroyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mapdestroyitem mapdestroyitem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapdestroyitem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapdestroyitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mapdestroyitem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mapdestroyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mapdestroyitem mapdestroyitem_List = 1;
  for (int i = 0; i < this->mapdestroyitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapdestroyitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mapdestroyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mapdestroyitem mapdestroyitem_List = 1;
  for (int i = 0; i < this->mapdestroyitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapdestroyitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mapdestroyitem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mapdestroyitem mapdestroyitem_List = 1;
  total_size += 1 * this->mapdestroyitem_list_size();
  for (int i = 0; i < this->mapdestroyitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapdestroyitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mapdestroyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mapdestroyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mapdestroyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mapdestroyitem::MergeFrom(const Sheet_mapdestroyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapdestroyitem_list_.MergeFrom(from.mapdestroyitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mapdestroyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mapdestroyitem::CopyFrom(const Sheet_mapdestroyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mapdestroyitem::IsInitialized() const {

  return true;
}

void Sheet_mapdestroyitem::Swap(Sheet_mapdestroyitem* other) {
  if (other != this) {
    mapdestroyitem_list_.Swap(&other->mapdestroyitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mapdestroyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mapdestroyitem_descriptor_;
  metadata.reflection = Sheet_mapdestroyitem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
