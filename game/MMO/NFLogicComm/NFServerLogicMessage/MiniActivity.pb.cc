// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MiniActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MiniActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GetGodRelicsInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGodRelicsInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGodRelicsInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGodRelicsInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGodRelecsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGodRelecsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGodRelicsTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGodRelicsTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGodRelicsTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGodRelicsTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGodRelecsGroupTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGodRelecsGroupTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGodRelecsGroupTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGodRelecsGroupTaskRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MiniActivity_2eproto() {
  protobuf_AddDesc_MiniActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MiniActivity.proto");
  GOOGLE_CHECK(file != NULL);
  GetGodRelicsInfoReq_descriptor_ = file->message_type(0);
  static const int GetGodRelicsInfoReq_offsets_[1] = {
  };
  GetGodRelicsInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGodRelicsInfoReq_descriptor_,
      GetGodRelicsInfoReq::default_instance_,
      GetGodRelicsInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGodRelicsInfoReq));
  GetGodRelicsInfoRsp_descriptor_ = file->message_type(1);
  static const int GetGodRelicsInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsInfoRsp, group_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsInfoRsp, cur_group_id_),
  };
  GetGodRelicsInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGodRelicsInfoRsp_descriptor_,
      GetGodRelicsInfoRsp::default_instance_,
      GetGodRelicsInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGodRelicsInfoRsp));
  UpdateGodRelecsNotify_descriptor_ = file->message_type(2);
  static const int UpdateGodRelecsNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGodRelecsNotify, group_data_),
  };
  UpdateGodRelecsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGodRelecsNotify_descriptor_,
      UpdateGodRelecsNotify::default_instance_,
      UpdateGodRelecsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGodRelecsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGodRelecsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGodRelecsNotify));
  GetGodRelicsTaskRewardReq_descriptor_ = file->message_type(3);
  static const int GetGodRelicsTaskRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardReq, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardReq, task_id_),
  };
  GetGodRelicsTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGodRelicsTaskRewardReq_descriptor_,
      GetGodRelicsTaskRewardReq::default_instance_,
      GetGodRelicsTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGodRelicsTaskRewardReq));
  GetGodRelicsTaskRewardRsp_descriptor_ = file->message_type(4);
  static const int GetGodRelicsTaskRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardRsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardRsp, group_data_),
  };
  GetGodRelicsTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGodRelicsTaskRewardRsp_descriptor_,
      GetGodRelicsTaskRewardRsp::default_instance_,
      GetGodRelicsTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelicsTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGodRelicsTaskRewardRsp));
  GetGodRelecsGroupTaskRewardReq_descriptor_ = file->message_type(5);
  static const int GetGodRelecsGroupTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardReq, group_id_),
  };
  GetGodRelecsGroupTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGodRelecsGroupTaskRewardReq_descriptor_,
      GetGodRelecsGroupTaskRewardReq::default_instance_,
      GetGodRelecsGroupTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGodRelecsGroupTaskRewardReq));
  GetGodRelecsGroupTaskRewardRsp_descriptor_ = file->message_type(6);
  static const int GetGodRelecsGroupTaskRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardRsp, old_group_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardRsp, new_group_data_),
  };
  GetGodRelecsGroupTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGodRelecsGroupTaskRewardRsp_descriptor_,
      GetGodRelecsGroupTaskRewardRsp::default_instance_,
      GetGodRelecsGroupTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGodRelecsGroupTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGodRelecsGroupTaskRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MiniActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGodRelicsInfoReq_descriptor_, &GetGodRelicsInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGodRelicsInfoRsp_descriptor_, &GetGodRelicsInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGodRelecsNotify_descriptor_, &UpdateGodRelecsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGodRelicsTaskRewardReq_descriptor_, &GetGodRelicsTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGodRelicsTaskRewardRsp_descriptor_, &GetGodRelicsTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGodRelecsGroupTaskRewardReq_descriptor_, &GetGodRelecsGroupTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGodRelecsGroupTaskRewardRsp_descriptor_, &GetGodRelecsGroupTaskRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MiniActivity_2eproto() {
  delete GetGodRelicsInfoReq::default_instance_;
  delete GetGodRelicsInfoReq_reflection_;
  delete GetGodRelicsInfoRsp::default_instance_;
  delete GetGodRelicsInfoRsp_reflection_;
  delete UpdateGodRelecsNotify::default_instance_;
  delete UpdateGodRelecsNotify_reflection_;
  delete GetGodRelicsTaskRewardReq::default_instance_;
  delete GetGodRelicsTaskRewardReq_reflection_;
  delete GetGodRelicsTaskRewardRsp::default_instance_;
  delete GetGodRelicsTaskRewardRsp_reflection_;
  delete GetGodRelecsGroupTaskRewardReq::default_instance_;
  delete GetGodRelecsGroupTaskRewardReq_reflection_;
  delete GetGodRelecsGroupTaskRewardRsp::default_instance_;
  delete GetGodRelecsGroupTaskRewardRsp_reflection_;
}

void protobuf_AddDesc_MiniActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MiniActivity.proto\022\010proto_ff\032\tCom.prot"
    "o\032\017ComDefine.proto\"\025\n\023GetGodRelicsInfoRe"
    "q\"b\n\023GetGodRelicsInfoRsp\0225\n\ngroup_data\030\001"
    " \003(\0132!.proto_ff.GodRelicsTaskGroupEntry\022"
    "\024\n\014cur_group_id\030\002 \001(\003\"N\n\025UpdateGodRelecs"
    "Notify\0225\n\ngroup_data\030\001 \001(\0132!.proto_ff.Go"
    "dRelicsTaskGroupEntry\">\n\031GetGodRelicsTas"
    "kRewardReq\022\020\n\010group_id\030\001 \001(\003\022\017\n\007task_id\030"
    "\002 \001(\003\"u\n\031GetGodRelicsTaskRewardRsp\022\020\n\010re"
    "t_code\030\001 \001(\003\022\017\n\007task_id\030\002 \001(\003\0225\n\ngroup_d"
    "ata\030\003 \001(\0132!.proto_ff.GodRelicsTaskGroupE"
    "ntry\"2\n\036GetGodRelecsGroupTaskRewardReq\022\020"
    "\n\010group_id\030\001 \001(\003\"\250\001\n\036GetGodRelecsGroupTa"
    "skRewardRsp\022\020\n\010ret_code\030\001 \001(\003\0229\n\016old_gro"
    "up_data\030\002 \001(\0132!.proto_ff.GodRelicsTaskGr"
    "oupEntry\0229\n\016new_group_data\030\003 \001(\0132!.proto"
    "_ff.GodRelicsTaskGroupEntry", 667);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MiniActivity.proto", &protobuf_RegisterTypes);
  GetGodRelicsInfoReq::default_instance_ = new GetGodRelicsInfoReq();
  GetGodRelicsInfoRsp::default_instance_ = new GetGodRelicsInfoRsp();
  UpdateGodRelecsNotify::default_instance_ = new UpdateGodRelecsNotify();
  GetGodRelicsTaskRewardReq::default_instance_ = new GetGodRelicsTaskRewardReq();
  GetGodRelicsTaskRewardRsp::default_instance_ = new GetGodRelicsTaskRewardRsp();
  GetGodRelecsGroupTaskRewardReq::default_instance_ = new GetGodRelecsGroupTaskRewardReq();
  GetGodRelecsGroupTaskRewardRsp::default_instance_ = new GetGodRelecsGroupTaskRewardRsp();
  GetGodRelicsInfoReq::default_instance_->InitAsDefaultInstance();
  GetGodRelicsInfoRsp::default_instance_->InitAsDefaultInstance();
  UpdateGodRelecsNotify::default_instance_->InitAsDefaultInstance();
  GetGodRelicsTaskRewardReq::default_instance_->InitAsDefaultInstance();
  GetGodRelicsTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  GetGodRelecsGroupTaskRewardReq::default_instance_->InitAsDefaultInstance();
  GetGodRelecsGroupTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MiniActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MiniActivity_2eproto {
  StaticDescriptorInitializer_MiniActivity_2eproto() {
    protobuf_AddDesc_MiniActivity_2eproto();
  }
} static_descriptor_initializer_MiniActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGodRelicsInfoReq::GetGodRelicsInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGodRelicsInfoReq::InitAsDefaultInstance() {
}

GetGodRelicsInfoReq::GetGodRelicsInfoReq(const GetGodRelicsInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGodRelicsInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGodRelicsInfoReq::~GetGodRelicsInfoReq() {
  SharedDtor();
}

void GetGodRelicsInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGodRelicsInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGodRelicsInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGodRelicsInfoReq_descriptor_;
}

const GetGodRelicsInfoReq& GetGodRelicsInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

GetGodRelicsInfoReq* GetGodRelicsInfoReq::default_instance_ = NULL;

GetGodRelicsInfoReq* GetGodRelicsInfoReq::New() const {
  return new GetGodRelicsInfoReq;
}

void GetGodRelicsInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGodRelicsInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetGodRelicsInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGodRelicsInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGodRelicsInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGodRelicsInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGodRelicsInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGodRelicsInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGodRelicsInfoReq::MergeFrom(const GetGodRelicsInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGodRelicsInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGodRelicsInfoReq::CopyFrom(const GetGodRelicsInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGodRelicsInfoReq::IsInitialized() const {

  return true;
}

void GetGodRelicsInfoReq::Swap(GetGodRelicsInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGodRelicsInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGodRelicsInfoReq_descriptor_;
  metadata.reflection = GetGodRelicsInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGodRelicsInfoRsp::kGroupDataFieldNumber;
const int GetGodRelicsInfoRsp::kCurGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGodRelicsInfoRsp::GetGodRelicsInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGodRelicsInfoRsp::InitAsDefaultInstance() {
}

GetGodRelicsInfoRsp::GetGodRelicsInfoRsp(const GetGodRelicsInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGodRelicsInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  cur_group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGodRelicsInfoRsp::~GetGodRelicsInfoRsp() {
  SharedDtor();
}

void GetGodRelicsInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGodRelicsInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGodRelicsInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGodRelicsInfoRsp_descriptor_;
}

const GetGodRelicsInfoRsp& GetGodRelicsInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

GetGodRelicsInfoRsp* GetGodRelicsInfoRsp::default_instance_ = NULL;

GetGodRelicsInfoRsp* GetGodRelicsInfoRsp::New() const {
  return new GetGodRelicsInfoRsp;
}

void GetGodRelicsInfoRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_group_id_ = GOOGLE_LONGLONG(0);
  }
  group_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGodRelicsInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_data;
        if (input->ExpectTag(16)) goto parse_cur_group_id;
        break;
      }

      // optional int64 cur_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_group_id_)));
          set_has_cur_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGodRelicsInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  for (int i = 0; i < this->group_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_data(i), output);
  }

  // optional int64 cur_group_id = 2;
  if (has_cur_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cur_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGodRelicsInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  for (int i = 0; i < this->group_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_data(i), target);
  }

  // optional int64 cur_group_id = 2;
  if (has_cur_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cur_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGodRelicsInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 cur_group_id = 2;
    if (has_cur_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_group_id());
    }

  }
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  total_size += 1 * this->group_data_size();
  for (int i = 0; i < this->group_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGodRelicsInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGodRelicsInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGodRelicsInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGodRelicsInfoRsp::MergeFrom(const GetGodRelicsInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_data_.MergeFrom(from.group_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_group_id()) {
      set_cur_group_id(from.cur_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGodRelicsInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGodRelicsInfoRsp::CopyFrom(const GetGodRelicsInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGodRelicsInfoRsp::IsInitialized() const {

  return true;
}

void GetGodRelicsInfoRsp::Swap(GetGodRelicsInfoRsp* other) {
  if (other != this) {
    group_data_.Swap(&other->group_data_);
    std::swap(cur_group_id_, other->cur_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGodRelicsInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGodRelicsInfoRsp_descriptor_;
  metadata.reflection = GetGodRelicsInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGodRelecsNotify::kGroupDataFieldNumber;
#endif  // !_MSC_VER

UpdateGodRelecsNotify::UpdateGodRelecsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGodRelecsNotify::InitAsDefaultInstance() {
  group_data_ = const_cast< ::proto_ff::GodRelicsTaskGroupEntry*>(&::proto_ff::GodRelicsTaskGroupEntry::default_instance());
}

UpdateGodRelecsNotify::UpdateGodRelecsNotify(const UpdateGodRelecsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGodRelecsNotify::SharedCtor() {
  _cached_size_ = 0;
  group_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGodRelecsNotify::~UpdateGodRelecsNotify() {
  SharedDtor();
}

void UpdateGodRelecsNotify::SharedDtor() {
  if (this != default_instance_) {
    delete group_data_;
  }
}

void UpdateGodRelecsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGodRelecsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGodRelecsNotify_descriptor_;
}

const UpdateGodRelecsNotify& UpdateGodRelecsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

UpdateGodRelecsNotify* UpdateGodRelecsNotify::default_instance_ = NULL;

UpdateGodRelecsNotify* UpdateGodRelecsNotify::New() const {
  return new UpdateGodRelecsNotify;
}

void UpdateGodRelecsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_data()) {
      if (group_data_ != NULL) group_data_->::proto_ff::GodRelicsTaskGroupEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGodRelecsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateGodRelecsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  if (has_group_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGodRelecsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  if (has_group_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGodRelecsNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
    if (has_group_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGodRelecsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGodRelecsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGodRelecsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGodRelecsNotify::MergeFrom(const UpdateGodRelecsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_data()) {
      mutable_group_data()->::proto_ff::GodRelicsTaskGroupEntry::MergeFrom(from.group_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGodRelecsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGodRelecsNotify::CopyFrom(const UpdateGodRelecsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGodRelecsNotify::IsInitialized() const {

  return true;
}

void UpdateGodRelecsNotify::Swap(UpdateGodRelecsNotify* other) {
  if (other != this) {
    std::swap(group_data_, other->group_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGodRelecsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGodRelecsNotify_descriptor_;
  metadata.reflection = UpdateGodRelecsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGodRelicsTaskRewardReq::kGroupIdFieldNumber;
const int GetGodRelicsTaskRewardReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

GetGodRelicsTaskRewardReq::GetGodRelicsTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGodRelicsTaskRewardReq::InitAsDefaultInstance() {
}

GetGodRelicsTaskRewardReq::GetGodRelicsTaskRewardReq(const GetGodRelicsTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGodRelicsTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  task_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGodRelicsTaskRewardReq::~GetGodRelicsTaskRewardReq() {
  SharedDtor();
}

void GetGodRelicsTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGodRelicsTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGodRelicsTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGodRelicsTaskRewardReq_descriptor_;
}

const GetGodRelicsTaskRewardReq& GetGodRelicsTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

GetGodRelicsTaskRewardReq* GetGodRelicsTaskRewardReq::default_instance_ = NULL;

GetGodRelicsTaskRewardReq* GetGodRelicsTaskRewardReq::New() const {
  return new GetGodRelicsTaskRewardReq;
}

void GetGodRelicsTaskRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_LONGLONG(0);
    task_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGodRelicsTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional int64 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGodRelicsTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // optional int64 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGodRelicsTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->group_id(), target);
  }

  // optional int64 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGodRelicsTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

    // optional int64 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGodRelicsTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGodRelicsTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGodRelicsTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGodRelicsTaskRewardReq::MergeFrom(const GetGodRelicsTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGodRelicsTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGodRelicsTaskRewardReq::CopyFrom(const GetGodRelicsTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGodRelicsTaskRewardReq::IsInitialized() const {

  return true;
}

void GetGodRelicsTaskRewardReq::Swap(GetGodRelicsTaskRewardReq* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGodRelicsTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGodRelicsTaskRewardReq_descriptor_;
  metadata.reflection = GetGodRelicsTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGodRelicsTaskRewardRsp::kRetCodeFieldNumber;
const int GetGodRelicsTaskRewardRsp::kTaskIdFieldNumber;
const int GetGodRelicsTaskRewardRsp::kGroupDataFieldNumber;
#endif  // !_MSC_VER

GetGodRelicsTaskRewardRsp::GetGodRelicsTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGodRelicsTaskRewardRsp::InitAsDefaultInstance() {
  group_data_ = const_cast< ::proto_ff::GodRelicsTaskGroupEntry*>(&::proto_ff::GodRelicsTaskGroupEntry::default_instance());
}

GetGodRelicsTaskRewardRsp::GetGodRelicsTaskRewardRsp(const GetGodRelicsTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGodRelicsTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = GOOGLE_LONGLONG(0);
  task_id_ = GOOGLE_LONGLONG(0);
  group_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGodRelicsTaskRewardRsp::~GetGodRelicsTaskRewardRsp() {
  SharedDtor();
}

void GetGodRelicsTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete group_data_;
  }
}

void GetGodRelicsTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGodRelicsTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGodRelicsTaskRewardRsp_descriptor_;
}

const GetGodRelicsTaskRewardRsp& GetGodRelicsTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

GetGodRelicsTaskRewardRsp* GetGodRelicsTaskRewardRsp::default_instance_ = NULL;

GetGodRelicsTaskRewardRsp* GetGodRelicsTaskRewardRsp::New() const {
  return new GetGodRelicsTaskRewardRsp;
}

void GetGodRelicsTaskRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = GOOGLE_LONGLONG(0);
    task_id_ = GOOGLE_LONGLONG(0);
    if (has_group_data()) {
      if (group_data_ != NULL) group_data_->::proto_ff::GodRelicsTaskGroupEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGodRelicsTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional int64 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_data;
        break;
      }

      // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGodRelicsTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ret_code(), output);
  }

  // optional int64 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->task_id(), output);
  }

  // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 3;
  if (has_group_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGodRelicsTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ret_code(), target);
  }

  // optional int64 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->task_id(), target);
  }

  // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 3;
  if (has_group_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGodRelicsTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_code());
    }

    // optional int64 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional .proto_ff.GodRelicsTaskGroupEntry group_data = 3;
    if (has_group_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGodRelicsTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGodRelicsTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGodRelicsTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGodRelicsTaskRewardRsp::MergeFrom(const GetGodRelicsTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_group_data()) {
      mutable_group_data()->::proto_ff::GodRelicsTaskGroupEntry::MergeFrom(from.group_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGodRelicsTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGodRelicsTaskRewardRsp::CopyFrom(const GetGodRelicsTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGodRelicsTaskRewardRsp::IsInitialized() const {

  return true;
}

void GetGodRelicsTaskRewardRsp::Swap(GetGodRelicsTaskRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(task_id_, other->task_id_);
    std::swap(group_data_, other->group_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGodRelicsTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGodRelicsTaskRewardRsp_descriptor_;
  metadata.reflection = GetGodRelicsTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGodRelecsGroupTaskRewardReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GetGodRelecsGroupTaskRewardReq::GetGodRelecsGroupTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGodRelecsGroupTaskRewardReq::InitAsDefaultInstance() {
}

GetGodRelecsGroupTaskRewardReq::GetGodRelecsGroupTaskRewardReq(const GetGodRelecsGroupTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGodRelecsGroupTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGodRelecsGroupTaskRewardReq::~GetGodRelecsGroupTaskRewardReq() {
  SharedDtor();
}

void GetGodRelecsGroupTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGodRelecsGroupTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGodRelecsGroupTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGodRelecsGroupTaskRewardReq_descriptor_;
}

const GetGodRelecsGroupTaskRewardReq& GetGodRelecsGroupTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

GetGodRelecsGroupTaskRewardReq* GetGodRelecsGroupTaskRewardReq::default_instance_ = NULL;

GetGodRelecsGroupTaskRewardReq* GetGodRelecsGroupTaskRewardReq::New() const {
  return new GetGodRelecsGroupTaskRewardReq;
}

void GetGodRelecsGroupTaskRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGodRelecsGroupTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGodRelecsGroupTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGodRelecsGroupTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGodRelecsGroupTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGodRelecsGroupTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGodRelecsGroupTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGodRelecsGroupTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGodRelecsGroupTaskRewardReq::MergeFrom(const GetGodRelecsGroupTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGodRelecsGroupTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGodRelecsGroupTaskRewardReq::CopyFrom(const GetGodRelecsGroupTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGodRelecsGroupTaskRewardReq::IsInitialized() const {

  return true;
}

void GetGodRelecsGroupTaskRewardReq::Swap(GetGodRelecsGroupTaskRewardReq* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGodRelecsGroupTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGodRelecsGroupTaskRewardReq_descriptor_;
  metadata.reflection = GetGodRelecsGroupTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGodRelecsGroupTaskRewardRsp::kRetCodeFieldNumber;
const int GetGodRelecsGroupTaskRewardRsp::kOldGroupDataFieldNumber;
const int GetGodRelecsGroupTaskRewardRsp::kNewGroupDataFieldNumber;
#endif  // !_MSC_VER

GetGodRelecsGroupTaskRewardRsp::GetGodRelecsGroupTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGodRelecsGroupTaskRewardRsp::InitAsDefaultInstance() {
  old_group_data_ = const_cast< ::proto_ff::GodRelicsTaskGroupEntry*>(&::proto_ff::GodRelicsTaskGroupEntry::default_instance());
  new_group_data_ = const_cast< ::proto_ff::GodRelicsTaskGroupEntry*>(&::proto_ff::GodRelicsTaskGroupEntry::default_instance());
}

GetGodRelecsGroupTaskRewardRsp::GetGodRelecsGroupTaskRewardRsp(const GetGodRelecsGroupTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGodRelecsGroupTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = GOOGLE_LONGLONG(0);
  old_group_data_ = NULL;
  new_group_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGodRelecsGroupTaskRewardRsp::~GetGodRelecsGroupTaskRewardRsp() {
  SharedDtor();
}

void GetGodRelecsGroupTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete old_group_data_;
    delete new_group_data_;
  }
}

void GetGodRelecsGroupTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGodRelecsGroupTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGodRelecsGroupTaskRewardRsp_descriptor_;
}

const GetGodRelecsGroupTaskRewardRsp& GetGodRelecsGroupTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MiniActivity_2eproto();
  return *default_instance_;
}

GetGodRelecsGroupTaskRewardRsp* GetGodRelecsGroupTaskRewardRsp::default_instance_ = NULL;

GetGodRelecsGroupTaskRewardRsp* GetGodRelecsGroupTaskRewardRsp::New() const {
  return new GetGodRelecsGroupTaskRewardRsp;
}

void GetGodRelecsGroupTaskRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = GOOGLE_LONGLONG(0);
    if (has_old_group_data()) {
      if (old_group_data_ != NULL) old_group_data_->::proto_ff::GodRelicsTaskGroupEntry::Clear();
    }
    if (has_new_group_data()) {
      if (new_group_data_ != NULL) new_group_data_->::proto_ff::GodRelicsTaskGroupEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGodRelecsGroupTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_group_data;
        break;
      }

      // optional .proto_ff.GodRelicsTaskGroupEntry old_group_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_group_data;
        break;
      }

      // optional .proto_ff.GodRelicsTaskGroupEntry new_group_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGodRelecsGroupTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ret_code(), output);
  }

  // optional .proto_ff.GodRelicsTaskGroupEntry old_group_data = 2;
  if (has_old_group_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_group_data(), output);
  }

  // optional .proto_ff.GodRelicsTaskGroupEntry new_group_data = 3;
  if (has_new_group_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_group_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGodRelecsGroupTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.GodRelicsTaskGroupEntry old_group_data = 2;
  if (has_old_group_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_group_data(), target);
  }

  // optional .proto_ff.GodRelicsTaskGroupEntry new_group_data = 3;
  if (has_new_group_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_group_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGodRelecsGroupTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_code());
    }

    // optional .proto_ff.GodRelicsTaskGroupEntry old_group_data = 2;
    if (has_old_group_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_group_data());
    }

    // optional .proto_ff.GodRelicsTaskGroupEntry new_group_data = 3;
    if (has_new_group_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_group_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGodRelecsGroupTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGodRelecsGroupTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGodRelecsGroupTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGodRelecsGroupTaskRewardRsp::MergeFrom(const GetGodRelecsGroupTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_old_group_data()) {
      mutable_old_group_data()->::proto_ff::GodRelicsTaskGroupEntry::MergeFrom(from.old_group_data());
    }
    if (from.has_new_group_data()) {
      mutable_new_group_data()->::proto_ff::GodRelicsTaskGroupEntry::MergeFrom(from.new_group_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGodRelecsGroupTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGodRelecsGroupTaskRewardRsp::CopyFrom(const GetGodRelecsGroupTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGodRelecsGroupTaskRewardRsp::IsInitialized() const {

  return true;
}

void GetGodRelecsGroupTaskRewardRsp::Swap(GetGodRelecsGroupTaskRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(old_group_data_, other->old_group_data_);
    std::swap(new_group_data_, other->new_group_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGodRelecsGroupTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGodRelecsGroupTaskRewardRsp_descriptor_;
  metadata.reflection = GetGodRelecsGroupTaskRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
