// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Monster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Monster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_MonsterMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MonsterMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MonsterMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MonsterDisplaySkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterDisplaySkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MonsterDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MonsterDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MonsterDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MonsterValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MonsterValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MonsterValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MonsterValueparam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterValueparam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MonsterValueparam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MonsterValueparam_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MonsterDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MonsterDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MonsterDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MonsterCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MonsterCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MonsterCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MonsterCollect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fMonster_2eproto() {
  protobuf_AddDesc_E_5fMonster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Monster.proto");
  GOOGLE_CHECK(file != NULL);
  E_MonsterMonster_descriptor_ = file->message_type(0);
  static const int E_MonsterMonster_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_monstername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_functionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_subprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_damageaddtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_monsterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_droplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_valueparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_hpsectionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_breedprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_breedmonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_breedmonlive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_itemcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_isbornactionon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_belongshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_dropgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_harmdrop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_joninper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_btnrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_btnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_drivepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_corpseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_lvsuppve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, m_powersuppve_),
  };
  E_MonsterMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterMonster_descriptor_,
      E_MonsterMonster::default_instance_,
      E_MonsterMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterMonster));
  Sheet_MonsterMonster_descriptor_ = file->message_type(1);
  static const int Sheet_MonsterMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterMonster, e_monstermonster_list_),
  };
  Sheet_MonsterMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MonsterMonster_descriptor_,
      Sheet_MonsterMonster::default_instance_,
      Sheet_MonsterMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MonsterMonster));
  E_MonsterDisplaySkillDesc_descriptor_ = file->message_type(2);
  static const int E_MonsterDisplaySkillDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplaySkillDesc, m_id_),
  };
  E_MonsterDisplaySkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterDisplaySkillDesc_descriptor_,
      E_MonsterDisplaySkillDesc::default_instance_,
      E_MonsterDisplaySkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplaySkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplaySkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterDisplaySkillDesc));
  E_MonsterDisplay_descriptor_ = file->message_type(3);
  static const int E_MonsterDisplay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_modeloffsetsx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_modeloffsetsy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_modelscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_modelradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_pathradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_collisionradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_rspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, m_skill_),
  };
  E_MonsterDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterDisplay_descriptor_,
      E_MonsterDisplay::default_instance_,
      E_MonsterDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterDisplay));
  Sheet_MonsterDisplay_descriptor_ = file->message_type(4);
  static const int Sheet_MonsterDisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterDisplay, e_monsterdisplay_list_),
  };
  Sheet_MonsterDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MonsterDisplay_descriptor_,
      Sheet_MonsterDisplay::default_instance_,
      Sheet_MonsterDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MonsterDisplay));
  E_MonsterValue_descriptor_ = file->message_type(5);
  static const int E_MonsterValue_offsets_[75] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_monsterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_brk_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_five_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_five_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_thump_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_thump_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_sky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_sky_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_sky_redu_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_sky_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_kill_god_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_god_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_mortal_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_mortal_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_fairy_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_fairy_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_god_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_god_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_crit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_crit_resit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_crit_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_crit_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_batter_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_batter_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_batter_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_batter_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_brkdown_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_brkdown_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_dam_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_dam_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_all_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_all_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_skill_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_skill_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_rebound_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_hp_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_dodge_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_brk_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_blk_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_blk_pierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_rel_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_rel_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_five_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_five_resist_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_fire_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_fire_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_ice_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_ice_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_thunder_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_thunder_rdu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_player_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_player_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_leader_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_leader_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_mon_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_mon_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_var_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_var_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_unusual_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_unusual_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_hp_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_unusual_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_fix_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_high_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_recover_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_week_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, m_exp_),
  };
  E_MonsterValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterValue_descriptor_,
      E_MonsterValue::default_instance_,
      E_MonsterValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterValue));
  Sheet_MonsterValue_descriptor_ = file->message_type(6);
  static const int Sheet_MonsterValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterValue, e_monstervalue_list_),
  };
  Sheet_MonsterValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MonsterValue_descriptor_,
      Sheet_MonsterValue::default_instance_,
      Sheet_MonsterValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MonsterValue));
  E_MonsterValueparam_descriptor_ = file->message_type(7);
  static const int E_MonsterValueparam_offsets_[73] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_brk_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_five_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_five_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_thump_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_thump_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_sky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_sky_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_sky_redu_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_sky_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_kill_god_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_god_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_mortal_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_mortal_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_fairy_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_fairy_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_god_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_god_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_crit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_crit_resit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_crit_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_crit_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_batter_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_batter_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_batter_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_batter_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_brkdown_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_brkdown_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_dam_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_dam_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_all_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_all_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_skill_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_skill_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_rebound_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_hp_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_dodge_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_brk_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_blk_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_blk_pierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_rel_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_rel_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_five_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_five_resist_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_fire_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_fire_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_ice_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_ice_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_thunder_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_thunder_rdu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_player_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_player_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_leader_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_leader_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_mon_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_mon_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_var_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_var_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_unusual_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_unusual_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_hp_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_unusual_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_fix_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_high_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_recover_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_p_week_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, m_exp_),
  };
  E_MonsterValueparam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterValueparam_descriptor_,
      E_MonsterValueparam::default_instance_,
      E_MonsterValueparam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterValueparam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterValueparam));
  Sheet_MonsterValueparam_descriptor_ = file->message_type(8);
  static const int Sheet_MonsterValueparam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterValueparam, e_monstervalueparam_list_),
  };
  Sheet_MonsterValueparam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MonsterValueparam_descriptor_,
      Sheet_MonsterValueparam::default_instance_,
      Sheet_MonsterValueparam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterValueparam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterValueparam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MonsterValueparam));
  E_MonsterDrop_descriptor_ = file->message_type(9);
  static const int E_MonsterDrop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, m_own_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, m_ownprotect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, m_boxid_),
  };
  E_MonsterDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterDrop_descriptor_,
      E_MonsterDrop::default_instance_,
      E_MonsterDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterDrop));
  Sheet_MonsterDrop_descriptor_ = file->message_type(10);
  static const int Sheet_MonsterDrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterDrop, e_monsterdrop_list_),
  };
  Sheet_MonsterDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MonsterDrop_descriptor_,
      Sheet_MonsterDrop::default_instance_,
      Sheet_MonsterDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MonsterDrop));
  E_MonsterCollect_descriptor_ = file->message_type(11);
  static const int E_MonsterCollect_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_breakdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_dropgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_gettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_skilltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, m_monsteid_),
  };
  E_MonsterCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MonsterCollect_descriptor_,
      E_MonsterCollect::default_instance_,
      E_MonsterCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MonsterCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MonsterCollect));
  Sheet_MonsterCollect_descriptor_ = file->message_type(12);
  static const int Sheet_MonsterCollect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterCollect, e_monstercollect_list_),
  };
  Sheet_MonsterCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MonsterCollect_descriptor_,
      Sheet_MonsterCollect::default_instance_,
      Sheet_MonsterCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MonsterCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MonsterCollect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fMonster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterMonster_descriptor_, &E_MonsterMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MonsterMonster_descriptor_, &Sheet_MonsterMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterDisplaySkillDesc_descriptor_, &E_MonsterDisplaySkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterDisplay_descriptor_, &E_MonsterDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MonsterDisplay_descriptor_, &Sheet_MonsterDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterValue_descriptor_, &E_MonsterValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MonsterValue_descriptor_, &Sheet_MonsterValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterValueparam_descriptor_, &E_MonsterValueparam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MonsterValueparam_descriptor_, &Sheet_MonsterValueparam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterDrop_descriptor_, &E_MonsterDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MonsterDrop_descriptor_, &Sheet_MonsterDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MonsterCollect_descriptor_, &E_MonsterCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MonsterCollect_descriptor_, &Sheet_MonsterCollect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fMonster_2eproto() {
  delete E_MonsterMonster::default_instance_;
  delete E_MonsterMonster_reflection_;
  delete Sheet_MonsterMonster::default_instance_;
  delete Sheet_MonsterMonster_reflection_;
  delete E_MonsterDisplaySkillDesc::default_instance_;
  delete E_MonsterDisplaySkillDesc_reflection_;
  delete E_MonsterDisplay::default_instance_;
  delete E_MonsterDisplay_reflection_;
  delete Sheet_MonsterDisplay::default_instance_;
  delete Sheet_MonsterDisplay_reflection_;
  delete E_MonsterValue::default_instance_;
  delete E_MonsterValue_reflection_;
  delete Sheet_MonsterValue::default_instance_;
  delete Sheet_MonsterValue_reflection_;
  delete E_MonsterValueparam::default_instance_;
  delete E_MonsterValueparam_reflection_;
  delete Sheet_MonsterValueparam::default_instance_;
  delete Sheet_MonsterValueparam_reflection_;
  delete E_MonsterDrop::default_instance_;
  delete E_MonsterDrop_reflection_;
  delete Sheet_MonsterDrop::default_instance_;
  delete Sheet_MonsterDrop_reflection_;
  delete E_MonsterCollect::default_instance_;
  delete E_MonsterCollect_reflection_;
  delete Sheet_MonsterCollect::default_instance_;
  delete Sheet_MonsterCollect_reflection_;
}

void protobuf_AddDesc_E_5fMonster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017E_Monster.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\371\n\n\020E_MonsterMonster\022!\n\013m_mon"
    "sterID\030\001 \001(\003B\014\302\377\024\010\346\200\252\347\211\251ID\022(\n\rm_monsterN"
    "ame\030\002 \001(\tB\021\302\377\024\t\346\200\252\347\211\251\345\220\215\220\301\024@\022$\n\006m_mask\030\003"
    " \001(\tB\024\302\377\024\014\346\216\211\350\220\275\346\240\207\350\256\260\220\301\024@\022(\n\016m_function"
    "Type\030\004 \001(\005B\020\302\377\024\014\345\212\237\350\203\275\347\261\273\345\236\213\022)\n\017m_functi"
    "onValue\030\005 \001(\003B\020\302\377\024\014\345\212\237\350\203\275\345\217\202\346\225\260\022*\n\nm_tas"
    "kType\030\006 \001(\005B\026\302\377\024\022\344\273\273\345\212\241\347\224\250\346\200\252\347\261\273\345\236\213\022&\n\014m"
    "_profession\030\007 \001(\005B\020\302\377\024\014\346\200\252\347\211\251\350\201\214\344\270\232\022,\n\017m"
    "_subProfession\030\010 \001(\005B\023\302\377\024\017\346\200\252\347\211\251\345\255\220\347\261\273\345\236"
    "\213\022/\n\017m_damageAddType\030\t \001(\005B\026\302\377\024\022\344\274\244\345\256\263\345\212"
    "\240\346\210\220\347\261\273\345\236\213\022%\n\013m_monsterLV\030\n \001(\005B\020\302\377\024\014\346\200\252"
    "\347\211\251\347\255\211\347\272\247\022+\n\013m_droplimit\030\013 \001(\005B\026\302\377\024\022\346\234\200\345"
    "\244\247\346\216\211\350\220\275\347\255\211\347\272\247\022*\n\013m_displayID\030\014 \001(\003B\025\302\377\024"
    "\021\350\265\204\346\272\220\344\270\216\350\241\250\347\216\260ID\022\036\n\010m_bossID\030\r \001(\005B\014\302\377"
    "\024\010\351\246\226\351\242\206ID\022%\n\013m_valuetype\030\016 \001(\003B\020\302\377\024\014\346\225\260"
    "\345\200\274\347\261\273\345\236\213\022&\n\014m_valueParam\030\017 \001(\005B\020\302\377\024\014\346\225\260"
    "\345\200\274\345\217\202\346\225\260\022\033\n\006m_aiId\030\020 \001(\003B\013\302\377\024\007AI\350\241\250ID\022."
    "\n\016m_hpSectionNum\030\021 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\350\241\200\346\235\241"
    "\346\256\265\346\225\260\0224\n\013m_breedProb\030\022 \001(\005B\037\302\377\024\033\346\255\273\344\272\241\350"
    "\247\246\345\217\221\346\226\260\346\200\252\347\211\251\345\207\240\347\216\207\022.\n\014m_breedMonID\030\023 \001"
    "(\003B\030\302\377\024\024\350\247\246\345\217\221\347\224\237\346\210\220\346\200\252\347\211\251ID\022.\n\016m_breedM"
    "onLive\030\024 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345\255\230\346\264\273\346\227\266\351\227\264\022(\n\n"
    "m_itemCost\030\025 \001(\tB\024\302\377\024\014\351\201\223\345\205\267\346\266\210\350\200\227\220\301\024@\0226"
    "\n\020m_isBornActionOn\030\026 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\345\220\257\347"
    "\224\250\345\207\272\347\224\237\345\212\250\344\275\234\0228\n\014m_belongshow\030\027 \001(\005B\"\302\377"
    "\024\036\346\200\252\347\211\251\346\216\211\350\220\275\345\275\222\345\261\236\346\230\257\345\220\246\346\230\276\347\244\272\022#\n\rm_dr"
    "opGroupID\030\030 \001(\005B\014\302\377\024\010\346\216\211\350\220\275ID\022/\n\017m_harmd"
    "rop_type\030\031 \001(\005B\026\302\377\024\022\344\274\244\345\256\263\350\256\241\347\256\227\346\226\271\345\274\217\0220"
    "\n\nm_joninper\030\032 \001(\005B\034\302\377\024\030\345\217\202\344\270\216\345\245\226\346\234\200\344\275\216\347"
    "\231\276\345\210\206\346\257\224\022$\n\nm_btnRange\030\033 \001(\005B\020\302\377\024\014\346\214\211\351\222\256"
    "\350\214\203\345\233\264\022\035\n\007m_btnId\030\034 \001(\003B\014\302\377\024\010\346\214\211\351\222\256ID\022 \n"
    "\014m_drivePoint\030\035 \001(\005B\n\302\377\024\006\346\200\222\346\260\224\022 \n\nm_cor"
    "pseID\030\036 \001(\005B\014\302\377\024\010\345\260\270\344\275\223ID\022\034\n\010m_battle\030\037 "
    "\001(\003B\n\302\377\024\006\346\210\230\345\212\233\022$\n\nm_lvSupPve\030  \001(\005B\020\302\377\024"
    "\014\347\255\211\347\272\247\345\216\213\345\210\266\022\'\n\rm_powerSupPve\030! \001(\005B\020\302\377"
    "\024\014\346\210\230\345\212\233\345\216\213\345\210\266\"X\n\024Sheet_MonsterMonster\022@"
    "\n\025E_MonsterMonster_List\030\001 \003(\0132\032.proto_ff"
    ".E_MonsterMonsterB\005\210\301\024\200\020\"1\n\031E_MonsterDis"
    "playSkillDesc\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002id\"\304\003\n\020"
    "E_MonsterDisplay\022*\n\013m_displayID\030\001 \001(\003B\025\302"
    "\377\024\021\350\265\204\346\272\220\344\270\216\350\241\250\347\216\260ID\0222\n\017m_modelOffsetsX\030"
    "\002 \001(\005B\031\302\377\024\025UI\346\250\241\345\236\213X\345\235\220\346\240\207\345\201\217\347\247\273\0222\n\017m_mo"
    "delOffsetsY\030\003 \001(\005B\031\302\377\024\025UI\346\250\241\345\236\213Y\345\235\220\346\240\207\345\201"
    "\217\347\247\273\022.\n\014m_modelScale\030\004 \001(\005B\030\302\377\024\024UI\346\250\241\345\236\213"
    "\347\274\251\346\224\276\346\257\224\344\276\213\022-\n\rm_modelRadius\030\005 \001(\005B\026\302\377\024"
    "\022\346\200\252\347\211\251\346\250\241\345\236\213\345\215\212\345\276\204\022&\n\014m_pathRadius\030\006 \001("
    "\005B\020\302\377\024\014\345\257\273\350\267\257\345\215\212\345\276\204\022+\n\021m_collisionRadius"
    "\030\007 \001(\005B\020\302\377\024\014\345\257\273\350\267\257\345\215\212\345\276\204\022\"\n\010m_rSpeed\030\010 \001"
    "(\005B\020\302\377\024\014\350\267\221\346\255\245\351\200\237\345\272\246\022D\n\007m_skill\030\t \003(\0132#."
    "proto_ff.E_MonsterDisplaySkillDescB\016\302\377\024\006"
    "\346\212\200\350\203\275\210\301\024\007\"X\n\024Sheet_MonsterDisplay\022@\n\025E_"
    "MonsterDisplay_List\030\001 \003(\0132\032.proto_ff.E_M"
    "onsterDisplayB\005\210\301\024\200\004\"\343\026\n\016E_MonsterValue\022"
    "\032\n\004m_ID\030\001 \001(\003B\014\302\377\024\010\346\225\260\345\200\274ID\022 \n\006m_type\030\002 "
    "\001(\005B\020\302\377\024\014\346\200\252\347\211\251\347\261\273\345\236\213\022%\n\013m_monsterLV\030\003 \001"
    "(\005B\020\302\377\024\014\346\200\252\347\211\251\347\255\211\347\272\247\022\"\n\010m_max_Hp\030\004 \001(\003B\020"
    "\302\377\024\014\346\234\200\345\244\247\347\224\237\345\221\275\022\031\n\005m_atk\030\005 \001(\003B\n\302\377\024\006\346\224\273"
    "\345\207\273\022\031\n\005m_def\030\006 \001(\003B\n\302\377\024\006\351\230\262\345\276\241\022\037\n\013m_brk_"
    "Armor\030\007 \001(\003B\n\302\377\024\006\347\240\264\347\224\262\022$\n\nm_five_Dam\030\010 "
    "\001(\003B\020\302\377\024\014\344\272\224\350\241\214\344\274\244\345\256\263\022&\n\014m_five_Armor\030\t "
    "\001(\003B\020\302\377\024\014\344\272\224\350\241\214\346\212\244\347\224\262\022&\n\014m_thump_Rate\030\n "
    "\001(\003B\020\302\377\024\014\351\207\215\345\207\273\345\207\240\347\216\207\022(\n\016m_thump_Resist\030"
    "\013 \001(\003B\020\302\377\024\014\351\207\215\345\207\273\346\212\265\346\212\227\022\031\n\005m_sky\030\014 \001(\003B\n"
    "\302\377\024\006\345\244\251\351\201\223\022#\n\tm_sky_Dam\030\r \001(\003B\020\302\377\024\014\345\244\251\351\201"
    "\223\344\274\244\345\256\263\022+\n\021m_sky_Redu_Resist\030\016 \001(\003B\020\302\377\024\014"
    "\345\244\251\351\201\223\345\207\217\346\212\227\022&\n\014m_sky_Resist\030\017 \001(\003B\020\302\377\024\014"
    "\345\244\251\351\201\223\346\212\227\346\200\247\022\036\n\nm_kill_God\030\020 \001(\003B\n\302\377\024\006\345\274"
    "\221\347\245\236\022\036\n\nm_god_Body\030\021 \001(\003B\n\302\377\024\006\347\245\236\344\275\223\022\'\n\r"
    "m_mortal_Rate\030\022 \001(\003B\020\302\377\024\014\345\207\241\345\205\215\345\207\240\347\216\207\022)\n"
    "\017m_mortal_Resist\030\023 \001(\003B\020\302\377\024\014\345\207\241\345\205\215\346\212\227\346\200\247"
    "\022&\n\014m_fairy_Rate\030\024 \001(\003B\020\302\377\024\014\344\273\231\345\205\215\345\207\240\347\216\207"
    "\022(\n\016m_fairy_Resist\030\025 \001(\003B\020\302\377\024\014\344\273\231\345\205\215\346\212\227\346"
    "\200\247\022$\n\nm_god_Rate\030\026 \001(\003B\020\302\377\024\014\347\245\236\345\205\215\345\207\240\347\216\207"
    "\022&\n\014m_god_Resist\030\027 \001(\003B\020\302\377\024\014\347\245\236\345\205\215\346\212\227\346\200\247"
    "\022%\n\013m_crit_Rate\030\030 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\345\207\240\347\216\207\022"
    "+\n\021m_crit_resit_Rate\030\031 \001(\003B\020\302\377\024\014\346\212\227\346\232\264\345\207"
    "\240\347\216\207\022$\n\nm_crit_Dam\030\032 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\344\274\244\345"
    "\256\263\022%\n\013m_crit_Redu\030\033 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\345\207\217\345\205"
    "\215\022\'\n\rm_batter_Rate\030\034 \001(\003B\020\302\377\024\014\350\277\236\345\207\273\345\207\240\347"
    "\216\207\022)\n\017m_batter_Resist\030\035 \001(\003B\020\302\377\024\014\350\277\236\345\207\273\346"
    "\212\265\346\212\227\022&\n\014m_batter_Dam\030\036 \001(\003B\020\302\377\024\014\350\277\236\345\207\273\344"
    "\274\244\345\256\263\022\'\n\rm_batter_Redu\030\037 \001(\003B\020\302\377\024\014\350\277\236\345\207\273"
    "\345\207\217\345\205\215\022(\n\016m_brkdown_Rate\030  \001(\003B\020\302\377\024\014\345\207\273\347"
    "\251\277\345\207\240\347\216\207\022*\n\020m_brkdown_Resist\030! \001(\003B\020\302\377\024\014"
    "\345\207\273\347\251\277\346\212\265\346\212\227\022#\n\tm_dam_Add\030\" \001(\003B\020\302\377\024\014\344\274\244"
    "\345\256\263\345\212\240\346\210\220\022$\n\nm_dam_Redu\030# \001(\003B\020\302\377\024\014\344\274\244\345\256"
    "\263\345\207\217\345\205\215\022#\n\tm_all_Add\030$ \001(\003B\020\302\377\024\014\345\205\250\350\203\275\345\242"
    "\236\344\274\244\022$\n\nm_all_Redu\030% \001(\003B\020\302\377\024\014\345\205\250\350\203\275\345\207\217\345"
    "\205\215\022%\n\013m_skill_Add\030& \001(\003B\020\302\377\024\014\346\212\200\350\203\275\345\242\236\344\274"
    "\244\022&\n\014m_skill_Redu\030\' \001(\003B\020\302\377\024\014\346\212\200\350\203\275\345\207\217\344\274"
    "\244\022\'\n\rm_rebound_Dam\030( \001(\003B\020\302\377\024\014\345\217\215\345\274\271\344\274\244\345"
    "\256\263\022$\n\nm_hp_Steal\030) \001(\003B\020\302\377\024\014\347\224\237\345\221\275\347\252\203\345\217\226"
    "\022&\n\014m_dodge_Rate\030* \001(\003B\020\302\377\024\014\351\227\252\351\201\277\345\207\240\347\216\207"
    "\022$\n\nm_hit_Rate\030+ \001(\003B\020\302\377\024\014\345\221\275\344\270\255\345\207\240\347\216\207\022$"
    "\n\nm_blk_Rate\030, \001(\003B\020\302\377\024\014\346\240\274\346\214\241\345\207\240\347\216\207\022(\n\016"
    "m_brk_blk_Rate\030- \001(\003B\020\302\377\024\014\347\240\264\346\241\243\345\207\240\347\216\207\022$"
    "\n\nm_blk_Free\030. \001(\003B\020\302\377\024\014\346\240\274\346\214\241\345\205\215\344\274\244\022&\n\014"
    "m_blk_Pierce\030/ \001(\003B\020\302\377\024\014\346\240\274\346\214\241\347\251\277\351\200\217\022%\n\013"
    "m_rel_Armor\0300 \001(\003B\020\302\377\024\014\347\234\237\345\256\236\346\212\244\347\224\262\022#\n\tm"
    "_rel_Dam\0301 \001(\003B\020\302\377\024\014\347\234\237\345\256\236\344\274\244\345\256\263\022\'\n\rm_fi"
    "ve_Resist\0302 \001(\003B\020\302\377\024\014\344\272\224\350\241\214\346\212\227\346\200\247\022,\n\022m_f"
    "ive_resist_Redu\0303 \001(\003B\020\302\377\024\014\344\272\224\350\241\214\345\207\217\346\212\227\022"
    "$\n\nm_fire_Add\0304 \001(\003B\020\302\377\024\014\347\246\273\347\201\253\345\242\236\344\274\244\022%\n"
    "\013m_fire_Redu\0305 \001(\003B\020\302\377\024\014\347\246\273\347\201\253\345\207\217\344\274\244\022#\n\t"
    "m_ice_Add\0306 \001(\003B\020\302\377\024\014\347\216\204\345\206\260\345\242\236\344\274\244\022$\n\nm_i"
    "ce_Redu\0307 \001(\003B\020\302\377\024\014\347\216\204\345\206\260\345\207\217\344\274\244\022\'\n\rm_thu"
    "nder_Add\0308 \001(\003B\020\302\377\024\014\351\233\267\347\275\232\345\242\236\344\274\244\022\'\n\rm_th"
    "under_Rdu\0309 \001(\003B\020\302\377\024\014\351\233\267\347\275\232\345\207\217\344\274\244\022&\n\014m_p"
    "layer_Add\030: \001(\003B\020\302\377\024\014\347\216\251\345\256\266\345\207\217\344\274\244\022\'\n\rm_p"
    "layer_Redu\030; \001(\003B\020\302\377\024\014\347\216\251\345\256\266\345\242\236\344\274\244\022&\n\014m_"
    "leader_Add\030< \001(\003B\020\302\377\024\014\351\246\226\351\242\206\345\207\217\344\274\244\022\'\n\rm_"
    "leader_Redu\030= \001(\003B\020\302\377\024\014\351\246\226\351\242\206\345\242\236\344\274\244\022#\n\tm"
    "_mon_Add\030> \001(\003B\020\302\377\024\014\346\200\252\347\211\251\345\207\217\344\274\244\022$\n\nm_mo"
    "n_Redu\030\? \001(\003B\020\302\377\024\014\346\200\252\347\211\251\345\242\236\344\274\244\022$\n\nm_var_"
    "Redu\030@ \001(\003B\020\302\377\024\014\345\217\230\350\272\253\345\207\217\344\274\244\022#\n\tm_var_Ad"
    "d\030A \001(\003B\020\302\377\024\014\345\217\230\350\272\253\345\242\236\344\274\244\022*\n\020m_unusual_R"
    "esist\030B \001(\003B\020\302\377\024\014\345\274\202\345\270\270\346\212\265\346\212\227\022\'\n\rm_unusu"
    "al_Hit\030C \001(\003B\020\302\377\024\014\345\274\202\345\270\270\345\221\275\344\270\255\022&\n\014m_hp_R"
    "ecover\030D \001(\003B\020\302\377\024\014\347\224\237\345\221\275\346\201\242\345\244\215\022\'\n\rm_unus"
    "ual_Add\030E \001(\003B\020\302\377\024\014\345\274\202\345\270\270\345\242\236\344\274\244\022\'\n\rm_fix"
    "_Recover\030F \001(\003B\020\302\377\024\014\345\233\272\345\256\232\345\233\236\345\244\215\022\'\n\rm_hi"
    "gh_hp_Add\030G \001(\003B\020\302\377\024\014\351\253\230\350\241\200\345\242\236\344\274\244\022*\n\020m_r"
    "ecover_hp_Add\030H \001(\003B\020\302\377\024\014\345\233\236\350\241\200\345\242\236\346\225\210\022$\n"
    "\nm_week_Add\030I \001(\003B\020\302\377\024\014\350\231\232\345\274\261\345\242\236\344\274\244\022\034\n\010m"
    "_shield\030J \001(\003B\n\302\377\024\006\346\212\244\347\233\276\022\037\n\005m_exp\030K \001(\003"
    "B\020\302\377\024\014\346\200\252\347\211\251\347\273\217\351\252\214\"R\n\022Sheet_MonsterValue"
    "\022<\n\023E_MonsterValue_List\030\001 \003(\0132\030.proto_ff"
    ".E_MonsterValueB\005\210\301\024\200@\"\245\027\n\023E_MonsterValu"
    "eparam\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\nm_P_max_"
    "Hp\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\347\224\237\345\221\275\022\033\n\007m_P_atk\030\003 "
    "\001(\005B\n\302\377\024\006\346\224\273\345\207\273\022\033\n\007m_P_def\030\004 \001(\005B\n\302\377\024\006\351\230"
    "\262\345\276\241\022!\n\rm_P_brk_Armor\030\005 \001(\005B\n\302\377\024\006\347\240\264\347\224\262\022"
    "&\n\014m_P_five_Dam\030\006 \001(\005B\020\302\377\024\014\344\272\224\350\241\214\344\274\244\345\256\263\022"
    "(\n\016m_P_five_Armor\030\007 \001(\005B\020\302\377\024\014\344\272\224\350\241\214\346\212\244\347\224"
    "\262\022(\n\016m_P_thump_Rate\030\010 \001(\005B\020\302\377\024\014\351\207\215\345\207\273\345\207\240"
    "\347\216\207\022*\n\020m_P_thump_Resist\030\t \001(\005B\020\302\377\024\014\351\207\215\345\207"
    "\273\346\212\265\346\212\227\022\033\n\007m_P_sky\030\n \001(\005B\n\302\377\024\006\345\244\251\351\201\223\022%\n\013"
    "m_P_sky_Dam\030\013 \001(\005B\020\302\377\024\014\345\244\251\351\201\223\344\274\244\345\256\263\022-\n\023m"
    "_P_sky_Redu_Resist\030\014 \001(\005B\020\302\377\024\014\345\244\251\351\201\223\345\207\217\346"
    "\212\227\022(\n\016m_P_sky_Resist\030\r \001(\005B\020\302\377\024\014\345\244\251\351\201\223\346\212"
    "\227\346\200\247\022 \n\014m_P_kill_God\030\016 \001(\005B\n\302\377\024\006\345\274\221\347\245\236\022 "
    "\n\014m_P_god_Body\030\017 \001(\005B\n\302\377\024\006\347\245\236\344\275\223\022)\n\017m_P_"
    "mortal_Rate\030\020 \001(\005B\020\302\377\024\014\345\207\241\345\205\215\345\207\240\347\216\207\022+\n\021m"
    "_P_mortal_Resist\030\021 \001(\005B\020\302\377\024\014\345\207\241\345\205\215\346\212\227\346\200\247"
    "\022(\n\016m_P_fairy_Rate\030\022 \001(\005B\020\302\377\024\014\344\273\231\345\205\215\345\207\240\347"
    "\216\207\022*\n\020m_P_fairy_Resist\030\023 \001(\005B\020\302\377\024\014\344\273\231\345\205\215"
    "\346\212\227\346\200\247\022&\n\014m_P_god_Rate\030\024 \001(\005B\020\302\377\024\014\347\245\236\345\205\215"
    "\345\207\240\347\216\207\022(\n\016m_P_god_Resist\030\025 \001(\005B\020\302\377\024\014\347\245\236\345"
    "\205\215\346\212\227\346\200\247\022\'\n\rm_P_crit_Rate\030\026 \001(\005B\020\302\377\024\014\346\232\264"
    "\345\207\273\345\207\240\347\216\207\022-\n\023m_P_crit_resit_Rate\030\027 \001(\005B\020"
    "\302\377\024\014\346\212\227\346\232\264\345\207\240\347\216\207\022&\n\014m_P_crit_Dam\030\030 \001(\005B\020"
    "\302\377\024\014\346\232\264\345\207\273\344\274\244\345\256\263\022\'\n\rm_P_crit_Redu\030\031 \001(\005B"
    "\020\302\377\024\014\346\232\264\345\207\273\345\207\217\345\205\215\022)\n\017m_P_batter_Rate\030\032 \001"
    "(\005B\020\302\377\024\014\350\277\236\345\207\273\345\207\240\347\216\207\022+\n\021m_P_batter_Resis"
    "t\030\033 \001(\005B\020\302\377\024\014\350\277\236\345\207\273\346\212\265\346\212\227\022(\n\016m_P_batter_"
    "Dam\030\034 \001(\005B\020\302\377\024\014\350\277\236\345\207\273\344\274\244\345\256\263\022)\n\017m_P_batte"
    "r_Redu\030\035 \001(\005B\020\302\377\024\014\350\277\236\345\207\273\345\207\217\345\205\215\022*\n\020m_P_br"
    "kdown_Rate\030\036 \001(\005B\020\302\377\024\014\345\207\273\347\251\277\345\207\240\347\216\207\022,\n\022m_"
    "P_brkdown_Resist\030\037 \001(\005B\020\302\377\024\014\345\207\273\347\251\277\346\212\265\346\212\227"
    "\022%\n\013m_P_dam_Add\030  \001(\005B\020\302\377\024\014\344\274\244\345\256\263\345\212\240\346\210\220\022"
    "&\n\014m_P_dam_Redu\030! \001(\005B\020\302\377\024\014\344\274\244\345\256\263\345\207\217\345\205\215\022"
    "%\n\013m_P_all_Add\030\" \001(\005B\020\302\377\024\014\345\205\250\350\203\275\345\242\236\344\274\244\022&"
    "\n\014m_P_all_Redu\030# \001(\005B\020\302\377\024\014\345\205\250\350\203\275\345\207\217\345\205\215\022\'"
    "\n\rm_P_skill_Add\030$ \001(\005B\020\302\377\024\014\346\212\200\350\203\275\345\242\236\344\274\244\022"
    "(\n\016m_P_skill_Redu\030% \001(\005B\020\302\377\024\014\346\212\200\350\203\275\345\207\217\344\274"
    "\244\022)\n\017m_P_rebound_Dam\030& \001(\005B\020\302\377\024\014\345\217\215\345\274\271\344\274"
    "\244\345\256\263\022&\n\014m_P_hp_Steal\030\' \001(\005B\020\302\377\024\014\347\224\237\345\221\275\347\252"
    "\203\345\217\226\022(\n\016m_P_dodge_Rate\030( \001(\005B\020\302\377\024\014\351\227\252\351\201\277"
    "\345\207\240\347\216\207\022&\n\014m_P_hit_Rate\030) \001(\005B\020\302\377\024\014\345\221\275\344\270\255"
    "\345\207\240\347\216\207\022&\n\014m_P_blk_Rate\030* \001(\005B\020\302\377\024\014\346\240\274\346\214\241"
    "\345\207\240\347\216\207\022*\n\020m_P_brk_blk_Rate\030+ \001(\005B\020\302\377\024\014\347\240"
    "\264\346\241\243\345\207\240\347\216\207\022&\n\014m_P_blk_Free\030, \001(\005B\020\302\377\024\014\346\240"
    "\274\346\214\241\345\205\215\344\274\244\022(\n\016m_P_blk_Pierce\030- \001(\005B\020\302\377\024\014"
    "\346\240\274\346\214\241\347\251\277\351\200\217\022\'\n\rm_P_rel_Armor\030. \001(\005B\020\302\377\024"
    "\014\347\234\237\345\256\236\346\212\244\347\224\262\022%\n\013m_P_rel_Dam\030/ \001(\005B\020\302\377\024\014"
    "\347\234\237\345\256\236\344\274\244\345\256\263\022)\n\017m_P_five_Resist\0300 \001(\005B\020\302"
    "\377\024\014\344\272\224\350\241\214\346\212\227\346\200\247\022.\n\024m_P_five_resist_Redu\030"
    "1 \001(\005B\020\302\377\024\014\344\272\224\350\241\214\345\207\217\346\212\227\022&\n\014m_P_fire_Add\030"
    "2 \001(\005B\020\302\377\024\014\347\246\273\347\201\253\345\242\236\344\274\244\022\'\n\rm_P_fire_Redu"
    "\0303 \001(\005B\020\302\377\024\014\347\246\273\347\201\253\345\207\217\344\274\244\022%\n\013m_P_ice_Add\030"
    "4 \001(\005B\020\302\377\024\014\347\216\204\345\206\260\345\242\236\344\274\244\022&\n\014m_P_ice_Redu\030"
    "5 \001(\005B\020\302\377\024\014\347\216\204\345\206\260\345\207\217\344\274\244\022)\n\017m_P_thunder_A"
    "dd\0306 \001(\005B\020\302\377\024\014\351\233\267\347\275\232\345\242\236\344\274\244\022)\n\017m_P_thunde"
    "r_Rdu\0307 \001(\005B\020\302\377\024\014\351\233\267\347\275\232\345\207\217\344\274\244\022(\n\016m_P_pla"
    "yer_Add\0308 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\345\207\217\344\274\244\022)\n\017m_P_p"
    "layer_Redu\0309 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\345\242\236\344\274\244\022(\n\016m_"
    "P_leader_Add\030: \001(\005B\020\302\377\024\014\351\246\226\351\242\206\345\207\217\344\274\244\022)\n\017"
    "m_P_leader_Redu\030; \001(\005B\020\302\377\024\014\351\246\226\351\242\206\345\242\236\344\274\244\022"
    "%\n\013m_P_mon_Add\030< \001(\005B\020\302\377\024\014\346\200\252\347\211\251\345\207\217\344\274\244\022&"
    "\n\014m_P_mon_Redu\030= \001(\005B\020\302\377\024\014\346\200\252\347\211\251\345\242\236\344\274\244\022&"
    "\n\014m_P_var_Redu\030> \001(\005B\020\302\377\024\014\345\217\230\350\272\253\345\207\217\344\274\244\022%"
    "\n\013m_P_var_Add\030\? \001(\005B\020\302\377\024\014\345\217\230\350\272\253\345\242\236\344\274\244\022,\n"
    "\022m_P_unusual_Resist\030@ \001(\005B\020\302\377\024\014\345\274\202\345\270\270\346\212\265"
    "\346\212\227\022)\n\017m_P_unusual_Hit\030A \001(\005B\020\302\377\024\014\345\274\202\345\270\270"
    "\345\221\275\344\270\255\022(\n\016m_P_hp_Recover\030B \001(\005B\020\302\377\024\014\347\224\237\345"
    "\221\275\346\201\242\345\244\215\022)\n\017m_P_unusual_Add\030C \001(\005B\020\302\377\024\014\345"
    "\274\202\345\270\270\345\242\236\344\274\244\022)\n\017m_P_fix_Recover\030D \001(\005B\020\302\377"
    "\024\014\345\233\272\345\256\232\345\233\236\345\244\215\022)\n\017m_P_high_hp_Add\030E \001(\005B"
    "\020\302\377\024\014\351\253\230\350\241\200\345\242\236\344\274\244\022,\n\022m_P_recover_hp_Add\030"
    "F \001(\005B\020\302\377\024\014\345\233\236\350\241\200\345\242\236\346\225\210\022&\n\014m_P_week_Add\030"
    "G \001(\005B\020\302\377\024\014\350\231\232\345\274\261\345\242\236\344\274\244\022\034\n\010m_shield\030H \001("
    "\003B\n\302\377\024\006\346\212\244\347\233\276\022\037\n\005m_exp\030I \001(\003B\020\302\377\024\014\346\200\252\347\211\251"
    "\347\273\217\351\252\214\"a\n\027Sheet_MonsterValueparam\022F\n\030E_M"
    "onsterValueparam_List\030\001 \003(\0132\035.proto_ff.E"
    "_MonsterValueparamB\005\210\301\024\200\001\"\324\001\n\rE_MonsterD"
    "rop\022\035\n\004m_id\030\001 \001(\005B\017\302\377\024\013\346\216\211\350\220\275\345\214\205ID\022\036\n\007m_"
    "group\030\002 \001(\005B\r\302\377\024\t\346\216\211\350\220\275\347\273\204\022\034\n\005m_own\030\003 \001("
    "\005B\r\302\377\024\t\345\275\222\345\261\236\346\235\203\022&\n\014m_ownProtect\030\004 \001(\005B\020"
    "\302\377\024\014\345\275\222\345\261\236\344\277\235\346\212\244\022 \n\006m_type\030\005 \001(\005B\020\302\377\024\014\346\216"
    "\211\350\220\275\346\226\271\345\274\217\022\034\n\007m_boxID\030\006 \003(\003B\013\302\377\024\003box\210\301\024\005"
    "\"O\n\021Sheet_MonsterDrop\022:\n\022E_MonsterDrop_L"
    "ist\030\001 \003(\0132\027.proto_ff.E_MonsterDropB\005\210\301\024\200"
    "\004\"\261\003\n\020E_MonsterCollect\022\030\n\004m_ID\030\001 \001(\005B\n\302\377"
    "\024\006\347\261\273\345\236\213\022#\n\006m_type\030\002 \001(\005B\023\302\377\024\017\351\207\207\351\233\206\347\211\251\347"
    "\261\273\345\236\213\022%\n\005m_num\030\003 \001(\005B\026\302\377\024\022\345\205\254\345\205\261\351\207\207\351\233\206\346\254"
    "\241\346\225\260\022+\n\013m_breakDown\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\350\203\275"
    "\350\242\253\346\211\223\346\226\255\022\'\n\rm_dropGroupID\030\005 \001(\005B\020\302\377\024\014\351\207"
    "\207\351\233\206\350\216\267\345\276\227\022 \n\006m_time\030\006 \001(\005B\020\302\377\024\014\350\257\273\346\235\241\346\227"
    "\266\351\227\264\022,\n\tm_getType\030\007 \001(\005B\031\302\377\024\025\350\216\267\345\276\227\346\212\200\350\203"
    "\275\347\232\204\346\226\271\345\274\217\022%\n\013m_skillTime\030\010 \001(\005B\020\302\377\024\014\346\212\200"
    "\350\203\275\351\227\264\351\232\224\022)\n\tm_skillID\030\t \001(\005B\026\302\377\024\022\351\207\207\351\233\206"
    "\350\216\267\345\276\227\346\212\200\350\203\275\022\035\n\007m_dupID\030\n \001(\005B\014\302\377\024\010\345\211\257\346\234"
    "\254ID\022 \n\nm_monsteID\030\013 \001(\005B\014\302\377\024\010\346\200\252\347\211\251ID\"W\n"
    "\024Sheet_MonsterCollect\022\?\n\025E_MonsterCollec"
    "t_List\030\001 \003(\0132\032.proto_ff.E_MonsterCollect"
    "B\004\210\301\024 ", 9046);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Monster.proto", &protobuf_RegisterTypes);
  E_MonsterMonster::default_instance_ = new E_MonsterMonster();
  Sheet_MonsterMonster::default_instance_ = new Sheet_MonsterMonster();
  E_MonsterDisplaySkillDesc::default_instance_ = new E_MonsterDisplaySkillDesc();
  E_MonsterDisplay::default_instance_ = new E_MonsterDisplay();
  Sheet_MonsterDisplay::default_instance_ = new Sheet_MonsterDisplay();
  E_MonsterValue::default_instance_ = new E_MonsterValue();
  Sheet_MonsterValue::default_instance_ = new Sheet_MonsterValue();
  E_MonsterValueparam::default_instance_ = new E_MonsterValueparam();
  Sheet_MonsterValueparam::default_instance_ = new Sheet_MonsterValueparam();
  E_MonsterDrop::default_instance_ = new E_MonsterDrop();
  Sheet_MonsterDrop::default_instance_ = new Sheet_MonsterDrop();
  E_MonsterCollect::default_instance_ = new E_MonsterCollect();
  Sheet_MonsterCollect::default_instance_ = new Sheet_MonsterCollect();
  E_MonsterMonster::default_instance_->InitAsDefaultInstance();
  Sheet_MonsterMonster::default_instance_->InitAsDefaultInstance();
  E_MonsterDisplaySkillDesc::default_instance_->InitAsDefaultInstance();
  E_MonsterDisplay::default_instance_->InitAsDefaultInstance();
  Sheet_MonsterDisplay::default_instance_->InitAsDefaultInstance();
  E_MonsterValue::default_instance_->InitAsDefaultInstance();
  Sheet_MonsterValue::default_instance_->InitAsDefaultInstance();
  E_MonsterValueparam::default_instance_->InitAsDefaultInstance();
  Sheet_MonsterValueparam::default_instance_->InitAsDefaultInstance();
  E_MonsterDrop::default_instance_->InitAsDefaultInstance();
  Sheet_MonsterDrop::default_instance_->InitAsDefaultInstance();
  E_MonsterCollect::default_instance_->InitAsDefaultInstance();
  Sheet_MonsterCollect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fMonster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fMonster_2eproto {
  StaticDescriptorInitializer_E_5fMonster_2eproto() {
    protobuf_AddDesc_E_5fMonster_2eproto();
  }
} static_descriptor_initializer_E_5fMonster_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_MonsterMonster::kMMonsterIDFieldNumber;
const int E_MonsterMonster::kMMonsterNameFieldNumber;
const int E_MonsterMonster::kMMaskFieldNumber;
const int E_MonsterMonster::kMFunctionTypeFieldNumber;
const int E_MonsterMonster::kMFunctionValueFieldNumber;
const int E_MonsterMonster::kMTaskTypeFieldNumber;
const int E_MonsterMonster::kMProfessionFieldNumber;
const int E_MonsterMonster::kMSubProfessionFieldNumber;
const int E_MonsterMonster::kMDamageAddTypeFieldNumber;
const int E_MonsterMonster::kMMonsterLVFieldNumber;
const int E_MonsterMonster::kMDroplimitFieldNumber;
const int E_MonsterMonster::kMDisplayIDFieldNumber;
const int E_MonsterMonster::kMBossIDFieldNumber;
const int E_MonsterMonster::kMValuetypeFieldNumber;
const int E_MonsterMonster::kMValueParamFieldNumber;
const int E_MonsterMonster::kMAiIdFieldNumber;
const int E_MonsterMonster::kMHpSectionNumFieldNumber;
const int E_MonsterMonster::kMBreedProbFieldNumber;
const int E_MonsterMonster::kMBreedMonIDFieldNumber;
const int E_MonsterMonster::kMBreedMonLiveFieldNumber;
const int E_MonsterMonster::kMItemCostFieldNumber;
const int E_MonsterMonster::kMIsBornActionOnFieldNumber;
const int E_MonsterMonster::kMBelongshowFieldNumber;
const int E_MonsterMonster::kMDropGroupIDFieldNumber;
const int E_MonsterMonster::kMHarmdropTypeFieldNumber;
const int E_MonsterMonster::kMJoninperFieldNumber;
const int E_MonsterMonster::kMBtnRangeFieldNumber;
const int E_MonsterMonster::kMBtnIdFieldNumber;
const int E_MonsterMonster::kMDrivePointFieldNumber;
const int E_MonsterMonster::kMCorpseIDFieldNumber;
const int E_MonsterMonster::kMBattleFieldNumber;
const int E_MonsterMonster::kMLvSupPveFieldNumber;
const int E_MonsterMonster::kMPowerSupPveFieldNumber;
#endif  // !_MSC_VER

E_MonsterMonster::E_MonsterMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterMonster::InitAsDefaultInstance() {
}

E_MonsterMonster::E_MonsterMonster(const E_MonsterMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterMonster::SharedCtor() {
  _cached_size_ = 0;
  m_monsterid_ = GOOGLE_LONGLONG(0);
  m_monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_functiontype_ = 0;
  m_functionvalue_ = GOOGLE_LONGLONG(0);
  m_tasktype_ = 0;
  m_profession_ = 0;
  m_subprofession_ = 0;
  m_damageaddtype_ = 0;
  m_monsterlv_ = 0;
  m_droplimit_ = 0;
  m_displayid_ = GOOGLE_LONGLONG(0);
  m_bossid_ = 0;
  m_valuetype_ = GOOGLE_LONGLONG(0);
  m_valueparam_ = 0;
  m_aiid_ = GOOGLE_LONGLONG(0);
  m_hpsectionnum_ = 0;
  m_breedprob_ = 0;
  m_breedmonid_ = GOOGLE_LONGLONG(0);
  m_breedmonlive_ = 0;
  m_itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_isbornactionon_ = 0;
  m_belongshow_ = 0;
  m_dropgroupid_ = 0;
  m_harmdrop_type_ = 0;
  m_joninper_ = 0;
  m_btnrange_ = 0;
  m_btnid_ = GOOGLE_LONGLONG(0);
  m_drivepoint_ = 0;
  m_corpseid_ = 0;
  m_battle_ = GOOGLE_LONGLONG(0);
  m_lvsuppve_ = 0;
  m_powersuppve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterMonster::~E_MonsterMonster() {
  SharedDtor();
}

void E_MonsterMonster::SharedDtor() {
  if (m_monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_monstername_;
  }
  if (m_mask_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mask_;
  }
  if (m_itemcost_ != &::google::protobuf::internal::kEmptyString) {
    delete m_itemcost_;
  }
  if (this != default_instance_) {
  }
}

void E_MonsterMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterMonster_descriptor_;
}

const E_MonsterMonster& E_MonsterMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterMonster* E_MonsterMonster::default_instance_ = NULL;

E_MonsterMonster* E_MonsterMonster::New() const {
  return new E_MonsterMonster;
}

void E_MonsterMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_monsterid_ = GOOGLE_LONGLONG(0);
    if (has_m_monstername()) {
      if (m_monstername_ != &::google::protobuf::internal::kEmptyString) {
        m_monstername_->clear();
      }
    }
    if (has_m_mask()) {
      if (m_mask_ != &::google::protobuf::internal::kEmptyString) {
        m_mask_->clear();
      }
    }
    m_functiontype_ = 0;
    m_functionvalue_ = GOOGLE_LONGLONG(0);
    m_tasktype_ = 0;
    m_profession_ = 0;
    m_subprofession_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_damageaddtype_ = 0;
    m_monsterlv_ = 0;
    m_droplimit_ = 0;
    m_displayid_ = GOOGLE_LONGLONG(0);
    m_bossid_ = 0;
    m_valuetype_ = GOOGLE_LONGLONG(0);
    m_valueparam_ = 0;
    m_aiid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_hpsectionnum_ = 0;
    m_breedprob_ = 0;
    m_breedmonid_ = GOOGLE_LONGLONG(0);
    m_breedmonlive_ = 0;
    if (has_m_itemcost()) {
      if (m_itemcost_ != &::google::protobuf::internal::kEmptyString) {
        m_itemcost_->clear();
      }
    }
    m_isbornactionon_ = 0;
    m_belongshow_ = 0;
    m_dropgroupid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_harmdrop_type_ = 0;
    m_joninper_ = 0;
    m_btnrange_ = 0;
    m_btnid_ = GOOGLE_LONGLONG(0);
    m_drivepoint_ = 0;
    m_corpseid_ = 0;
    m_battle_ = GOOGLE_LONGLONG(0);
    m_lvsuppve_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_powersuppve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_monsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_monsterid_)));
          set_has_m_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_monsterName;
        break;
      }

      // optional string m_monsterName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monsterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_monstername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_monstername().data(), this->m_monstername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_mask;
        break;
      }

      // optional string m_mask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mask().data(), this->m_mask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_functionType;
        break;
      }

      // optional int32 m_functionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functiontype_)));
          set_has_m_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_functionValue;
        break;
      }

      // optional int64 m_functionValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_functionvalue_)));
          set_has_m_functionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_taskType;
        break;
      }

      // optional int32 m_taskType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tasktype_)));
          set_has_m_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_subProfession;
        break;
      }

      // optional int32 m_subProfession = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subprofession_)));
          set_has_m_subprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_damageAddType;
        break;
      }

      // optional int32 m_damageAddType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_damageAddType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_damageaddtype_)));
          set_has_m_damageaddtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_monsterLV;
        break;
      }

      // optional int32 m_monsterLV = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterlv_)));
          set_has_m_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_droplimit;
        break;
      }

      // optional int32 m_droplimit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_droplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_droplimit_)));
          set_has_m_droplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_displayID;
        break;
      }

      // optional int64 m_displayID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_displayID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_displayid_)));
          set_has_m_displayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_bossID;
        break;
      }

      // optional int32 m_bossID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bossid_)));
          set_has_m_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_valuetype;
        break;
      }

      // optional int64 m_valuetype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_valuetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_valuetype_)));
          set_has_m_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_valueParam;
        break;
      }

      // optional int32 m_valueParam = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_valueParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_valueparam_)));
          set_has_m_valueparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_aiId;
        break;
      }

      // optional int64 m_aiId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_aiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_aiid_)));
          set_has_m_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_hpSectionNum;
        break;
      }

      // optional int32 m_hpSectionNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hpSectionNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hpsectionnum_)));
          set_has_m_hpsectionnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_breedProb;
        break;
      }

      // optional int32 m_breedProb = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breedProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breedprob_)));
          set_has_m_breedprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_breedMonID;
        break;
      }

      // optional int64 m_breedMonID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breedMonID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_breedmonid_)));
          set_has_m_breedmonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_breedMonLive;
        break;
      }

      // optional int32 m_breedMonLive = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breedMonLive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breedmonlive_)));
          set_has_m_breedmonlive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_itemCost;
        break;
      }

      // optional string m_itemCost = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_itemCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_itemcost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_itemcost().data(), this->m_itemcost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_isBornActionOn;
        break;
      }

      // optional int32 m_isBornActionOn = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isBornActionOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isbornactionon_)));
          set_has_m_isbornactionon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_belongshow;
        break;
      }

      // optional int32 m_belongshow = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_belongshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_belongshow_)));
          set_has_m_belongshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_dropGroupID;
        break;
      }

      // optional int32 m_dropGroupID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropgroupid_)));
          set_has_m_dropgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_harmdrop_type;
        break;
      }

      // optional int32 m_harmdrop_type = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_harmdrop_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_harmdrop_type_)));
          set_has_m_harmdrop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_joninper;
        break;
      }

      // optional int32 m_joninper = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_joninper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_joninper_)));
          set_has_m_joninper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_btnRange;
        break;
      }

      // optional int32 m_btnRange = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_btnRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_btnrange_)));
          set_has_m_btnrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_btnId;
        break;
      }

      // optional int64 m_btnId = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_btnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_btnid_)));
          set_has_m_btnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_drivePoint;
        break;
      }

      // optional int32 m_drivePoint = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_drivePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_drivepoint_)));
          set_has_m_drivepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_corpseID;
        break;
      }

      // optional int32 m_corpseID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_corpseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_corpseid_)));
          set_has_m_corpseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_battle;
        break;
      }

      // optional int64 m_battle = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_battle_)));
          set_has_m_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_lvSupPve;
        break;
      }

      // optional int32 m_lvSupPve = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvSupPve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvsuppve_)));
          set_has_m_lvsuppve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_powerSupPve;
        break;
      }

      // optional int32 m_powerSupPve = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_powerSupPve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_powersuppve_)));
          set_has_m_powersuppve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_monsterID = 1;
  if (has_m_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_monsterid(), output);
  }

  // optional string m_monsterName = 2;
  if (has_m_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monstername().data(), this->m_monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_monstername(), output);
  }

  // optional string m_mask = 3;
  if (has_m_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mask().data(), this->m_mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_mask(), output);
  }

  // optional int32 m_functionType = 4;
  if (has_m_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_functiontype(), output);
  }

  // optional int64 m_functionValue = 5;
  if (has_m_functionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_functionvalue(), output);
  }

  // optional int32 m_taskType = 6;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_tasktype(), output);
  }

  // optional int32 m_profession = 7;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_profession(), output);
  }

  // optional int32 m_subProfession = 8;
  if (has_m_subprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_subprofession(), output);
  }

  // optional int32 m_damageAddType = 9;
  if (has_m_damageaddtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_damageaddtype(), output);
  }

  // optional int32 m_monsterLV = 10;
  if (has_m_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_monsterlv(), output);
  }

  // optional int32 m_droplimit = 11;
  if (has_m_droplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_droplimit(), output);
  }

  // optional int64 m_displayID = 12;
  if (has_m_displayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->m_displayid(), output);
  }

  // optional int32 m_bossID = 13;
  if (has_m_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_bossid(), output);
  }

  // optional int64 m_valuetype = 14;
  if (has_m_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->m_valuetype(), output);
  }

  // optional int32 m_valueParam = 15;
  if (has_m_valueparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_valueparam(), output);
  }

  // optional int64 m_aiId = 16;
  if (has_m_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->m_aiid(), output);
  }

  // optional int32 m_hpSectionNum = 17;
  if (has_m_hpsectionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_hpsectionnum(), output);
  }

  // optional int32 m_breedProb = 18;
  if (has_m_breedprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_breedprob(), output);
  }

  // optional int64 m_breedMonID = 19;
  if (has_m_breedmonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->m_breedmonid(), output);
  }

  // optional int32 m_breedMonLive = 20;
  if (has_m_breedmonlive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_breedmonlive(), output);
  }

  // optional string m_itemCost = 21;
  if (has_m_itemcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_itemcost().data(), this->m_itemcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->m_itemcost(), output);
  }

  // optional int32 m_isBornActionOn = 22;
  if (has_m_isbornactionon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_isbornactionon(), output);
  }

  // optional int32 m_belongshow = 23;
  if (has_m_belongshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_belongshow(), output);
  }

  // optional int32 m_dropGroupID = 24;
  if (has_m_dropgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_dropgroupid(), output);
  }

  // optional int32 m_harmdrop_type = 25;
  if (has_m_harmdrop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_harmdrop_type(), output);
  }

  // optional int32 m_joninper = 26;
  if (has_m_joninper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_joninper(), output);
  }

  // optional int32 m_btnRange = 27;
  if (has_m_btnrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_btnrange(), output);
  }

  // optional int64 m_btnId = 28;
  if (has_m_btnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->m_btnid(), output);
  }

  // optional int32 m_drivePoint = 29;
  if (has_m_drivepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->m_drivepoint(), output);
  }

  // optional int32 m_corpseID = 30;
  if (has_m_corpseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->m_corpseid(), output);
  }

  // optional int64 m_battle = 31;
  if (has_m_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->m_battle(), output);
  }

  // optional int32 m_lvSupPve = 32;
  if (has_m_lvsuppve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->m_lvsuppve(), output);
  }

  // optional int32 m_powerSupPve = 33;
  if (has_m_powersuppve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_powersuppve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_monsterID = 1;
  if (has_m_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_monsterid(), target);
  }

  // optional string m_monsterName = 2;
  if (has_m_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monstername().data(), this->m_monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_monstername(), target);
  }

  // optional string m_mask = 3;
  if (has_m_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mask().data(), this->m_mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_mask(), target);
  }

  // optional int32 m_functionType = 4;
  if (has_m_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_functiontype(), target);
  }

  // optional int64 m_functionValue = 5;
  if (has_m_functionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_functionvalue(), target);
  }

  // optional int32 m_taskType = 6;
  if (has_m_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_tasktype(), target);
  }

  // optional int32 m_profession = 7;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_profession(), target);
  }

  // optional int32 m_subProfession = 8;
  if (has_m_subprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_subprofession(), target);
  }

  // optional int32 m_damageAddType = 9;
  if (has_m_damageaddtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_damageaddtype(), target);
  }

  // optional int32 m_monsterLV = 10;
  if (has_m_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_monsterlv(), target);
  }

  // optional int32 m_droplimit = 11;
  if (has_m_droplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_droplimit(), target);
  }

  // optional int64 m_displayID = 12;
  if (has_m_displayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->m_displayid(), target);
  }

  // optional int32 m_bossID = 13;
  if (has_m_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_bossid(), target);
  }

  // optional int64 m_valuetype = 14;
  if (has_m_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->m_valuetype(), target);
  }

  // optional int32 m_valueParam = 15;
  if (has_m_valueparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_valueparam(), target);
  }

  // optional int64 m_aiId = 16;
  if (has_m_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->m_aiid(), target);
  }

  // optional int32 m_hpSectionNum = 17;
  if (has_m_hpsectionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_hpsectionnum(), target);
  }

  // optional int32 m_breedProb = 18;
  if (has_m_breedprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_breedprob(), target);
  }

  // optional int64 m_breedMonID = 19;
  if (has_m_breedmonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->m_breedmonid(), target);
  }

  // optional int32 m_breedMonLive = 20;
  if (has_m_breedmonlive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_breedmonlive(), target);
  }

  // optional string m_itemCost = 21;
  if (has_m_itemcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_itemcost().data(), this->m_itemcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->m_itemcost(), target);
  }

  // optional int32 m_isBornActionOn = 22;
  if (has_m_isbornactionon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_isbornactionon(), target);
  }

  // optional int32 m_belongshow = 23;
  if (has_m_belongshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_belongshow(), target);
  }

  // optional int32 m_dropGroupID = 24;
  if (has_m_dropgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_dropgroupid(), target);
  }

  // optional int32 m_harmdrop_type = 25;
  if (has_m_harmdrop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_harmdrop_type(), target);
  }

  // optional int32 m_joninper = 26;
  if (has_m_joninper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_joninper(), target);
  }

  // optional int32 m_btnRange = 27;
  if (has_m_btnrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_btnrange(), target);
  }

  // optional int64 m_btnId = 28;
  if (has_m_btnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->m_btnid(), target);
  }

  // optional int32 m_drivePoint = 29;
  if (has_m_drivepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->m_drivepoint(), target);
  }

  // optional int32 m_corpseID = 30;
  if (has_m_corpseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->m_corpseid(), target);
  }

  // optional int64 m_battle = 31;
  if (has_m_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->m_battle(), target);
  }

  // optional int32 m_lvSupPve = 32;
  if (has_m_lvsuppve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->m_lvsuppve(), target);
  }

  // optional int32 m_powerSupPve = 33;
  if (has_m_powersuppve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->m_powersuppve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_monsterID = 1;
    if (has_m_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_monsterid());
    }

    // optional string m_monsterName = 2;
    if (has_m_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_monstername());
    }

    // optional string m_mask = 3;
    if (has_m_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mask());
    }

    // optional int32 m_functionType = 4;
    if (has_m_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functiontype());
    }

    // optional int64 m_functionValue = 5;
    if (has_m_functionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_functionvalue());
    }

    // optional int32 m_taskType = 6;
    if (has_m_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tasktype());
    }

    // optional int32 m_profession = 7;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional int32 m_subProfession = 8;
    if (has_m_subprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subprofession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_damageAddType = 9;
    if (has_m_damageaddtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_damageaddtype());
    }

    // optional int32 m_monsterLV = 10;
    if (has_m_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterlv());
    }

    // optional int32 m_droplimit = 11;
    if (has_m_droplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_droplimit());
    }

    // optional int64 m_displayID = 12;
    if (has_m_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_displayid());
    }

    // optional int32 m_bossID = 13;
    if (has_m_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bossid());
    }

    // optional int64 m_valuetype = 14;
    if (has_m_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_valuetype());
    }

    // optional int32 m_valueParam = 15;
    if (has_m_valueparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_valueparam());
    }

    // optional int64 m_aiId = 16;
    if (has_m_aiid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_aiid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_hpSectionNum = 17;
    if (has_m_hpsectionnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hpsectionnum());
    }

    // optional int32 m_breedProb = 18;
    if (has_m_breedprob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breedprob());
    }

    // optional int64 m_breedMonID = 19;
    if (has_m_breedmonid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_breedmonid());
    }

    // optional int32 m_breedMonLive = 20;
    if (has_m_breedmonlive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breedmonlive());
    }

    // optional string m_itemCost = 21;
    if (has_m_itemcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_itemcost());
    }

    // optional int32 m_isBornActionOn = 22;
    if (has_m_isbornactionon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isbornactionon());
    }

    // optional int32 m_belongshow = 23;
    if (has_m_belongshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_belongshow());
    }

    // optional int32 m_dropGroupID = 24;
    if (has_m_dropgroupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropgroupid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_harmdrop_type = 25;
    if (has_m_harmdrop_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_harmdrop_type());
    }

    // optional int32 m_joninper = 26;
    if (has_m_joninper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_joninper());
    }

    // optional int32 m_btnRange = 27;
    if (has_m_btnrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_btnrange());
    }

    // optional int64 m_btnId = 28;
    if (has_m_btnid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_btnid());
    }

    // optional int32 m_drivePoint = 29;
    if (has_m_drivepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_drivepoint());
    }

    // optional int32 m_corpseID = 30;
    if (has_m_corpseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_corpseid());
    }

    // optional int64 m_battle = 31;
    if (has_m_battle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_battle());
    }

    // optional int32 m_lvSupPve = 32;
    if (has_m_lvsuppve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvsuppve());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 m_powerSupPve = 33;
    if (has_m_powersuppve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_powersuppve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterMonster::MergeFrom(const E_MonsterMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_monsterid()) {
      set_m_monsterid(from.m_monsterid());
    }
    if (from.has_m_monstername()) {
      set_m_monstername(from.m_monstername());
    }
    if (from.has_m_mask()) {
      set_m_mask(from.m_mask());
    }
    if (from.has_m_functiontype()) {
      set_m_functiontype(from.m_functiontype());
    }
    if (from.has_m_functionvalue()) {
      set_m_functionvalue(from.m_functionvalue());
    }
    if (from.has_m_tasktype()) {
      set_m_tasktype(from.m_tasktype());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_subprofession()) {
      set_m_subprofession(from.m_subprofession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_damageaddtype()) {
      set_m_damageaddtype(from.m_damageaddtype());
    }
    if (from.has_m_monsterlv()) {
      set_m_monsterlv(from.m_monsterlv());
    }
    if (from.has_m_droplimit()) {
      set_m_droplimit(from.m_droplimit());
    }
    if (from.has_m_displayid()) {
      set_m_displayid(from.m_displayid());
    }
    if (from.has_m_bossid()) {
      set_m_bossid(from.m_bossid());
    }
    if (from.has_m_valuetype()) {
      set_m_valuetype(from.m_valuetype());
    }
    if (from.has_m_valueparam()) {
      set_m_valueparam(from.m_valueparam());
    }
    if (from.has_m_aiid()) {
      set_m_aiid(from.m_aiid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_hpsectionnum()) {
      set_m_hpsectionnum(from.m_hpsectionnum());
    }
    if (from.has_m_breedprob()) {
      set_m_breedprob(from.m_breedprob());
    }
    if (from.has_m_breedmonid()) {
      set_m_breedmonid(from.m_breedmonid());
    }
    if (from.has_m_breedmonlive()) {
      set_m_breedmonlive(from.m_breedmonlive());
    }
    if (from.has_m_itemcost()) {
      set_m_itemcost(from.m_itemcost());
    }
    if (from.has_m_isbornactionon()) {
      set_m_isbornactionon(from.m_isbornactionon());
    }
    if (from.has_m_belongshow()) {
      set_m_belongshow(from.m_belongshow());
    }
    if (from.has_m_dropgroupid()) {
      set_m_dropgroupid(from.m_dropgroupid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_harmdrop_type()) {
      set_m_harmdrop_type(from.m_harmdrop_type());
    }
    if (from.has_m_joninper()) {
      set_m_joninper(from.m_joninper());
    }
    if (from.has_m_btnrange()) {
      set_m_btnrange(from.m_btnrange());
    }
    if (from.has_m_btnid()) {
      set_m_btnid(from.m_btnid());
    }
    if (from.has_m_drivepoint()) {
      set_m_drivepoint(from.m_drivepoint());
    }
    if (from.has_m_corpseid()) {
      set_m_corpseid(from.m_corpseid());
    }
    if (from.has_m_battle()) {
      set_m_battle(from.m_battle());
    }
    if (from.has_m_lvsuppve()) {
      set_m_lvsuppve(from.m_lvsuppve());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_powersuppve()) {
      set_m_powersuppve(from.m_powersuppve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterMonster::CopyFrom(const E_MonsterMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterMonster::IsInitialized() const {

  return true;
}

void E_MonsterMonster::Swap(E_MonsterMonster* other) {
  if (other != this) {
    std::swap(m_monsterid_, other->m_monsterid_);
    std::swap(m_monstername_, other->m_monstername_);
    std::swap(m_mask_, other->m_mask_);
    std::swap(m_functiontype_, other->m_functiontype_);
    std::swap(m_functionvalue_, other->m_functionvalue_);
    std::swap(m_tasktype_, other->m_tasktype_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_subprofession_, other->m_subprofession_);
    std::swap(m_damageaddtype_, other->m_damageaddtype_);
    std::swap(m_monsterlv_, other->m_monsterlv_);
    std::swap(m_droplimit_, other->m_droplimit_);
    std::swap(m_displayid_, other->m_displayid_);
    std::swap(m_bossid_, other->m_bossid_);
    std::swap(m_valuetype_, other->m_valuetype_);
    std::swap(m_valueparam_, other->m_valueparam_);
    std::swap(m_aiid_, other->m_aiid_);
    std::swap(m_hpsectionnum_, other->m_hpsectionnum_);
    std::swap(m_breedprob_, other->m_breedprob_);
    std::swap(m_breedmonid_, other->m_breedmonid_);
    std::swap(m_breedmonlive_, other->m_breedmonlive_);
    std::swap(m_itemcost_, other->m_itemcost_);
    std::swap(m_isbornactionon_, other->m_isbornactionon_);
    std::swap(m_belongshow_, other->m_belongshow_);
    std::swap(m_dropgroupid_, other->m_dropgroupid_);
    std::swap(m_harmdrop_type_, other->m_harmdrop_type_);
    std::swap(m_joninper_, other->m_joninper_);
    std::swap(m_btnrange_, other->m_btnrange_);
    std::swap(m_btnid_, other->m_btnid_);
    std::swap(m_drivepoint_, other->m_drivepoint_);
    std::swap(m_corpseid_, other->m_corpseid_);
    std::swap(m_battle_, other->m_battle_);
    std::swap(m_lvsuppve_, other->m_lvsuppve_);
    std::swap(m_powersuppve_, other->m_powersuppve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterMonster_descriptor_;
  metadata.reflection = E_MonsterMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MonsterMonster::kEMonsterMonsterListFieldNumber;
#endif  // !_MSC_VER

Sheet_MonsterMonster::Sheet_MonsterMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MonsterMonster::InitAsDefaultInstance() {
}

Sheet_MonsterMonster::Sheet_MonsterMonster(const Sheet_MonsterMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MonsterMonster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MonsterMonster::~Sheet_MonsterMonster() {
  SharedDtor();
}

void Sheet_MonsterMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MonsterMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MonsterMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MonsterMonster_descriptor_;
}

const Sheet_MonsterMonster& Sheet_MonsterMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

Sheet_MonsterMonster* Sheet_MonsterMonster::default_instance_ = NULL;

Sheet_MonsterMonster* Sheet_MonsterMonster::New() const {
  return new Sheet_MonsterMonster;
}

void Sheet_MonsterMonster::Clear() {
  e_monstermonster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MonsterMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MonsterMonster E_MonsterMonster_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MonsterMonster_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_monstermonster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MonsterMonster_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MonsterMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MonsterMonster E_MonsterMonster_List = 1;
  for (int i = 0; i < this->e_monstermonster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_monstermonster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MonsterMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MonsterMonster E_MonsterMonster_List = 1;
  for (int i = 0; i < this->e_monstermonster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_monstermonster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MonsterMonster::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MonsterMonster E_MonsterMonster_List = 1;
  total_size += 1 * this->e_monstermonster_list_size();
  for (int i = 0; i < this->e_monstermonster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_monstermonster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MonsterMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MonsterMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MonsterMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MonsterMonster::MergeFrom(const Sheet_MonsterMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_monstermonster_list_.MergeFrom(from.e_monstermonster_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MonsterMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MonsterMonster::CopyFrom(const Sheet_MonsterMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MonsterMonster::IsInitialized() const {

  return true;
}

void Sheet_MonsterMonster::Swap(Sheet_MonsterMonster* other) {
  if (other != this) {
    e_monstermonster_list_.Swap(&other->e_monstermonster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MonsterMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MonsterMonster_descriptor_;
  metadata.reflection = Sheet_MonsterMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MonsterDisplaySkillDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_MonsterDisplaySkillDesc::E_MonsterDisplaySkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterDisplaySkillDesc::InitAsDefaultInstance() {
}

E_MonsterDisplaySkillDesc::E_MonsterDisplaySkillDesc(const E_MonsterDisplaySkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterDisplaySkillDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterDisplaySkillDesc::~E_MonsterDisplaySkillDesc() {
  SharedDtor();
}

void E_MonsterDisplaySkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MonsterDisplaySkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterDisplaySkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterDisplaySkillDesc_descriptor_;
}

const E_MonsterDisplaySkillDesc& E_MonsterDisplaySkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterDisplaySkillDesc* E_MonsterDisplaySkillDesc::default_instance_ = NULL;

E_MonsterDisplaySkillDesc* E_MonsterDisplaySkillDesc::New() const {
  return new E_MonsterDisplaySkillDesc;
}

void E_MonsterDisplaySkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterDisplaySkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterDisplaySkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterDisplaySkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterDisplaySkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterDisplaySkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterDisplaySkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterDisplaySkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterDisplaySkillDesc::MergeFrom(const E_MonsterDisplaySkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterDisplaySkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterDisplaySkillDesc::CopyFrom(const E_MonsterDisplaySkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterDisplaySkillDesc::IsInitialized() const {

  return true;
}

void E_MonsterDisplaySkillDesc::Swap(E_MonsterDisplaySkillDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterDisplaySkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterDisplaySkillDesc_descriptor_;
  metadata.reflection = E_MonsterDisplaySkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MonsterDisplay::kMDisplayIDFieldNumber;
const int E_MonsterDisplay::kMModelOffsetsXFieldNumber;
const int E_MonsterDisplay::kMModelOffsetsYFieldNumber;
const int E_MonsterDisplay::kMModelScaleFieldNumber;
const int E_MonsterDisplay::kMModelRadiusFieldNumber;
const int E_MonsterDisplay::kMPathRadiusFieldNumber;
const int E_MonsterDisplay::kMCollisionRadiusFieldNumber;
const int E_MonsterDisplay::kMRSpeedFieldNumber;
const int E_MonsterDisplay::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_MonsterDisplay::E_MonsterDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterDisplay::InitAsDefaultInstance() {
}

E_MonsterDisplay::E_MonsterDisplay(const E_MonsterDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterDisplay::SharedCtor() {
  _cached_size_ = 0;
  m_displayid_ = GOOGLE_LONGLONG(0);
  m_modeloffsetsx_ = 0;
  m_modeloffsetsy_ = 0;
  m_modelscale_ = 0;
  m_modelradius_ = 0;
  m_pathradius_ = 0;
  m_collisionradius_ = 0;
  m_rspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterDisplay::~E_MonsterDisplay() {
  SharedDtor();
}

void E_MonsterDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MonsterDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterDisplay_descriptor_;
}

const E_MonsterDisplay& E_MonsterDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterDisplay* E_MonsterDisplay::default_instance_ = NULL;

E_MonsterDisplay* E_MonsterDisplay::New() const {
  return new E_MonsterDisplay;
}

void E_MonsterDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_displayid_ = GOOGLE_LONGLONG(0);
    m_modeloffsetsx_ = 0;
    m_modeloffsetsy_ = 0;
    m_modelscale_ = 0;
    m_modelradius_ = 0;
    m_pathradius_ = 0;
    m_collisionradius_ = 0;
    m_rspeed_ = 0;
  }
  m_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_displayID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_displayid_)));
          set_has_m_displayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_modelOffsetsX;
        break;
      }

      // optional int32 m_modelOffsetsX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelOffsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modeloffsetsx_)));
          set_has_m_modeloffsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_modelOffsetsY;
        break;
      }

      // optional int32 m_modelOffsetsY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelOffsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modeloffsetsy_)));
          set_has_m_modeloffsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_modelScale;
        break;
      }

      // optional int32 m_modelScale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modelscale_)));
          set_has_m_modelscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_modelRadius;
        break;
      }

      // optional int32 m_modelRadius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modelradius_)));
          set_has_m_modelradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_pathRadius;
        break;
      }

      // optional int32 m_pathRadius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pathRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pathradius_)));
          set_has_m_pathradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_collisionRadius;
        break;
      }

      // optional int32 m_collisionRadius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collisionRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collisionradius_)));
          set_has_m_collisionradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_rSpeed;
        break;
      }

      // optional int32 m_rSpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rspeed_)));
          set_has_m_rspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_skill;
        break;
      }

      // repeated .proto_ff.E_MonsterDisplaySkillDesc m_skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_displayID = 1;
  if (has_m_displayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_displayid(), output);
  }

  // optional int32 m_modelOffsetsX = 2;
  if (has_m_modeloffsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_modeloffsetsx(), output);
  }

  // optional int32 m_modelOffsetsY = 3;
  if (has_m_modeloffsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_modeloffsetsy(), output);
  }

  // optional int32 m_modelScale = 4;
  if (has_m_modelscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_modelscale(), output);
  }

  // optional int32 m_modelRadius = 5;
  if (has_m_modelradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_modelradius(), output);
  }

  // optional int32 m_pathRadius = 6;
  if (has_m_pathradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_pathradius(), output);
  }

  // optional int32 m_collisionRadius = 7;
  if (has_m_collisionradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_collisionradius(), output);
  }

  // optional int32 m_rSpeed = 8;
  if (has_m_rspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_rspeed(), output);
  }

  // repeated .proto_ff.E_MonsterDisplaySkillDesc m_skill = 9;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_displayID = 1;
  if (has_m_displayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_displayid(), target);
  }

  // optional int32 m_modelOffsetsX = 2;
  if (has_m_modeloffsetsx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_modeloffsetsx(), target);
  }

  // optional int32 m_modelOffsetsY = 3;
  if (has_m_modeloffsetsy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_modeloffsetsy(), target);
  }

  // optional int32 m_modelScale = 4;
  if (has_m_modelscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_modelscale(), target);
  }

  // optional int32 m_modelRadius = 5;
  if (has_m_modelradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_modelradius(), target);
  }

  // optional int32 m_pathRadius = 6;
  if (has_m_pathradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_pathradius(), target);
  }

  // optional int32 m_collisionRadius = 7;
  if (has_m_collisionradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_collisionradius(), target);
  }

  // optional int32 m_rSpeed = 8;
  if (has_m_rspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_rspeed(), target);
  }

  // repeated .proto_ff.E_MonsterDisplaySkillDesc m_skill = 9;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_displayID = 1;
    if (has_m_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_displayid());
    }

    // optional int32 m_modelOffsetsX = 2;
    if (has_m_modeloffsetsx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modeloffsetsx());
    }

    // optional int32 m_modelOffsetsY = 3;
    if (has_m_modeloffsetsy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modeloffsetsy());
    }

    // optional int32 m_modelScale = 4;
    if (has_m_modelscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modelscale());
    }

    // optional int32 m_modelRadius = 5;
    if (has_m_modelradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modelradius());
    }

    // optional int32 m_pathRadius = 6;
    if (has_m_pathradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pathradius());
    }

    // optional int32 m_collisionRadius = 7;
    if (has_m_collisionradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collisionradius());
    }

    // optional int32 m_rSpeed = 8;
    if (has_m_rspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rspeed());
    }

  }
  // repeated .proto_ff.E_MonsterDisplaySkillDesc m_skill = 9;
  total_size += 1 * this->m_skill_size();
  for (int i = 0; i < this->m_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterDisplay::MergeFrom(const E_MonsterDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_skill_.MergeFrom(from.m_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_displayid()) {
      set_m_displayid(from.m_displayid());
    }
    if (from.has_m_modeloffsetsx()) {
      set_m_modeloffsetsx(from.m_modeloffsetsx());
    }
    if (from.has_m_modeloffsetsy()) {
      set_m_modeloffsetsy(from.m_modeloffsetsy());
    }
    if (from.has_m_modelscale()) {
      set_m_modelscale(from.m_modelscale());
    }
    if (from.has_m_modelradius()) {
      set_m_modelradius(from.m_modelradius());
    }
    if (from.has_m_pathradius()) {
      set_m_pathradius(from.m_pathradius());
    }
    if (from.has_m_collisionradius()) {
      set_m_collisionradius(from.m_collisionradius());
    }
    if (from.has_m_rspeed()) {
      set_m_rspeed(from.m_rspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterDisplay::CopyFrom(const E_MonsterDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterDisplay::IsInitialized() const {

  return true;
}

void E_MonsterDisplay::Swap(E_MonsterDisplay* other) {
  if (other != this) {
    std::swap(m_displayid_, other->m_displayid_);
    std::swap(m_modeloffsetsx_, other->m_modeloffsetsx_);
    std::swap(m_modeloffsetsy_, other->m_modeloffsetsy_);
    std::swap(m_modelscale_, other->m_modelscale_);
    std::swap(m_modelradius_, other->m_modelradius_);
    std::swap(m_pathradius_, other->m_pathradius_);
    std::swap(m_collisionradius_, other->m_collisionradius_);
    std::swap(m_rspeed_, other->m_rspeed_);
    m_skill_.Swap(&other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterDisplay_descriptor_;
  metadata.reflection = E_MonsterDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MonsterDisplay::kEMonsterDisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_MonsterDisplay::Sheet_MonsterDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MonsterDisplay::InitAsDefaultInstance() {
}

Sheet_MonsterDisplay::Sheet_MonsterDisplay(const Sheet_MonsterDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MonsterDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MonsterDisplay::~Sheet_MonsterDisplay() {
  SharedDtor();
}

void Sheet_MonsterDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MonsterDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MonsterDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MonsterDisplay_descriptor_;
}

const Sheet_MonsterDisplay& Sheet_MonsterDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

Sheet_MonsterDisplay* Sheet_MonsterDisplay::default_instance_ = NULL;

Sheet_MonsterDisplay* Sheet_MonsterDisplay::New() const {
  return new Sheet_MonsterDisplay;
}

void Sheet_MonsterDisplay::Clear() {
  e_monsterdisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MonsterDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MonsterDisplay E_MonsterDisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MonsterDisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_monsterdisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MonsterDisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MonsterDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MonsterDisplay E_MonsterDisplay_List = 1;
  for (int i = 0; i < this->e_monsterdisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_monsterdisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MonsterDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MonsterDisplay E_MonsterDisplay_List = 1;
  for (int i = 0; i < this->e_monsterdisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_monsterdisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MonsterDisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MonsterDisplay E_MonsterDisplay_List = 1;
  total_size += 1 * this->e_monsterdisplay_list_size();
  for (int i = 0; i < this->e_monsterdisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_monsterdisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MonsterDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MonsterDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MonsterDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MonsterDisplay::MergeFrom(const Sheet_MonsterDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_monsterdisplay_list_.MergeFrom(from.e_monsterdisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MonsterDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MonsterDisplay::CopyFrom(const Sheet_MonsterDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MonsterDisplay::IsInitialized() const {

  return true;
}

void Sheet_MonsterDisplay::Swap(Sheet_MonsterDisplay* other) {
  if (other != this) {
    e_monsterdisplay_list_.Swap(&other->e_monsterdisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MonsterDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MonsterDisplay_descriptor_;
  metadata.reflection = Sheet_MonsterDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MonsterValue::kMIDFieldNumber;
const int E_MonsterValue::kMTypeFieldNumber;
const int E_MonsterValue::kMMonsterLVFieldNumber;
const int E_MonsterValue::kMMaxHpFieldNumber;
const int E_MonsterValue::kMAtkFieldNumber;
const int E_MonsterValue::kMDefFieldNumber;
const int E_MonsterValue::kMBrkArmorFieldNumber;
const int E_MonsterValue::kMFiveDamFieldNumber;
const int E_MonsterValue::kMFiveArmorFieldNumber;
const int E_MonsterValue::kMThumpRateFieldNumber;
const int E_MonsterValue::kMThumpResistFieldNumber;
const int E_MonsterValue::kMSkyFieldNumber;
const int E_MonsterValue::kMSkyDamFieldNumber;
const int E_MonsterValue::kMSkyReduResistFieldNumber;
const int E_MonsterValue::kMSkyResistFieldNumber;
const int E_MonsterValue::kMKillGodFieldNumber;
const int E_MonsterValue::kMGodBodyFieldNumber;
const int E_MonsterValue::kMMortalRateFieldNumber;
const int E_MonsterValue::kMMortalResistFieldNumber;
const int E_MonsterValue::kMFairyRateFieldNumber;
const int E_MonsterValue::kMFairyResistFieldNumber;
const int E_MonsterValue::kMGodRateFieldNumber;
const int E_MonsterValue::kMGodResistFieldNumber;
const int E_MonsterValue::kMCritRateFieldNumber;
const int E_MonsterValue::kMCritResitRateFieldNumber;
const int E_MonsterValue::kMCritDamFieldNumber;
const int E_MonsterValue::kMCritReduFieldNumber;
const int E_MonsterValue::kMBatterRateFieldNumber;
const int E_MonsterValue::kMBatterResistFieldNumber;
const int E_MonsterValue::kMBatterDamFieldNumber;
const int E_MonsterValue::kMBatterReduFieldNumber;
const int E_MonsterValue::kMBrkdownRateFieldNumber;
const int E_MonsterValue::kMBrkdownResistFieldNumber;
const int E_MonsterValue::kMDamAddFieldNumber;
const int E_MonsterValue::kMDamReduFieldNumber;
const int E_MonsterValue::kMAllAddFieldNumber;
const int E_MonsterValue::kMAllReduFieldNumber;
const int E_MonsterValue::kMSkillAddFieldNumber;
const int E_MonsterValue::kMSkillReduFieldNumber;
const int E_MonsterValue::kMReboundDamFieldNumber;
const int E_MonsterValue::kMHpStealFieldNumber;
const int E_MonsterValue::kMDodgeRateFieldNumber;
const int E_MonsterValue::kMHitRateFieldNumber;
const int E_MonsterValue::kMBlkRateFieldNumber;
const int E_MonsterValue::kMBrkBlkRateFieldNumber;
const int E_MonsterValue::kMBlkFreeFieldNumber;
const int E_MonsterValue::kMBlkPierceFieldNumber;
const int E_MonsterValue::kMRelArmorFieldNumber;
const int E_MonsterValue::kMRelDamFieldNumber;
const int E_MonsterValue::kMFiveResistFieldNumber;
const int E_MonsterValue::kMFiveResistReduFieldNumber;
const int E_MonsterValue::kMFireAddFieldNumber;
const int E_MonsterValue::kMFireReduFieldNumber;
const int E_MonsterValue::kMIceAddFieldNumber;
const int E_MonsterValue::kMIceReduFieldNumber;
const int E_MonsterValue::kMThunderAddFieldNumber;
const int E_MonsterValue::kMThunderRduFieldNumber;
const int E_MonsterValue::kMPlayerAddFieldNumber;
const int E_MonsterValue::kMPlayerReduFieldNumber;
const int E_MonsterValue::kMLeaderAddFieldNumber;
const int E_MonsterValue::kMLeaderReduFieldNumber;
const int E_MonsterValue::kMMonAddFieldNumber;
const int E_MonsterValue::kMMonReduFieldNumber;
const int E_MonsterValue::kMVarReduFieldNumber;
const int E_MonsterValue::kMVarAddFieldNumber;
const int E_MonsterValue::kMUnusualResistFieldNumber;
const int E_MonsterValue::kMUnusualHitFieldNumber;
const int E_MonsterValue::kMHpRecoverFieldNumber;
const int E_MonsterValue::kMUnusualAddFieldNumber;
const int E_MonsterValue::kMFixRecoverFieldNumber;
const int E_MonsterValue::kMHighHpAddFieldNumber;
const int E_MonsterValue::kMRecoverHpAddFieldNumber;
const int E_MonsterValue::kMWeekAddFieldNumber;
const int E_MonsterValue::kMShieldFieldNumber;
const int E_MonsterValue::kMExpFieldNumber;
#endif  // !_MSC_VER

E_MonsterValue::E_MonsterValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterValue::InitAsDefaultInstance() {
}

E_MonsterValue::E_MonsterValue(const E_MonsterValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterValue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_monsterlv_ = 0;
  m_max_hp_ = GOOGLE_LONGLONG(0);
  m_atk_ = GOOGLE_LONGLONG(0);
  m_def_ = GOOGLE_LONGLONG(0);
  m_brk_armor_ = GOOGLE_LONGLONG(0);
  m_five_dam_ = GOOGLE_LONGLONG(0);
  m_five_armor_ = GOOGLE_LONGLONG(0);
  m_thump_rate_ = GOOGLE_LONGLONG(0);
  m_thump_resist_ = GOOGLE_LONGLONG(0);
  m_sky_ = GOOGLE_LONGLONG(0);
  m_sky_dam_ = GOOGLE_LONGLONG(0);
  m_sky_redu_resist_ = GOOGLE_LONGLONG(0);
  m_sky_resist_ = GOOGLE_LONGLONG(0);
  m_kill_god_ = GOOGLE_LONGLONG(0);
  m_god_body_ = GOOGLE_LONGLONG(0);
  m_mortal_rate_ = GOOGLE_LONGLONG(0);
  m_mortal_resist_ = GOOGLE_LONGLONG(0);
  m_fairy_rate_ = GOOGLE_LONGLONG(0);
  m_fairy_resist_ = GOOGLE_LONGLONG(0);
  m_god_rate_ = GOOGLE_LONGLONG(0);
  m_god_resist_ = GOOGLE_LONGLONG(0);
  m_crit_rate_ = GOOGLE_LONGLONG(0);
  m_crit_resit_rate_ = GOOGLE_LONGLONG(0);
  m_crit_dam_ = GOOGLE_LONGLONG(0);
  m_crit_redu_ = GOOGLE_LONGLONG(0);
  m_batter_rate_ = GOOGLE_LONGLONG(0);
  m_batter_resist_ = GOOGLE_LONGLONG(0);
  m_batter_dam_ = GOOGLE_LONGLONG(0);
  m_batter_redu_ = GOOGLE_LONGLONG(0);
  m_brkdown_rate_ = GOOGLE_LONGLONG(0);
  m_brkdown_resist_ = GOOGLE_LONGLONG(0);
  m_dam_add_ = GOOGLE_LONGLONG(0);
  m_dam_redu_ = GOOGLE_LONGLONG(0);
  m_all_add_ = GOOGLE_LONGLONG(0);
  m_all_redu_ = GOOGLE_LONGLONG(0);
  m_skill_add_ = GOOGLE_LONGLONG(0);
  m_skill_redu_ = GOOGLE_LONGLONG(0);
  m_rebound_dam_ = GOOGLE_LONGLONG(0);
  m_hp_steal_ = GOOGLE_LONGLONG(0);
  m_dodge_rate_ = GOOGLE_LONGLONG(0);
  m_hit_rate_ = GOOGLE_LONGLONG(0);
  m_blk_rate_ = GOOGLE_LONGLONG(0);
  m_brk_blk_rate_ = GOOGLE_LONGLONG(0);
  m_blk_free_ = GOOGLE_LONGLONG(0);
  m_blk_pierce_ = GOOGLE_LONGLONG(0);
  m_rel_armor_ = GOOGLE_LONGLONG(0);
  m_rel_dam_ = GOOGLE_LONGLONG(0);
  m_five_resist_ = GOOGLE_LONGLONG(0);
  m_five_resist_redu_ = GOOGLE_LONGLONG(0);
  m_fire_add_ = GOOGLE_LONGLONG(0);
  m_fire_redu_ = GOOGLE_LONGLONG(0);
  m_ice_add_ = GOOGLE_LONGLONG(0);
  m_ice_redu_ = GOOGLE_LONGLONG(0);
  m_thunder_add_ = GOOGLE_LONGLONG(0);
  m_thunder_rdu_ = GOOGLE_LONGLONG(0);
  m_player_add_ = GOOGLE_LONGLONG(0);
  m_player_redu_ = GOOGLE_LONGLONG(0);
  m_leader_add_ = GOOGLE_LONGLONG(0);
  m_leader_redu_ = GOOGLE_LONGLONG(0);
  m_mon_add_ = GOOGLE_LONGLONG(0);
  m_mon_redu_ = GOOGLE_LONGLONG(0);
  m_var_redu_ = GOOGLE_LONGLONG(0);
  m_var_add_ = GOOGLE_LONGLONG(0);
  m_unusual_resist_ = GOOGLE_LONGLONG(0);
  m_unusual_hit_ = GOOGLE_LONGLONG(0);
  m_hp_recover_ = GOOGLE_LONGLONG(0);
  m_unusual_add_ = GOOGLE_LONGLONG(0);
  m_fix_recover_ = GOOGLE_LONGLONG(0);
  m_high_hp_add_ = GOOGLE_LONGLONG(0);
  m_recover_hp_add_ = GOOGLE_LONGLONG(0);
  m_week_add_ = GOOGLE_LONGLONG(0);
  m_shield_ = GOOGLE_LONGLONG(0);
  m_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterValue::~E_MonsterValue() {
  SharedDtor();
}

void E_MonsterValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MonsterValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterValue_descriptor_;
}

const E_MonsterValue& E_MonsterValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterValue* E_MonsterValue::default_instance_ = NULL;

E_MonsterValue* E_MonsterValue::New() const {
  return new E_MonsterValue;
}

void E_MonsterValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    m_monsterlv_ = 0;
    m_max_hp_ = GOOGLE_LONGLONG(0);
    m_atk_ = GOOGLE_LONGLONG(0);
    m_def_ = GOOGLE_LONGLONG(0);
    m_brk_armor_ = GOOGLE_LONGLONG(0);
    m_five_dam_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_five_armor_ = GOOGLE_LONGLONG(0);
    m_thump_rate_ = GOOGLE_LONGLONG(0);
    m_thump_resist_ = GOOGLE_LONGLONG(0);
    m_sky_ = GOOGLE_LONGLONG(0);
    m_sky_dam_ = GOOGLE_LONGLONG(0);
    m_sky_redu_resist_ = GOOGLE_LONGLONG(0);
    m_sky_resist_ = GOOGLE_LONGLONG(0);
    m_kill_god_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_god_body_ = GOOGLE_LONGLONG(0);
    m_mortal_rate_ = GOOGLE_LONGLONG(0);
    m_mortal_resist_ = GOOGLE_LONGLONG(0);
    m_fairy_rate_ = GOOGLE_LONGLONG(0);
    m_fairy_resist_ = GOOGLE_LONGLONG(0);
    m_god_rate_ = GOOGLE_LONGLONG(0);
    m_god_resist_ = GOOGLE_LONGLONG(0);
    m_crit_rate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_crit_resit_rate_ = GOOGLE_LONGLONG(0);
    m_crit_dam_ = GOOGLE_LONGLONG(0);
    m_crit_redu_ = GOOGLE_LONGLONG(0);
    m_batter_rate_ = GOOGLE_LONGLONG(0);
    m_batter_resist_ = GOOGLE_LONGLONG(0);
    m_batter_dam_ = GOOGLE_LONGLONG(0);
    m_batter_redu_ = GOOGLE_LONGLONG(0);
    m_brkdown_rate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_brkdown_resist_ = GOOGLE_LONGLONG(0);
    m_dam_add_ = GOOGLE_LONGLONG(0);
    m_dam_redu_ = GOOGLE_LONGLONG(0);
    m_all_add_ = GOOGLE_LONGLONG(0);
    m_all_redu_ = GOOGLE_LONGLONG(0);
    m_skill_add_ = GOOGLE_LONGLONG(0);
    m_skill_redu_ = GOOGLE_LONGLONG(0);
    m_rebound_dam_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    m_hp_steal_ = GOOGLE_LONGLONG(0);
    m_dodge_rate_ = GOOGLE_LONGLONG(0);
    m_hit_rate_ = GOOGLE_LONGLONG(0);
    m_blk_rate_ = GOOGLE_LONGLONG(0);
    m_brk_blk_rate_ = GOOGLE_LONGLONG(0);
    m_blk_free_ = GOOGLE_LONGLONG(0);
    m_blk_pierce_ = GOOGLE_LONGLONG(0);
    m_rel_armor_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    m_rel_dam_ = GOOGLE_LONGLONG(0);
    m_five_resist_ = GOOGLE_LONGLONG(0);
    m_five_resist_redu_ = GOOGLE_LONGLONG(0);
    m_fire_add_ = GOOGLE_LONGLONG(0);
    m_fire_redu_ = GOOGLE_LONGLONG(0);
    m_ice_add_ = GOOGLE_LONGLONG(0);
    m_ice_redu_ = GOOGLE_LONGLONG(0);
    m_thunder_add_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    m_thunder_rdu_ = GOOGLE_LONGLONG(0);
    m_player_add_ = GOOGLE_LONGLONG(0);
    m_player_redu_ = GOOGLE_LONGLONG(0);
    m_leader_add_ = GOOGLE_LONGLONG(0);
    m_leader_redu_ = GOOGLE_LONGLONG(0);
    m_mon_add_ = GOOGLE_LONGLONG(0);
    m_mon_redu_ = GOOGLE_LONGLONG(0);
    m_var_redu_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    m_var_add_ = GOOGLE_LONGLONG(0);
    m_unusual_resist_ = GOOGLE_LONGLONG(0);
    m_unusual_hit_ = GOOGLE_LONGLONG(0);
    m_hp_recover_ = GOOGLE_LONGLONG(0);
    m_unusual_add_ = GOOGLE_LONGLONG(0);
    m_fix_recover_ = GOOGLE_LONGLONG(0);
    m_high_hp_add_ = GOOGLE_LONGLONG(0);
    m_recover_hp_add_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    m_week_add_ = GOOGLE_LONGLONG(0);
    m_shield_ = GOOGLE_LONGLONG(0);
    m_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_monsterLV;
        break;
      }

      // optional int32 m_monsterLV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterlv_)));
          set_has_m_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_max_Hp;
        break;
      }

      // optional int64 m_max_Hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_max_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_max_hp_)));
          set_has_m_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_atk;
        break;
      }

      // optional int64 m_atk = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_atk_)));
          set_has_m_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_def;
        break;
      }

      // optional int64 m_def = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_def_)));
          set_has_m_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_brk_Armor;
        break;
      }

      // optional int64 m_brk_Armor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_brk_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_brk_armor_)));
          set_has_m_brk_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_five_Dam;
        break;
      }

      // optional int64 m_five_Dam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_five_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_five_dam_)));
          set_has_m_five_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_five_Armor;
        break;
      }

      // optional int64 m_five_Armor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_five_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_five_armor_)));
          set_has_m_five_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_thump_Rate;
        break;
      }

      // optional int64 m_thump_Rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_thump_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_thump_rate_)));
          set_has_m_thump_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_thump_Resist;
        break;
      }

      // optional int64 m_thump_Resist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_thump_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_thump_resist_)));
          set_has_m_thump_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_sky;
        break;
      }

      // optional int64 m_sky = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sky_)));
          set_has_m_sky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_sky_Dam;
        break;
      }

      // optional int64 m_sky_Dam = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sky_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sky_dam_)));
          set_has_m_sky_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_sky_Redu_Resist;
        break;
      }

      // optional int64 m_sky_Redu_Resist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sky_Redu_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sky_redu_resist_)));
          set_has_m_sky_redu_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_sky_Resist;
        break;
      }

      // optional int64 m_sky_Resist = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sky_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sky_resist_)));
          set_has_m_sky_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_kill_God;
        break;
      }

      // optional int64 m_kill_God = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_kill_God:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_kill_god_)));
          set_has_m_kill_god();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_god_Body;
        break;
      }

      // optional int64 m_god_Body = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_god_Body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_god_body_)));
          set_has_m_god_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_mortal_Rate;
        break;
      }

      // optional int64 m_mortal_Rate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mortal_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mortal_rate_)));
          set_has_m_mortal_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_mortal_Resist;
        break;
      }

      // optional int64 m_mortal_Resist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mortal_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mortal_resist_)));
          set_has_m_mortal_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_fairy_Rate;
        break;
      }

      // optional int64 m_fairy_Rate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fairy_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fairy_rate_)));
          set_has_m_fairy_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_fairy_Resist;
        break;
      }

      // optional int64 m_fairy_Resist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fairy_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fairy_resist_)));
          set_has_m_fairy_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_god_Rate;
        break;
      }

      // optional int64 m_god_Rate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_god_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_god_rate_)));
          set_has_m_god_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_god_Resist;
        break;
      }

      // optional int64 m_god_Resist = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_god_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_god_resist_)));
          set_has_m_god_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_crit_Rate;
        break;
      }

      // optional int64 m_crit_Rate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_crit_rate_)));
          set_has_m_crit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_crit_resit_Rate;
        break;
      }

      // optional int64 m_crit_resit_Rate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crit_resit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_crit_resit_rate_)));
          set_has_m_crit_resit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_crit_Dam;
        break;
      }

      // optional int64 m_crit_Dam = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crit_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_crit_dam_)));
          set_has_m_crit_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_crit_Redu;
        break;
      }

      // optional int64 m_crit_Redu = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crit_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_crit_redu_)));
          set_has_m_crit_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_batter_Rate;
        break;
      }

      // optional int64 m_batter_Rate = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_batter_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_batter_rate_)));
          set_has_m_batter_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_batter_Resist;
        break;
      }

      // optional int64 m_batter_Resist = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_batter_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_batter_resist_)));
          set_has_m_batter_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_batter_Dam;
        break;
      }

      // optional int64 m_batter_Dam = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_batter_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_batter_dam_)));
          set_has_m_batter_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_batter_Redu;
        break;
      }

      // optional int64 m_batter_Redu = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_batter_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_batter_redu_)));
          set_has_m_batter_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_brkdown_Rate;
        break;
      }

      // optional int64 m_brkdown_Rate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_brkdown_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_brkdown_rate_)));
          set_has_m_brkdown_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_brkdown_Resist;
        break;
      }

      // optional int64 m_brkdown_Resist = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_brkdown_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_brkdown_resist_)));
          set_has_m_brkdown_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_m_dam_Add;
        break;
      }

      // optional int64 m_dam_Add = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dam_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_dam_add_)));
          set_has_m_dam_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_m_dam_Redu;
        break;
      }

      // optional int64 m_dam_Redu = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dam_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_dam_redu_)));
          set_has_m_dam_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_all_Add;
        break;
      }

      // optional int64 m_all_Add = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_all_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_all_add_)));
          set_has_m_all_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_all_Redu;
        break;
      }

      // optional int64 m_all_Redu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_all_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_all_redu_)));
          set_has_m_all_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_m_skill_Add;
        break;
      }

      // optional int64 m_skill_Add = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_skill_add_)));
          set_has_m_skill_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_m_skill_Redu;
        break;
      }

      // optional int64 m_skill_Redu = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_skill_redu_)));
          set_has_m_skill_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_m_rebound_Dam;
        break;
      }

      // optional int64 m_rebound_Dam = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rebound_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_rebound_dam_)));
          set_has_m_rebound_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_m_hp_Steal;
        break;
      }

      // optional int64 m_hp_Steal = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hp_Steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_hp_steal_)));
          set_has_m_hp_steal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_m_dodge_Rate;
        break;
      }

      // optional int64 m_dodge_Rate = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dodge_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_dodge_rate_)));
          set_has_m_dodge_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_m_hit_Rate;
        break;
      }

      // optional int64 m_hit_Rate = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_hit_rate_)));
          set_has_m_hit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_m_blk_Rate;
        break;
      }

      // optional int64 m_blk_Rate = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_blk_rate_)));
          set_has_m_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_m_brk_blk_Rate;
        break;
      }

      // optional int64 m_brk_blk_Rate = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_brk_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_brk_blk_rate_)));
          set_has_m_brk_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_m_blk_Free;
        break;
      }

      // optional int64 m_blk_Free = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_blk_Free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_blk_free_)));
          set_has_m_blk_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_m_blk_Pierce;
        break;
      }

      // optional int64 m_blk_Pierce = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_blk_Pierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_blk_pierce_)));
          set_has_m_blk_pierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_m_rel_Armor;
        break;
      }

      // optional int64 m_rel_Armor = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rel_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_rel_armor_)));
          set_has_m_rel_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_m_rel_Dam;
        break;
      }

      // optional int64 m_rel_Dam = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rel_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_rel_dam_)));
          set_has_m_rel_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_m_five_Resist;
        break;
      }

      // optional int64 m_five_Resist = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_five_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_five_resist_)));
          set_has_m_five_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_m_five_resist_Redu;
        break;
      }

      // optional int64 m_five_resist_Redu = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_five_resist_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_five_resist_redu_)));
          set_has_m_five_resist_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_m_fire_Add;
        break;
      }

      // optional int64 m_fire_Add = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fire_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fire_add_)));
          set_has_m_fire_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_m_fire_Redu;
        break;
      }

      // optional int64 m_fire_Redu = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fire_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fire_redu_)));
          set_has_m_fire_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_m_ice_Add;
        break;
      }

      // optional int64 m_ice_Add = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ice_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_ice_add_)));
          set_has_m_ice_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_m_ice_Redu;
        break;
      }

      // optional int64 m_ice_Redu = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ice_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_ice_redu_)));
          set_has_m_ice_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_m_thunder_Add;
        break;
      }

      // optional int64 m_thunder_Add = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_thunder_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_thunder_add_)));
          set_has_m_thunder_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_m_thunder_Rdu;
        break;
      }

      // optional int64 m_thunder_Rdu = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_thunder_Rdu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_thunder_rdu_)));
          set_has_m_thunder_rdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_m_player_Add;
        break;
      }

      // optional int64 m_player_Add = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_player_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_player_add_)));
          set_has_m_player_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_m_player_Redu;
        break;
      }

      // optional int64 m_player_Redu = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_player_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_player_redu_)));
          set_has_m_player_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_m_leader_Add;
        break;
      }

      // optional int64 m_leader_Add = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leader_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_leader_add_)));
          set_has_m_leader_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_m_leader_Redu;
        break;
      }

      // optional int64 m_leader_Redu = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leader_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_leader_redu_)));
          set_has_m_leader_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_m_mon_Add;
        break;
      }

      // optional int64 m_mon_Add = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mon_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mon_add_)));
          set_has_m_mon_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_m_mon_Redu;
        break;
      }

      // optional int64 m_mon_Redu = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mon_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mon_redu_)));
          set_has_m_mon_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_m_var_Redu;
        break;
      }

      // optional int64 m_var_Redu = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_var_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_var_redu_)));
          set_has_m_var_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_m_var_Add;
        break;
      }

      // optional int64 m_var_Add = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_var_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_var_add_)));
          set_has_m_var_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_m_unusual_Resist;
        break;
      }

      // optional int64 m_unusual_Resist = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unusual_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_unusual_resist_)));
          set_has_m_unusual_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_m_unusual_Hit;
        break;
      }

      // optional int64 m_unusual_Hit = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unusual_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_unusual_hit_)));
          set_has_m_unusual_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_m_hp_Recover;
        break;
      }

      // optional int64 m_hp_Recover = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hp_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_hp_recover_)));
          set_has_m_hp_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_m_unusual_Add;
        break;
      }

      // optional int64 m_unusual_Add = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unusual_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_unusual_add_)));
          set_has_m_unusual_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_m_fix_Recover;
        break;
      }

      // optional int64 m_fix_Recover = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fix_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fix_recover_)));
          set_has_m_fix_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_m_high_hp_Add;
        break;
      }

      // optional int64 m_high_hp_Add = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_high_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_high_hp_add_)));
          set_has_m_high_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_m_recover_hp_Add;
        break;
      }

      // optional int64 m_recover_hp_Add = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recover_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_recover_hp_add_)));
          set_has_m_recover_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_m_week_Add;
        break;
      }

      // optional int64 m_week_Add = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_week_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_week_add_)));
          set_has_m_week_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_m_shield;
        break;
      }

      // optional int64 m_shield = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_shield_)));
          set_has_m_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_monsterLV = 3;
  if (has_m_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_monsterlv(), output);
  }

  // optional int64 m_max_Hp = 4;
  if (has_m_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_max_hp(), output);
  }

  // optional int64 m_atk = 5;
  if (has_m_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_atk(), output);
  }

  // optional int64 m_def = 6;
  if (has_m_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_def(), output);
  }

  // optional int64 m_brk_Armor = 7;
  if (has_m_brk_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_brk_armor(), output);
  }

  // optional int64 m_five_Dam = 8;
  if (has_m_five_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_five_dam(), output);
  }

  // optional int64 m_five_Armor = 9;
  if (has_m_five_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->m_five_armor(), output);
  }

  // optional int64 m_thump_Rate = 10;
  if (has_m_thump_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->m_thump_rate(), output);
  }

  // optional int64 m_thump_Resist = 11;
  if (has_m_thump_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->m_thump_resist(), output);
  }

  // optional int64 m_sky = 12;
  if (has_m_sky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->m_sky(), output);
  }

  // optional int64 m_sky_Dam = 13;
  if (has_m_sky_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->m_sky_dam(), output);
  }

  // optional int64 m_sky_Redu_Resist = 14;
  if (has_m_sky_redu_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->m_sky_redu_resist(), output);
  }

  // optional int64 m_sky_Resist = 15;
  if (has_m_sky_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->m_sky_resist(), output);
  }

  // optional int64 m_kill_God = 16;
  if (has_m_kill_god()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->m_kill_god(), output);
  }

  // optional int64 m_god_Body = 17;
  if (has_m_god_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->m_god_body(), output);
  }

  // optional int64 m_mortal_Rate = 18;
  if (has_m_mortal_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->m_mortal_rate(), output);
  }

  // optional int64 m_mortal_Resist = 19;
  if (has_m_mortal_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->m_mortal_resist(), output);
  }

  // optional int64 m_fairy_Rate = 20;
  if (has_m_fairy_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->m_fairy_rate(), output);
  }

  // optional int64 m_fairy_Resist = 21;
  if (has_m_fairy_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->m_fairy_resist(), output);
  }

  // optional int64 m_god_Rate = 22;
  if (has_m_god_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->m_god_rate(), output);
  }

  // optional int64 m_god_Resist = 23;
  if (has_m_god_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->m_god_resist(), output);
  }

  // optional int64 m_crit_Rate = 24;
  if (has_m_crit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->m_crit_rate(), output);
  }

  // optional int64 m_crit_resit_Rate = 25;
  if (has_m_crit_resit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->m_crit_resit_rate(), output);
  }

  // optional int64 m_crit_Dam = 26;
  if (has_m_crit_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->m_crit_dam(), output);
  }

  // optional int64 m_crit_Redu = 27;
  if (has_m_crit_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->m_crit_redu(), output);
  }

  // optional int64 m_batter_Rate = 28;
  if (has_m_batter_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->m_batter_rate(), output);
  }

  // optional int64 m_batter_Resist = 29;
  if (has_m_batter_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->m_batter_resist(), output);
  }

  // optional int64 m_batter_Dam = 30;
  if (has_m_batter_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->m_batter_dam(), output);
  }

  // optional int64 m_batter_Redu = 31;
  if (has_m_batter_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->m_batter_redu(), output);
  }

  // optional int64 m_brkdown_Rate = 32;
  if (has_m_brkdown_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->m_brkdown_rate(), output);
  }

  // optional int64 m_brkdown_Resist = 33;
  if (has_m_brkdown_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->m_brkdown_resist(), output);
  }

  // optional int64 m_dam_Add = 34;
  if (has_m_dam_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->m_dam_add(), output);
  }

  // optional int64 m_dam_Redu = 35;
  if (has_m_dam_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->m_dam_redu(), output);
  }

  // optional int64 m_all_Add = 36;
  if (has_m_all_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->m_all_add(), output);
  }

  // optional int64 m_all_Redu = 37;
  if (has_m_all_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->m_all_redu(), output);
  }

  // optional int64 m_skill_Add = 38;
  if (has_m_skill_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->m_skill_add(), output);
  }

  // optional int64 m_skill_Redu = 39;
  if (has_m_skill_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->m_skill_redu(), output);
  }

  // optional int64 m_rebound_Dam = 40;
  if (has_m_rebound_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->m_rebound_dam(), output);
  }

  // optional int64 m_hp_Steal = 41;
  if (has_m_hp_steal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->m_hp_steal(), output);
  }

  // optional int64 m_dodge_Rate = 42;
  if (has_m_dodge_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->m_dodge_rate(), output);
  }

  // optional int64 m_hit_Rate = 43;
  if (has_m_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->m_hit_rate(), output);
  }

  // optional int64 m_blk_Rate = 44;
  if (has_m_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->m_blk_rate(), output);
  }

  // optional int64 m_brk_blk_Rate = 45;
  if (has_m_brk_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->m_brk_blk_rate(), output);
  }

  // optional int64 m_blk_Free = 46;
  if (has_m_blk_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->m_blk_free(), output);
  }

  // optional int64 m_blk_Pierce = 47;
  if (has_m_blk_pierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->m_blk_pierce(), output);
  }

  // optional int64 m_rel_Armor = 48;
  if (has_m_rel_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->m_rel_armor(), output);
  }

  // optional int64 m_rel_Dam = 49;
  if (has_m_rel_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->m_rel_dam(), output);
  }

  // optional int64 m_five_Resist = 50;
  if (has_m_five_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->m_five_resist(), output);
  }

  // optional int64 m_five_resist_Redu = 51;
  if (has_m_five_resist_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->m_five_resist_redu(), output);
  }

  // optional int64 m_fire_Add = 52;
  if (has_m_fire_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->m_fire_add(), output);
  }

  // optional int64 m_fire_Redu = 53;
  if (has_m_fire_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(53, this->m_fire_redu(), output);
  }

  // optional int64 m_ice_Add = 54;
  if (has_m_ice_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->m_ice_add(), output);
  }

  // optional int64 m_ice_Redu = 55;
  if (has_m_ice_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->m_ice_redu(), output);
  }

  // optional int64 m_thunder_Add = 56;
  if (has_m_thunder_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->m_thunder_add(), output);
  }

  // optional int64 m_thunder_Rdu = 57;
  if (has_m_thunder_rdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(57, this->m_thunder_rdu(), output);
  }

  // optional int64 m_player_Add = 58;
  if (has_m_player_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(58, this->m_player_add(), output);
  }

  // optional int64 m_player_Redu = 59;
  if (has_m_player_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(59, this->m_player_redu(), output);
  }

  // optional int64 m_leader_Add = 60;
  if (has_m_leader_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->m_leader_add(), output);
  }

  // optional int64 m_leader_Redu = 61;
  if (has_m_leader_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(61, this->m_leader_redu(), output);
  }

  // optional int64 m_mon_Add = 62;
  if (has_m_mon_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->m_mon_add(), output);
  }

  // optional int64 m_mon_Redu = 63;
  if (has_m_mon_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->m_mon_redu(), output);
  }

  // optional int64 m_var_Redu = 64;
  if (has_m_var_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(64, this->m_var_redu(), output);
  }

  // optional int64 m_var_Add = 65;
  if (has_m_var_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(65, this->m_var_add(), output);
  }

  // optional int64 m_unusual_Resist = 66;
  if (has_m_unusual_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(66, this->m_unusual_resist(), output);
  }

  // optional int64 m_unusual_Hit = 67;
  if (has_m_unusual_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(67, this->m_unusual_hit(), output);
  }

  // optional int64 m_hp_Recover = 68;
  if (has_m_hp_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(68, this->m_hp_recover(), output);
  }

  // optional int64 m_unusual_Add = 69;
  if (has_m_unusual_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(69, this->m_unusual_add(), output);
  }

  // optional int64 m_fix_Recover = 70;
  if (has_m_fix_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(70, this->m_fix_recover(), output);
  }

  // optional int64 m_high_hp_Add = 71;
  if (has_m_high_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(71, this->m_high_hp_add(), output);
  }

  // optional int64 m_recover_hp_Add = 72;
  if (has_m_recover_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(72, this->m_recover_hp_add(), output);
  }

  // optional int64 m_week_Add = 73;
  if (has_m_week_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(73, this->m_week_add(), output);
  }

  // optional int64 m_shield = 74;
  if (has_m_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(74, this->m_shield(), output);
  }

  // optional int64 m_exp = 75;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(75, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_monsterLV = 3;
  if (has_m_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_monsterlv(), target);
  }

  // optional int64 m_max_Hp = 4;
  if (has_m_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_max_hp(), target);
  }

  // optional int64 m_atk = 5;
  if (has_m_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_atk(), target);
  }

  // optional int64 m_def = 6;
  if (has_m_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_def(), target);
  }

  // optional int64 m_brk_Armor = 7;
  if (has_m_brk_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->m_brk_armor(), target);
  }

  // optional int64 m_five_Dam = 8;
  if (has_m_five_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_five_dam(), target);
  }

  // optional int64 m_five_Armor = 9;
  if (has_m_five_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->m_five_armor(), target);
  }

  // optional int64 m_thump_Rate = 10;
  if (has_m_thump_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->m_thump_rate(), target);
  }

  // optional int64 m_thump_Resist = 11;
  if (has_m_thump_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->m_thump_resist(), target);
  }

  // optional int64 m_sky = 12;
  if (has_m_sky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->m_sky(), target);
  }

  // optional int64 m_sky_Dam = 13;
  if (has_m_sky_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->m_sky_dam(), target);
  }

  // optional int64 m_sky_Redu_Resist = 14;
  if (has_m_sky_redu_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->m_sky_redu_resist(), target);
  }

  // optional int64 m_sky_Resist = 15;
  if (has_m_sky_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->m_sky_resist(), target);
  }

  // optional int64 m_kill_God = 16;
  if (has_m_kill_god()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->m_kill_god(), target);
  }

  // optional int64 m_god_Body = 17;
  if (has_m_god_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->m_god_body(), target);
  }

  // optional int64 m_mortal_Rate = 18;
  if (has_m_mortal_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->m_mortal_rate(), target);
  }

  // optional int64 m_mortal_Resist = 19;
  if (has_m_mortal_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->m_mortal_resist(), target);
  }

  // optional int64 m_fairy_Rate = 20;
  if (has_m_fairy_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->m_fairy_rate(), target);
  }

  // optional int64 m_fairy_Resist = 21;
  if (has_m_fairy_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->m_fairy_resist(), target);
  }

  // optional int64 m_god_Rate = 22;
  if (has_m_god_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->m_god_rate(), target);
  }

  // optional int64 m_god_Resist = 23;
  if (has_m_god_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->m_god_resist(), target);
  }

  // optional int64 m_crit_Rate = 24;
  if (has_m_crit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->m_crit_rate(), target);
  }

  // optional int64 m_crit_resit_Rate = 25;
  if (has_m_crit_resit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->m_crit_resit_rate(), target);
  }

  // optional int64 m_crit_Dam = 26;
  if (has_m_crit_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->m_crit_dam(), target);
  }

  // optional int64 m_crit_Redu = 27;
  if (has_m_crit_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->m_crit_redu(), target);
  }

  // optional int64 m_batter_Rate = 28;
  if (has_m_batter_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->m_batter_rate(), target);
  }

  // optional int64 m_batter_Resist = 29;
  if (has_m_batter_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->m_batter_resist(), target);
  }

  // optional int64 m_batter_Dam = 30;
  if (has_m_batter_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->m_batter_dam(), target);
  }

  // optional int64 m_batter_Redu = 31;
  if (has_m_batter_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->m_batter_redu(), target);
  }

  // optional int64 m_brkdown_Rate = 32;
  if (has_m_brkdown_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->m_brkdown_rate(), target);
  }

  // optional int64 m_brkdown_Resist = 33;
  if (has_m_brkdown_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->m_brkdown_resist(), target);
  }

  // optional int64 m_dam_Add = 34;
  if (has_m_dam_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->m_dam_add(), target);
  }

  // optional int64 m_dam_Redu = 35;
  if (has_m_dam_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->m_dam_redu(), target);
  }

  // optional int64 m_all_Add = 36;
  if (has_m_all_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->m_all_add(), target);
  }

  // optional int64 m_all_Redu = 37;
  if (has_m_all_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->m_all_redu(), target);
  }

  // optional int64 m_skill_Add = 38;
  if (has_m_skill_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->m_skill_add(), target);
  }

  // optional int64 m_skill_Redu = 39;
  if (has_m_skill_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->m_skill_redu(), target);
  }

  // optional int64 m_rebound_Dam = 40;
  if (has_m_rebound_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->m_rebound_dam(), target);
  }

  // optional int64 m_hp_Steal = 41;
  if (has_m_hp_steal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->m_hp_steal(), target);
  }

  // optional int64 m_dodge_Rate = 42;
  if (has_m_dodge_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->m_dodge_rate(), target);
  }

  // optional int64 m_hit_Rate = 43;
  if (has_m_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->m_hit_rate(), target);
  }

  // optional int64 m_blk_Rate = 44;
  if (has_m_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->m_blk_rate(), target);
  }

  // optional int64 m_brk_blk_Rate = 45;
  if (has_m_brk_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->m_brk_blk_rate(), target);
  }

  // optional int64 m_blk_Free = 46;
  if (has_m_blk_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->m_blk_free(), target);
  }

  // optional int64 m_blk_Pierce = 47;
  if (has_m_blk_pierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->m_blk_pierce(), target);
  }

  // optional int64 m_rel_Armor = 48;
  if (has_m_rel_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->m_rel_armor(), target);
  }

  // optional int64 m_rel_Dam = 49;
  if (has_m_rel_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->m_rel_dam(), target);
  }

  // optional int64 m_five_Resist = 50;
  if (has_m_five_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->m_five_resist(), target);
  }

  // optional int64 m_five_resist_Redu = 51;
  if (has_m_five_resist_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->m_five_resist_redu(), target);
  }

  // optional int64 m_fire_Add = 52;
  if (has_m_fire_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->m_fire_add(), target);
  }

  // optional int64 m_fire_Redu = 53;
  if (has_m_fire_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(53, this->m_fire_redu(), target);
  }

  // optional int64 m_ice_Add = 54;
  if (has_m_ice_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->m_ice_add(), target);
  }

  // optional int64 m_ice_Redu = 55;
  if (has_m_ice_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(55, this->m_ice_redu(), target);
  }

  // optional int64 m_thunder_Add = 56;
  if (has_m_thunder_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(56, this->m_thunder_add(), target);
  }

  // optional int64 m_thunder_Rdu = 57;
  if (has_m_thunder_rdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(57, this->m_thunder_rdu(), target);
  }

  // optional int64 m_player_Add = 58;
  if (has_m_player_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(58, this->m_player_add(), target);
  }

  // optional int64 m_player_Redu = 59;
  if (has_m_player_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(59, this->m_player_redu(), target);
  }

  // optional int64 m_leader_Add = 60;
  if (has_m_leader_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->m_leader_add(), target);
  }

  // optional int64 m_leader_Redu = 61;
  if (has_m_leader_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(61, this->m_leader_redu(), target);
  }

  // optional int64 m_mon_Add = 62;
  if (has_m_mon_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->m_mon_add(), target);
  }

  // optional int64 m_mon_Redu = 63;
  if (has_m_mon_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->m_mon_redu(), target);
  }

  // optional int64 m_var_Redu = 64;
  if (has_m_var_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(64, this->m_var_redu(), target);
  }

  // optional int64 m_var_Add = 65;
  if (has_m_var_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(65, this->m_var_add(), target);
  }

  // optional int64 m_unusual_Resist = 66;
  if (has_m_unusual_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(66, this->m_unusual_resist(), target);
  }

  // optional int64 m_unusual_Hit = 67;
  if (has_m_unusual_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(67, this->m_unusual_hit(), target);
  }

  // optional int64 m_hp_Recover = 68;
  if (has_m_hp_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(68, this->m_hp_recover(), target);
  }

  // optional int64 m_unusual_Add = 69;
  if (has_m_unusual_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(69, this->m_unusual_add(), target);
  }

  // optional int64 m_fix_Recover = 70;
  if (has_m_fix_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(70, this->m_fix_recover(), target);
  }

  // optional int64 m_high_hp_Add = 71;
  if (has_m_high_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(71, this->m_high_hp_add(), target);
  }

  // optional int64 m_recover_hp_Add = 72;
  if (has_m_recover_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(72, this->m_recover_hp_add(), target);
  }

  // optional int64 m_week_Add = 73;
  if (has_m_week_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(73, this->m_week_add(), target);
  }

  // optional int64 m_shield = 74;
  if (has_m_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(74, this->m_shield(), target);
  }

  // optional int64 m_exp = 75;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(75, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_monsterLV = 3;
    if (has_m_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterlv());
    }

    // optional int64 m_max_Hp = 4;
    if (has_m_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_max_hp());
    }

    // optional int64 m_atk = 5;
    if (has_m_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_atk());
    }

    // optional int64 m_def = 6;
    if (has_m_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_def());
    }

    // optional int64 m_brk_Armor = 7;
    if (has_m_brk_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_brk_armor());
    }

    // optional int64 m_five_Dam = 8;
    if (has_m_five_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_five_dam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 m_five_Armor = 9;
    if (has_m_five_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_five_armor());
    }

    // optional int64 m_thump_Rate = 10;
    if (has_m_thump_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_thump_rate());
    }

    // optional int64 m_thump_Resist = 11;
    if (has_m_thump_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_thump_resist());
    }

    // optional int64 m_sky = 12;
    if (has_m_sky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sky());
    }

    // optional int64 m_sky_Dam = 13;
    if (has_m_sky_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sky_dam());
    }

    // optional int64 m_sky_Redu_Resist = 14;
    if (has_m_sky_redu_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sky_redu_resist());
    }

    // optional int64 m_sky_Resist = 15;
    if (has_m_sky_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sky_resist());
    }

    // optional int64 m_kill_God = 16;
    if (has_m_kill_god()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_kill_god());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 m_god_Body = 17;
    if (has_m_god_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_god_body());
    }

    // optional int64 m_mortal_Rate = 18;
    if (has_m_mortal_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mortal_rate());
    }

    // optional int64 m_mortal_Resist = 19;
    if (has_m_mortal_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mortal_resist());
    }

    // optional int64 m_fairy_Rate = 20;
    if (has_m_fairy_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fairy_rate());
    }

    // optional int64 m_fairy_Resist = 21;
    if (has_m_fairy_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fairy_resist());
    }

    // optional int64 m_god_Rate = 22;
    if (has_m_god_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_god_rate());
    }

    // optional int64 m_god_Resist = 23;
    if (has_m_god_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_god_resist());
    }

    // optional int64 m_crit_Rate = 24;
    if (has_m_crit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_crit_rate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 m_crit_resit_Rate = 25;
    if (has_m_crit_resit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_crit_resit_rate());
    }

    // optional int64 m_crit_Dam = 26;
    if (has_m_crit_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_crit_dam());
    }

    // optional int64 m_crit_Redu = 27;
    if (has_m_crit_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_crit_redu());
    }

    // optional int64 m_batter_Rate = 28;
    if (has_m_batter_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_batter_rate());
    }

    // optional int64 m_batter_Resist = 29;
    if (has_m_batter_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_batter_resist());
    }

    // optional int64 m_batter_Dam = 30;
    if (has_m_batter_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_batter_dam());
    }

    // optional int64 m_batter_Redu = 31;
    if (has_m_batter_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_batter_redu());
    }

    // optional int64 m_brkdown_Rate = 32;
    if (has_m_brkdown_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_brkdown_rate());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 m_brkdown_Resist = 33;
    if (has_m_brkdown_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_brkdown_resist());
    }

    // optional int64 m_dam_Add = 34;
    if (has_m_dam_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_dam_add());
    }

    // optional int64 m_dam_Redu = 35;
    if (has_m_dam_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_dam_redu());
    }

    // optional int64 m_all_Add = 36;
    if (has_m_all_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_all_add());
    }

    // optional int64 m_all_Redu = 37;
    if (has_m_all_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_all_redu());
    }

    // optional int64 m_skill_Add = 38;
    if (has_m_skill_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_skill_add());
    }

    // optional int64 m_skill_Redu = 39;
    if (has_m_skill_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_skill_redu());
    }

    // optional int64 m_rebound_Dam = 40;
    if (has_m_rebound_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_rebound_dam());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int64 m_hp_Steal = 41;
    if (has_m_hp_steal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_hp_steal());
    }

    // optional int64 m_dodge_Rate = 42;
    if (has_m_dodge_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_dodge_rate());
    }

    // optional int64 m_hit_Rate = 43;
    if (has_m_hit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_hit_rate());
    }

    // optional int64 m_blk_Rate = 44;
    if (has_m_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_blk_rate());
    }

    // optional int64 m_brk_blk_Rate = 45;
    if (has_m_brk_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_brk_blk_rate());
    }

    // optional int64 m_blk_Free = 46;
    if (has_m_blk_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_blk_free());
    }

    // optional int64 m_blk_Pierce = 47;
    if (has_m_blk_pierce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_blk_pierce());
    }

    // optional int64 m_rel_Armor = 48;
    if (has_m_rel_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_rel_armor());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int64 m_rel_Dam = 49;
    if (has_m_rel_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_rel_dam());
    }

    // optional int64 m_five_Resist = 50;
    if (has_m_five_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_five_resist());
    }

    // optional int64 m_five_resist_Redu = 51;
    if (has_m_five_resist_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_five_resist_redu());
    }

    // optional int64 m_fire_Add = 52;
    if (has_m_fire_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fire_add());
    }

    // optional int64 m_fire_Redu = 53;
    if (has_m_fire_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fire_redu());
    }

    // optional int64 m_ice_Add = 54;
    if (has_m_ice_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_ice_add());
    }

    // optional int64 m_ice_Redu = 55;
    if (has_m_ice_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_ice_redu());
    }

    // optional int64 m_thunder_Add = 56;
    if (has_m_thunder_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_thunder_add());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int64 m_thunder_Rdu = 57;
    if (has_m_thunder_rdu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_thunder_rdu());
    }

    // optional int64 m_player_Add = 58;
    if (has_m_player_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_player_add());
    }

    // optional int64 m_player_Redu = 59;
    if (has_m_player_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_player_redu());
    }

    // optional int64 m_leader_Add = 60;
    if (has_m_leader_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_leader_add());
    }

    // optional int64 m_leader_Redu = 61;
    if (has_m_leader_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_leader_redu());
    }

    // optional int64 m_mon_Add = 62;
    if (has_m_mon_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mon_add());
    }

    // optional int64 m_mon_Redu = 63;
    if (has_m_mon_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mon_redu());
    }

    // optional int64 m_var_Redu = 64;
    if (has_m_var_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_var_redu());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int64 m_var_Add = 65;
    if (has_m_var_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_var_add());
    }

    // optional int64 m_unusual_Resist = 66;
    if (has_m_unusual_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_unusual_resist());
    }

    // optional int64 m_unusual_Hit = 67;
    if (has_m_unusual_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_unusual_hit());
    }

    // optional int64 m_hp_Recover = 68;
    if (has_m_hp_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_hp_recover());
    }

    // optional int64 m_unusual_Add = 69;
    if (has_m_unusual_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_unusual_add());
    }

    // optional int64 m_fix_Recover = 70;
    if (has_m_fix_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fix_recover());
    }

    // optional int64 m_high_hp_Add = 71;
    if (has_m_high_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_high_hp_add());
    }

    // optional int64 m_recover_hp_Add = 72;
    if (has_m_recover_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_recover_hp_add());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int64 m_week_Add = 73;
    if (has_m_week_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_week_add());
    }

    // optional int64 m_shield = 74;
    if (has_m_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_shield());
    }

    // optional int64 m_exp = 75;
    if (has_m_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterValue::MergeFrom(const E_MonsterValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_monsterlv()) {
      set_m_monsterlv(from.m_monsterlv());
    }
    if (from.has_m_max_hp()) {
      set_m_max_hp(from.m_max_hp());
    }
    if (from.has_m_atk()) {
      set_m_atk(from.m_atk());
    }
    if (from.has_m_def()) {
      set_m_def(from.m_def());
    }
    if (from.has_m_brk_armor()) {
      set_m_brk_armor(from.m_brk_armor());
    }
    if (from.has_m_five_dam()) {
      set_m_five_dam(from.m_five_dam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_five_armor()) {
      set_m_five_armor(from.m_five_armor());
    }
    if (from.has_m_thump_rate()) {
      set_m_thump_rate(from.m_thump_rate());
    }
    if (from.has_m_thump_resist()) {
      set_m_thump_resist(from.m_thump_resist());
    }
    if (from.has_m_sky()) {
      set_m_sky(from.m_sky());
    }
    if (from.has_m_sky_dam()) {
      set_m_sky_dam(from.m_sky_dam());
    }
    if (from.has_m_sky_redu_resist()) {
      set_m_sky_redu_resist(from.m_sky_redu_resist());
    }
    if (from.has_m_sky_resist()) {
      set_m_sky_resist(from.m_sky_resist());
    }
    if (from.has_m_kill_god()) {
      set_m_kill_god(from.m_kill_god());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_god_body()) {
      set_m_god_body(from.m_god_body());
    }
    if (from.has_m_mortal_rate()) {
      set_m_mortal_rate(from.m_mortal_rate());
    }
    if (from.has_m_mortal_resist()) {
      set_m_mortal_resist(from.m_mortal_resist());
    }
    if (from.has_m_fairy_rate()) {
      set_m_fairy_rate(from.m_fairy_rate());
    }
    if (from.has_m_fairy_resist()) {
      set_m_fairy_resist(from.m_fairy_resist());
    }
    if (from.has_m_god_rate()) {
      set_m_god_rate(from.m_god_rate());
    }
    if (from.has_m_god_resist()) {
      set_m_god_resist(from.m_god_resist());
    }
    if (from.has_m_crit_rate()) {
      set_m_crit_rate(from.m_crit_rate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_crit_resit_rate()) {
      set_m_crit_resit_rate(from.m_crit_resit_rate());
    }
    if (from.has_m_crit_dam()) {
      set_m_crit_dam(from.m_crit_dam());
    }
    if (from.has_m_crit_redu()) {
      set_m_crit_redu(from.m_crit_redu());
    }
    if (from.has_m_batter_rate()) {
      set_m_batter_rate(from.m_batter_rate());
    }
    if (from.has_m_batter_resist()) {
      set_m_batter_resist(from.m_batter_resist());
    }
    if (from.has_m_batter_dam()) {
      set_m_batter_dam(from.m_batter_dam());
    }
    if (from.has_m_batter_redu()) {
      set_m_batter_redu(from.m_batter_redu());
    }
    if (from.has_m_brkdown_rate()) {
      set_m_brkdown_rate(from.m_brkdown_rate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_brkdown_resist()) {
      set_m_brkdown_resist(from.m_brkdown_resist());
    }
    if (from.has_m_dam_add()) {
      set_m_dam_add(from.m_dam_add());
    }
    if (from.has_m_dam_redu()) {
      set_m_dam_redu(from.m_dam_redu());
    }
    if (from.has_m_all_add()) {
      set_m_all_add(from.m_all_add());
    }
    if (from.has_m_all_redu()) {
      set_m_all_redu(from.m_all_redu());
    }
    if (from.has_m_skill_add()) {
      set_m_skill_add(from.m_skill_add());
    }
    if (from.has_m_skill_redu()) {
      set_m_skill_redu(from.m_skill_redu());
    }
    if (from.has_m_rebound_dam()) {
      set_m_rebound_dam(from.m_rebound_dam());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_m_hp_steal()) {
      set_m_hp_steal(from.m_hp_steal());
    }
    if (from.has_m_dodge_rate()) {
      set_m_dodge_rate(from.m_dodge_rate());
    }
    if (from.has_m_hit_rate()) {
      set_m_hit_rate(from.m_hit_rate());
    }
    if (from.has_m_blk_rate()) {
      set_m_blk_rate(from.m_blk_rate());
    }
    if (from.has_m_brk_blk_rate()) {
      set_m_brk_blk_rate(from.m_brk_blk_rate());
    }
    if (from.has_m_blk_free()) {
      set_m_blk_free(from.m_blk_free());
    }
    if (from.has_m_blk_pierce()) {
      set_m_blk_pierce(from.m_blk_pierce());
    }
    if (from.has_m_rel_armor()) {
      set_m_rel_armor(from.m_rel_armor());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_m_rel_dam()) {
      set_m_rel_dam(from.m_rel_dam());
    }
    if (from.has_m_five_resist()) {
      set_m_five_resist(from.m_five_resist());
    }
    if (from.has_m_five_resist_redu()) {
      set_m_five_resist_redu(from.m_five_resist_redu());
    }
    if (from.has_m_fire_add()) {
      set_m_fire_add(from.m_fire_add());
    }
    if (from.has_m_fire_redu()) {
      set_m_fire_redu(from.m_fire_redu());
    }
    if (from.has_m_ice_add()) {
      set_m_ice_add(from.m_ice_add());
    }
    if (from.has_m_ice_redu()) {
      set_m_ice_redu(from.m_ice_redu());
    }
    if (from.has_m_thunder_add()) {
      set_m_thunder_add(from.m_thunder_add());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_m_thunder_rdu()) {
      set_m_thunder_rdu(from.m_thunder_rdu());
    }
    if (from.has_m_player_add()) {
      set_m_player_add(from.m_player_add());
    }
    if (from.has_m_player_redu()) {
      set_m_player_redu(from.m_player_redu());
    }
    if (from.has_m_leader_add()) {
      set_m_leader_add(from.m_leader_add());
    }
    if (from.has_m_leader_redu()) {
      set_m_leader_redu(from.m_leader_redu());
    }
    if (from.has_m_mon_add()) {
      set_m_mon_add(from.m_mon_add());
    }
    if (from.has_m_mon_redu()) {
      set_m_mon_redu(from.m_mon_redu());
    }
    if (from.has_m_var_redu()) {
      set_m_var_redu(from.m_var_redu());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_m_var_add()) {
      set_m_var_add(from.m_var_add());
    }
    if (from.has_m_unusual_resist()) {
      set_m_unusual_resist(from.m_unusual_resist());
    }
    if (from.has_m_unusual_hit()) {
      set_m_unusual_hit(from.m_unusual_hit());
    }
    if (from.has_m_hp_recover()) {
      set_m_hp_recover(from.m_hp_recover());
    }
    if (from.has_m_unusual_add()) {
      set_m_unusual_add(from.m_unusual_add());
    }
    if (from.has_m_fix_recover()) {
      set_m_fix_recover(from.m_fix_recover());
    }
    if (from.has_m_high_hp_add()) {
      set_m_high_hp_add(from.m_high_hp_add());
    }
    if (from.has_m_recover_hp_add()) {
      set_m_recover_hp_add(from.m_recover_hp_add());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_m_week_add()) {
      set_m_week_add(from.m_week_add());
    }
    if (from.has_m_shield()) {
      set_m_shield(from.m_shield());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterValue::CopyFrom(const E_MonsterValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterValue::IsInitialized() const {

  return true;
}

void E_MonsterValue::Swap(E_MonsterValue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_monsterlv_, other->m_monsterlv_);
    std::swap(m_max_hp_, other->m_max_hp_);
    std::swap(m_atk_, other->m_atk_);
    std::swap(m_def_, other->m_def_);
    std::swap(m_brk_armor_, other->m_brk_armor_);
    std::swap(m_five_dam_, other->m_five_dam_);
    std::swap(m_five_armor_, other->m_five_armor_);
    std::swap(m_thump_rate_, other->m_thump_rate_);
    std::swap(m_thump_resist_, other->m_thump_resist_);
    std::swap(m_sky_, other->m_sky_);
    std::swap(m_sky_dam_, other->m_sky_dam_);
    std::swap(m_sky_redu_resist_, other->m_sky_redu_resist_);
    std::swap(m_sky_resist_, other->m_sky_resist_);
    std::swap(m_kill_god_, other->m_kill_god_);
    std::swap(m_god_body_, other->m_god_body_);
    std::swap(m_mortal_rate_, other->m_mortal_rate_);
    std::swap(m_mortal_resist_, other->m_mortal_resist_);
    std::swap(m_fairy_rate_, other->m_fairy_rate_);
    std::swap(m_fairy_resist_, other->m_fairy_resist_);
    std::swap(m_god_rate_, other->m_god_rate_);
    std::swap(m_god_resist_, other->m_god_resist_);
    std::swap(m_crit_rate_, other->m_crit_rate_);
    std::swap(m_crit_resit_rate_, other->m_crit_resit_rate_);
    std::swap(m_crit_dam_, other->m_crit_dam_);
    std::swap(m_crit_redu_, other->m_crit_redu_);
    std::swap(m_batter_rate_, other->m_batter_rate_);
    std::swap(m_batter_resist_, other->m_batter_resist_);
    std::swap(m_batter_dam_, other->m_batter_dam_);
    std::swap(m_batter_redu_, other->m_batter_redu_);
    std::swap(m_brkdown_rate_, other->m_brkdown_rate_);
    std::swap(m_brkdown_resist_, other->m_brkdown_resist_);
    std::swap(m_dam_add_, other->m_dam_add_);
    std::swap(m_dam_redu_, other->m_dam_redu_);
    std::swap(m_all_add_, other->m_all_add_);
    std::swap(m_all_redu_, other->m_all_redu_);
    std::swap(m_skill_add_, other->m_skill_add_);
    std::swap(m_skill_redu_, other->m_skill_redu_);
    std::swap(m_rebound_dam_, other->m_rebound_dam_);
    std::swap(m_hp_steal_, other->m_hp_steal_);
    std::swap(m_dodge_rate_, other->m_dodge_rate_);
    std::swap(m_hit_rate_, other->m_hit_rate_);
    std::swap(m_blk_rate_, other->m_blk_rate_);
    std::swap(m_brk_blk_rate_, other->m_brk_blk_rate_);
    std::swap(m_blk_free_, other->m_blk_free_);
    std::swap(m_blk_pierce_, other->m_blk_pierce_);
    std::swap(m_rel_armor_, other->m_rel_armor_);
    std::swap(m_rel_dam_, other->m_rel_dam_);
    std::swap(m_five_resist_, other->m_five_resist_);
    std::swap(m_five_resist_redu_, other->m_five_resist_redu_);
    std::swap(m_fire_add_, other->m_fire_add_);
    std::swap(m_fire_redu_, other->m_fire_redu_);
    std::swap(m_ice_add_, other->m_ice_add_);
    std::swap(m_ice_redu_, other->m_ice_redu_);
    std::swap(m_thunder_add_, other->m_thunder_add_);
    std::swap(m_thunder_rdu_, other->m_thunder_rdu_);
    std::swap(m_player_add_, other->m_player_add_);
    std::swap(m_player_redu_, other->m_player_redu_);
    std::swap(m_leader_add_, other->m_leader_add_);
    std::swap(m_leader_redu_, other->m_leader_redu_);
    std::swap(m_mon_add_, other->m_mon_add_);
    std::swap(m_mon_redu_, other->m_mon_redu_);
    std::swap(m_var_redu_, other->m_var_redu_);
    std::swap(m_var_add_, other->m_var_add_);
    std::swap(m_unusual_resist_, other->m_unusual_resist_);
    std::swap(m_unusual_hit_, other->m_unusual_hit_);
    std::swap(m_hp_recover_, other->m_hp_recover_);
    std::swap(m_unusual_add_, other->m_unusual_add_);
    std::swap(m_fix_recover_, other->m_fix_recover_);
    std::swap(m_high_hp_add_, other->m_high_hp_add_);
    std::swap(m_recover_hp_add_, other->m_recover_hp_add_);
    std::swap(m_week_add_, other->m_week_add_);
    std::swap(m_shield_, other->m_shield_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterValue_descriptor_;
  metadata.reflection = E_MonsterValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MonsterValue::kEMonsterValueListFieldNumber;
#endif  // !_MSC_VER

Sheet_MonsterValue::Sheet_MonsterValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MonsterValue::InitAsDefaultInstance() {
}

Sheet_MonsterValue::Sheet_MonsterValue(const Sheet_MonsterValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MonsterValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MonsterValue::~Sheet_MonsterValue() {
  SharedDtor();
}

void Sheet_MonsterValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MonsterValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MonsterValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MonsterValue_descriptor_;
}

const Sheet_MonsterValue& Sheet_MonsterValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

Sheet_MonsterValue* Sheet_MonsterValue::default_instance_ = NULL;

Sheet_MonsterValue* Sheet_MonsterValue::New() const {
  return new Sheet_MonsterValue;
}

void Sheet_MonsterValue::Clear() {
  e_monstervalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MonsterValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MonsterValue E_MonsterValue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MonsterValue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_monstervalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MonsterValue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MonsterValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MonsterValue E_MonsterValue_List = 1;
  for (int i = 0; i < this->e_monstervalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_monstervalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MonsterValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MonsterValue E_MonsterValue_List = 1;
  for (int i = 0; i < this->e_monstervalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_monstervalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MonsterValue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MonsterValue E_MonsterValue_List = 1;
  total_size += 1 * this->e_monstervalue_list_size();
  for (int i = 0; i < this->e_monstervalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_monstervalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MonsterValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MonsterValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MonsterValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MonsterValue::MergeFrom(const Sheet_MonsterValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_monstervalue_list_.MergeFrom(from.e_monstervalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MonsterValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MonsterValue::CopyFrom(const Sheet_MonsterValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MonsterValue::IsInitialized() const {

  return true;
}

void Sheet_MonsterValue::Swap(Sheet_MonsterValue* other) {
  if (other != this) {
    e_monstervalue_list_.Swap(&other->e_monstervalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MonsterValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MonsterValue_descriptor_;
  metadata.reflection = Sheet_MonsterValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MonsterValueparam::kMIdFieldNumber;
const int E_MonsterValueparam::kMPMaxHpFieldNumber;
const int E_MonsterValueparam::kMPAtkFieldNumber;
const int E_MonsterValueparam::kMPDefFieldNumber;
const int E_MonsterValueparam::kMPBrkArmorFieldNumber;
const int E_MonsterValueparam::kMPFiveDamFieldNumber;
const int E_MonsterValueparam::kMPFiveArmorFieldNumber;
const int E_MonsterValueparam::kMPThumpRateFieldNumber;
const int E_MonsterValueparam::kMPThumpResistFieldNumber;
const int E_MonsterValueparam::kMPSkyFieldNumber;
const int E_MonsterValueparam::kMPSkyDamFieldNumber;
const int E_MonsterValueparam::kMPSkyReduResistFieldNumber;
const int E_MonsterValueparam::kMPSkyResistFieldNumber;
const int E_MonsterValueparam::kMPKillGodFieldNumber;
const int E_MonsterValueparam::kMPGodBodyFieldNumber;
const int E_MonsterValueparam::kMPMortalRateFieldNumber;
const int E_MonsterValueparam::kMPMortalResistFieldNumber;
const int E_MonsterValueparam::kMPFairyRateFieldNumber;
const int E_MonsterValueparam::kMPFairyResistFieldNumber;
const int E_MonsterValueparam::kMPGodRateFieldNumber;
const int E_MonsterValueparam::kMPGodResistFieldNumber;
const int E_MonsterValueparam::kMPCritRateFieldNumber;
const int E_MonsterValueparam::kMPCritResitRateFieldNumber;
const int E_MonsterValueparam::kMPCritDamFieldNumber;
const int E_MonsterValueparam::kMPCritReduFieldNumber;
const int E_MonsterValueparam::kMPBatterRateFieldNumber;
const int E_MonsterValueparam::kMPBatterResistFieldNumber;
const int E_MonsterValueparam::kMPBatterDamFieldNumber;
const int E_MonsterValueparam::kMPBatterReduFieldNumber;
const int E_MonsterValueparam::kMPBrkdownRateFieldNumber;
const int E_MonsterValueparam::kMPBrkdownResistFieldNumber;
const int E_MonsterValueparam::kMPDamAddFieldNumber;
const int E_MonsterValueparam::kMPDamReduFieldNumber;
const int E_MonsterValueparam::kMPAllAddFieldNumber;
const int E_MonsterValueparam::kMPAllReduFieldNumber;
const int E_MonsterValueparam::kMPSkillAddFieldNumber;
const int E_MonsterValueparam::kMPSkillReduFieldNumber;
const int E_MonsterValueparam::kMPReboundDamFieldNumber;
const int E_MonsterValueparam::kMPHpStealFieldNumber;
const int E_MonsterValueparam::kMPDodgeRateFieldNumber;
const int E_MonsterValueparam::kMPHitRateFieldNumber;
const int E_MonsterValueparam::kMPBlkRateFieldNumber;
const int E_MonsterValueparam::kMPBrkBlkRateFieldNumber;
const int E_MonsterValueparam::kMPBlkFreeFieldNumber;
const int E_MonsterValueparam::kMPBlkPierceFieldNumber;
const int E_MonsterValueparam::kMPRelArmorFieldNumber;
const int E_MonsterValueparam::kMPRelDamFieldNumber;
const int E_MonsterValueparam::kMPFiveResistFieldNumber;
const int E_MonsterValueparam::kMPFiveResistReduFieldNumber;
const int E_MonsterValueparam::kMPFireAddFieldNumber;
const int E_MonsterValueparam::kMPFireReduFieldNumber;
const int E_MonsterValueparam::kMPIceAddFieldNumber;
const int E_MonsterValueparam::kMPIceReduFieldNumber;
const int E_MonsterValueparam::kMPThunderAddFieldNumber;
const int E_MonsterValueparam::kMPThunderRduFieldNumber;
const int E_MonsterValueparam::kMPPlayerAddFieldNumber;
const int E_MonsterValueparam::kMPPlayerReduFieldNumber;
const int E_MonsterValueparam::kMPLeaderAddFieldNumber;
const int E_MonsterValueparam::kMPLeaderReduFieldNumber;
const int E_MonsterValueparam::kMPMonAddFieldNumber;
const int E_MonsterValueparam::kMPMonReduFieldNumber;
const int E_MonsterValueparam::kMPVarReduFieldNumber;
const int E_MonsterValueparam::kMPVarAddFieldNumber;
const int E_MonsterValueparam::kMPUnusualResistFieldNumber;
const int E_MonsterValueparam::kMPUnusualHitFieldNumber;
const int E_MonsterValueparam::kMPHpRecoverFieldNumber;
const int E_MonsterValueparam::kMPUnusualAddFieldNumber;
const int E_MonsterValueparam::kMPFixRecoverFieldNumber;
const int E_MonsterValueparam::kMPHighHpAddFieldNumber;
const int E_MonsterValueparam::kMPRecoverHpAddFieldNumber;
const int E_MonsterValueparam::kMPWeekAddFieldNumber;
const int E_MonsterValueparam::kMShieldFieldNumber;
const int E_MonsterValueparam::kMExpFieldNumber;
#endif  // !_MSC_VER

E_MonsterValueparam::E_MonsterValueparam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterValueparam::InitAsDefaultInstance() {
}

E_MonsterValueparam::E_MonsterValueparam(const E_MonsterValueparam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterValueparam::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_p_max_hp_ = 0;
  m_p_atk_ = 0;
  m_p_def_ = 0;
  m_p_brk_armor_ = 0;
  m_p_five_dam_ = 0;
  m_p_five_armor_ = 0;
  m_p_thump_rate_ = 0;
  m_p_thump_resist_ = 0;
  m_p_sky_ = 0;
  m_p_sky_dam_ = 0;
  m_p_sky_redu_resist_ = 0;
  m_p_sky_resist_ = 0;
  m_p_kill_god_ = 0;
  m_p_god_body_ = 0;
  m_p_mortal_rate_ = 0;
  m_p_mortal_resist_ = 0;
  m_p_fairy_rate_ = 0;
  m_p_fairy_resist_ = 0;
  m_p_god_rate_ = 0;
  m_p_god_resist_ = 0;
  m_p_crit_rate_ = 0;
  m_p_crit_resit_rate_ = 0;
  m_p_crit_dam_ = 0;
  m_p_crit_redu_ = 0;
  m_p_batter_rate_ = 0;
  m_p_batter_resist_ = 0;
  m_p_batter_dam_ = 0;
  m_p_batter_redu_ = 0;
  m_p_brkdown_rate_ = 0;
  m_p_brkdown_resist_ = 0;
  m_p_dam_add_ = 0;
  m_p_dam_redu_ = 0;
  m_p_all_add_ = 0;
  m_p_all_redu_ = 0;
  m_p_skill_add_ = 0;
  m_p_skill_redu_ = 0;
  m_p_rebound_dam_ = 0;
  m_p_hp_steal_ = 0;
  m_p_dodge_rate_ = 0;
  m_p_hit_rate_ = 0;
  m_p_blk_rate_ = 0;
  m_p_brk_blk_rate_ = 0;
  m_p_blk_free_ = 0;
  m_p_blk_pierce_ = 0;
  m_p_rel_armor_ = 0;
  m_p_rel_dam_ = 0;
  m_p_five_resist_ = 0;
  m_p_five_resist_redu_ = 0;
  m_p_fire_add_ = 0;
  m_p_fire_redu_ = 0;
  m_p_ice_add_ = 0;
  m_p_ice_redu_ = 0;
  m_p_thunder_add_ = 0;
  m_p_thunder_rdu_ = 0;
  m_p_player_add_ = 0;
  m_p_player_redu_ = 0;
  m_p_leader_add_ = 0;
  m_p_leader_redu_ = 0;
  m_p_mon_add_ = 0;
  m_p_mon_redu_ = 0;
  m_p_var_redu_ = 0;
  m_p_var_add_ = 0;
  m_p_unusual_resist_ = 0;
  m_p_unusual_hit_ = 0;
  m_p_hp_recover_ = 0;
  m_p_unusual_add_ = 0;
  m_p_fix_recover_ = 0;
  m_p_high_hp_add_ = 0;
  m_p_recover_hp_add_ = 0;
  m_p_week_add_ = 0;
  m_shield_ = GOOGLE_LONGLONG(0);
  m_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterValueparam::~E_MonsterValueparam() {
  SharedDtor();
}

void E_MonsterValueparam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MonsterValueparam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterValueparam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterValueparam_descriptor_;
}

const E_MonsterValueparam& E_MonsterValueparam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterValueparam* E_MonsterValueparam::default_instance_ = NULL;

E_MonsterValueparam* E_MonsterValueparam::New() const {
  return new E_MonsterValueparam;
}

void E_MonsterValueparam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_p_max_hp_ = 0;
    m_p_atk_ = 0;
    m_p_def_ = 0;
    m_p_brk_armor_ = 0;
    m_p_five_dam_ = 0;
    m_p_five_armor_ = 0;
    m_p_thump_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_p_thump_resist_ = 0;
    m_p_sky_ = 0;
    m_p_sky_dam_ = 0;
    m_p_sky_redu_resist_ = 0;
    m_p_sky_resist_ = 0;
    m_p_kill_god_ = 0;
    m_p_god_body_ = 0;
    m_p_mortal_rate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_p_mortal_resist_ = 0;
    m_p_fairy_rate_ = 0;
    m_p_fairy_resist_ = 0;
    m_p_god_rate_ = 0;
    m_p_god_resist_ = 0;
    m_p_crit_rate_ = 0;
    m_p_crit_resit_rate_ = 0;
    m_p_crit_dam_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_p_crit_redu_ = 0;
    m_p_batter_rate_ = 0;
    m_p_batter_resist_ = 0;
    m_p_batter_dam_ = 0;
    m_p_batter_redu_ = 0;
    m_p_brkdown_rate_ = 0;
    m_p_brkdown_resist_ = 0;
    m_p_dam_add_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_p_dam_redu_ = 0;
    m_p_all_add_ = 0;
    m_p_all_redu_ = 0;
    m_p_skill_add_ = 0;
    m_p_skill_redu_ = 0;
    m_p_rebound_dam_ = 0;
    m_p_hp_steal_ = 0;
    m_p_dodge_rate_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    m_p_hit_rate_ = 0;
    m_p_blk_rate_ = 0;
    m_p_brk_blk_rate_ = 0;
    m_p_blk_free_ = 0;
    m_p_blk_pierce_ = 0;
    m_p_rel_armor_ = 0;
    m_p_rel_dam_ = 0;
    m_p_five_resist_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    m_p_five_resist_redu_ = 0;
    m_p_fire_add_ = 0;
    m_p_fire_redu_ = 0;
    m_p_ice_add_ = 0;
    m_p_ice_redu_ = 0;
    m_p_thunder_add_ = 0;
    m_p_thunder_rdu_ = 0;
    m_p_player_add_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    m_p_player_redu_ = 0;
    m_p_leader_add_ = 0;
    m_p_leader_redu_ = 0;
    m_p_mon_add_ = 0;
    m_p_mon_redu_ = 0;
    m_p_var_redu_ = 0;
    m_p_var_add_ = 0;
    m_p_unusual_resist_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    m_p_unusual_hit_ = 0;
    m_p_hp_recover_ = 0;
    m_p_unusual_add_ = 0;
    m_p_fix_recover_ = 0;
    m_p_high_hp_add_ = 0;
    m_p_recover_hp_add_ = 0;
    m_p_week_add_ = 0;
    m_shield_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    m_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterValueparam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_P_max_Hp;
        break;
      }

      // optional int32 m_P_max_Hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_max_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_max_hp_)));
          set_has_m_p_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_P_atk;
        break;
      }

      // optional int32 m_P_atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_atk_)));
          set_has_m_p_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_P_def;
        break;
      }

      // optional int32 m_P_def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_def_)));
          set_has_m_p_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_P_brk_Armor;
        break;
      }

      // optional int32 m_P_brk_Armor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_brk_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_brk_armor_)));
          set_has_m_p_brk_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_P_five_Dam;
        break;
      }

      // optional int32 m_P_five_Dam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_five_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_five_dam_)));
          set_has_m_p_five_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_P_five_Armor;
        break;
      }

      // optional int32 m_P_five_Armor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_five_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_five_armor_)));
          set_has_m_p_five_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_P_thump_Rate;
        break;
      }

      // optional int32 m_P_thump_Rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_thump_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_thump_rate_)));
          set_has_m_p_thump_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_P_thump_Resist;
        break;
      }

      // optional int32 m_P_thump_Resist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_thump_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_thump_resist_)));
          set_has_m_p_thump_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_P_sky;
        break;
      }

      // optional int32 m_P_sky = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_sky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_sky_)));
          set_has_m_p_sky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_P_sky_Dam;
        break;
      }

      // optional int32 m_P_sky_Dam = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_sky_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_sky_dam_)));
          set_has_m_p_sky_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_P_sky_Redu_Resist;
        break;
      }

      // optional int32 m_P_sky_Redu_Resist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_sky_Redu_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_sky_redu_resist_)));
          set_has_m_p_sky_redu_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_P_sky_Resist;
        break;
      }

      // optional int32 m_P_sky_Resist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_sky_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_sky_resist_)));
          set_has_m_p_sky_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_P_kill_God;
        break;
      }

      // optional int32 m_P_kill_God = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_kill_God:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_kill_god_)));
          set_has_m_p_kill_god();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_P_god_Body;
        break;
      }

      // optional int32 m_P_god_Body = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_god_Body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_god_body_)));
          set_has_m_p_god_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_P_mortal_Rate;
        break;
      }

      // optional int32 m_P_mortal_Rate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_mortal_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_mortal_rate_)));
          set_has_m_p_mortal_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_P_mortal_Resist;
        break;
      }

      // optional int32 m_P_mortal_Resist = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_mortal_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_mortal_resist_)));
          set_has_m_p_mortal_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_P_fairy_Rate;
        break;
      }

      // optional int32 m_P_fairy_Rate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_fairy_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_fairy_rate_)));
          set_has_m_p_fairy_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_P_fairy_Resist;
        break;
      }

      // optional int32 m_P_fairy_Resist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_fairy_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_fairy_resist_)));
          set_has_m_p_fairy_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_P_god_Rate;
        break;
      }

      // optional int32 m_P_god_Rate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_god_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_god_rate_)));
          set_has_m_p_god_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_P_god_Resist;
        break;
      }

      // optional int32 m_P_god_Resist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_god_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_god_resist_)));
          set_has_m_p_god_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_P_crit_Rate;
        break;
      }

      // optional int32 m_P_crit_Rate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_crit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_crit_rate_)));
          set_has_m_p_crit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_P_crit_resit_Rate;
        break;
      }

      // optional int32 m_P_crit_resit_Rate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_crit_resit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_crit_resit_rate_)));
          set_has_m_p_crit_resit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_P_crit_Dam;
        break;
      }

      // optional int32 m_P_crit_Dam = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_crit_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_crit_dam_)));
          set_has_m_p_crit_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_P_crit_Redu;
        break;
      }

      // optional int32 m_P_crit_Redu = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_crit_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_crit_redu_)));
          set_has_m_p_crit_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_P_batter_Rate;
        break;
      }

      // optional int32 m_P_batter_Rate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_batter_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_batter_rate_)));
          set_has_m_p_batter_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_P_batter_Resist;
        break;
      }

      // optional int32 m_P_batter_Resist = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_batter_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_batter_resist_)));
          set_has_m_p_batter_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_P_batter_Dam;
        break;
      }

      // optional int32 m_P_batter_Dam = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_batter_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_batter_dam_)));
          set_has_m_p_batter_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_P_batter_Redu;
        break;
      }

      // optional int32 m_P_batter_Redu = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_batter_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_batter_redu_)));
          set_has_m_p_batter_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_P_brkdown_Rate;
        break;
      }

      // optional int32 m_P_brkdown_Rate = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_brkdown_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_brkdown_rate_)));
          set_has_m_p_brkdown_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_P_brkdown_Resist;
        break;
      }

      // optional int32 m_P_brkdown_Resist = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_brkdown_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_brkdown_resist_)));
          set_has_m_p_brkdown_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_P_dam_Add;
        break;
      }

      // optional int32 m_P_dam_Add = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_dam_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_dam_add_)));
          set_has_m_p_dam_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_P_dam_Redu;
        break;
      }

      // optional int32 m_P_dam_Redu = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_dam_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_dam_redu_)));
          set_has_m_p_dam_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_m_P_all_Add;
        break;
      }

      // optional int32 m_P_all_Add = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_all_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_all_add_)));
          set_has_m_p_all_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_m_P_all_Redu;
        break;
      }

      // optional int32 m_P_all_Redu = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_all_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_all_redu_)));
          set_has_m_p_all_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_P_skill_Add;
        break;
      }

      // optional int32 m_P_skill_Add = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_skill_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_skill_add_)));
          set_has_m_p_skill_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_P_skill_Redu;
        break;
      }

      // optional int32 m_P_skill_Redu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_skill_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_skill_redu_)));
          set_has_m_p_skill_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_m_P_rebound_Dam;
        break;
      }

      // optional int32 m_P_rebound_Dam = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_rebound_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_rebound_dam_)));
          set_has_m_p_rebound_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_m_P_hp_Steal;
        break;
      }

      // optional int32 m_P_hp_Steal = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_hp_Steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_hp_steal_)));
          set_has_m_p_hp_steal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_m_P_dodge_Rate;
        break;
      }

      // optional int32 m_P_dodge_Rate = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_dodge_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_dodge_rate_)));
          set_has_m_p_dodge_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_m_P_hit_Rate;
        break;
      }

      // optional int32 m_P_hit_Rate = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_hit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_hit_rate_)));
          set_has_m_p_hit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_m_P_blk_Rate;
        break;
      }

      // optional int32 m_P_blk_Rate = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_blk_rate_)));
          set_has_m_p_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_m_P_brk_blk_Rate;
        break;
      }

      // optional int32 m_P_brk_blk_Rate = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_brk_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_brk_blk_rate_)));
          set_has_m_p_brk_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_m_P_blk_Free;
        break;
      }

      // optional int32 m_P_blk_Free = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_blk_Free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_blk_free_)));
          set_has_m_p_blk_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_m_P_blk_Pierce;
        break;
      }

      // optional int32 m_P_blk_Pierce = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_blk_Pierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_blk_pierce_)));
          set_has_m_p_blk_pierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_m_P_rel_Armor;
        break;
      }

      // optional int32 m_P_rel_Armor = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_rel_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_rel_armor_)));
          set_has_m_p_rel_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_m_P_rel_Dam;
        break;
      }

      // optional int32 m_P_rel_Dam = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_rel_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_rel_dam_)));
          set_has_m_p_rel_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_m_P_five_Resist;
        break;
      }

      // optional int32 m_P_five_Resist = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_five_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_five_resist_)));
          set_has_m_p_five_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_m_P_five_resist_Redu;
        break;
      }

      // optional int32 m_P_five_resist_Redu = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_five_resist_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_five_resist_redu_)));
          set_has_m_p_five_resist_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_m_P_fire_Add;
        break;
      }

      // optional int32 m_P_fire_Add = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_fire_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_fire_add_)));
          set_has_m_p_fire_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_m_P_fire_Redu;
        break;
      }

      // optional int32 m_P_fire_Redu = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_fire_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_fire_redu_)));
          set_has_m_p_fire_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_m_P_ice_Add;
        break;
      }

      // optional int32 m_P_ice_Add = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_ice_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_ice_add_)));
          set_has_m_p_ice_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_m_P_ice_Redu;
        break;
      }

      // optional int32 m_P_ice_Redu = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_ice_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_ice_redu_)));
          set_has_m_p_ice_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_m_P_thunder_Add;
        break;
      }

      // optional int32 m_P_thunder_Add = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_thunder_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_thunder_add_)));
          set_has_m_p_thunder_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_m_P_thunder_Rdu;
        break;
      }

      // optional int32 m_P_thunder_Rdu = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_thunder_Rdu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_thunder_rdu_)));
          set_has_m_p_thunder_rdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_m_P_player_Add;
        break;
      }

      // optional int32 m_P_player_Add = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_player_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_player_add_)));
          set_has_m_p_player_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_m_P_player_Redu;
        break;
      }

      // optional int32 m_P_player_Redu = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_player_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_player_redu_)));
          set_has_m_p_player_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_m_P_leader_Add;
        break;
      }

      // optional int32 m_P_leader_Add = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_leader_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_leader_add_)));
          set_has_m_p_leader_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_m_P_leader_Redu;
        break;
      }

      // optional int32 m_P_leader_Redu = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_leader_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_leader_redu_)));
          set_has_m_p_leader_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_m_P_mon_Add;
        break;
      }

      // optional int32 m_P_mon_Add = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_mon_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_mon_add_)));
          set_has_m_p_mon_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_m_P_mon_Redu;
        break;
      }

      // optional int32 m_P_mon_Redu = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_mon_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_mon_redu_)));
          set_has_m_p_mon_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_m_P_var_Redu;
        break;
      }

      // optional int32 m_P_var_Redu = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_var_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_var_redu_)));
          set_has_m_p_var_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_m_P_var_Add;
        break;
      }

      // optional int32 m_P_var_Add = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_var_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_var_add_)));
          set_has_m_p_var_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_m_P_unusual_Resist;
        break;
      }

      // optional int32 m_P_unusual_Resist = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_unusual_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_unusual_resist_)));
          set_has_m_p_unusual_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_m_P_unusual_Hit;
        break;
      }

      // optional int32 m_P_unusual_Hit = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_unusual_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_unusual_hit_)));
          set_has_m_p_unusual_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_m_P_hp_Recover;
        break;
      }

      // optional int32 m_P_hp_Recover = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_hp_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_hp_recover_)));
          set_has_m_p_hp_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_m_P_unusual_Add;
        break;
      }

      // optional int32 m_P_unusual_Add = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_unusual_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_unusual_add_)));
          set_has_m_p_unusual_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_m_P_fix_Recover;
        break;
      }

      // optional int32 m_P_fix_Recover = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_fix_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_fix_recover_)));
          set_has_m_p_fix_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_m_P_high_hp_Add;
        break;
      }

      // optional int32 m_P_high_hp_Add = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_high_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_high_hp_add_)));
          set_has_m_p_high_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_m_P_recover_hp_Add;
        break;
      }

      // optional int32 m_P_recover_hp_Add = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_recover_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_recover_hp_add_)));
          set_has_m_p_recover_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_m_P_week_Add;
        break;
      }

      // optional int32 m_P_week_Add = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_P_week_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_p_week_add_)));
          set_has_m_p_week_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_m_shield;
        break;
      }

      // optional int64 m_shield = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_shield_)));
          set_has_m_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterValueparam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_P_max_Hp = 2;
  if (has_m_p_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_p_max_hp(), output);
  }

  // optional int32 m_P_atk = 3;
  if (has_m_p_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_p_atk(), output);
  }

  // optional int32 m_P_def = 4;
  if (has_m_p_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_p_def(), output);
  }

  // optional int32 m_P_brk_Armor = 5;
  if (has_m_p_brk_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_p_brk_armor(), output);
  }

  // optional int32 m_P_five_Dam = 6;
  if (has_m_p_five_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_p_five_dam(), output);
  }

  // optional int32 m_P_five_Armor = 7;
  if (has_m_p_five_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_p_five_armor(), output);
  }

  // optional int32 m_P_thump_Rate = 8;
  if (has_m_p_thump_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_p_thump_rate(), output);
  }

  // optional int32 m_P_thump_Resist = 9;
  if (has_m_p_thump_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_p_thump_resist(), output);
  }

  // optional int32 m_P_sky = 10;
  if (has_m_p_sky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_p_sky(), output);
  }

  // optional int32 m_P_sky_Dam = 11;
  if (has_m_p_sky_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_p_sky_dam(), output);
  }

  // optional int32 m_P_sky_Redu_Resist = 12;
  if (has_m_p_sky_redu_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_p_sky_redu_resist(), output);
  }

  // optional int32 m_P_sky_Resist = 13;
  if (has_m_p_sky_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_p_sky_resist(), output);
  }

  // optional int32 m_P_kill_God = 14;
  if (has_m_p_kill_god()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_p_kill_god(), output);
  }

  // optional int32 m_P_god_Body = 15;
  if (has_m_p_god_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_p_god_body(), output);
  }

  // optional int32 m_P_mortal_Rate = 16;
  if (has_m_p_mortal_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_p_mortal_rate(), output);
  }

  // optional int32 m_P_mortal_Resist = 17;
  if (has_m_p_mortal_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_p_mortal_resist(), output);
  }

  // optional int32 m_P_fairy_Rate = 18;
  if (has_m_p_fairy_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_p_fairy_rate(), output);
  }

  // optional int32 m_P_fairy_Resist = 19;
  if (has_m_p_fairy_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_p_fairy_resist(), output);
  }

  // optional int32 m_P_god_Rate = 20;
  if (has_m_p_god_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_p_god_rate(), output);
  }

  // optional int32 m_P_god_Resist = 21;
  if (has_m_p_god_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_p_god_resist(), output);
  }

  // optional int32 m_P_crit_Rate = 22;
  if (has_m_p_crit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_p_crit_rate(), output);
  }

  // optional int32 m_P_crit_resit_Rate = 23;
  if (has_m_p_crit_resit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_p_crit_resit_rate(), output);
  }

  // optional int32 m_P_crit_Dam = 24;
  if (has_m_p_crit_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_p_crit_dam(), output);
  }

  // optional int32 m_P_crit_Redu = 25;
  if (has_m_p_crit_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_p_crit_redu(), output);
  }

  // optional int32 m_P_batter_Rate = 26;
  if (has_m_p_batter_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_p_batter_rate(), output);
  }

  // optional int32 m_P_batter_Resist = 27;
  if (has_m_p_batter_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_p_batter_resist(), output);
  }

  // optional int32 m_P_batter_Dam = 28;
  if (has_m_p_batter_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_p_batter_dam(), output);
  }

  // optional int32 m_P_batter_Redu = 29;
  if (has_m_p_batter_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->m_p_batter_redu(), output);
  }

  // optional int32 m_P_brkdown_Rate = 30;
  if (has_m_p_brkdown_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->m_p_brkdown_rate(), output);
  }

  // optional int32 m_P_brkdown_Resist = 31;
  if (has_m_p_brkdown_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->m_p_brkdown_resist(), output);
  }

  // optional int32 m_P_dam_Add = 32;
  if (has_m_p_dam_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->m_p_dam_add(), output);
  }

  // optional int32 m_P_dam_Redu = 33;
  if (has_m_p_dam_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_p_dam_redu(), output);
  }

  // optional int32 m_P_all_Add = 34;
  if (has_m_p_all_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->m_p_all_add(), output);
  }

  // optional int32 m_P_all_Redu = 35;
  if (has_m_p_all_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->m_p_all_redu(), output);
  }

  // optional int32 m_P_skill_Add = 36;
  if (has_m_p_skill_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->m_p_skill_add(), output);
  }

  // optional int32 m_P_skill_Redu = 37;
  if (has_m_p_skill_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->m_p_skill_redu(), output);
  }

  // optional int32 m_P_rebound_Dam = 38;
  if (has_m_p_rebound_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->m_p_rebound_dam(), output);
  }

  // optional int32 m_P_hp_Steal = 39;
  if (has_m_p_hp_steal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->m_p_hp_steal(), output);
  }

  // optional int32 m_P_dodge_Rate = 40;
  if (has_m_p_dodge_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->m_p_dodge_rate(), output);
  }

  // optional int32 m_P_hit_Rate = 41;
  if (has_m_p_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->m_p_hit_rate(), output);
  }

  // optional int32 m_P_blk_Rate = 42;
  if (has_m_p_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->m_p_blk_rate(), output);
  }

  // optional int32 m_P_brk_blk_Rate = 43;
  if (has_m_p_brk_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->m_p_brk_blk_rate(), output);
  }

  // optional int32 m_P_blk_Free = 44;
  if (has_m_p_blk_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->m_p_blk_free(), output);
  }

  // optional int32 m_P_blk_Pierce = 45;
  if (has_m_p_blk_pierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->m_p_blk_pierce(), output);
  }

  // optional int32 m_P_rel_Armor = 46;
  if (has_m_p_rel_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->m_p_rel_armor(), output);
  }

  // optional int32 m_P_rel_Dam = 47;
  if (has_m_p_rel_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->m_p_rel_dam(), output);
  }

  // optional int32 m_P_five_Resist = 48;
  if (has_m_p_five_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->m_p_five_resist(), output);
  }

  // optional int32 m_P_five_resist_Redu = 49;
  if (has_m_p_five_resist_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->m_p_five_resist_redu(), output);
  }

  // optional int32 m_P_fire_Add = 50;
  if (has_m_p_fire_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->m_p_fire_add(), output);
  }

  // optional int32 m_P_fire_Redu = 51;
  if (has_m_p_fire_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->m_p_fire_redu(), output);
  }

  // optional int32 m_P_ice_Add = 52;
  if (has_m_p_ice_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->m_p_ice_add(), output);
  }

  // optional int32 m_P_ice_Redu = 53;
  if (has_m_p_ice_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->m_p_ice_redu(), output);
  }

  // optional int32 m_P_thunder_Add = 54;
  if (has_m_p_thunder_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->m_p_thunder_add(), output);
  }

  // optional int32 m_P_thunder_Rdu = 55;
  if (has_m_p_thunder_rdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->m_p_thunder_rdu(), output);
  }

  // optional int32 m_P_player_Add = 56;
  if (has_m_p_player_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->m_p_player_add(), output);
  }

  // optional int32 m_P_player_Redu = 57;
  if (has_m_p_player_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->m_p_player_redu(), output);
  }

  // optional int32 m_P_leader_Add = 58;
  if (has_m_p_leader_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->m_p_leader_add(), output);
  }

  // optional int32 m_P_leader_Redu = 59;
  if (has_m_p_leader_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->m_p_leader_redu(), output);
  }

  // optional int32 m_P_mon_Add = 60;
  if (has_m_p_mon_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->m_p_mon_add(), output);
  }

  // optional int32 m_P_mon_Redu = 61;
  if (has_m_p_mon_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->m_p_mon_redu(), output);
  }

  // optional int32 m_P_var_Redu = 62;
  if (has_m_p_var_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->m_p_var_redu(), output);
  }

  // optional int32 m_P_var_Add = 63;
  if (has_m_p_var_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->m_p_var_add(), output);
  }

  // optional int32 m_P_unusual_Resist = 64;
  if (has_m_p_unusual_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->m_p_unusual_resist(), output);
  }

  // optional int32 m_P_unusual_Hit = 65;
  if (has_m_p_unusual_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->m_p_unusual_hit(), output);
  }

  // optional int32 m_P_hp_Recover = 66;
  if (has_m_p_hp_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->m_p_hp_recover(), output);
  }

  // optional int32 m_P_unusual_Add = 67;
  if (has_m_p_unusual_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->m_p_unusual_add(), output);
  }

  // optional int32 m_P_fix_Recover = 68;
  if (has_m_p_fix_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->m_p_fix_recover(), output);
  }

  // optional int32 m_P_high_hp_Add = 69;
  if (has_m_p_high_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->m_p_high_hp_add(), output);
  }

  // optional int32 m_P_recover_hp_Add = 70;
  if (has_m_p_recover_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->m_p_recover_hp_add(), output);
  }

  // optional int32 m_P_week_Add = 71;
  if (has_m_p_week_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->m_p_week_add(), output);
  }

  // optional int64 m_shield = 72;
  if (has_m_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(72, this->m_shield(), output);
  }

  // optional int64 m_exp = 73;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(73, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterValueparam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_P_max_Hp = 2;
  if (has_m_p_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_p_max_hp(), target);
  }

  // optional int32 m_P_atk = 3;
  if (has_m_p_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_p_atk(), target);
  }

  // optional int32 m_P_def = 4;
  if (has_m_p_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_p_def(), target);
  }

  // optional int32 m_P_brk_Armor = 5;
  if (has_m_p_brk_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_p_brk_armor(), target);
  }

  // optional int32 m_P_five_Dam = 6;
  if (has_m_p_five_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_p_five_dam(), target);
  }

  // optional int32 m_P_five_Armor = 7;
  if (has_m_p_five_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_p_five_armor(), target);
  }

  // optional int32 m_P_thump_Rate = 8;
  if (has_m_p_thump_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_p_thump_rate(), target);
  }

  // optional int32 m_P_thump_Resist = 9;
  if (has_m_p_thump_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_p_thump_resist(), target);
  }

  // optional int32 m_P_sky = 10;
  if (has_m_p_sky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_p_sky(), target);
  }

  // optional int32 m_P_sky_Dam = 11;
  if (has_m_p_sky_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_p_sky_dam(), target);
  }

  // optional int32 m_P_sky_Redu_Resist = 12;
  if (has_m_p_sky_redu_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_p_sky_redu_resist(), target);
  }

  // optional int32 m_P_sky_Resist = 13;
  if (has_m_p_sky_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_p_sky_resist(), target);
  }

  // optional int32 m_P_kill_God = 14;
  if (has_m_p_kill_god()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_p_kill_god(), target);
  }

  // optional int32 m_P_god_Body = 15;
  if (has_m_p_god_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_p_god_body(), target);
  }

  // optional int32 m_P_mortal_Rate = 16;
  if (has_m_p_mortal_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_p_mortal_rate(), target);
  }

  // optional int32 m_P_mortal_Resist = 17;
  if (has_m_p_mortal_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_p_mortal_resist(), target);
  }

  // optional int32 m_P_fairy_Rate = 18;
  if (has_m_p_fairy_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_p_fairy_rate(), target);
  }

  // optional int32 m_P_fairy_Resist = 19;
  if (has_m_p_fairy_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_p_fairy_resist(), target);
  }

  // optional int32 m_P_god_Rate = 20;
  if (has_m_p_god_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_p_god_rate(), target);
  }

  // optional int32 m_P_god_Resist = 21;
  if (has_m_p_god_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_p_god_resist(), target);
  }

  // optional int32 m_P_crit_Rate = 22;
  if (has_m_p_crit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_p_crit_rate(), target);
  }

  // optional int32 m_P_crit_resit_Rate = 23;
  if (has_m_p_crit_resit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_p_crit_resit_rate(), target);
  }

  // optional int32 m_P_crit_Dam = 24;
  if (has_m_p_crit_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_p_crit_dam(), target);
  }

  // optional int32 m_P_crit_Redu = 25;
  if (has_m_p_crit_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_p_crit_redu(), target);
  }

  // optional int32 m_P_batter_Rate = 26;
  if (has_m_p_batter_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_p_batter_rate(), target);
  }

  // optional int32 m_P_batter_Resist = 27;
  if (has_m_p_batter_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_p_batter_resist(), target);
  }

  // optional int32 m_P_batter_Dam = 28;
  if (has_m_p_batter_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_p_batter_dam(), target);
  }

  // optional int32 m_P_batter_Redu = 29;
  if (has_m_p_batter_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->m_p_batter_redu(), target);
  }

  // optional int32 m_P_brkdown_Rate = 30;
  if (has_m_p_brkdown_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->m_p_brkdown_rate(), target);
  }

  // optional int32 m_P_brkdown_Resist = 31;
  if (has_m_p_brkdown_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->m_p_brkdown_resist(), target);
  }

  // optional int32 m_P_dam_Add = 32;
  if (has_m_p_dam_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->m_p_dam_add(), target);
  }

  // optional int32 m_P_dam_Redu = 33;
  if (has_m_p_dam_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->m_p_dam_redu(), target);
  }

  // optional int32 m_P_all_Add = 34;
  if (has_m_p_all_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->m_p_all_add(), target);
  }

  // optional int32 m_P_all_Redu = 35;
  if (has_m_p_all_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->m_p_all_redu(), target);
  }

  // optional int32 m_P_skill_Add = 36;
  if (has_m_p_skill_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->m_p_skill_add(), target);
  }

  // optional int32 m_P_skill_Redu = 37;
  if (has_m_p_skill_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->m_p_skill_redu(), target);
  }

  // optional int32 m_P_rebound_Dam = 38;
  if (has_m_p_rebound_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->m_p_rebound_dam(), target);
  }

  // optional int32 m_P_hp_Steal = 39;
  if (has_m_p_hp_steal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->m_p_hp_steal(), target);
  }

  // optional int32 m_P_dodge_Rate = 40;
  if (has_m_p_dodge_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->m_p_dodge_rate(), target);
  }

  // optional int32 m_P_hit_Rate = 41;
  if (has_m_p_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->m_p_hit_rate(), target);
  }

  // optional int32 m_P_blk_Rate = 42;
  if (has_m_p_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->m_p_blk_rate(), target);
  }

  // optional int32 m_P_brk_blk_Rate = 43;
  if (has_m_p_brk_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->m_p_brk_blk_rate(), target);
  }

  // optional int32 m_P_blk_Free = 44;
  if (has_m_p_blk_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->m_p_blk_free(), target);
  }

  // optional int32 m_P_blk_Pierce = 45;
  if (has_m_p_blk_pierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->m_p_blk_pierce(), target);
  }

  // optional int32 m_P_rel_Armor = 46;
  if (has_m_p_rel_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->m_p_rel_armor(), target);
  }

  // optional int32 m_P_rel_Dam = 47;
  if (has_m_p_rel_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->m_p_rel_dam(), target);
  }

  // optional int32 m_P_five_Resist = 48;
  if (has_m_p_five_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->m_p_five_resist(), target);
  }

  // optional int32 m_P_five_resist_Redu = 49;
  if (has_m_p_five_resist_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->m_p_five_resist_redu(), target);
  }

  // optional int32 m_P_fire_Add = 50;
  if (has_m_p_fire_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->m_p_fire_add(), target);
  }

  // optional int32 m_P_fire_Redu = 51;
  if (has_m_p_fire_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->m_p_fire_redu(), target);
  }

  // optional int32 m_P_ice_Add = 52;
  if (has_m_p_ice_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->m_p_ice_add(), target);
  }

  // optional int32 m_P_ice_Redu = 53;
  if (has_m_p_ice_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->m_p_ice_redu(), target);
  }

  // optional int32 m_P_thunder_Add = 54;
  if (has_m_p_thunder_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->m_p_thunder_add(), target);
  }

  // optional int32 m_P_thunder_Rdu = 55;
  if (has_m_p_thunder_rdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->m_p_thunder_rdu(), target);
  }

  // optional int32 m_P_player_Add = 56;
  if (has_m_p_player_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->m_p_player_add(), target);
  }

  // optional int32 m_P_player_Redu = 57;
  if (has_m_p_player_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->m_p_player_redu(), target);
  }

  // optional int32 m_P_leader_Add = 58;
  if (has_m_p_leader_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->m_p_leader_add(), target);
  }

  // optional int32 m_P_leader_Redu = 59;
  if (has_m_p_leader_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->m_p_leader_redu(), target);
  }

  // optional int32 m_P_mon_Add = 60;
  if (has_m_p_mon_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->m_p_mon_add(), target);
  }

  // optional int32 m_P_mon_Redu = 61;
  if (has_m_p_mon_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->m_p_mon_redu(), target);
  }

  // optional int32 m_P_var_Redu = 62;
  if (has_m_p_var_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->m_p_var_redu(), target);
  }

  // optional int32 m_P_var_Add = 63;
  if (has_m_p_var_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->m_p_var_add(), target);
  }

  // optional int32 m_P_unusual_Resist = 64;
  if (has_m_p_unusual_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->m_p_unusual_resist(), target);
  }

  // optional int32 m_P_unusual_Hit = 65;
  if (has_m_p_unusual_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->m_p_unusual_hit(), target);
  }

  // optional int32 m_P_hp_Recover = 66;
  if (has_m_p_hp_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->m_p_hp_recover(), target);
  }

  // optional int32 m_P_unusual_Add = 67;
  if (has_m_p_unusual_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->m_p_unusual_add(), target);
  }

  // optional int32 m_P_fix_Recover = 68;
  if (has_m_p_fix_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->m_p_fix_recover(), target);
  }

  // optional int32 m_P_high_hp_Add = 69;
  if (has_m_p_high_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->m_p_high_hp_add(), target);
  }

  // optional int32 m_P_recover_hp_Add = 70;
  if (has_m_p_recover_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->m_p_recover_hp_add(), target);
  }

  // optional int32 m_P_week_Add = 71;
  if (has_m_p_week_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->m_p_week_add(), target);
  }

  // optional int64 m_shield = 72;
  if (has_m_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(72, this->m_shield(), target);
  }

  // optional int64 m_exp = 73;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(73, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterValueparam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_P_max_Hp = 2;
    if (has_m_p_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_max_hp());
    }

    // optional int32 m_P_atk = 3;
    if (has_m_p_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_atk());
    }

    // optional int32 m_P_def = 4;
    if (has_m_p_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_def());
    }

    // optional int32 m_P_brk_Armor = 5;
    if (has_m_p_brk_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_brk_armor());
    }

    // optional int32 m_P_five_Dam = 6;
    if (has_m_p_five_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_five_dam());
    }

    // optional int32 m_P_five_Armor = 7;
    if (has_m_p_five_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_five_armor());
    }

    // optional int32 m_P_thump_Rate = 8;
    if (has_m_p_thump_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_thump_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_P_thump_Resist = 9;
    if (has_m_p_thump_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_thump_resist());
    }

    // optional int32 m_P_sky = 10;
    if (has_m_p_sky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_sky());
    }

    // optional int32 m_P_sky_Dam = 11;
    if (has_m_p_sky_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_sky_dam());
    }

    // optional int32 m_P_sky_Redu_Resist = 12;
    if (has_m_p_sky_redu_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_sky_redu_resist());
    }

    // optional int32 m_P_sky_Resist = 13;
    if (has_m_p_sky_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_sky_resist());
    }

    // optional int32 m_P_kill_God = 14;
    if (has_m_p_kill_god()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_kill_god());
    }

    // optional int32 m_P_god_Body = 15;
    if (has_m_p_god_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_god_body());
    }

    // optional int32 m_P_mortal_Rate = 16;
    if (has_m_p_mortal_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_mortal_rate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_P_mortal_Resist = 17;
    if (has_m_p_mortal_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_mortal_resist());
    }

    // optional int32 m_P_fairy_Rate = 18;
    if (has_m_p_fairy_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_fairy_rate());
    }

    // optional int32 m_P_fairy_Resist = 19;
    if (has_m_p_fairy_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_fairy_resist());
    }

    // optional int32 m_P_god_Rate = 20;
    if (has_m_p_god_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_god_rate());
    }

    // optional int32 m_P_god_Resist = 21;
    if (has_m_p_god_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_god_resist());
    }

    // optional int32 m_P_crit_Rate = 22;
    if (has_m_p_crit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_crit_rate());
    }

    // optional int32 m_P_crit_resit_Rate = 23;
    if (has_m_p_crit_resit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_crit_resit_rate());
    }

    // optional int32 m_P_crit_Dam = 24;
    if (has_m_p_crit_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_crit_dam());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_P_crit_Redu = 25;
    if (has_m_p_crit_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_crit_redu());
    }

    // optional int32 m_P_batter_Rate = 26;
    if (has_m_p_batter_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_batter_rate());
    }

    // optional int32 m_P_batter_Resist = 27;
    if (has_m_p_batter_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_batter_resist());
    }

    // optional int32 m_P_batter_Dam = 28;
    if (has_m_p_batter_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_batter_dam());
    }

    // optional int32 m_P_batter_Redu = 29;
    if (has_m_p_batter_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_batter_redu());
    }

    // optional int32 m_P_brkdown_Rate = 30;
    if (has_m_p_brkdown_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_brkdown_rate());
    }

    // optional int32 m_P_brkdown_Resist = 31;
    if (has_m_p_brkdown_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_brkdown_resist());
    }

    // optional int32 m_P_dam_Add = 32;
    if (has_m_p_dam_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_dam_add());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 m_P_dam_Redu = 33;
    if (has_m_p_dam_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_dam_redu());
    }

    // optional int32 m_P_all_Add = 34;
    if (has_m_p_all_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_all_add());
    }

    // optional int32 m_P_all_Redu = 35;
    if (has_m_p_all_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_all_redu());
    }

    // optional int32 m_P_skill_Add = 36;
    if (has_m_p_skill_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_skill_add());
    }

    // optional int32 m_P_skill_Redu = 37;
    if (has_m_p_skill_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_skill_redu());
    }

    // optional int32 m_P_rebound_Dam = 38;
    if (has_m_p_rebound_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_rebound_dam());
    }

    // optional int32 m_P_hp_Steal = 39;
    if (has_m_p_hp_steal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_hp_steal());
    }

    // optional int32 m_P_dodge_Rate = 40;
    if (has_m_p_dodge_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_dodge_rate());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 m_P_hit_Rate = 41;
    if (has_m_p_hit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_hit_rate());
    }

    // optional int32 m_P_blk_Rate = 42;
    if (has_m_p_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_blk_rate());
    }

    // optional int32 m_P_brk_blk_Rate = 43;
    if (has_m_p_brk_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_brk_blk_rate());
    }

    // optional int32 m_P_blk_Free = 44;
    if (has_m_p_blk_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_blk_free());
    }

    // optional int32 m_P_blk_Pierce = 45;
    if (has_m_p_blk_pierce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_blk_pierce());
    }

    // optional int32 m_P_rel_Armor = 46;
    if (has_m_p_rel_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_rel_armor());
    }

    // optional int32 m_P_rel_Dam = 47;
    if (has_m_p_rel_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_rel_dam());
    }

    // optional int32 m_P_five_Resist = 48;
    if (has_m_p_five_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_five_resist());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 m_P_five_resist_Redu = 49;
    if (has_m_p_five_resist_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_five_resist_redu());
    }

    // optional int32 m_P_fire_Add = 50;
    if (has_m_p_fire_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_fire_add());
    }

    // optional int32 m_P_fire_Redu = 51;
    if (has_m_p_fire_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_fire_redu());
    }

    // optional int32 m_P_ice_Add = 52;
    if (has_m_p_ice_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_ice_add());
    }

    // optional int32 m_P_ice_Redu = 53;
    if (has_m_p_ice_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_ice_redu());
    }

    // optional int32 m_P_thunder_Add = 54;
    if (has_m_p_thunder_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_thunder_add());
    }

    // optional int32 m_P_thunder_Rdu = 55;
    if (has_m_p_thunder_rdu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_thunder_rdu());
    }

    // optional int32 m_P_player_Add = 56;
    if (has_m_p_player_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_player_add());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 m_P_player_Redu = 57;
    if (has_m_p_player_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_player_redu());
    }

    // optional int32 m_P_leader_Add = 58;
    if (has_m_p_leader_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_leader_add());
    }

    // optional int32 m_P_leader_Redu = 59;
    if (has_m_p_leader_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_leader_redu());
    }

    // optional int32 m_P_mon_Add = 60;
    if (has_m_p_mon_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_mon_add());
    }

    // optional int32 m_P_mon_Redu = 61;
    if (has_m_p_mon_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_mon_redu());
    }

    // optional int32 m_P_var_Redu = 62;
    if (has_m_p_var_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_var_redu());
    }

    // optional int32 m_P_var_Add = 63;
    if (has_m_p_var_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_var_add());
    }

    // optional int32 m_P_unusual_Resist = 64;
    if (has_m_p_unusual_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_unusual_resist());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 m_P_unusual_Hit = 65;
    if (has_m_p_unusual_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_unusual_hit());
    }

    // optional int32 m_P_hp_Recover = 66;
    if (has_m_p_hp_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_hp_recover());
    }

    // optional int32 m_P_unusual_Add = 67;
    if (has_m_p_unusual_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_unusual_add());
    }

    // optional int32 m_P_fix_Recover = 68;
    if (has_m_p_fix_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_fix_recover());
    }

    // optional int32 m_P_high_hp_Add = 69;
    if (has_m_p_high_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_high_hp_add());
    }

    // optional int32 m_P_recover_hp_Add = 70;
    if (has_m_p_recover_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_recover_hp_add());
    }

    // optional int32 m_P_week_Add = 71;
    if (has_m_p_week_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_p_week_add());
    }

    // optional int64 m_shield = 72;
    if (has_m_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_shield());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int64 m_exp = 73;
    if (has_m_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterValueparam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterValueparam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterValueparam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterValueparam::MergeFrom(const E_MonsterValueparam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_p_max_hp()) {
      set_m_p_max_hp(from.m_p_max_hp());
    }
    if (from.has_m_p_atk()) {
      set_m_p_atk(from.m_p_atk());
    }
    if (from.has_m_p_def()) {
      set_m_p_def(from.m_p_def());
    }
    if (from.has_m_p_brk_armor()) {
      set_m_p_brk_armor(from.m_p_brk_armor());
    }
    if (from.has_m_p_five_dam()) {
      set_m_p_five_dam(from.m_p_five_dam());
    }
    if (from.has_m_p_five_armor()) {
      set_m_p_five_armor(from.m_p_five_armor());
    }
    if (from.has_m_p_thump_rate()) {
      set_m_p_thump_rate(from.m_p_thump_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_p_thump_resist()) {
      set_m_p_thump_resist(from.m_p_thump_resist());
    }
    if (from.has_m_p_sky()) {
      set_m_p_sky(from.m_p_sky());
    }
    if (from.has_m_p_sky_dam()) {
      set_m_p_sky_dam(from.m_p_sky_dam());
    }
    if (from.has_m_p_sky_redu_resist()) {
      set_m_p_sky_redu_resist(from.m_p_sky_redu_resist());
    }
    if (from.has_m_p_sky_resist()) {
      set_m_p_sky_resist(from.m_p_sky_resist());
    }
    if (from.has_m_p_kill_god()) {
      set_m_p_kill_god(from.m_p_kill_god());
    }
    if (from.has_m_p_god_body()) {
      set_m_p_god_body(from.m_p_god_body());
    }
    if (from.has_m_p_mortal_rate()) {
      set_m_p_mortal_rate(from.m_p_mortal_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_p_mortal_resist()) {
      set_m_p_mortal_resist(from.m_p_mortal_resist());
    }
    if (from.has_m_p_fairy_rate()) {
      set_m_p_fairy_rate(from.m_p_fairy_rate());
    }
    if (from.has_m_p_fairy_resist()) {
      set_m_p_fairy_resist(from.m_p_fairy_resist());
    }
    if (from.has_m_p_god_rate()) {
      set_m_p_god_rate(from.m_p_god_rate());
    }
    if (from.has_m_p_god_resist()) {
      set_m_p_god_resist(from.m_p_god_resist());
    }
    if (from.has_m_p_crit_rate()) {
      set_m_p_crit_rate(from.m_p_crit_rate());
    }
    if (from.has_m_p_crit_resit_rate()) {
      set_m_p_crit_resit_rate(from.m_p_crit_resit_rate());
    }
    if (from.has_m_p_crit_dam()) {
      set_m_p_crit_dam(from.m_p_crit_dam());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_p_crit_redu()) {
      set_m_p_crit_redu(from.m_p_crit_redu());
    }
    if (from.has_m_p_batter_rate()) {
      set_m_p_batter_rate(from.m_p_batter_rate());
    }
    if (from.has_m_p_batter_resist()) {
      set_m_p_batter_resist(from.m_p_batter_resist());
    }
    if (from.has_m_p_batter_dam()) {
      set_m_p_batter_dam(from.m_p_batter_dam());
    }
    if (from.has_m_p_batter_redu()) {
      set_m_p_batter_redu(from.m_p_batter_redu());
    }
    if (from.has_m_p_brkdown_rate()) {
      set_m_p_brkdown_rate(from.m_p_brkdown_rate());
    }
    if (from.has_m_p_brkdown_resist()) {
      set_m_p_brkdown_resist(from.m_p_brkdown_resist());
    }
    if (from.has_m_p_dam_add()) {
      set_m_p_dam_add(from.m_p_dam_add());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_p_dam_redu()) {
      set_m_p_dam_redu(from.m_p_dam_redu());
    }
    if (from.has_m_p_all_add()) {
      set_m_p_all_add(from.m_p_all_add());
    }
    if (from.has_m_p_all_redu()) {
      set_m_p_all_redu(from.m_p_all_redu());
    }
    if (from.has_m_p_skill_add()) {
      set_m_p_skill_add(from.m_p_skill_add());
    }
    if (from.has_m_p_skill_redu()) {
      set_m_p_skill_redu(from.m_p_skill_redu());
    }
    if (from.has_m_p_rebound_dam()) {
      set_m_p_rebound_dam(from.m_p_rebound_dam());
    }
    if (from.has_m_p_hp_steal()) {
      set_m_p_hp_steal(from.m_p_hp_steal());
    }
    if (from.has_m_p_dodge_rate()) {
      set_m_p_dodge_rate(from.m_p_dodge_rate());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_m_p_hit_rate()) {
      set_m_p_hit_rate(from.m_p_hit_rate());
    }
    if (from.has_m_p_blk_rate()) {
      set_m_p_blk_rate(from.m_p_blk_rate());
    }
    if (from.has_m_p_brk_blk_rate()) {
      set_m_p_brk_blk_rate(from.m_p_brk_blk_rate());
    }
    if (from.has_m_p_blk_free()) {
      set_m_p_blk_free(from.m_p_blk_free());
    }
    if (from.has_m_p_blk_pierce()) {
      set_m_p_blk_pierce(from.m_p_blk_pierce());
    }
    if (from.has_m_p_rel_armor()) {
      set_m_p_rel_armor(from.m_p_rel_armor());
    }
    if (from.has_m_p_rel_dam()) {
      set_m_p_rel_dam(from.m_p_rel_dam());
    }
    if (from.has_m_p_five_resist()) {
      set_m_p_five_resist(from.m_p_five_resist());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_m_p_five_resist_redu()) {
      set_m_p_five_resist_redu(from.m_p_five_resist_redu());
    }
    if (from.has_m_p_fire_add()) {
      set_m_p_fire_add(from.m_p_fire_add());
    }
    if (from.has_m_p_fire_redu()) {
      set_m_p_fire_redu(from.m_p_fire_redu());
    }
    if (from.has_m_p_ice_add()) {
      set_m_p_ice_add(from.m_p_ice_add());
    }
    if (from.has_m_p_ice_redu()) {
      set_m_p_ice_redu(from.m_p_ice_redu());
    }
    if (from.has_m_p_thunder_add()) {
      set_m_p_thunder_add(from.m_p_thunder_add());
    }
    if (from.has_m_p_thunder_rdu()) {
      set_m_p_thunder_rdu(from.m_p_thunder_rdu());
    }
    if (from.has_m_p_player_add()) {
      set_m_p_player_add(from.m_p_player_add());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_m_p_player_redu()) {
      set_m_p_player_redu(from.m_p_player_redu());
    }
    if (from.has_m_p_leader_add()) {
      set_m_p_leader_add(from.m_p_leader_add());
    }
    if (from.has_m_p_leader_redu()) {
      set_m_p_leader_redu(from.m_p_leader_redu());
    }
    if (from.has_m_p_mon_add()) {
      set_m_p_mon_add(from.m_p_mon_add());
    }
    if (from.has_m_p_mon_redu()) {
      set_m_p_mon_redu(from.m_p_mon_redu());
    }
    if (from.has_m_p_var_redu()) {
      set_m_p_var_redu(from.m_p_var_redu());
    }
    if (from.has_m_p_var_add()) {
      set_m_p_var_add(from.m_p_var_add());
    }
    if (from.has_m_p_unusual_resist()) {
      set_m_p_unusual_resist(from.m_p_unusual_resist());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_m_p_unusual_hit()) {
      set_m_p_unusual_hit(from.m_p_unusual_hit());
    }
    if (from.has_m_p_hp_recover()) {
      set_m_p_hp_recover(from.m_p_hp_recover());
    }
    if (from.has_m_p_unusual_add()) {
      set_m_p_unusual_add(from.m_p_unusual_add());
    }
    if (from.has_m_p_fix_recover()) {
      set_m_p_fix_recover(from.m_p_fix_recover());
    }
    if (from.has_m_p_high_hp_add()) {
      set_m_p_high_hp_add(from.m_p_high_hp_add());
    }
    if (from.has_m_p_recover_hp_add()) {
      set_m_p_recover_hp_add(from.m_p_recover_hp_add());
    }
    if (from.has_m_p_week_add()) {
      set_m_p_week_add(from.m_p_week_add());
    }
    if (from.has_m_shield()) {
      set_m_shield(from.m_shield());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterValueparam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterValueparam::CopyFrom(const E_MonsterValueparam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterValueparam::IsInitialized() const {

  return true;
}

void E_MonsterValueparam::Swap(E_MonsterValueparam* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_p_max_hp_, other->m_p_max_hp_);
    std::swap(m_p_atk_, other->m_p_atk_);
    std::swap(m_p_def_, other->m_p_def_);
    std::swap(m_p_brk_armor_, other->m_p_brk_armor_);
    std::swap(m_p_five_dam_, other->m_p_five_dam_);
    std::swap(m_p_five_armor_, other->m_p_five_armor_);
    std::swap(m_p_thump_rate_, other->m_p_thump_rate_);
    std::swap(m_p_thump_resist_, other->m_p_thump_resist_);
    std::swap(m_p_sky_, other->m_p_sky_);
    std::swap(m_p_sky_dam_, other->m_p_sky_dam_);
    std::swap(m_p_sky_redu_resist_, other->m_p_sky_redu_resist_);
    std::swap(m_p_sky_resist_, other->m_p_sky_resist_);
    std::swap(m_p_kill_god_, other->m_p_kill_god_);
    std::swap(m_p_god_body_, other->m_p_god_body_);
    std::swap(m_p_mortal_rate_, other->m_p_mortal_rate_);
    std::swap(m_p_mortal_resist_, other->m_p_mortal_resist_);
    std::swap(m_p_fairy_rate_, other->m_p_fairy_rate_);
    std::swap(m_p_fairy_resist_, other->m_p_fairy_resist_);
    std::swap(m_p_god_rate_, other->m_p_god_rate_);
    std::swap(m_p_god_resist_, other->m_p_god_resist_);
    std::swap(m_p_crit_rate_, other->m_p_crit_rate_);
    std::swap(m_p_crit_resit_rate_, other->m_p_crit_resit_rate_);
    std::swap(m_p_crit_dam_, other->m_p_crit_dam_);
    std::swap(m_p_crit_redu_, other->m_p_crit_redu_);
    std::swap(m_p_batter_rate_, other->m_p_batter_rate_);
    std::swap(m_p_batter_resist_, other->m_p_batter_resist_);
    std::swap(m_p_batter_dam_, other->m_p_batter_dam_);
    std::swap(m_p_batter_redu_, other->m_p_batter_redu_);
    std::swap(m_p_brkdown_rate_, other->m_p_brkdown_rate_);
    std::swap(m_p_brkdown_resist_, other->m_p_brkdown_resist_);
    std::swap(m_p_dam_add_, other->m_p_dam_add_);
    std::swap(m_p_dam_redu_, other->m_p_dam_redu_);
    std::swap(m_p_all_add_, other->m_p_all_add_);
    std::swap(m_p_all_redu_, other->m_p_all_redu_);
    std::swap(m_p_skill_add_, other->m_p_skill_add_);
    std::swap(m_p_skill_redu_, other->m_p_skill_redu_);
    std::swap(m_p_rebound_dam_, other->m_p_rebound_dam_);
    std::swap(m_p_hp_steal_, other->m_p_hp_steal_);
    std::swap(m_p_dodge_rate_, other->m_p_dodge_rate_);
    std::swap(m_p_hit_rate_, other->m_p_hit_rate_);
    std::swap(m_p_blk_rate_, other->m_p_blk_rate_);
    std::swap(m_p_brk_blk_rate_, other->m_p_brk_blk_rate_);
    std::swap(m_p_blk_free_, other->m_p_blk_free_);
    std::swap(m_p_blk_pierce_, other->m_p_blk_pierce_);
    std::swap(m_p_rel_armor_, other->m_p_rel_armor_);
    std::swap(m_p_rel_dam_, other->m_p_rel_dam_);
    std::swap(m_p_five_resist_, other->m_p_five_resist_);
    std::swap(m_p_five_resist_redu_, other->m_p_five_resist_redu_);
    std::swap(m_p_fire_add_, other->m_p_fire_add_);
    std::swap(m_p_fire_redu_, other->m_p_fire_redu_);
    std::swap(m_p_ice_add_, other->m_p_ice_add_);
    std::swap(m_p_ice_redu_, other->m_p_ice_redu_);
    std::swap(m_p_thunder_add_, other->m_p_thunder_add_);
    std::swap(m_p_thunder_rdu_, other->m_p_thunder_rdu_);
    std::swap(m_p_player_add_, other->m_p_player_add_);
    std::swap(m_p_player_redu_, other->m_p_player_redu_);
    std::swap(m_p_leader_add_, other->m_p_leader_add_);
    std::swap(m_p_leader_redu_, other->m_p_leader_redu_);
    std::swap(m_p_mon_add_, other->m_p_mon_add_);
    std::swap(m_p_mon_redu_, other->m_p_mon_redu_);
    std::swap(m_p_var_redu_, other->m_p_var_redu_);
    std::swap(m_p_var_add_, other->m_p_var_add_);
    std::swap(m_p_unusual_resist_, other->m_p_unusual_resist_);
    std::swap(m_p_unusual_hit_, other->m_p_unusual_hit_);
    std::swap(m_p_hp_recover_, other->m_p_hp_recover_);
    std::swap(m_p_unusual_add_, other->m_p_unusual_add_);
    std::swap(m_p_fix_recover_, other->m_p_fix_recover_);
    std::swap(m_p_high_hp_add_, other->m_p_high_hp_add_);
    std::swap(m_p_recover_hp_add_, other->m_p_recover_hp_add_);
    std::swap(m_p_week_add_, other->m_p_week_add_);
    std::swap(m_shield_, other->m_shield_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterValueparam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterValueparam_descriptor_;
  metadata.reflection = E_MonsterValueparam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MonsterValueparam::kEMonsterValueparamListFieldNumber;
#endif  // !_MSC_VER

Sheet_MonsterValueparam::Sheet_MonsterValueparam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MonsterValueparam::InitAsDefaultInstance() {
}

Sheet_MonsterValueparam::Sheet_MonsterValueparam(const Sheet_MonsterValueparam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MonsterValueparam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MonsterValueparam::~Sheet_MonsterValueparam() {
  SharedDtor();
}

void Sheet_MonsterValueparam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MonsterValueparam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MonsterValueparam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MonsterValueparam_descriptor_;
}

const Sheet_MonsterValueparam& Sheet_MonsterValueparam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

Sheet_MonsterValueparam* Sheet_MonsterValueparam::default_instance_ = NULL;

Sheet_MonsterValueparam* Sheet_MonsterValueparam::New() const {
  return new Sheet_MonsterValueparam;
}

void Sheet_MonsterValueparam::Clear() {
  e_monstervalueparam_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MonsterValueparam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MonsterValueparam E_MonsterValueparam_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MonsterValueparam_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_monstervalueparam_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MonsterValueparam_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MonsterValueparam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MonsterValueparam E_MonsterValueparam_List = 1;
  for (int i = 0; i < this->e_monstervalueparam_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_monstervalueparam_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MonsterValueparam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MonsterValueparam E_MonsterValueparam_List = 1;
  for (int i = 0; i < this->e_monstervalueparam_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_monstervalueparam_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MonsterValueparam::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MonsterValueparam E_MonsterValueparam_List = 1;
  total_size += 1 * this->e_monstervalueparam_list_size();
  for (int i = 0; i < this->e_monstervalueparam_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_monstervalueparam_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MonsterValueparam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MonsterValueparam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MonsterValueparam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MonsterValueparam::MergeFrom(const Sheet_MonsterValueparam& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_monstervalueparam_list_.MergeFrom(from.e_monstervalueparam_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MonsterValueparam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MonsterValueparam::CopyFrom(const Sheet_MonsterValueparam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MonsterValueparam::IsInitialized() const {

  return true;
}

void Sheet_MonsterValueparam::Swap(Sheet_MonsterValueparam* other) {
  if (other != this) {
    e_monstervalueparam_list_.Swap(&other->e_monstervalueparam_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MonsterValueparam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MonsterValueparam_descriptor_;
  metadata.reflection = Sheet_MonsterValueparam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MonsterDrop::kMIdFieldNumber;
const int E_MonsterDrop::kMGroupFieldNumber;
const int E_MonsterDrop::kMOwnFieldNumber;
const int E_MonsterDrop::kMOwnProtectFieldNumber;
const int E_MonsterDrop::kMTypeFieldNumber;
const int E_MonsterDrop::kMBoxIDFieldNumber;
#endif  // !_MSC_VER

E_MonsterDrop::E_MonsterDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterDrop::InitAsDefaultInstance() {
}

E_MonsterDrop::E_MonsterDrop(const E_MonsterDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterDrop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_group_ = 0;
  m_own_ = 0;
  m_ownprotect_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterDrop::~E_MonsterDrop() {
  SharedDtor();
}

void E_MonsterDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MonsterDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterDrop_descriptor_;
}

const E_MonsterDrop& E_MonsterDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterDrop* E_MonsterDrop::default_instance_ = NULL;

E_MonsterDrop* E_MonsterDrop::New() const {
  return new E_MonsterDrop;
}

void E_MonsterDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_group_ = 0;
    m_own_ = 0;
    m_ownprotect_ = 0;
    m_type_ = 0;
  }
  m_boxid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_own;
        break;
      }

      // optional int32 m_own = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_own:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_own_)));
          set_has_m_own();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_ownProtect;
        break;
      }

      // optional int32 m_ownProtect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ownProtect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ownprotect_)));
          set_has_m_ownprotect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_boxID;
        break;
      }

      // repeated int64 m_boxID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_m_boxid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_boxid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_boxID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_own = 3;
  if (has_m_own()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_own(), output);
  }

  // optional int32 m_ownProtect = 4;
  if (has_m_ownprotect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ownprotect(), output);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_type(), output);
  }

  // repeated int64 m_boxID = 6;
  for (int i = 0; i < this->m_boxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->m_boxid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_own = 3;
  if (has_m_own()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_own(), target);
  }

  // optional int32 m_ownProtect = 4;
  if (has_m_ownprotect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ownprotect(), target);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_type(), target);
  }

  // repeated int64 m_boxID = 6;
  for (int i = 0; i < this->m_boxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->m_boxid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_own = 3;
    if (has_m_own()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_own());
    }

    // optional int32 m_ownProtect = 4;
    if (has_m_ownprotect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ownprotect());
    }

    // optional int32 m_type = 5;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  // repeated int64 m_boxID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_boxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_boxid(i));
    }
    total_size += 1 * this->m_boxid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterDrop::MergeFrom(const E_MonsterDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_boxid_.MergeFrom(from.m_boxid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_own()) {
      set_m_own(from.m_own());
    }
    if (from.has_m_ownprotect()) {
      set_m_ownprotect(from.m_ownprotect());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterDrop::CopyFrom(const E_MonsterDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterDrop::IsInitialized() const {

  return true;
}

void E_MonsterDrop::Swap(E_MonsterDrop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_own_, other->m_own_);
    std::swap(m_ownprotect_, other->m_ownprotect_);
    std::swap(m_type_, other->m_type_);
    m_boxid_.Swap(&other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterDrop_descriptor_;
  metadata.reflection = E_MonsterDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MonsterDrop::kEMonsterDropListFieldNumber;
#endif  // !_MSC_VER

Sheet_MonsterDrop::Sheet_MonsterDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MonsterDrop::InitAsDefaultInstance() {
}

Sheet_MonsterDrop::Sheet_MonsterDrop(const Sheet_MonsterDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MonsterDrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MonsterDrop::~Sheet_MonsterDrop() {
  SharedDtor();
}

void Sheet_MonsterDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MonsterDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MonsterDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MonsterDrop_descriptor_;
}

const Sheet_MonsterDrop& Sheet_MonsterDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

Sheet_MonsterDrop* Sheet_MonsterDrop::default_instance_ = NULL;

Sheet_MonsterDrop* Sheet_MonsterDrop::New() const {
  return new Sheet_MonsterDrop;
}

void Sheet_MonsterDrop::Clear() {
  e_monsterdrop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MonsterDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MonsterDrop E_MonsterDrop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MonsterDrop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_monsterdrop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MonsterDrop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MonsterDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MonsterDrop E_MonsterDrop_List = 1;
  for (int i = 0; i < this->e_monsterdrop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_monsterdrop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MonsterDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MonsterDrop E_MonsterDrop_List = 1;
  for (int i = 0; i < this->e_monsterdrop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_monsterdrop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MonsterDrop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MonsterDrop E_MonsterDrop_List = 1;
  total_size += 1 * this->e_monsterdrop_list_size();
  for (int i = 0; i < this->e_monsterdrop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_monsterdrop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MonsterDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MonsterDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MonsterDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MonsterDrop::MergeFrom(const Sheet_MonsterDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_monsterdrop_list_.MergeFrom(from.e_monsterdrop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MonsterDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MonsterDrop::CopyFrom(const Sheet_MonsterDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MonsterDrop::IsInitialized() const {

  return true;
}

void Sheet_MonsterDrop::Swap(Sheet_MonsterDrop* other) {
  if (other != this) {
    e_monsterdrop_list_.Swap(&other->e_monsterdrop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MonsterDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MonsterDrop_descriptor_;
  metadata.reflection = Sheet_MonsterDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MonsterCollect::kMIDFieldNumber;
const int E_MonsterCollect::kMTypeFieldNumber;
const int E_MonsterCollect::kMNumFieldNumber;
const int E_MonsterCollect::kMBreakDownFieldNumber;
const int E_MonsterCollect::kMDropGroupIDFieldNumber;
const int E_MonsterCollect::kMTimeFieldNumber;
const int E_MonsterCollect::kMGetTypeFieldNumber;
const int E_MonsterCollect::kMSkillTimeFieldNumber;
const int E_MonsterCollect::kMSkillIDFieldNumber;
const int E_MonsterCollect::kMDupIDFieldNumber;
const int E_MonsterCollect::kMMonsteIDFieldNumber;
#endif  // !_MSC_VER

E_MonsterCollect::E_MonsterCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MonsterCollect::InitAsDefaultInstance() {
}

E_MonsterCollect::E_MonsterCollect(const E_MonsterCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MonsterCollect::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_num_ = 0;
  m_breakdown_ = 0;
  m_dropgroupid_ = 0;
  m_time_ = 0;
  m_gettype_ = 0;
  m_skilltime_ = 0;
  m_skillid_ = 0;
  m_dupid_ = 0;
  m_monsteid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MonsterCollect::~E_MonsterCollect() {
  SharedDtor();
}

void E_MonsterCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MonsterCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MonsterCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MonsterCollect_descriptor_;
}

const E_MonsterCollect& E_MonsterCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

E_MonsterCollect* E_MonsterCollect::default_instance_ = NULL;

E_MonsterCollect* E_MonsterCollect::New() const {
  return new E_MonsterCollect;
}

void E_MonsterCollect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_num_ = 0;
    m_breakdown_ = 0;
    m_dropgroupid_ = 0;
    m_time_ = 0;
    m_gettype_ = 0;
    m_skilltime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_skillid_ = 0;
    m_dupid_ = 0;
    m_monsteid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MonsterCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_breakDown;
        break;
      }

      // optional int32 m_breakDown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breakDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breakdown_)));
          set_has_m_breakdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_dropGroupID;
        break;
      }

      // optional int32 m_dropGroupID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropgroupid_)));
          set_has_m_dropgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_getType;
        break;
      }

      // optional int32 m_getType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_getType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gettype_)));
          set_has_m_gettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_skillTime;
        break;
      }

      // optional int32 m_skillTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skilltime_)));
          set_has_m_skilltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_skillID;
        break;
      }

      // optional int32 m_skillID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_dupID;
        break;
      }

      // optional int32 m_dupID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dupid_)));
          set_has_m_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_monsteID;
        break;
      }

      // optional int32 m_monsteID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsteid_)));
          set_has_m_monsteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MonsterCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // optional int32 m_breakDown = 4;
  if (has_m_breakdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_breakdown(), output);
  }

  // optional int32 m_dropGroupID = 5;
  if (has_m_dropgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_dropgroupid(), output);
  }

  // optional int32 m_time = 6;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_time(), output);
  }

  // optional int32 m_getType = 7;
  if (has_m_gettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_gettype(), output);
  }

  // optional int32 m_skillTime = 8;
  if (has_m_skilltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_skilltime(), output);
  }

  // optional int32 m_skillID = 9;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_skillid(), output);
  }

  // optional int32 m_dupID = 10;
  if (has_m_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_dupid(), output);
  }

  // optional int32 m_monsteID = 11;
  if (has_m_monsteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_monsteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MonsterCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // optional int32 m_breakDown = 4;
  if (has_m_breakdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_breakdown(), target);
  }

  // optional int32 m_dropGroupID = 5;
  if (has_m_dropgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_dropgroupid(), target);
  }

  // optional int32 m_time = 6;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_time(), target);
  }

  // optional int32 m_getType = 7;
  if (has_m_gettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_gettype(), target);
  }

  // optional int32 m_skillTime = 8;
  if (has_m_skilltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_skilltime(), target);
  }

  // optional int32 m_skillID = 9;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_skillid(), target);
  }

  // optional int32 m_dupID = 10;
  if (has_m_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_dupid(), target);
  }

  // optional int32 m_monsteID = 11;
  if (has_m_monsteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_monsteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MonsterCollect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_breakDown = 4;
    if (has_m_breakdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breakdown());
    }

    // optional int32 m_dropGroupID = 5;
    if (has_m_dropgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropgroupid());
    }

    // optional int32 m_time = 6;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional int32 m_getType = 7;
    if (has_m_gettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gettype());
    }

    // optional int32 m_skillTime = 8;
    if (has_m_skilltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skilltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_skillID = 9;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_dupID = 10;
    if (has_m_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dupid());
    }

    // optional int32 m_monsteID = 11;
    if (has_m_monsteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MonsterCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MonsterCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MonsterCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MonsterCollect::MergeFrom(const E_MonsterCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_breakdown()) {
      set_m_breakdown(from.m_breakdown());
    }
    if (from.has_m_dropgroupid()) {
      set_m_dropgroupid(from.m_dropgroupid());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_gettype()) {
      set_m_gettype(from.m_gettype());
    }
    if (from.has_m_skilltime()) {
      set_m_skilltime(from.m_skilltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_dupid()) {
      set_m_dupid(from.m_dupid());
    }
    if (from.has_m_monsteid()) {
      set_m_monsteid(from.m_monsteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MonsterCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MonsterCollect::CopyFrom(const E_MonsterCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MonsterCollect::IsInitialized() const {

  return true;
}

void E_MonsterCollect::Swap(E_MonsterCollect* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_breakdown_, other->m_breakdown_);
    std::swap(m_dropgroupid_, other->m_dropgroupid_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_gettype_, other->m_gettype_);
    std::swap(m_skilltime_, other->m_skilltime_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_dupid_, other->m_dupid_);
    std::swap(m_monsteid_, other->m_monsteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MonsterCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MonsterCollect_descriptor_;
  metadata.reflection = E_MonsterCollect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MonsterCollect::kEMonsterCollectListFieldNumber;
#endif  // !_MSC_VER

Sheet_MonsterCollect::Sheet_MonsterCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MonsterCollect::InitAsDefaultInstance() {
}

Sheet_MonsterCollect::Sheet_MonsterCollect(const Sheet_MonsterCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MonsterCollect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MonsterCollect::~Sheet_MonsterCollect() {
  SharedDtor();
}

void Sheet_MonsterCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MonsterCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MonsterCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MonsterCollect_descriptor_;
}

const Sheet_MonsterCollect& Sheet_MonsterCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMonster_2eproto();
  return *default_instance_;
}

Sheet_MonsterCollect* Sheet_MonsterCollect::default_instance_ = NULL;

Sheet_MonsterCollect* Sheet_MonsterCollect::New() const {
  return new Sheet_MonsterCollect;
}

void Sheet_MonsterCollect::Clear() {
  e_monstercollect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MonsterCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MonsterCollect E_MonsterCollect_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MonsterCollect_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_monstercollect_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MonsterCollect_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MonsterCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MonsterCollect E_MonsterCollect_List = 1;
  for (int i = 0; i < this->e_monstercollect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_monstercollect_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MonsterCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MonsterCollect E_MonsterCollect_List = 1;
  for (int i = 0; i < this->e_monstercollect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_monstercollect_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MonsterCollect::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MonsterCollect E_MonsterCollect_List = 1;
  total_size += 1 * this->e_monstercollect_list_size();
  for (int i = 0; i < this->e_monstercollect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_monstercollect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MonsterCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MonsterCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MonsterCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MonsterCollect::MergeFrom(const Sheet_MonsterCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_monstercollect_list_.MergeFrom(from.e_monstercollect_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MonsterCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MonsterCollect::CopyFrom(const Sheet_MonsterCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MonsterCollect::IsInitialized() const {

  return true;
}

void Sheet_MonsterCollect::Swap(Sheet_MonsterCollect* other) {
  if (other != this) {
    e_monstercollect_list_.Swap(&other->e_monstercollect_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MonsterCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MonsterCollect_descriptor_;
  metadata.reflection = Sheet_MonsterCollect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
