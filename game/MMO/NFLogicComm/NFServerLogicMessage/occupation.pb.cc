// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: occupation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "occupation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* occupationoccupationattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationoccupationattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* occupationoccupationdelSkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationoccupationdelSkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* occupationoccupationskillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationoccupationskillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* occupationoccupation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationoccupation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_occupationoccupation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_occupationoccupation_reflection_ = NULL;
const ::google::protobuf::Descriptor* occupationaptitudeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationaptitudeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* occupationaptitude_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationaptitude_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_occupationaptitude_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_occupationaptitude_reflection_ = NULL;
const ::google::protobuf::Descriptor* occupationconditionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  occupationconditionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_occupationconditionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_occupationconditionList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_occupation_2eproto() {
  protobuf_AddDesc_occupation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "occupation.proto");
  GOOGLE_CHECK(file != NULL);
  occupationoccupationattributeDesc_descriptor_ = file->message_type(0);
  static const int occupationoccupationattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationattributeDesc, value_),
  };
  occupationoccupationattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationoccupationattributeDesc_descriptor_,
      occupationoccupationattributeDesc::default_instance_,
      occupationoccupationattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationoccupationattributeDesc));
  occupationoccupationdelSkillDesc_descriptor_ = file->message_type(1);
  static const int occupationoccupationdelSkillDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationdelSkillDesc, id_),
  };
  occupationoccupationdelSkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationoccupationdelSkillDesc_descriptor_,
      occupationoccupationdelSkillDesc::default_instance_,
      occupationoccupationdelSkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationdelSkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationdelSkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationoccupationdelSkillDesc));
  occupationoccupationskillDesc_descriptor_ = file->message_type(2);
  static const int occupationoccupationskillDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationskillDesc, id_),
  };
  occupationoccupationskillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationoccupationskillDesc_descriptor_,
      occupationoccupationskillDesc::default_instance_,
      occupationoccupationskillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationskillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupationskillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationoccupationskillDesc));
  occupationoccupation_descriptor_ = file->message_type(3);
  static const int occupationoccupation_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, occupationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, aptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, delskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, skill_),
  };
  occupationoccupation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationoccupation_descriptor_,
      occupationoccupation::default_instance_,
      occupationoccupation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationoccupation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationoccupation));
  Sheet_occupationoccupation_descriptor_ = file->message_type(4);
  static const int Sheet_occupationoccupation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationoccupation, occupationoccupation_list_),
  };
  Sheet_occupationoccupation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_occupationoccupation_descriptor_,
      Sheet_occupationoccupation::default_instance_,
      Sheet_occupationoccupation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationoccupation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationoccupation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_occupationoccupation));
  occupationaptitudeattributeDesc_descriptor_ = file->message_type(5);
  static const int occupationaptitudeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitudeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitudeattributeDesc, value_),
  };
  occupationaptitudeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationaptitudeattributeDesc_descriptor_,
      occupationaptitudeattributeDesc::default_instance_,
      occupationaptitudeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitudeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitudeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationaptitudeattributeDesc));
  occupationaptitude_descriptor_ = file->message_type(6);
  static const int occupationaptitude_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, requirement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, conditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, attribute_),
  };
  occupationaptitude_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationaptitude_descriptor_,
      occupationaptitude::default_instance_,
      occupationaptitude_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationaptitude, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationaptitude));
  Sheet_occupationaptitude_descriptor_ = file->message_type(7);
  static const int Sheet_occupationaptitude_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationaptitude, occupationaptitude_list_),
  };
  Sheet_occupationaptitude_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_occupationaptitude_descriptor_,
      Sheet_occupationaptitude::default_instance_,
      Sheet_occupationaptitude_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationaptitude, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationaptitude, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_occupationaptitude));
  occupationconditionList_descriptor_ = file->message_type(8);
  static const int occupationconditionList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationconditionList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationconditionList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationconditionList, conditionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationconditionList, conditionnum_),
  };
  occupationconditionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      occupationconditionList_descriptor_,
      occupationconditionList::default_instance_,
      occupationconditionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationconditionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(occupationconditionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(occupationconditionList));
  Sheet_occupationconditionList_descriptor_ = file->message_type(9);
  static const int Sheet_occupationconditionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationconditionList, occupationconditionlist_list_),
  };
  Sheet_occupationconditionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_occupationconditionList_descriptor_,
      Sheet_occupationconditionList::default_instance_,
      Sheet_occupationconditionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationconditionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_occupationconditionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_occupationconditionList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_occupation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationoccupationattributeDesc_descriptor_, &occupationoccupationattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationoccupationdelSkillDesc_descriptor_, &occupationoccupationdelSkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationoccupationskillDesc_descriptor_, &occupationoccupationskillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationoccupation_descriptor_, &occupationoccupation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_occupationoccupation_descriptor_, &Sheet_occupationoccupation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationaptitudeattributeDesc_descriptor_, &occupationaptitudeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationaptitude_descriptor_, &occupationaptitude::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_occupationaptitude_descriptor_, &Sheet_occupationaptitude::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    occupationconditionList_descriptor_, &occupationconditionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_occupationconditionList_descriptor_, &Sheet_occupationconditionList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_occupation_2eproto() {
  delete occupationoccupationattributeDesc::default_instance_;
  delete occupationoccupationattributeDesc_reflection_;
  delete occupationoccupationdelSkillDesc::default_instance_;
  delete occupationoccupationdelSkillDesc_reflection_;
  delete occupationoccupationskillDesc::default_instance_;
  delete occupationoccupationskillDesc_reflection_;
  delete occupationoccupation::default_instance_;
  delete occupationoccupation_reflection_;
  delete Sheet_occupationoccupation::default_instance_;
  delete Sheet_occupationoccupation_reflection_;
  delete occupationaptitudeattributeDesc::default_instance_;
  delete occupationaptitudeattributeDesc_reflection_;
  delete occupationaptitude::default_instance_;
  delete occupationaptitude_reflection_;
  delete Sheet_occupationaptitude::default_instance_;
  delete Sheet_occupationaptitude_reflection_;
  delete occupationconditionList::default_instance_;
  delete occupationconditionList_reflection_;
  delete Sheet_occupationconditionList::default_instance_;
  delete Sheet_occupationconditionList_reflection_;
}

void protobuf_AddDesc_occupation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020occupation.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"i\n!occupationoccupationattri"
    "buteDesc\022 \n\004type\030\001 \001(\005B\022\302\377\024\016\345\237\272\347\241\200\345\261\236\346\200\247"
    "ID\022\"\n\005value\030\002 \001(\005B\023\302\377\024\017\345\237\272\347\241\200\345\261\236\346\200\247\345\200\274\"B"
    "\n occupationoccupationdelSkillDesc\022\036\n\002id"
    "\030\001 \001(\003B\022\302\377\024\016\345\210\240\351\231\244\346\212\200\350\203\275ID\"\?\n\035occupation"
    "occupationskillDesc\022\036\n\002id\030\001 \001(\003B\022\302\377\024\016\345\242\236"
    "\345\212\240\346\212\200\350\203\275ID\"\274\004\n\024occupationoccupation\022(\n\014"
    "occupationID\030\001 \001(\003B\022\302\377\024\016\350\275\254\350\201\214\350\201\214\344\270\232ID\022\033"
    "\n\002id\030\002 \001(\005B\017\302\377\024\013\344\270\273\350\201\214\344\270\232ID\022\037\n\005grade\030\003 \001"
    "(\005B\020\302\377\024\014\350\201\214\344\270\232\347\255\211\347\272\247\022)\n\nactiveDesc\030\004 \001(\t"
    "B\025\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301\024\214\001\022\037\n\005level\030\005 \001(\005B\020"
    "\302\377\024\014\347\255\211\347\272\247\350\246\201\346\261\202\022\"\n\010aptitude\030\006 \001(\003B\020\302\377\024\014"
    "\345\242\203\347\225\214\350\246\201\346\261\202\022 \n\006taskID\030\007 \001(\tB\020\302\377\024\010\344\273\273\345\212\241"
    "id\220\301\024<\022#\n\005equip\030\010 \001(\tB\024\302\377\024\014\346\255\246\345\231\250\346\250\241\345\236\213\220"
    "\301\024<\022%\n\007modelID\030\t \001(\tB\024\302\377\024\014\346\250\241\345\236\213\350\267\257\345\276\204\220\301"
    "\024<\022L\n\tattribute\030\n \003(\0132+.proto_ff.occupat"
    "ionoccupationattributeDescB\014\302\377\024\004$$$$\210\301\024\004"
    "\022J\n\010delSkill\030\013 \003(\0132*.proto_ff.occupation"
    "occupationdelSkillDescB\014\302\377\024\004$$$$\210\301\024\003\022D\n\005"
    "skill\030\014 \003(\0132\'.proto_ff.occupationoccupat"
    "ionskillDescB\014\302\377\024\004$$$$\210\301\024\003\"e\n\032Sheet_occu"
    "pationoccupation\022G\n\031occupationoccupation"
    "_List\030\001 \003(\0132\036.proto_ff.occupationoccupat"
    "ionB\004\210\301\024(\"g\n\037occupationaptitudeattribute"
    "Desc\022 \n\004type\030\001 \001(\005B\022\302\377\024\016\345\237\272\347\241\200\345\261\236\346\200\247ID\022\""
    "\n\005value\030\002 \001(\005B\023\302\377\024\017\345\237\272\347\241\200\345\261\236\346\200\247\345\200\274\"\330\002\n\022o"
    "ccupationaptitude\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\350\265\204\350\264"
    "\250ID\022!\n\005grade\030\002 \001(\005B\022\302\377\024\016\350\201\214\344\270\232\347\255\211\347\272\247ID\022 "
    "\n\005level\030\003 \001(\005B\021\302\377\024\r \350\265\204\350\264\250\347\255\211\347\272\247\022\037\n\013requ"
    "irement\030\004 \001(\003B\n\302\377\024\006\346\210\230\345\212\233\022$\n\010material\030\005 "
    "\001(\003B\022\302\377\024\016\350\277\233\351\230\266\346\235\220\346\226\231ID\022#\n\003num\030\006 \001(\005B\026\302\377"
    "\024\022\350\277\233\351\230\266\346\235\220\346\226\231\346\225\260\351\207\217\022+\n\013conditionId\030\007 \001("
    "\tB\026\302\377\024\016\350\275\254\350\201\214\346\235\241\344\273\266ID\220\301\024<\022J\n\tattribute\030\010"
    " \003(\0132).proto_ff.occupationaptitudeattrib"
    "uteDescB\014\302\377\024\004$$$$\210\301\024\004\"_\n\030Sheet_occupatio"
    "naptitude\022C\n\027occupationaptitude_List\030\001 \003"
    "(\0132\034.proto_ff.occupationaptitudeB\004\210\301\024P\"\240"
    "\001\n\027occupationconditionList\022\026\n\002ID\030\001 \001(\005B\n"
    "\302\377\024\006\347\274\226\345\217\267\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\347\261\273\345"
    "\236\213\022%\n\016conditionValue\030\003 \001(\003B\r\302\377\024\t\345\217\202\346\225\260\345\200"
    "\274\022&\n\014conditionNum\030\004 \001(\005B\020\302\377\024\014\345\217\202\346\225\260\346\225\260\351\207"
    "\217\"n\n\035Sheet_occupationconditionList\022M\n\034oc"
    "cupationconditionList_List\030\001 \003(\0132!.proto"
    "_ff.occupationconditionListB\004\210\301\024d", 1793);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "occupation.proto", &protobuf_RegisterTypes);
  occupationoccupationattributeDesc::default_instance_ = new occupationoccupationattributeDesc();
  occupationoccupationdelSkillDesc::default_instance_ = new occupationoccupationdelSkillDesc();
  occupationoccupationskillDesc::default_instance_ = new occupationoccupationskillDesc();
  occupationoccupation::default_instance_ = new occupationoccupation();
  Sheet_occupationoccupation::default_instance_ = new Sheet_occupationoccupation();
  occupationaptitudeattributeDesc::default_instance_ = new occupationaptitudeattributeDesc();
  occupationaptitude::default_instance_ = new occupationaptitude();
  Sheet_occupationaptitude::default_instance_ = new Sheet_occupationaptitude();
  occupationconditionList::default_instance_ = new occupationconditionList();
  Sheet_occupationconditionList::default_instance_ = new Sheet_occupationconditionList();
  occupationoccupationattributeDesc::default_instance_->InitAsDefaultInstance();
  occupationoccupationdelSkillDesc::default_instance_->InitAsDefaultInstance();
  occupationoccupationskillDesc::default_instance_->InitAsDefaultInstance();
  occupationoccupation::default_instance_->InitAsDefaultInstance();
  Sheet_occupationoccupation::default_instance_->InitAsDefaultInstance();
  occupationaptitudeattributeDesc::default_instance_->InitAsDefaultInstance();
  occupationaptitude::default_instance_->InitAsDefaultInstance();
  Sheet_occupationaptitude::default_instance_->InitAsDefaultInstance();
  occupationconditionList::default_instance_->InitAsDefaultInstance();
  Sheet_occupationconditionList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_occupation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_occupation_2eproto {
  StaticDescriptorInitializer_occupation_2eproto() {
    protobuf_AddDesc_occupation_2eproto();
  }
} static_descriptor_initializer_occupation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int occupationoccupationattributeDesc::kTypeFieldNumber;
const int occupationoccupationattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

occupationoccupationattributeDesc::occupationoccupationattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationoccupationattributeDesc::InitAsDefaultInstance() {
}

occupationoccupationattributeDesc::occupationoccupationattributeDesc(const occupationoccupationattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationoccupationattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationoccupationattributeDesc::~occupationoccupationattributeDesc() {
  SharedDtor();
}

void occupationoccupationattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void occupationoccupationattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationoccupationattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationoccupationattributeDesc_descriptor_;
}

const occupationoccupationattributeDesc& occupationoccupationattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationoccupationattributeDesc* occupationoccupationattributeDesc::default_instance_ = NULL;

occupationoccupationattributeDesc* occupationoccupationattributeDesc::New() const {
  return new occupationoccupationattributeDesc;
}

void occupationoccupationattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationoccupationattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationoccupationattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationoccupationattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationoccupationattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationoccupationattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationoccupationattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationoccupationattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationoccupationattributeDesc::MergeFrom(const occupationoccupationattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationoccupationattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationoccupationattributeDesc::CopyFrom(const occupationoccupationattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationoccupationattributeDesc::IsInitialized() const {

  return true;
}

void occupationoccupationattributeDesc::Swap(occupationoccupationattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationoccupationattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationoccupationattributeDesc_descriptor_;
  metadata.reflection = occupationoccupationattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int occupationoccupationdelSkillDesc::kIdFieldNumber;
#endif  // !_MSC_VER

occupationoccupationdelSkillDesc::occupationoccupationdelSkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationoccupationdelSkillDesc::InitAsDefaultInstance() {
}

occupationoccupationdelSkillDesc::occupationoccupationdelSkillDesc(const occupationoccupationdelSkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationoccupationdelSkillDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationoccupationdelSkillDesc::~occupationoccupationdelSkillDesc() {
  SharedDtor();
}

void occupationoccupationdelSkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void occupationoccupationdelSkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationoccupationdelSkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationoccupationdelSkillDesc_descriptor_;
}

const occupationoccupationdelSkillDesc& occupationoccupationdelSkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationoccupationdelSkillDesc* occupationoccupationdelSkillDesc::default_instance_ = NULL;

occupationoccupationdelSkillDesc* occupationoccupationdelSkillDesc::New() const {
  return new occupationoccupationdelSkillDesc;
}

void occupationoccupationdelSkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationoccupationdelSkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationoccupationdelSkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationoccupationdelSkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationoccupationdelSkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationoccupationdelSkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationoccupationdelSkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationoccupationdelSkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationoccupationdelSkillDesc::MergeFrom(const occupationoccupationdelSkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationoccupationdelSkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationoccupationdelSkillDesc::CopyFrom(const occupationoccupationdelSkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationoccupationdelSkillDesc::IsInitialized() const {

  return true;
}

void occupationoccupationdelSkillDesc::Swap(occupationoccupationdelSkillDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationoccupationdelSkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationoccupationdelSkillDesc_descriptor_;
  metadata.reflection = occupationoccupationdelSkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int occupationoccupationskillDesc::kIdFieldNumber;
#endif  // !_MSC_VER

occupationoccupationskillDesc::occupationoccupationskillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationoccupationskillDesc::InitAsDefaultInstance() {
}

occupationoccupationskillDesc::occupationoccupationskillDesc(const occupationoccupationskillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationoccupationskillDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationoccupationskillDesc::~occupationoccupationskillDesc() {
  SharedDtor();
}

void occupationoccupationskillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void occupationoccupationskillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationoccupationskillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationoccupationskillDesc_descriptor_;
}

const occupationoccupationskillDesc& occupationoccupationskillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationoccupationskillDesc* occupationoccupationskillDesc::default_instance_ = NULL;

occupationoccupationskillDesc* occupationoccupationskillDesc::New() const {
  return new occupationoccupationskillDesc;
}

void occupationoccupationskillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationoccupationskillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationoccupationskillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationoccupationskillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationoccupationskillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationoccupationskillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationoccupationskillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationoccupationskillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationoccupationskillDesc::MergeFrom(const occupationoccupationskillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationoccupationskillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationoccupationskillDesc::CopyFrom(const occupationoccupationskillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationoccupationskillDesc::IsInitialized() const {

  return true;
}

void occupationoccupationskillDesc::Swap(occupationoccupationskillDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationoccupationskillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationoccupationskillDesc_descriptor_;
  metadata.reflection = occupationoccupationskillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int occupationoccupation::kOccupationIDFieldNumber;
const int occupationoccupation::kIdFieldNumber;
const int occupationoccupation::kGradeFieldNumber;
const int occupationoccupation::kActiveDescFieldNumber;
const int occupationoccupation::kLevelFieldNumber;
const int occupationoccupation::kAptitudeFieldNumber;
const int occupationoccupation::kTaskIDFieldNumber;
const int occupationoccupation::kEquipFieldNumber;
const int occupationoccupation::kModelIDFieldNumber;
const int occupationoccupation::kAttributeFieldNumber;
const int occupationoccupation::kDelSkillFieldNumber;
const int occupationoccupation::kSkillFieldNumber;
#endif  // !_MSC_VER

occupationoccupation::occupationoccupation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationoccupation::InitAsDefaultInstance() {
}

occupationoccupation::occupationoccupation(const occupationoccupation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationoccupation::SharedCtor() {
  _cached_size_ = 0;
  occupationid_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  grade_ = 0;
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  aptitude_ = GOOGLE_LONGLONG(0);
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationoccupation::~occupationoccupation() {
  SharedDtor();
}

void occupationoccupation::SharedDtor() {
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (equip_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_;
  }
  if (modelid_ != &::google::protobuf::internal::kEmptyString) {
    delete modelid_;
  }
  if (this != default_instance_) {
  }
}

void occupationoccupation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationoccupation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationoccupation_descriptor_;
}

const occupationoccupation& occupationoccupation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationoccupation* occupationoccupation::default_instance_ = NULL;

occupationoccupation* occupationoccupation::New() const {
  return new occupationoccupation;
}

void occupationoccupation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    occupationid_ = GOOGLE_LONGLONG(0);
    id_ = 0;
    grade_ = 0;
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    level_ = 0;
    aptitude_ = GOOGLE_LONGLONG(0);
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_equip()) {
      if (equip_ != &::google::protobuf::internal::kEmptyString) {
        equip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_modelid()) {
      if (modelid_ != &::google::protobuf::internal::kEmptyString) {
        modelid_->clear();
      }
    }
  }
  attribute_.Clear();
  delskill_.Clear();
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationoccupation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 occupationID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupationid_)));
          set_has_occupationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_aptitude;
        break;
      }

      // optional int64 aptitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aptitude_)));
          set_has_aptitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_taskID;
        break;
      }

      // optional string taskID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip;
        break;
      }

      // optional string equip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip().data(), this->equip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_modelID;
        break;
      }

      // optional string modelID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelid().data(), this->modelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.occupationoccupationattributeDesc attribute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attribute;
        if (input->ExpectTag(90)) goto parse_delSkill;
        break;
      }

      // repeated .proto_ff.occupationoccupationdelSkillDesc delSkill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_delSkill;
        if (input->ExpectTag(98)) goto parse_skill;
        break;
      }

      // repeated .proto_ff.occupationoccupationskillDesc skill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationoccupation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 occupationID = 1;
  if (has_occupationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->occupationid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int64 aptitude = 6;
  if (has_aptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->aptitude(), output);
  }

  // optional string taskID = 7;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->taskid(), output);
  }

  // optional string equip = 8;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip().data(), this->equip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->equip(), output);
  }

  // optional string modelID = 9;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->modelid(), output);
  }

  // repeated .proto_ff.occupationoccupationattributeDesc attribute = 10;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attribute(i), output);
  }

  // repeated .proto_ff.occupationoccupationdelSkillDesc delSkill = 11;
  for (int i = 0; i < this->delskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->delskill(i), output);
  }

  // repeated .proto_ff.occupationoccupationskillDesc skill = 12;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationoccupation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 occupationID = 1;
  if (has_occupationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->occupationid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int64 aptitude = 6;
  if (has_aptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->aptitude(), target);
  }

  // optional string taskID = 7;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->taskid(), target);
  }

  // optional string equip = 8;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip().data(), this->equip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->equip(), target);
  }

  // optional string modelID = 9;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->modelid(), target);
  }

  // repeated .proto_ff.occupationoccupationattributeDesc attribute = 10;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attribute(i), target);
  }

  // repeated .proto_ff.occupationoccupationdelSkillDesc delSkill = 11;
  for (int i = 0; i < this->delskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->delskill(i), target);
  }

  // repeated .proto_ff.occupationoccupationskillDesc skill = 12;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationoccupation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 occupationID = 1;
    if (has_occupationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupationid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 aptitude = 6;
    if (has_aptitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aptitude());
    }

    // optional string taskID = 7;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // optional string equip = 8;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string modelID = 9;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelid());
    }

  }
  // repeated .proto_ff.occupationoccupationattributeDesc attribute = 10;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .proto_ff.occupationoccupationdelSkillDesc delSkill = 11;
  total_size += 1 * this->delskill_size();
  for (int i = 0; i < this->delskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delskill(i));
  }

  // repeated .proto_ff.occupationoccupationskillDesc skill = 12;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationoccupation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationoccupation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationoccupation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationoccupation::MergeFrom(const occupationoccupation& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  delskill_.MergeFrom(from.delskill_);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_occupationid()) {
      set_occupationid(from.occupationid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_aptitude()) {
      set_aptitude(from.aptitude());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_equip()) {
      set_equip(from.equip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationoccupation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationoccupation::CopyFrom(const occupationoccupation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationoccupation::IsInitialized() const {

  return true;
}

void occupationoccupation::Swap(occupationoccupation* other) {
  if (other != this) {
    std::swap(occupationid_, other->occupationid_);
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(level_, other->level_);
    std::swap(aptitude_, other->aptitude_);
    std::swap(taskid_, other->taskid_);
    std::swap(equip_, other->equip_);
    std::swap(modelid_, other->modelid_);
    attribute_.Swap(&other->attribute_);
    delskill_.Swap(&other->delskill_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationoccupation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationoccupation_descriptor_;
  metadata.reflection = occupationoccupation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_occupationoccupation::kOccupationoccupationListFieldNumber;
#endif  // !_MSC_VER

Sheet_occupationoccupation::Sheet_occupationoccupation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_occupationoccupation::InitAsDefaultInstance() {
}

Sheet_occupationoccupation::Sheet_occupationoccupation(const Sheet_occupationoccupation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_occupationoccupation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_occupationoccupation::~Sheet_occupationoccupation() {
  SharedDtor();
}

void Sheet_occupationoccupation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_occupationoccupation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_occupationoccupation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_occupationoccupation_descriptor_;
}

const Sheet_occupationoccupation& Sheet_occupationoccupation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

Sheet_occupationoccupation* Sheet_occupationoccupation::default_instance_ = NULL;

Sheet_occupationoccupation* Sheet_occupationoccupation::New() const {
  return new Sheet_occupationoccupation;
}

void Sheet_occupationoccupation::Clear() {
  occupationoccupation_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_occupationoccupation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.occupationoccupation occupationoccupation_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupationoccupation_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupationoccupation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_occupationoccupation_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_occupationoccupation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.occupationoccupation occupationoccupation_List = 1;
  for (int i = 0; i < this->occupationoccupation_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->occupationoccupation_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_occupationoccupation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.occupationoccupation occupationoccupation_List = 1;
  for (int i = 0; i < this->occupationoccupation_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->occupationoccupation_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_occupationoccupation::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.occupationoccupation occupationoccupation_List = 1;
  total_size += 1 * this->occupationoccupation_list_size();
  for (int i = 0; i < this->occupationoccupation_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupationoccupation_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_occupationoccupation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_occupationoccupation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_occupationoccupation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_occupationoccupation::MergeFrom(const Sheet_occupationoccupation& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupationoccupation_list_.MergeFrom(from.occupationoccupation_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_occupationoccupation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_occupationoccupation::CopyFrom(const Sheet_occupationoccupation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_occupationoccupation::IsInitialized() const {

  return true;
}

void Sheet_occupationoccupation::Swap(Sheet_occupationoccupation* other) {
  if (other != this) {
    occupationoccupation_list_.Swap(&other->occupationoccupation_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_occupationoccupation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_occupationoccupation_descriptor_;
  metadata.reflection = Sheet_occupationoccupation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int occupationaptitudeattributeDesc::kTypeFieldNumber;
const int occupationaptitudeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

occupationaptitudeattributeDesc::occupationaptitudeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationaptitudeattributeDesc::InitAsDefaultInstance() {
}

occupationaptitudeattributeDesc::occupationaptitudeattributeDesc(const occupationaptitudeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationaptitudeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationaptitudeattributeDesc::~occupationaptitudeattributeDesc() {
  SharedDtor();
}

void occupationaptitudeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void occupationaptitudeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationaptitudeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationaptitudeattributeDesc_descriptor_;
}

const occupationaptitudeattributeDesc& occupationaptitudeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationaptitudeattributeDesc* occupationaptitudeattributeDesc::default_instance_ = NULL;

occupationaptitudeattributeDesc* occupationaptitudeattributeDesc::New() const {
  return new occupationaptitudeattributeDesc;
}

void occupationaptitudeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationaptitudeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationaptitudeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationaptitudeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationaptitudeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationaptitudeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationaptitudeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationaptitudeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationaptitudeattributeDesc::MergeFrom(const occupationaptitudeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationaptitudeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationaptitudeattributeDesc::CopyFrom(const occupationaptitudeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationaptitudeattributeDesc::IsInitialized() const {

  return true;
}

void occupationaptitudeattributeDesc::Swap(occupationaptitudeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationaptitudeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationaptitudeattributeDesc_descriptor_;
  metadata.reflection = occupationaptitudeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int occupationaptitude::kIdFieldNumber;
const int occupationaptitude::kGradeFieldNumber;
const int occupationaptitude::kLevelFieldNumber;
const int occupationaptitude::kRequirementFieldNumber;
const int occupationaptitude::kMaterialFieldNumber;
const int occupationaptitude::kNumFieldNumber;
const int occupationaptitude::kConditionIdFieldNumber;
const int occupationaptitude::kAttributeFieldNumber;
#endif  // !_MSC_VER

occupationaptitude::occupationaptitude()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationaptitude::InitAsDefaultInstance() {
}

occupationaptitude::occupationaptitude(const occupationaptitude& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationaptitude::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  grade_ = 0;
  level_ = 0;
  requirement_ = GOOGLE_LONGLONG(0);
  material_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  conditionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationaptitude::~occupationaptitude() {
  SharedDtor();
}

void occupationaptitude::SharedDtor() {
  if (conditionid_ != &::google::protobuf::internal::kEmptyString) {
    delete conditionid_;
  }
  if (this != default_instance_) {
  }
}

void occupationaptitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationaptitude::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationaptitude_descriptor_;
}

const occupationaptitude& occupationaptitude::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationaptitude* occupationaptitude::default_instance_ = NULL;

occupationaptitude* occupationaptitude::New() const {
  return new occupationaptitude;
}

void occupationaptitude::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    grade_ = 0;
    level_ = 0;
    requirement_ = GOOGLE_LONGLONG(0);
    material_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    if (has_conditionid()) {
      if (conditionid_ != &::google::protobuf::internal::kEmptyString) {
        conditionid_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationaptitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_requirement;
        break;
      }

      // optional int64 requirement = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requirement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requirement_)));
          set_has_requirement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_material;
        break;
      }

      // optional int64 material = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_material:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_conditionId;
        break;
      }

      // optional string conditionId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conditionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conditionid().data(), this->conditionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.occupationaptitudeattributeDesc attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationaptitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int64 requirement = 4;
  if (has_requirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->requirement(), output);
  }

  // optional int64 material = 5;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->material(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  // optional string conditionId = 7;
  if (has_conditionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conditionid().data(), this->conditionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->conditionid(), output);
  }

  // repeated .proto_ff.occupationaptitudeattributeDesc attribute = 8;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationaptitude::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int64 requirement = 4;
  if (has_requirement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->requirement(), target);
  }

  // optional int64 material = 5;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->material(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  // optional string conditionId = 7;
  if (has_conditionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conditionid().data(), this->conditionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->conditionid(), target);
  }

  // repeated .proto_ff.occupationaptitudeattributeDesc attribute = 8;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationaptitude::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 requirement = 4;
    if (has_requirement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requirement());
    }

    // optional int64 material = 5;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->material());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string conditionId = 7;
    if (has_conditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conditionid());
    }

  }
  // repeated .proto_ff.occupationaptitudeattributeDesc attribute = 8;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationaptitude::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationaptitude* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationaptitude*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationaptitude::MergeFrom(const occupationaptitude& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_requirement()) {
      set_requirement(from.requirement());
    }
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_conditionid()) {
      set_conditionid(from.conditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationaptitude::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationaptitude::CopyFrom(const occupationaptitude& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationaptitude::IsInitialized() const {

  return true;
}

void occupationaptitude::Swap(occupationaptitude* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(level_, other->level_);
    std::swap(requirement_, other->requirement_);
    std::swap(material_, other->material_);
    std::swap(num_, other->num_);
    std::swap(conditionid_, other->conditionid_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationaptitude::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationaptitude_descriptor_;
  metadata.reflection = occupationaptitude_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_occupationaptitude::kOccupationaptitudeListFieldNumber;
#endif  // !_MSC_VER

Sheet_occupationaptitude::Sheet_occupationaptitude()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_occupationaptitude::InitAsDefaultInstance() {
}

Sheet_occupationaptitude::Sheet_occupationaptitude(const Sheet_occupationaptitude& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_occupationaptitude::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_occupationaptitude::~Sheet_occupationaptitude() {
  SharedDtor();
}

void Sheet_occupationaptitude::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_occupationaptitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_occupationaptitude::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_occupationaptitude_descriptor_;
}

const Sheet_occupationaptitude& Sheet_occupationaptitude::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

Sheet_occupationaptitude* Sheet_occupationaptitude::default_instance_ = NULL;

Sheet_occupationaptitude* Sheet_occupationaptitude::New() const {
  return new Sheet_occupationaptitude;
}

void Sheet_occupationaptitude::Clear() {
  occupationaptitude_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_occupationaptitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.occupationaptitude occupationaptitude_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupationaptitude_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupationaptitude_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_occupationaptitude_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_occupationaptitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.occupationaptitude occupationaptitude_List = 1;
  for (int i = 0; i < this->occupationaptitude_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->occupationaptitude_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_occupationaptitude::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.occupationaptitude occupationaptitude_List = 1;
  for (int i = 0; i < this->occupationaptitude_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->occupationaptitude_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_occupationaptitude::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.occupationaptitude occupationaptitude_List = 1;
  total_size += 1 * this->occupationaptitude_list_size();
  for (int i = 0; i < this->occupationaptitude_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupationaptitude_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_occupationaptitude::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_occupationaptitude* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_occupationaptitude*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_occupationaptitude::MergeFrom(const Sheet_occupationaptitude& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupationaptitude_list_.MergeFrom(from.occupationaptitude_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_occupationaptitude::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_occupationaptitude::CopyFrom(const Sheet_occupationaptitude& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_occupationaptitude::IsInitialized() const {

  return true;
}

void Sheet_occupationaptitude::Swap(Sheet_occupationaptitude* other) {
  if (other != this) {
    occupationaptitude_list_.Swap(&other->occupationaptitude_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_occupationaptitude::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_occupationaptitude_descriptor_;
  metadata.reflection = Sheet_occupationaptitude_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int occupationconditionList::kIDFieldNumber;
const int occupationconditionList::kTypeFieldNumber;
const int occupationconditionList::kConditionValueFieldNumber;
const int occupationconditionList::kConditionNumFieldNumber;
#endif  // !_MSC_VER

occupationconditionList::occupationconditionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void occupationconditionList::InitAsDefaultInstance() {
}

occupationconditionList::occupationconditionList(const occupationconditionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void occupationconditionList::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  conditionvalue_ = GOOGLE_LONGLONG(0);
  conditionnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

occupationconditionList::~occupationconditionList() {
  SharedDtor();
}

void occupationconditionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void occupationconditionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* occupationconditionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return occupationconditionList_descriptor_;
}

const occupationconditionList& occupationconditionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

occupationconditionList* occupationconditionList::default_instance_ = NULL;

occupationconditionList* occupationconditionList::New() const {
  return new occupationconditionList;
}

void occupationconditionList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    conditionvalue_ = GOOGLE_LONGLONG(0);
    conditionnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool occupationconditionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conditionValue;
        break;
      }

      // optional int64 conditionValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conditionvalue_)));
          set_has_conditionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conditionNum;
        break;
      }

      // optional int32 conditionNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditionNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditionnum_)));
          set_has_conditionnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void occupationconditionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 conditionValue = 3;
  if (has_conditionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->conditionvalue(), output);
  }

  // optional int32 conditionNum = 4;
  if (has_conditionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conditionnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* occupationconditionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 conditionValue = 3;
  if (has_conditionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->conditionvalue(), target);
  }

  // optional int32 conditionNum = 4;
  if (has_conditionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conditionnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int occupationconditionList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 conditionValue = 3;
    if (has_conditionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->conditionvalue());
    }

    // optional int32 conditionNum = 4;
    if (has_conditionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditionnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void occupationconditionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const occupationconditionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const occupationconditionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void occupationconditionList::MergeFrom(const occupationconditionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_conditionvalue()) {
      set_conditionvalue(from.conditionvalue());
    }
    if (from.has_conditionnum()) {
      set_conditionnum(from.conditionnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void occupationconditionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void occupationconditionList::CopyFrom(const occupationconditionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool occupationconditionList::IsInitialized() const {

  return true;
}

void occupationconditionList::Swap(occupationconditionList* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(conditionvalue_, other->conditionvalue_);
    std::swap(conditionnum_, other->conditionnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata occupationconditionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = occupationconditionList_descriptor_;
  metadata.reflection = occupationconditionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_occupationconditionList::kOccupationconditionListListFieldNumber;
#endif  // !_MSC_VER

Sheet_occupationconditionList::Sheet_occupationconditionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_occupationconditionList::InitAsDefaultInstance() {
}

Sheet_occupationconditionList::Sheet_occupationconditionList(const Sheet_occupationconditionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_occupationconditionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_occupationconditionList::~Sheet_occupationconditionList() {
  SharedDtor();
}

void Sheet_occupationconditionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_occupationconditionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_occupationconditionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_occupationconditionList_descriptor_;
}

const Sheet_occupationconditionList& Sheet_occupationconditionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_occupation_2eproto();
  return *default_instance_;
}

Sheet_occupationconditionList* Sheet_occupationconditionList::default_instance_ = NULL;

Sheet_occupationconditionList* Sheet_occupationconditionList::New() const {
  return new Sheet_occupationconditionList;
}

void Sheet_occupationconditionList::Clear() {
  occupationconditionlist_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_occupationconditionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.occupationconditionList occupationconditionList_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupationconditionList_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupationconditionlist_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_occupationconditionList_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_occupationconditionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.occupationconditionList occupationconditionList_List = 1;
  for (int i = 0; i < this->occupationconditionlist_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->occupationconditionlist_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_occupationconditionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.occupationconditionList occupationconditionList_List = 1;
  for (int i = 0; i < this->occupationconditionlist_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->occupationconditionlist_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_occupationconditionList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.occupationconditionList occupationconditionList_List = 1;
  total_size += 1 * this->occupationconditionlist_list_size();
  for (int i = 0; i < this->occupationconditionlist_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupationconditionlist_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_occupationconditionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_occupationconditionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_occupationconditionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_occupationconditionList::MergeFrom(const Sheet_occupationconditionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupationconditionlist_list_.MergeFrom(from.occupationconditionlist_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_occupationconditionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_occupationconditionList::CopyFrom(const Sheet_occupationconditionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_occupationconditionList::IsInitialized() const {

  return true;
}

void Sheet_occupationconditionList::Swap(Sheet_occupationconditionList* other) {
  if (other != this) {
    occupationconditionlist_list_.Swap(&other->occupationconditionlist_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_occupationconditionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_occupationconditionList_descriptor_;
  metadata.reflection = Sheet_occupationconditionList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
