// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Godvalley.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Godvalley.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_GodvalleyBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodvalleyBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodvalleyBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodvalleyBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Godvalley_2eproto() {
  protobuf_AddDesc_Godvalley_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Godvalley.proto");
  GOOGLE_CHECK(file != NULL);
  E_GodvalleyBattle_descriptor_ = file->message_type(0);
  static const int E_GodvalleyBattle_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_team1n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_team2n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_killscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_killkeepscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_breakkillkeepscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_killmonsterscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_crystalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_crystalreborntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_match_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_duration_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_matchmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_matchmapentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_mapentry1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_mapentry2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_monster1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_monster2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_monster3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_npc1pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, m_npc2pos_),
  };
  E_GodvalleyBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodvalleyBattle_descriptor_,
      E_GodvalleyBattle::default_instance_,
      E_GodvalleyBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodvalleyBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodvalleyBattle));
  Sheet_GodvalleyBattle_descriptor_ = file->message_type(1);
  static const int Sheet_GodvalleyBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodvalleyBattle, e_godvalleybattle_list_),
  };
  Sheet_GodvalleyBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodvalleyBattle_descriptor_,
      Sheet_GodvalleyBattle::default_instance_,
      Sheet_GodvalleyBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodvalleyBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodvalleyBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodvalleyBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Godvalley_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodvalleyBattle_descriptor_, &E_GodvalleyBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodvalleyBattle_descriptor_, &Sheet_GodvalleyBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Godvalley_2eproto() {
  delete E_GodvalleyBattle::default_instance_;
  delete E_GodvalleyBattle_reflection_;
  delete Sheet_GodvalleyBattle::default_instance_;
  delete Sheet_GodvalleyBattle_reflection_;
}

void protobuf_AddDesc_Godvalley_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Godvalley.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\216\007\n\021E_GodvalleyBattle\022\030\n\004m_id"
    "\030\001 \001(\003B\n\302\377\024\006\345\272\217\345\217\267\022 \n\010m_team1n\030\002 \001(\tB\016\302\377"
    "\024\006\347\273\204\345\220\215\220\301\024<\022 \n\010m_team2n\030\003 \001(\tB\016\302\377\024\006\347\273\204\345"
    "\220\215\220\301\024<\022(\n\013m_killscore\030\004 \001(\005B\023\302\377\024\017\346\235\200\344\272\272\345"
    "\276\227\347\247\257\345\210\206\022,\n\017m_killkeepscore\030\005 \001(\005B\023\302\377\024\017\350"
    "\277\236\346\235\200\345\276\227\347\247\257\345\210\206\022=\n\024m_breakkillkeepscore\030\006"
    " \001(\005B\037\302\377\024\033\346\211\223\346\226\255\345\210\253\344\272\272\350\277\236\346\235\200\345\276\227\347\247\257\345\210\206\022/\n"
    "\022m_killmonsterscore\030\007 \001(\005B\023\302\377\024\017\346\235\200\346\200\252\345\276\227"
    "\347\247\257\345\210\206\022.\n\016m_crystalscore\030\010 \001(\005B\026\302\377\024\022\350\277\220\346"
    "\260\264\346\231\266\345\212\240\347\247\257\345\210\206\0229\n\023m_crystalreborntime\030\t "
    "\001(\005B\034\302\377\024\030\346\260\264\346\231\266\345\210\267\346\226\260\346\227\266\351\227\264\357\274\210\347\247\222\022#\n\tm_m"
    "atch_s\030\n \001(\005B\020\302\377\024\014\345\214\271\351\205\215\346\227\266\351\227\264\022#\n\014m_dura"
    "tion_s\030\013 \001(\005B\r\302\377\024\t\346\211\223\345\244\232\344\271\205\022&\n\014m_matchma"
    "pid\030\014 \001(\003B\020\302\377\024\014\345\214\271\351\205\215\345\234\260\345\233\276\0229\n\017m_matchma"
    "pentry\030\r \001(\tB \302\377\024\030\345\214\271\351\205\215\345\234\260\345\233\276\345\207\272\347\224\237\344\275\215\347"
    "\275\256\220\301\024<\022!\n\007m_mapid\030\016 \001(\003B\020\302\377\024\014\346\211\200\345\234\250\345\234\260\345\233"
    "\276\022/\n\013m_mapentry1\030\017 \001(\tB\032\302\377\024\022\351\230\237\344\270\200\350\265\267\345\247\213"
    "\344\275\215\347\275\256\220\301\024<\022/\n\013m_mapentry2\030\020 \001(\tB\032\302\377\024\022\351\230\237"
    "\344\272\214\350\265\267\345\247\213\344\275\215\347\275\256\220\301\024<\022\"\n\nm_monster1\030\021 \001(\tB"
    "\016\302\377\024\006\346\200\252\347\211\251\220\301\024<\022\"\n\nm_monster2\030\022 \001(\tB\016\302\377\024"
    "\006\346\200\252\347\211\251\220\301\024<\022\"\n\nm_monster3\030\023 \001(\tB\016\302\377\024\006\346\200\252"
    "\347\211\251\220\301\024<\022$\n\tm_npc1pos\030\024 \001(\tB\021\302\377\024\tNPC\344\275\215\347\275"
    "\256\220\301\024<\022$\n\tm_npc2pos\030\025 \001(\tB\021\302\377\024\tNPC\344\275\215\347\275\256\220"
    "\301\024<\"Z\n\025Sheet_GodvalleyBattle\022A\n\026E_Godval"
    "leyBattle_List\030\001 \003(\0132\033.proto_ff.E_Godval"
    "leyBattleB\004\210\301\024\024", 1055);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Godvalley.proto", &protobuf_RegisterTypes);
  E_GodvalleyBattle::default_instance_ = new E_GodvalleyBattle();
  Sheet_GodvalleyBattle::default_instance_ = new Sheet_GodvalleyBattle();
  E_GodvalleyBattle::default_instance_->InitAsDefaultInstance();
  Sheet_GodvalleyBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Godvalley_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Godvalley_2eproto {
  StaticDescriptorInitializer_Godvalley_2eproto() {
    protobuf_AddDesc_Godvalley_2eproto();
  }
} static_descriptor_initializer_Godvalley_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_GodvalleyBattle::kMIdFieldNumber;
const int E_GodvalleyBattle::kMTeam1NFieldNumber;
const int E_GodvalleyBattle::kMTeam2NFieldNumber;
const int E_GodvalleyBattle::kMKillscoreFieldNumber;
const int E_GodvalleyBattle::kMKillkeepscoreFieldNumber;
const int E_GodvalleyBattle::kMBreakkillkeepscoreFieldNumber;
const int E_GodvalleyBattle::kMKillmonsterscoreFieldNumber;
const int E_GodvalleyBattle::kMCrystalscoreFieldNumber;
const int E_GodvalleyBattle::kMCrystalreborntimeFieldNumber;
const int E_GodvalleyBattle::kMMatchSFieldNumber;
const int E_GodvalleyBattle::kMDurationSFieldNumber;
const int E_GodvalleyBattle::kMMatchmapidFieldNumber;
const int E_GodvalleyBattle::kMMatchmapentryFieldNumber;
const int E_GodvalleyBattle::kMMapidFieldNumber;
const int E_GodvalleyBattle::kMMapentry1FieldNumber;
const int E_GodvalleyBattle::kMMapentry2FieldNumber;
const int E_GodvalleyBattle::kMMonster1FieldNumber;
const int E_GodvalleyBattle::kMMonster2FieldNumber;
const int E_GodvalleyBattle::kMMonster3FieldNumber;
const int E_GodvalleyBattle::kMNpc1PosFieldNumber;
const int E_GodvalleyBattle::kMNpc2PosFieldNumber;
#endif  // !_MSC_VER

E_GodvalleyBattle::E_GodvalleyBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodvalleyBattle::InitAsDefaultInstance() {
}

E_GodvalleyBattle::E_GodvalleyBattle(const E_GodvalleyBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodvalleyBattle::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_team1n_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_team2n_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_killscore_ = 0;
  m_killkeepscore_ = 0;
  m_breakkillkeepscore_ = 0;
  m_killmonsterscore_ = 0;
  m_crystalscore_ = 0;
  m_crystalreborntime_ = 0;
  m_match_s_ = 0;
  m_duration_s_ = 0;
  m_matchmapid_ = GOOGLE_LONGLONG(0);
  m_matchmapentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_mapid_ = GOOGLE_LONGLONG(0);
  m_mapentry1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_mapentry2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_monster1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_monster2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_monster3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_npc1pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_npc2pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodvalleyBattle::~E_GodvalleyBattle() {
  SharedDtor();
}

void E_GodvalleyBattle::SharedDtor() {
  if (m_team1n_ != &::google::protobuf::internal::kEmptyString) {
    delete m_team1n_;
  }
  if (m_team2n_ != &::google::protobuf::internal::kEmptyString) {
    delete m_team2n_;
  }
  if (m_matchmapentry_ != &::google::protobuf::internal::kEmptyString) {
    delete m_matchmapentry_;
  }
  if (m_mapentry1_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mapentry1_;
  }
  if (m_mapentry2_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mapentry2_;
  }
  if (m_monster1_ != &::google::protobuf::internal::kEmptyString) {
    delete m_monster1_;
  }
  if (m_monster2_ != &::google::protobuf::internal::kEmptyString) {
    delete m_monster2_;
  }
  if (m_monster3_ != &::google::protobuf::internal::kEmptyString) {
    delete m_monster3_;
  }
  if (m_npc1pos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_npc1pos_;
  }
  if (m_npc2pos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_npc2pos_;
  }
  if (this != default_instance_) {
  }
}

void E_GodvalleyBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodvalleyBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodvalleyBattle_descriptor_;
}

const E_GodvalleyBattle& E_GodvalleyBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Godvalley_2eproto();
  return *default_instance_;
}

E_GodvalleyBattle* E_GodvalleyBattle::default_instance_ = NULL;

E_GodvalleyBattle* E_GodvalleyBattle::New() const {
  return new E_GodvalleyBattle;
}

void E_GodvalleyBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_team1n()) {
      if (m_team1n_ != &::google::protobuf::internal::kEmptyString) {
        m_team1n_->clear();
      }
    }
    if (has_m_team2n()) {
      if (m_team2n_ != &::google::protobuf::internal::kEmptyString) {
        m_team2n_->clear();
      }
    }
    m_killscore_ = 0;
    m_killkeepscore_ = 0;
    m_breakkillkeepscore_ = 0;
    m_killmonsterscore_ = 0;
    m_crystalscore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_crystalreborntime_ = 0;
    m_match_s_ = 0;
    m_duration_s_ = 0;
    m_matchmapid_ = GOOGLE_LONGLONG(0);
    if (has_m_matchmapentry()) {
      if (m_matchmapentry_ != &::google::protobuf::internal::kEmptyString) {
        m_matchmapentry_->clear();
      }
    }
    m_mapid_ = GOOGLE_LONGLONG(0);
    if (has_m_mapentry1()) {
      if (m_mapentry1_ != &::google::protobuf::internal::kEmptyString) {
        m_mapentry1_->clear();
      }
    }
    if (has_m_mapentry2()) {
      if (m_mapentry2_ != &::google::protobuf::internal::kEmptyString) {
        m_mapentry2_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_monster1()) {
      if (m_monster1_ != &::google::protobuf::internal::kEmptyString) {
        m_monster1_->clear();
      }
    }
    if (has_m_monster2()) {
      if (m_monster2_ != &::google::protobuf::internal::kEmptyString) {
        m_monster2_->clear();
      }
    }
    if (has_m_monster3()) {
      if (m_monster3_ != &::google::protobuf::internal::kEmptyString) {
        m_monster3_->clear();
      }
    }
    if (has_m_npc1pos()) {
      if (m_npc1pos_ != &::google::protobuf::internal::kEmptyString) {
        m_npc1pos_->clear();
      }
    }
    if (has_m_npc2pos()) {
      if (m_npc2pos_ != &::google::protobuf::internal::kEmptyString) {
        m_npc2pos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodvalleyBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_team1n;
        break;
      }

      // optional string m_team1n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_team1n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_team1n()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_team1n().data(), this->m_team1n().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_team2n;
        break;
      }

      // optional string m_team2n = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_team2n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_team2n()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_team2n().data(), this->m_team2n().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_killscore;
        break;
      }

      // optional int32 m_killscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killscore_)));
          set_has_m_killscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_killkeepscore;
        break;
      }

      // optional int32 m_killkeepscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killkeepscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killkeepscore_)));
          set_has_m_killkeepscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_breakkillkeepscore;
        break;
      }

      // optional int32 m_breakkillkeepscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breakkillkeepscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breakkillkeepscore_)));
          set_has_m_breakkillkeepscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_killmonsterscore;
        break;
      }

      // optional int32 m_killmonsterscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killmonsterscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killmonsterscore_)));
          set_has_m_killmonsterscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_crystalscore;
        break;
      }

      // optional int32 m_crystalscore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crystalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_crystalscore_)));
          set_has_m_crystalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_crystalreborntime;
        break;
      }

      // optional int32 m_crystalreborntime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crystalreborntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_crystalreborntime_)));
          set_has_m_crystalreborntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_match_s;
        break;
      }

      // optional int32 m_match_s = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_match_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_match_s_)));
          set_has_m_match_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_duration_s;
        break;
      }

      // optional int32 m_duration_s = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duration_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duration_s_)));
          set_has_m_duration_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_matchmapid;
        break;
      }

      // optional int64 m_matchmapid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_matchmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_matchmapid_)));
          set_has_m_matchmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_matchmapentry;
        break;
      }

      // optional string m_matchmapentry = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_matchmapentry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_matchmapentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_matchmapentry().data(), this->m_matchmapentry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_mapid;
        break;
      }

      // optional int64 m_mapid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_mapentry1;
        break;
      }

      // optional string m_mapentry1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mapentry1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mapentry1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mapentry1().data(), this->m_mapentry1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_mapentry2;
        break;
      }

      // optional string m_mapentry2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mapentry2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mapentry2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mapentry2().data(), this->m_mapentry2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_monster1;
        break;
      }

      // optional string m_monster1 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monster1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_monster1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_monster1().data(), this->m_monster1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_monster2;
        break;
      }

      // optional string m_monster2 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monster2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_monster2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_monster2().data(), this->m_monster2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_monster3;
        break;
      }

      // optional string m_monster3 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monster3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_monster3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_monster3().data(), this->m_monster3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_npc1pos;
        break;
      }

      // optional string m_npc1pos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_npc1pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_npc1pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_npc1pos().data(), this->m_npc1pos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_npc2pos;
        break;
      }

      // optional string m_npc2pos = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_npc2pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_npc2pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_npc2pos().data(), this->m_npc2pos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodvalleyBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_team1n = 2;
  if (has_m_team1n()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_team1n().data(), this->m_team1n().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_team1n(), output);
  }

  // optional string m_team2n = 3;
  if (has_m_team2n()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_team2n().data(), this->m_team2n().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_team2n(), output);
  }

  // optional int32 m_killscore = 4;
  if (has_m_killscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_killscore(), output);
  }

  // optional int32 m_killkeepscore = 5;
  if (has_m_killkeepscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_killkeepscore(), output);
  }

  // optional int32 m_breakkillkeepscore = 6;
  if (has_m_breakkillkeepscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_breakkillkeepscore(), output);
  }

  // optional int32 m_killmonsterscore = 7;
  if (has_m_killmonsterscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_killmonsterscore(), output);
  }

  // optional int32 m_crystalscore = 8;
  if (has_m_crystalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_crystalscore(), output);
  }

  // optional int32 m_crystalreborntime = 9;
  if (has_m_crystalreborntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_crystalreborntime(), output);
  }

  // optional int32 m_match_s = 10;
  if (has_m_match_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_match_s(), output);
  }

  // optional int32 m_duration_s = 11;
  if (has_m_duration_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_duration_s(), output);
  }

  // optional int64 m_matchmapid = 12;
  if (has_m_matchmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->m_matchmapid(), output);
  }

  // optional string m_matchmapentry = 13;
  if (has_m_matchmapentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_matchmapentry().data(), this->m_matchmapentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_matchmapentry(), output);
  }

  // optional int64 m_mapid = 14;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->m_mapid(), output);
  }

  // optional string m_mapentry1 = 15;
  if (has_m_mapentry1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mapentry1().data(), this->m_mapentry1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_mapentry1(), output);
  }

  // optional string m_mapentry2 = 16;
  if (has_m_mapentry2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mapentry2().data(), this->m_mapentry2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_mapentry2(), output);
  }

  // optional string m_monster1 = 17;
  if (has_m_monster1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monster1().data(), this->m_monster1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->m_monster1(), output);
  }

  // optional string m_monster2 = 18;
  if (has_m_monster2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monster2().data(), this->m_monster2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->m_monster2(), output);
  }

  // optional string m_monster3 = 19;
  if (has_m_monster3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monster3().data(), this->m_monster3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->m_monster3(), output);
  }

  // optional string m_npc1pos = 20;
  if (has_m_npc1pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_npc1pos().data(), this->m_npc1pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->m_npc1pos(), output);
  }

  // optional string m_npc2pos = 21;
  if (has_m_npc2pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_npc2pos().data(), this->m_npc2pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->m_npc2pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodvalleyBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_team1n = 2;
  if (has_m_team1n()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_team1n().data(), this->m_team1n().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_team1n(), target);
  }

  // optional string m_team2n = 3;
  if (has_m_team2n()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_team2n().data(), this->m_team2n().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_team2n(), target);
  }

  // optional int32 m_killscore = 4;
  if (has_m_killscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_killscore(), target);
  }

  // optional int32 m_killkeepscore = 5;
  if (has_m_killkeepscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_killkeepscore(), target);
  }

  // optional int32 m_breakkillkeepscore = 6;
  if (has_m_breakkillkeepscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_breakkillkeepscore(), target);
  }

  // optional int32 m_killmonsterscore = 7;
  if (has_m_killmonsterscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_killmonsterscore(), target);
  }

  // optional int32 m_crystalscore = 8;
  if (has_m_crystalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_crystalscore(), target);
  }

  // optional int32 m_crystalreborntime = 9;
  if (has_m_crystalreborntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_crystalreborntime(), target);
  }

  // optional int32 m_match_s = 10;
  if (has_m_match_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_match_s(), target);
  }

  // optional int32 m_duration_s = 11;
  if (has_m_duration_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_duration_s(), target);
  }

  // optional int64 m_matchmapid = 12;
  if (has_m_matchmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->m_matchmapid(), target);
  }

  // optional string m_matchmapentry = 13;
  if (has_m_matchmapentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_matchmapentry().data(), this->m_matchmapentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_matchmapentry(), target);
  }

  // optional int64 m_mapid = 14;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->m_mapid(), target);
  }

  // optional string m_mapentry1 = 15;
  if (has_m_mapentry1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mapentry1().data(), this->m_mapentry1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_mapentry1(), target);
  }

  // optional string m_mapentry2 = 16;
  if (has_m_mapentry2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mapentry2().data(), this->m_mapentry2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->m_mapentry2(), target);
  }

  // optional string m_monster1 = 17;
  if (has_m_monster1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monster1().data(), this->m_monster1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->m_monster1(), target);
  }

  // optional string m_monster2 = 18;
  if (has_m_monster2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monster2().data(), this->m_monster2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->m_monster2(), target);
  }

  // optional string m_monster3 = 19;
  if (has_m_monster3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_monster3().data(), this->m_monster3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->m_monster3(), target);
  }

  // optional string m_npc1pos = 20;
  if (has_m_npc1pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_npc1pos().data(), this->m_npc1pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->m_npc1pos(), target);
  }

  // optional string m_npc2pos = 21;
  if (has_m_npc2pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_npc2pos().data(), this->m_npc2pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->m_npc2pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodvalleyBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_team1n = 2;
    if (has_m_team1n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_team1n());
    }

    // optional string m_team2n = 3;
    if (has_m_team2n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_team2n());
    }

    // optional int32 m_killscore = 4;
    if (has_m_killscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killscore());
    }

    // optional int32 m_killkeepscore = 5;
    if (has_m_killkeepscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killkeepscore());
    }

    // optional int32 m_breakkillkeepscore = 6;
    if (has_m_breakkillkeepscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breakkillkeepscore());
    }

    // optional int32 m_killmonsterscore = 7;
    if (has_m_killmonsterscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killmonsterscore());
    }

    // optional int32 m_crystalscore = 8;
    if (has_m_crystalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_crystalscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_crystalreborntime = 9;
    if (has_m_crystalreborntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_crystalreborntime());
    }

    // optional int32 m_match_s = 10;
    if (has_m_match_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_match_s());
    }

    // optional int32 m_duration_s = 11;
    if (has_m_duration_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duration_s());
    }

    // optional int64 m_matchmapid = 12;
    if (has_m_matchmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_matchmapid());
    }

    // optional string m_matchmapentry = 13;
    if (has_m_matchmapentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_matchmapentry());
    }

    // optional int64 m_mapid = 14;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mapid());
    }

    // optional string m_mapentry1 = 15;
    if (has_m_mapentry1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mapentry1());
    }

    // optional string m_mapentry2 = 16;
    if (has_m_mapentry2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mapentry2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string m_monster1 = 17;
    if (has_m_monster1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_monster1());
    }

    // optional string m_monster2 = 18;
    if (has_m_monster2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_monster2());
    }

    // optional string m_monster3 = 19;
    if (has_m_monster3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_monster3());
    }

    // optional string m_npc1pos = 20;
    if (has_m_npc1pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_npc1pos());
    }

    // optional string m_npc2pos = 21;
    if (has_m_npc2pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_npc2pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodvalleyBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodvalleyBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodvalleyBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodvalleyBattle::MergeFrom(const E_GodvalleyBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_team1n()) {
      set_m_team1n(from.m_team1n());
    }
    if (from.has_m_team2n()) {
      set_m_team2n(from.m_team2n());
    }
    if (from.has_m_killscore()) {
      set_m_killscore(from.m_killscore());
    }
    if (from.has_m_killkeepscore()) {
      set_m_killkeepscore(from.m_killkeepscore());
    }
    if (from.has_m_breakkillkeepscore()) {
      set_m_breakkillkeepscore(from.m_breakkillkeepscore());
    }
    if (from.has_m_killmonsterscore()) {
      set_m_killmonsterscore(from.m_killmonsterscore());
    }
    if (from.has_m_crystalscore()) {
      set_m_crystalscore(from.m_crystalscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_crystalreborntime()) {
      set_m_crystalreborntime(from.m_crystalreborntime());
    }
    if (from.has_m_match_s()) {
      set_m_match_s(from.m_match_s());
    }
    if (from.has_m_duration_s()) {
      set_m_duration_s(from.m_duration_s());
    }
    if (from.has_m_matchmapid()) {
      set_m_matchmapid(from.m_matchmapid());
    }
    if (from.has_m_matchmapentry()) {
      set_m_matchmapentry(from.m_matchmapentry());
    }
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
    if (from.has_m_mapentry1()) {
      set_m_mapentry1(from.m_mapentry1());
    }
    if (from.has_m_mapentry2()) {
      set_m_mapentry2(from.m_mapentry2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_monster1()) {
      set_m_monster1(from.m_monster1());
    }
    if (from.has_m_monster2()) {
      set_m_monster2(from.m_monster2());
    }
    if (from.has_m_monster3()) {
      set_m_monster3(from.m_monster3());
    }
    if (from.has_m_npc1pos()) {
      set_m_npc1pos(from.m_npc1pos());
    }
    if (from.has_m_npc2pos()) {
      set_m_npc2pos(from.m_npc2pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodvalleyBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodvalleyBattle::CopyFrom(const E_GodvalleyBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodvalleyBattle::IsInitialized() const {

  return true;
}

void E_GodvalleyBattle::Swap(E_GodvalleyBattle* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_team1n_, other->m_team1n_);
    std::swap(m_team2n_, other->m_team2n_);
    std::swap(m_killscore_, other->m_killscore_);
    std::swap(m_killkeepscore_, other->m_killkeepscore_);
    std::swap(m_breakkillkeepscore_, other->m_breakkillkeepscore_);
    std::swap(m_killmonsterscore_, other->m_killmonsterscore_);
    std::swap(m_crystalscore_, other->m_crystalscore_);
    std::swap(m_crystalreborntime_, other->m_crystalreborntime_);
    std::swap(m_match_s_, other->m_match_s_);
    std::swap(m_duration_s_, other->m_duration_s_);
    std::swap(m_matchmapid_, other->m_matchmapid_);
    std::swap(m_matchmapentry_, other->m_matchmapentry_);
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(m_mapentry1_, other->m_mapentry1_);
    std::swap(m_mapentry2_, other->m_mapentry2_);
    std::swap(m_monster1_, other->m_monster1_);
    std::swap(m_monster2_, other->m_monster2_);
    std::swap(m_monster3_, other->m_monster3_);
    std::swap(m_npc1pos_, other->m_npc1pos_);
    std::swap(m_npc2pos_, other->m_npc2pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodvalleyBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodvalleyBattle_descriptor_;
  metadata.reflection = E_GodvalleyBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodvalleyBattle::kEGodvalleyBattleListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodvalleyBattle::Sheet_GodvalleyBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodvalleyBattle::InitAsDefaultInstance() {
}

Sheet_GodvalleyBattle::Sheet_GodvalleyBattle(const Sheet_GodvalleyBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodvalleyBattle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodvalleyBattle::~Sheet_GodvalleyBattle() {
  SharedDtor();
}

void Sheet_GodvalleyBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodvalleyBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodvalleyBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodvalleyBattle_descriptor_;
}

const Sheet_GodvalleyBattle& Sheet_GodvalleyBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Godvalley_2eproto();
  return *default_instance_;
}

Sheet_GodvalleyBattle* Sheet_GodvalleyBattle::default_instance_ = NULL;

Sheet_GodvalleyBattle* Sheet_GodvalleyBattle::New() const {
  return new Sheet_GodvalleyBattle;
}

void Sheet_GodvalleyBattle::Clear() {
  e_godvalleybattle_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodvalleyBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodvalleyBattle E_GodvalleyBattle_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodvalleyBattle_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godvalleybattle_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodvalleyBattle_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodvalleyBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodvalleyBattle E_GodvalleyBattle_List = 1;
  for (int i = 0; i < this->e_godvalleybattle_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godvalleybattle_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodvalleyBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodvalleyBattle E_GodvalleyBattle_List = 1;
  for (int i = 0; i < this->e_godvalleybattle_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godvalleybattle_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodvalleyBattle::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodvalleyBattle E_GodvalleyBattle_List = 1;
  total_size += 1 * this->e_godvalleybattle_list_size();
  for (int i = 0; i < this->e_godvalleybattle_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godvalleybattle_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodvalleyBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodvalleyBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodvalleyBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodvalleyBattle::MergeFrom(const Sheet_GodvalleyBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godvalleybattle_list_.MergeFrom(from.e_godvalleybattle_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodvalleyBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodvalleyBattle::CopyFrom(const Sheet_GodvalleyBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodvalleyBattle::IsInitialized() const {

  return true;
}

void Sheet_GodvalleyBattle::Swap(Sheet_GodvalleyBattle* other) {
  if (other != this) {
    e_godvalleybattle_list_.Swap(&other->e_godvalleybattle_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodvalleyBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodvalleyBattle_descriptor_;
  metadata.reflection = Sheet_GodvalleyBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
